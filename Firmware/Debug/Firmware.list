
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017178  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002188  08017308  08017308  00027308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019490  08019490  00030374  2**0
                  CONTENTS
  4 .ARM          00000008  08019490  08019490  00029490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019498  08019498  00030374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019498  08019498  00029498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801949c  0801949c  0002949c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000374  20000000  080194a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fa0  20000378  08019814  00030378  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003318  08019814  00033318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030374  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009500f  00000000  00000000  000303a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008417  00000000  00000000  000c53b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003b18  00000000  00000000  000cd7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000037a8  00000000  00000000  000d12e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b086  00000000  00000000  000d4a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038a4d  00000000  00000000  000ffb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea8e5  00000000  00000000  00138563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00222e48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000114fc  00000000  00000000  00222e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000378 	.word	0x20000378
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080172f0 	.word	0x080172f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	080172f0 	.word	0x080172f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <convertDegMinToDecDeg>:
#include <math.h>

GPS_t GPS;
//##################################################################################################################
double convertDegMinToDecDeg (float degMin)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	ed87 0a01 	vstr	s0, [r7, #4]
  double min = 0.0;
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double decDeg = 0.0;
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 
  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fa98 	bl	8000548 <__aeabi_f2d>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001088 <convertDegMinToDecDeg+0x98>
 8001020:	ec43 2b10 	vmov	d0, r2, r3
 8001024:	f016 f816 	bl	8017054 <fmod>
 8001028:	ed87 0b04 	vstr	d0, [r7, #16]
 
  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 800102c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001030:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001090 <convertDegMinToDecDeg+0xa0>
 8001034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001040:	edc7 7a01 	vstr	s15, [r7, #4]
  decDeg = degMin + ( min / 60 );
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff fa7f 	bl	8000548 <__aeabi_f2d>
 800104a:	4604      	mov	r4, r0
 800104c:	460d      	mov	r5, r1
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <convertDegMinToDecDeg+0xa4>)
 8001054:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001058:	f7ff fbf8 	bl	800084c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4620      	mov	r0, r4
 8001062:	4629      	mov	r1, r5
 8001064:	f7ff f912 	bl	800028c <__adddf3>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 
  return decDeg;
 8001070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001074:	ec43 2b17 	vmov	d7, r2, r3
}
 8001078:	eeb0 0a47 	vmov.f32	s0, s14
 800107c:	eef0 0a67 	vmov.f32	s1, s15
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bdb0      	pop	{r4, r5, r7, pc}
 8001086:	bf00      	nop
 8001088:	00000000 	.word	0x00000000
 800108c:	40590000 	.word	0x40590000
 8001090:	42c80000 	.word	0x42c80000
 8001094:	404e0000 	.word	0x404e0000

08001098 <GPS_Init>:
//##################################################################################################################
void	GPS_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	// Note: GPS_NRST sets the GPS LED, not the reset apparently
	memset(&GPS.GPGGA,0,sizeof(GPS.GPGGA));  // resets GPGGA to 0
 800109c:	2268      	movs	r2, #104	; 0x68
 800109e:	2100      	movs	r1, #0
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <GPS_Init+0x24>)
 80010a2:	f010 ff03 	bl	8011eac <memset>
	GPS.rxIndex=0;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <GPS_Init+0x28>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);	
 80010ae:	2201      	movs	r2, #1
 80010b0:	4904      	ldr	r1, [pc, #16]	; (80010c4 <GPS_Init+0x2c>)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <GPS_Init+0x30>)
 80010b4:	f009 fd63 	bl	800ab7e <HAL_UART_Receive_IT>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000cb8 	.word	0x20000cb8
 80010c0:	200008b0 	.word	0x200008b0
 80010c4:	20000cb2 	.word	0x20000cb2
 80010c8:	20001578 	.word	0x20001578

080010cc <GPS_CallBack>:
//##################################################################################################################
void	GPS_CallBack(void) /* Receiving GPS UART buffer byte by byte until it starts repeating */
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	4915      	ldr	r1, [pc, #84]	; (8001128 <GPS_CallBack+0x5c>)
 80010d4:	4815      	ldr	r0, [pc, #84]	; (800112c <GPS_CallBack+0x60>)
 80010d6:	f009 fd52 	bl	800ab7e <HAL_UART_Receive_IT>

	/* We expect 14 NMEA sentences separated by a $ symbol */
	GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <GPS_CallBack+0x64>)
 80010dc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <GPS_CallBack+0x64>)
 80010e4:	f893 1402 	ldrb.w	r1, [r3, #1026]	; 0x402
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <GPS_CallBack+0x64>)
 80010ea:	5499      	strb	r1, [r3, r2]
	if (GPS.rxTmp == 36) GPS.nmeaCounter++; // 36 is '$' in UTF8
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <GPS_CallBack+0x64>)
 80010ee:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80010f2:	2b24      	cmp	r3, #36	; 0x24
 80010f4:	d107      	bne.n	8001106 <GPS_CallBack+0x3a>
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <GPS_CallBack+0x64>)
 80010f8:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 80010fc:	3301      	adds	r3, #1
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <GPS_CallBack+0x64>)
 8001102:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	GPS.rxIndex++;
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <GPS_CallBack+0x64>)
 8001108:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800110c:	3301      	adds	r3, #1
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <GPS_CallBack+0x64>)
 8001112:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	if (GPS.nmeaCounter >= 13) GPS_Process();
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <GPS_CallBack+0x64>)
 8001118:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800111c:	2b0c      	cmp	r3, #12
 800111e:	d901      	bls.n	8001124 <GPS_CallBack+0x58>
 8001120:	f000 f808 	bl	8001134 <GPS_Process>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000cb2 	.word	0x20000cb2
 800112c:	20001578 	.word	0x20001578
 8001130:	200008b0 	.word	0x200008b0

08001134 <GPS_Process>:
//##################################################################################################################
void	GPS_Process(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b090      	sub	sp, #64	; 0x40
 8001138:	af08      	add	r7, sp, #32
	char	*str2;
	char	*str3;
	#if (_GPS_DEBUG==1)
	printf("%s",GPS.rxBuffer);
	#endif
	GPS.GPGGA.Buffer_Size = strlen(GPS.rxBuffer);
 800113a:	48bb      	ldr	r0, [pc, #748]	; (8001428 <GPS_Process+0x2f4>)
 800113c:	f7ff f848 	bl	80001d0 <strlen>
 8001140:	4603      	mov	r3, r0
 8001142:	b29a      	uxth	r2, r3
 8001144:	4bb8      	ldr	r3, [pc, #736]	; (8001428 <GPS_Process+0x2f4>)
 8001146:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
	str=strstr((char*)GPS.rxBuffer,"GNGGA,"); // GNZDA for where the date is in the buffer
 800114a:	49b8      	ldr	r1, [pc, #736]	; (800142c <GPS_Process+0x2f8>)
 800114c:	48b6      	ldr	r0, [pc, #728]	; (8001428 <GPS_Process+0x2f4>)
 800114e:	f011 fdc6 	bl	8012cde <strstr>
 8001152:	61f8      	str	r0, [r7, #28]
	if(str!=NULL)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 814d 	beq.w	80013f6 <GPS_Process+0x2c2>
	{
		memset(&GPS.GPGGA,0,sizeof(GPS.GPGGA));  // resets GPGGA to 0
 800115c:	2268      	movs	r2, #104	; 0x68
 800115e:	2100      	movs	r1, #0
 8001160:	48b3      	ldr	r0, [pc, #716]	; (8001430 <GPS_Process+0x2fc>)
 8001162:	f010 fea3 	bl	8011eac <memset>
		// GNGGA for where the position is in the buffer
		sscanf(str,"GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f",&GPS.GPGGA.HHMMSS,&GPS.GPGGA.Latitude,&GPS.GPGGA.NS_Indicator,&GPS.GPGGA.Longitude,&GPS.GPGGA.EW_Indicator,&GPS.GPGGA.PositionFixIndicator,&GPS.GPGGA.SatellitesUsed,&GPS.GPGGA.HDOP,&GPS.GPGGA.MSL_Altitude);  // GNGGA instead of GPGGA
 8001166:	4bb3      	ldr	r3, [pc, #716]	; (8001434 <GPS_Process+0x300>)
 8001168:	9306      	str	r3, [sp, #24]
 800116a:	4bb3      	ldr	r3, [pc, #716]	; (8001438 <GPS_Process+0x304>)
 800116c:	9305      	str	r3, [sp, #20]
 800116e:	4bb3      	ldr	r3, [pc, #716]	; (800143c <GPS_Process+0x308>)
 8001170:	9304      	str	r3, [sp, #16]
 8001172:	4bb3      	ldr	r3, [pc, #716]	; (8001440 <GPS_Process+0x30c>)
 8001174:	9303      	str	r3, [sp, #12]
 8001176:	4bb3      	ldr	r3, [pc, #716]	; (8001444 <GPS_Process+0x310>)
 8001178:	9302      	str	r3, [sp, #8]
 800117a:	4bb3      	ldr	r3, [pc, #716]	; (8001448 <GPS_Process+0x314>)
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	4bb3      	ldr	r3, [pc, #716]	; (800144c <GPS_Process+0x318>)
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	4bb3      	ldr	r3, [pc, #716]	; (8001450 <GPS_Process+0x31c>)
 8001184:	4ab3      	ldr	r2, [pc, #716]	; (8001454 <GPS_Process+0x320>)
 8001186:	49b4      	ldr	r1, [pc, #720]	; (8001458 <GPS_Process+0x324>)
 8001188:	69f8      	ldr	r0, [r7, #28]
 800118a:	f011 fd37 	bl	8012bfc <siscanf>
		if(GPS.GPGGA.PositionFixIndicator>0)
 800118e:	4ba6      	ldr	r3, [pc, #664]	; (8001428 <GPS_Process+0x2f4>)
 8001190:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 8001194:	2b00      	cmp	r3, #0
 8001196:	dd03      	ble.n	80011a0 <GPS_Process+0x6c>
			GPS.GPGGA.PositionFixIndicator=1;
 8001198:	4ba3      	ldr	r3, [pc, #652]	; (8001428 <GPS_Process+0x2f4>)
 800119a:	2201      	movs	r2, #1
 800119c:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
		if(GPS.GPGGA.NS_Indicator==0)
 80011a0:	4ba1      	ldr	r3, [pc, #644]	; (8001428 <GPS_Process+0x2f4>)
 80011a2:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d103      	bne.n	80011b2 <GPS_Process+0x7e>
			GPS.GPGGA.NS_Indicator='-';
 80011aa:	4b9f      	ldr	r3, [pc, #636]	; (8001428 <GPS_Process+0x2f4>)
 80011ac:	222d      	movs	r2, #45	; 0x2d
 80011ae:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
		if(GPS.GPGGA.EW_Indicator==0)
 80011b2:	4b9d      	ldr	r3, [pc, #628]	; (8001428 <GPS_Process+0x2f4>)
 80011b4:	f893 3430 	ldrb.w	r3, [r3, #1072]	; 0x430
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d103      	bne.n	80011c4 <GPS_Process+0x90>
			GPS.GPGGA.EW_Indicator='-';
 80011bc:	4b9a      	ldr	r3, [pc, #616]	; (8001428 <GPS_Process+0x2f4>)
 80011be:	222d      	movs	r2, #45	; 0x2d
 80011c0:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
		if(GPS.GPGGA.Geoid_Units==0)
 80011c4:	4b98      	ldr	r3, [pc, #608]	; (8001428 <GPS_Process+0x2f4>)
 80011c6:	f893 344c 	ldrb.w	r3, [r3, #1100]	; 0x44c
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d103      	bne.n	80011d6 <GPS_Process+0xa2>
			GPS.GPGGA.Geoid_Units='-';
 80011ce:	4b96      	ldr	r3, [pc, #600]	; (8001428 <GPS_Process+0x2f4>)
 80011d0:	222d      	movs	r2, #45	; 0x2d
 80011d2:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
		if(GPS.GPGGA.MSL_Units==0)
 80011d6:	4b94      	ldr	r3, [pc, #592]	; (8001428 <GPS_Process+0x2f4>)
 80011d8:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d103      	bne.n	80011e8 <GPS_Process+0xb4>
			GPS.GPGGA.MSL_Units='-';
 80011e0:	4b91      	ldr	r3, [pc, #580]	; (8001428 <GPS_Process+0x2f4>)
 80011e2:	222d      	movs	r2, #45	; 0x2d
 80011e4:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
		if (GPS.GPGGA.Latitude == 0.0f || GPS.GPGGA.Longitude == 0.0f) {
 80011e8:	4b8f      	ldr	r3, [pc, #572]	; (8001428 <GPS_Process+0x2f4>)
 80011ea:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fa:	d009      	beq.n	8001210 <GPS_Process+0xdc>
 80011fc:	4b8a      	ldr	r3, [pc, #552]	; (8001428 <GPS_Process+0x2f4>)
 80011fe:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	eef5 7a40 	vcmp.f32	s15, #0.0
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	d112      	bne.n	8001236 <GPS_Process+0x102>
			GPS.GPGGA.LatitudeDecimal = 0.0f;
 8001210:	4b85      	ldr	r3, [pc, #532]	; (8001428 <GPS_Process+0x2f4>)
 8001212:	f503 6183 	add.w	r1, r3, #1048	; 0x418
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	e9c1 2300 	strd	r2, r3, [r1]
			GPS.GPGGA.LongitudeDecimal = 0.0f;
 8001222:	4b81      	ldr	r3, [pc, #516]	; (8001428 <GPS_Process+0x2f4>)
 8001224:	f503 6185 	add.w	r1, r3, #1064	; 0x428
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e9c1 2300 	strd	r2, r3, [r1]
 8001234:	e023      	b.n	800127e <GPS_Process+0x14a>
		} else {
			GPS.GPGGA.LatitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Latitude);
 8001236:	4b7c      	ldr	r3, [pc, #496]	; (8001428 <GPS_Process+0x2f4>)
 8001238:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	eeb0 0a67 	vmov.f32	s0, s15
 8001244:	f7ff fed4 	bl	8000ff0 <convertDegMinToDecDeg>
 8001248:	eeb0 7a40 	vmov.f32	s14, s0
 800124c:	eef0 7a60 	vmov.f32	s15, s1
 8001250:	4b75      	ldr	r3, [pc, #468]	; (8001428 <GPS_Process+0x2f4>)
 8001252:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8001256:	ed83 7b00 	vstr	d7, [r3]
			GPS.GPGGA.LongitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Longitude);
 800125a:	4b73      	ldr	r3, [pc, #460]	; (8001428 <GPS_Process+0x2f4>)
 800125c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eeb0 0a67 	vmov.f32	s0, s15
 8001268:	f7ff fec2 	bl	8000ff0 <convertDegMinToDecDeg>
 800126c:	eeb0 7a40 	vmov.f32	s14, s0
 8001270:	eef0 7a60 	vmov.f32	s15, s1
 8001274:	4b6c      	ldr	r3, [pc, #432]	; (8001428 <GPS_Process+0x2f4>)
 8001276:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800127a:	ed83 7b00 	vstr	d7, [r3]
		}
		str2=strstr((char*)GPS.rxBuffer,"GNZDA,"); // GNZDA for where the date is in the buffer
 800127e:	4977      	ldr	r1, [pc, #476]	; (800145c <GPS_Process+0x328>)
 8001280:	4869      	ldr	r0, [pc, #420]	; (8001428 <GPS_Process+0x2f4>)
 8001282:	f011 fd2c 	bl	8012cde <strstr>
 8001286:	61b8      	str	r0, [r7, #24]
		if(str2!=NULL) {
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d078      	beq.n	8001380 <GPS_Process+0x24c>
			// format: GNZDA,181815.000,03,02,2021
			sscanf(str2,"GNZDA,%f,%d,%d,%d",&GPS.GPGGA.HHMMSS,&GPS.GPGGA.UTC_Day,&GPS.GPGGA.UTC_Month,&GPS.GPGGA.UTC_Year);
 800128e:	4b74      	ldr	r3, [pc, #464]	; (8001460 <GPS_Process+0x32c>)
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	4b74      	ldr	r3, [pc, #464]	; (8001464 <GPS_Process+0x330>)
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	4b74      	ldr	r3, [pc, #464]	; (8001468 <GPS_Process+0x334>)
 8001298:	4a6e      	ldr	r2, [pc, #440]	; (8001454 <GPS_Process+0x320>)
 800129a:	4974      	ldr	r1, [pc, #464]	; (800146c <GPS_Process+0x338>)
 800129c:	69b8      	ldr	r0, [r7, #24]
 800129e:	f011 fcad 	bl	8012bfc <siscanf>
			GPS.GPGGA.UTC_Hour = (int)(GPS.GPGGA.HHMMSS/10000.f);
 80012a2:	4b61      	ldr	r3, [pc, #388]	; (8001428 <GPS_Process+0x2f4>)
 80012a4:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80012a8:	ed93 7a00 	vldr	s14, [r3]
 80012ac:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001470 <GPS_Process+0x33c>
 80012b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80012bc:	793a      	ldrb	r2, [r7, #4]
 80012be:	4b5a      	ldr	r3, [pc, #360]	; (8001428 <GPS_Process+0x2f4>)
 80012c0:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			GPS.GPGGA.UTC_Min = (int)GPS.GPGGA.HHMMSS%10000/100.f;
 80012c4:	4b58      	ldr	r3, [pc, #352]	; (8001428 <GPS_Process+0x2f4>)
 80012c6:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d2:	ee17 2a90 	vmov	r2, s15
 80012d6:	4b67      	ldr	r3, [pc, #412]	; (8001474 <GPS_Process+0x340>)
 80012d8:	fb83 1302 	smull	r1, r3, r3, r2
 80012dc:	1319      	asrs	r1, r3, #12
 80012de:	17d3      	asrs	r3, r2, #31
 80012e0:	1acb      	subs	r3, r1, r3
 80012e2:	f242 7110 	movw	r1, #10000	; 0x2710
 80012e6:	fb01 f303 	mul.w	r3, r1, r3
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f4:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001478 <GPS_Process+0x344>
 80012f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001300:	edc7 7a01 	vstr	s15, [r7, #4]
 8001304:	793b      	ldrb	r3, [r7, #4]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b47      	ldr	r3, [pc, #284]	; (8001428 <GPS_Process+0x2f4>)
 800130a:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			GPS.GPGGA.UTC_Sec = (int)GPS.GPGGA.HHMMSS%100;
 800130e:	4b46      	ldr	r3, [pc, #280]	; (8001428 <GPS_Process+0x2f4>)
 8001310:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131c:	ee17 2a90 	vmov	r2, s15
 8001320:	4b56      	ldr	r3, [pc, #344]	; (800147c <GPS_Process+0x348>)
 8001322:	fb83 1302 	smull	r1, r3, r3, r2
 8001326:	1159      	asrs	r1, r3, #5
 8001328:	17d3      	asrs	r3, r2, #31
 800132a:	1acb      	subs	r3, r1, r3
 800132c:	2164      	movs	r1, #100	; 0x64
 800132e:	fb01 f303 	mul.w	r3, r1, r3
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b3c      	ldr	r3, [pc, #240]	; (8001428 <GPS_Process+0x2f4>)
 8001338:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
			GPS.GPGGA.YYYYMMDD = 10000*GPS.GPGGA.UTC_Year+100*GPS.GPGGA.UTC_Month+GPS.GPGGA.UTC_Day;
 800133c:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <GPS_Process+0x2f4>)
 800133e:	f8b3 3466 	ldrh.w	r3, [r3, #1126]	; 0x466
 8001342:	461a      	mov	r2, r3
 8001344:	f242 7310 	movw	r3, #10000	; 0x2710
 8001348:	fb03 f202 	mul.w	r2, r3, r2
 800134c:	4b36      	ldr	r3, [pc, #216]	; (8001428 <GPS_Process+0x2f4>)
 800134e:	f893 3465 	ldrb.w	r3, [r3, #1125]	; 0x465
 8001352:	4619      	mov	r1, r3
 8001354:	2364      	movs	r3, #100	; 0x64
 8001356:	fb03 f301 	mul.w	r3, r3, r1
 800135a:	4413      	add	r3, r2
 800135c:	4a32      	ldr	r2, [pc, #200]	; (8001428 <GPS_Process+0x2f4>)
 800135e:	f892 2464 	ldrb.w	r2, [r2, #1124]	; 0x464
 8001362:	4413      	add	r3, r2
 8001364:	461a      	mov	r2, r3
 8001366:	4b30      	ldr	r3, [pc, #192]	; (8001428 <GPS_Process+0x2f4>)
 8001368:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
			if (GPS.GPGGA.YYYYMMDD < 19700000) GPS.GPGGA.YYYYMMDD = 0;
 800136c:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <GPS_Process+0x2f4>)
 800136e:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8001372:	4a43      	ldr	r2, [pc, #268]	; (8001480 <GPS_Process+0x34c>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d803      	bhi.n	8001380 <GPS_Process+0x24c>
 8001378:	4b2b      	ldr	r3, [pc, #172]	; (8001428 <GPS_Process+0x2f4>)
 800137a:	2200      	movs	r2, #0
 800137c:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
		}
		str3=strstr((char*)GPS.rxBuffer,"GNRMC,"); // GNRMC for where the speed is in the buffer
 8001380:	4940      	ldr	r1, [pc, #256]	; (8001484 <GPS_Process+0x350>)
 8001382:	4829      	ldr	r0, [pc, #164]	; (8001428 <GPS_Process+0x2f4>)
 8001384:	f011 fcab 	bl	8012cde <strstr>
 8001388:	6178      	str	r0, [r7, #20]
		if(str3!=NULL) {
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d032      	beq.n	80013f6 <GPS_Process+0x2c2>
			uint8_t speed[5];
			if (sscanf(str3,"GNRMC,%*f,%*c,%*f,%*c,%*f,%*c,%4s,",&speed) > 0) {
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	461a      	mov	r2, r3
 8001396:	493c      	ldr	r1, [pc, #240]	; (8001488 <GPS_Process+0x354>)
 8001398:	6978      	ldr	r0, [r7, #20]
 800139a:	f011 fc2f 	bl	8012bfc <siscanf>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dd1e      	ble.n	80013e2 <GPS_Process+0x2ae>
				GPS.GPGGA.Speed_KTS = atof(speed);
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4618      	mov	r0, r3
 80013aa:	f010 fd51 	bl	8011e50 <atof>
 80013ae:	ec53 2b10 	vmov	r2, r3, d0
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fc17 	bl	8000be8 <__aeabi_d2f>
 80013ba:	4602      	mov	r2, r0
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <GPS_Process+0x2f4>)
 80013be:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80013c2:	601a      	str	r2, [r3, #0]
				GPS.GPGGA.Speed_KMH = 1.852f * GPS.GPGGA.Speed_KTS; // conversion from knots to km/h
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <GPS_Process+0x2f4>)
 80013c6:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800148c <GPS_Process+0x358>
 80013d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d6:	4b14      	ldr	r3, [pc, #80]	; (8001428 <GPS_Process+0x2f4>)
 80013d8:	f203 4354 	addw	r3, r3, #1108	; 0x454
 80013dc:	edc3 7a00 	vstr	s15, [r3]
 80013e0:	e009      	b.n	80013f6 <GPS_Process+0x2c2>
			}
			else {
				GPS.GPGGA.Speed_KTS = -1;
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <GPS_Process+0x2f4>)
 80013e4:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80013e8:	4a29      	ldr	r2, [pc, #164]	; (8001490 <GPS_Process+0x35c>)
 80013ea:	601a      	str	r2, [r3, #0]
				GPS.GPGGA.Speed_KMH = -1;
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <GPS_Process+0x2f4>)
 80013ee:	f203 4354 	addw	r3, r3, #1108	; 0x454
 80013f2:	4a27      	ldr	r2, [pc, #156]	; (8001490 <GPS_Process+0x35c>)
 80013f4:	601a      	str	r2, [r3, #0]
			}
		}
	}
	memset(GPS.rxBuffer,0,sizeof(GPS.rxBuffer)); // resets rxBuffer
 80013f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013fa:	2100      	movs	r1, #0
 80013fc:	480a      	ldr	r0, [pc, #40]	; (8001428 <GPS_Process+0x2f4>)
 80013fe:	f010 fd55 	bl	8011eac <memset>
	GPS.rxIndex=0;
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <GPS_Process+0x2f4>)
 8001404:	2200      	movs	r2, #0
 8001406:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	GPS.nmeaCounter=0;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <GPS_Process+0x2f4>)
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	GPS.LastTime=HAL_GetTick();
 8001412:	f004 fc8b 	bl	8005d2c <HAL_GetTick>
 8001416:	4603      	mov	r3, r0
 8001418:	4a03      	ldr	r2, [pc, #12]	; (8001428 <GPS_Process+0x2f4>)
 800141a:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
}
 800141e:	bf00      	nop
 8001420:	3720      	adds	r7, #32
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200008b0 	.word	0x200008b0
 800142c:	08017308 	.word	0x08017308
 8001430:	20000cb8 	.word	0x20000cb8
 8001434:	20000cf0 	.word	0x20000cf0
 8001438:	20000cec 	.word	0x20000cec
 800143c:	20000ce8 	.word	0x20000ce8
 8001440:	20000ce4 	.word	0x20000ce4
 8001444:	20000ce0 	.word	0x20000ce0
 8001448:	20000cd4 	.word	0x20000cd4
 800144c:	20000cd0 	.word	0x20000cd0
 8001450:	20000cc0 	.word	0x20000cc0
 8001454:	20000d10 	.word	0x20000d10
 8001458:	08017310 	.word	0x08017310
 800145c:	08017334 	.word	0x08017334
 8001460:	20000d16 	.word	0x20000d16
 8001464:	20000d15 	.word	0x20000d15
 8001468:	20000d14 	.word	0x20000d14
 800146c:	0801733c 	.word	0x0801733c
 8001470:	461c4000 	.word	0x461c4000
 8001474:	68db8bad 	.word	0x68db8bad
 8001478:	42c80000 	.word	0x42c80000
 800147c:	51eb851f 	.word	0x51eb851f
 8001480:	012c991f 	.word	0x012c991f
 8001484:	08017350 	.word	0x08017350
 8001488:	08017358 	.word	0x08017358
 800148c:	3fed0e56 	.word	0x3fed0e56
 8001490:	bf800000 	.word	0xbf800000

08001494 <CalcCrc>:

SPS30_t SPS30;

//##################################################################################################################
// Calculating checksum. Function provided in SPS30 datasheet
uint8_t CalcCrc(uint8_t data[2]) {
 8001494:	b480      	push	{r7}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	uint8_t crc = 0xFF;
 800149c:	23ff      	movs	r3, #255	; 0xff
 800149e:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 2; i++) {
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	e020      	b.n	80014e8 <CalcCrc+0x54>
	crc ^= data[i];
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
 80014b0:	4053      	eors	r3, r2
 80014b2:	75fb      	strb	r3, [r7, #23]
	for(uint8_t bit = 8; bit > 0; --bit) {
 80014b4:	2308      	movs	r3, #8
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e010      	b.n	80014dc <CalcCrc+0x48>
	  if(crc & 0x80) {
 80014ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	da06      	bge.n	80014d0 <CalcCrc+0x3c>
	  crc = (crc << 1) ^ 0x31u;
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 80014cc:	75fb      	strb	r3, [r7, #23]
 80014ce:	e002      	b.n	80014d6 <CalcCrc+0x42>
	  } else {
		crc = (crc << 1);
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	75fb      	strb	r3, [r7, #23]
	for(uint8_t bit = 8; bit > 0; --bit) {
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	3b01      	subs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1eb      	bne.n	80014ba <CalcCrc+0x26>
	for(int i = 0; i < 2; i++) {
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	3301      	adds	r3, #1
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	dddb      	ble.n	80014a6 <CalcCrc+0x12>
	   }
	 }
	}
	return crc;
 80014ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SPS30_start_measurement>:

//##################################################################################################################
void SPS30_start_measurement(void){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af02      	add	r7, sp, #8
	uint8_t arg[2] = {0x03, 0x00};
 8001502:	2303      	movs	r3, #3
 8001504:	81bb      	strh	r3, [r7, #12]
	uint8_t txBuf[5] = {0x00, 0x10, 0x03, 0x00, CalcCrc(arg)};
 8001506:	2300      	movs	r3, #0
 8001508:	713b      	strb	r3, [r7, #4]
 800150a:	2310      	movs	r3, #16
 800150c:	717b      	strb	r3, [r7, #5]
 800150e:	2303      	movs	r3, #3
 8001510:	71bb      	strb	r3, [r7, #6]
 8001512:	2300      	movs	r3, #0
 8001514:	71fb      	strb	r3, [r7, #7]
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ffba 	bl	8001494 <CalcCrc>
 8001520:	4603      	mov	r3, r0
 8001522:	723b      	strb	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 5, HAL_MAX_DELAY);
 8001524:	1d3a      	adds	r2, r7, #4
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2305      	movs	r3, #5
 800152e:	21d2      	movs	r1, #210	; 0xd2
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <SPS30_start_measurement+0x48>)
 8001532:	f005 fc95 	bl	8006e60 <HAL_I2C_Master_Transmit>
 8001536:	4603      	mov	r3, r0
 8001538:	73fb      	strb	r3, [r7, #15]

}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000db0 	.word	0x20000db0

08001548 <SPS30_read_data>:
	uint8_t txBuf[2] = {0x01, 0x04};
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);
}

//##################################################################################################################
void SPS30_read_data(void){
 8001548:	b580      	push	{r7, lr}
 800154a:	b096      	sub	sp, #88	; 0x58
 800154c:	af02      	add	r7, sp, #8
	uint8_t txBuf[2] = {0x03, 0x00};
 800154e:	2303      	movs	r3, #3
 8001550:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	uint8_t rxBuf[60];
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);
 8001554:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2302      	movs	r3, #2
 8001560:	21d2      	movs	r1, #210	; 0xd2
 8001562:	4835      	ldr	r0, [pc, #212]	; (8001638 <SPS30_read_data+0xf0>)
 8001564:	f005 fc7c 	bl	8006e60 <HAL_I2C_Master_Transmit>
 8001568:	4603      	mov	r3, r0
 800156a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	status = HAL_I2C_Master_Receive(&_SPS30_I2C, (_SPS30_addr<<1), &rxBuf, sizeof(rxBuf), HAL_MAX_DELAY);
 800156e:	f107 0208 	add.w	r2, r7, #8
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	233c      	movs	r3, #60	; 0x3c
 800157a:	21d2      	movs	r1, #210	; 0xd2
 800157c:	482e      	ldr	r0, [pc, #184]	; (8001638 <SPS30_read_data+0xf0>)
 800157e:	f005 fd6d 	bl	800705c <HAL_I2C_Master_Receive>
 8001582:	4603      	mov	r3, r0
 8001584:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for (int i=0; i<10; i++) { // 60 register buffer with 6 registers per float value
 8001588:	2300      	movs	r3, #0
 800158a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800158c:	e04b      	b.n	8001626 <SPS30_read_data+0xde>
		uint8_t b1 = rxBuf[i*6];
 800158e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800159c:	4413      	add	r3, r2
 800159e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80015a2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		uint8_t b2 = rxBuf[i*6+1]; // rxBuf[i*6+2] is checksum byte
 80015a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	3301      	adds	r3, #1
 80015b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80015b6:	4413      	add	r3, r2
 80015b8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80015bc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		uint8_t b3 = rxBuf[i*6+3];
 80015c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	3303      	adds	r3, #3
 80015cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80015d0:	4413      	add	r3, r2
 80015d2:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80015d6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		uint8_t b4 = rxBuf[i*6+4]; // rxBuf[i*6+5] is checksum byte
 80015da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	3304      	adds	r3, #4
 80015e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80015ea:	4413      	add	r3, r2
 80015ec:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80015f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		uint32_t value = (b1<<24)|(b2<<16)|(b3<<8)|(b4<<0); // merge bytes in correct order
 80015f4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80015f8:	061a      	lsls	r2, r3, #24
 80015fa:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80015fe:	041b      	lsls	r3, r3, #16
 8001600:	431a      	orrs	r2, r3
 8001602:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	431a      	orrs	r2, r3
 800160a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800160e:	4313      	orrs	r3, r2
 8001610:	607b      	str	r3, [r7, #4]
		SPS30.spsData[i] = *(float*)&value; // convert to float
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4909      	ldr	r1, [pc, #36]	; (800163c <SPS30_read_data+0xf4>)
 8001618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	601a      	str	r2, [r3, #0]
	for (int i=0; i<10; i++) { // 60 register buffer with 6 registers per float value
 8001620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001622:	3301      	adds	r3, #1
 8001624:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001628:	2b09      	cmp	r3, #9
 800162a:	ddb0      	ble.n	800158e <SPS30_read_data+0x46>
	}
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3750      	adds	r7, #80	; 0x50
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000db0 	.word	0x20000db0
 800163c:	20000d20 	.word	0x20000d20

08001640 <SPS30_clean_fan>:
	status = HAL_I2C_Master_Receive(&_SPS30_I2C, (_SPS30_addr<<1), &rxBuf, sizeof(rxBuf), HAL_MAX_DELAY);
	return rxBuf[1]; // 0x01 if data is ready, 0x00 if not
 }

//##################################################################################################################
void SPS30_clean_fan(void){
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af02      	add	r7, sp, #8
	uint8_t txBuf[2] = {0x56, 0x07};
 8001646:	f240 7356 	movw	r3, #1878	; 0x756
 800164a:	80bb      	strh	r3, [r7, #4]
 	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);
 800164c:	1d3a      	adds	r2, r7, #4
 800164e:	f04f 33ff 	mov.w	r3, #4294967295
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2302      	movs	r3, #2
 8001656:	21d2      	movs	r1, #210	; 0xd2
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <SPS30_clean_fan+0x2c>)
 800165a:	f005 fc01 	bl	8006e60 <HAL_I2C_Master_Transmit>
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000db0 	.word	0x20000db0

08001670 <SPS30_read_serialnumber>:
 	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);

}

//##################################################################################################################
void SPS30_read_serialnumber(void){
 8001670:	b580      	push	{r7, lr}
 8001672:	b092      	sub	sp, #72	; 0x48
 8001674:	af02      	add	r7, sp, #8
	uint8_t txBuf[2] = {0xD0, 0x33};
 8001676:	f243 33d0 	movw	r3, #13264	; 0x33d0
 800167a:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t rxBuf[48];
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);
 800167c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2302      	movs	r3, #2
 8001688:	21d2      	movs	r1, #210	; 0xd2
 800168a:	4833      	ldr	r0, [pc, #204]	; (8001758 <SPS30_read_serialnumber+0xe8>)
 800168c:	f005 fbe8 	bl	8006e60 <HAL_I2C_Master_Transmit>
 8001690:	4603      	mov	r3, r0
 8001692:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	status = HAL_I2C_Master_Receive(&_SPS30_I2C, (_SPS30_addr<<1), &rxBuf, sizeof(rxBuf), HAL_MAX_DELAY);
 8001696:	1d3a      	adds	r2, r7, #4
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2330      	movs	r3, #48	; 0x30
 80016a0:	21d2      	movs	r1, #210	; 0xd2
 80016a2:	482d      	ldr	r0, [pc, #180]	; (8001758 <SPS30_read_serialnumber+0xe8>)
 80016a4:	f005 fcda 	bl	800705c <HAL_I2C_Master_Receive>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (status == HAL_ERROR) {
 80016ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d104      	bne.n	80016c0 <SPS30_read_serialnumber+0x50>
		sprintf(SPS30.serial, "AQ-SENSOR");
 80016b6:	4929      	ldr	r1, [pc, #164]	; (800175c <SPS30_read_serialnumber+0xec>)
 80016b8:	4829      	ldr	r0, [pc, #164]	; (8001760 <SPS30_read_serialnumber+0xf0>)
 80016ba:	f011 fa7f 	bl	8012bbc <siprintf>
		return;
 80016be:	e047      	b.n	8001750 <SPS30_read_serialnumber+0xe0>
	}
	uint8_t k=0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for (int i=0; i<sizeof(rxBuf); i++) { // every 3 bytes there is a checksum
 80016c6:	2300      	movs	r3, #0
 80016c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80016ca:	e03e      	b.n	800174a <SPS30_read_serialnumber+0xda>
		if (i%3==0) {
 80016cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <SPS30_read_serialnumber+0xf4>)
 80016d0:	fb83 3201 	smull	r3, r2, r3, r1
 80016d4:	17cb      	asrs	r3, r1, #31
 80016d6:	1ad2      	subs	r2, r2, r3
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	1aca      	subs	r2, r1, r3
 80016e0:	2a00      	cmp	r2, #0
 80016e2:	d11c      	bne.n	800171e <SPS30_read_serialnumber+0xae>
			uint8_t arg[2] = {rxBuf[i],rxBuf[i+1]};
 80016e4:	1d3a      	adds	r2, r7, #4
 80016e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016e8:	4413      	add	r3, r2
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	703b      	strb	r3, [r7, #0]
 80016ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016f0:	3301      	adds	r3, #1
 80016f2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80016f6:	4413      	add	r3, r2
 80016f8:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80016fc:	707b      	strb	r3, [r7, #1]
			if (CalcCrc(arg) != rxBuf[i+2])
 80016fe:	463b      	mov	r3, r7
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fec7 	bl	8001494 <CalcCrc>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800170c:	3302      	adds	r3, #2
 800170e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001712:	440b      	add	r3, r1
 8001714:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001718:	429a      	cmp	r2, r3
 800171a:	d013      	beq.n	8001744 <SPS30_read_serialnumber+0xd4>
				return 0;
 800171c:	e018      	b.n	8001750 <SPS30_read_serialnumber+0xe0>
		} else {
		SPS30.serial[k] = rxBuf[i-1];
 800171e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001720:	1e5a      	subs	r2, r3, #1
 8001722:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001726:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800172a:	440a      	add	r2, r1
 800172c:	f812 1c3c 	ldrb.w	r1, [r2, #-60]
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <SPS30_read_serialnumber+0xf8>)
 8001732:	4413      	add	r3, r2
 8001734:	460a      	mov	r2, r1
 8001736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		k++;
 800173a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800173e:	3301      	adds	r3, #1
 8001740:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for (int i=0; i<sizeof(rxBuf); i++) { // every 3 bytes there is a checksum
 8001744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001746:	3301      	adds	r3, #1
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
 800174a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174c:	2b2f      	cmp	r3, #47	; 0x2f
 800174e:	d9bd      	bls.n	80016cc <SPS30_read_serialnumber+0x5c>
		}
	}
 }
 8001750:	3740      	adds	r7, #64	; 0x40
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000db0 	.word	0x20000db0
 800175c:	0801737c 	.word	0x0801737c
 8001760:	20000d48 	.word	0x20000d48
 8001764:	55555556 	.word	0x55555556
 8001768:	20000d20 	.word	0x20000d20

0800176c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001772:	463b      	mov	r3, r7
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <MX_ADC1_Init+0x98>)
 8001780:	4a21      	ldr	r2, [pc, #132]	; (8001808 <MX_ADC1_Init+0x9c>)
 8001782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <MX_ADC1_Init+0x98>)
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <MX_ADC1_Init+0x98>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <MX_ADC1_Init+0x98>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_ADC1_Init+0x98>)
 8001798:	2200      	movs	r2, #0
 800179a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <MX_ADC1_Init+0x98>)
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <MX_ADC1_Init+0x98>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <MX_ADC1_Init+0x98>)
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <MX_ADC1_Init+0xa0>)
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_ADC1_Init+0x98>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <MX_ADC1_Init+0x98>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_ADC1_Init+0x98>)
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_ADC1_Init+0x98>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017ca:	480e      	ldr	r0, [pc, #56]	; (8001804 <MX_ADC1_Init+0x98>)
 80017cc:	f004 fade 	bl	8005d8c <HAL_ADC_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017d6:	f001 fa65 	bl	8002ca4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e6:	463b      	mov	r3, r7
 80017e8:	4619      	mov	r1, r3
 80017ea:	4806      	ldr	r0, [pc, #24]	; (8001804 <MX_ADC1_Init+0x98>)
 80017ec:	f004 fc7c 	bl	80060e8 <HAL_ADC_ConfigChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80017f6:	f001 fa55 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000d68 	.word	0x20000d68
 8001808:	40012000 	.word	0x40012000
 800180c:	0f000001 	.word	0x0f000001

08001810 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a17      	ldr	r2, [pc, #92]	; (800188c <HAL_ADC_MspInit+0x7c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d127      	bne.n	8001882 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HAL_ADC_MspInit+0x80>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a15      	ldr	r2, [pc, #84]	; (8001890 <HAL_ADC_MspInit+0x80>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_ADC_MspInit+0x80>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_ADC_MspInit+0x80>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_ADC_MspInit+0x80>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <HAL_ADC_MspInit+0x80>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800186a:	2313      	movs	r3, #19
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186e:	2303      	movs	r3, #3
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <HAL_ADC_MspInit+0x84>)
 800187e:	f004 fff5 	bl	800686c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	; 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40012000 	.word	0x40012000
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000

08001898 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <MX_GPIO_Init+0x138>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a46      	ldr	r2, [pc, #280]	; (80019d0 <MX_GPIO_Init+0x138>)
 80018b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <MX_GPIO_Init+0x138>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b40      	ldr	r3, [pc, #256]	; (80019d0 <MX_GPIO_Init+0x138>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a3f      	ldr	r2, [pc, #252]	; (80019d0 <MX_GPIO_Init+0x138>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b3d      	ldr	r3, [pc, #244]	; (80019d0 <MX_GPIO_Init+0x138>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <MX_GPIO_Init+0x138>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a38      	ldr	r2, [pc, #224]	; (80019d0 <MX_GPIO_Init+0x138>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <MX_GPIO_Init+0x138>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <MX_GPIO_Init+0x138>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a31      	ldr	r2, [pc, #196]	; (80019d0 <MX_GPIO_Init+0x138>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <MX_GPIO_Init+0x138>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_NRST_GPIO_Port, GPS_NRST_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2120      	movs	r1, #32
 8001922:	482c      	ldr	r0, [pc, #176]	; (80019d4 <MX_GPIO_Init+0x13c>)
 8001924:	f005 f93e 	bl	8006ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NCS_GPIO_Port, SPI2_NCS_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800192e:	482a      	ldr	r0, [pc, #168]	; (80019d8 <MX_GPIO_Init+0x140>)
 8001930:	f005 f938 	bl	8006ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BT_RESET_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8001934:	2200      	movs	r2, #0
 8001936:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800193a:	4828      	ldr	r0, [pc, #160]	; (80019dc <MX_GPIO_Init+0x144>)
 800193c:	f005 f932 	bl	8006ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 8001940:	2304      	movs	r3, #4
 8001942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001944:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <MX_GPIO_Init+0x148>)
 8001946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4820      	ldr	r0, [pc, #128]	; (80019d4 <MX_GPIO_Init+0x13c>)
 8001954:	f004 ff8a 	bl	800686c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8001958:	2310      	movs	r3, #16
 800195a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	481a      	ldr	r0, [pc, #104]	; (80019d4 <MX_GPIO_Init+0x13c>)
 800196c:	f004 ff7e 	bl	800686c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_NRST_Pin;
 8001970:	2320      	movs	r3, #32
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_NRST_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4813      	ldr	r0, [pc, #76]	; (80019d4 <MX_GPIO_Init+0x13c>)
 8001988:	f004 ff70 	bl	800686c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NCS_Pin;
 800198c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	2301      	movs	r3, #1
 8001994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NCS_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <MX_GPIO_Init+0x140>)
 80019a6:	f004 ff61 	bl	800686c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BT_RESET_Pin|SD_CS_Pin;
 80019aa:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80019ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	4806      	ldr	r0, [pc, #24]	; (80019dc <MX_GPIO_Init+0x144>)
 80019c4:	f004 ff52 	bl	800686c <HAL_GPIO_Init>

}
 80019c8:	bf00      	nop
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40020400 	.word	0x40020400
 80019dc:	40020000 	.word	0x40020000
 80019e0:	10110000 	.word	0x10110000

080019e4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019ea:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <MX_I2C1_Init+0x54>)
 80019ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <MX_I2C1_Init+0x58>)
 80019f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a22:	f005 f8d9 	bl	8006bd8 <HAL_I2C_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a2c:	f001 f93a 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000e04 	.word	0x20000e04
 8001a38:	40005400 	.word	0x40005400
 8001a3c:	000186a0 	.word	0x000186a0

08001a40 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <MX_I2C2_Init+0x50>)
 8001a46:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <MX_I2C2_Init+0x54>)
 8001a48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_I2C2_Init+0x50>)
 8001a4c:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <MX_I2C2_Init+0x58>)
 8001a4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_I2C2_Init+0x50>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_I2C2_Init+0x50>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_I2C2_Init+0x50>)
 8001a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a62:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <MX_I2C2_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_I2C2_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <MX_I2C2_Init+0x50>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_I2C2_Init+0x50>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <MX_I2C2_Init+0x50>)
 8001a7e:	f005 f8ab 	bl	8006bd8 <HAL_I2C_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a88:	f001 f90c 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000db0 	.word	0x20000db0
 8001a94:	40005800 	.word	0x40005800
 8001a98:	000186a0 	.word	0x000186a0

08001a9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a32      	ldr	r2, [pc, #200]	; (8001b84 <HAL_I2C_MspInit+0xe8>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d12c      	bne.n	8001b18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_I2C_MspInit+0xec>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a30      	ldr	r2, [pc, #192]	; (8001b88 <HAL_I2C_MspInit+0xec>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <HAL_I2C_MspInit+0xec>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ada:	23c0      	movs	r3, #192	; 0xc0
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ade:	2312      	movs	r3, #18
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aea:	2304      	movs	r3, #4
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	4825      	ldr	r0, [pc, #148]	; (8001b8c <HAL_I2C_MspInit+0xf0>)
 8001af6:	f004 feb9 	bl	800686c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <HAL_I2C_MspInit+0xec>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a21      	ldr	r2, [pc, #132]	; (8001b88 <HAL_I2C_MspInit+0xec>)
 8001b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_I2C_MspInit+0xec>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b16:	e031      	b.n	8001b7c <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <HAL_I2C_MspInit+0xf4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d12c      	bne.n	8001b7c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_I2C_MspInit+0xec>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <HAL_I2C_MspInit+0xec>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_I2C_MspInit+0xec>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b44:	2312      	movs	r3, #18
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b50:	2304      	movs	r3, #4
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480c      	ldr	r0, [pc, #48]	; (8001b8c <HAL_I2C_MspInit+0xf0>)
 8001b5c:	f004 fe86 	bl	800686c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_I2C_MspInit+0xec>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <HAL_I2C_MspInit+0xec>)
 8001b6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_I2C_MspInit+0xec>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3730      	adds	r7, #48	; 0x30
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40005400 	.word	0x40005400
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40005800 	.word	0x40005800

08001b94 <HAL_UART_RxCpltCallback>:
extern uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr);

static u8g2_t u8g2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) GPS_CallBack();
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a09      	ldr	r2, [pc, #36]	; (8001bc4 <HAL_UART_RxCpltCallback+0x30>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_UART_RxCpltCallback+0x14>
 8001ba4:	f7ff fa92 	bl	80010cc <GPS_CallBack>
	if (huart == &huart1) HAL_UART_Receive_IT(&huart1,&readBuf,1);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_UART_RxCpltCallback+0x34>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d104      	bne.n	8001bba <HAL_UART_RxCpltCallback+0x26>
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4906      	ldr	r1, [pc, #24]	; (8001bcc <HAL_UART_RxCpltCallback+0x38>)
 8001bb4:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <HAL_UART_RxCpltCallback+0x34>)
 8001bb6:	f008 ffe2 	bl	800ab7e <HAL_UART_Receive_IT>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20001578 	.word	0x20001578
 8001bc8:	20001534 	.word	0x20001534
 8001bcc:	20001388 	.word	0x20001388

08001bd0 <screen_format>:

char * screen_format(int val) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	if (val < 99 && val >= -9) {
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b62      	cmp	r3, #98	; 0x62
 8001bdc:	dc12      	bgt.n	8001c04 <screen_format+0x34>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f113 0f09 	cmn.w	r3, #9
 8001be4:	db0e      	blt.n	8001c04 <screen_format+0x34>
		if (val <= 9) {
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b09      	cmp	r3, #9
 8001bea:	dc05      	bgt.n	8001bf8 <screen_format+0x28>
			sprintf(screen_str, " %d", val);
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	490a      	ldr	r1, [pc, #40]	; (8001c18 <screen_format+0x48>)
 8001bf0:	480a      	ldr	r0, [pc, #40]	; (8001c1c <screen_format+0x4c>)
 8001bf2:	f010 ffe3 	bl	8012bbc <siprintf>
		if (val <= 9) {
 8001bf6:	e00a      	b.n	8001c0e <screen_format+0x3e>
		} else {
			sprintf(screen_str, "%d", val);
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4909      	ldr	r1, [pc, #36]	; (8001c20 <screen_format+0x50>)
 8001bfc:	4807      	ldr	r0, [pc, #28]	; (8001c1c <screen_format+0x4c>)
 8001bfe:	f010 ffdd 	bl	8012bbc <siprintf>
		if (val <= 9) {
 8001c02:	e004      	b.n	8001c0e <screen_format+0x3e>
		}

	} else {
		sprintf(screen_str, "%d", 99);
 8001c04:	2263      	movs	r2, #99	; 0x63
 8001c06:	4906      	ldr	r1, [pc, #24]	; (8001c20 <screen_format+0x50>)
 8001c08:	4804      	ldr	r0, [pc, #16]	; (8001c1c <screen_format+0x4c>)
 8001c0a:	f010 ffd7 	bl	8012bbc <siprintf>
	}

	return screen_str;
 8001c0e:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <screen_format+0x4c>)
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	08017388 	.word	0x08017388
 8001c1c:	20001384 	.word	0x20001384
 8001c20:	0801738c 	.word	0x0801738c

08001c24 <Linear>:

int Linear(int AQIhigh, int AQIlow, float Conchigh, float Conclow, float Conc) {
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6178      	str	r0, [r7, #20]
 8001c2c:	6139      	str	r1, [r7, #16]
 8001c2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c32:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c36:	ed87 1a01 	vstr	s2, [r7, #4]
	return ((Conc-Conclow)/(Conchigh-Conclow))*(AQIhigh-AQIlow)+AQIlow;
 8001c3a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c42:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c46:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c7a:	ee17 3a90 	vmov	r3, s15
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	371c      	adds	r7, #28
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	0000      	movs	r0, r0
 8001c8c:	0000      	movs	r0, r0
	...

08001c90 <AQIPM25>:


int AQIPM25(float c) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	ed87 0a01 	vstr	s0, [r7, #4]

	if (c>=0 && c<12.1)
 8001c9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca6:	db16      	blt.n	8001cd6 <AQIPM25+0x46>
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7fe fc4d 	bl	8000548 <__aeabi_f2d>
 8001cae:	a35a      	add	r3, pc, #360	; (adr r3, 8001e18 <AQIPM25+0x188>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe ff12 	bl	8000adc <__aeabi_dcmplt>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <AQIPM25+0x46>
	{
		return(Linear(50,0,12,0,c));
 8001cbe:	ed97 1a01 	vldr	s2, [r7, #4]
 8001cc2:	eddf 0a57 	vldr	s1, [pc, #348]	; 8001e20 <AQIPM25+0x190>
 8001cc6:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2032      	movs	r0, #50	; 0x32
 8001cce:	f7ff ffa9 	bl	8001c24 <Linear>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	e09c      	b.n	8001e10 <AQIPM25+0x180>
	}
	else if (c>=12.1 && c<35.5)
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe fc36 	bl	8000548 <__aeabi_f2d>
 8001cdc:	a34e      	add	r3, pc, #312	; (adr r3, 8001e18 <AQIPM25+0x188>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	f7fe ff0f 	bl	8000b04 <__aeabi_dcmpge>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d014      	beq.n	8001d16 <AQIPM25+0x86>
 8001cec:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cf0:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001e24 <AQIPM25+0x194>
 8001cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfc:	d50b      	bpl.n	8001d16 <AQIPM25+0x86>
	{
		return(Linear(100,51,35.4,12.1,c));
 8001cfe:	ed97 1a01 	vldr	s2, [r7, #4]
 8001d02:	eddf 0a49 	vldr	s1, [pc, #292]	; 8001e28 <AQIPM25+0x198>
 8001d06:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8001e2c <AQIPM25+0x19c>
 8001d0a:	2133      	movs	r1, #51	; 0x33
 8001d0c:	2064      	movs	r0, #100	; 0x64
 8001d0e:	f7ff ff89 	bl	8001c24 <Linear>
 8001d12:	4603      	mov	r3, r0
 8001d14:	e07c      	b.n	8001e10 <AQIPM25+0x180>
	}
	else if (c>=35.5 && c<55.5)
 8001d16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d1a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001e24 <AQIPM25+0x194>
 8001d1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d26:	db14      	blt.n	8001d52 <AQIPM25+0xc2>
 8001d28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001e30 <AQIPM25+0x1a0>
 8001d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d38:	d50b      	bpl.n	8001d52 <AQIPM25+0xc2>
	{
		return(Linear(150,101,55.4,35.5,c));
 8001d3a:	ed97 1a01 	vldr	s2, [r7, #4]
 8001d3e:	eddf 0a39 	vldr	s1, [pc, #228]	; 8001e24 <AQIPM25+0x194>
 8001d42:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001e34 <AQIPM25+0x1a4>
 8001d46:	2165      	movs	r1, #101	; 0x65
 8001d48:	2096      	movs	r0, #150	; 0x96
 8001d4a:	f7ff ff6b 	bl	8001c24 <Linear>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	e05e      	b.n	8001e10 <AQIPM25+0x180>
	}
	else if (c>=55.5 && c<150.5)
 8001d52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d56:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001e30 <AQIPM25+0x1a0>
 8001d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	db14      	blt.n	8001d8e <AQIPM25+0xfe>
 8001d64:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d68:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001e38 <AQIPM25+0x1a8>
 8001d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d74:	d50b      	bpl.n	8001d8e <AQIPM25+0xfe>
	{
		return(Linear(200,151,150.4,55.5,c));
 8001d76:	ed97 1a01 	vldr	s2, [r7, #4]
 8001d7a:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8001e30 <AQIPM25+0x1a0>
 8001d7e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8001e3c <AQIPM25+0x1ac>
 8001d82:	2197      	movs	r1, #151	; 0x97
 8001d84:	20c8      	movs	r0, #200	; 0xc8
 8001d86:	f7ff ff4d 	bl	8001c24 <Linear>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	e040      	b.n	8001e10 <AQIPM25+0x180>
	}
	else if (c>=150.5 && c<250.5)
 8001d8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d92:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001e38 <AQIPM25+0x1a8>
 8001d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	db15      	blt.n	8001dcc <AQIPM25+0x13c>
 8001da0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001e40 <AQIPM25+0x1b0>
 8001da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db0:	d50c      	bpl.n	8001dcc <AQIPM25+0x13c>
	{
		return(Linear(300,201,250.4,150.5,c));
 8001db2:	ed97 1a01 	vldr	s2, [r7, #4]
 8001db6:	eddf 0a20 	vldr	s1, [pc, #128]	; 8001e38 <AQIPM25+0x1a8>
 8001dba:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001e44 <AQIPM25+0x1b4>
 8001dbe:	21c9      	movs	r1, #201	; 0xc9
 8001dc0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001dc4:	f7ff ff2e 	bl	8001c24 <Linear>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	e021      	b.n	8001e10 <AQIPM25+0x180>
	}
	else if (c>=250.5 && c<500)
 8001dcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dd0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001e40 <AQIPM25+0x1b0>
 8001dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ddc:	db16      	blt.n	8001e0c <AQIPM25+0x17c>
 8001dde:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001e48 <AQIPM25+0x1b8>
 8001de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dee:	d50d      	bpl.n	8001e0c <AQIPM25+0x17c>
	{
		return(Linear(500,301,500.4,250.5,c));
 8001df0:	ed97 1a01 	vldr	s2, [r7, #4]
 8001df4:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001e40 <AQIPM25+0x1b0>
 8001df8:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001e4c <AQIPM25+0x1bc>
 8001dfc:	f240 112d 	movw	r1, #301	; 0x12d
 8001e00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e04:	f7ff ff0e 	bl	8001c24 <Linear>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	e001      	b.n	8001e10 <AQIPM25+0x180>
	}
	else return 500;
 8001e0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	33333333 	.word	0x33333333
 8001e1c:	40283333 	.word	0x40283333
 8001e20:	00000000 	.word	0x00000000
 8001e24:	420e0000 	.word	0x420e0000
 8001e28:	4141999a 	.word	0x4141999a
 8001e2c:	420d999a 	.word	0x420d999a
 8001e30:	425e0000 	.word	0x425e0000
 8001e34:	425d999a 	.word	0x425d999a
 8001e38:	43168000 	.word	0x43168000
 8001e3c:	43166666 	.word	0x43166666
 8001e40:	437a8000 	.word	0x437a8000
 8001e44:	437a6666 	.word	0x437a6666
 8001e48:	43fa0000 	.word	0x43fa0000
 8001e4c:	43fa3333 	.word	0x43fa3333

08001e50 <gps_dots>:

void gps_dots(int gps_satellites, int fix) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
	if (gps_satellites > 0) u8g2_DrawRBox(&u8g2, 126, 11, 2, 2, 1); // any fix = 1 bar
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	dd09      	ble.n	8001e74 <gps_dots+0x24>
 8001e60:	2301      	movs	r3, #1
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	2302      	movs	r3, #2
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2302      	movs	r3, #2
 8001e6a:	220b      	movs	r2, #11
 8001e6c:	217e      	movs	r1, #126	; 0x7e
 8001e6e:	4817      	ldr	r0, [pc, #92]	; (8001ecc <gps_dots+0x7c>)
 8001e70:	f001 fd1a 	bl	80038a8 <u8g2_DrawRBox>
	if (gps_satellites > 3) u8g2_DrawRBox(&u8g2, 123, 11, 2, 4, 1); // indoors I typically have 4-5 sats
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	dd09      	ble.n	8001e8e <gps_dots+0x3e>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	2304      	movs	r3, #4
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2302      	movs	r3, #2
 8001e84:	220b      	movs	r2, #11
 8001e86:	217b      	movs	r1, #123	; 0x7b
 8001e88:	4810      	ldr	r0, [pc, #64]	; (8001ecc <gps_dots+0x7c>)
 8001e8a:	f001 fd0d 	bl	80038a8 <u8g2_DrawRBox>
	if (gps_satellites > 4) u8g2_DrawRBox(&u8g2, 120, 11, 2, 6, 1);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	dd09      	ble.n	8001ea8 <gps_dots+0x58>
 8001e94:	2301      	movs	r3, #1
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	2306      	movs	r3, #6
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	220b      	movs	r2, #11
 8001ea0:	2178      	movs	r1, #120	; 0x78
 8001ea2:	480a      	ldr	r0, [pc, #40]	; (8001ecc <gps_dots+0x7c>)
 8001ea4:	f001 fd00 	bl	80038a8 <u8g2_DrawRBox>
	if (gps_satellites > 5) u8g2_DrawRBox(&u8g2, 117, 11, 2, 8, 1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	dd09      	ble.n	8001ec2 <gps_dots+0x72>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	220b      	movs	r2, #11
 8001eba:	2175      	movs	r1, #117	; 0x75
 8001ebc:	4803      	ldr	r0, [pc, #12]	; (8001ecc <gps_dots+0x7c>)
 8001ebe:	f001 fcf3 	bl	80038a8 <u8g2_DrawRBox>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	2000039c 	.word	0x2000039c

08001ed0 <battery_dots_vert>:

void battery_dots_vert(float voltage) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage < 3.2) // then battery has ~30min remaining
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fb34 	bl	8000548 <__aeabi_f2d>
 8001ee0:	a349      	add	r3, pc, #292	; (adr r3, 8002008 <battery_dots_vert+0x138>)
 8001ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee6:	f7fe fdf9 	bl	8000adc <__aeabi_dcmplt>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <battery_dots_vert+0x2e>
		if (counter%2 == 0) return;
 8001ef0:	4b4f      	ldr	r3, [pc, #316]	; (8002030 <battery_dots_vert+0x160>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d07d      	beq.n	8001ffa <battery_dots_vert+0x12a>
    u8g2_DrawRFrame(&u8g2, 117-0, 0, 11, 8, 1);
 8001efe:	2301      	movs	r3, #1
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	2308      	movs	r3, #8
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	230b      	movs	r3, #11
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2175      	movs	r1, #117	; 0x75
 8001f0c:	4849      	ldr	r0, [pc, #292]	; (8002034 <battery_dots_vert+0x164>)
 8001f0e:	f001 fd7b 	bl	8003a08 <u8g2_DrawRFrame>
    u8g2_DrawRBox(&u8g2, 116-0, 3, 2, 2, 1);
 8001f12:	2301      	movs	r3, #1
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	2302      	movs	r3, #2
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	2174      	movs	r1, #116	; 0x74
 8001f20:	4844      	ldr	r0, [pc, #272]	; (8002034 <battery_dots_vert+0x164>)
 8001f22:	f001 fcc1 	bl	80038a8 <u8g2_DrawRBox>
	if (voltage > 3.2) u8g2_DrawRBox(&u8g2, 127-0, 2, 2, 4, 1); // -62
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7fe fb0e 	bl	8000548 <__aeabi_f2d>
 8001f2c:	a336      	add	r3, pc, #216	; (adr r3, 8002008 <battery_dots_vert+0x138>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fdf1 	bl	8000b18 <__aeabi_dcmpgt>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d009      	beq.n	8001f50 <battery_dots_vert+0x80>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	2304      	movs	r3, #4
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2302      	movs	r3, #2
 8001f46:	2202      	movs	r2, #2
 8001f48:	217f      	movs	r1, #127	; 0x7f
 8001f4a:	483a      	ldr	r0, [pc, #232]	; (8002034 <battery_dots_vert+0x164>)
 8001f4c:	f001 fcac 	bl	80038a8 <u8g2_DrawRBox>
	if (voltage > 3.35) u8g2_DrawRBox(&u8g2, 125-0, 2, 2, 4, 1);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7fe faf9 	bl	8000548 <__aeabi_f2d>
 8001f56:	a32e      	add	r3, pc, #184	; (adr r3, 8002010 <battery_dots_vert+0x140>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe fddc 	bl	8000b18 <__aeabi_dcmpgt>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <battery_dots_vert+0xaa>
 8001f66:	2301      	movs	r3, #1
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2302      	movs	r3, #2
 8001f70:	2202      	movs	r2, #2
 8001f72:	217d      	movs	r1, #125	; 0x7d
 8001f74:	482f      	ldr	r0, [pc, #188]	; (8002034 <battery_dots_vert+0x164>)
 8001f76:	f001 fc97 	bl	80038a8 <u8g2_DrawRBox>
	if (voltage > 3.45) u8g2_DrawRBox(&u8g2, 123-0, 2, 2, 4, 1);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7fe fae4 	bl	8000548 <__aeabi_f2d>
 8001f80:	a325      	add	r3, pc, #148	; (adr r3, 8002018 <battery_dots_vert+0x148>)
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	f7fe fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d009      	beq.n	8001fa4 <battery_dots_vert+0xd4>
 8001f90:	2301      	movs	r3, #1
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2304      	movs	r3, #4
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2302      	movs	r3, #2
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	217b      	movs	r1, #123	; 0x7b
 8001f9e:	4825      	ldr	r0, [pc, #148]	; (8002034 <battery_dots_vert+0x164>)
 8001fa0:	f001 fc82 	bl	80038a8 <u8g2_DrawRBox>
	if (voltage > 3.55) u8g2_DrawRBox(&u8g2, 121-0, 2, 2, 4, 1);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7fe facf 	bl	8000548 <__aeabi_f2d>
 8001faa:	a31d      	add	r3, pc, #116	; (adr r3, 8002020 <battery_dots_vert+0x150>)
 8001fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb0:	f7fe fdb2 	bl	8000b18 <__aeabi_dcmpgt>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <battery_dots_vert+0xfe>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	2179      	movs	r1, #121	; 0x79
 8001fc8:	481a      	ldr	r0, [pc, #104]	; (8002034 <battery_dots_vert+0x164>)
 8001fca:	f001 fc6d 	bl	80038a8 <u8g2_DrawRBox>
	if (voltage > 3.65) u8g2_DrawRBox(&u8g2, 119-0, 2, 2, 4, 1);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe faba 	bl	8000548 <__aeabi_f2d>
 8001fd4:	a314      	add	r3, pc, #80	; (adr r3, 8002028 <battery_dots_vert+0x158>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f7fe fd9d 	bl	8000b18 <__aeabi_dcmpgt>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <battery_dots_vert+0x12c>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2304      	movs	r3, #4
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2302      	movs	r3, #2
 8001fee:	2202      	movs	r2, #2
 8001ff0:	2177      	movs	r1, #119	; 0x77
 8001ff2:	4810      	ldr	r0, [pc, #64]	; (8002034 <battery_dots_vert+0x164>)
 8001ff4:	f001 fc58 	bl	80038a8 <u8g2_DrawRBox>
 8001ff8:	e000      	b.n	8001ffc <battery_dots_vert+0x12c>
		if (counter%2 == 0) return;
 8001ffa:	bf00      	nop
}
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	f3af 8000 	nop.w
 8002008:	9999999a 	.word	0x9999999a
 800200c:	40099999 	.word	0x40099999
 8002010:	cccccccd 	.word	0xcccccccd
 8002014:	400acccc 	.word	0x400acccc
 8002018:	9999999a 	.word	0x9999999a
 800201c:	400b9999 	.word	0x400b9999
 8002020:	66666666 	.word	0x66666666
 8002024:	400c6666 	.word	0x400c6666
 8002028:	33333333 	.word	0x33333333
 800202c:	400d3333 	.word	0x400d3333
 8002030:	20000394 	.word	0x20000394
 8002034:	2000039c 	.word	0x2000039c

08002038 <initDisplay>:

void initDisplay() {
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0

	  /* I2C Interface */
	  u8g2_Setup_ssd1306_i2c_128x32_univision_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_i2c, u8x8_stm32_gpio_and_delay);
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <initDisplay+0x2c>)
 800203e:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <initDisplay+0x30>)
 8002040:	490a      	ldr	r1, [pc, #40]	; (800206c <initDisplay+0x34>)
 8002042:	480b      	ldr	r0, [pc, #44]	; (8002070 <initDisplay+0x38>)
 8002044:	f002 f8b2 	bl	80041ac <u8g2_Setup_ssd1306_i2c_128x32_univision_f>
//	  u8g2_setBusClock

	  /* Initialize Display */
	  u8g2_InitDisplay(&u8g2);
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <initDisplay+0x38>)
 800204a:	f003 fd3d 	bl	8005ac8 <u8x8_InitDisplay>
	  u8g2_SetPowerSave(&u8g2, 0);
 800204e:	2100      	movs	r1, #0
 8002050:	4807      	ldr	r0, [pc, #28]	; (8002070 <initDisplay+0x38>)
 8002052:	f003 fd48 	bl	8005ae6 <u8x8_SetPowerSave>
	  u8g2_SetFontDirection(&u8g2, 2);
 8002056:	2102      	movs	r1, #2
 8002058:	4805      	ldr	r0, [pc, #20]	; (8002070 <initDisplay+0x38>)
 800205a:	f002 fe57 	bl	8004d0c <u8g2_SetFontDirection>

}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	0800358d 	.word	0x0800358d
 8002068:	080035c1 	.word	0x080035c1
 800206c:	08018eb8 	.word	0x08018eb8
 8002070:	2000039c 	.word	0x2000039c

08002074 <updateDisplay>:

void updateDisplay() {
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af02      	add	r7, sp, #8

	  float pm25 = SPS30.spsData[1];
 800207a:	4b8c      	ldr	r3, [pc, #560]	; (80022ac <updateDisplay+0x238>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
	  char screen_str[16];

	  float aqi = AQIPM25(pm25);
 8002080:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002084:	f7ff fe04 	bl	8001c90 <AQIPM25>
 8002088:	ee07 0a90 	vmov	s15, r0
 800208c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002090:	edc7 7a08 	vstr	s15, [r7, #32]
	  int barwidth = (128-55);
 8002094:	2349      	movs	r3, #73	; 0x49
 8002096:	61fb      	str	r3, [r7, #28]
	  int aqi_width = barwidth*aqi/500. +2;
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80020a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020aa:	ee17 0a90 	vmov	r0, s15
 80020ae:	f7fe fa4b 	bl	8000548 <__aeabi_f2d>
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	4b7e      	ldr	r3, [pc, #504]	; (80022b0 <updateDisplay+0x23c>)
 80020b8:	f7fe fbc8 	bl	800084c <__aeabi_ddiv>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020cc:	f7fe f8de 	bl	800028c <__adddf3>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f7fe fd3e 	bl	8000b58 <__aeabi_d2iz>
 80020dc:	4603      	mov	r3, r0
 80020de:	61bb      	str	r3, [r7, #24]

	  int gps_satellites = GPS.GPGGA.SatellitesUsed;
 80020e0:	4b74      	ldr	r3, [pc, #464]	; (80022b4 <updateDisplay+0x240>)
 80020e2:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80020e6:	617b      	str	r3, [r7, #20]

	  float vbat = batteryVoltage;
 80020e8:	4b73      	ldr	r3, [pc, #460]	; (80022b8 <updateDisplay+0x244>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	613b      	str	r3, [r7, #16]

	  u8g2_FirstPage(&u8g2);
 80020ee:	4873      	ldr	r0, [pc, #460]	; (80022bc <updateDisplay+0x248>)
 80020f0:	f001 fdca 	bl	8003c88 <u8g2_FirstPage>
	  		do
	  		{
	  			u8g2_ClearBuffer(&u8g2);
 80020f4:	4871      	ldr	r0, [pc, #452]	; (80022bc <updateDisplay+0x248>)
 80020f6:	f001 fd3c 	bl	8003b72 <u8g2_ClearBuffer>

	  			// numbers
	  	  u8g2_SetFont(&u8g2, u8g2_font_logisoso30_tn);
 80020fa:	4971      	ldr	r1, [pc, #452]	; (80022c0 <updateDisplay+0x24c>)
 80020fc:	486f      	ldr	r0, [pc, #444]	; (80022bc <updateDisplay+0x248>)
 80020fe:	f002 fdeb 	bl	8004cd8 <u8g2_SetFont>
          u8g2_DrawStr(&u8g2, 50, 0, screen_format((int)pm25));
 8002102:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210a:	ee17 0a90 	vmov	r0, s15
 800210e:	f7ff fd5f 	bl	8001bd0 <screen_format>
 8002112:	4603      	mov	r3, r0
 8002114:	2200      	movs	r2, #0
 8002116:	2132      	movs	r1, #50	; 0x32
 8002118:	4868      	ldr	r0, [pc, #416]	; (80022bc <updateDisplay+0x248>)
 800211a:	f002 fd3b 	bl	8004b94 <u8g2_DrawStr>
          u8g2_SetFont(&u8g2, u8g2_font_logisoso16_tn);
 800211e:	4969      	ldr	r1, [pc, #420]	; (80022c4 <updateDisplay+0x250>)
 8002120:	4866      	ldr	r0, [pc, #408]	; (80022bc <updateDisplay+0x248>)
 8002122:	f002 fdd9 	bl	8004cd8 <u8g2_SetFont>
          if (pm25<100) sprintf(screen_str, ".%d", (int)(pm25*10)%10);
 8002126:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800212a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80022c8 <updateDisplay+0x254>
 800212e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002136:	d51a      	bpl.n	800216e <updateDisplay+0xfa>
 8002138:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800213c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002148:	ee17 1a90 	vmov	r1, s15
 800214c:	4b5f      	ldr	r3, [pc, #380]	; (80022cc <updateDisplay+0x258>)
 800214e:	fb83 2301 	smull	r2, r3, r3, r1
 8002152:	109a      	asrs	r2, r3, #2
 8002154:	17cb      	asrs	r3, r1, #31
 8002156:	1ad2      	subs	r2, r2, r3
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	1aca      	subs	r2, r1, r3
 8002162:	463b      	mov	r3, r7
 8002164:	495a      	ldr	r1, [pc, #360]	; (80022d0 <updateDisplay+0x25c>)
 8002166:	4618      	mov	r0, r3
 8002168:	f010 fd28 	bl	8012bbc <siprintf>
 800216c:	e005      	b.n	800217a <updateDisplay+0x106>
          else sprintf(screen_str, ".%d", 9);
 800216e:	463b      	mov	r3, r7
 8002170:	2209      	movs	r2, #9
 8002172:	4957      	ldr	r1, [pc, #348]	; (80022d0 <updateDisplay+0x25c>)
 8002174:	4618      	mov	r0, r3
 8002176:	f010 fd21 	bl	8012bbc <siprintf>
          u8g2_DrawStr(&u8g2, 14, 14, screen_str);
 800217a:	463b      	mov	r3, r7
 800217c:	220e      	movs	r2, #14
 800217e:	210e      	movs	r1, #14
 8002180:	484e      	ldr	r0, [pc, #312]	; (80022bc <updateDisplay+0x248>)
 8002182:	f002 fd07 	bl	8004b94 <u8g2_DrawStr>
          if (noSD == 1) {
 8002186:	4b53      	ldr	r3, [pc, #332]	; (80022d4 <updateDisplay+0x260>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d111      	bne.n	80021b2 <updateDisplay+0x13e>
        	  u8g2_SetFont(&u8g2, u8g2_font_profont17_tf);
 800218e:	4952      	ldr	r1, [pc, #328]	; (80022d8 <updateDisplay+0x264>)
 8002190:	484a      	ldr	r0, [pc, #296]	; (80022bc <updateDisplay+0x248>)
 8002192:	f002 fda1 	bl	8004cd8 <u8g2_SetFont>
        	  if (counter%2 == 0) u8g2_DrawStr(&u8g2, 128-24+0, 0, "No SD");
 8002196:	4b51      	ldr	r3, [pc, #324]	; (80022dc <updateDisplay+0x268>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	b29b      	uxth	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d147      	bne.n	8002234 <updateDisplay+0x1c0>
 80021a4:	4b4e      	ldr	r3, [pc, #312]	; (80022e0 <updateDisplay+0x26c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	2168      	movs	r1, #104	; 0x68
 80021aa:	4844      	ldr	r0, [pc, #272]	; (80022bc <updateDisplay+0x248>)
 80021ac:	f002 fcf2 	bl	8004b94 <u8g2_DrawStr>
 80021b0:	e040      	b.n	8002234 <updateDisplay+0x1c0>
          }
          else { /* we compensate for the board temperature heating by offsetting the shown value by -4C */
              u8g2_SetFont(&u8g2, u8g2_font_logisoso18_tn);
 80021b2:	494c      	ldr	r1, [pc, #304]	; (80022e4 <updateDisplay+0x270>)
 80021b4:	4841      	ldr	r0, [pc, #260]	; (80022bc <updateDisplay+0x248>)
 80021b6:	f002 fd8f 	bl	8004cd8 <u8g2_SetFont>
        	  u8g2_DrawStr(&u8g2, 128-50+0, 0, screen_format(round(rh))); // GPS.GPGGA.UTC_Min
 80021ba:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <updateDisplay+0x274>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f9c2 	bl	8000548 <__aeabi_f2d>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	ec43 2b10 	vmov	d0, r2, r3
 80021cc:	f014 fefc 	bl	8016fc8 <round>
 80021d0:	ec53 2b10 	vmov	r2, r3, d0
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	f7fe fcbe 	bl	8000b58 <__aeabi_d2iz>
 80021dc:	4603      	mov	r3, r0
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fcf6 	bl	8001bd0 <screen_format>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2200      	movs	r2, #0
 80021e8:	214e      	movs	r1, #78	; 0x4e
 80021ea:	4834      	ldr	r0, [pc, #208]	; (80022bc <updateDisplay+0x248>)
 80021ec:	f002 fcd2 	bl	8004b94 <u8g2_DrawStr>
        	  u8g2_DrawStr(&u8g2, 128-20+0, 0, screen_format(round(temp)-4)); // GPS.GPGGA.UTC_Hour
 80021f0:	4b3e      	ldr	r3, [pc, #248]	; (80022ec <updateDisplay+0x278>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f9a7 	bl	8000548 <__aeabi_f2d>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	ec43 2b10 	vmov	d0, r2, r3
 8002202:	f014 fee1 	bl	8016fc8 <round>
 8002206:	ec51 0b10 	vmov	r0, r1, d0
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <updateDisplay+0x27c>)
 8002210:	f7fe f83a 	bl	8000288 <__aeabi_dsub>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fc9c 	bl	8000b58 <__aeabi_d2iz>
 8002220:	4603      	mov	r3, r0
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fcd4 	bl	8001bd0 <screen_format>
 8002228:	4603      	mov	r3, r0
 800222a:	2200      	movs	r2, #0
 800222c:	216c      	movs	r1, #108	; 0x6c
 800222e:	4823      	ldr	r0, [pc, #140]	; (80022bc <updateDisplay+0x248>)
 8002230:	f002 fcb0 	bl	8004b94 <u8g2_DrawStr>
          }
          u8g2_SetFont(&u8g2, u8g2_font_profont10_tf);
 8002234:	492f      	ldr	r1, [pc, #188]	; (80022f4 <updateDisplay+0x280>)
 8002236:	4821      	ldr	r0, [pc, #132]	; (80022bc <updateDisplay+0x248>)
 8002238:	f002 fd4e 	bl	8004cd8 <u8g2_SetFont>

          // gps
          gps_dots(gps_satellites, GPS.GPGGA.PositionFixIndicator);
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <updateDisplay+0x240>)
 800223e:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 8002242:	4619      	mov	r1, r3
 8002244:	6978      	ldr	r0, [r7, #20]
 8002246:	f7ff fe03 	bl	8001e50 <gps_dots>

          // battery
          battery_dots_vert(vbat);
 800224a:	ed97 0a04 	vldr	s0, [r7, #16]
 800224e:	f7ff fe3f 	bl	8001ed0 <battery_dots_vert>

          // air quality indicator
          u8g2_DrawRFrame(&u8g2, 128-barwidth, 27, barwidth, 7, 1);
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	b2d9      	uxtb	r1, r3
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2201      	movs	r2, #1
 8002264:	9201      	str	r2, [sp, #4]
 8002266:	2207      	movs	r2, #7
 8002268:	9200      	str	r2, [sp, #0]
 800226a:	221b      	movs	r2, #27
 800226c:	4813      	ldr	r0, [pc, #76]	; (80022bc <updateDisplay+0x248>)
 800226e:	f001 fbcb 	bl	8003a08 <u8g2_DrawRFrame>
          u8g2_DrawRBox(&u8g2, 128-aqi_width, 27, aqi_width, 5, 1);
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	b2d9      	uxtb	r1, r3
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2201      	movs	r2, #1
 8002284:	9201      	str	r2, [sp, #4]
 8002286:	2205      	movs	r2, #5
 8002288:	9200      	str	r2, [sp, #0]
 800228a:	221b      	movs	r2, #27
 800228c:	480b      	ldr	r0, [pc, #44]	; (80022bc <updateDisplay+0x248>)
 800228e:	f001 fb0b 	bl	80038a8 <u8g2_DrawRBox>

	  		} while (u8g2_NextPage(&u8g2));
 8002292:	480a      	ldr	r0, [pc, #40]	; (80022bc <updateDisplay+0x248>)
 8002294:	f001 fd0c 	bl	8003cb0 <u8g2_NextPage>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	f47f af2a 	bne.w	80020f4 <updateDisplay+0x80>
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3728      	adds	r7, #40	; 0x28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000d20 	.word	0x20000d20
 80022b0:	407f4000 	.word	0x407f4000
 80022b4:	200008b0 	.word	0x200008b0
 80022b8:	200012d8 	.word	0x200012d8
 80022bc:	2000039c 	.word	0x2000039c
 80022c0:	08018cd8 	.word	0x08018cd8
 80022c4:	08018a68 	.word	0x08018a68
 80022c8:	42c80000 	.word	0x42c80000
 80022cc:	66666667 	.word	0x66666667
 80022d0:	08017390 	.word	0x08017390
 80022d4:	20000000 	.word	0x20000000
 80022d8:	08017de0 	.word	0x08017de0
 80022dc:	20000394 	.word	0x20000394
 80022e0:	08017394 	.word	0x08017394
 80022e4:	08018b88 	.word	0x08018b88
 80022e8:	200013a8 	.word	0x200013a8
 80022ec:	20000e58 	.word	0x20000e58
 80022f0:	40100000 	.word	0x40100000
 80022f4:	08017608 	.word	0x08017608

080022f8 <welcomeDisplay>:

void welcomeDisplay() {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0

	u8g2_FirstPage(&u8g2);
 80022fc:	4811      	ldr	r0, [pc, #68]	; (8002344 <welcomeDisplay+0x4c>)
 80022fe:	f001 fcc3 	bl	8003c88 <u8g2_FirstPage>
	do
	{
		u8g2_ClearBuffer(&u8g2);
 8002302:	4810      	ldr	r0, [pc, #64]	; (8002344 <welcomeDisplay+0x4c>)
 8002304:	f001 fc35 	bl	8003b72 <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_profont17_tf);
 8002308:	490f      	ldr	r1, [pc, #60]	; (8002348 <welcomeDisplay+0x50>)
 800230a:	480e      	ldr	r0, [pc, #56]	; (8002344 <welcomeDisplay+0x4c>)
 800230c:	f002 fce4 	bl	8004cd8 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 127, 20, "open-seneca");
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <welcomeDisplay+0x54>)
 8002312:	2214      	movs	r2, #20
 8002314:	217f      	movs	r1, #127	; 0x7f
 8002316:	480b      	ldr	r0, [pc, #44]	; (8002344 <welcomeDisplay+0x4c>)
 8002318:	f002 fc3c 	bl	8004b94 <u8g2_DrawStr>
		u8g2_SetFont(&u8g2, u8g2_font_profont10_tf);
 800231c:	490c      	ldr	r1, [pc, #48]	; (8002350 <welcomeDisplay+0x58>)
 800231e:	4809      	ldr	r0, [pc, #36]	; (8002344 <welcomeDisplay+0x4c>)
 8002320:	f002 fcda 	bl	8004cd8 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 127, 4, "air quality sensor ...");
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <welcomeDisplay+0x5c>)
 8002326:	2204      	movs	r2, #4
 8002328:	217f      	movs	r1, #127	; 0x7f
 800232a:	4806      	ldr	r0, [pc, #24]	; (8002344 <welcomeDisplay+0x4c>)
 800232c:	f002 fc32 	bl	8004b94 <u8g2_DrawStr>
	} while (u8g2_NextPage(&u8g2));
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <welcomeDisplay+0x4c>)
 8002332:	f001 fcbd 	bl	8003cb0 <u8g2_NextPage>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e2      	bne.n	8002302 <welcomeDisplay+0xa>

}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000039c 	.word	0x2000039c
 8002348:	08017de0 	.word	0x08017de0
 800234c:	0801739c 	.word	0x0801739c
 8002350:	08017608 	.word	0x08017608
 8002354:	080173a8 	.word	0x080173a8

08002358 <lowBatteryDisplay>:

void lowBatteryDisplay() {
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af02      	add	r7, sp, #8

	u8g2_FirstPage(&u8g2);
 800235e:	4814      	ldr	r0, [pc, #80]	; (80023b0 <lowBatteryDisplay+0x58>)
 8002360:	f001 fc92 	bl	8003c88 <u8g2_FirstPage>
	u8g2_NextPage(&u8g2);
 8002364:	4812      	ldr	r0, [pc, #72]	; (80023b0 <lowBatteryDisplay+0x58>)
 8002366:	f001 fca3 	bl	8003cb0 <u8g2_NextPage>
	HAL_Delay(1000);
 800236a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800236e:	f003 fce9 	bl	8005d44 <HAL_Delay>
	u8g2_DrawRFrame(&u8g2, 117-0, 0, 11, 8, 1);
 8002372:	2301      	movs	r3, #1
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	2308      	movs	r3, #8
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	230b      	movs	r3, #11
 800237c:	2200      	movs	r2, #0
 800237e:	2175      	movs	r1, #117	; 0x75
 8002380:	480b      	ldr	r0, [pc, #44]	; (80023b0 <lowBatteryDisplay+0x58>)
 8002382:	f001 fb41 	bl	8003a08 <u8g2_DrawRFrame>
	u8g2_DrawRBox(&u8g2, 116-0, 3, 2, 2, 1);
 8002386:	2301      	movs	r3, #1
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	2302      	movs	r3, #2
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2302      	movs	r3, #2
 8002390:	2203      	movs	r2, #3
 8002392:	2174      	movs	r1, #116	; 0x74
 8002394:	4806      	ldr	r0, [pc, #24]	; (80023b0 <lowBatteryDisplay+0x58>)
 8002396:	f001 fa87 	bl	80038a8 <u8g2_DrawRBox>
	u8g2_NextPage(&u8g2);
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <lowBatteryDisplay+0x58>)
 800239c:	f001 fc88 	bl	8003cb0 <u8g2_NextPage>
	HAL_Delay(1000);
 80023a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023a4:	f003 fcce 	bl	8005d44 <HAL_Delay>

}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	2000039c 	.word	0x2000039c

080023b4 <SHTC3_read_data>:

int SHTC3_read_data() { // for sht21
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af02      	add	r7, sp, #8

	  /* Clock stretching enabled, read T first */
	  uint8_t txBuf[2] = {0x7C, 0xA2};
 80023ba:	f24a 237c 	movw	r3, #41596	; 0xa27c
 80023be:	813b      	strh	r3, [r7, #8]
	  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, (0x70<<1), &txBuf, 2, HAL_MAX_DELAY);
 80023c0:	f107 0208 	add.w	r2, r7, #8
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2302      	movs	r3, #2
 80023cc:	21e0      	movs	r1, #224	; 0xe0
 80023ce:	482c      	ldr	r0, [pc, #176]	; (8002480 <SHTC3_read_data+0xcc>)
 80023d0:	f004 fd46 	bl	8006e60 <HAL_I2C_Master_Transmit>
 80023d4:	4603      	mov	r3, r0
 80023d6:	73fb      	strb	r3, [r7, #15]


	  if (status != HAL_OK) {
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <SHTC3_read_data+0x30>
		  return -1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	e049      	b.n	8002478 <SHTC3_read_data+0xc4>
	  }

	  /* Read both t and rh */
	  uint8_t rxBuf[6];

	  status = HAL_I2C_Master_Receive(&hi2c1, (0x70 << 1), (uint8_t *) rxBuf, 6, HAL_MAX_DELAY);
 80023e4:	463a      	mov	r2, r7
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2306      	movs	r3, #6
 80023ee:	21e0      	movs	r1, #224	; 0xe0
 80023f0:	4823      	ldr	r0, [pc, #140]	; (8002480 <SHTC3_read_data+0xcc>)
 80023f2:	f004 fe33 	bl	800705c <HAL_I2C_Master_Receive>
 80023f6:	4603      	mov	r3, r0
 80023f8:	73fb      	strb	r3, [r7, #15]

	  if (status != HAL_OK) {
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <SHTC3_read_data+0x52>
		  return -1;
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
 8002404:	e038      	b.n	8002478 <SHTC3_read_data+0xc4>
	  }

	  /* Test checksum with first 2 bytes */
	  if (CalcCrc(rxBuf) != rxBuf[2]) return -1;
 8002406:	463b      	mov	r3, r7
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff f843 	bl	8001494 <CalcCrc>
 800240e:	4603      	mov	r3, r0
 8002410:	461a      	mov	r2, r3
 8002412:	78bb      	ldrb	r3, [r7, #2]
 8002414:	429a      	cmp	r2, r3
 8002416:	d002      	beq.n	800241e <SHTC3_read_data+0x6a>
 8002418:	f04f 33ff 	mov.w	r3, #4294967295
 800241c:	e02c      	b.n	8002478 <SHTC3_read_data+0xc4>

	  uint16_t val = (int16_t) ((rxBuf[0] << 8) | rxBuf[1]);
 800241e:	783b      	ldrb	r3, [r7, #0]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	b21a      	sxth	r2, r3
 8002424:	787b      	ldrb	r3, [r7, #1]
 8002426:	b21b      	sxth	r3, r3
 8002428:	4313      	orrs	r3, r2
 800242a:	b21b      	sxth	r3, r3
 800242c:	81bb      	strh	r3, [r7, #12]
	  temp = 0.00267028808f * val - 45.0f;
 800242e:	89bb      	ldrh	r3, [r7, #12]
 8002430:	ee07 3a90 	vmov	s15, r3
 8002434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002438:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002484 <SHTC3_read_data+0xd0>
 800243c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002440:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002488 <SHTC3_read_data+0xd4>
 8002444:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <SHTC3_read_data+0xd8>)
 800244a:	edc3 7a00 	vstr	s15, [r3]

	  val = (int16_t) ((rxBuf[3] << 8) | rxBuf[4]);
 800244e:	78fb      	ldrb	r3, [r7, #3]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	b21a      	sxth	r2, r3
 8002454:	793b      	ldrb	r3, [r7, #4]
 8002456:	b21b      	sxth	r3, r3
 8002458:	4313      	orrs	r3, r2
 800245a:	b21b      	sxth	r3, r3
 800245c:	81bb      	strh	r3, [r7, #12]

	  rh = 0.0015258789f * val;
 800245e:	89bb      	ldrh	r3, [r7, #12]
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002468:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002490 <SHTC3_read_data+0xdc>
 800246c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <SHTC3_read_data+0xe0>)
 8002472:	edc3 7a00 	vstr	s15, [r3]

	  return 1;
 8002476:	2301      	movs	r3, #1

}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000e04 	.word	0x20000e04
 8002484:	3b2f0000 	.word	0x3b2f0000
 8002488:	42340000 	.word	0x42340000
 800248c:	20000e58 	.word	0x20000e58
 8002490:	3ac80000 	.word	0x3ac80000
 8002494:	200013a8 	.word	0x200013a8

08002498 <initRGBLED>:

	status = HAL_I2C_Mem_Read(&hi2c1, (addr << 1), TSPP, 2, &rxBuf, 8, HAL_MAX_DELAY);
	status = HAL_I2C_Mem_Read(&hi2c1, (addr << 1), 0x00, 2, &rxBuf, 8, HAL_MAX_DELAY);
}

void initRGBLED() {
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800249c:	2100      	movs	r1, #0
 800249e:	4811      	ldr	r0, [pc, #68]	; (80024e4 <initRGBLED+0x4c>)
 80024a0:	f007 fcb8 	bl	8009e14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80024a4:	2100      	movs	r1, #0
 80024a6:	4810      	ldr	r0, [pc, #64]	; (80024e8 <initRGBLED+0x50>)
 80024a8:	f007 fcb4 	bl	8009e14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80024ac:	2104      	movs	r1, #4
 80024ae:	480e      	ldr	r0, [pc, #56]	; (80024e8 <initRGBLED+0x50>)
 80024b0:	f007 fcb0 	bl	8009e14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80024b4:	2108      	movs	r1, #8
 80024b6:	480c      	ldr	r0, [pc, #48]	; (80024e8 <initRGBLED+0x50>)
 80024b8:	f007 fcac 	bl	8009e14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80024bc:	210c      	movs	r1, #12
 80024be:	480a      	ldr	r0, [pc, #40]	; (80024e8 <initRGBLED+0x50>)
 80024c0:	f007 fca8 	bl	8009e14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80024c4:	2108      	movs	r1, #8
 80024c6:	4809      	ldr	r0, [pc, #36]	; (80024ec <initRGBLED+0x54>)
 80024c8:	f007 fca4 	bl	8009e14 <HAL_TIM_PWM_Start>

	setAirLED(100, 100, 100);
 80024cc:	2264      	movs	r2, #100	; 0x64
 80024ce:	2164      	movs	r1, #100	; 0x64
 80024d0:	2064      	movs	r0, #100	; 0x64
 80024d2:	f000 f829 	bl	8002528 <setAirLED>
	setStatLED(100, 100, 100);
 80024d6:	2264      	movs	r2, #100	; 0x64
 80024d8:	2164      	movs	r1, #100	; 0x64
 80024da:	2064      	movs	r0, #100	; 0x64
 80024dc:	f000 f808 	bl	80024f0 <setStatLED>

}
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200014a4 	.word	0x200014a4
 80024e8:	200014ec 	.word	0x200014ec
 80024ec:	2000145c 	.word	0x2000145c

080024f0 <setStatLED>:

void setStatLED(int r, int g, int b) { // values 0-100
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]

	htim2.Instance->CCR1 = r;
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <setStatLED+0x30>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR1 = g;
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <setStatLED+0x34>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = b;
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <setStatLED+0x34>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	639a      	str	r2, [r3, #56]	; 0x38

}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	200014a4 	.word	0x200014a4
 8002524:	200014ec 	.word	0x200014ec

08002528 <setAirLED>:

void setAirLED(int r, int g, int b) { // values 0-100
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]

	htim3.Instance->CCR3 = r;
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <setAirLED+0x30>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = g;
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <setAirLED+0x30>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
	htim4.Instance->CCR3 = b;
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <setAirLED+0x34>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	200014ec 	.word	0x200014ec
 800255c:	2000145c 	.word	0x2000145c

08002560 <AirLED_on>:

void AirLED_on() {
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	if (SPS30.spsData[1] > 30) setAirLED(0, 100, 100); // red
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <AirLED_on+0x54>)
 8002566:	edd3 7a01 	vldr	s15, [r3, #4]
 800256a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800256e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002576:	dd05      	ble.n	8002584 <AirLED_on+0x24>
 8002578:	2264      	movs	r2, #100	; 0x64
 800257a:	2164      	movs	r1, #100	; 0x64
 800257c:	2000      	movs	r0, #0
 800257e:	f7ff ffd3 	bl	8002528 <setAirLED>
	else if (SPS30.spsData[1] > 10) setAirLED(0, 0, 100); // yellow
	else setAirLED(100, 0, 100); // green
}
 8002582:	e014      	b.n	80025ae <AirLED_on+0x4e>
	else if (SPS30.spsData[1] > 10) setAirLED(0, 0, 100); // yellow
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <AirLED_on+0x54>)
 8002586:	edd3 7a01 	vldr	s15, [r3, #4]
 800258a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800258e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002596:	dd05      	ble.n	80025a4 <AirLED_on+0x44>
 8002598:	2264      	movs	r2, #100	; 0x64
 800259a:	2100      	movs	r1, #0
 800259c:	2000      	movs	r0, #0
 800259e:	f7ff ffc3 	bl	8002528 <setAirLED>
}
 80025a2:	e004      	b.n	80025ae <AirLED_on+0x4e>
	else setAirLED(100, 0, 100); // green
 80025a4:	2264      	movs	r2, #100	; 0x64
 80025a6:	2100      	movs	r1, #0
 80025a8:	2064      	movs	r0, #100	; 0x64
 80025aa:	f7ff ffbd 	bl	8002528 <setAirLED>
}
 80025ae:	bf00      	nop
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000d20 	.word	0x20000d20

080025b8 <AirLED_off>:

void AirLED_off() {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	setAirLED(100, 100, 100);
 80025bc:	2264      	movs	r2, #100	; 0x64
 80025be:	2164      	movs	r1, #100	; 0x64
 80025c0:	2064      	movs	r0, #100	; 0x64
 80025c2:	f7ff ffb1 	bl	8002528 <setAirLED>
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <renameBT>:

void renameBT() {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af02      	add	r7, sp, #8

	/* max length of hm11 name is 12 */
	sprintf(btname, "%s%c%c%c", "OPEN-SENE", SPS30.serial[13], SPS30.serial[14], SPS30.serial[15]);
 80025d2:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <renameBT+0x74>)
 80025d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d8:	4619      	mov	r1, r3
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <renameBT+0x74>)
 80025dc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b17      	ldr	r3, [pc, #92]	; (8002640 <renameBT+0x74>)
 80025e4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	9200      	str	r2, [sp, #0]
 80025ec:	460b      	mov	r3, r1
 80025ee:	4a15      	ldr	r2, [pc, #84]	; (8002644 <renameBT+0x78>)
 80025f0:	4915      	ldr	r1, [pc, #84]	; (8002648 <renameBT+0x7c>)
 80025f2:	4816      	ldr	r0, [pc, #88]	; (800264c <renameBT+0x80>)
 80025f4:	f010 fae2 	bl	8012bbc <siprintf>
	uint8_t btcmd[19];
	sprintf(btcmd, "%s%s", "AT+NAME", btname);
 80025f8:	1d38      	adds	r0, r7, #4
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <renameBT+0x80>)
 80025fc:	4a14      	ldr	r2, [pc, #80]	; (8002650 <renameBT+0x84>)
 80025fe:	4915      	ldr	r1, [pc, #84]	; (8002654 <renameBT+0x88>)
 8002600:	f010 fadc 	bl	8012bbc <siprintf>
	HAL_UART_Transmit(&huart1, btcmd, 19, HAL_MAX_DELAY);
 8002604:	1d39      	adds	r1, r7, #4
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	2213      	movs	r2, #19
 800260c:	4812      	ldr	r0, [pc, #72]	; (8002658 <renameBT+0x8c>)
 800260e:	f008 fa24 	bl	800aa5a <HAL_UART_Transmit>
	HAL_Delay(50);
 8002612:	2032      	movs	r0, #50	; 0x32
 8002614:	f003 fb96 	bl	8005d44 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, BT_RESET_Pin, GPIO_PIN_RESET);
 8002618:	2200      	movs	r2, #0
 800261a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800261e:	480f      	ldr	r0, [pc, #60]	; (800265c <renameBT+0x90>)
 8002620:	f004 fac0 	bl	8006ba4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002624:	2032      	movs	r0, #50	; 0x32
 8002626:	f003 fb8d 	bl	8005d44 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, BT_RESET_Pin, GPIO_PIN_SET);
 800262a:	2201      	movs	r2, #1
 800262c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002630:	480a      	ldr	r0, [pc, #40]	; (800265c <renameBT+0x90>)
 8002632:	f004 fab7 	bl	8006ba4 <HAL_GPIO_WritePin>

}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000d20 	.word	0x20000d20
 8002644:	080173c0 	.word	0x080173c0
 8002648:	080173cc 	.word	0x080173cc
 800264c:	20000e5c 	.word	0x20000e5c
 8002650:	080173d8 	.word	0x080173d8
 8002654:	080173e0 	.word	0x080173e0
 8002658:	20001534 	.word	0x20001534
 800265c:	40020000 	.word	0x40020000

08002660 <generateFilename>:

void generateFilename() {
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af02      	add	r7, sp, #8
	int filenumber = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
	FRESULT res;
	/* first 3 digits from SPS SN, then 4 digit file counter */
	while (res == FR_OK) {
 800266a:	e021      	b.n	80026b0 <generateFilename+0x50>
		sprintf(filename, "%c%c%c%04d.csv", SPS30.serial[13], SPS30.serial[14], SPS30.serial[15], filenumber);
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <generateFilename+0x60>)
 800266e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002672:	4619      	mov	r1, r3
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <generateFilename+0x60>)
 8002676:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800267a:	4618      	mov	r0, r3
 800267c:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <generateFilename+0x60>)
 800267e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002682:	461a      	mov	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	9200      	str	r2, [sp, #0]
 800268a:	4603      	mov	r3, r0
 800268c:	460a      	mov	r2, r1
 800268e:	490d      	ldr	r1, [pc, #52]	; (80026c4 <generateFilename+0x64>)
 8002690:	480d      	ldr	r0, [pc, #52]	; (80026c8 <generateFilename+0x68>)
 8002692:	f010 fa93 	bl	8012bbc <siprintf>
		res = f_open(&fil, filename, FA_READ);
 8002696:	2201      	movs	r2, #1
 8002698:	490b      	ldr	r1, [pc, #44]	; (80026c8 <generateFilename+0x68>)
 800269a:	480c      	ldr	r0, [pc, #48]	; (80026cc <generateFilename+0x6c>)
 800269c:	f00e fa86 	bl	8010bac <f_open>
 80026a0:	4603      	mov	r3, r0
 80026a2:	70fb      	strb	r3, [r7, #3]
		f_close(&fil);
 80026a4:	4809      	ldr	r0, [pc, #36]	; (80026cc <generateFilename+0x6c>)
 80026a6:	f00e fe32 	bl	801130e <f_close>
		filenumber++;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3301      	adds	r3, #1
 80026ae:	607b      	str	r3, [r7, #4]
	while (res == FR_OK) {
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0da      	beq.n	800266c <generateFilename+0xc>
	}
}
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000d20 	.word	0x20000d20
 80026c4:	080173e8 	.word	0x080173e8
 80026c8:	200012cc 	.word	0x200012cc
 80026cc:	20000e68 	.word	0x20000e68

080026d0 <saveToSD>:
  int len = strlen(buffer);
  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, HAL_MAX_DELAY);

}

int saveToSD(uint8_t *dBuf, uint8_t dBufLen) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]

	//Open a file for writing
	if (f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND) != FR_OK) return -1;
 80026dc:	2232      	movs	r2, #50	; 0x32
 80026de:	4912      	ldr	r1, [pc, #72]	; (8002728 <saveToSD+0x58>)
 80026e0:	4812      	ldr	r0, [pc, #72]	; (800272c <saveToSD+0x5c>)
 80026e2:	f00e fa63 	bl	8010bac <f_open>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <saveToSD+0x22>
 80026ec:	f04f 33ff 	mov.w	r3, #4294967295
 80026f0:	e016      	b.n	8002720 <saveToSD+0x50>

	UINT bytesWrote;//Number of bytes written
	if (f_write(&fil, dBuf, dBufLen, &bytesWrote) != FR_OK) return -1;
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	480c      	ldr	r0, [pc, #48]	; (800272c <saveToSD+0x5c>)
 80026fc:	f00e fc14 	bl	8010f28 <f_write>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <saveToSD+0x3c>
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	e009      	b.n	8002720 <saveToSD+0x50>

	//Close the file after writing
	if (f_close(&fil) != FR_OK) return -1;
 800270c:	4807      	ldr	r0, [pc, #28]	; (800272c <saveToSD+0x5c>)
 800270e:	f00e fdfe 	bl	801130e <f_close>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <saveToSD+0x4e>
 8002718:	f04f 33ff 	mov.w	r3, #4294967295
 800271c:	e000      	b.n	8002720 <saveToSD+0x50>

//	//De-mount the drive
//	if (f_mount(NULL, "", 0) != FR_OK) return -1;

	return bytesWrote;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	200012cc 	.word	0x200012cc
 800272c:	20000e68 	.word	0x20000e68

08002730 <writeFileHeader>:

int writeFileHeader() {
 8002730:	b580      	push	{r7, lr}
 8002732:	b0be      	sub	sp, #248	; 0xf8
 8002734:	af00      	add	r7, sp, #0

	//Open a file for writing
	if (f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND) != FR_OK) return -1;
 8002736:	2232      	movs	r2, #50	; 0x32
 8002738:	4922      	ldr	r1, [pc, #136]	; (80027c4 <writeFileHeader+0x94>)
 800273a:	4823      	ldr	r0, [pc, #140]	; (80027c8 <writeFileHeader+0x98>)
 800273c:	f00e fa36 	bl	8010bac <f_open>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <writeFileHeader+0x1c>
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	e037      	b.n	80027bc <writeFileHeader+0x8c>

	UINT bytesWrote;//Number of bytes written
	uint8_t details[39];
	uint8_t length = sprintf(details, "STM32_v0.10,,,SPS30_SN:%s\n", SPS30.serial);
 800274c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002750:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <writeFileHeader+0x9c>)
 8002752:	491f      	ldr	r1, [pc, #124]	; (80027d0 <writeFileHeader+0xa0>)
 8002754:	4618      	mov	r0, r3
 8002756:	f010 fa31 	bl	8012bbc <siprintf>
 800275a:	4603      	mov	r3, r0
 800275c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	if (f_write(&fil, details, length, &bytesWrote) != FR_OK) return -1;
 8002760:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8002764:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002768:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800276c:	4816      	ldr	r0, [pc, #88]	; (80027c8 <writeFileHeader+0x98>)
 800276e:	f00e fbdb 	bl	8010f28 <f_write>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <writeFileHeader+0x4e>
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	e01e      	b.n	80027bc <writeFileHeader+0x8c>

	uint8_t header[195];
	length = sprintf(header, "Counter,Latitude,Longitude,gpsUpdated,Speed,Altitude,Satellites,Date,Time,Millis,PM1.0,PM2.5,PM4.0,PM10,Temperature,Humidity,NC0.5,NC1.0,NC2.5,NC4.0,NC10,TypicalParticleSize,TVOC,eCO2,BatteryVIN,UID\n");
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	4914      	ldr	r1, [pc, #80]	; (80027d4 <writeFileHeader+0xa4>)
 8002782:	4618      	mov	r0, r3
 8002784:	f010 fa1a 	bl	8012bbc <siprintf>
 8002788:	4603      	mov	r3, r0
 800278a:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	if (f_write(&fil, header, length, &bytesWrote) != FR_OK) return -1;
 800278e:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8002792:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002796:	1d39      	adds	r1, r7, #4
 8002798:	480b      	ldr	r0, [pc, #44]	; (80027c8 <writeFileHeader+0x98>)
 800279a:	f00e fbc5 	bl	8010f28 <f_write>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d002      	beq.n	80027aa <writeFileHeader+0x7a>
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295
 80027a8:	e008      	b.n	80027bc <writeFileHeader+0x8c>

	//Close the file after writing
	if (f_close(&fil) != FR_OK) return -1;
 80027aa:	4807      	ldr	r0, [pc, #28]	; (80027c8 <writeFileHeader+0x98>)
 80027ac:	f00e fdaf 	bl	801130e <f_close>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <writeFileHeader+0x8c>
 80027b6:	f04f 33ff 	mov.w	r3, #4294967295
 80027ba:	e7ff      	b.n	80027bc <writeFileHeader+0x8c>

}
 80027bc:	4618      	mov	r0, r3
 80027be:	37f8      	adds	r7, #248	; 0xf8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200012cc 	.word	0x200012cc
 80027c8:	20000e68 	.word	0x20000e68
 80027cc:	20000d48 	.word	0x20000d48
 80027d0:	080173f8 	.word	0x080173f8
 80027d4:	08017414 	.word	0x08017414

080027d8 <updateADC>:

void updateADC() {
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0

	  HAL_ADC_Start(&hadc1);
 80027dc:	480e      	ldr	r0, [pc, #56]	; (8002818 <updateADC+0x40>)
 80027de:	f003 fb19 	bl	8005e14 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80027e2:	f04f 31ff 	mov.w	r1, #4294967295
 80027e6:	480c      	ldr	r0, [pc, #48]	; (8002818 <updateADC+0x40>)
 80027e8:	f003 fbe6 	bl	8005fb8 <HAL_ADC_PollForConversion>
	  adcData[0] = HAL_ADC_GetValue(&hadc1);
 80027ec:	480a      	ldr	r0, [pc, #40]	; (8002818 <updateADC+0x40>)
 80027ee:	f003 fc6e 	bl	80060ce <HAL_ADC_GetValue>
 80027f2:	4603      	mov	r3, r0
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <updateADC+0x44>)
 80027f8:	801a      	strh	r2, [r3, #0]
	  batteryVoltage = adcData[0] * 0.00112556008f;
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <updateADC+0x44>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002806:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002820 <updateADC+0x48>
 800280a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <updateADC+0x4c>)
 8002810:	edc3 7a00 	vstr	s15, [r3]

}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20000d68 	.word	0x20000d68
 800281c:	20001098 	.word	0x20001098
 8002820:	3a938787 	.word	0x3a938787
 8002824:	200012d8 	.word	0x200012d8

08002828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800282c:	ed2d 8b04 	vpush	{d8-d9}
 8002830:	b0d1      	sub	sp, #324	; 0x144
 8002832:	af30      	add	r7, sp, #192	; 0xc0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002834:	f003 fa14 	bl	8005c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002838:	f000 f9cc 	bl	8002bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800283c:	f7ff f82c 	bl	8001898 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002840:	f7ff f8d0 	bl	80019e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002844:	f7ff f8fc 	bl	8001a40 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002848:	f000 ff20 	bl	800368c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800284c:	f7fe ff8e 	bl	800176c <MX_ADC1_Init>
  MX_TIM2_Init();
 8002850:	f000 fc58 	bl	8003104 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002854:	f000 fcae 	bl	80031b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002858:	f000 fd26 	bl	80032a8 <MX_TIM4_Init>
  MX_SPI1_Init();
 800285c:	f000 fa28 	bl	8002cb0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002860:	f000 fa5c 	bl	8002d1c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002864:	f000 ff3c 	bl	80036e0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8002868:	f00e fdd8 	bl	801141c <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 800286c:	f00a fa36 	bl	800ccdc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(50);
 8002870:	2032      	movs	r0, #50	; 0x32
 8002872:	f003 fa67 	bl	8005d44 <HAL_Delay>
  updateADC(); // if battery voltage is too low, prevent boot
 8002876:	f7ff ffaf 	bl	80027d8 <updateADC>
  initDisplay();
 800287a:	f7ff fbdd 	bl	8002038 <initDisplay>
  if (batteryVoltage < 2.75f) while(1) lowBatteryDisplay();
 800287e:	4bb6      	ldr	r3, [pc, #728]	; (8002b58 <main+0x330>)
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	eeb0 7a06 	vmov.f32	s14, #6	; 0x40300000  2.750
 8002888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800288c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002890:	d502      	bpl.n	8002898 <main+0x70>
 8002892:	f7ff fd61 	bl	8002358 <lowBatteryDisplay>
 8002896:	e7fc      	b.n	8002892 <main+0x6a>

  HAL_GPIO_WritePin(GPIOA, BT_RESET_Pin, GPIO_PIN_SET);
 8002898:	2201      	movs	r2, #1
 800289a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800289e:	48af      	ldr	r0, [pc, #700]	; (8002b5c <main+0x334>)
 80028a0:	f004 f980 	bl	8006ba4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80028a4:	2032      	movs	r0, #50	; 0x32
 80028a6:	f003 fa4d 	bl	8005d44 <HAL_Delay>
  GPS_Init();
 80028aa:	f7fe fbf5 	bl	8001098 <GPS_Init>
  HAL_Delay(50);
 80028ae:	2032      	movs	r0, #50	; 0x32
 80028b0:	f003 fa48 	bl	8005d44 <HAL_Delay>
  initRGBLED();
 80028b4:	f7ff fdf0 	bl	8002498 <initRGBLED>
  HAL_Delay(50);
 80028b8:	2032      	movs	r0, #50	; 0x32
 80028ba:	f003 fa43 	bl	8005d44 <HAL_Delay>
  MX_I2C2_Init(); // reset i2c2 again (needed for it to work!)
 80028be:	f7ff f8bf 	bl	8001a40 <MX_I2C2_Init>
  HAL_Delay(50);
 80028c2:	2032      	movs	r0, #50	; 0x32
 80028c4:	f003 fa3e 	bl	8005d44 <HAL_Delay>
  SPS30_start_measurement();
 80028c8:	f7fe fe18 	bl	80014fc <SPS30_start_measurement>
  HAL_Delay(50);
 80028cc:	2032      	movs	r0, #50	; 0x32
 80028ce:	f003 fa39 	bl	8005d44 <HAL_Delay>
  initDisplay();
 80028d2:	f7ff fbb1 	bl	8002038 <initDisplay>
  welcomeDisplay();
 80028d6:	f7ff fd0f 	bl	80022f8 <welcomeDisplay>
  HAL_Delay(50);
 80028da:	2032      	movs	r0, #50	; 0x32
 80028dc:	f003 fa32 	bl	8005d44 <HAL_Delay>
  SPS30_read_serialnumber();
 80028e0:	f7fe fec6 	bl	8001670 <SPS30_read_serialnumber>
  HAL_Delay(50);
 80028e4:	2032      	movs	r0, #50	; 0x32
 80028e6:	f003 fa2d 	bl	8005d44 <HAL_Delay>
  renameBT();
 80028ea:	f7ff fe6f 	bl	80025cc <renameBT>
  SPS30_clean_fan();
 80028ee:	f7fe fea7 	bl	8001640 <SPS30_clean_fan>

  //Mount the file system
  f_mount(&FatFs, "", 1);
 80028f2:	2201      	movs	r2, #1
 80028f4:	499a      	ldr	r1, [pc, #616]	; (8002b60 <main+0x338>)
 80028f6:	489b      	ldr	r0, [pc, #620]	; (8002b64 <main+0x33c>)
 80028f8:	f00e f912 	bl	8010b20 <f_mount>
  generateFilename();
 80028fc:	f7ff feb0 	bl	8002660 <generateFilename>
  writeFileHeader();
 8002900:	f7ff ff16 	bl	8002730 <writeFileHeader>
	  /* Read all the sensors */
//	  KX023_read_tilt();

//	  SPS30_start_measurement();
//	  HAL_Delay(100);
	  SPS30_read_data();
 8002904:	f7fe fe20 	bl	8001548 <SPS30_read_data>
	  /* Show boot screen until values first become none-zero */
	  while (SPS30.spsData[1] == 0) {
 8002908:	e004      	b.n	8002914 <main+0xec>
		  HAL_Delay(100);
 800290a:	2064      	movs	r0, #100	; 0x64
 800290c:	f003 fa1a 	bl	8005d44 <HAL_Delay>
		  SPS30_read_data();
 8002910:	f7fe fe1a 	bl	8001548 <SPS30_read_data>
	  while (SPS30.spsData[1] == 0) {
 8002914:	4b94      	ldr	r3, [pc, #592]	; (8002b68 <main+0x340>)
 8002916:	edd3 7a01 	vldr	s15, [r3, #4]
 800291a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002922:	d0f2      	beq.n	800290a <main+0xe2>
	  }
	  HAL_Delay(50);
 8002924:	2032      	movs	r0, #50	; 0x32
 8002926:	f003 fa0d 	bl	8005d44 <HAL_Delay>
	  SHTC3_read_data();
 800292a:	f7ff fd43 	bl	80023b4 <SHTC3_read_data>
	  updateADC();
 800292e:	f7ff ff53 	bl	80027d8 <updateADC>
	  millis = HAL_GetTick();
 8002932:	f003 f9fb 	bl	8005d2c <HAL_GetTick>
 8002936:	4603      	mov	r3, r0
 8002938:	4a8c      	ldr	r2, [pc, #560]	; (8002b6c <main+0x344>)
 800293a:	6013      	str	r3, [r2, #0]

	  /* Format output data string */
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 800293c:	4b8c      	ldr	r3, [pc, #560]	; (8002b70 <main+0x348>)
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	677b      	str	r3, [r7, #116]	; 0x74
 8002942:	4b8c      	ldr	r3, [pc, #560]	; (8002b74 <main+0x34c>)
 8002944:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8002948:	ed93 8b00 	vldr	d8, [r3]
 800294c:	4b89      	ldr	r3, [pc, #548]	; (8002b74 <main+0x34c>)
 800294e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8002952:	ed93 9b00 	vldr	d9, [r3]
 8002956:	4b87      	ldr	r3, [pc, #540]	; (8002b74 <main+0x34c>)
 8002958:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 800295c:	6739      	str	r1, [r7, #112]	; 0x70
			  "%.1f,%.1f,%d,%d,%06.0f,%d," // speed, alt, sat, date, time, millis
			  "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f," // pm1, pm25, pm4, pm10, t, rh
			  "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%d,%d,%.2f,%c%c%c\n", // nc0.5, nc1.0, nc2.5, nc4.0, nc10, psize, tvoc, eco2, vbat
			  counter, GPS.GPGGA.LatitudeDecimal, GPS.GPGGA.LongitudeDecimal, GPS.GPGGA.PositionFixIndicator,
			  GPS.GPGGA.Speed_KMH, GPS.GPGGA.MSL_Altitude, GPS.GPGGA.SatellitesUsed, GPS.GPGGA.YYYYMMDD, GPS.GPGGA.HHMMSS, millis,
 800295e:	4b85      	ldr	r3, [pc, #532]	; (8002b74 <main+0x34c>)
 8002960:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8002964:	681b      	ldr	r3, [r3, #0]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fdee 	bl	8000548 <__aeabi_f2d>
 800296c:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
			  GPS.GPGGA.Speed_KMH, GPS.GPGGA.MSL_Altitude, GPS.GPGGA.SatellitesUsed, GPS.GPGGA.YYYYMMDD, GPS.GPGGA.HHMMSS, millis,
 8002970:	4b80      	ldr	r3, [pc, #512]	; (8002b74 <main+0x34c>)
 8002972:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002976:	681b      	ldr	r3, [r3, #0]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fde5 	bl	8000548 <__aeabi_f2d>
 800297e:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
			  GPS.GPGGA.Speed_KMH, GPS.GPGGA.MSL_Altitude, GPS.GPGGA.SatellitesUsed, GPS.GPGGA.YYYYMMDD, GPS.GPGGA.HHMMSS, millis,
 8002982:	4b7c      	ldr	r3, [pc, #496]	; (8002b74 <main+0x34c>)
 8002984:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800298a:	4b7a      	ldr	r3, [pc, #488]	; (8002b74 <main+0x34c>)
 800298c:	f8d3 4468 	ldr.w	r4, [r3, #1128]	; 0x468
 8002990:	65bc      	str	r4, [r7, #88]	; 0x58
			  GPS.GPGGA.Speed_KMH, GPS.GPGGA.MSL_Altitude, GPS.GPGGA.SatellitesUsed, GPS.GPGGA.YYYYMMDD, GPS.GPGGA.HHMMSS, millis,
 8002992:	4b78      	ldr	r3, [pc, #480]	; (8002b74 <main+0x34c>)
 8002994:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8002998:	681b      	ldr	r3, [r3, #0]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fdd4 	bl	8000548 <__aeabi_f2d>
 80029a0:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 80029a4:	4b71      	ldr	r3, [pc, #452]	; (8002b6c <main+0x344>)
 80029a6:	681d      	ldr	r5, [r3, #0]
 80029a8:	64fd      	str	r5, [r7, #76]	; 0x4c
			  SPS30.spsData[0], SPS30.spsData[1], SPS30.spsData[2], SPS30.spsData[3], temp, rh,
 80029aa:	4b6f      	ldr	r3, [pc, #444]	; (8002b68 <main+0x340>)
 80029ac:	681b      	ldr	r3, [r3, #0]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fd fdca 	bl	8000548 <__aeabi_f2d>
 80029b4:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
			  SPS30.spsData[0], SPS30.spsData[1], SPS30.spsData[2], SPS30.spsData[3], temp, rh,
 80029b8:	4b6b      	ldr	r3, [pc, #428]	; (8002b68 <main+0x340>)
 80029ba:	685b      	ldr	r3, [r3, #4]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fdc3 	bl	8000548 <__aeabi_f2d>
 80029c2:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
			  SPS30.spsData[0], SPS30.spsData[1], SPS30.spsData[2], SPS30.spsData[3], temp, rh,
 80029c6:	4b68      	ldr	r3, [pc, #416]	; (8002b68 <main+0x340>)
 80029c8:	689b      	ldr	r3, [r3, #8]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fd fdbc 	bl	8000548 <__aeabi_f2d>
 80029d0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
			  SPS30.spsData[0], SPS30.spsData[1], SPS30.spsData[2], SPS30.spsData[3], temp, rh,
 80029d4:	4b64      	ldr	r3, [pc, #400]	; (8002b68 <main+0x340>)
 80029d6:	68db      	ldr	r3, [r3, #12]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fdb5 	bl	8000548 <__aeabi_f2d>
 80029de:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80029e2:	4b65      	ldr	r3, [pc, #404]	; (8002b78 <main+0x350>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd fdae 	bl	8000548 <__aeabi_f2d>
 80029ec:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80029f0:	4b62      	ldr	r3, [pc, #392]	; (8002b7c <main+0x354>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fda7 	bl	8000548 <__aeabi_f2d>
 80029fa:	e9c7 0106 	strd	r0, r1, [r7, #24]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 80029fe:	4b5a      	ldr	r3, [pc, #360]	; (8002b68 <main+0x340>)
 8002a00:	691b      	ldr	r3, [r3, #16]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fda0 	bl	8000548 <__aeabi_f2d>
 8002a08:	e9c7 0104 	strd	r0, r1, [r7, #16]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002a0c:	4b56      	ldr	r3, [pc, #344]	; (8002b68 <main+0x340>)
 8002a0e:	695b      	ldr	r3, [r3, #20]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fd99 	bl	8000548 <__aeabi_f2d>
 8002a16:	e9c7 0102 	strd	r0, r1, [r7, #8]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002a1a:	4b53      	ldr	r3, [pc, #332]	; (8002b68 <main+0x340>)
 8002a1c:	699b      	ldr	r3, [r3, #24]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fd92 	bl	8000548 <__aeabi_f2d>
 8002a24:	e9c7 0100 	strd	r0, r1, [r7]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002a28:	4b4f      	ldr	r3, [pc, #316]	; (8002b68 <main+0x340>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7fd fd8b 	bl	8000548 <__aeabi_f2d>
 8002a32:	4682      	mov	sl, r0
 8002a34:	468b      	mov	fp, r1
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002a36:	4b4c      	ldr	r3, [pc, #304]	; (8002b68 <main+0x340>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fd fd84 	bl	8000548 <__aeabi_f2d>
 8002a40:	4680      	mov	r8, r0
 8002a42:	4689      	mov	r9, r1
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002a44:	4b48      	ldr	r3, [pc, #288]	; (8002b68 <main+0x340>)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fd7d 	bl	8000548 <__aeabi_f2d>
 8002a4e:	4604      	mov	r4, r0
 8002a50:	460d      	mov	r5, r1
 8002a52:	4b41      	ldr	r3, [pc, #260]	; (8002b58 <main+0x330>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fd76 	bl	8000548 <__aeabi_f2d>
			  0, 0, batteryVoltage, SPS30.serial[13], SPS30.serial[14], SPS30.serial[15]);
 8002a5c:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <main+0x340>)
 8002a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002a62:	461e      	mov	r6, r3
			  0, 0, batteryVoltage, SPS30.serial[13], SPS30.serial[14], SPS30.serial[15]);
 8002a64:	4b40      	ldr	r3, [pc, #256]	; (8002b68 <main+0x340>)
 8002a66:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002a6a:	461a      	mov	r2, r3
			  0, 0, batteryVoltage, SPS30.serial[13], SPS30.serial[14], SPS30.serial[15]);
 8002a6c:	4b3e      	ldr	r3, [pc, #248]	; (8002b68 <main+0x340>)
 8002a6e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002a72:	932e      	str	r3, [sp, #184]	; 0xb8
 8002a74:	922d      	str	r2, [sp, #180]	; 0xb4
 8002a76:	962c      	str	r6, [sp, #176]	; 0xb0
 8002a78:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	9329      	str	r3, [sp, #164]	; 0xa4
 8002a80:	2300      	movs	r3, #0
 8002a82:	9328      	str	r3, [sp, #160]	; 0xa0
 8002a84:	e9cd 4526 	strd	r4, r5, [sp, #152]	; 0x98
 8002a88:	e9cd 8924 	strd	r8, r9, [sp, #144]	; 0x90
 8002a8c:	e9cd ab22 	strd	sl, fp, [sp, #136]	; 0x88
 8002a90:	ed97 7b00 	vldr	d7, [r7]
 8002a94:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8002a98:	ed97 7b02 	vldr	d7, [r7, #8]
 8002a9c:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8002aa0:	ed97 7b04 	vldr	d7, [r7, #16]
 8002aa4:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8002aa8:	ed97 7b06 	vldr	d7, [r7, #24]
 8002aac:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8002ab0:	ed97 7b08 	vldr	d7, [r7, #32]
 8002ab4:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8002ab8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002abc:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8002ac0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002ac4:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002ac8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002acc:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002ad0:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002ad4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002ad8:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8002ada:	950e      	str	r5, [sp, #56]	; 0x38
 8002adc:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002ae0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002ae4:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8002ae6:	940b      	str	r4, [sp, #44]	; 0x2c
 8002ae8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8002aea:	940a      	str	r4, [sp, #40]	; 0x28
 8002aec:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002af0:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002af4:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8002af8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002afc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002afe:	9104      	str	r1, [sp, #16]
 8002b00:	ed8d 9b02 	vstr	d9, [sp, #8]
 8002b04:	ed8d 8b00 	vstr	d8, [sp]
 8002b08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b0a:	491d      	ldr	r1, [pc, #116]	; (8002b80 <main+0x358>)
 8002b0c:	481d      	ldr	r0, [pc, #116]	; (8002b84 <main+0x35c>)
 8002b0e:	f010 f855 	bl	8012bbc <siprintf>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f


	  /* Send data via BT and COM, save to SD */
	  AirLED_on();
 8002b18:	f7ff fd22 	bl	8002560 <AirLED_on>
	  CDC_Transmit_FS(data, length); // required for COM port
 8002b1c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002b20:	4619      	mov	r1, r3
 8002b22:	4818      	ldr	r0, [pc, #96]	; (8002b84 <main+0x35c>)
 8002b24:	f00e fd38 	bl	8011598 <CDC_Transmit_FS>
	  HAL_UART_Transmit(&huart1, data, length, HAL_MAX_DELAY);
 8002b28:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b32:	4914      	ldr	r1, [pc, #80]	; (8002b84 <main+0x35c>)
 8002b34:	4814      	ldr	r0, [pc, #80]	; (8002b88 <main+0x360>)
 8002b36:	f007 ff90 	bl	800aa5a <HAL_UART_Transmit>
	  if (saveToSD(&data, length) == -1) noSD = 1;
 8002b3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4810      	ldr	r0, [pc, #64]	; (8002b84 <main+0x35c>)
 8002b42:	f7ff fdc5 	bl	80026d0 <saveToSD>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d120      	bne.n	8002b90 <main+0x368>
 8002b4e:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <main+0x364>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	701a      	strb	r2, [r3, #0]
 8002b54:	e01f      	b.n	8002b96 <main+0x36e>
 8002b56:	bf00      	nop
 8002b58:	200012d8 	.word	0x200012d8
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	080174dc 	.word	0x080174dc
 8002b64:	2000109c 	.word	0x2000109c
 8002b68:	20000d20 	.word	0x20000d20
 8002b6c:	20000398 	.word	0x20000398
 8002b70:	20000394 	.word	0x20000394
 8002b74:	200008b0 	.word	0x200008b0
 8002b78:	20000e58 	.word	0x20000e58
 8002b7c:	200013a8 	.word	0x200013a8
 8002b80:	080174e0 	.word	0x080174e0
 8002b84:	200012e0 	.word	0x200012e0
 8002b88:	20001534 	.word	0x20001534
 8002b8c:	20000000 	.word	0x20000000
	  else noSD = 0;
 8002b90:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <main+0x3a0>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
	  AirLED_off();
 8002b96:	f7ff fd0f 	bl	80025b8 <AirLED_off>

	  /* Update the display */
	  updateDisplay();
 8002b9a:	f7ff fa6b 	bl	8002074 <updateDisplay>

	  /* Increase counter and wait */
	  counter++;
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <main+0x3a4>)
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <main+0x3a4>)
 8002ba8:	801a      	strh	r2, [r3, #0]
	  while (HAL_GetTick()-millis < 1000) {
 8002baa:	e002      	b.n	8002bb2 <main+0x38a>
		  HAL_Delay(10); // does increasing this delay save power?
 8002bac:	200a      	movs	r0, #10
 8002bae:	f003 f8c9 	bl	8005d44 <HAL_Delay>
	  while (HAL_GetTick()-millis < 1000) {
 8002bb2:	f003 f8bb 	bl	8005d2c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <main+0x3a8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc2:	d3f3      	bcc.n	8002bac <main+0x384>
  {
 8002bc4:	e69e      	b.n	8002904 <main+0xdc>
 8002bc6:	bf00      	nop
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	20000394 	.word	0x20000394
 8002bd0:	20000398 	.word	0x20000398

08002bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b094      	sub	sp, #80	; 0x50
 8002bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bda:	f107 0320 	add.w	r3, r7, #32
 8002bde:	2230      	movs	r2, #48	; 0x30
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f00f f962 	bl	8011eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <SystemClock_Config+0xc8>)
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	4a26      	ldr	r2, [pc, #152]	; (8002c9c <SystemClock_Config+0xc8>)
 8002c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c06:	6413      	str	r3, [r2, #64]	; 0x40
 8002c08:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <SystemClock_Config+0xc8>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	60bb      	str	r3, [r7, #8]
 8002c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c14:	2300      	movs	r3, #0
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <SystemClock_Config+0xcc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <SystemClock_Config+0xcc>)
 8002c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <SystemClock_Config+0xcc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c30:	2301      	movs	r3, #1
 8002c32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c44:	2308      	movs	r3, #8
 8002c46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002c48:	2348      	movs	r3, #72	; 0x48
 8002c4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002c50:	2303      	movs	r3, #3
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c54:	f107 0320 	add.w	r3, r7, #32
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f006 f8d5 	bl	8008e08 <HAL_RCC_OscConfig>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c64:	f000 f81e 	bl	8002ca4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c68:	230f      	movs	r3, #15
 8002c6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c7e:	f107 030c 	add.w	r3, r7, #12
 8002c82:	2102      	movs	r1, #2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f006 fb37 	bl	80092f8 <HAL_RCC_ClockConfig>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002c90:	f000 f808 	bl	8002ca4 <Error_Handler>
  }
}
 8002c94:	bf00      	nop
 8002c96:	3750      	adds	r7, #80	; 0x50
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40007000 	.word	0x40007000

08002ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca8:	b672      	cpsid	i
}
 8002caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cac:	e7fe      	b.n	8002cac <Error_Handler+0x8>
	...

08002cb0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <MX_SPI1_Init+0x64>)
 8002cb6:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <MX_SPI1_Init+0x68>)
 8002cb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cba:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <MX_SPI1_Init+0x64>)
 8002cbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cc2:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <MX_SPI1_Init+0x64>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <MX_SPI1_Init+0x64>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <MX_SPI1_Init+0x64>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cd4:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <MX_SPI1_Init+0x64>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <MX_SPI1_Init+0x64>)
 8002cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <MX_SPI1_Init+0x64>)
 8002ce4:	2230      	movs	r2, #48	; 0x30
 8002ce6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <MX_SPI1_Init+0x64>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <MX_SPI1_Init+0x64>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <MX_SPI1_Init+0x64>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <MX_SPI1_Init+0x64>)
 8002cfc:	220a      	movs	r2, #10
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d00:	4804      	ldr	r0, [pc, #16]	; (8002d14 <MX_SPI1_Init+0x64>)
 8002d02:	f006 fcf3 	bl	80096ec <HAL_SPI_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d0c:	f7ff ffca 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20001404 	.word	0x20001404
 8002d18:	40013000 	.word	0x40013000

08002d1c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002d20:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d22:	4a18      	ldr	r2, [pc, #96]	; (8002d84 <MX_SPI2_Init+0x68>)
 8002d24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d26:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d2e:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d34:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d3a:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d50:	2230      	movs	r2, #48	; 0x30
 8002d52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d68:	220a      	movs	r2, #10
 8002d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d6c:	4804      	ldr	r0, [pc, #16]	; (8002d80 <MX_SPI2_Init+0x64>)
 8002d6e:	f006 fcbd 	bl	80096ec <HAL_SPI_Init>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002d78:	f7ff ff94 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	200013ac 	.word	0x200013ac
 8002d84:	40003800 	.word	0x40003800

08002d88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 031c 	add.w	r3, r7, #28
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a32      	ldr	r2, [pc, #200]	; (8002e70 <HAL_SPI_MspInit+0xe8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d12c      	bne.n	8002e04 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
 8002dae:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <HAL_SPI_MspInit+0xec>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	4a30      	ldr	r2, [pc, #192]	; (8002e74 <HAL_SPI_MspInit+0xec>)
 8002db4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002db8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dba:	4b2e      	ldr	r3, [pc, #184]	; (8002e74 <HAL_SPI_MspInit+0xec>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	4b2a      	ldr	r3, [pc, #168]	; (8002e74 <HAL_SPI_MspInit+0xec>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a29      	ldr	r2, [pc, #164]	; (8002e74 <HAL_SPI_MspInit+0xec>)
 8002dd0:	f043 0302 	orr.w	r3, r3, #2
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_SPI_MspInit+0xec>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002de2:	2338      	movs	r3, #56	; 0x38
 8002de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dee:	2303      	movs	r3, #3
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002df2:	2305      	movs	r3, #5
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df6:	f107 031c 	add.w	r3, r7, #28
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	481e      	ldr	r0, [pc, #120]	; (8002e78 <HAL_SPI_MspInit+0xf0>)
 8002dfe:	f003 fd35 	bl	800686c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002e02:	e031      	b.n	8002e68 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <HAL_SPI_MspInit+0xf4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d12c      	bne.n	8002e68 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <HAL_SPI_MspInit+0xec>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <HAL_SPI_MspInit+0xec>)
 8002e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_SPI_MspInit+0xec>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_SPI_MspInit+0xec>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	4a10      	ldr	r2, [pc, #64]	; (8002e74 <HAL_SPI_MspInit+0xec>)
 8002e34:	f043 0302 	orr.w	r3, r3, #2
 8002e38:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <HAL_SPI_MspInit+0xec>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002e46:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e54:	2303      	movs	r3, #3
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e58:	2305      	movs	r3, #5
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5c:	f107 031c 	add.w	r3, r7, #28
 8002e60:	4619      	mov	r1, r3
 8002e62:	4805      	ldr	r0, [pc, #20]	; (8002e78 <HAL_SPI_MspInit+0xf0>)
 8002e64:	f003 fd02 	bl	800686c <HAL_GPIO_Init>
}
 8002e68:	bf00      	nop
 8002e6a:	3730      	adds	r7, #48	; 0x30
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40013000 	.word	0x40013000
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40020400 	.word	0x40020400
 8002e7c:	40003800 	.word	0x40003800

08002e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_MspInit+0x4c>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <HAL_MspInit+0x4c>)
 8002e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e94:	6453      	str	r3, [r2, #68]	; 0x44
 8002e96:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_MspInit+0x4c>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <HAL_MspInit+0x4c>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <HAL_MspInit+0x4c>)
 8002eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_MspInit+0x4c>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800

08002ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <NMI_Handler+0x4>

08002ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eda:	e7fe      	b.n	8002eda <HardFault_Handler+0x4>

08002edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ee0:	e7fe      	b.n	8002ee0 <MemManage_Handler+0x4>

08002ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee6:	e7fe      	b.n	8002ee6 <BusFault_Handler+0x4>

08002ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eec:	e7fe      	b.n	8002eec <UsageFault_Handler+0x4>

08002eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f1c:	f002 fef2 	bl	8005d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f28:	4802      	ldr	r0, [pc, #8]	; (8002f34 <USART2_IRQHandler+0x10>)
 8002f2a:	f007 fe59 	bl	800abe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20001578 	.word	0x20001578

08002f38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <OTG_FS_IRQHandler+0x10>)
 8002f3e:	f004 ff30 	bl	8007da2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20002f00 	.word	0x20002f00

08002f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
	return 1;
 8002f50:	2301      	movs	r3, #1
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <_kill>:

int _kill(int pid, int sig)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f66:	f00e ff77 	bl	8011e58 <__errno>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2216      	movs	r2, #22
 8002f6e:	601a      	str	r2, [r3, #0]
	return -1;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <_exit>:

void _exit (int status)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f84:	f04f 31ff 	mov.w	r1, #4294967295
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ffe7 	bl	8002f5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f8e:	e7fe      	b.n	8002f8e <_exit+0x12>

08002f90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e00a      	b.n	8002fb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fa2:	f3af 8000 	nop.w
 8002fa6:	4601      	mov	r1, r0
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	60ba      	str	r2, [r7, #8]
 8002fae:	b2ca      	uxtb	r2, r1
 8002fb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dbf0      	blt.n	8002fa2 <_read+0x12>
	}

return len;
 8002fc0:	687b      	ldr	r3, [r7, #4]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e009      	b.n	8002ff0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	60ba      	str	r2, [r7, #8]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	3301      	adds	r3, #1
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	dbf1      	blt.n	8002fdc <_write+0x12>
	}
	return len;
 8002ff8:	687b      	ldr	r3, [r7, #4]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <_close>:

int _close(int file)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
	return -1;
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800302a:	605a      	str	r2, [r3, #4]
	return 0;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <_isatty>:

int _isatty(int file)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
	return 1;
 8003042:	2301      	movs	r3, #1
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
	return 0;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003074:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <_sbrk+0x5c>)
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <_sbrk+0x60>)
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <_sbrk+0x64>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d102      	bne.n	800308e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <_sbrk+0x64>)
 800308a:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <_sbrk+0x68>)
 800308c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800308e:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <_sbrk+0x64>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	429a      	cmp	r2, r3
 800309a:	d207      	bcs.n	80030ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800309c:	f00e fedc 	bl	8011e58 <__errno>
 80030a0:	4603      	mov	r3, r0
 80030a2:	220c      	movs	r2, #12
 80030a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
 80030aa:	e009      	b.n	80030c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030ac:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <_sbrk+0x64>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <_sbrk+0x64>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	4a05      	ldr	r2, [pc, #20]	; (80030d0 <_sbrk+0x64>)
 80030bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030be:	68fb      	ldr	r3, [r7, #12]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20020000 	.word	0x20020000
 80030cc:	00000400 	.word	0x00000400
 80030d0:	20000424 	.word	0x20000424
 80030d4:	20003318 	.word	0x20003318

080030d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030dc:	4b08      	ldr	r3, [pc, #32]	; (8003100 <SystemInit+0x28>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	4a07      	ldr	r2, [pc, #28]	; (8003100 <SystemInit+0x28>)
 80030e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <SystemInit+0x28>)
 80030ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030f2:	609a      	str	r2, [r3, #8]
#endif
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310a:	f107 0320 	add.w	r3, r7, #32
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003114:	1d3b      	adds	r3, r7, #4
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	60da      	str	r2, [r3, #12]
 8003120:	611a      	str	r2, [r3, #16]
 8003122:	615a      	str	r2, [r3, #20]
 8003124:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003126:	4b22      	ldr	r3, [pc, #136]	; (80031b0 <MX_TIM2_Init+0xac>)
 8003128:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800312c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200-1;
 800312e:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <MX_TIM2_Init+0xac>)
 8003130:	f640 427f 	movw	r2, #3199	; 0xc7f
 8003134:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003136:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <MX_TIM2_Init+0xac>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800313c:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <MX_TIM2_Init+0xac>)
 800313e:	2263      	movs	r2, #99	; 0x63
 8003140:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003142:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <MX_TIM2_Init+0xac>)
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003148:	4b19      	ldr	r3, [pc, #100]	; (80031b0 <MX_TIM2_Init+0xac>)
 800314a:	2200      	movs	r2, #0
 800314c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800314e:	4818      	ldr	r0, [pc, #96]	; (80031b0 <MX_TIM2_Init+0xac>)
 8003150:	f006 fe11 	bl	8009d76 <HAL_TIM_PWM_Init>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800315a:	f7ff fda3 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003166:	f107 0320 	add.w	r3, r7, #32
 800316a:	4619      	mov	r1, r3
 800316c:	4810      	ldr	r0, [pc, #64]	; (80031b0 <MX_TIM2_Init+0xac>)
 800316e:	f007 fbab 	bl	800a8c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003178:	f7ff fd94 	bl	8002ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800317c:	2360      	movs	r3, #96	; 0x60
 800317e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800318c:	1d3b      	adds	r3, r7, #4
 800318e:	2200      	movs	r2, #0
 8003190:	4619      	mov	r1, r3
 8003192:	4807      	ldr	r0, [pc, #28]	; (80031b0 <MX_TIM2_Init+0xac>)
 8003194:	f006 ff06 	bl	8009fa4 <HAL_TIM_PWM_ConfigChannel>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800319e:	f7ff fd81 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80031a2:	4803      	ldr	r0, [pc, #12]	; (80031b0 <MX_TIM2_Init+0xac>)
 80031a4:	f000 f94e 	bl	8003444 <HAL_TIM_MspPostInit>

}
 80031a8:	bf00      	nop
 80031aa:	3728      	adds	r7, #40	; 0x28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	200014a4 	.word	0x200014a4

080031b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08a      	sub	sp, #40	; 0x28
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ba:	f107 0320 	add.w	r3, r7, #32
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	605a      	str	r2, [r3, #4]
 80031cc:	609a      	str	r2, [r3, #8]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	611a      	str	r2, [r3, #16]
 80031d2:	615a      	str	r2, [r3, #20]
 80031d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031d6:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <MX_TIM3_Init+0xec>)
 80031d8:	4a32      	ldr	r2, [pc, #200]	; (80032a4 <MX_TIM3_Init+0xf0>)
 80031da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3200-1;
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <MX_TIM3_Init+0xec>)
 80031de:	f640 427f 	movw	r2, #3199	; 0xc7f
 80031e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e4:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <MX_TIM3_Init+0xec>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80031ea:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <MX_TIM3_Init+0xec>)
 80031ec:	2263      	movs	r2, #99	; 0x63
 80031ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f0:	4b2b      	ldr	r3, [pc, #172]	; (80032a0 <MX_TIM3_Init+0xec>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f6:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <MX_TIM3_Init+0xec>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80031fc:	4828      	ldr	r0, [pc, #160]	; (80032a0 <MX_TIM3_Init+0xec>)
 80031fe:	f006 fdba 	bl	8009d76 <HAL_TIM_PWM_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003208:	f7ff fd4c 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800320c:	2300      	movs	r3, #0
 800320e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003214:	f107 0320 	add.w	r3, r7, #32
 8003218:	4619      	mov	r1, r3
 800321a:	4821      	ldr	r0, [pc, #132]	; (80032a0 <MX_TIM3_Init+0xec>)
 800321c:	f007 fb54 	bl	800a8c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003226:	f7ff fd3d 	bl	8002ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800322a:	2360      	movs	r3, #96	; 0x60
 800322c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800323a:	1d3b      	adds	r3, r7, #4
 800323c:	2200      	movs	r2, #0
 800323e:	4619      	mov	r1, r3
 8003240:	4817      	ldr	r0, [pc, #92]	; (80032a0 <MX_TIM3_Init+0xec>)
 8003242:	f006 feaf 	bl	8009fa4 <HAL_TIM_PWM_ConfigChannel>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800324c:	f7ff fd2a 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	2204      	movs	r2, #4
 8003254:	4619      	mov	r1, r3
 8003256:	4812      	ldr	r0, [pc, #72]	; (80032a0 <MX_TIM3_Init+0xec>)
 8003258:	f006 fea4 	bl	8009fa4 <HAL_TIM_PWM_ConfigChannel>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003262:	f7ff fd1f 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003266:	1d3b      	adds	r3, r7, #4
 8003268:	2208      	movs	r2, #8
 800326a:	4619      	mov	r1, r3
 800326c:	480c      	ldr	r0, [pc, #48]	; (80032a0 <MX_TIM3_Init+0xec>)
 800326e:	f006 fe99 	bl	8009fa4 <HAL_TIM_PWM_ConfigChannel>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8003278:	f7ff fd14 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	220c      	movs	r2, #12
 8003280:	4619      	mov	r1, r3
 8003282:	4807      	ldr	r0, [pc, #28]	; (80032a0 <MX_TIM3_Init+0xec>)
 8003284:	f006 fe8e 	bl	8009fa4 <HAL_TIM_PWM_ConfigChannel>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800328e:	f7ff fd09 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003292:	4803      	ldr	r0, [pc, #12]	; (80032a0 <MX_TIM3_Init+0xec>)
 8003294:	f000 f8d6 	bl	8003444 <HAL_TIM_MspPostInit>

}
 8003298:	bf00      	nop
 800329a:	3728      	adds	r7, #40	; 0x28
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	200014ec 	.word	0x200014ec
 80032a4:	40000400 	.word	0x40000400

080032a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08e      	sub	sp, #56	; 0x38
 80032ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	609a      	str	r2, [r3, #8]
 80032ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032bc:	f107 0320 	add.w	r3, r7, #32
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	611a      	str	r2, [r3, #16]
 80032d4:	615a      	str	r2, [r3, #20]
 80032d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80032d8:	4b2c      	ldr	r3, [pc, #176]	; (800338c <MX_TIM4_Init+0xe4>)
 80032da:	4a2d      	ldr	r2, [pc, #180]	; (8003390 <MX_TIM4_Init+0xe8>)
 80032dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 80032de:	4b2b      	ldr	r3, [pc, #172]	; (800338c <MX_TIM4_Init+0xe4>)
 80032e0:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80032e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e6:	4b29      	ldr	r3, [pc, #164]	; (800338c <MX_TIM4_Init+0xe4>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 80032ec:	4b27      	ldr	r3, [pc, #156]	; (800338c <MX_TIM4_Init+0xe4>)
 80032ee:	2209      	movs	r2, #9
 80032f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032f2:	4b26      	ldr	r3, [pc, #152]	; (800338c <MX_TIM4_Init+0xe4>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032f8:	4b24      	ldr	r3, [pc, #144]	; (800338c <MX_TIM4_Init+0xe4>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80032fe:	4823      	ldr	r0, [pc, #140]	; (800338c <MX_TIM4_Init+0xe4>)
 8003300:	f006 fcea 	bl	8009cd8 <HAL_TIM_Base_Init>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800330a:	f7ff fccb 	bl	8002ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800330e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003314:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003318:	4619      	mov	r1, r3
 800331a:	481c      	ldr	r0, [pc, #112]	; (800338c <MX_TIM4_Init+0xe4>)
 800331c:	f006 ff00 	bl	800a120 <HAL_TIM_ConfigClockSource>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003326:	f7ff fcbd 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800332a:	4818      	ldr	r0, [pc, #96]	; (800338c <MX_TIM4_Init+0xe4>)
 800332c:	f006 fd23 	bl	8009d76 <HAL_TIM_PWM_Init>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003336:	f7ff fcb5 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800333a:	2320      	movs	r3, #32
 800333c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003342:	f107 0320 	add.w	r3, r7, #32
 8003346:	4619      	mov	r1, r3
 8003348:	4810      	ldr	r0, [pc, #64]	; (800338c <MX_TIM4_Init+0xe4>)
 800334a:	f007 fabd 	bl	800a8c8 <HAL_TIMEx_MasterConfigSynchronization>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003354:	f7ff fca6 	bl	8002ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003358:	2360      	movs	r3, #96	; 0x60
 800335a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003368:	1d3b      	adds	r3, r7, #4
 800336a:	2208      	movs	r2, #8
 800336c:	4619      	mov	r1, r3
 800336e:	4807      	ldr	r0, [pc, #28]	; (800338c <MX_TIM4_Init+0xe4>)
 8003370:	f006 fe18 	bl	8009fa4 <HAL_TIM_PWM_ConfigChannel>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800337a:	f7ff fc93 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800337e:	4803      	ldr	r0, [pc, #12]	; (800338c <MX_TIM4_Init+0xe4>)
 8003380:	f000 f860 	bl	8003444 <HAL_TIM_MspPostInit>

}
 8003384:	bf00      	nop
 8003386:	3738      	adds	r7, #56	; 0x38
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	2000145c 	.word	0x2000145c
 8003390:	40000800 	.word	0x40000800

08003394 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a4:	d10e      	bne.n	80033c4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_TIM_PWM_MspInit+0x64>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <HAL_TIM_PWM_MspInit+0x64>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6413      	str	r3, [r2, #64]	; 0x40
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_TIM_PWM_MspInit+0x64>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80033c2:	e012      	b.n	80033ea <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <HAL_TIM_PWM_MspInit+0x68>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d10d      	bne.n	80033ea <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_TIM_PWM_MspInit+0x64>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <HAL_TIM_PWM_MspInit+0x64>)
 80033d8:	f043 0302 	orr.w	r3, r3, #2
 80033dc:	6413      	str	r3, [r2, #64]	; 0x40
 80033de:	4b06      	ldr	r3, [pc, #24]	; (80033f8 <HAL_TIM_PWM_MspInit+0x64>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800
 80033fc:	40000400 	.word	0x40000400

08003400 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0b      	ldr	r2, [pc, #44]	; (800343c <HAL_TIM_Base_MspInit+0x3c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d10d      	bne.n	800342e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <HAL_TIM_Base_MspInit+0x40>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a09      	ldr	r2, [pc, #36]	; (8003440 <HAL_TIM_Base_MspInit+0x40>)
 800341c:	f043 0304 	orr.w	r3, r3, #4
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
 8003422:	4b07      	ldr	r3, [pc, #28]	; (8003440 <HAL_TIM_Base_MspInit+0x40>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40000800 	.word	0x40000800
 8003440:	40023800 	.word	0x40023800

08003444 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	; 0x30
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 031c 	add.w	r3, r7, #28
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003464:	d11e      	bne.n	80034a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	4b43      	ldr	r3, [pc, #268]	; (8003578 <HAL_TIM_MspPostInit+0x134>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a42      	ldr	r2, [pc, #264]	; (8003578 <HAL_TIM_MspPostInit+0x134>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b40      	ldr	r3, [pc, #256]	; (8003578 <HAL_TIM_MspPostInit+0x134>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003482:	2320      	movs	r3, #32
 8003484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003486:	2302      	movs	r3, #2
 8003488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348e:	2300      	movs	r3, #0
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003492:	2301      	movs	r3, #1
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003496:	f107 031c 	add.w	r3, r7, #28
 800349a:	4619      	mov	r1, r3
 800349c:	4837      	ldr	r0, [pc, #220]	; (800357c <HAL_TIM_MspPostInit+0x138>)
 800349e:	f003 f9e5 	bl	800686c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80034a2:	e065      	b.n	8003570 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM3)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a35      	ldr	r2, [pc, #212]	; (8003580 <HAL_TIM_MspPostInit+0x13c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d13c      	bne.n	8003528 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	4b31      	ldr	r3, [pc, #196]	; (8003578 <HAL_TIM_MspPostInit+0x134>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	4a30      	ldr	r2, [pc, #192]	; (8003578 <HAL_TIM_MspPostInit+0x134>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6313      	str	r3, [r2, #48]	; 0x30
 80034be:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <HAL_TIM_MspPostInit+0x134>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <HAL_TIM_MspPostInit+0x134>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a29      	ldr	r2, [pc, #164]	; (8003578 <HAL_TIM_MspPostInit+0x134>)
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b27      	ldr	r3, [pc, #156]	; (8003578 <HAL_TIM_MspPostInit+0x134>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034e6:	23c0      	movs	r3, #192	; 0xc0
 80034e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ea:	2302      	movs	r3, #2
 80034ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f2:	2300      	movs	r3, #0
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034f6:	2302      	movs	r3, #2
 80034f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fa:	f107 031c 	add.w	r3, r7, #28
 80034fe:	4619      	mov	r1, r3
 8003500:	481e      	ldr	r0, [pc, #120]	; (800357c <HAL_TIM_MspPostInit+0x138>)
 8003502:	f003 f9b3 	bl	800686c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003506:	2303      	movs	r3, #3
 8003508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350a:	2302      	movs	r3, #2
 800350c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	2300      	movs	r3, #0
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003512:	2300      	movs	r3, #0
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003516:	2302      	movs	r3, #2
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800351a:	f107 031c 	add.w	r3, r7, #28
 800351e:	4619      	mov	r1, r3
 8003520:	4818      	ldr	r0, [pc, #96]	; (8003584 <HAL_TIM_MspPostInit+0x140>)
 8003522:	f003 f9a3 	bl	800686c <HAL_GPIO_Init>
}
 8003526:	e023      	b.n	8003570 <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a16      	ldr	r2, [pc, #88]	; (8003588 <HAL_TIM_MspPostInit+0x144>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d11e      	bne.n	8003570 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	4b10      	ldr	r3, [pc, #64]	; (8003578 <HAL_TIM_MspPostInit+0x134>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4a0f      	ldr	r2, [pc, #60]	; (8003578 <HAL_TIM_MspPostInit+0x134>)
 800353c:	f043 0302 	orr.w	r3, r3, #2
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <HAL_TIM_MspPostInit+0x134>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800354e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355c:	2300      	movs	r3, #0
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003560:	2302      	movs	r3, #2
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	4619      	mov	r1, r3
 800356a:	4806      	ldr	r0, [pc, #24]	; (8003584 <HAL_TIM_MspPostInit+0x140>)
 800356c:	f003 f97e 	bl	800686c <HAL_GPIO_Init>
}
 8003570:	bf00      	nop
 8003572:	3730      	adds	r7, #48	; 0x30
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40023800 	.word	0x40023800
 800357c:	40020000 	.word	0x40020000
 8003580:	40000400 	.word	0x40000400
 8003584:	40020400 	.word	0x40020400
 8003588:	40000800 	.word	0x40000800

0800358c <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern I2C_HandleTypeDef hi2c2;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	72fb      	strb	r3, [r7, #11]
 800359a:	4613      	mov	r3, r2
 800359c:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 800359e:	7afb      	ldrb	r3, [r7, #11]
 80035a0:	2b28      	cmp	r3, #40	; 0x28
 80035a2:	d006      	beq.n	80035b2 <u8x8_stm32_gpio_and_delay+0x26>
 80035a4:	2b29      	cmp	r3, #41	; 0x29
 80035a6:	d105      	bne.n	80035b4 <u8x8_stm32_gpio_and_delay+0x28>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 80035a8:	7abb      	ldrb	r3, [r7, #10]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f002 fbca 	bl	8005d44 <HAL_Delay>
		break;
 80035b0:	e000      	b.n	80035b4 <u8x8_stm32_gpio_and_delay+0x28>
		break;
 80035b2:	bf00      	nop
	}
	return 1;
 80035b4:	2301      	movs	r3, #1
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <u8x8_byte_stm32_hw_i2c>:


uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	460b      	mov	r3, r1
 80035cc:	72fb      	strb	r3, [r7, #11]
 80035ce:	4613      	mov	r3, r2
 80035d0:	72bb      	strb	r3, [r7, #10]
	/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch(msg)
 80035d2:	7afb      	ldrb	r3, [r7, #11]
 80035d4:	3b14      	subs	r3, #20
 80035d6:	2b0c      	cmp	r3, #12
 80035d8:	d847      	bhi.n	800366a <u8x8_byte_stm32_hw_i2c+0xaa>
 80035da:	a201      	add	r2, pc, #4	; (adr r2, 80035e0 <u8x8_byte_stm32_hw_i2c+0x20>)
 80035dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e0:	0800366f 	.word	0x0800366f
 80035e4:	0800366b 	.word	0x0800366b
 80035e8:	0800366b 	.word	0x0800366b
 80035ec:	08003615 	.word	0x08003615
 80035f0:	08003645 	.word	0x08003645
 80035f4:	0800364d 	.word	0x0800364d
 80035f8:	0800366b 	.word	0x0800366b
 80035fc:	0800366b 	.word	0x0800366b
 8003600:	0800366b 	.word	0x0800366b
 8003604:	0800366b 	.word	0x0800366b
 8003608:	0800366b 	.word	0x0800366b
 800360c:	0800366b 	.word	0x0800366b
 8003610:	0800366f 	.word	0x0800366f
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	617b      	str	r3, [r7, #20]
		while( arg_int > 0 )
 8003618:	e010      	b.n	800363c <u8x8_byte_stm32_hw_i2c+0x7c>
		{
			buffer[buf_idx++] = *data;
 800361a:	4b19      	ldr	r3, [pc, #100]	; (8003680 <u8x8_byte_stm32_hw_i2c+0xc0>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	b2d1      	uxtb	r1, r2
 8003622:	4a17      	ldr	r2, [pc, #92]	; (8003680 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8003624:	7011      	strb	r1, [r2, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	7819      	ldrb	r1, [r3, #0]
 800362c:	4b15      	ldr	r3, [pc, #84]	; (8003684 <u8x8_byte_stm32_hw_i2c+0xc4>)
 800362e:	5499      	strb	r1, [r3, r2]
			data++;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	3301      	adds	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
			arg_int--;
 8003636:	7abb      	ldrb	r3, [r7, #10]
 8003638:	3b01      	subs	r3, #1
 800363a:	72bb      	strb	r3, [r7, #10]
		while( arg_int > 0 )
 800363c:	7abb      	ldrb	r3, [r7, #10]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1eb      	bne.n	800361a <u8x8_byte_stm32_hw_i2c+0x5a>
		}
		break;
 8003642:	e017      	b.n	8003674 <u8x8_byte_stm32_hw_i2c+0xb4>
		/* add your custom code to init i2c subsystem */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8003644:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <u8x8_byte_stm32_hw_i2c+0xc0>)
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
		break;
 800364a:	e013      	b.n	8003674 <u8x8_byte_stm32_hw_i2c+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		if(HAL_I2C_Master_Transmit(&hi2c2, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <u8x8_byte_stm32_hw_i2c+0xc0>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	2264      	movs	r2, #100	; 0x64
 8003654:	9200      	str	r2, [sp, #0]
 8003656:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <u8x8_byte_stm32_hw_i2c+0xc4>)
 8003658:	2178      	movs	r1, #120	; 0x78
 800365a:	480b      	ldr	r0, [pc, #44]	; (8003688 <u8x8_byte_stm32_hw_i2c+0xc8>)
 800365c:	f003 fc00 	bl	8006e60 <HAL_I2C_Master_Transmit>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <u8x8_byte_stm32_hw_i2c+0xb2>
 8003666:	2300      	movs	r3, #0
 8003668:	e005      	b.n	8003676 <u8x8_byte_stm32_hw_i2c+0xb6>
		break;
	default:
		return 0;
 800366a:	2300      	movs	r3, #0
 800366c:	e003      	b.n	8003676 <u8x8_byte_stm32_hw_i2c+0xb6>
		break;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <u8x8_byte_stm32_hw_i2c+0xb4>
		break;
 8003672:	bf00      	nop
	}
	return 1;
 8003674:	2301      	movs	r3, #1
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000428 	.word	0x20000428
 8003684:	2000042c 	.word	0x2000042c
 8003688:	20000db0 	.word	0x20000db0

0800368c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <MX_USART1_UART_Init+0x4c>)
 8003692:	4a12      	ldr	r2, [pc, #72]	; (80036dc <MX_USART1_UART_Init+0x50>)
 8003694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003696:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <MX_USART1_UART_Init+0x4c>)
 8003698:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800369c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800369e:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036b2:	220c      	movs	r2, #12
 80036b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036be:	2200      	movs	r2, #0
 80036c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036c2:	4805      	ldr	r0, [pc, #20]	; (80036d8 <MX_USART1_UART_Init+0x4c>)
 80036c4:	f007 f97c 	bl	800a9c0 <HAL_UART_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80036ce:	f7ff fae9 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20001534 	.word	0x20001534
 80036dc:	40011000 	.word	0x40011000

080036e0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <MX_USART2_UART_Init+0x4c>)
 80036e6:	4a12      	ldr	r2, [pc, #72]	; (8003730 <MX_USART2_UART_Init+0x50>)
 80036e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <MX_USART2_UART_Init+0x4c>)
 80036ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80036f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036f2:	4b0e      	ldr	r3, [pc, #56]	; (800372c <MX_USART2_UART_Init+0x4c>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <MX_USART2_UART_Init+0x4c>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036fe:	4b0b      	ldr	r3, [pc, #44]	; (800372c <MX_USART2_UART_Init+0x4c>)
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <MX_USART2_UART_Init+0x4c>)
 8003706:	220c      	movs	r2, #12
 8003708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800370a:	4b08      	ldr	r3, [pc, #32]	; (800372c <MX_USART2_UART_Init+0x4c>)
 800370c:	2200      	movs	r2, #0
 800370e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <MX_USART2_UART_Init+0x4c>)
 8003712:	2200      	movs	r2, #0
 8003714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003716:	4805      	ldr	r0, [pc, #20]	; (800372c <MX_USART2_UART_Init+0x4c>)
 8003718:	f007 f952 	bl	800a9c0 <HAL_UART_Init>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003722:	f7ff fabf 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20001578 	.word	0x20001578
 8003730:	40004400 	.word	0x40004400

08003734 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08c      	sub	sp, #48	; 0x30
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800373c:	f107 031c 	add.w	r3, r7, #28
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	60da      	str	r2, [r3, #12]
 800374a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a36      	ldr	r2, [pc, #216]	; (800382c <HAL_UART_MspInit+0xf8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d12d      	bne.n	80037b2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	4b35      	ldr	r3, [pc, #212]	; (8003830 <HAL_UART_MspInit+0xfc>)
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	4a34      	ldr	r2, [pc, #208]	; (8003830 <HAL_UART_MspInit+0xfc>)
 8003760:	f043 0310 	orr.w	r3, r3, #16
 8003764:	6453      	str	r3, [r2, #68]	; 0x44
 8003766:	4b32      	ldr	r3, [pc, #200]	; (8003830 <HAL_UART_MspInit+0xfc>)
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <HAL_UART_MspInit+0xfc>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	4a2d      	ldr	r2, [pc, #180]	; (8003830 <HAL_UART_MspInit+0xfc>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	6313      	str	r3, [r2, #48]	; 0x30
 8003782:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <HAL_UART_MspInit+0xfc>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800378e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003794:	2302      	movs	r3, #2
 8003796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003798:	2300      	movs	r3, #0
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800379c:	2303      	movs	r3, #3
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037a0:	2307      	movs	r3, #7
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a4:	f107 031c 	add.w	r3, r7, #28
 80037a8:	4619      	mov	r1, r3
 80037aa:	4822      	ldr	r0, [pc, #136]	; (8003834 <HAL_UART_MspInit+0x100>)
 80037ac:	f003 f85e 	bl	800686c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80037b0:	e038      	b.n	8003824 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a20      	ldr	r2, [pc, #128]	; (8003838 <HAL_UART_MspInit+0x104>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d133      	bne.n	8003824 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_UART_MspInit+0xfc>)
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <HAL_UART_MspInit+0xfc>)
 80037c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ca:	6413      	str	r3, [r2, #64]	; 0x40
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <HAL_UART_MspInit+0xfc>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <HAL_UART_MspInit+0xfc>)
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	4a13      	ldr	r2, [pc, #76]	; (8003830 <HAL_UART_MspInit+0xfc>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6313      	str	r3, [r2, #48]	; 0x30
 80037e8:	4b11      	ldr	r3, [pc, #68]	; (8003830 <HAL_UART_MspInit+0xfc>)
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037f4:	230c      	movs	r3, #12
 80037f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f8:	2302      	movs	r3, #2
 80037fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003800:	2303      	movs	r3, #3
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003804:	2307      	movs	r3, #7
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003808:	f107 031c 	add.w	r3, r7, #28
 800380c:	4619      	mov	r1, r3
 800380e:	4809      	ldr	r0, [pc, #36]	; (8003834 <HAL_UART_MspInit+0x100>)
 8003810:	f003 f82c 	bl	800686c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003814:	2200      	movs	r2, #0
 8003816:	2100      	movs	r1, #0
 8003818:	2026      	movs	r0, #38	; 0x26
 800381a:	f002 ff5e 	bl	80066da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800381e:	2026      	movs	r0, #38	; 0x26
 8003820:	f002 ff77 	bl	8006712 <HAL_NVIC_EnableIRQ>
}
 8003824:	bf00      	nop
 8003826:	3730      	adds	r7, #48	; 0x30
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40011000 	.word	0x40011000
 8003830:	40023800 	.word	0x40023800
 8003834:	40020000 	.word	0x40020000
 8003838:	40004400 	.word	0x40004400

0800383c <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af02      	add	r7, sp, #8
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	461a      	mov	r2, r3
 800384a:	4603      	mov	r3, r0
 800384c:	70fb      	strb	r3, [r7, #3]
 800384e:	460b      	mov	r3, r1
 8003850:	70bb      	strb	r3, [r7, #2]
 8003852:	4613      	mov	r3, r2
 8003854:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	787b      	ldrb	r3, [r7, #1]
 800385a:	4413      	add	r3, r2
 800385c:	b2d8      	uxtb	r0, r3
 800385e:	78ba      	ldrb	r2, [r7, #2]
 8003860:	7c3b      	ldrb	r3, [r7, #16]
 8003862:	4413      	add	r3, r2
 8003864:	b2db      	uxtb	r3, r3
 8003866:	78ba      	ldrb	r2, [r7, #2]
 8003868:	78f9      	ldrb	r1, [r7, #3]
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	4603      	mov	r3, r0
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f001 fbe6 	bl	8005040 <u8g2_IsIntersection>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d012      	beq.n	80038a0 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 800387a:	e00d      	b.n	8003898 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800387c:	787b      	ldrb	r3, [r7, #1]
 800387e:	78ba      	ldrb	r2, [r7, #2]
 8003880:	78f9      	ldrb	r1, [r7, #3]
 8003882:	2000      	movs	r0, #0
 8003884:	9000      	str	r0, [sp, #0]
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f001 fabf 	bl	8004e0a <u8g2_DrawHVLine>
    y++;    
 800388c:	78bb      	ldrb	r3, [r7, #2]
 800388e:	3301      	adds	r3, #1
 8003890:	70bb      	strb	r3, [r7, #2]
    h--;
 8003892:	7c3b      	ldrb	r3, [r7, #16]
 8003894:	3b01      	subs	r3, #1
 8003896:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8003898:	7c3b      	ldrb	r3, [r7, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ee      	bne.n	800387c <u8g2_DrawBox+0x40>
 800389e:	e000      	b.n	80038a2 <u8g2_DrawBox+0x66>
    return;
 80038a0:	bf00      	nop
  }
}
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	461a      	mov	r2, r3
 80038b6:	4603      	mov	r3, r0
 80038b8:	70fb      	strb	r3, [r7, #3]
 80038ba:	460b      	mov	r3, r1
 80038bc:	70bb      	strb	r3, [r7, #2]
 80038be:	4613      	mov	r3, r2
 80038c0:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	787b      	ldrb	r3, [r7, #1]
 80038c6:	4413      	add	r3, r2
 80038c8:	b2d8      	uxtb	r0, r3
 80038ca:	78ba      	ldrb	r2, [r7, #2]
 80038cc:	7e3b      	ldrb	r3, [r7, #24]
 80038ce:	4413      	add	r3, r2
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	78ba      	ldrb	r2, [r7, #2]
 80038d4:	78f9      	ldrb	r1, [r7, #3]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	4603      	mov	r3, r0
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f001 fbb0 	bl	8005040 <u8g2_IsIntersection>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 808c 	beq.w	8003a00 <u8g2_DrawRBox+0x158>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	73fb      	strb	r3, [r7, #15]
  xl += r;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	7f3b      	ldrb	r3, [r7, #28]
 80038f0:	4413      	add	r3, r2
 80038f2:	73fb      	strb	r3, [r7, #15]
  yu = y;
 80038f4:	78bb      	ldrb	r3, [r7, #2]
 80038f6:	73bb      	strb	r3, [r7, #14]
  yu += r;
 80038f8:	7bba      	ldrb	r2, [r7, #14]
 80038fa:	7f3b      	ldrb	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	73bb      	strb	r3, [r7, #14]
 
  xr = x;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	737b      	strb	r3, [r7, #13]
  xr += w;
 8003904:	7b7a      	ldrb	r2, [r7, #13]
 8003906:	787b      	ldrb	r3, [r7, #1]
 8003908:	4413      	add	r3, r2
 800390a:	737b      	strb	r3, [r7, #13]
  xr -= r;
 800390c:	7b7a      	ldrb	r2, [r7, #13]
 800390e:	7f3b      	ldrb	r3, [r7, #28]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	737b      	strb	r3, [r7, #13]
  xr -= 1;
 8003914:	7b7b      	ldrb	r3, [r7, #13]
 8003916:	3b01      	subs	r3, #1
 8003918:	737b      	strb	r3, [r7, #13]
  
  yl = y;
 800391a:	78bb      	ldrb	r3, [r7, #2]
 800391c:	733b      	strb	r3, [r7, #12]
  yl += h;
 800391e:	7b3a      	ldrb	r2, [r7, #12]
 8003920:	7e3b      	ldrb	r3, [r7, #24]
 8003922:	4413      	add	r3, r2
 8003924:	733b      	strb	r3, [r7, #12]
  yl -= r; 
 8003926:	7b3a      	ldrb	r2, [r7, #12]
 8003928:	7f3b      	ldrb	r3, [r7, #28]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	733b      	strb	r3, [r7, #12]
  yl -= 1;
 800392e:	7b3b      	ldrb	r3, [r7, #12]
 8003930:	3b01      	subs	r3, #1
 8003932:	733b      	strb	r3, [r7, #12]

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8003934:	7f3b      	ldrb	r3, [r7, #28]
 8003936:	7bba      	ldrb	r2, [r7, #14]
 8003938:	7bf9      	ldrb	r1, [r7, #15]
 800393a:	2002      	movs	r0, #2
 800393c:	9000      	str	r0, [sp, #0]
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fbec 	bl	800411c <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8003944:	7f3b      	ldrb	r3, [r7, #28]
 8003946:	7bba      	ldrb	r2, [r7, #14]
 8003948:	7b79      	ldrb	r1, [r7, #13]
 800394a:	2001      	movs	r0, #1
 800394c:	9000      	str	r0, [sp, #0]
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fbe4 	bl	800411c <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8003954:	7f3b      	ldrb	r3, [r7, #28]
 8003956:	7b3a      	ldrb	r2, [r7, #12]
 8003958:	7bf9      	ldrb	r1, [r7, #15]
 800395a:	2004      	movs	r0, #4
 800395c:	9000      	str	r0, [sp, #0]
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fbdc 	bl	800411c <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8003964:	7f3b      	ldrb	r3, [r7, #28]
 8003966:	7b3a      	ldrb	r2, [r7, #12]
 8003968:	7b79      	ldrb	r1, [r7, #13]
 800396a:	2008      	movs	r0, #8
 800396c:	9000      	str	r0, [sp, #0]
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 fbd4 	bl	800411c <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8003974:	787b      	ldrb	r3, [r7, #1]
 8003976:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003978:	7afa      	ldrb	r2, [r7, #11]
 800397a:	7f3b      	ldrb	r3, [r7, #28]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003980:	7afa      	ldrb	r2, [r7, #11]
 8003982:	7f3b      	ldrb	r3, [r7, #28]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	72fb      	strb	r3, [r7, #11]
    xl++;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	3301      	adds	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
    yu++;
 800398e:	7bbb      	ldrb	r3, [r7, #14]
 8003990:	3301      	adds	r3, #1
 8003992:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 8003994:	7afb      	ldrb	r3, [r7, #11]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d918      	bls.n	80039cc <u8g2_DrawRBox+0x124>
    {
      ww -= 2;
 800399a:	7afb      	ldrb	r3, [r7, #11]
 800399c:	3b02      	subs	r3, #2
 800399e:	72fb      	strb	r3, [r7, #11]
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 80039a0:	7f3b      	ldrb	r3, [r7, #28]
 80039a2:	3301      	adds	r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	7af8      	ldrb	r0, [r7, #11]
 80039a8:	78ba      	ldrb	r2, [r7, #2]
 80039aa:	7bf9      	ldrb	r1, [r7, #15]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	4603      	mov	r3, r0
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ff43 	bl	800383c <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
 80039b6:	7f3b      	ldrb	r3, [r7, #28]
 80039b8:	3301      	adds	r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	7af8      	ldrb	r0, [r7, #11]
 80039be:	7b3a      	ldrb	r2, [r7, #12]
 80039c0:	7bf9      	ldrb	r1, [r7, #15]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	4603      	mov	r3, r0
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff ff38 	bl	800383c <u8g2_DrawBox>
    }
    
    hh = h;
 80039cc:	7e3b      	ldrb	r3, [r7, #24]
 80039ce:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 80039d0:	7aba      	ldrb	r2, [r7, #10]
 80039d2:	7f3b      	ldrb	r3, [r7, #28]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 80039d8:	7aba      	ldrb	r2, [r7, #10]
 80039da:	7f3b      	ldrb	r3, [r7, #28]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	72bb      	strb	r3, [r7, #10]
    //h--;
    if ( hh >= 3 )
 80039e0:	7abb      	ldrb	r3, [r7, #10]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d90d      	bls.n	8003a02 <u8g2_DrawRBox+0x15a>
    {
      hh -= 2;
 80039e6:	7abb      	ldrb	r3, [r7, #10]
 80039e8:	3b02      	subs	r3, #2
 80039ea:	72bb      	strb	r3, [r7, #10]
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 80039ec:	7878      	ldrb	r0, [r7, #1]
 80039ee:	7bba      	ldrb	r2, [r7, #14]
 80039f0:	78f9      	ldrb	r1, [r7, #3]
 80039f2:	7abb      	ldrb	r3, [r7, #10]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	4603      	mov	r3, r0
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ff1f 	bl	800383c <u8g2_DrawBox>
 80039fe:	e000      	b.n	8003a02 <u8g2_DrawRBox+0x15a>
    return;
 8003a00:	bf00      	nop
    }
  }
}
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	4608      	mov	r0, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	461a      	mov	r2, r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	70fb      	strb	r3, [r7, #3]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	70bb      	strb	r3, [r7, #2]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	787b      	ldrb	r3, [r7, #1]
 8003a26:	4413      	add	r3, r2
 8003a28:	b2d8      	uxtb	r0, r3
 8003a2a:	78ba      	ldrb	r2, [r7, #2]
 8003a2c:	7e3b      	ldrb	r3, [r7, #24]
 8003a2e:	4413      	add	r3, r2
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	78ba      	ldrb	r2, [r7, #2]
 8003a34:	78f9      	ldrb	r1, [r7, #3]
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	4603      	mov	r3, r0
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f001 fb00 	bl	8005040 <u8g2_IsIntersection>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 8091 	beq.w	8003b6a <u8g2_DrawRFrame+0x162>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8003a48:	78fb      	ldrb	r3, [r7, #3]
 8003a4a:	73fb      	strb	r3, [r7, #15]
  xl += r;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	7f3b      	ldrb	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8003a54:	78bb      	ldrb	r3, [r7, #2]
 8003a56:	73bb      	strb	r3, [r7, #14]
  yu += r;
 8003a58:	7bba      	ldrb	r2, [r7, #14]
 8003a5a:	7f3b      	ldrb	r3, [r7, #28]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	737b      	strb	r3, [r7, #13]
    xr += w;
 8003a64:	7b7a      	ldrb	r2, [r7, #13]
 8003a66:	787b      	ldrb	r3, [r7, #1]
 8003a68:	4413      	add	r3, r2
 8003a6a:	737b      	strb	r3, [r7, #13]
    xr -= r;
 8003a6c:	7b7a      	ldrb	r2, [r7, #13]
 8003a6e:	7f3b      	ldrb	r3, [r7, #28]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8003a74:	7b7b      	ldrb	r3, [r7, #13]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 8003a7a:	78bb      	ldrb	r3, [r7, #2]
 8003a7c:	733b      	strb	r3, [r7, #12]
    yl += h;
 8003a7e:	7b3a      	ldrb	r2, [r7, #12]
 8003a80:	7e3b      	ldrb	r3, [r7, #24]
 8003a82:	4413      	add	r3, r2
 8003a84:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 8003a86:	7b3a      	ldrb	r2, [r7, #12]
 8003a88:	7f3b      	ldrb	r3, [r7, #28]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 8003a8e:	7b3b      	ldrb	r3, [r7, #12]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8003a94:	7f3b      	ldrb	r3, [r7, #28]
 8003a96:	7bba      	ldrb	r2, [r7, #14]
 8003a98:	7bf9      	ldrb	r1, [r7, #15]
 8003a9a:	2002      	movs	r0, #2
 8003a9c:	9000      	str	r0, [sp, #0]
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fa1a 	bl	8003ed8 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8003aa4:	7f3b      	ldrb	r3, [r7, #28]
 8003aa6:	7bba      	ldrb	r2, [r7, #14]
 8003aa8:	7b79      	ldrb	r1, [r7, #13]
 8003aaa:	2001      	movs	r0, #1
 8003aac:	9000      	str	r0, [sp, #0]
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fa12 	bl	8003ed8 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8003ab4:	7f3b      	ldrb	r3, [r7, #28]
 8003ab6:	7b3a      	ldrb	r2, [r7, #12]
 8003ab8:	7bf9      	ldrb	r1, [r7, #15]
 8003aba:	2004      	movs	r0, #4
 8003abc:	9000      	str	r0, [sp, #0]
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fa0a 	bl	8003ed8 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8003ac4:	7f3b      	ldrb	r3, [r7, #28]
 8003ac6:	7b3a      	ldrb	r2, [r7, #12]
 8003ac8:	7b79      	ldrb	r1, [r7, #13]
 8003aca:	2008      	movs	r0, #8
 8003acc:	9000      	str	r0, [sp, #0]
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa02 	bl	8003ed8 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8003ad4:	787b      	ldrb	r3, [r7, #1]
 8003ad6:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003ad8:	7afa      	ldrb	r2, [r7, #11]
 8003ada:	7f3b      	ldrb	r3, [r7, #28]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003ae0:	7afa      	ldrb	r2, [r7, #11]
 8003ae2:	7f3b      	ldrb	r3, [r7, #28]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	72fb      	strb	r3, [r7, #11]
    hh = h;
 8003ae8:	7e3b      	ldrb	r3, [r7, #24]
 8003aea:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003aec:	7aba      	ldrb	r2, [r7, #10]
 8003aee:	7f3b      	ldrb	r3, [r7, #28]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003af4:	7aba      	ldrb	r2, [r7, #10]
 8003af6:	7f3b      	ldrb	r3, [r7, #28]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	3301      	adds	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
    yu++;
 8003b02:	7bbb      	ldrb	r3, [r7, #14]
 8003b04:	3301      	adds	r3, #1
 8003b06:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 8003b08:	7afb      	ldrb	r3, [r7, #11]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d914      	bls.n	8003b38 <u8g2_DrawRFrame+0x130>
    {
      ww -= 2;
 8003b0e:	7afb      	ldrb	r3, [r7, #11]
 8003b10:	3b02      	subs	r3, #2
 8003b12:	72fb      	strb	r3, [r7, #11]
      h--;
 8003b14:	7e3b      	ldrb	r3, [r7, #24]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 8003b1a:	7afb      	ldrb	r3, [r7, #11]
 8003b1c:	78ba      	ldrb	r2, [r7, #2]
 8003b1e:	7bf9      	ldrb	r1, [r7, #15]
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f001 f9f5 	bl	8004f10 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 8003b26:	78ba      	ldrb	r2, [r7, #2]
 8003b28:	7e3b      	ldrb	r3, [r7, #24]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	7afb      	ldrb	r3, [r7, #11]
 8003b30:	7bf9      	ldrb	r1, [r7, #15]
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f001 f9ec 	bl	8004f10 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8003b38:	7abb      	ldrb	r3, [r7, #10]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d916      	bls.n	8003b6c <u8g2_DrawRFrame+0x164>
    {
      hh -= 2;
 8003b3e:	7abb      	ldrb	r3, [r7, #10]
 8003b40:	3b02      	subs	r3, #2
 8003b42:	72bb      	strb	r3, [r7, #10]
      w--;
 8003b44:	787b      	ldrb	r3, [r7, #1]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8003b4a:	7abb      	ldrb	r3, [r7, #10]
 8003b4c:	7bba      	ldrb	r2, [r7, #14]
 8003b4e:	78f9      	ldrb	r1, [r7, #3]
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f001 f9f6 	bl	8004f42 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	787b      	ldrb	r3, [r7, #1]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	b2d9      	uxtb	r1, r3
 8003b5e:	7abb      	ldrb	r3, [r7, #10]
 8003b60:	7bba      	ldrb	r2, [r7, #14]
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f001 f9ed 	bl	8004f42 <u8g2_DrawVLine>
 8003b68:	e000      	b.n	8003b6c <u8g2_DrawRFrame+0x164>
    return;
 8003b6a:	bf00      	nop
    }
  }
}
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	7c1b      	ldrb	r3, [r3, #16]
 8003b80:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	fb02 f303 	mul.w	r3, r2, r3
 8003b90:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f00e f983 	bl	8011eac <memset>
}
 8003ba6:	bf00      	nop
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b086      	sub	sp, #24
 8003bb2:	af02      	add	r7, sp, #8
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	70fb      	strb	r3, [r7, #3]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	7c1b      	ldrb	r3, [r3, #16]
 8003bc4:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	89ba      	ldrh	r2, [r7, #12]
 8003bd6:	fb12 f303 	smulbb	r3, r2, r3
 8003bda:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8003bdc:	89bb      	ldrh	r3, [r7, #12]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003be2:	89bb      	ldrh	r3, [r7, #12]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	4413      	add	r3, r2
 8003be8:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8003bea:	7bf9      	ldrb	r1, [r7, #15]
 8003bec:	78ba      	ldrb	r2, [r7, #2]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f001 ff35 	bl	8005a66 <u8x8_DrawTile>
}
 8003bfc:	bf00      	nop
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c16:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	7c5b      	ldrb	r3, [r3, #17]
 8003c26:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8003c28:	7bba      	ldrb	r2, [r7, #14]
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff ffbd 	bl	8003bae <u8g2_send_tile_row>
    src_row++;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	3301      	adds	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003c3a:	7bbb      	ldrb	r3, [r7, #14]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003c40:	7bfa      	ldrb	r2, [r7, #15]
 8003c42:	7b7b      	ldrb	r3, [r7, #13]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d203      	bcs.n	8003c50 <u8g2_send_buffer+0x4c>
 8003c48:	7bba      	ldrb	r2, [r7, #14]
 8003c4a:	7b3b      	ldrb	r3, [r7, #12]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d3eb      	bcc.n	8003c28 <u8g2_send_buffer+0x24>
}
 8003c50:	bf00      	nop
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
}
 8003c80:	bf00      	nop
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff ff69 	bl	8003b72 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ffd8 	bl	8003c58 <u8g2_SetBufferCurrTileRow>
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff ffa3 	bl	8003c04 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	4413      	add	r3, r2
 8003cd0:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	7c5b      	ldrb	r3, [r3, #17]
 8003cd8:	7bfa      	ldrb	r2, [r7, #15]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d304      	bcc.n	8003ce8 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f001 ff12 	bl	8005b08 <u8x8_RefreshDisplay>
    return 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e00d      	b.n	8003d04 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ff3d 	bl	8003b72 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff ffab 	bl	8003c58 <u8g2_SetBufferCurrTileRow>
  return 1;
 8003d02:	2301      	movs	r3, #1
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	4608      	mov	r0, r1
 8003d16:	4611      	mov	r1, r2
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	70fb      	strb	r3, [r7, #3]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	70bb      	strb	r3, [r7, #2]
 8003d22:	4613      	mov	r3, r2
 8003d24:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8003d26:	7d3b      	ldrb	r3, [r7, #20]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d017      	beq.n	8003d60 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8003d30:	787a      	ldrb	r2, [r7, #1]
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	4413      	add	r3, r2
 8003d36:	b2d9      	uxtb	r1, r3
 8003d38:	7c3a      	ldrb	r2, [r7, #16]
 8003d3a:	78bb      	ldrb	r3, [r7, #2]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f001 f916 	bl	8004f74 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8003d48:	787a      	ldrb	r2, [r7, #1]
 8003d4a:	78bb      	ldrb	r3, [r7, #2]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	b2d9      	uxtb	r1, r3
 8003d50:	7c3a      	ldrb	r2, [r7, #16]
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f001 f90a 	bl	8004f74 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8003d60:	7d3b      	ldrb	r3, [r7, #20]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d017      	beq.n	8003d9a <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 8003d6a:	787a      	ldrb	r2, [r7, #1]
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	b2d9      	uxtb	r1, r3
 8003d72:	7c3a      	ldrb	r2, [r7, #16]
 8003d74:	78bb      	ldrb	r3, [r7, #2]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f001 f8f9 	bl	8004f74 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8003d82:	787a      	ldrb	r2, [r7, #1]
 8003d84:	78bb      	ldrb	r3, [r7, #2]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	b2d9      	uxtb	r1, r3
 8003d8a:	7c3a      	ldrb	r2, [r7, #16]
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f001 f8ed 	bl	8004f74 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8003d9a:	7d3b      	ldrb	r3, [r7, #20]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d017      	beq.n	8003dd4 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8003da4:	787a      	ldrb	r2, [r7, #1]
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	4413      	add	r3, r2
 8003daa:	b2d9      	uxtb	r1, r3
 8003dac:	7c3a      	ldrb	r2, [r7, #16]
 8003dae:	78bb      	ldrb	r3, [r7, #2]
 8003db0:	4413      	add	r3, r2
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	461a      	mov	r2, r3
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f001 f8dc 	bl	8004f74 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 8003dbc:	787a      	ldrb	r2, [r7, #1]
 8003dbe:	78bb      	ldrb	r3, [r7, #2]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	b2d9      	uxtb	r1, r3
 8003dc4:	7c3a      	ldrb	r2, [r7, #16]
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	4413      	add	r3, r2
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f001 f8d0 	bl	8004f74 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8003dd4:	7d3b      	ldrb	r3, [r7, #20]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d017      	beq.n	8003e0e <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 8003dde:	787a      	ldrb	r2, [r7, #1]
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	b2d9      	uxtb	r1, r3
 8003de6:	7c3a      	ldrb	r2, [r7, #16]
 8003de8:	78bb      	ldrb	r3, [r7, #2]
 8003dea:	4413      	add	r3, r2
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f001 f8bf 	bl	8004f74 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8003df6:	787a      	ldrb	r2, [r7, #1]
 8003df8:	78bb      	ldrb	r3, [r7, #2]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	b2d9      	uxtb	r1, r3
 8003dfe:	7c3a      	ldrb	r2, [r7, #16]
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	4413      	add	r3, r2
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f001 f8b3 	bl	8004f74 <u8g2_DrawPixel>
    }
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af02      	add	r7, sp, #8
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	4608      	mov	r0, r1
 8003e20:	4611      	mov	r1, r2
 8003e22:	461a      	mov	r2, r3
 8003e24:	4603      	mov	r3, r0
 8003e26:	70fb      	strb	r3, [r7, #3]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	70bb      	strb	r3, [r7, #2]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	787b      	ldrb	r3, [r7, #1]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8003e46:	7b7a      	ldrb	r2, [r7, #13]
 8003e48:	787b      	ldrb	r3, [r7, #1]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 8003e50:	7b7b      	ldrb	r3, [r7, #13]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	737b      	strb	r3, [r7, #13]
    x = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	733b      	strb	r3, [r7, #12]
    y = rad;
 8003e5c:	787b      	ldrb	r3, [r7, #1]
 8003e5e:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8003e60:	78f8      	ldrb	r0, [r7, #3]
 8003e62:	7afa      	ldrb	r2, [r7, #11]
 8003e64:	7b39      	ldrb	r1, [r7, #12]
 8003e66:	7e3b      	ldrb	r3, [r7, #24]
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	78bb      	ldrb	r3, [r7, #2]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	4603      	mov	r3, r0
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ff4b 	bl	8003d0c <u8g2_draw_circle_section>
    
    while ( x < y )
 8003e76:	e026      	b.n	8003ec6 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 8003e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	db0b      	blt.n	8003e98 <u8g2_draw_circle+0x82>
      {
        y--;
 8003e80:	7afb      	ldrb	r3, [r7, #11]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 8003e86:	7b7b      	ldrb	r3, [r7, #13]
 8003e88:	3302      	adds	r3, #2
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	7b7b      	ldrb	r3, [r7, #13]
 8003e92:	4413      	add	r3, r2
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 8003e98:	7b3b      	ldrb	r3, [r7, #12]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 8003e9e:	7bbb      	ldrb	r3, [r7, #14]
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 8003ea6:	7bfa      	ldrb	r2, [r7, #15]
 8003ea8:	7bbb      	ldrb	r3, [r7, #14]
 8003eaa:	4413      	add	r3, r2
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8003eb0:	78f8      	ldrb	r0, [r7, #3]
 8003eb2:	7afa      	ldrb	r2, [r7, #11]
 8003eb4:	7b39      	ldrb	r1, [r7, #12]
 8003eb6:	7e3b      	ldrb	r3, [r7, #24]
 8003eb8:	9301      	str	r3, [sp, #4]
 8003eba:	78bb      	ldrb	r3, [r7, #2]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ff23 	bl	8003d0c <u8g2_draw_circle_section>
    while ( x < y )
 8003ec6:	7b3a      	ldrb	r2, [r7, #12]
 8003ec8:	7afb      	ldrb	r3, [r7, #11]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d3d4      	bcc.n	8003e78 <u8g2_draw_circle+0x62>
    }
}
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	70fb      	strb	r3, [r7, #3]
 8003eea:	460b      	mov	r3, r1
 8003eec:	70bb      	strb	r3, [r7, #2]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	787b      	ldrb	r3, [r7, #1]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	b2d9      	uxtb	r1, r3
 8003efa:	78ba      	ldrb	r2, [r7, #2]
 8003efc:	787b      	ldrb	r3, [r7, #1]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	b2d8      	uxtb	r0, r3
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	787b      	ldrb	r3, [r7, #1]
 8003f06:	4413      	add	r3, r2
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	b2dc      	uxtb	r4, r3
 8003f0e:	78ba      	ldrb	r2, [r7, #2]
 8003f10:	787b      	ldrb	r3, [r7, #1]
 8003f12:	4413      	add	r3, r2
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	3301      	adds	r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	4623      	mov	r3, r4
 8003f1e:	4602      	mov	r2, r0
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f001 f88d 	bl	8005040 <u8g2_IsIntersection>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d009      	beq.n	8003f40 <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 8003f2c:	7878      	ldrb	r0, [r7, #1]
 8003f2e:	78ba      	ldrb	r2, [r7, #2]
 8003f30:	78f9      	ldrb	r1, [r7, #3]
 8003f32:	7e3b      	ldrb	r3, [r7, #24]
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	4603      	mov	r3, r0
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ff6c 	bl	8003e16 <u8g2_draw_circle>
 8003f3e:	e000      	b.n	8003f42 <u8g2_DrawCircle+0x6a>
      return;
 8003f40:	bf00      	nop
}
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd90      	pop	{r4, r7, pc}

08003f48 <u8g2_draw_disc_section>:
/* Disk */

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	4608      	mov	r0, r1
 8003f52:	4611      	mov	r1, r2
 8003f54:	461a      	mov	r2, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	70fb      	strb	r3, [r7, #3]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	70bb      	strb	r3, [r7, #2]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8003f62:	7d3b      	ldrb	r3, [r7, #20]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01b      	beq.n	8003fa4 <u8g2_draw_disc_section+0x5c>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 8003f6c:	787a      	ldrb	r2, [r7, #1]
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	4413      	add	r3, r2
 8003f72:	b2d9      	uxtb	r1, r3
 8003f74:	7c3a      	ldrb	r2, [r7, #16]
 8003f76:	78bb      	ldrb	r3, [r7, #2]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	78bb      	ldrb	r3, [r7, #2]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 ffdd 	bl	8004f42 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 8003f88:	787a      	ldrb	r2, [r7, #1]
 8003f8a:	78bb      	ldrb	r3, [r7, #2]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	b2d9      	uxtb	r1, r3
 8003f90:	7c3a      	ldrb	r2, [r7, #16]
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 ffcf 	bl	8004f42 <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8003fa4:	7d3b      	ldrb	r3, [r7, #20]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01b      	beq.n	8003fe6 <u8g2_draw_disc_section+0x9e>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 8003fae:	787a      	ldrb	r2, [r7, #1]
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	b2d9      	uxtb	r1, r3
 8003fb6:	7c3a      	ldrb	r2, [r7, #16]
 8003fb8:	78bb      	ldrb	r3, [r7, #2]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	78bb      	ldrb	r3, [r7, #2]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 ffbc 	bl	8004f42 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 8003fca:	787a      	ldrb	r2, [r7, #1]
 8003fcc:	78bb      	ldrb	r3, [r7, #2]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	b2d9      	uxtb	r1, r3
 8003fd2:	7c3a      	ldrb	r2, [r7, #16]
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 ffae 	bl	8004f42 <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8003fe6:	7d3b      	ldrb	r3, [r7, #20]
 8003fe8:	f003 0308 	and.w	r3, r3, #8
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d015      	beq.n	800401c <u8g2_draw_disc_section+0xd4>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 8003ff0:	787a      	ldrb	r2, [r7, #1]
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	b2d9      	uxtb	r1, r3
 8003ff8:	78bb      	ldrb	r3, [r7, #2]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	7c3a      	ldrb	r2, [r7, #16]
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 ff9e 	bl	8004f42 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 8004006:	787a      	ldrb	r2, [r7, #1]
 8004008:	78bb      	ldrb	r3, [r7, #2]
 800400a:	4413      	add	r3, r2
 800400c:	b2d9      	uxtb	r1, r3
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	3301      	adds	r3, #1
 8004012:	b2db      	uxtb	r3, r3
 8004014:	7c3a      	ldrb	r2, [r7, #16]
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 ff93 	bl	8004f42 <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 800401c:	7d3b      	ldrb	r3, [r7, #20]
 800401e:	f003 0304 	and.w	r3, r3, #4
 8004022:	2b00      	cmp	r3, #0
 8004024:	d015      	beq.n	8004052 <u8g2_draw_disc_section+0x10a>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 8004026:	787a      	ldrb	r2, [r7, #1]
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	b2d9      	uxtb	r1, r3
 800402e:	78bb      	ldrb	r3, [r7, #2]
 8004030:	3301      	adds	r3, #1
 8004032:	b2db      	uxtb	r3, r3
 8004034:	7c3a      	ldrb	r2, [r7, #16]
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 ff83 	bl	8004f42 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 800403c:	787a      	ldrb	r2, [r7, #1]
 800403e:	78bb      	ldrb	r3, [r7, #2]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	b2d9      	uxtb	r1, r3
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	3301      	adds	r3, #1
 8004048:	b2db      	uxtb	r3, r3
 800404a:	7c3a      	ldrb	r2, [r7, #16]
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 ff78 	bl	8004f42 <u8g2_DrawVLine>
    }
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <u8g2_draw_disc>:

static void u8g2_draw_disc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af02      	add	r7, sp, #8
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	4608      	mov	r0, r1
 8004064:	4611      	mov	r1, r2
 8004066:	461a      	mov	r2, r3
 8004068:	4603      	mov	r3, r0
 800406a:	70fb      	strb	r3, [r7, #3]
 800406c:	460b      	mov	r3, r1
 800406e:	70bb      	strb	r3, [r7, #2]
 8004070:	4613      	mov	r3, r2
 8004072:	707b      	strb	r3, [r7, #1]
  u8g2_int_t ddF_x;
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
  f -= rad;
 8004078:	7bfa      	ldrb	r2, [r7, #15]
 800407a:	787b      	ldrb	r3, [r7, #1]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	73fb      	strb	r3, [r7, #15]
  ddF_x = 1;
 8004082:	2301      	movs	r3, #1
 8004084:	73bb      	strb	r3, [r7, #14]
  ddF_y = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	737b      	strb	r3, [r7, #13]
  ddF_y -= rad;
 800408a:	7b7a      	ldrb	r2, [r7, #13]
 800408c:	787b      	ldrb	r3, [r7, #1]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	b2db      	uxtb	r3, r3
 8004092:	737b      	strb	r3, [r7, #13]
  ddF_y *= 2;
 8004094:	7b7b      	ldrb	r3, [r7, #13]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	b2db      	uxtb	r3, r3
 800409a:	737b      	strb	r3, [r7, #13]
  x = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	733b      	strb	r3, [r7, #12]
  y = rad;
 80040a0:	787b      	ldrb	r3, [r7, #1]
 80040a2:	72fb      	strb	r3, [r7, #11]

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 80040a4:	78f8      	ldrb	r0, [r7, #3]
 80040a6:	7afa      	ldrb	r2, [r7, #11]
 80040a8:	7b39      	ldrb	r1, [r7, #12]
 80040aa:	7e3b      	ldrb	r3, [r7, #24]
 80040ac:	9301      	str	r3, [sp, #4]
 80040ae:	78bb      	ldrb	r3, [r7, #2]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	4603      	mov	r3, r0
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff ff47 	bl	8003f48 <u8g2_draw_disc_section>
  
  while ( x < y )
 80040ba:	e026      	b.n	800410a <u8g2_draw_disc+0xb0>
  {
    if (f >= 0) 
 80040bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	db0b      	blt.n	80040dc <u8g2_draw_disc+0x82>
    {
      y--;
 80040c4:	7afb      	ldrb	r3, [r7, #11]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	72fb      	strb	r3, [r7, #11]
      ddF_y += 2;
 80040ca:	7b7b      	ldrb	r3, [r7, #13]
 80040cc:	3302      	adds	r3, #2
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	737b      	strb	r3, [r7, #13]
      f += ddF_y;
 80040d2:	7bfa      	ldrb	r2, [r7, #15]
 80040d4:	7b7b      	ldrb	r3, [r7, #13]
 80040d6:	4413      	add	r3, r2
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	73fb      	strb	r3, [r7, #15]
    }
    x++;
 80040dc:	7b3b      	ldrb	r3, [r7, #12]
 80040de:	3301      	adds	r3, #1
 80040e0:	733b      	strb	r3, [r7, #12]
    ddF_x += 2;
 80040e2:	7bbb      	ldrb	r3, [r7, #14]
 80040e4:	3302      	adds	r3, #2
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	73bb      	strb	r3, [r7, #14]
    f += ddF_x;
 80040ea:	7bfa      	ldrb	r2, [r7, #15]
 80040ec:	7bbb      	ldrb	r3, [r7, #14]
 80040ee:	4413      	add	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	73fb      	strb	r3, [r7, #15]

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 80040f4:	78f8      	ldrb	r0, [r7, #3]
 80040f6:	7afa      	ldrb	r2, [r7, #11]
 80040f8:	7b39      	ldrb	r1, [r7, #12]
 80040fa:	7e3b      	ldrb	r3, [r7, #24]
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	78bb      	ldrb	r3, [r7, #2]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	4603      	mov	r3, r0
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff1f 	bl	8003f48 <u8g2_draw_disc_section>
  while ( x < y )
 800410a:	7b3a      	ldrb	r2, [r7, #12]
 800410c:	7afb      	ldrb	r3, [r7, #11]
 800410e:	429a      	cmp	r2, r3
 8004110:	d3d4      	bcc.n	80040bc <u8g2_draw_disc+0x62>
  }
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <u8g2_DrawDisc>:

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 800411c:	b590      	push	{r4, r7, lr}
 800411e:	b085      	sub	sp, #20
 8004120:	af02      	add	r7, sp, #8
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	4608      	mov	r0, r1
 8004126:	4611      	mov	r1, r2
 8004128:	461a      	mov	r2, r3
 800412a:	4603      	mov	r3, r0
 800412c:	70fb      	strb	r3, [r7, #3]
 800412e:	460b      	mov	r3, r1
 8004130:	70bb      	strb	r3, [r7, #2]
 8004132:	4613      	mov	r3, r2
 8004134:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	787b      	ldrb	r3, [r7, #1]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	b2d9      	uxtb	r1, r3
 800413e:	78ba      	ldrb	r2, [r7, #2]
 8004140:	787b      	ldrb	r3, [r7, #1]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	b2d8      	uxtb	r0, r3
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	787b      	ldrb	r3, [r7, #1]
 800414a:	4413      	add	r3, r2
 800414c:	b2db      	uxtb	r3, r3
 800414e:	3301      	adds	r3, #1
 8004150:	b2dc      	uxtb	r4, r3
 8004152:	78ba      	ldrb	r2, [r7, #2]
 8004154:	787b      	ldrb	r3, [r7, #1]
 8004156:	4413      	add	r3, r2
 8004158:	b2db      	uxtb	r3, r3
 800415a:	3301      	adds	r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	4623      	mov	r3, r4
 8004162:	4602      	mov	r2, r0
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 ff6b 	bl	8005040 <u8g2_IsIntersection>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <u8g2_DrawDisc+0x68>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
 8004170:	7878      	ldrb	r0, [r7, #1]
 8004172:	78ba      	ldrb	r2, [r7, #2]
 8004174:	78f9      	ldrb	r1, [r7, #3]
 8004176:	7e3b      	ldrb	r3, [r7, #24]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	4603      	mov	r3, r0
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ff6c 	bl	800405a <u8g2_draw_disc>
 8004182:	e000      	b.n	8004186 <u8g2_DrawDisc+0x6a>
      return;
 8004184:	bf00      	nop
}
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bd90      	pop	{r4, r7, pc}

0800418c <u8g2_m_16_4_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  static uint8_t buf[512];
  *page_cnt = 4;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2204      	movs	r2, #4
 8004198:	701a      	strb	r2, [r3, #0]
  return buf;
 800419a:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <u8g2_m_16_4_f+0x1c>)
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	2000044c 	.word	0x2000044c

080041ac <u8g2_Setup_ssd1306_i2c_128x32_univision_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x32_univision_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x44>)
 80041c2:	490c      	ldr	r1, [pc, #48]	; (80041f4 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x48>)
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f001 fd03 	bl	8005bd0 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 80041ca:	f107 0313 	add.w	r3, r7, #19
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff ffdc 	bl	800418c <u8g2_m_16_4_f>
 80041d4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80041d6:	7cfa      	ldrb	r2, [r7, #19]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x4c>)
 80041de:	6979      	ldr	r1, [r7, #20]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f001 f816 	bl	8005212 <u8g2_SetupBuffer>
}
 80041e6:	bf00      	nop
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	08005719 	.word	0x08005719
 80041f4:	08005985 	.word	0x08005985
 80041f8:	08005097 	.word	0x08005097

080041fc <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	781b      	ldrb	r3, [r3, #0]
}
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	81fb      	strh	r3, [r7, #14]
    font++;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3301      	adds	r3, #1
 800423e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8004240:	89fb      	ldrh	r3, [r7, #14]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	b29a      	uxth	r2, r3
 800424c:	89fb      	ldrh	r3, [r7, #14]
 800424e:	4413      	add	r3, r2
 8004250:	81fb      	strh	r3, [r7, #14]
    return pos;
 8004252:	89fb      	ldrh	r3, [r7, #14]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800426a:	2100      	movs	r1, #0
 800426c:	6838      	ldr	r0, [r7, #0]
 800426e:	f7ff ffc5 	bl	80041fc <u8g2_font_get_byte>
 8004272:	4603      	mov	r3, r0
 8004274:	461a      	mov	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800427a:	2101      	movs	r1, #1
 800427c:	6838      	ldr	r0, [r7, #0]
 800427e:	f7ff ffbd 	bl	80041fc <u8g2_font_get_byte>
 8004282:	4603      	mov	r3, r0
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800428a:	2102      	movs	r1, #2
 800428c:	6838      	ldr	r0, [r7, #0]
 800428e:	f7ff ffb5 	bl	80041fc <u8g2_font_get_byte>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800429a:	2103      	movs	r1, #3
 800429c:	6838      	ldr	r0, [r7, #0]
 800429e:	f7ff ffad 	bl	80041fc <u8g2_font_get_byte>
 80042a2:	4603      	mov	r3, r0
 80042a4:	461a      	mov	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80042aa:	2104      	movs	r1, #4
 80042ac:	6838      	ldr	r0, [r7, #0]
 80042ae:	f7ff ffa5 	bl	80041fc <u8g2_font_get_byte>
 80042b2:	4603      	mov	r3, r0
 80042b4:	461a      	mov	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80042ba:	2105      	movs	r1, #5
 80042bc:	6838      	ldr	r0, [r7, #0]
 80042be:	f7ff ff9d 	bl	80041fc <u8g2_font_get_byte>
 80042c2:	4603      	mov	r3, r0
 80042c4:	461a      	mov	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80042ca:	2106      	movs	r1, #6
 80042cc:	6838      	ldr	r0, [r7, #0]
 80042ce:	f7ff ff95 	bl	80041fc <u8g2_font_get_byte>
 80042d2:	4603      	mov	r3, r0
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80042da:	2107      	movs	r1, #7
 80042dc:	6838      	ldr	r0, [r7, #0]
 80042de:	f7ff ff8d 	bl	80041fc <u8g2_font_get_byte>
 80042e2:	4603      	mov	r3, r0
 80042e4:	461a      	mov	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80042ea:	2108      	movs	r1, #8
 80042ec:	6838      	ldr	r0, [r7, #0]
 80042ee:	f7ff ff85 	bl	80041fc <u8g2_font_get_byte>
 80042f2:	4603      	mov	r3, r0
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80042fa:	2109      	movs	r1, #9
 80042fc:	6838      	ldr	r0, [r7, #0]
 80042fe:	f7ff ff7d 	bl	80041fc <u8g2_font_get_byte>
 8004302:	4603      	mov	r3, r0
 8004304:	b25a      	sxtb	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800430a:	210a      	movs	r1, #10
 800430c:	6838      	ldr	r0, [r7, #0]
 800430e:	f7ff ff75 	bl	80041fc <u8g2_font_get_byte>
 8004312:	4603      	mov	r3, r0
 8004314:	b25a      	sxtb	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800431a:	210b      	movs	r1, #11
 800431c:	6838      	ldr	r0, [r7, #0]
 800431e:	f7ff ff6d 	bl	80041fc <u8g2_font_get_byte>
 8004322:	4603      	mov	r3, r0
 8004324:	b25a      	sxtb	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800432a:	210c      	movs	r1, #12
 800432c:	6838      	ldr	r0, [r7, #0]
 800432e:	f7ff ff65 	bl	80041fc <u8g2_font_get_byte>
 8004332:	4603      	mov	r3, r0
 8004334:	b25a      	sxtb	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800433a:	210d      	movs	r1, #13
 800433c:	6838      	ldr	r0, [r7, #0]
 800433e:	f7ff ff5d 	bl	80041fc <u8g2_font_get_byte>
 8004342:	4603      	mov	r3, r0
 8004344:	b25a      	sxtb	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800434a:	210e      	movs	r1, #14
 800434c:	6838      	ldr	r0, [r7, #0]
 800434e:	f7ff ff55 	bl	80041fc <u8g2_font_get_byte>
 8004352:	4603      	mov	r3, r0
 8004354:	b25a      	sxtb	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800435a:	210f      	movs	r1, #15
 800435c:	6838      	ldr	r0, [r7, #0]
 800435e:	f7ff ff4d 	bl	80041fc <u8g2_font_get_byte>
 8004362:	4603      	mov	r3, r0
 8004364:	b25a      	sxtb	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800436a:	2110      	movs	r1, #16
 800436c:	6838      	ldr	r0, [r7, #0]
 800436e:	f7ff ff45 	bl	80041fc <u8g2_font_get_byte>
 8004372:	4603      	mov	r3, r0
 8004374:	b25a      	sxtb	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800437a:	2111      	movs	r1, #17
 800437c:	6838      	ldr	r0, [r7, #0]
 800437e:	f7ff ff4f 	bl	8004220 <u8g2_font_get_word>
 8004382:	4603      	mov	r3, r0
 8004384:	461a      	mov	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800438a:	2113      	movs	r1, #19
 800438c:	6838      	ldr	r0, [r7, #0]
 800438e:	f7ff ff47 	bl	8004220 <u8g2_font_get_word>
 8004392:	4603      	mov	r3, r0
 8004394:	461a      	mov	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800439a:	2115      	movs	r1, #21
 800439c:	6838      	ldr	r0, [r7, #0]
 800439e:	f7ff ff3f 	bl	8004220 <u8g2_font_get_word>
 80043a2:	4603      	mov	r3, r0
 80043a4:	461a      	mov	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	82da      	strh	r2, [r3, #22]
#endif
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80043b2:	b480      	push	{r7}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	7a9b      	ldrb	r3, [r3, #10]
 80043c2:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80043cc:	7bfa      	ldrb	r2, [r7, #15]
 80043ce:	7b7b      	ldrb	r3, [r7, #13]
 80043d0:	fa42 f303 	asr.w	r3, r2, r3
 80043d4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80043d6:	7b7b      	ldrb	r3, [r7, #13]
 80043d8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80043da:	7bba      	ldrb	r2, [r7, #14]
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	4413      	add	r3, r2
 80043e0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80043e2:	7bbb      	ldrb	r3, [r7, #14]
 80043e4:	2b07      	cmp	r3, #7
 80043e6:	d91a      	bls.n	800441e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80043e8:	2308      	movs	r3, #8
 80043ea:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80043ec:	7b3a      	ldrb	r2, [r7, #12]
 80043ee:	7b7b      	ldrb	r3, [r7, #13]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	7b3b      	ldrb	r3, [r7, #12]
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	b25a      	sxtb	r2, r3
 800440e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004412:	4313      	orrs	r3, r2
 8004414:	b25b      	sxtb	r3, r3
 8004416:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8004418:	7bbb      	ldrb	r3, [r7, #14]
 800441a:	3b08      	subs	r3, #8
 800441c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	f04f 32ff 	mov.w	r2, #4294967295
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	b2db      	uxtb	r3, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	b2da      	uxtb	r2, r3
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	4013      	ands	r3, r2
 8004432:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	7bba      	ldrb	r2, [r7, #14]
 8004438:	729a      	strb	r2, [r3, #10]
  return val;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff ffaa 	bl	80043b2 <u8g2_font_decode_get_unsigned_bits>
 800445e:	4603      	mov	r3, r0
 8004460:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8004462:	2301      	movs	r3, #1
 8004464:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	3b01      	subs	r3, #1
 800446a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800446c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8004478:	7bfa      	ldrb	r2, [r7, #15]
 800447a:	7bbb      	ldrb	r3, [r7, #14]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	73fb      	strb	r3, [r7, #15]
  return v;
 8004482:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800448e:	b490      	push	{r4, r7}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	4604      	mov	r4, r0
 8004496:	4608      	mov	r0, r1
 8004498:	4611      	mov	r1, r2
 800449a:	461a      	mov	r2, r3
 800449c:	4623      	mov	r3, r4
 800449e:	71fb      	strb	r3, [r7, #7]
 80044a0:	4603      	mov	r3, r0
 80044a2:	71bb      	strb	r3, [r7, #6]
 80044a4:	460b      	mov	r3, r1
 80044a6:	717b      	strb	r3, [r7, #5]
 80044a8:	4613      	mov	r3, r2
 80044aa:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80044ac:	793b      	ldrb	r3, [r7, #4]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d010      	beq.n	80044d4 <u8g2_add_vector_y+0x46>
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	dc13      	bgt.n	80044de <u8g2_add_vector_y+0x50>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <u8g2_add_vector_y+0x32>
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d005      	beq.n	80044ca <u8g2_add_vector_y+0x3c>
 80044be:	e00e      	b.n	80044de <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 80044c0:	797a      	ldrb	r2, [r7, #5]
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	4413      	add	r3, r2
 80044c6:	71fb      	strb	r3, [r7, #7]
      break;
 80044c8:	e00e      	b.n	80044e8 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 80044ca:	79ba      	ldrb	r2, [r7, #6]
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	4413      	add	r3, r2
 80044d0:	71fb      	strb	r3, [r7, #7]
      break;
 80044d2:	e009      	b.n	80044e8 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 80044d4:	797b      	ldrb	r3, [r7, #5]
 80044d6:	79fa      	ldrb	r2, [r7, #7]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	71fb      	strb	r3, [r7, #7]
      break;
 80044dc:	e004      	b.n	80044e8 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 80044de:	79bb      	ldrb	r3, [r7, #6]
 80044e0:	79fa      	ldrb	r2, [r7, #7]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	71fb      	strb	r3, [r7, #7]
      break;      
 80044e6:	bf00      	nop
  }
  return dy;
 80044e8:	79fb      	ldrb	r3, [r7, #7]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc90      	pop	{r4, r7}
 80044f2:	4770      	bx	lr

080044f4 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80044f4:	b490      	push	{r4, r7}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4604      	mov	r4, r0
 80044fc:	4608      	mov	r0, r1
 80044fe:	4611      	mov	r1, r2
 8004500:	461a      	mov	r2, r3
 8004502:	4623      	mov	r3, r4
 8004504:	71fb      	strb	r3, [r7, #7]
 8004506:	4603      	mov	r3, r0
 8004508:	71bb      	strb	r3, [r7, #6]
 800450a:	460b      	mov	r3, r1
 800450c:	717b      	strb	r3, [r7, #5]
 800450e:	4613      	mov	r3, r2
 8004510:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8004512:	793b      	ldrb	r3, [r7, #4]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d010      	beq.n	800453a <u8g2_add_vector_x+0x46>
 8004518:	2b02      	cmp	r3, #2
 800451a:	dc13      	bgt.n	8004544 <u8g2_add_vector_x+0x50>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <u8g2_add_vector_x+0x32>
 8004520:	2b01      	cmp	r3, #1
 8004522:	d005      	beq.n	8004530 <u8g2_add_vector_x+0x3c>
 8004524:	e00e      	b.n	8004544 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8004526:	79ba      	ldrb	r2, [r7, #6]
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	4413      	add	r3, r2
 800452c:	71fb      	strb	r3, [r7, #7]
      break;
 800452e:	e00e      	b.n	800454e <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8004530:	797b      	ldrb	r3, [r7, #5]
 8004532:	79fa      	ldrb	r2, [r7, #7]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	71fb      	strb	r3, [r7, #7]
      break;
 8004538:	e009      	b.n	800454e <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 800453a:	79bb      	ldrb	r3, [r7, #6]
 800453c:	79fa      	ldrb	r2, [r7, #7]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	71fb      	strb	r3, [r7, #7]
      break;
 8004542:	e004      	b.n	800454e <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8004544:	797a      	ldrb	r2, [r7, #5]
 8004546:	79fb      	ldrb	r3, [r7, #7]
 8004548:	4413      	add	r3, r2
 800454a:	71fb      	strb	r3, [r7, #7]
      break;      
 800454c:	bf00      	nop
  }
  return dx;
 800454e:	79fb      	ldrb	r3, [r7, #7]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bc90      	pop	{r4, r7}
 8004558:	4770      	bx	lr

0800455a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b088      	sub	sp, #32
 800455e:	af02      	add	r7, sp, #8
 8004560:	6078      	str	r0, [r7, #4]
 8004562:	460b      	mov	r3, r1
 8004564:	70fb      	strb	r3, [r7, #3]
 8004566:	4613      	mov	r3, r2
 8004568:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3358      	adds	r3, #88	; 0x58
 800456e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800457a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8004582:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800458a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800458c:	7bfa      	ldrb	r2, [r7, #15]
 800458e:	7d7b      	ldrb	r3, [r7, #21]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8004598:	7dfa      	ldrb	r2, [r7, #23]
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	429a      	cmp	r2, r3
 800459e:	d201      	bcs.n	80045a4 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
 80045a2:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	791b      	ldrb	r3, [r3, #4]
 80045a8:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	795b      	ldrb	r3, [r3, #5]
 80045ae:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80045b0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80045b4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	7b9b      	ldrb	r3, [r3, #14]
 80045bc:	7bb8      	ldrb	r0, [r7, #14]
 80045be:	f7ff ff99 	bl	80044f4 <u8g2_add_vector_x>
 80045c2:	4603      	mov	r3, r0
 80045c4:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80045c6:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80045ca:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	7b9b      	ldrb	r3, [r3, #14]
 80045d2:	7b78      	ldrb	r0, [r7, #13]
 80045d4:	f7ff ff5b 	bl	800448e <u8g2_add_vector_y>
 80045d8:	4603      	mov	r3, r0
 80045da:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80045dc:	78bb      	ldrb	r3, [r7, #2]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00f      	beq.n	8004602 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	7b1a      	ldrb	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	7b9b      	ldrb	r3, [r3, #14]
 80045f0:	7db8      	ldrb	r0, [r7, #22]
 80045f2:	7b7a      	ldrb	r2, [r7, #13]
 80045f4:	7bb9      	ldrb	r1, [r7, #14]
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	4603      	mov	r3, r0
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fc05 	bl	8004e0a <u8g2_DrawHVLine>
 8004600:	e012      	b.n	8004628 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	7adb      	ldrb	r3, [r3, #11]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10e      	bne.n	8004628 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	7b5a      	ldrb	r2, [r3, #13]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	7b9b      	ldrb	r3, [r3, #14]
 8004618:	7db8      	ldrb	r0, [r7, #22]
 800461a:	7b7a      	ldrb	r2, [r7, #13]
 800461c:	7bb9      	ldrb	r1, [r7, #14]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	4603      	mov	r3, r0
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fbf1 	bl	8004e0a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8004628:	7dfa      	ldrb	r2, [r7, #23]
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	429a      	cmp	r2, r3
 800462e:	d309      	bcc.n	8004644 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8004630:	7dfa      	ldrb	r2, [r7, #23]
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	757b      	strb	r3, [r7, #21]
    ly++;
 800463c:	7d3b      	ldrb	r3, [r7, #20]
 800463e:	3301      	adds	r3, #1
 8004640:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8004642:	e79f      	b.n	8004584 <u8g2_font_decode_len+0x2a>
      break;
 8004644:	bf00      	nop
  }
  lx += cnt;
 8004646:	7d7a      	ldrb	r2, [r7, #21]
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	4413      	add	r3, r2
 800464c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800464e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8004656:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	71da      	strb	r2, [r3, #7]
  
}
 800465e:	bf00      	nop
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3358      	adds	r3, #88	; 0x58
 8004674:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004688:	4619      	mov	r1, r3
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f7ff fe91 	bl	80043b2 <u8g2_font_decode_get_unsigned_bits>
 8004690:	4603      	mov	r3, r0
 8004692:	b25a      	sxtb	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800469e:	4619      	mov	r1, r3
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7ff fe86 	bl	80043b2 <u8g2_font_decode_get_unsigned_bits>
 80046a6:	4603      	mov	r3, r0
 80046a8:	b25a      	sxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	7b1b      	ldrb	r3, [r3, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	735a      	strb	r2, [r3, #13]
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af02      	add	r7, sp, #8
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3358      	adds	r3, #88	; 0x58
 80046e2:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80046e4:	6839      	ldr	r1, [r7, #0]
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7ff ffbd 	bl	8004666 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80046f2:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80046fa:	4619      	mov	r1, r3
 80046fc:	6938      	ldr	r0, [r7, #16]
 80046fe:	f7ff fea3 	bl	8004448 <u8g2_font_decode_get_signed_bits>
 8004702:	4603      	mov	r3, r0
 8004704:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800470c:	4619      	mov	r1, r3
 800470e:	6938      	ldr	r0, [r7, #16]
 8004710:	f7ff fe9a 	bl	8004448 <u8g2_font_decode_get_signed_bits>
 8004714:	4603      	mov	r3, r0
 8004716:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800471e:	4619      	mov	r1, r3
 8004720:	6938      	ldr	r0, [r7, #16]
 8004722:	f7ff fe91 	bl	8004448 <u8g2_font_decode_get_signed_bits>
 8004726:	4603      	mov	r3, r0
 8004728:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f340 80cf 	ble.w	80048d4 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	7918      	ldrb	r0, [r3, #4]
 800473a:	7bfa      	ldrb	r2, [r7, #15]
 800473c:	7b7b      	ldrb	r3, [r7, #13]
 800473e:	4413      	add	r3, r2
 8004740:	b2db      	uxtb	r3, r3
 8004742:	425b      	negs	r3, r3
 8004744:	b2db      	uxtb	r3, r3
 8004746:	b25a      	sxtb	r2, r3
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	7b9b      	ldrb	r3, [r3, #14]
 800474c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004750:	f7ff fed0 	bl	80044f4 <u8g2_add_vector_x>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	7958      	ldrb	r0, [r3, #5]
 8004760:	7bfa      	ldrb	r2, [r7, #15]
 8004762:	7b7b      	ldrb	r3, [r7, #13]
 8004764:	4413      	add	r3, r2
 8004766:	b2db      	uxtb	r3, r3
 8004768:	425b      	negs	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	b25a      	sxtb	r2, r3
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	7b9b      	ldrb	r3, [r3, #14]
 8004772:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004776:	f7ff fe8a 	bl	800448e <u8g2_add_vector_y>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	791b      	ldrb	r3, [r3, #4]
 8004786:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	795b      	ldrb	r3, [r3, #5]
 800478c:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8004792:	7d7b      	ldrb	r3, [r7, #21]
 8004794:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	7b9b      	ldrb	r3, [r3, #14]
 800479a:	2b03      	cmp	r3, #3
 800479c:	d852      	bhi.n	8004844 <u8g2_font_decode_glyph+0x170>
 800479e:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <u8g2_font_decode_glyph+0xd0>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	080047b5 	.word	0x080047b5
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047f1 	.word	0x080047f1
 80047b0:	08004821 	.word	0x08004821
      {
	case 0:
	    x1 += decode->glyph_width;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	7dbb      	ldrb	r3, [r7, #22]
 80047be:	4413      	add	r3, r2
 80047c0:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 80047c2:	7bfa      	ldrb	r2, [r7, #15]
 80047c4:	7d3b      	ldrb	r3, [r7, #20]
 80047c6:	4413      	add	r3, r2
 80047c8:	753b      	strb	r3, [r7, #20]
	    break;
 80047ca:	e03b      	b.n	8004844 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	7dfa      	ldrb	r2, [r7, #23]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	3301      	adds	r3, #1
 80047d8:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80047da:	7dbb      	ldrb	r3, [r7, #22]
 80047dc:	3301      	adds	r3, #1
 80047de:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	7d3b      	ldrb	r3, [r7, #20]
 80047ea:	4413      	add	r3, r2
 80047ec:	753b      	strb	r3, [r7, #20]
	    break;
 80047ee:	e029      	b.n	8004844 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	7dfa      	ldrb	r2, [r7, #23]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
 8004800:	3301      	adds	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8004804:	7dbb      	ldrb	r3, [r7, #22]
 8004806:	3301      	adds	r3, #1
 8004808:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	7d7a      	ldrb	r2, [r7, #21]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004812:	7d7b      	ldrb	r3, [r7, #21]
 8004814:	3301      	adds	r3, #1
 8004816:	757b      	strb	r3, [r7, #21]
	    y1++;
 8004818:	7d3b      	ldrb	r3, [r7, #20]
 800481a:	3301      	adds	r3, #1
 800481c:	753b      	strb	r3, [r7, #20]
	    break;	  
 800481e:	e011      	b.n	8004844 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8004820:	7bfa      	ldrb	r2, [r7, #15]
 8004822:	7dbb      	ldrb	r3, [r7, #22]
 8004824:	4413      	add	r3, r2
 8004826:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800482e:	b2db      	uxtb	r3, r3
 8004830:	7d7a      	ldrb	r2, [r7, #21]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004836:	7d7b      	ldrb	r3, [r7, #21]
 8004838:	3301      	adds	r3, #1
 800483a:	757b      	strb	r3, [r7, #21]
	    y1++;
 800483c:	7d3b      	ldrb	r3, [r7, #20]
 800483e:	3301      	adds	r3, #1
 8004840:	753b      	strb	r3, [r7, #20]
	    break;	  
 8004842:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004844:	7db8      	ldrb	r0, [r7, #22]
 8004846:	7d7a      	ldrb	r2, [r7, #21]
 8004848:	7df9      	ldrb	r1, [r7, #23]
 800484a:	7d3b      	ldrb	r3, [r7, #20]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	4603      	mov	r3, r0
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fbf5 	bl	8005040 <u8g2_IsIntersection>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d102      	bne.n	8004862 <u8g2_font_decode_glyph+0x18e>
	return d;
 800485c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8004860:	e03a      	b.n	80048d8 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2200      	movs	r2, #0
 8004866:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2200      	movs	r2, #0
 800486c:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8004874:	4619      	mov	r1, r3
 8004876:	6938      	ldr	r0, [r7, #16]
 8004878:	f7ff fd9b 	bl	80043b2 <u8g2_font_decode_get_unsigned_bits>
 800487c:	4603      	mov	r3, r0
 800487e:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8004886:	4619      	mov	r1, r3
 8004888:	6938      	ldr	r0, [r7, #16]
 800488a:	f7ff fd92 	bl	80043b2 <u8g2_font_decode_get_unsigned_bits>
 800488e:	4603      	mov	r3, r0
 8004890:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8004892:	7afb      	ldrb	r3, [r7, #11]
 8004894:	2200      	movs	r2, #0
 8004896:	4619      	mov	r1, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff fe5e 	bl	800455a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800489e:	7abb      	ldrb	r3, [r7, #10]
 80048a0:	2201      	movs	r2, #1
 80048a2:	4619      	mov	r1, r3
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff fe58 	bl	800455a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80048aa:	2101      	movs	r1, #1
 80048ac:	6938      	ldr	r0, [r7, #16]
 80048ae:	f7ff fd80 	bl	80043b2 <u8g2_font_decode_get_unsigned_bits>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ec      	bne.n	8004892 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80048be:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	dd00      	ble.n	80048c8 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80048c6:	e7d2      	b.n	800486e <u8g2_font_decode_glyph+0x19a>
	break;
 80048c8:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	7b1a      	ldrb	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 80048d4:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f0:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	3317      	adds	r3, #23
 80048f6:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80048f8:	887b      	ldrh	r3, [r7, #2]
 80048fa:	2bff      	cmp	r3, #255	; 0xff
 80048fc:	d82a      	bhi.n	8004954 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80048fe:	887b      	ldrh	r3, [r7, #2]
 8004900:	2b60      	cmp	r3, #96	; 0x60
 8004902:	d907      	bls.n	8004914 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800490a:	461a      	mov	r2, r3
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	4413      	add	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	e009      	b.n	8004928 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8004914:	887b      	ldrh	r3, [r7, #2]
 8004916:	2b40      	cmp	r3, #64	; 0x40
 8004918:	d906      	bls.n	8004928 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8004920:	461a      	mov	r2, r3
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	4413      	add	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	3301      	adds	r3, #1
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d04e      	beq.n	80049d0 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	887a      	ldrh	r2, [r7, #2]
 800493a:	429a      	cmp	r2, r3
 800493c:	d102      	bne.n	8004944 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	3302      	adds	r3, #2
 8004942:	e049      	b.n	80049d8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	3301      	adds	r3, #1
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	4413      	add	r3, r2
 8004950:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004952:	e7e9      	b.n	8004928 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800495a:	461a      	mov	r2, r3
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	4413      	add	r3, r2
 8004960:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8004966:	2100      	movs	r1, #0
 8004968:	6938      	ldr	r0, [r7, #16]
 800496a:	f7ff fc59 	bl	8004220 <u8g2_font_get_word>
 800496e:	4603      	mov	r3, r0
 8004970:	461a      	mov	r2, r3
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	4413      	add	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8004978:	2102      	movs	r1, #2
 800497a:	6938      	ldr	r0, [r7, #16]
 800497c:	f7ff fc50 	bl	8004220 <u8g2_font_get_word>
 8004980:	4603      	mov	r3, r0
 8004982:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	3304      	adds	r3, #4
 8004988:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800498a:	89fa      	ldrh	r2, [r7, #14]
 800498c:	887b      	ldrh	r3, [r7, #2]
 800498e:	429a      	cmp	r2, r3
 8004990:	d3e9      	bcc.n	8004966 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8004998:	89fb      	ldrh	r3, [r7, #14]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	3301      	adds	r3, #1
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	89fb      	ldrh	r3, [r7, #14]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80049ac:	89fb      	ldrh	r3, [r7, #14]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d010      	beq.n	80049d4 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80049b2:	89fa      	ldrh	r2, [r7, #14]
 80049b4:	887b      	ldrh	r3, [r7, #2]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d102      	bne.n	80049c0 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	3303      	adds	r3, #3
 80049be:	e00b      	b.n	80049d8 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	3302      	adds	r3, #2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	4413      	add	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80049ce:	e7e0      	b.n	8004992 <u8g2_font_get_glyph_data+0xb2>
	break;
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <u8g2_font_get_glyph_data+0xf6>
	break;
 80049d4:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	4608      	mov	r0, r1
 80049ea:	4611      	mov	r1, r2
 80049ec:	461a      	mov	r2, r3
 80049ee:	4603      	mov	r3, r0
 80049f0:	70fb      	strb	r3, [r7, #3]
 80049f2:	460b      	mov	r3, r1
 80049f4:	70bb      	strb	r3, [r7, #2]
 80049f6:	4613      	mov	r3, r2
 80049f8:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	78fa      	ldrb	r2, [r7, #3]
 8004a02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	78ba      	ldrb	r2, [r7, #2]
 8004a0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004a0e:	883b      	ldrh	r3, [r7, #0]
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ff64 	bl	80048e0 <u8g2_font_get_glyph_data>
 8004a18:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff fe56 	bl	80046d4 <u8g2_font_decode_glyph>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	4608      	mov	r0, r1
 8004a42:	4611      	mov	r1, r2
 8004a44:	461a      	mov	r2, r3
 8004a46:	4603      	mov	r3, r0
 8004a48:	70fb      	strb	r3, [r7, #3]
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	70bb      	strb	r3, [r7, #2]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d833      	bhi.n	8004ac4 <u8g2_DrawGlyph+0x8c>
 8004a5c:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <u8g2_DrawGlyph+0x2c>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a75 	.word	0x08004a75
 8004a68:	08004a89 	.word	0x08004a89
 8004a6c:	08004a9d 	.word	0x08004a9d
 8004a70:	08004ab1 	.word	0x08004ab1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	461a      	mov	r2, r3
 8004a80:	78bb      	ldrb	r3, [r7, #2]
 8004a82:	4413      	add	r3, r2
 8004a84:	70bb      	strb	r3, [r7, #2]
      break;
 8004a86:	e01d      	b.n	8004ac4 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	4798      	blx	r3
 8004a90:	4603      	mov	r3, r0
 8004a92:	461a      	mov	r2, r3
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	1a9b      	subs	r3, r3, r2
 8004a98:	70fb      	strb	r3, [r7, #3]
      break;
 8004a9a:	e013      	b.n	8004ac4 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4798      	blx	r3
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	78bb      	ldrb	r3, [r7, #2]
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	70bb      	strb	r3, [r7, #2]
      break;
 8004aae:	e009      	b.n	8004ac4 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4798      	blx	r3
 8004ab8:	4603      	mov	r3, r0
 8004aba:	461a      	mov	r2, r3
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	4413      	add	r3, r2
 8004ac0:	70fb      	strb	r3, [r7, #3]
      break;
 8004ac2:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8004ac4:	883b      	ldrh	r3, [r7, #0]
 8004ac6:	78ba      	ldrb	r2, [r7, #2]
 8004ac8:	78f9      	ldrb	r1, [r7, #3]
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ff88 	bl	80049e0 <u8g2_font_draw_glyph>
 8004ad0:	4603      	mov	r3, r0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop

08004adc <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	72fb      	strb	r3, [r7, #11]
 8004aea:	4613      	mov	r3, r2
 8004aec:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 fce3 	bl	80054ba <u8x8_utf8_init>
  sum = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	7812      	ldrb	r2, [r2, #0]
 8004b00:	4611      	mov	r1, r2
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	4798      	blx	r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8004b0a:	8abb      	ldrh	r3, [r7, #20]
 8004b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d038      	beq.n	8004b86 <u8g2_draw_string+0xaa>
      break;
    str++;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3301      	adds	r3, #1
 8004b18:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8004b1a:	8abb      	ldrh	r3, [r7, #20]
 8004b1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d0e9      	beq.n	8004af8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8004b24:	8abb      	ldrh	r3, [r7, #20]
 8004b26:	7aba      	ldrb	r2, [r7, #10]
 8004b28:	7af9      	ldrb	r1, [r7, #11]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f7ff ff84 	bl	8004a38 <u8g2_DrawGlyph>
 8004b30:	4603      	mov	r3, r0
 8004b32:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d81e      	bhi.n	8004b7c <u8g2_draw_string+0xa0>
 8004b3e:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <u8g2_draw_string+0x68>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b5f 	.word	0x08004b5f
 8004b4c:	08004b69 	.word	0x08004b69
 8004b50:	08004b73 	.word	0x08004b73
      {
	case 0:
	  x += delta;
 8004b54:	7afa      	ldrb	r2, [r7, #11]
 8004b56:	7cfb      	ldrb	r3, [r7, #19]
 8004b58:	4413      	add	r3, r2
 8004b5a:	72fb      	strb	r3, [r7, #11]
	  break;
 8004b5c:	e00e      	b.n	8004b7c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8004b5e:	7aba      	ldrb	r2, [r7, #10]
 8004b60:	7cfb      	ldrb	r3, [r7, #19]
 8004b62:	4413      	add	r3, r2
 8004b64:	72bb      	strb	r3, [r7, #10]
	  break;
 8004b66:	e009      	b.n	8004b7c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8004b68:	7afa      	ldrb	r2, [r7, #11]
 8004b6a:	7cfb      	ldrb	r3, [r7, #19]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	72fb      	strb	r3, [r7, #11]
	  break;
 8004b70:	e004      	b.n	8004b7c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8004b72:	7aba      	ldrb	r2, [r7, #10]
 8004b74:	7cfb      	ldrb	r3, [r7, #19]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	72bb      	strb	r3, [r7, #10]
	  break;
 8004b7a:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8004b7c:	7dfa      	ldrb	r2, [r7, #23]
 8004b7e:	7cfb      	ldrb	r3, [r7, #19]
 8004b80:	4413      	add	r3, r2
 8004b82:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004b84:	e7b8      	b.n	8004af8 <u8g2_draw_string+0x1c>
      break;
 8004b86:	bf00      	nop
    }
  }
  return sum;
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop

08004b94 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	72fb      	strb	r3, [r7, #11]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4a06      	ldr	r2, [pc, #24]	; (8004bc4 <u8g2_DrawStr+0x30>)
 8004baa:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8004bac:	7aba      	ldrb	r2, [r7, #10]
 8004bae:	7af9      	ldrb	r1, [r7, #11]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7ff ff92 	bl	8004adc <u8g2_draw_string>
 8004bb8:	4603      	mov	r3, r0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	080054d7 	.word	0x080054d7

08004bc8 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d05d      	beq.n	8004c94 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d04d      	beq.n	8004c96 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d11c      	bne.n	8004c3e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 8004c10:	429a      	cmp	r2, r3
 8004c12:	da05      	bge.n	8004c20 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	dd32      	ble.n	8004c96 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8004c3c:	e02b      	b.n	8004c96 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8004c44:	461a      	mov	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8004c54:	440b      	add	r3, r1
 8004c56:	429a      	cmp	r2, r3
 8004c58:	da0d      	bge.n	8004c76 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	b25a      	sxtb	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8004c82:	429a      	cmp	r2, r3
 8004c84:	dd07      	ble.n	8004c96 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8004c92:	e000      	b.n	8004c96 <u8g2_UpdateRefHeight+0xce>
    return;
 8004c94:	bf00      	nop
  }  
}
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  return 0;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a04      	ldr	r2, [pc, #16]	; (8004cd4 <u8g2_SetFontPosBaseline+0x1c>)
 8004cc4:	655a      	str	r2, [r3, #84]	; 0x54
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	08004ca1 	.word	0x08004ca1

08004cd8 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d00b      	beq.n	8004d04 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3368      	adds	r3, #104	; 0x68
 8004cf6:	6839      	ldr	r1, [r7, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff fab1 	bl	8004260 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff ff62 	bl	8004bc8 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <u8g2_SetFontDirection>:
}



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	4611      	mov	r1, r2
 8004d38:	461a      	mov	r2, r3
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	71fb      	strb	r3, [r7, #7]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	75bb      	strb	r3, [r7, #22]
  b += *len;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	781a      	ldrb	r2, [r3, #0]
 8004d50:	7dbb      	ldrb	r3, [r7, #22]
 8004d52:	4413      	add	r3, r2
 8004d54:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8004d56:	7dfa      	ldrb	r2, [r7, #23]
 8004d58:	7dbb      	ldrb	r3, [r7, #22]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d90b      	bls.n	8004d76 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8004d5e:	7dfa      	ldrb	r2, [r7, #23]
 8004d60:	79bb      	ldrb	r3, [r7, #6]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d205      	bcs.n	8004d72 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8004d66:	79bb      	ldrb	r3, [r7, #6]
 8004d68:	75bb      	strb	r3, [r7, #22]
      b--;
 8004d6a:	7dbb      	ldrb	r3, [r7, #22]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	75bb      	strb	r3, [r7, #22]
 8004d70:	e001      	b.n	8004d76 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8004d76:	7dfa      	ldrb	r2, [r7, #23]
 8004d78:	79bb      	ldrb	r3, [r7, #6]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d301      	bcc.n	8004d82 <u8g2_clip_intersection2+0x56>
    return 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e01c      	b.n	8004dbc <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8004d82:	7dba      	ldrb	r2, [r7, #22]
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d801      	bhi.n	8004d8e <u8g2_clip_intersection2+0x62>
    return 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e016      	b.n	8004dbc <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8004d8e:	7dfa      	ldrb	r2, [r7, #23]
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d201      	bcs.n	8004d9a <u8g2_clip_intersection2+0x6e>
    a = c;
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8004d9a:	7dba      	ldrb	r2, [r7, #22]
 8004d9c:	79bb      	ldrb	r3, [r7, #6]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d901      	bls.n	8004da6 <u8g2_clip_intersection2+0x7a>
    b = d;
 8004da2:	79bb      	ldrb	r3, [r7, #6]
 8004da4:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	7dfa      	ldrb	r2, [r7, #23]
 8004daa:	701a      	strb	r2, [r3, #0]
  b -= a;
 8004dac:	7dba      	ldrb	r2, [r7, #22]
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	7dba      	ldrb	r2, [r7, #22]
 8004db8:	701a      	strb	r2, [r3, #0]
  return 1;
 8004dba:	2301      	movs	r3, #1
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004dc8:	b590      	push	{r4, r7, lr}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	70fb      	strb	r3, [r7, #3]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70bb      	strb	r3, [r7, #2]
 8004dde:	4613      	mov	r3, r2
 8004de0:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004de8:	78ba      	ldrb	r2, [r7, #2]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004df2:	7878      	ldrb	r0, [r7, #1]
 8004df4:	78ba      	ldrb	r2, [r7, #2]
 8004df6:	78f9      	ldrb	r1, [r7, #3]
 8004df8:	7e3b      	ldrb	r3, [r7, #24]
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	47a0      	blx	r4
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd90      	pop	{r4, r7, pc}

08004e0a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004e0a:	b590      	push	{r4, r7, lr}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af02      	add	r7, sp, #8
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	4608      	mov	r0, r1
 8004e14:	4611      	mov	r1, r2
 8004e16:	461a      	mov	r2, r3
 8004e18:	4603      	mov	r3, r0
 8004e1a:	70fb      	strb	r3, [r7, #3]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70bb      	strb	r3, [r7, #2]
 8004e20:	4613      	mov	r3, r2
 8004e22:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d06d      	beq.n	8004f0a <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8004e2e:	787b      	ldrb	r3, [r7, #1]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d06a      	beq.n	8004f0a <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8004e34:	787b      	ldrb	r3, [r7, #1]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d918      	bls.n	8004e6c <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8004e3a:	7e3b      	ldrb	r3, [r7, #24]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d109      	bne.n	8004e54 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8004e40:	78fa      	ldrb	r2, [r7, #3]
 8004e42:	787b      	ldrb	r3, [r7, #1]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	70fb      	strb	r3, [r7, #3]
	  x++;
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	70fb      	strb	r3, [r7, #3]
 8004e52:	e00b      	b.n	8004e6c <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8004e54:	7e3b      	ldrb	r3, [r7, #24]
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d108      	bne.n	8004e6c <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8004e5a:	78ba      	ldrb	r2, [r7, #2]
 8004e5c:	787b      	ldrb	r3, [r7, #1]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	70bb      	strb	r3, [r7, #2]
	  y++;
 8004e64:	78bb      	ldrb	r3, [r7, #2]
 8004e66:	3301      	adds	r3, #1
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8004e6c:	7e3b      	ldrb	r3, [r7, #24]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8004e74:	7e3b      	ldrb	r3, [r7, #24]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d119      	bne.n	8004eae <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8004e80:	78bb      	ldrb	r3, [r7, #2]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d838      	bhi.n	8004ef8 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8004e8c:	78bb      	ldrb	r3, [r7, #2]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d934      	bls.n	8004efc <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004e9e:	1c79      	adds	r1, r7, #1
 8004ea0:	1cf8      	adds	r0, r7, #3
 8004ea2:	f7ff ff43 	bl	8004d2c <u8g2_clip_intersection2>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d119      	bne.n	8004ee0 <u8g2_DrawHVLine+0xd6>
	  return;
 8004eac:	e02d      	b.n	8004f0a <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d822      	bhi.n	8004f00 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d91e      	bls.n	8004f04 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004ed2:	1c79      	adds	r1, r7, #1
 8004ed4:	1cb8      	adds	r0, r7, #2
 8004ed6:	f7ff ff29 	bl	8004d2c <u8g2_clip_intersection2>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d013      	beq.n	8004f08 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee4:	689c      	ldr	r4, [r3, #8]
 8004ee6:	78f9      	ldrb	r1, [r7, #3]
 8004ee8:	78ba      	ldrb	r2, [r7, #2]
 8004eea:	7878      	ldrb	r0, [r7, #1]
 8004eec:	7e3b      	ldrb	r3, [r7, #24]
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	47a0      	blx	r4
 8004ef6:	e008      	b.n	8004f0a <u8g2_DrawHVLine+0x100>
	  return;
 8004ef8:	bf00      	nop
 8004efa:	e006      	b.n	8004f0a <u8g2_DrawHVLine+0x100>
	  return;
 8004efc:	bf00      	nop
 8004efe:	e004      	b.n	8004f0a <u8g2_DrawHVLine+0x100>
	  return;
 8004f00:	bf00      	nop
 8004f02:	e002      	b.n	8004f0a <u8g2_DrawHVLine+0x100>
	  return;
 8004f04:	bf00      	nop
 8004f06:	e000      	b.n	8004f0a <u8g2_DrawHVLine+0x100>
	  return;
 8004f08:	bf00      	nop
    }
}
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd90      	pop	{r4, r7, pc}

08004f10 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	4608      	mov	r0, r1
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	70fb      	strb	r3, [r7, #3]
 8004f22:	460b      	mov	r3, r1
 8004f24:	70bb      	strb	r3, [r7, #2]
 8004f26:	4613      	mov	r3, r2
 8004f28:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8004f2a:	787b      	ldrb	r3, [r7, #1]
 8004f2c:	78ba      	ldrb	r2, [r7, #2]
 8004f2e:	78f9      	ldrb	r1, [r7, #3]
 8004f30:	2000      	movs	r0, #0
 8004f32:	9000      	str	r0, [sp, #0]
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff ff68 	bl	8004e0a <u8g2_DrawHVLine>
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af02      	add	r7, sp, #8
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	4608      	mov	r0, r1
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4603      	mov	r3, r0
 8004f52:	70fb      	strb	r3, [r7, #3]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70bb      	strb	r3, [r7, #2]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8004f5c:	787b      	ldrb	r3, [r7, #1]
 8004f5e:	78ba      	ldrb	r2, [r7, #2]
 8004f60:	78f9      	ldrb	r1, [r7, #3]
 8004f62:	2001      	movs	r0, #1
 8004f64:	9000      	str	r0, [sp, #0]
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff ff4f 	bl	8004e0a <u8g2_DrawHVLine>
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
 8004f80:	4613      	mov	r3, r2
 8004f82:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004f8a:	78ba      	ldrb	r2, [r7, #2]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d31a      	bcc.n	8004fc6 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004f96:	78ba      	ldrb	r2, [r7, #2]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d216      	bcs.n	8004fca <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fa2:	78fa      	ldrb	r2, [r7, #3]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d312      	bcc.n	8004fce <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004fae:	78fa      	ldrb	r2, [r7, #3]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d20e      	bcs.n	8004fd2 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8004fb4:	78ba      	ldrb	r2, [r7, #2]
 8004fb6:	78f9      	ldrb	r1, [r7, #3]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff ff23 	bl	8004e0a <u8g2_DrawHVLine>
 8004fc4:	e006      	b.n	8004fd4 <u8g2_DrawPixel+0x60>
    return;
 8004fc6:	bf00      	nop
 8004fc8:	e004      	b.n	8004fd4 <u8g2_DrawPixel+0x60>
    return;
 8004fca:	bf00      	nop
 8004fcc:	e002      	b.n	8004fd4 <u8g2_DrawPixel+0x60>
    return;
 8004fce:	bf00      	nop
 8004fd0:	e000      	b.n	8004fd4 <u8g2_DrawPixel+0x60>
    return;
 8004fd2:	bf00      	nop
}
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8004fda:	b490      	push	{r4, r7}
 8004fdc:	b082      	sub	sp, #8
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	4608      	mov	r0, r1
 8004fe4:	4611      	mov	r1, r2
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4623      	mov	r3, r4
 8004fea:	71fb      	strb	r3, [r7, #7]
 8004fec:	4603      	mov	r3, r0
 8004fee:	71bb      	strb	r3, [r7, #6]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	717b      	strb	r3, [r7, #5]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8004ff8:	797a      	ldrb	r2, [r7, #5]
 8004ffa:	79bb      	ldrb	r3, [r7, #6]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d20d      	bcs.n	800501c <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8005000:	793a      	ldrb	r2, [r7, #4]
 8005002:	79fb      	ldrb	r3, [r7, #7]
 8005004:	429a      	cmp	r2, r3
 8005006:	d901      	bls.n	800500c <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8005008:	2301      	movs	r3, #1
 800500a:	e014      	b.n	8005036 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800500c:	797a      	ldrb	r2, [r7, #5]
 800500e:	793b      	ldrb	r3, [r7, #4]
 8005010:	429a      	cmp	r2, r3
 8005012:	d901      	bls.n	8005018 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8005014:	2301      	movs	r3, #1
 8005016:	e00e      	b.n	8005036 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8005018:	2300      	movs	r3, #0
 800501a:	e00c      	b.n	8005036 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800501c:	793a      	ldrb	r2, [r7, #4]
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	429a      	cmp	r2, r3
 8005022:	d907      	bls.n	8005034 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8005024:	797a      	ldrb	r2, [r7, #5]
 8005026:	793b      	ldrb	r3, [r7, #4]
 8005028:	429a      	cmp	r2, r3
 800502a:	d901      	bls.n	8005030 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800502c:	2301      	movs	r3, #1
 800502e:	e002      	b.n	8005036 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8005030:	2300      	movs	r3, #0
 8005032:	e000      	b.n	8005036 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8005034:	2300      	movs	r3, #0
    }
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bc90      	pop	{r4, r7}
 800503e:	4770      	bx	lr

08005040 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	4608      	mov	r0, r1
 800504a:	4611      	mov	r1, r2
 800504c:	461a      	mov	r2, r3
 800504e:	4603      	mov	r3, r0
 8005050:	70fb      	strb	r3, [r7, #3]
 8005052:	460b      	mov	r3, r1
 8005054:	70bb      	strb	r3, [r7, #2]
 8005056:	4613      	mov	r3, r2
 8005058:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8005066:	7c3b      	ldrb	r3, [r7, #16]
 8005068:	78ba      	ldrb	r2, [r7, #2]
 800506a:	f7ff ffb6 	bl	8004fda <u8g2_is_intersection_decision_tree>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <u8g2_IsIntersection+0x38>
    return 0; 
 8005074:	2300      	movs	r3, #0
 8005076:	e00a      	b.n	800508e <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8005084:	787b      	ldrb	r3, [r7, #1]
 8005086:	78fa      	ldrb	r2, [r7, #3]
 8005088:	f7ff ffa7 	bl	8004fda <u8g2_is_intersection_decision_tree>
 800508c:	4603      	mov	r3, r0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005096:	b480      	push	{r7}
 8005098:	b087      	sub	sp, #28
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	4608      	mov	r0, r1
 80050a0:	4611      	mov	r1, r2
 80050a2:	461a      	mov	r2, r3
 80050a4:	4603      	mov	r3, r0
 80050a6:	70fb      	strb	r3, [r7, #3]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70bb      	strb	r3, [r7, #2]
 80050ac:	4613      	mov	r3, r2
 80050ae:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80050b0:	78bb      	ldrb	r3, [r7, #2]
 80050b2:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80050bc:	2301      	movs	r3, #1
 80050be:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 80050c0:	7c3a      	ldrb	r2, [r7, #16]
 80050c2:	7cfb      	ldrb	r3, [r7, #19]
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d801      	bhi.n	80050e0 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80050dc:	7c3b      	ldrb	r3, [r7, #16]
 80050de:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d001      	beq.n	80050ee <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80050ea:	7c3b      	ldrb	r3, [r7, #16]
 80050ec:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80050ee:	78bb      	ldrb	r3, [r7, #2]
 80050f0:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 80050f2:	89fb      	ldrh	r3, [r7, #14]
 80050f4:	f023 0307 	bic.w	r3, r3, #7
 80050f8:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	7c1b      	ldrb	r3, [r3, #16]
 8005100:	b29b      	uxth	r3, r3
 8005102:	89fa      	ldrh	r2, [r7, #14]
 8005104:	fb12 f303 	smulbb	r3, r2, r3
 8005108:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8005110:	89fb      	ldrh	r3, [r7, #14]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4413      	add	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
  ptr += x;
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4413      	add	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8005120:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d117      	bne.n	8005158 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	781a      	ldrb	r2, [r3, #0]
 800512c:	7cbb      	ldrb	r3, [r7, #18]
 800512e:	4313      	orrs	r3, r2
 8005130:	b2da      	uxtb	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	781a      	ldrb	r2, [r3, #0]
 800513a:	7c7b      	ldrb	r3, [r7, #17]
 800513c:	4053      	eors	r3, r2
 800513e:	b2da      	uxtb	r2, r3
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	701a      	strb	r2, [r3, #0]
	ptr++;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	3301      	adds	r3, #1
 8005148:	617b      	str	r3, [r7, #20]
	len--;
 800514a:	787b      	ldrb	r3, [r7, #1]
 800514c:	3b01      	subs	r3, #1
 800514e:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8005150:	787b      	ldrb	r3, [r7, #1]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e8      	bne.n	8005128 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8005156:	e039      	b.n	80051cc <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	781a      	ldrb	r2, [r3, #0]
 800515c:	7cbb      	ldrb	r3, [r7, #18]
 800515e:	4313      	orrs	r3, r2
 8005160:	b2da      	uxtb	r2, r3
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	781a      	ldrb	r2, [r3, #0]
 800516a:	7c7b      	ldrb	r3, [r7, #17]
 800516c:	4053      	eors	r3, r2
 800516e:	b2da      	uxtb	r2, r3
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8005174:	7cfb      	ldrb	r3, [r7, #19]
 8005176:	3301      	adds	r3, #1
 8005178:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 800517a:	7cfb      	ldrb	r3, [r7, #19]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	74fb      	strb	r3, [r7, #19]
      len--;
 8005182:	787b      	ldrb	r3, [r7, #1]
 8005184:	3b01      	subs	r3, #1
 8005186:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8005188:	7cfb      	ldrb	r3, [r7, #19]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d115      	bne.n	80051ba <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005194:	461a      	mov	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	4413      	add	r3, r2
 800519a:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d801      	bhi.n	80051aa <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80051a6:	2301      	movs	r3, #1
 80051a8:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d008      	beq.n	80051c6 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80051b4:	2301      	movs	r3, #1
 80051b6:	747b      	strb	r3, [r7, #17]
 80051b8:	e005      	b.n	80051c6 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80051ba:	7cbb      	ldrb	r3, [r7, #18]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 80051c0:	7c7b      	ldrb	r3, [r7, #17]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 80051c6:	787b      	ldrb	r3, [r7, #1]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1c5      	bne.n	8005158 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	22ff      	movs	r2, #255	; 0xff
 80051f4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	22ff      	movs	r2, #255	; 0xff
 80051fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	4798      	blx	r3
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	603b      	str	r3, [r7, #0]
 800521e:	4613      	mov	r3, r2
 8005220:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	79fa      	ldrb	r2, [r7, #7]
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f7ff ffaf 	bl	80051d8 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7ff fd1c 	bl	8004cb8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8005288:	bf00      	nop
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	7bfa      	ldrb	r2, [r7, #15]
 80052b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	7c1b      	ldrb	r3, [r3, #16]
 80052b8:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	2b1f      	cmp	r3, #31
 80052be:	d901      	bls.n	80052c4 <u8g2_update_dimension_common+0x34>
    t = 31;
 80052c0:	231f      	movs	r3, #31
 80052c2:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	7bfa      	ldrb	r2, [r7, #15]
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	7bfa      	ldrb	r2, [r7, #15]
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ee:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 80052f8:	4413      	add	r3, r2
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	7c52      	ldrb	r2, [r2, #17]
 80052fe:	4293      	cmp	r3, r2
 8005300:	dd06      	ble.n	8005310 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	7c5a      	ldrb	r2, [r3, #17]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	4413      	add	r3, r2
 8005338:	b2da      	uxtb	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	22f0      	movs	r2, #240	; 0xf0
 8005344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	8a9b      	ldrh	r3, [r3, #20]
 800534c:	2bf0      	cmp	r3, #240	; 0xf0
 800534e:	d805      	bhi.n	800535c <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	8a9b      	ldrh	r3, [r3, #20]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	8adb      	ldrh	r3, [r3, #22]
 8005360:	b2da      	uxtb	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 8005368:	bf00      	nop
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af02      	add	r7, sp, #8
 800537a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	4603      	mov	r3, r0
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff fe51 	bl	8005040 <u8g2_IsIntersection>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80053ac:	e03b      	b.n	8005426 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d205      	bcs.n	80053d2 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80053de:	429a      	cmp	r2, r3
 80053e0:	d905      	bls.n	80053ee <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d205      	bcs.n	800540a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005416:	429a      	cmp	r2, r3
 8005418:	d905      	bls.n	8005426 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff ff2a 	bl	8005290 <u8g2_update_dimension_common>
}
 800543c:	bf00      	nop
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff ff7b 	bl	8005374 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af02      	add	r7, sp, #8
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	4608      	mov	r0, r1
 8005490:	4611      	mov	r1, r2
 8005492:	461a      	mov	r2, r3
 8005494:	4603      	mov	r3, r0
 8005496:	70fb      	strb	r3, [r7, #3]
 8005498:	460b      	mov	r3, r1
 800549a:	70bb      	strb	r3, [r7, #2]
 800549c:	4613      	mov	r3, r2
 800549e:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80054a0:	7878      	ldrb	r0, [r7, #1]
 80054a2:	78ba      	ldrb	r2, [r7, #2]
 80054a4:	78f9      	ldrb	r1, [r7, #3]
 80054a6:	7c3b      	ldrb	r3, [r7, #16]
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	4603      	mov	r3, r0
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff fc8b 	bl	8004dc8 <u8g2_draw_hv_line_2dir>
}
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	460b      	mov	r3, r1
 80054e0:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <u8x8_ascii_next+0x18>
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	2b0a      	cmp	r3, #10
 80054ec:	d102      	bne.n	80054f4 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80054ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054f2:	e001      	b.n	80054f8 <u8x8_ascii_next+0x22>
  return b;
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	b29b      	uxth	r3, r3
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005504:	b590      	push	{r4, r7, lr}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	460b      	mov	r3, r1
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	691c      	ldr	r4, [r3, #16]
 8005516:	7afa      	ldrb	r2, [r7, #11]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2117      	movs	r1, #23
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	47a0      	blx	r4
 8005520:	4603      	mov	r3, r0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	bd90      	pop	{r4, r7, pc}

0800552a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	460b      	mov	r3, r1
 8005534:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8005536:	1cfb      	adds	r3, r7, #3
 8005538:	461a      	mov	r2, r3
 800553a:	2101      	movs	r1, #1
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff ffe1 	bl	8005504 <u8x8_byte_SendBytes>
 8005542:	4603      	mov	r3, r0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691c      	ldr	r4, [r3, #16]
 8005558:	2300      	movs	r3, #0
 800555a:	2200      	movs	r2, #0
 800555c:	2118      	movs	r1, #24
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	47a0      	blx	r4
 8005562:	4603      	mov	r3, r0
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	bd90      	pop	{r4, r7, pc}

0800556c <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800556c:	b590      	push	{r4, r7, lr}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691c      	ldr	r4, [r3, #16]
 8005578:	2300      	movs	r3, #0
 800557a:	2200      	movs	r2, #0
 800557c:	2119      	movs	r1, #25
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	47a0      	blx	r4
 8005582:	4603      	mov	r3, r0
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	bd90      	pop	{r4, r7, pc}

0800558c <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68dc      	ldr	r4, [r3, #12]
 800559c:	78fa      	ldrb	r2, [r7, #3]
 800559e:	2300      	movs	r3, #0
 80055a0:	2115      	movs	r1, #21
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	47a0      	blx	r4
 80055a6:	4603      	mov	r3, r0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd90      	pop	{r4, r7, pc}

080055b0 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80055b0:	b590      	push	{r4, r7, lr}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68dc      	ldr	r4, [r3, #12]
 80055c0:	78fa      	ldrb	r2, [r7, #3]
 80055c2:	2300      	movs	r3, #0
 80055c4:	2116      	movs	r1, #22
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	47a0      	blx	r4
 80055ca:	4603      	mov	r3, r0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd90      	pop	{r4, r7, pc}

080055d4 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80055d4:	b590      	push	{r4, r7, lr}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	460b      	mov	r3, r1
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68dc      	ldr	r4, [r3, #12]
 80055e6:	7afa      	ldrb	r2, [r7, #11]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2117      	movs	r1, #23
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	47a0      	blx	r4
 80055f0:	4603      	mov	r3, r0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd90      	pop	{r4, r7, pc}

080055fa <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80055fa:	b590      	push	{r4, r7, lr}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68dc      	ldr	r4, [r3, #12]
 8005606:	2300      	movs	r3, #0
 8005608:	2200      	movs	r2, #0
 800560a:	2118      	movs	r1, #24
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	47a0      	blx	r4
 8005610:	4603      	mov	r3, r0
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	bd90      	pop	{r4, r7, pc}

0800561a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800561a:	b590      	push	{r4, r7, lr}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68dc      	ldr	r4, [r3, #12]
 8005626:	2300      	movs	r3, #0
 8005628:	2200      	movs	r2, #0
 800562a:	2119      	movs	r1, #25
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	47a0      	blx	r4
 8005630:	4603      	mov	r3, r0
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	bd90      	pop	{r4, r7, pc}

0800563a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800563a:	b590      	push	{r4, r7, lr}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	73fb      	strb	r3, [r7, #15]
    data++;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	3301      	adds	r3, #1
 800564e:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2bfe      	cmp	r3, #254	; 0xfe
 8005654:	d031      	beq.n	80056ba <u8x8_cad_SendSequence+0x80>
 8005656:	2bfe      	cmp	r3, #254	; 0xfe
 8005658:	dc3d      	bgt.n	80056d6 <u8x8_cad_SendSequence+0x9c>
 800565a:	2b19      	cmp	r3, #25
 800565c:	dc3b      	bgt.n	80056d6 <u8x8_cad_SendSequence+0x9c>
 800565e:	2b18      	cmp	r3, #24
 8005660:	da23      	bge.n	80056aa <u8x8_cad_SendSequence+0x70>
 8005662:	2b16      	cmp	r3, #22
 8005664:	dc02      	bgt.n	800566c <u8x8_cad_SendSequence+0x32>
 8005666:	2b15      	cmp	r3, #21
 8005668:	da03      	bge.n	8005672 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800566a:	e034      	b.n	80056d6 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800566c:	2b17      	cmp	r3, #23
 800566e:	d00e      	beq.n	800568e <u8x8_cad_SendSequence+0x54>
	return;
 8005670:	e031      	b.n	80056d6 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68dc      	ldr	r4, [r3, #12]
 800567c:	7bba      	ldrb	r2, [r7, #14]
 800567e:	7bf9      	ldrb	r1, [r7, #15]
 8005680:	2300      	movs	r3, #0
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	47a0      	blx	r4
	  data++;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	3301      	adds	r3, #1
 800568a:	603b      	str	r3, [r7, #0]
	  break;
 800568c:	e022      	b.n	80056d4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8005694:	f107 030e 	add.w	r3, r7, #14
 8005698:	461a      	mov	r2, r3
 800569a:	2101      	movs	r1, #1
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ff99 	bl	80055d4 <u8x8_cad_SendData>
	  data++;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	3301      	adds	r3, #1
 80056a6:	603b      	str	r3, [r7, #0]
	  break;
 80056a8:	e014      	b.n	80056d4 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68dc      	ldr	r4, [r3, #12]
 80056ae:	7bf9      	ldrb	r1, [r7, #15]
 80056b0:	2300      	movs	r3, #0
 80056b2:	2200      	movs	r2, #0
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	47a0      	blx	r4
	  break;
 80056b8:	e00c      	b.n	80056d4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80056c0:	7bbb      	ldrb	r3, [r7, #14]
 80056c2:	461a      	mov	r2, r3
 80056c4:	2129      	movs	r1, #41	; 0x29
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 fa2d 	bl	8005b26 <u8x8_gpio_call>
	  data++;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	3301      	adds	r3, #1
 80056d0:	603b      	str	r3, [r7, #0]
	  break;
 80056d2:	bf00      	nop
    cmd = *data;
 80056d4:	e7b6      	b.n	8005644 <u8x8_cad_SendSequence+0xa>
	return;
 80056d6:	bf00      	nop
    }
  }
}
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd90      	pop	{r4, r7, pc}

080056de <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80056de:	b590      	push	{r4, r7, lr}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	460b      	mov	r3, r1
 80056e8:	607a      	str	r2, [r7, #4]
 80056ea:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7ff ff2d 	bl	800554c <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80056f2:	2140      	movs	r1, #64	; 0x40
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f7ff ff18 	bl	800552a <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	691c      	ldr	r4, [r3, #16]
 80056fe:	7afa      	ldrb	r2, [r7, #11]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2117      	movs	r1, #23
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff ff2f 	bl	800556c <u8x8_byte_EndTransfer>
}
 800570e:	bf00      	nop
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	bd90      	pop	{r4, r7, pc}
	...

08005718 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	607b      	str	r3, [r7, #4]
 8005722:	460b      	mov	r3, r1
 8005724:	72fb      	strb	r3, [r7, #11]
 8005726:	4613      	mov	r3, r2
 8005728:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 800572a:	7afb      	ldrb	r3, [r7, #11]
 800572c:	3b14      	subs	r3, #20
 800572e:	2b05      	cmp	r3, #5
 8005730:	d86e      	bhi.n	8005810 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8005732:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	080057cf 	.word	0x080057cf
 800573c:	08005751 	.word	0x08005751
 8005740:	0800577f 	.word	0x0800577f
 8005744:	0800578b 	.word	0x0800578b
 8005748:	080057f3 	.word	0x080057f3
 800574c:	080057fb 	.word	0x080057fb
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8005750:	4b33      	ldr	r3, [pc, #204]	; (8005820 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7ff ff07 	bl	800556c <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f7ff fef4 	bl	800554c <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8005764:	2100      	movs	r1, #0
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff fedf 	bl	800552a <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800576c:	7abb      	ldrb	r3, [r7, #10]
 800576e:	4619      	mov	r1, r3
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f7ff feda 	bl	800552a <u8x8_byte_SendByte>
      in_transfer = 1;
 8005776:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 800577c:	e04a      	b.n	8005814 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 800577e:	7abb      	ldrb	r3, [r7, #10]
 8005780:	4619      	mov	r1, r3
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f7ff fed1 	bl	800552a <u8x8_byte_SendByte>
      break;      
 8005788:	e044      	b.n	8005814 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 800578a:	4b25      	ldr	r3, [pc, #148]	; (8005820 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7ff feea 	bl	800556c <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800579c:	e00a      	b.n	80057b4 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	2118      	movs	r1, #24
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f7ff ff9b 	bl	80056de <u8x8_i2c_data_transfer>
	arg_int-=24;
 80057a8:	7abb      	ldrb	r3, [r7, #10]
 80057aa:	3b18      	subs	r3, #24
 80057ac:	72bb      	strb	r3, [r7, #10]
	p+=24;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	3318      	adds	r3, #24
 80057b2:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80057b4:	7abb      	ldrb	r3, [r7, #10]
 80057b6:	2b18      	cmp	r3, #24
 80057b8:	d8f1      	bhi.n	800579e <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 80057ba:	7abb      	ldrb	r3, [r7, #10]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	4619      	mov	r1, r3
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7ff ff8c 	bl	80056de <u8x8_i2c_data_transfer>
      in_transfer = 0;
 80057c6:	4b16      	ldr	r3, [pc, #88]	; (8005820 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
      break;
 80057cc:	e022      	b.n	8005814 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057d4:	2bff      	cmp	r3, #255	; 0xff
 80057d6:	d103      	bne.n	80057e0 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2278      	movs	r2, #120	; 0x78
 80057dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	691c      	ldr	r4, [r3, #16]
 80057e4:	7aba      	ldrb	r2, [r7, #10]
 80057e6:	7af9      	ldrb	r1, [r7, #11]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	47a0      	blx	r4
 80057ee:	4603      	mov	r3, r0
 80057f0:	e011      	b.n	8005816 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 80057f2:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
      break;
 80057f8:	e00c      	b.n	8005814 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80057fa:	4b09      	ldr	r3, [pc, #36]	; (8005820 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff feb2 	bl	800556c <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
      break;
 800580e:	e001      	b.n	8005814 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8005810:	2300      	movs	r3, #0
 8005812:	e000      	b.n	8005816 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8005814:	2301      	movs	r3, #1
}
 8005816:	4618      	mov	r0, r3
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	bd90      	pop	{r4, r7, pc}
 800581e:	bf00      	nop
 8005820:	2000064c 	.word	0x2000064c

08005824 <u8x8_d_ssd1306_128x32_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	607b      	str	r3, [r7, #4]
 800582e:	460b      	mov	r3, r1
 8005830:	72fb      	strb	r3, [r7, #11]
 8005832:	4613      	mov	r3, r2
 8005834:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8005836:	7afb      	ldrb	r3, [r7, #11]
 8005838:	3b0a      	subs	r3, #10
 800583a:	2b05      	cmp	r3, #5
 800583c:	f200 8090 	bhi.w	8005960 <u8x8_d_ssd1306_128x32_generic+0x13c>
 8005840:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <u8x8_d_ssd1306_128x32_generic+0x24>)
 8005842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005846:	bf00      	nop
 8005848:	08005861 	.word	0x08005861
 800584c:	08005871 	.word	0x08005871
 8005850:	08005961 	.word	0x08005961
 8005854:	0800588b 	.word	0x0800588b
 8005858:	080058bd 	.word	0x080058bd
 800585c:	080058dd 	.word	0x080058dd
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f8c3 	bl	80059ec <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
 8005866:	4942      	ldr	r1, [pc, #264]	; (8005970 <u8x8_d_ssd1306_128x32_generic+0x14c>)
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f7ff fee6 	bl	800563a <u8x8_cad_SendSequence>
      break;
 800586e:	e079      	b.n	8005964 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8005870:	7abb      	ldrb	r3, [r7, #10]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d104      	bne.n	8005880 <u8x8_d_ssd1306_128x32_generic+0x5c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
 8005876:	493f      	ldr	r1, [pc, #252]	; (8005974 <u8x8_d_ssd1306_128x32_generic+0x150>)
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f7ff fede 	bl	800563a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
      break;
 800587e:	e071      	b.n	8005964 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 8005880:	493d      	ldr	r1, [pc, #244]	; (8005978 <u8x8_d_ssd1306_128x32_generic+0x154>)
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f7ff fed9 	bl	800563a <u8x8_cad_SendSequence>
      break;
 8005888:	e06c      	b.n	8005964 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800588a:	7abb      	ldrb	r3, [r7, #10]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <u8x8_d_ssd1306_128x32_generic+0x82>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
 8005890:	493a      	ldr	r1, [pc, #232]	; (800597c <u8x8_d_ssd1306_128x32_generic+0x158>)
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff fed1 	bl	800563a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	7c9a      	ldrb	r2, [r3, #18]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80058a4:	e05e      	b.n	8005964 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
 80058a6:	4936      	ldr	r1, [pc, #216]	; (8005980 <u8x8_d_ssd1306_128x32_generic+0x15c>)
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f7ff fec6 	bl	800563a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	7cda      	ldrb	r2, [r3, #19]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80058ba:	e053      	b.n	8005964 <u8x8_d_ssd1306_128x32_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff fe9c 	bl	80055fa <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80058c2:	2181      	movs	r1, #129	; 0x81
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7ff fe61 	bl	800558c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80058ca:	7abb      	ldrb	r3, [r7, #10]
 80058cc:	4619      	mov	r1, r3
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f7ff fe6e 	bl	80055b0 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff fea0 	bl	800561a <u8x8_cad_EndTransfer>
      break;
 80058da:	e043      	b.n	8005964 <u8x8_d_ssd1306_128x32_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff fe8c 	bl	80055fa <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	795b      	ldrb	r3, [r3, #5]
 80058e6:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80058e8:	7dfb      	ldrb	r3, [r7, #23]
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	4413      	add	r3, r2
 80058f8:	75fb      	strb	r3, [r7, #23]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80058fa:	7dfb      	ldrb	r3, [r7, #23]
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	f043 0310 	orr.w	r3, r3, #16
 8005904:	b2db      	uxtb	r3, r3
 8005906:	4619      	mov	r1, r3
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7ff fe3f 	bl	800558c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	b2db      	uxtb	r3, r3
 8005916:	4619      	mov	r1, r3
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f7ff fe37 	bl	800558c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	799b      	ldrb	r3, [r3, #6]
 8005922:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8005926:	b2db      	uxtb	r3, r3
 8005928:	4619      	mov	r1, r3
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f7ff fe2e 	bl	800558c <u8x8_cad_SendCmd>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	791b      	ldrb	r3, [r3, #4]
 8005934:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800593c:	7dbb      	ldrb	r3, [r7, #22]
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	b2db      	uxtb	r3, r3
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4619      	mov	r1, r3
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7ff fe44 	bl	80055d4 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800594c:	7abb      	ldrb	r3, [r7, #10]
 800594e:	3b01      	subs	r3, #1
 8005950:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8005952:	7abb      	ldrb	r3, [r7, #10]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1eb      	bne.n	8005930 <u8x8_d_ssd1306_128x32_generic+0x10c>
      
      u8x8_cad_EndTransfer(u8x8);
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff fe5e 	bl	800561a <u8x8_cad_EndTransfer>
      break;
 800595e:	e001      	b.n	8005964 <u8x8_d_ssd1306_128x32_generic+0x140>
    default:
      return 0;
 8005960:	2300      	movs	r3, #0
 8005962:	e000      	b.n	8005966 <u8x8_d_ssd1306_128x32_generic+0x142>
  }
  return 1;
 8005964:	2301      	movs	r3, #1
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	08018ec4 	.word	0x08018ec4
 8005974:	08018efc 	.word	0x08018efc
 8005978:	08018f04 	.word	0x08018f04
 800597c:	08018f0c 	.word	0x08018f0c
 8005980:	08018f14 	.word	0x08018f14

08005984 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	607b      	str	r3, [r7, #4]
 800598e:	460b      	mov	r3, r1
 8005990:	72fb      	strb	r3, [r7, #11]
 8005992:	4613      	mov	r3, r2
 8005994:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 8005996:	7afb      	ldrb	r3, [r7, #11]
 8005998:	2b09      	cmp	r3, #9
 800599a:	d105      	bne.n	80059a8 <u8x8_d_ssd1306_128x32_univision+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
 800599c:	4908      	ldr	r1, [pc, #32]	; (80059c0 <u8x8_d_ssd1306_128x32_univision+0x3c>)
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 f810 	bl	80059c4 <u8x8_d_helper_display_setup_memory>
      return 1;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e006      	b.n	80059b6 <u8x8_d_ssd1306_128x32_univision+0x32>
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
 80059a8:	7aba      	ldrb	r2, [r7, #10]
 80059aa:	7af9      	ldrb	r1, [r7, #11]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff ff38 	bl	8005824 <u8x8_d_ssd1306_128x32_generic>
 80059b4:	4603      	mov	r3, r0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	08018f1c 	.word	0x08018f1c

080059c4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	7c9a      	ldrb	r2, [r3, #18]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80059ec:	b590      	push	{r4, r7, lr}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	695c      	ldr	r4, [r3, #20]
 80059f8:	2300      	movs	r3, #0
 80059fa:	2200      	movs	r2, #0
 80059fc:	2128      	movs	r1, #40	; 0x28
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68dc      	ldr	r4, [r3, #12]
 8005a06:	2300      	movs	r3, #0
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2114      	movs	r1, #20
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8005a10:	2201      	movs	r2, #1
 8005a12:	214b      	movs	r1, #75	; 0x4b
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f886 	bl	8005b26 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	791b      	ldrb	r3, [r3, #4]
 8005a20:	461a      	mov	r2, r3
 8005a22:	2129      	movs	r1, #41	; 0x29
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f87e 	bl	8005b26 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	214b      	movs	r1, #75	; 0x4b
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f879 	bl	8005b26 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	791b      	ldrb	r3, [r3, #4]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	2129      	movs	r1, #41	; 0x29
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f871 	bl	8005b26 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8005a44:	2201      	movs	r2, #1
 8005a46:	214b      	movs	r1, #75	; 0x4b
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f86c 	bl	8005b26 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	795b      	ldrb	r3, [r3, #5]
 8005a54:	461a      	mov	r2, r3
 8005a56:	2129      	movs	r1, #41	; 0x29
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f864 	bl	8005b26 <u8x8_gpio_call>
}    
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd90      	pop	{r4, r7, pc}

08005a66 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8005a66:	b590      	push	{r4, r7, lr}
 8005a68:	b085      	sub	sp, #20
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	4608      	mov	r0, r1
 8005a70:	4611      	mov	r1, r2
 8005a72:	461a      	mov	r2, r3
 8005a74:	4603      	mov	r3, r0
 8005a76:	70fb      	strb	r3, [r7, #3]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70bb      	strb	r3, [r7, #2]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8005a84:	78bb      	ldrb	r3, [r7, #2]
 8005a86:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8005a88:	787b      	ldrb	r3, [r7, #1]
 8005a8a:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689c      	ldr	r4, [r3, #8]
 8005a94:	f107 0308 	add.w	r3, r7, #8
 8005a98:	2201      	movs	r2, #1
 8005a9a:	210f      	movs	r1, #15
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	47a0      	blx	r4
 8005aa0:	4603      	mov	r3, r0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd90      	pop	{r4, r7, pc}

08005aaa <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8005aaa:	b590      	push	{r4, r7, lr}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689c      	ldr	r4, [r3, #8]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2109      	movs	r1, #9
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	47a0      	blx	r4
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd90      	pop	{r4, r7, pc}

08005ac8 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8005ac8:	b590      	push	{r4, r7, lr}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689c      	ldr	r4, [r3, #8]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	210a      	movs	r1, #10
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	47a0      	blx	r4
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd90      	pop	{r4, r7, pc}

08005ae6 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8005ae6:	b590      	push	{r4, r7, lr}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	460b      	mov	r3, r1
 8005af0:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689c      	ldr	r4, [r3, #8]
 8005af6:	78fa      	ldrb	r2, [r7, #3]
 8005af8:	2300      	movs	r3, #0
 8005afa:	210b      	movs	r1, #11
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	47a0      	blx	r4
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd90      	pop	{r4, r7, pc}

08005b08 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8005b08:	b590      	push	{r4, r7, lr}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689c      	ldr	r4, [r3, #8]
 8005b14:	2300      	movs	r3, #0
 8005b16:	2200      	movs	r2, #0
 8005b18:	2110      	movs	r1, #16
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	47a0      	blx	r4
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd90      	pop	{r4, r7, pc}

08005b26 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8005b26:	b590      	push	{r4, r7, lr}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	70fb      	strb	r3, [r7, #3]
 8005b32:	4613      	mov	r3, r2
 8005b34:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695c      	ldr	r4, [r3, #20]
 8005b3a:	78ba      	ldrb	r2, [r7, #2]
 8005b3c:	78f9      	ldrb	r1, [r7, #3]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	47a0      	blx	r4
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd90      	pop	{r4, r7, pc}

08005b4c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	607b      	str	r3, [r7, #4]
 8005b56:	460b      	mov	r3, r1
 8005b58:	72fb      	strb	r3, [r7, #11]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <u8x8_SetupDefaults+0x60>)
 8005b7e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a12      	ldr	r2, [pc, #72]	; (8005bcc <u8x8_SetupDefaults+0x60>)
 8005b84:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a10      	ldr	r2, [pc, #64]	; (8005bcc <u8x8_SetupDefaults+0x60>)
 8005b8a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a0f      	ldr	r2, [pc, #60]	; (8005bcc <u8x8_SetupDefaults+0x60>)
 8005b90:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	22ff      	movs	r2, #255	; 0xff
 8005bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	22ff      	movs	r2, #255	; 0xff
 8005bbc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	08005b4d 	.word	0x08005b4d

08005bd0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f7ff ffc4 	bl	8005b6c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	683a      	ldr	r2, [r7, #0]
 8005bf4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff ff54 	bl	8005aaa <u8x8_SetupMemory>
}
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005c0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005c10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005c12:	e003      	b.n	8005c1c <LoopCopyDataInit>

08005c14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005c14:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005c16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005c18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005c1a:	3104      	adds	r1, #4

08005c1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005c1c:	480b      	ldr	r0, [pc, #44]	; (8005c4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005c1e:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005c20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005c22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005c24:	d3f6      	bcc.n	8005c14 <CopyDataInit>
  ldr  r2, =_sbss
 8005c26:	4a0b      	ldr	r2, [pc, #44]	; (8005c54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005c28:	e002      	b.n	8005c30 <LoopFillZerobss>

08005c2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005c2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005c2c:	f842 3b04 	str.w	r3, [r2], #4

08005c30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005c30:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005c32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005c34:	d3f9      	bcc.n	8005c2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005c36:	f7fd fa4f 	bl	80030d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c3a:	f00c f913 	bl	8011e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c3e:	f7fc fdf3 	bl	8002828 <main>
  bx  lr    
 8005c42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005c44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005c48:	080194a0 	.word	0x080194a0
  ldr  r0, =_sdata
 8005c4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005c50:	20000374 	.word	0x20000374
  ldr  r2, =_sbss
 8005c54:	20000378 	.word	0x20000378
  ldr  r3, = _ebss
 8005c58:	20003318 	.word	0x20003318

08005c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c5c:	e7fe      	b.n	8005c5c <ADC_IRQHandler>
	...

08005c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c64:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <HAL_Init+0x40>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a0d      	ldr	r2, [pc, #52]	; (8005ca0 <HAL_Init+0x40>)
 8005c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <HAL_Init+0x40>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a0a      	ldr	r2, [pc, #40]	; (8005ca0 <HAL_Init+0x40>)
 8005c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c7c:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <HAL_Init+0x40>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a07      	ldr	r2, [pc, #28]	; (8005ca0 <HAL_Init+0x40>)
 8005c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c88:	2003      	movs	r0, #3
 8005c8a:	f000 fd1b 	bl	80066c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005c8e:	2000      	movs	r0, #0
 8005c90:	f000 f808 	bl	8005ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005c94:	f7fd f8f4 	bl	8002e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40023c00 	.word	0x40023c00

08005ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005cac:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <HAL_InitTick+0x54>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	4b12      	ldr	r3, [pc, #72]	; (8005cfc <HAL_InitTick+0x58>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fd33 	bl	800672e <HAL_SYSTICK_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e00e      	b.n	8005cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b0f      	cmp	r3, #15
 8005cd6:	d80a      	bhi.n	8005cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005cd8:	2200      	movs	r2, #0
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce0:	f000 fcfb 	bl	80066da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ce4:	4a06      	ldr	r2, [pc, #24]	; (8005d00 <HAL_InitTick+0x5c>)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	e000      	b.n	8005cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20000004 	.word	0x20000004
 8005cfc:	2000000c 	.word	0x2000000c
 8005d00:	20000008 	.word	0x20000008

08005d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d08:	4b06      	ldr	r3, [pc, #24]	; (8005d24 <HAL_IncTick+0x20>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <HAL_IncTick+0x24>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4413      	add	r3, r2
 8005d14:	4a04      	ldr	r2, [pc, #16]	; (8005d28 <HAL_IncTick+0x24>)
 8005d16:	6013      	str	r3, [r2, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	2000000c 	.word	0x2000000c
 8005d28:	200015bc 	.word	0x200015bc

08005d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8005d30:	4b03      	ldr	r3, [pc, #12]	; (8005d40 <HAL_GetTick+0x14>)
 8005d32:	681b      	ldr	r3, [r3, #0]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	200015bc 	.word	0x200015bc

08005d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d4c:	f7ff ffee 	bl	8005d2c <HAL_GetTick>
 8005d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d005      	beq.n	8005d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d5e:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <HAL_Delay+0x44>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005d6a:	bf00      	nop
 8005d6c:	f7ff ffde 	bl	8005d2c <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d8f7      	bhi.n	8005d6c <HAL_Delay+0x28>
  {
  }
}
 8005d7c:	bf00      	nop
 8005d7e:	bf00      	nop
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	2000000c 	.word	0x2000000c

08005d8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e033      	b.n	8005e0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb fd30 	bl	8001810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	f003 0310 	and.w	r3, r3, #16
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d118      	bne.n	8005dfc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005dd2:	f023 0302 	bic.w	r3, r3, #2
 8005dd6:	f043 0202 	orr.w	r2, r3, #2
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 faa4 	bl	800632c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f023 0303 	bic.w	r3, r3, #3
 8005df2:	f043 0201 	orr.w	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40
 8005dfa:	e001      	b.n	8005e00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
	...

08005e14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_ADC_Start+0x1a>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e0b2      	b.n	8005f94 <HAL_ADC_Start+0x180>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d018      	beq.n	8005e76 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005e54:	4b52      	ldr	r3, [pc, #328]	; (8005fa0 <HAL_ADC_Start+0x18c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a52      	ldr	r2, [pc, #328]	; (8005fa4 <HAL_ADC_Start+0x190>)
 8005e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5e:	0c9a      	lsrs	r2, r3, #18
 8005e60:	4613      	mov	r3, r2
 8005e62:	005b      	lsls	r3, r3, #1
 8005e64:	4413      	add	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005e68:	e002      	b.n	8005e70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f9      	bne.n	8005e6a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d17a      	bne.n	8005f7a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005e8c:	f023 0301 	bic.w	r3, r3, #1
 8005e90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005eae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec2:	d106      	bne.n	8005ed2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec8:	f023 0206 	bic.w	r2, r3, #6
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	645a      	str	r2, [r3, #68]	; 0x44
 8005ed0:	e002      	b.n	8005ed8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ee0:	4b31      	ldr	r3, [pc, #196]	; (8005fa8 <HAL_ADC_Start+0x194>)
 8005ee2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005eec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d12a      	bne.n	8005f50 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2b      	ldr	r2, [pc, #172]	; (8005fac <HAL_ADC_Start+0x198>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d015      	beq.n	8005f30 <HAL_ADC_Start+0x11c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a29      	ldr	r2, [pc, #164]	; (8005fb0 <HAL_ADC_Start+0x19c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d105      	bne.n	8005f1a <HAL_ADC_Start+0x106>
 8005f0e:	4b26      	ldr	r3, [pc, #152]	; (8005fa8 <HAL_ADC_Start+0x194>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a25      	ldr	r2, [pc, #148]	; (8005fb4 <HAL_ADC_Start+0x1a0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d136      	bne.n	8005f92 <HAL_ADC_Start+0x17e>
 8005f24:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <HAL_ADC_Start+0x194>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d130      	bne.n	8005f92 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d129      	bne.n	8005f92 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f4c:	609a      	str	r2, [r3, #8]
 8005f4e:	e020      	b.n	8005f92 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a15      	ldr	r2, [pc, #84]	; (8005fac <HAL_ADC_Start+0x198>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d11b      	bne.n	8005f92 <HAL_ADC_Start+0x17e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d114      	bne.n	8005f92 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689a      	ldr	r2, [r3, #8]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005f76:	609a      	str	r2, [r3, #8]
 8005f78:	e00b      	b.n	8005f92 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	f043 0210 	orr.w	r2, r3, #16
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8a:	f043 0201 	orr.w	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	20000004 	.word	0x20000004
 8005fa4:	431bde83 	.word	0x431bde83
 8005fa8:	40012300 	.word	0x40012300
 8005fac:	40012000 	.word	0x40012000
 8005fb0:	40012100 	.word	0x40012100
 8005fb4:	40012200 	.word	0x40012200

08005fb8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd4:	d113      	bne.n	8005ffe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe4:	d10b      	bne.n	8005ffe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f043 0220 	orr.w	r2, r3, #32
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e063      	b.n	80060c6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005ffe:	f7ff fe95 	bl	8005d2c <HAL_GetTick>
 8006002:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006004:	e021      	b.n	800604a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d01d      	beq.n	800604a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_ADC_PollForConversion+0x6c>
 8006014:	f7ff fe8a 	bl	8005d2c <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d212      	bcs.n	800604a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b02      	cmp	r3, #2
 8006030:	d00b      	beq.n	800604a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f043 0204 	orr.w	r2, r3, #4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e03d      	b.n	80060c6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b02      	cmp	r3, #2
 8006056:	d1d6      	bne.n	8006006 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0212 	mvn.w	r2, #18
 8006060:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d123      	bne.n	80060c4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006080:	2b00      	cmp	r3, #0
 8006082:	d11f      	bne.n	80060c4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800608e:	2b00      	cmp	r3, #0
 8006090:	d006      	beq.n	80060a0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800609c:	2b00      	cmp	r3, #0
 800609e:	d111      	bne.n	80060c4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d105      	bne.n	80060c4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	f043 0201 	orr.w	r2, r3, #1
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d101      	bne.n	8006104 <HAL_ADC_ConfigChannel+0x1c>
 8006100:	2302      	movs	r3, #2
 8006102:	e105      	b.n	8006310 <HAL_ADC_ConfigChannel+0x228>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b09      	cmp	r3, #9
 8006112:	d925      	bls.n	8006160 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68d9      	ldr	r1, [r3, #12]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	461a      	mov	r2, r3
 8006122:	4613      	mov	r3, r2
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	4413      	add	r3, r2
 8006128:	3b1e      	subs	r3, #30
 800612a:	2207      	movs	r2, #7
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	43da      	mvns	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	400a      	ands	r2, r1
 8006138:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68d9      	ldr	r1, [r3, #12]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	4618      	mov	r0, r3
 800614c:	4603      	mov	r3, r0
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	4403      	add	r3, r0
 8006152:	3b1e      	subs	r3, #30
 8006154:	409a      	lsls	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	60da      	str	r2, [r3, #12]
 800615e:	e022      	b.n	80061a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6919      	ldr	r1, [r3, #16]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	461a      	mov	r2, r3
 800616e:	4613      	mov	r3, r2
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	4413      	add	r3, r2
 8006174:	2207      	movs	r2, #7
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	43da      	mvns	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	400a      	ands	r2, r1
 8006182:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6919      	ldr	r1, [r3, #16]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	4618      	mov	r0, r3
 8006196:	4603      	mov	r3, r0
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	4403      	add	r3, r0
 800619c:	409a      	lsls	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2b06      	cmp	r3, #6
 80061ac:	d824      	bhi.n	80061f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	3b05      	subs	r3, #5
 80061c0:	221f      	movs	r2, #31
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	43da      	mvns	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	400a      	ands	r2, r1
 80061ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	4618      	mov	r0, r3
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	3b05      	subs	r3, #5
 80061ea:	fa00 f203 	lsl.w	r2, r0, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	635a      	str	r2, [r3, #52]	; 0x34
 80061f6:	e04c      	b.n	8006292 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2b0c      	cmp	r3, #12
 80061fe:	d824      	bhi.n	800624a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	3b23      	subs	r3, #35	; 0x23
 8006212:	221f      	movs	r2, #31
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	43da      	mvns	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	400a      	ands	r2, r1
 8006220:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	4618      	mov	r0, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	3b23      	subs	r3, #35	; 0x23
 800623c:	fa00 f203 	lsl.w	r2, r0, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	631a      	str	r2, [r3, #48]	; 0x30
 8006248:	e023      	b.n	8006292 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	3b41      	subs	r3, #65	; 0x41
 800625c:	221f      	movs	r2, #31
 800625e:	fa02 f303 	lsl.w	r3, r2, r3
 8006262:	43da      	mvns	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	400a      	ands	r2, r1
 800626a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	4618      	mov	r0, r3
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	3b41      	subs	r3, #65	; 0x41
 8006286:	fa00 f203 	lsl.w	r2, r0, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006292:	4b22      	ldr	r3, [pc, #136]	; (800631c <HAL_ADC_ConfigChannel+0x234>)
 8006294:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a21      	ldr	r2, [pc, #132]	; (8006320 <HAL_ADC_ConfigChannel+0x238>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d109      	bne.n	80062b4 <HAL_ADC_ConfigChannel+0x1cc>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b12      	cmp	r3, #18
 80062a6:	d105      	bne.n	80062b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a19      	ldr	r2, [pc, #100]	; (8006320 <HAL_ADC_ConfigChannel+0x238>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d123      	bne.n	8006306 <HAL_ADC_ConfigChannel+0x21e>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b10      	cmp	r3, #16
 80062c4:	d003      	beq.n	80062ce <HAL_ADC_ConfigChannel+0x1e6>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b11      	cmp	r3, #17
 80062cc:	d11b      	bne.n	8006306 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b10      	cmp	r3, #16
 80062e0:	d111      	bne.n	8006306 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80062e2:	4b10      	ldr	r3, [pc, #64]	; (8006324 <HAL_ADC_ConfigChannel+0x23c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a10      	ldr	r2, [pc, #64]	; (8006328 <HAL_ADC_ConfigChannel+0x240>)
 80062e8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ec:	0c9a      	lsrs	r2, r3, #18
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80062f8:	e002      	b.n	8006300 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f9      	bne.n	80062fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	40012300 	.word	0x40012300
 8006320:	40012000 	.word	0x40012000
 8006324:	20000004 	.word	0x20000004
 8006328:	431bde83 	.word	0x431bde83

0800632c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006334:	4b79      	ldr	r3, [pc, #484]	; (800651c <ADC_Init+0x1f0>)
 8006336:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	431a      	orrs	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006360:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6859      	ldr	r1, [r3, #4]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	021a      	lsls	r2, r3, #8
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006384:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6859      	ldr	r1, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6899      	ldr	r1, [r3, #8]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063be:	4a58      	ldr	r2, [pc, #352]	; (8006520 <ADC_Init+0x1f4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d022      	beq.n	800640a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6899      	ldr	r1, [r3, #8]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689a      	ldr	r2, [r3, #8]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80063f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6899      	ldr	r1, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	609a      	str	r2, [r3, #8]
 8006408:	e00f      	b.n	800642a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006418:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006428:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0202 	bic.w	r2, r2, #2
 8006438:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6899      	ldr	r1, [r3, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	7e1b      	ldrb	r3, [r3, #24]
 8006444:	005a      	lsls	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01b      	beq.n	8006490 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006466:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006476:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6859      	ldr	r1, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	3b01      	subs	r3, #1
 8006484:	035a      	lsls	r2, r3, #13
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	e007      	b.n	80064a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800649e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80064ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	051a      	lsls	r2, r3, #20
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80064d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6899      	ldr	r1, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064e2:	025a      	lsls	r2, r3, #9
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6899      	ldr	r1, [r3, #8]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	029a      	lsls	r2, r3, #10
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	609a      	str	r2, [r3, #8]
}
 8006510:	bf00      	nop
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	40012300 	.word	0x40012300
 8006520:	0f000001 	.word	0x0f000001

08006524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <__NVIC_SetPriorityGrouping+0x44>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006540:	4013      	ands	r3, r2
 8006542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800654c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006556:	4a04      	ldr	r2, [pc, #16]	; (8006568 <__NVIC_SetPriorityGrouping+0x44>)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	60d3      	str	r3, [r2, #12]
}
 800655c:	bf00      	nop
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	e000ed00 	.word	0xe000ed00

0800656c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006570:	4b04      	ldr	r3, [pc, #16]	; (8006584 <__NVIC_GetPriorityGrouping+0x18>)
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	f003 0307 	and.w	r3, r3, #7
}
 800657a:	4618      	mov	r0, r3
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	e000ed00 	.word	0xe000ed00

08006588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	4603      	mov	r3, r0
 8006590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006596:	2b00      	cmp	r3, #0
 8006598:	db0b      	blt.n	80065b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	f003 021f 	and.w	r2, r3, #31
 80065a0:	4907      	ldr	r1, [pc, #28]	; (80065c0 <__NVIC_EnableIRQ+0x38>)
 80065a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	2001      	movs	r0, #1
 80065aa:	fa00 f202 	lsl.w	r2, r0, r2
 80065ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	e000e100 	.word	0xe000e100

080065c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	6039      	str	r1, [r7, #0]
 80065ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	db0a      	blt.n	80065ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	490c      	ldr	r1, [pc, #48]	; (8006610 <__NVIC_SetPriority+0x4c>)
 80065de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e2:	0112      	lsls	r2, r2, #4
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	440b      	add	r3, r1
 80065e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065ec:	e00a      	b.n	8006604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	4908      	ldr	r1, [pc, #32]	; (8006614 <__NVIC_SetPriority+0x50>)
 80065f4:	79fb      	ldrb	r3, [r7, #7]
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	3b04      	subs	r3, #4
 80065fc:	0112      	lsls	r2, r2, #4
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	440b      	add	r3, r1
 8006602:	761a      	strb	r2, [r3, #24]
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	e000e100 	.word	0xe000e100
 8006614:	e000ed00 	.word	0xe000ed00

08006618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006618:	b480      	push	{r7}
 800661a:	b089      	sub	sp, #36	; 0x24
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f1c3 0307 	rsb	r3, r3, #7
 8006632:	2b04      	cmp	r3, #4
 8006634:	bf28      	it	cs
 8006636:	2304      	movcs	r3, #4
 8006638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	3304      	adds	r3, #4
 800663e:	2b06      	cmp	r3, #6
 8006640:	d902      	bls.n	8006648 <NVIC_EncodePriority+0x30>
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	3b03      	subs	r3, #3
 8006646:	e000      	b.n	800664a <NVIC_EncodePriority+0x32>
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800664c:	f04f 32ff 	mov.w	r2, #4294967295
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	43da      	mvns	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	401a      	ands	r2, r3
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006660:	f04f 31ff 	mov.w	r1, #4294967295
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	fa01 f303 	lsl.w	r3, r1, r3
 800666a:	43d9      	mvns	r1, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006670:	4313      	orrs	r3, r2
         );
}
 8006672:	4618      	mov	r0, r3
 8006674:	3724      	adds	r7, #36	; 0x24
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
	...

08006680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3b01      	subs	r3, #1
 800668c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006690:	d301      	bcc.n	8006696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006692:	2301      	movs	r3, #1
 8006694:	e00f      	b.n	80066b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006696:	4a0a      	ldr	r2, [pc, #40]	; (80066c0 <SysTick_Config+0x40>)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3b01      	subs	r3, #1
 800669c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800669e:	210f      	movs	r1, #15
 80066a0:	f04f 30ff 	mov.w	r0, #4294967295
 80066a4:	f7ff ff8e 	bl	80065c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <SysTick_Config+0x40>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066ae:	4b04      	ldr	r3, [pc, #16]	; (80066c0 <SysTick_Config+0x40>)
 80066b0:	2207      	movs	r2, #7
 80066b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	e000e010 	.word	0xe000e010

080066c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff ff29 	bl	8006524 <__NVIC_SetPriorityGrouping>
}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80066da:	b580      	push	{r7, lr}
 80066dc:	b086      	sub	sp, #24
 80066de:	af00      	add	r7, sp, #0
 80066e0:	4603      	mov	r3, r0
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
 80066e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80066ec:	f7ff ff3e 	bl	800656c <__NVIC_GetPriorityGrouping>
 80066f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	6978      	ldr	r0, [r7, #20]
 80066f8:	f7ff ff8e 	bl	8006618 <NVIC_EncodePriority>
 80066fc:	4602      	mov	r2, r0
 80066fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006702:	4611      	mov	r1, r2
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff ff5d 	bl	80065c4 <__NVIC_SetPriority>
}
 800670a:	bf00      	nop
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b082      	sub	sp, #8
 8006716:	af00      	add	r7, sp, #0
 8006718:	4603      	mov	r3, r0
 800671a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800671c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff ff31 	bl	8006588 <__NVIC_EnableIRQ>
}
 8006726:	bf00      	nop
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff ffa2 	bl	8006680 <SysTick_Config>
 800673c:	4603      	mov	r3, r0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006752:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006754:	f7ff faea 	bl	8005d2c <HAL_GetTick>
 8006758:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d008      	beq.n	8006778 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2280      	movs	r2, #128	; 0x80
 800676a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e052      	b.n	800681e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0216 	bic.w	r2, r2, #22
 8006786:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	695a      	ldr	r2, [r3, #20]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006796:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d103      	bne.n	80067a8 <HAL_DMA_Abort+0x62>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d007      	beq.n	80067b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0208 	bic.w	r2, r2, #8
 80067b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0201 	bic.w	r2, r2, #1
 80067c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067c8:	e013      	b.n	80067f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067ca:	f7ff faaf 	bl	8005d2c <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b05      	cmp	r3, #5
 80067d6:	d90c      	bls.n	80067f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2203      	movs	r2, #3
 80067ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e015      	b.n	800681e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e4      	bne.n	80067ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006804:	223f      	movs	r2, #63	; 0x3f
 8006806:	409a      	lsls	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d004      	beq.n	8006844 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2280      	movs	r2, #128	; 0x80
 800683e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e00c      	b.n	800685e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2205      	movs	r2, #5
 8006848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0201 	bic.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800686c:	b480      	push	{r7}
 800686e:	b089      	sub	sp, #36	; 0x24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006876:	2300      	movs	r3, #0
 8006878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800687a:	2300      	movs	r3, #0
 800687c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006882:	2300      	movs	r3, #0
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	e16b      	b.n	8006b60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006888:	2201      	movs	r2, #1
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	fa02 f303 	lsl.w	r3, r2, r3
 8006890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4013      	ands	r3, r2
 800689a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	f040 815a 	bne.w	8006b5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d005      	beq.n	80068be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d130      	bne.n	8006920 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	2203      	movs	r2, #3
 80068ca:	fa02 f303 	lsl.w	r3, r2, r3
 80068ce:	43db      	mvns	r3, r3
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	4013      	ands	r3, r2
 80068d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068f4:	2201      	movs	r2, #1
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	fa02 f303 	lsl.w	r3, r2, r3
 80068fc:	43db      	mvns	r3, r3
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	4013      	ands	r3, r2
 8006902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	091b      	lsrs	r3, r3, #4
 800690a:	f003 0201 	and.w	r2, r3, #1
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	fa02 f303 	lsl.w	r3, r2, r3
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	4313      	orrs	r3, r2
 8006918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f003 0303 	and.w	r3, r3, #3
 8006928:	2b03      	cmp	r3, #3
 800692a:	d017      	beq.n	800695c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	2203      	movs	r2, #3
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	43db      	mvns	r3, r3
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	4013      	ands	r3, r2
 8006942:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	4313      	orrs	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f003 0303 	and.w	r3, r3, #3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d123      	bne.n	80069b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	08da      	lsrs	r2, r3, #3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3208      	adds	r2, #8
 8006970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	220f      	movs	r2, #15
 8006980:	fa02 f303 	lsl.w	r3, r2, r3
 8006984:	43db      	mvns	r3, r3
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	4013      	ands	r3, r2
 800698a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	4313      	orrs	r3, r2
 80069a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	08da      	lsrs	r2, r3, #3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3208      	adds	r2, #8
 80069aa:	69b9      	ldr	r1, [r7, #24]
 80069ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	2203      	movs	r2, #3
 80069bc:	fa02 f303 	lsl.w	r3, r2, r3
 80069c0:	43db      	mvns	r3, r3
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	4013      	ands	r3, r2
 80069c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f003 0203 	and.w	r2, r3, #3
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	4313      	orrs	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 80b4 	beq.w	8006b5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	4b60      	ldr	r3, [pc, #384]	; (8006b78 <HAL_GPIO_Init+0x30c>)
 80069f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fa:	4a5f      	ldr	r2, [pc, #380]	; (8006b78 <HAL_GPIO_Init+0x30c>)
 80069fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a00:	6453      	str	r3, [r2, #68]	; 0x44
 8006a02:	4b5d      	ldr	r3, [pc, #372]	; (8006b78 <HAL_GPIO_Init+0x30c>)
 8006a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a0e:	4a5b      	ldr	r2, [pc, #364]	; (8006b7c <HAL_GPIO_Init+0x310>)
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	089b      	lsrs	r3, r3, #2
 8006a14:	3302      	adds	r3, #2
 8006a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	220f      	movs	r2, #15
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	43db      	mvns	r3, r3
 8006a2c:	69ba      	ldr	r2, [r7, #24]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a52      	ldr	r2, [pc, #328]	; (8006b80 <HAL_GPIO_Init+0x314>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d02b      	beq.n	8006a92 <HAL_GPIO_Init+0x226>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a51      	ldr	r2, [pc, #324]	; (8006b84 <HAL_GPIO_Init+0x318>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d025      	beq.n	8006a8e <HAL_GPIO_Init+0x222>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a50      	ldr	r2, [pc, #320]	; (8006b88 <HAL_GPIO_Init+0x31c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d01f      	beq.n	8006a8a <HAL_GPIO_Init+0x21e>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a4f      	ldr	r2, [pc, #316]	; (8006b8c <HAL_GPIO_Init+0x320>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d019      	beq.n	8006a86 <HAL_GPIO_Init+0x21a>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a4e      	ldr	r2, [pc, #312]	; (8006b90 <HAL_GPIO_Init+0x324>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d013      	beq.n	8006a82 <HAL_GPIO_Init+0x216>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a4d      	ldr	r2, [pc, #308]	; (8006b94 <HAL_GPIO_Init+0x328>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00d      	beq.n	8006a7e <HAL_GPIO_Init+0x212>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a4c      	ldr	r2, [pc, #304]	; (8006b98 <HAL_GPIO_Init+0x32c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d007      	beq.n	8006a7a <HAL_GPIO_Init+0x20e>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a4b      	ldr	r2, [pc, #300]	; (8006b9c <HAL_GPIO_Init+0x330>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d101      	bne.n	8006a76 <HAL_GPIO_Init+0x20a>
 8006a72:	2307      	movs	r3, #7
 8006a74:	e00e      	b.n	8006a94 <HAL_GPIO_Init+0x228>
 8006a76:	2308      	movs	r3, #8
 8006a78:	e00c      	b.n	8006a94 <HAL_GPIO_Init+0x228>
 8006a7a:	2306      	movs	r3, #6
 8006a7c:	e00a      	b.n	8006a94 <HAL_GPIO_Init+0x228>
 8006a7e:	2305      	movs	r3, #5
 8006a80:	e008      	b.n	8006a94 <HAL_GPIO_Init+0x228>
 8006a82:	2304      	movs	r3, #4
 8006a84:	e006      	b.n	8006a94 <HAL_GPIO_Init+0x228>
 8006a86:	2303      	movs	r3, #3
 8006a88:	e004      	b.n	8006a94 <HAL_GPIO_Init+0x228>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e002      	b.n	8006a94 <HAL_GPIO_Init+0x228>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e000      	b.n	8006a94 <HAL_GPIO_Init+0x228>
 8006a92:	2300      	movs	r3, #0
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	f002 0203 	and.w	r2, r2, #3
 8006a9a:	0092      	lsls	r2, r2, #2
 8006a9c:	4093      	lsls	r3, r2
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006aa4:	4935      	ldr	r1, [pc, #212]	; (8006b7c <HAL_GPIO_Init+0x310>)
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	089b      	lsrs	r3, r3, #2
 8006aaa:	3302      	adds	r3, #2
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ab2:	4b3b      	ldr	r3, [pc, #236]	; (8006ba0 <HAL_GPIO_Init+0x334>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	43db      	mvns	r3, r3
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ad6:	4a32      	ldr	r2, [pc, #200]	; (8006ba0 <HAL_GPIO_Init+0x334>)
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006adc:	4b30      	ldr	r3, [pc, #192]	; (8006ba0 <HAL_GPIO_Init+0x334>)
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	43db      	mvns	r3, r3
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b00:	4a27      	ldr	r2, [pc, #156]	; (8006ba0 <HAL_GPIO_Init+0x334>)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b06:	4b26      	ldr	r3, [pc, #152]	; (8006ba0 <HAL_GPIO_Init+0x334>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	43db      	mvns	r3, r3
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	4013      	ands	r3, r2
 8006b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b2a:	4a1d      	ldr	r2, [pc, #116]	; (8006ba0 <HAL_GPIO_Init+0x334>)
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b30:	4b1b      	ldr	r3, [pc, #108]	; (8006ba0 <HAL_GPIO_Init+0x334>)
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b54:	4a12      	ldr	r2, [pc, #72]	; (8006ba0 <HAL_GPIO_Init+0x334>)
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	61fb      	str	r3, [r7, #28]
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	2b0f      	cmp	r3, #15
 8006b64:	f67f ae90 	bls.w	8006888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b68:	bf00      	nop
 8006b6a:	bf00      	nop
 8006b6c:	3724      	adds	r7, #36	; 0x24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	40023800 	.word	0x40023800
 8006b7c:	40013800 	.word	0x40013800
 8006b80:	40020000 	.word	0x40020000
 8006b84:	40020400 	.word	0x40020400
 8006b88:	40020800 	.word	0x40020800
 8006b8c:	40020c00 	.word	0x40020c00
 8006b90:	40021000 	.word	0x40021000
 8006b94:	40021400 	.word	0x40021400
 8006b98:	40021800 	.word	0x40021800
 8006b9c:	40021c00 	.word	0x40021c00
 8006ba0:	40013c00 	.word	0x40013c00

08006ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	807b      	strh	r3, [r7, #2]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006bb4:	787b      	ldrb	r3, [r7, #1]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bba:	887a      	ldrh	r2, [r7, #2]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006bc0:	e003      	b.n	8006bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006bc2:	887b      	ldrh	r3, [r7, #2]
 8006bc4:	041a      	lsls	r2, r3, #16
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	619a      	str	r2, [r3, #24]
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
	...

08006bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e12b      	b.n	8006e42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fa ff4c 	bl	8001a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2224      	movs	r2, #36	; 0x24
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0201 	bic.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006c3c:	f002 fd2e 	bl	800969c <HAL_RCC_GetPCLK1Freq>
 8006c40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	4a81      	ldr	r2, [pc, #516]	; (8006e4c <HAL_I2C_Init+0x274>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d807      	bhi.n	8006c5c <HAL_I2C_Init+0x84>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4a80      	ldr	r2, [pc, #512]	; (8006e50 <HAL_I2C_Init+0x278>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	bf94      	ite	ls
 8006c54:	2301      	movls	r3, #1
 8006c56:	2300      	movhi	r3, #0
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	e006      	b.n	8006c6a <HAL_I2C_Init+0x92>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4a7d      	ldr	r2, [pc, #500]	; (8006e54 <HAL_I2C_Init+0x27c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	bf94      	ite	ls
 8006c64:	2301      	movls	r3, #1
 8006c66:	2300      	movhi	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e0e7      	b.n	8006e42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4a78      	ldr	r2, [pc, #480]	; (8006e58 <HAL_I2C_Init+0x280>)
 8006c76:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7a:	0c9b      	lsrs	r3, r3, #18
 8006c7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	4a6a      	ldr	r2, [pc, #424]	; (8006e4c <HAL_I2C_Init+0x274>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d802      	bhi.n	8006cac <HAL_I2C_Init+0xd4>
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	e009      	b.n	8006cc0 <HAL_I2C_Init+0xe8>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006cb2:	fb02 f303 	mul.w	r3, r2, r3
 8006cb6:	4a69      	ldr	r2, [pc, #420]	; (8006e5c <HAL_I2C_Init+0x284>)
 8006cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbc:	099b      	lsrs	r3, r3, #6
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6812      	ldr	r2, [r2, #0]
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006cd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	495c      	ldr	r1, [pc, #368]	; (8006e4c <HAL_I2C_Init+0x274>)
 8006cdc:	428b      	cmp	r3, r1
 8006cde:	d819      	bhi.n	8006d14 <HAL_I2C_Init+0x13c>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	1e59      	subs	r1, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cee:	1c59      	adds	r1, r3, #1
 8006cf0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006cf4:	400b      	ands	r3, r1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <HAL_I2C_Init+0x138>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	1e59      	subs	r1, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d08:	3301      	adds	r3, #1
 8006d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d0e:	e051      	b.n	8006db4 <HAL_I2C_Init+0x1dc>
 8006d10:	2304      	movs	r3, #4
 8006d12:	e04f      	b.n	8006db4 <HAL_I2C_Init+0x1dc>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d111      	bne.n	8006d40 <HAL_I2C_Init+0x168>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	1e58      	subs	r0, r3, #1
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6859      	ldr	r1, [r3, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	440b      	add	r3, r1
 8006d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d2e:	3301      	adds	r3, #1
 8006d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bf0c      	ite	eq
 8006d38:	2301      	moveq	r3, #1
 8006d3a:	2300      	movne	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	e012      	b.n	8006d66 <HAL_I2C_Init+0x18e>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	1e58      	subs	r0, r3, #1
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6859      	ldr	r1, [r3, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	0099      	lsls	r1, r3, #2
 8006d50:	440b      	add	r3, r1
 8006d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d56:	3301      	adds	r3, #1
 8006d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bf0c      	ite	eq
 8006d60:	2301      	moveq	r3, #1
 8006d62:	2300      	movne	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d001      	beq.n	8006d6e <HAL_I2C_Init+0x196>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e022      	b.n	8006db4 <HAL_I2C_Init+0x1dc>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10e      	bne.n	8006d94 <HAL_I2C_Init+0x1bc>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	1e58      	subs	r0, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6859      	ldr	r1, [r3, #4]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	440b      	add	r3, r1
 8006d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d88:	3301      	adds	r3, #1
 8006d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d92:	e00f      	b.n	8006db4 <HAL_I2C_Init+0x1dc>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	1e58      	subs	r0, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6859      	ldr	r1, [r3, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	440b      	add	r3, r1
 8006da2:	0099      	lsls	r1, r3, #2
 8006da4:	440b      	add	r3, r1
 8006da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006daa:	3301      	adds	r3, #1
 8006dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006db0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	6809      	ldr	r1, [r1, #0]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	69da      	ldr	r2, [r3, #28]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006de2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6911      	ldr	r1, [r2, #16]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	68d2      	ldr	r2, [r2, #12]
 8006dee:	4311      	orrs	r1, r2
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6812      	ldr	r2, [r2, #0]
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	695a      	ldr	r2, [r3, #20]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	000186a0 	.word	0x000186a0
 8006e50:	001e847f 	.word	0x001e847f
 8006e54:	003d08ff 	.word	0x003d08ff
 8006e58:	431bde83 	.word	0x431bde83
 8006e5c:	10624dd3 	.word	0x10624dd3

08006e60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af02      	add	r7, sp, #8
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	607a      	str	r2, [r7, #4]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	817b      	strh	r3, [r7, #10]
 8006e70:	4613      	mov	r3, r2
 8006e72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e74:	f7fe ff5a 	bl	8005d2c <HAL_GetTick>
 8006e78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	f040 80e0 	bne.w	8007048 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	2319      	movs	r3, #25
 8006e8e:	2201      	movs	r2, #1
 8006e90:	4970      	ldr	r1, [pc, #448]	; (8007054 <HAL_I2C_Master_Transmit+0x1f4>)
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 fc58 	bl	8007748 <I2C_WaitOnFlagUntilTimeout>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e0d3      	b.n	800704a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_I2C_Master_Transmit+0x50>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e0cc      	b.n	800704a <HAL_I2C_Master_Transmit+0x1ea>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d007      	beq.n	8006ed6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f042 0201 	orr.w	r2, r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ee4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2221      	movs	r2, #33	; 0x21
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2210      	movs	r2, #16
 8006ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	893a      	ldrh	r2, [r7, #8]
 8006f06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4a50      	ldr	r2, [pc, #320]	; (8007058 <HAL_I2C_Master_Transmit+0x1f8>)
 8006f16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006f18:	8979      	ldrh	r1, [r7, #10]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	6a3a      	ldr	r2, [r7, #32]
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 fac2 	bl	80074a8 <I2C_MasterRequestWrite>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e08d      	b.n	800704a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f2e:	2300      	movs	r3, #0
 8006f30:	613b      	str	r3, [r7, #16]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	613b      	str	r3, [r7, #16]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006f44:	e066      	b.n	8007014 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	6a39      	ldr	r1, [r7, #32]
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 fcd2 	bl	80078f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00d      	beq.n	8006f72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d107      	bne.n	8006f6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e06b      	b.n	800704a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	781a      	ldrb	r2, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	b29a      	uxth	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d11b      	bne.n	8006fe8 <HAL_I2C_Master_Transmit+0x188>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d017      	beq.n	8006fe8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	781a      	ldrb	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	6a39      	ldr	r1, [r7, #32]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fcc2 	bl	8007976 <I2C_WaitOnBTFFlagUntilTimeout>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00d      	beq.n	8007014 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d107      	bne.n	8007010 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800700e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e01a      	b.n	800704a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007018:	2b00      	cmp	r3, #0
 800701a:	d194      	bne.n	8006f46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800702a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	e000      	b.n	800704a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007048:	2302      	movs	r3, #2
  }
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	00100002 	.word	0x00100002
 8007058:	ffff0000 	.word	0xffff0000

0800705c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08c      	sub	sp, #48	; 0x30
 8007060:	af02      	add	r7, sp, #8
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	607a      	str	r2, [r7, #4]
 8007066:	461a      	mov	r2, r3
 8007068:	460b      	mov	r3, r1
 800706a:	817b      	strh	r3, [r7, #10]
 800706c:	4613      	mov	r3, r2
 800706e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007070:	f7fe fe5c 	bl	8005d2c <HAL_GetTick>
 8007074:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b20      	cmp	r3, #32
 8007080:	f040 820b 	bne.w	800749a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	2319      	movs	r3, #25
 800708a:	2201      	movs	r2, #1
 800708c:	497c      	ldr	r1, [pc, #496]	; (8007280 <HAL_I2C_Master_Receive+0x224>)
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f000 fb5a 	bl	8007748 <I2C_WaitOnFlagUntilTimeout>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800709a:	2302      	movs	r3, #2
 800709c:	e1fe      	b.n	800749c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d101      	bne.n	80070ac <HAL_I2C_Master_Receive+0x50>
 80070a8:	2302      	movs	r3, #2
 80070aa:	e1f7      	b.n	800749c <HAL_I2C_Master_Receive+0x440>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d007      	beq.n	80070d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0201 	orr.w	r2, r2, #1
 80070d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2222      	movs	r2, #34	; 0x22
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2210      	movs	r2, #16
 80070ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	893a      	ldrh	r2, [r7, #8]
 8007102:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007108:	b29a      	uxth	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4a5c      	ldr	r2, [pc, #368]	; (8007284 <HAL_I2C_Master_Receive+0x228>)
 8007112:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007114:	8979      	ldrh	r1, [r7, #10]
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 fa46 	bl	80075ac <I2C_MasterRequestRead>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d001      	beq.n	800712a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e1b8      	b.n	800749c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712e:	2b00      	cmp	r3, #0
 8007130:	d113      	bne.n	800715a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007132:	2300      	movs	r3, #0
 8007134:	623b      	str	r3, [r7, #32]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	623b      	str	r3, [r7, #32]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	623b      	str	r3, [r7, #32]
 8007146:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	e18c      	b.n	8007474 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800715e:	2b01      	cmp	r3, #1
 8007160:	d11b      	bne.n	800719a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007170:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007172:	2300      	movs	r3, #0
 8007174:	61fb      	str	r3, [r7, #28]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	61fb      	str	r3, [r7, #28]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	61fb      	str	r3, [r7, #28]
 8007186:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e16c      	b.n	8007474 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d11b      	bne.n	80071da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071c2:	2300      	movs	r3, #0
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	e14c      	b.n	8007474 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007200:	e138      	b.n	8007474 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007206:	2b03      	cmp	r3, #3
 8007208:	f200 80f1 	bhi.w	80073ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007210:	2b01      	cmp	r3, #1
 8007212:	d123      	bne.n	800725c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007216:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 fbed 	bl	80079f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e139      	b.n	800749c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691a      	ldr	r2, [r3, #16]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	1c5a      	adds	r2, r3, #1
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007244:	3b01      	subs	r3, #1
 8007246:	b29a      	uxth	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007250:	b29b      	uxth	r3, r3
 8007252:	3b01      	subs	r3, #1
 8007254:	b29a      	uxth	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	855a      	strh	r2, [r3, #42]	; 0x2a
 800725a:	e10b      	b.n	8007474 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007260:	2b02      	cmp	r3, #2
 8007262:	d14e      	bne.n	8007302 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726a:	2200      	movs	r2, #0
 800726c:	4906      	ldr	r1, [pc, #24]	; (8007288 <HAL_I2C_Master_Receive+0x22c>)
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 fa6a 	bl	8007748 <I2C_WaitOnFlagUntilTimeout>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d008      	beq.n	800728c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e10e      	b.n	800749c <HAL_I2C_Master_Receive+0x440>
 800727e:	bf00      	nop
 8007280:	00100002 	.word	0x00100002
 8007284:	ffff0000 	.word	0xffff0000
 8007288:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800729a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	691a      	ldr	r2, [r3, #16]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	3b01      	subs	r3, #1
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	691a      	ldr	r2, [r3, #16]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	b2d2      	uxtb	r2, r2
 80072da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072ea:	3b01      	subs	r3, #1
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007300:	e0b8      	b.n	8007474 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	2200      	movs	r2, #0
 800730a:	4966      	ldr	r1, [pc, #408]	; (80074a4 <HAL_I2C_Master_Receive+0x448>)
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 fa1b 	bl	8007748 <I2C_WaitOnFlagUntilTimeout>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e0bf      	b.n	800749c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800732a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	691a      	ldr	r2, [r3, #16]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007336:	b2d2      	uxtb	r2, r2
 8007338:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	1c5a      	adds	r2, r3, #1
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007348:	3b01      	subs	r3, #1
 800734a:	b29a      	uxth	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007354:	b29b      	uxth	r3, r3
 8007356:	3b01      	subs	r3, #1
 8007358:	b29a      	uxth	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	2200      	movs	r2, #0
 8007366:	494f      	ldr	r1, [pc, #316]	; (80074a4 <HAL_I2C_Master_Receive+0x448>)
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f9ed 	bl	8007748 <I2C_WaitOnFlagUntilTimeout>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e091      	b.n	800749c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007386:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a4:	3b01      	subs	r3, #1
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3b01      	subs	r3, #1
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	691a      	ldr	r2, [r3, #16]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	b2d2      	uxtb	r2, r2
 80073c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d6:	3b01      	subs	r3, #1
 80073d8:	b29a      	uxth	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	3b01      	subs	r3, #1
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073ec:	e042      	b.n	8007474 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 fb00 	bl	80079f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e04c      	b.n	800749c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	691a      	ldr	r2, [r3, #16]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	b2d2      	uxtb	r2, r2
 800740e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741e:	3b01      	subs	r3, #1
 8007420:	b29a      	uxth	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800742a:	b29b      	uxth	r3, r3
 800742c:	3b01      	subs	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b04      	cmp	r3, #4
 8007440:	d118      	bne.n	8007474 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	691a      	ldr	r2, [r3, #16]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	b2d2      	uxtb	r2, r2
 800744e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	1c5a      	adds	r2, r3, #1
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800745e:	3b01      	subs	r3, #1
 8007460:	b29a      	uxth	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746a:	b29b      	uxth	r3, r3
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007478:	2b00      	cmp	r3, #0
 800747a:	f47f aec2 	bne.w	8007202 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2220      	movs	r2, #32
 8007482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	e000      	b.n	800749c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800749a:	2302      	movs	r3, #2
  }
}
 800749c:	4618      	mov	r0, r3
 800749e:	3728      	adds	r7, #40	; 0x28
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	00010004 	.word	0x00010004

080074a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af02      	add	r7, sp, #8
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	607a      	str	r2, [r7, #4]
 80074b2:	603b      	str	r3, [r7, #0]
 80074b4:	460b      	mov	r3, r1
 80074b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d006      	beq.n	80074d2 <I2C_MasterRequestWrite+0x2a>
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d003      	beq.n	80074d2 <I2C_MasterRequestWrite+0x2a>
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074d0:	d108      	bne.n	80074e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	e00b      	b.n	80074fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	2b12      	cmp	r3, #18
 80074ea:	d107      	bne.n	80074fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 f91d 	bl	8007748 <I2C_WaitOnFlagUntilTimeout>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00d      	beq.n	8007530 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800751e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007522:	d103      	bne.n	800752c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800752a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e035      	b.n	800759c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007538:	d108      	bne.n	800754c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800753a:	897b      	ldrh	r3, [r7, #10]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	461a      	mov	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007548:	611a      	str	r2, [r3, #16]
 800754a:	e01b      	b.n	8007584 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800754c:	897b      	ldrh	r3, [r7, #10]
 800754e:	11db      	asrs	r3, r3, #7
 8007550:	b2db      	uxtb	r3, r3
 8007552:	f003 0306 	and.w	r3, r3, #6
 8007556:	b2db      	uxtb	r3, r3
 8007558:	f063 030f 	orn	r3, r3, #15
 800755c:	b2da      	uxtb	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	490e      	ldr	r1, [pc, #56]	; (80075a4 <I2C_MasterRequestWrite+0xfc>)
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 f943 	bl	80077f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e010      	b.n	800759c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800757a:	897b      	ldrh	r3, [r7, #10]
 800757c:	b2da      	uxtb	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	4907      	ldr	r1, [pc, #28]	; (80075a8 <I2C_MasterRequestWrite+0x100>)
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 f933 	bl	80077f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	00010008 	.word	0x00010008
 80075a8:	00010002 	.word	0x00010002

080075ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b088      	sub	sp, #32
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	607a      	str	r2, [r7, #4]
 80075b6:	603b      	str	r3, [r7, #0]
 80075b8:	460b      	mov	r3, r1
 80075ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b08      	cmp	r3, #8
 80075d6:	d006      	beq.n	80075e6 <I2C_MasterRequestRead+0x3a>
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d003      	beq.n	80075e6 <I2C_MasterRequestRead+0x3a>
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075e4:	d108      	bne.n	80075f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	e00b      	b.n	8007610 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	2b11      	cmp	r3, #17
 80075fe:	d107      	bne.n	8007610 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800760e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 f893 	bl	8007748 <I2C_WaitOnFlagUntilTimeout>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00d      	beq.n	8007644 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007636:	d103      	bne.n	8007640 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800763e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e079      	b.n	8007738 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800764c:	d108      	bne.n	8007660 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800764e:	897b      	ldrh	r3, [r7, #10]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	f043 0301 	orr.w	r3, r3, #1
 8007656:	b2da      	uxtb	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	611a      	str	r2, [r3, #16]
 800765e:	e05f      	b.n	8007720 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007660:	897b      	ldrh	r3, [r7, #10]
 8007662:	11db      	asrs	r3, r3, #7
 8007664:	b2db      	uxtb	r3, r3
 8007666:	f003 0306 	and.w	r3, r3, #6
 800766a:	b2db      	uxtb	r3, r3
 800766c:	f063 030f 	orn	r3, r3, #15
 8007670:	b2da      	uxtb	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	4930      	ldr	r1, [pc, #192]	; (8007740 <I2C_MasterRequestRead+0x194>)
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 f8b9 	bl	80077f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e054      	b.n	8007738 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800768e:	897b      	ldrh	r3, [r7, #10]
 8007690:	b2da      	uxtb	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	4929      	ldr	r1, [pc, #164]	; (8007744 <I2C_MasterRequestRead+0x198>)
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 f8a9 	bl	80077f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e044      	b.n	8007738 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076ae:	2300      	movs	r3, #0
 80076b0:	613b      	str	r3, [r7, #16]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f831 	bl	8007748 <I2C_WaitOnFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00d      	beq.n	8007708 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076fa:	d103      	bne.n	8007704 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007702:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e017      	b.n	8007738 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007708:	897b      	ldrh	r3, [r7, #10]
 800770a:	11db      	asrs	r3, r3, #7
 800770c:	b2db      	uxtb	r3, r3
 800770e:	f003 0306 	and.w	r3, r3, #6
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f063 030e 	orn	r3, r3, #14
 8007718:	b2da      	uxtb	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	4907      	ldr	r1, [pc, #28]	; (8007744 <I2C_MasterRequestRead+0x198>)
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f865 	bl	80077f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	00010008 	.word	0x00010008
 8007744:	00010002 	.word	0x00010002

08007748 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	4613      	mov	r3, r2
 8007756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007758:	e025      	b.n	80077a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d021      	beq.n	80077a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007762:	f7fe fae3 	bl	8005d2c <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	429a      	cmp	r2, r3
 8007770:	d302      	bcc.n	8007778 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d116      	bne.n	80077a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2220      	movs	r2, #32
 8007782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	f043 0220 	orr.w	r2, r3, #32
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e023      	b.n	80077ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	0c1b      	lsrs	r3, r3, #16
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d10d      	bne.n	80077cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	43da      	mvns	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4013      	ands	r3, r2
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bf0c      	ite	eq
 80077c2:	2301      	moveq	r3, #1
 80077c4:	2300      	movne	r3, #0
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	e00c      	b.n	80077e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	43da      	mvns	r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	4013      	ands	r3, r2
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	bf0c      	ite	eq
 80077de:	2301      	moveq	r3, #1
 80077e0:	2300      	movne	r3, #0
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d0b6      	beq.n	800775a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	607a      	str	r2, [r7, #4]
 8007802:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007804:	e051      	b.n	80078aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007814:	d123      	bne.n	800785e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007824:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800782e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2220      	movs	r2, #32
 800783a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	f043 0204 	orr.w	r2, r3, #4
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e046      	b.n	80078ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007864:	d021      	beq.n	80078aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007866:	f7fe fa61 	bl	8005d2c <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	429a      	cmp	r2, r3
 8007874:	d302      	bcc.n	800787c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d116      	bne.n	80078aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2220      	movs	r2, #32
 8007886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	f043 0220 	orr.w	r2, r3, #32
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e020      	b.n	80078ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	0c1b      	lsrs	r3, r3, #16
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d10c      	bne.n	80078ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	43da      	mvns	r2, r3
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4013      	ands	r3, r2
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	bf14      	ite	ne
 80078c6:	2301      	movne	r3, #1
 80078c8:	2300      	moveq	r3, #0
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	e00b      	b.n	80078e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	43da      	mvns	r2, r3
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4013      	ands	r3, r2
 80078da:	b29b      	uxth	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	bf14      	ite	ne
 80078e0:	2301      	movne	r3, #1
 80078e2:	2300      	moveq	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d18d      	bne.n	8007806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007900:	e02d      	b.n	800795e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f8ce 	bl	8007aa4 <I2C_IsAcknowledgeFailed>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e02d      	b.n	800796e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007918:	d021      	beq.n	800795e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800791a:	f7fe fa07 	bl	8005d2c <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	429a      	cmp	r2, r3
 8007928:	d302      	bcc.n	8007930 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d116      	bne.n	800795e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2220      	movs	r2, #32
 800793a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794a:	f043 0220 	orr.w	r2, r3, #32
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e007      	b.n	800796e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007968:	2b80      	cmp	r3, #128	; 0x80
 800796a:	d1ca      	bne.n	8007902 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	60f8      	str	r0, [r7, #12]
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007982:	e02d      	b.n	80079e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f88d 	bl	8007aa4 <I2C_IsAcknowledgeFailed>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e02d      	b.n	80079f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799a:	d021      	beq.n	80079e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800799c:	f7fe f9c6 	bl	8005d2c <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d302      	bcc.n	80079b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d116      	bne.n	80079e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079cc:	f043 0220 	orr.w	r2, r3, #32
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e007      	b.n	80079f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	f003 0304 	and.w	r3, r3, #4
 80079ea:	2b04      	cmp	r3, #4
 80079ec:	d1ca      	bne.n	8007984 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a04:	e042      	b.n	8007a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	f003 0310 	and.w	r3, r3, #16
 8007a10:	2b10      	cmp	r3, #16
 8007a12:	d119      	bne.n	8007a48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f06f 0210 	mvn.w	r2, #16
 8007a1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e029      	b.n	8007a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a48:	f7fe f970 	bl	8005d2c <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d302      	bcc.n	8007a5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d116      	bne.n	8007a8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2220      	movs	r2, #32
 8007a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a78:	f043 0220 	orr.w	r2, r3, #32
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e007      	b.n	8007a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a96:	2b40      	cmp	r3, #64	; 0x40
 8007a98:	d1b5      	bne.n	8007a06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aba:	d11b      	bne.n	8007af4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ac4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae0:	f043 0204 	orr.w	r2, r3, #4
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e000      	b.n	8007af6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007b02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b04:	b08f      	sub	sp, #60	; 0x3c
 8007b06:	af0a      	add	r7, sp, #40	; 0x28
 8007b08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e10f      	b.n	8007d34 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d106      	bne.n	8007b34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f009 fe7a 	bl	8011828 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2203      	movs	r2, #3
 8007b38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d102      	bne.n	8007b4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f003 feb1 	bl	800b8ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	603b      	str	r3, [r7, #0]
 8007b5e:	687e      	ldr	r6, [r7, #4]
 8007b60:	466d      	mov	r5, sp
 8007b62:	f106 0410 	add.w	r4, r6, #16
 8007b66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b72:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b76:	1d33      	adds	r3, r6, #4
 8007b78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b7a:	6838      	ldr	r0, [r7, #0]
 8007b7c:	f003 fd88 	bl	800b690 <USB_CoreInit>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d005      	beq.n	8007b92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2202      	movs	r2, #2
 8007b8a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e0d0      	b.n	8007d34 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2100      	movs	r1, #0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f003 fe9f 	bl	800b8dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
 8007ba2:	e04a      	b.n	8007c3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007ba4:	7bfa      	ldrb	r2, [r7, #15]
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	333d      	adds	r3, #61	; 0x3d
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007bb8:	7bfa      	ldrb	r2, [r7, #15]
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	1a9b      	subs	r3, r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	333c      	adds	r3, #60	; 0x3c
 8007bc8:	7bfa      	ldrb	r2, [r7, #15]
 8007bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007bcc:	7bfa      	ldrb	r2, [r7, #15]
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	b298      	uxth	r0, r3
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	1a9b      	subs	r3, r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	3342      	adds	r3, #66	; 0x42
 8007be0:	4602      	mov	r2, r0
 8007be2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007be4:	7bfa      	ldrb	r2, [r7, #15]
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	4613      	mov	r3, r2
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	1a9b      	subs	r3, r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	333f      	adds	r3, #63	; 0x3f
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007bf8:	7bfa      	ldrb	r2, [r7, #15]
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	1a9b      	subs	r3, r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	3344      	adds	r3, #68	; 0x44
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007c0c:	7bfa      	ldrb	r2, [r7, #15]
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	3348      	adds	r3, #72	; 0x48
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007c20:	7bfa      	ldrb	r2, [r7, #15]
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	4613      	mov	r3, r2
 8007c26:	00db      	lsls	r3, r3, #3
 8007c28:	1a9b      	subs	r3, r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	440b      	add	r3, r1
 8007c2e:	3350      	adds	r3, #80	; 0x50
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	3301      	adds	r3, #1
 8007c38:	73fb      	strb	r3, [r7, #15]
 8007c3a:	7bfa      	ldrb	r2, [r7, #15]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d3af      	bcc.n	8007ba4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c44:	2300      	movs	r3, #0
 8007c46:	73fb      	strb	r3, [r7, #15]
 8007c48:	e044      	b.n	8007cd4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007c4a:	7bfa      	ldrb	r2, [r7, #15]
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	1a9b      	subs	r3, r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007c60:	7bfa      	ldrb	r2, [r7, #15]
 8007c62:	6879      	ldr	r1, [r7, #4]
 8007c64:	4613      	mov	r3, r2
 8007c66:	00db      	lsls	r3, r3, #3
 8007c68:	1a9b      	subs	r3, r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007c72:	7bfa      	ldrb	r2, [r7, #15]
 8007c74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007c76:	7bfa      	ldrb	r2, [r7, #15]
 8007c78:	6879      	ldr	r1, [r7, #4]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	1a9b      	subs	r3, r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	440b      	add	r3, r1
 8007c84:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007c8c:	7bfa      	ldrb	r2, [r7, #15]
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	4613      	mov	r3, r2
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	1a9b      	subs	r3, r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	440b      	add	r3, r1
 8007c9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007ca2:	7bfa      	ldrb	r2, [r7, #15]
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	1a9b      	subs	r3, r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007cb8:	7bfa      	ldrb	r2, [r7, #15]
 8007cba:	6879      	ldr	r1, [r7, #4]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	1a9b      	subs	r3, r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	440b      	add	r3, r1
 8007cc6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	73fb      	strb	r3, [r7, #15]
 8007cd4:	7bfa      	ldrb	r2, [r7, #15]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d3b5      	bcc.n	8007c4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	603b      	str	r3, [r7, #0]
 8007ce4:	687e      	ldr	r6, [r7, #4]
 8007ce6:	466d      	mov	r5, sp
 8007ce8:	f106 0410 	add.w	r4, r6, #16
 8007cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007cf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007cfc:	1d33      	adds	r3, r6, #4
 8007cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d00:	6838      	ldr	r0, [r7, #0]
 8007d02:	f003 fe15 	bl	800b930 <USB_DevInit>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d005      	beq.n	8007d18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e00d      	b.n	8007d34 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f004 fe5d 	bl	800c9ec <USB_DevDisconnect>

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d3c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <HAL_PCD_Start+0x1c>
 8007d54:	2302      	movs	r3, #2
 8007d56:	e020      	b.n	8007d9a <HAL_PCD_Start+0x5e>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d109      	bne.n	8007d7c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d005      	beq.n	8007d7c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f003 fd89 	bl	800b898 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f004 fe0d 	bl	800c9aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007da2:	b590      	push	{r4, r7, lr}
 8007da4:	b08d      	sub	sp, #52	; 0x34
 8007da6:	af00      	add	r7, sp, #0
 8007da8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4618      	mov	r0, r3
 8007dba:	f004 fecb 	bl	800cb54 <USB_GetMode>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f040 839d 	bne.w	8008500 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f004 fe2f 	bl	800ca2e <USB_ReadInterrupts>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 8393 	beq.w	80084fe <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f004 fe26 	bl	800ca2e <USB_ReadInterrupts>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d107      	bne.n	8007dfc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	695a      	ldr	r2, [r3, #20]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f002 0202 	and.w	r2, r2, #2
 8007dfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f004 fe14 	bl	800ca2e <USB_ReadInterrupts>
 8007e06:	4603      	mov	r3, r0
 8007e08:	f003 0310 	and.w	r3, r3, #16
 8007e0c:	2b10      	cmp	r3, #16
 8007e0e:	d161      	bne.n	8007ed4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 0210 	bic.w	r2, r2, #16
 8007e1e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007e20:	6a3b      	ldr	r3, [r7, #32]
 8007e22:	6a1b      	ldr	r3, [r3, #32]
 8007e24:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	f003 020f 	and.w	r2, r3, #15
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	00db      	lsls	r3, r3, #3
 8007e30:	1a9b      	subs	r3, r3, r2
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	0c5b      	lsrs	r3, r3, #17
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d124      	bne.n	8007e96 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007e52:	4013      	ands	r3, r2
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d035      	beq.n	8007ec4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	091b      	lsrs	r3, r3, #4
 8007e60:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	461a      	mov	r2, r3
 8007e6a:	6a38      	ldr	r0, [r7, #32]
 8007e6c:	f004 fc7a 	bl	800c764 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	68da      	ldr	r2, [r3, #12]
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	091b      	lsrs	r3, r3, #4
 8007e78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e7c:	441a      	add	r2, r3
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	091b      	lsrs	r3, r3, #4
 8007e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e8e:	441a      	add	r2, r3
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	619a      	str	r2, [r3, #24]
 8007e94:	e016      	b.n	8007ec4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	0c5b      	lsrs	r3, r3, #17
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	2b06      	cmp	r3, #6
 8007ea0:	d110      	bne.n	8007ec4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ea8:	2208      	movs	r2, #8
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6a38      	ldr	r0, [r7, #32]
 8007eae:	f004 fc59 	bl	800c764 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	699a      	ldr	r2, [r3, #24]
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	091b      	lsrs	r3, r3, #4
 8007eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ebe:	441a      	add	r2, r3
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699a      	ldr	r2, [r3, #24]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0210 	orr.w	r2, r2, #16
 8007ed2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f004 fda8 	bl	800ca2e <USB_ReadInterrupts>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ee4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ee8:	d16e      	bne.n	8007fc8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f004 fdae 	bl	800ca54 <USB_ReadDevAllOutEpInterrupt>
 8007ef8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007efa:	e062      	b.n	8007fc2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d057      	beq.n	8007fb6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0c:	b2d2      	uxtb	r2, r2
 8007f0e:	4611      	mov	r1, r2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f004 fdd3 	bl	800cabc <USB_ReadDevOutEPInterrupt>
 8007f16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00c      	beq.n	8007f3c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	015a      	lsls	r2, r3, #5
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2e:	461a      	mov	r2, r3
 8007f30:	2301      	movs	r3, #1
 8007f32:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fdb0 	bl	8008a9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00c      	beq.n	8007f60 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f52:	461a      	mov	r2, r3
 8007f54:	2308      	movs	r3, #8
 8007f56:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 feaa 	bl	8008cb4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	f003 0310 	and.w	r3, r3, #16
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d008      	beq.n	8007f7c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f76:	461a      	mov	r2, r3
 8007f78:	2310      	movs	r3, #16
 8007f7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d008      	beq.n	8007f98 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f92:	461a      	mov	r2, r3
 8007f94:	2320      	movs	r3, #32
 8007f96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	015a      	lsls	r2, r3, #5
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	4413      	add	r3, r2
 8007faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007fb4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	3301      	adds	r3, #1
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	085b      	lsrs	r3, r3, #1
 8007fc0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d199      	bne.n	8007efc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f004 fd2e 	bl	800ca2e <USB_ReadInterrupts>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fdc:	f040 80c0 	bne.w	8008160 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f004 fd4f 	bl	800ca88 <USB_ReadDevAllInEpInterrupt>
 8007fea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007ff0:	e0b2      	b.n	8008158 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 80a7 	beq.w	800814c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008004:	b2d2      	uxtb	r2, r2
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f004 fd75 	bl	800caf8 <USB_ReadDevInEPInterrupt>
 800800e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d057      	beq.n	80080ca <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	2201      	movs	r2, #1
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800802e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	43db      	mvns	r3, r3
 8008034:	69f9      	ldr	r1, [r7, #28]
 8008036:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800803a:	4013      	ands	r3, r2
 800803c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	4413      	add	r3, r2
 8008046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804a:	461a      	mov	r2, r3
 800804c:	2301      	movs	r3, #1
 800804e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d132      	bne.n	80080be <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805c:	4613      	mov	r3, r2
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	1a9b      	subs	r3, r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	440b      	add	r3, r1
 8008066:	3348      	adds	r3, #72	; 0x48
 8008068:	6819      	ldr	r1, [r3, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800806e:	4613      	mov	r3, r2
 8008070:	00db      	lsls	r3, r3, #3
 8008072:	1a9b      	subs	r3, r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4403      	add	r3, r0
 8008078:	3344      	adds	r3, #68	; 0x44
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4419      	add	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008082:	4613      	mov	r3, r2
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	1a9b      	subs	r3, r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4403      	add	r3, r0
 800808c:	3348      	adds	r3, #72	; 0x48
 800808e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	2b00      	cmp	r3, #0
 8008094:	d113      	bne.n	80080be <HAL_PCD_IRQHandler+0x31c>
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800809a:	4613      	mov	r3, r2
 800809c:	00db      	lsls	r3, r3, #3
 800809e:	1a9b      	subs	r3, r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	440b      	add	r3, r1
 80080a4:	3350      	adds	r3, #80	; 0x50
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d108      	bne.n	80080be <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6818      	ldr	r0, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80080b6:	461a      	mov	r2, r3
 80080b8:	2101      	movs	r1, #1
 80080ba:	f004 fd7d 	bl	800cbb8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f009 fc30 	bl	801192a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f003 0308 	and.w	r3, r3, #8
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d008      	beq.n	80080e6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e0:	461a      	mov	r2, r3
 80080e2:	2308      	movs	r3, #8
 80080e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f003 0310 	and.w	r3, r3, #16
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d008      	beq.n	8008102 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080fc:	461a      	mov	r2, r3
 80080fe:	2310      	movs	r3, #16
 8008100:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008108:	2b00      	cmp	r3, #0
 800810a:	d008      	beq.n	800811e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800810c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008118:	461a      	mov	r2, r3
 800811a:	2340      	movs	r3, #64	; 0x40
 800811c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d008      	beq.n	800813a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	015a      	lsls	r2, r3, #5
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	4413      	add	r3, r2
 8008130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008134:	461a      	mov	r2, r3
 8008136:	2302      	movs	r3, #2
 8008138:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008140:	2b00      	cmp	r3, #0
 8008142:	d003      	beq.n	800814c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fc1b 	bl	8008982 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	3301      	adds	r3, #1
 8008150:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	085b      	lsrs	r3, r3, #1
 8008156:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	2b00      	cmp	r3, #0
 800815c:	f47f af49 	bne.w	8007ff2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4618      	mov	r0, r3
 8008166:	f004 fc62 	bl	800ca2e <USB_ReadInterrupts>
 800816a:	4603      	mov	r3, r0
 800816c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008170:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008174:	d122      	bne.n	80081bc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	69fa      	ldr	r2, [r7, #28]
 8008180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008190:	2b01      	cmp	r3, #1
 8008192:	d108      	bne.n	80081a6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800819c:	2100      	movs	r1, #0
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fe26 	bl	8008df0 <HAL_PCDEx_LPM_Callback>
 80081a4:	e002      	b.n	80081ac <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f009 fc36 	bl	8011a18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695a      	ldr	r2, [r3, #20]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80081ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f004 fc34 	bl	800ca2e <USB_ReadInterrupts>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081d0:	d112      	bne.n	80081f8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d102      	bne.n	80081e8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f009 fbf2 	bl	80119cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695a      	ldr	r2, [r3, #20]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80081f6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f004 fc16 	bl	800ca2e <USB_ReadInterrupts>
 8008202:	4603      	mov	r3, r0
 8008204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800820c:	f040 80c7 	bne.w	800839e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	69fa      	ldr	r2, [r7, #28]
 800821a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800821e:	f023 0301 	bic.w	r3, r3, #1
 8008222:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2110      	movs	r1, #16
 800822a:	4618      	mov	r0, r3
 800822c:	f003 fce4 	bl	800bbf8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008230:	2300      	movs	r3, #0
 8008232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008234:	e056      	b.n	80082e4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	4413      	add	r3, r2
 800823e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008242:	461a      	mov	r2, r3
 8008244:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008248:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	4413      	add	r3, r2
 8008252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800825a:	0151      	lsls	r1, r2, #5
 800825c:	69fa      	ldr	r2, [r7, #28]
 800825e:	440a      	add	r2, r1
 8008260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008264:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008268:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800826a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826c:	015a      	lsls	r2, r3, #5
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	4413      	add	r3, r2
 8008272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800827a:	0151      	lsls	r1, r2, #5
 800827c:	69fa      	ldr	r2, [r7, #28]
 800827e:	440a      	add	r2, r1
 8008280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008284:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008288:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800828a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828c:	015a      	lsls	r2, r3, #5
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	4413      	add	r3, r2
 8008292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008296:	461a      	mov	r2, r3
 8008298:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800829c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800829e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ae:	0151      	lsls	r1, r2, #5
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	440a      	add	r2, r1
 80082b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80082be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ce:	0151      	lsls	r1, r2, #5
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	440a      	add	r2, r1
 80082d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	3301      	adds	r3, #1
 80082e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d3a3      	bcc.n	8008236 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082fc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008300:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008306:	2b00      	cmp	r3, #0
 8008308:	d016      	beq.n	8008338 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800831a:	f043 030b 	orr.w	r3, r3, #11
 800831e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832a:	69fa      	ldr	r2, [r7, #28]
 800832c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008330:	f043 030b 	orr.w	r3, r3, #11
 8008334:	6453      	str	r3, [r2, #68]	; 0x44
 8008336:	e015      	b.n	8008364 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833e:	695b      	ldr	r3, [r3, #20]
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008346:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800834a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800834e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800835e:	f043 030b 	orr.w	r3, r3, #11
 8008362:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	69fa      	ldr	r2, [r7, #28]
 800836e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008372:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008376:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008388:	461a      	mov	r2, r3
 800838a:	f004 fc15 	bl	800cbb8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	695a      	ldr	r2, [r3, #20]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800839c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f004 fb43 	bl	800ca2e <USB_ReadInterrupts>
 80083a8:	4603      	mov	r3, r0
 80083aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083b2:	d124      	bne.n	80083fe <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f004 fbd9 	bl	800cb70 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f003 fc79 	bl	800bcba <USB_GetDevSpeed>
 80083c8:	4603      	mov	r3, r0
 80083ca:	461a      	mov	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681c      	ldr	r4, [r3, #0]
 80083d4:	f001 f956 	bl	8009684 <HAL_RCC_GetHCLKFreq>
 80083d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	461a      	mov	r2, r3
 80083e2:	4620      	mov	r0, r4
 80083e4:	f003 f9b6 	bl	800b754 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f009 fac6 	bl	801197a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	695a      	ldr	r2, [r3, #20]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80083fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4618      	mov	r0, r3
 8008404:	f004 fb13 	bl	800ca2e <USB_ReadInterrupts>
 8008408:	4603      	mov	r3, r0
 800840a:	f003 0308 	and.w	r3, r3, #8
 800840e:	2b08      	cmp	r3, #8
 8008410:	d10a      	bne.n	8008428 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f009 faa3 	bl	801195e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	695a      	ldr	r2, [r3, #20]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f002 0208 	and.w	r2, r2, #8
 8008426:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4618      	mov	r0, r3
 800842e:	f004 fafe 	bl	800ca2e <USB_ReadInterrupts>
 8008432:	4603      	mov	r3, r0
 8008434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800843c:	d10f      	bne.n	800845e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008444:	b2db      	uxtb	r3, r3
 8008446:	4619      	mov	r1, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f009 fb05 	bl	8011a58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	695a      	ldr	r2, [r3, #20]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800845c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4618      	mov	r0, r3
 8008464:	f004 fae3 	bl	800ca2e <USB_ReadInterrupts>
 8008468:	4603      	mov	r3, r0
 800846a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800846e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008472:	d10f      	bne.n	8008494 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008474:	2300      	movs	r3, #0
 8008476:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	b2db      	uxtb	r3, r3
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f009 fad8 	bl	8011a34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	695a      	ldr	r2, [r3, #20]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008492:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4618      	mov	r0, r3
 800849a:	f004 fac8 	bl	800ca2e <USB_ReadInterrupts>
 800849e:	4603      	mov	r3, r0
 80084a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084a8:	d10a      	bne.n	80084c0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f009 fae6 	bl	8011a7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	695a      	ldr	r2, [r3, #20]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80084be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f004 fab2 	bl	800ca2e <USB_ReadInterrupts>
 80084ca:	4603      	mov	r3, r0
 80084cc:	f003 0304 	and.w	r3, r3, #4
 80084d0:	2b04      	cmp	r3, #4
 80084d2:	d115      	bne.n	8008500 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	f003 0304 	and.w	r3, r3, #4
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f009 fad6 	bl	8011a98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6859      	ldr	r1, [r3, #4]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	69ba      	ldr	r2, [r7, #24]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	605a      	str	r2, [r3, #4]
 80084fc:	e000      	b.n	8008500 <HAL_PCD_IRQHandler+0x75e>
      return;
 80084fe:	bf00      	nop
    }
  }
}
 8008500:	3734      	adds	r7, #52	; 0x34
 8008502:	46bd      	mov	sp, r7
 8008504:	bd90      	pop	{r4, r7, pc}

08008506 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	460b      	mov	r3, r1
 8008510:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008518:	2b01      	cmp	r3, #1
 800851a:	d101      	bne.n	8008520 <HAL_PCD_SetAddress+0x1a>
 800851c:	2302      	movs	r3, #2
 800851e:	e013      	b.n	8008548 <HAL_PCD_SetAddress+0x42>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	78fa      	ldrb	r2, [r7, #3]
 800852c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	78fa      	ldrb	r2, [r7, #3]
 8008536:	4611      	mov	r1, r2
 8008538:	4618      	mov	r0, r3
 800853a:	f004 fa10 	bl	800c95e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	4608      	mov	r0, r1
 800855a:	4611      	mov	r1, r2
 800855c:	461a      	mov	r2, r3
 800855e:	4603      	mov	r3, r0
 8008560:	70fb      	strb	r3, [r7, #3]
 8008562:	460b      	mov	r3, r1
 8008564:	803b      	strh	r3, [r7, #0]
 8008566:	4613      	mov	r3, r2
 8008568:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800856e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008572:	2b00      	cmp	r3, #0
 8008574:	da0f      	bge.n	8008596 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008576:	78fb      	ldrb	r3, [r7, #3]
 8008578:	f003 020f 	and.w	r2, r3, #15
 800857c:	4613      	mov	r3, r2
 800857e:	00db      	lsls	r3, r3, #3
 8008580:	1a9b      	subs	r3, r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	3338      	adds	r3, #56	; 0x38
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	4413      	add	r3, r2
 800858a:	3304      	adds	r3, #4
 800858c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2201      	movs	r2, #1
 8008592:	705a      	strb	r2, [r3, #1]
 8008594:	e00f      	b.n	80085b6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008596:	78fb      	ldrb	r3, [r7, #3]
 8008598:	f003 020f 	and.w	r2, r3, #15
 800859c:	4613      	mov	r3, r2
 800859e:	00db      	lsls	r3, r3, #3
 80085a0:	1a9b      	subs	r3, r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	4413      	add	r3, r2
 80085ac:	3304      	adds	r3, #4
 80085ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80085b6:	78fb      	ldrb	r3, [r7, #3]
 80085b8:	f003 030f 	and.w	r3, r3, #15
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80085c2:	883a      	ldrh	r2, [r7, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	78ba      	ldrb	r2, [r7, #2]
 80085cc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	785b      	ldrb	r3, [r3, #1]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	b29a      	uxth	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80085e0:	78bb      	ldrb	r3, [r7, #2]
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d102      	bne.n	80085ec <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d101      	bne.n	80085fa <HAL_PCD_EP_Open+0xaa>
 80085f6:	2302      	movs	r3, #2
 80085f8:	e00e      	b.n	8008618 <HAL_PCD_EP_Open+0xc8>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68f9      	ldr	r1, [r7, #12]
 8008608:	4618      	mov	r0, r3
 800860a:	f003 fb7b 	bl	800bd04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008616:	7afb      	ldrb	r3, [r7, #11]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800862c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008630:	2b00      	cmp	r3, #0
 8008632:	da0f      	bge.n	8008654 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	f003 020f 	and.w	r2, r3, #15
 800863a:	4613      	mov	r3, r2
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	1a9b      	subs	r3, r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	3338      	adds	r3, #56	; 0x38
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	4413      	add	r3, r2
 8008648:	3304      	adds	r3, #4
 800864a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2201      	movs	r2, #1
 8008650:	705a      	strb	r2, [r3, #1]
 8008652:	e00f      	b.n	8008674 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	f003 020f 	and.w	r2, r3, #15
 800865a:	4613      	mov	r3, r2
 800865c:	00db      	lsls	r3, r3, #3
 800865e:	1a9b      	subs	r3, r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	4413      	add	r3, r2
 800866a:	3304      	adds	r3, #4
 800866c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	b2da      	uxtb	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008686:	2b01      	cmp	r3, #1
 8008688:	d101      	bne.n	800868e <HAL_PCD_EP_Close+0x6e>
 800868a:	2302      	movs	r3, #2
 800868c:	e00e      	b.n	80086ac <HAL_PCD_EP_Close+0x8c>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68f9      	ldr	r1, [r7, #12]
 800869c:	4618      	mov	r0, r3
 800869e:	f003 fbb9 	bl	800be14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	607a      	str	r2, [r7, #4]
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	460b      	mov	r3, r1
 80086c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	f003 020f 	and.w	r2, r3, #15
 80086ca:	4613      	mov	r3, r2
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	1a9b      	subs	r3, r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	4413      	add	r3, r2
 80086da:	3304      	adds	r3, #4
 80086dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2200      	movs	r2, #0
 80086ee:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2200      	movs	r2, #0
 80086f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086f6:	7afb      	ldrb	r3, [r7, #11]
 80086f8:	f003 030f 	and.w	r3, r3, #15
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d102      	bne.n	8008710 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008710:	7afb      	ldrb	r3, [r7, #11]
 8008712:	f003 030f 	and.w	r3, r3, #15
 8008716:	2b00      	cmp	r3, #0
 8008718:	d109      	bne.n	800872e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	b2db      	uxtb	r3, r3
 8008724:	461a      	mov	r2, r3
 8008726:	6979      	ldr	r1, [r7, #20]
 8008728:	f003 fe94 	bl	800c454 <USB_EP0StartXfer>
 800872c:	e008      	b.n	8008740 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	b2db      	uxtb	r3, r3
 8008738:	461a      	mov	r2, r3
 800873a:	6979      	ldr	r1, [r7, #20]
 800873c:	f003 fc46 	bl	800bfcc <USB_EPStartXfer>
  }

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	460b      	mov	r3, r1
 8008754:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	f003 020f 	and.w	r2, r3, #15
 800875c:	6879      	ldr	r1, [r7, #4]
 800875e:	4613      	mov	r3, r2
 8008760:	00db      	lsls	r3, r3, #3
 8008762:	1a9b      	subs	r3, r3, r2
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	440b      	add	r3, r1
 8008768:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800876c:	681b      	ldr	r3, [r3, #0]
}
 800876e:	4618      	mov	r0, r3
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b086      	sub	sp, #24
 800877e:	af00      	add	r7, sp, #0
 8008780:	60f8      	str	r0, [r7, #12]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
 8008786:	460b      	mov	r3, r1
 8008788:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	f003 020f 	and.w	r2, r3, #15
 8008790:	4613      	mov	r3, r2
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	1a9b      	subs	r3, r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	3338      	adds	r3, #56	; 0x38
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4413      	add	r3, r2
 800879e:	3304      	adds	r3, #4
 80087a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2200      	movs	r2, #0
 80087b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2201      	movs	r2, #1
 80087b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087ba:	7afb      	ldrb	r3, [r7, #11]
 80087bc:	f003 030f 	and.w	r3, r3, #15
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d102      	bne.n	80087d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80087d4:	7afb      	ldrb	r3, [r7, #11]
 80087d6:	f003 030f 	and.w	r3, r3, #15
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d109      	bne.n	80087f2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6818      	ldr	r0, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	461a      	mov	r2, r3
 80087ea:	6979      	ldr	r1, [r7, #20]
 80087ec:	f003 fe32 	bl	800c454 <USB_EP0StartXfer>
 80087f0:	e008      	b.n	8008804 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6818      	ldr	r0, [r3, #0]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	461a      	mov	r2, r3
 80087fe:	6979      	ldr	r1, [r7, #20]
 8008800:	f003 fbe4 	bl	800bfcc <USB_EPStartXfer>
  }

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	460b      	mov	r3, r1
 8008818:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800881a:	78fb      	ldrb	r3, [r7, #3]
 800881c:	f003 020f 	and.w	r2, r3, #15
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	429a      	cmp	r2, r3
 8008826:	d901      	bls.n	800882c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e050      	b.n	80088ce <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800882c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008830:	2b00      	cmp	r3, #0
 8008832:	da0f      	bge.n	8008854 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008834:	78fb      	ldrb	r3, [r7, #3]
 8008836:	f003 020f 	and.w	r2, r3, #15
 800883a:	4613      	mov	r3, r2
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	1a9b      	subs	r3, r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	3338      	adds	r3, #56	; 0x38
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	4413      	add	r3, r2
 8008848:	3304      	adds	r3, #4
 800884a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2201      	movs	r2, #1
 8008850:	705a      	strb	r2, [r3, #1]
 8008852:	e00d      	b.n	8008870 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	4613      	mov	r3, r2
 8008858:	00db      	lsls	r3, r3, #3
 800885a:	1a9b      	subs	r3, r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	4413      	add	r3, r2
 8008866:	3304      	adds	r3, #4
 8008868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2201      	movs	r2, #1
 8008874:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008876:	78fb      	ldrb	r3, [r7, #3]
 8008878:	f003 030f 	and.w	r3, r3, #15
 800887c:	b2da      	uxtb	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008888:	2b01      	cmp	r3, #1
 800888a:	d101      	bne.n	8008890 <HAL_PCD_EP_SetStall+0x82>
 800888c:	2302      	movs	r3, #2
 800888e:	e01e      	b.n	80088ce <HAL_PCD_EP_SetStall+0xc0>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68f9      	ldr	r1, [r7, #12]
 800889e:	4618      	mov	r0, r3
 80088a0:	f003 ff89 	bl	800c7b6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	f003 030f 	and.w	r3, r3, #15
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10a      	bne.n	80088c4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6818      	ldr	r0, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	b2d9      	uxtb	r1, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80088be:	461a      	mov	r2, r3
 80088c0:	f004 f97a 	bl	800cbb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80088e2:	78fb      	ldrb	r3, [r7, #3]
 80088e4:	f003 020f 	and.w	r2, r3, #15
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d901      	bls.n	80088f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e042      	b.n	800897a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80088f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	da0f      	bge.n	800891c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	f003 020f 	and.w	r2, r3, #15
 8008902:	4613      	mov	r3, r2
 8008904:	00db      	lsls	r3, r3, #3
 8008906:	1a9b      	subs	r3, r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	3338      	adds	r3, #56	; 0x38
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	4413      	add	r3, r2
 8008910:	3304      	adds	r3, #4
 8008912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2201      	movs	r2, #1
 8008918:	705a      	strb	r2, [r3, #1]
 800891a:	e00f      	b.n	800893c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800891c:	78fb      	ldrb	r3, [r7, #3]
 800891e:	f003 020f 	and.w	r2, r3, #15
 8008922:	4613      	mov	r3, r2
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	4413      	add	r3, r2
 8008932:	3304      	adds	r3, #4
 8008934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008942:	78fb      	ldrb	r3, [r7, #3]
 8008944:	f003 030f 	and.w	r3, r3, #15
 8008948:	b2da      	uxtb	r2, r3
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_PCD_EP_ClrStall+0x86>
 8008958:	2302      	movs	r3, #2
 800895a:	e00e      	b.n	800897a <HAL_PCD_EP_ClrStall+0xa4>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68f9      	ldr	r1, [r7, #12]
 800896a:	4618      	mov	r0, r3
 800896c:	f003 ff91 	bl	800c892 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b08a      	sub	sp, #40	; 0x28
 8008986:	af02      	add	r7, sp, #8
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	4613      	mov	r3, r2
 800899a:	00db      	lsls	r3, r3, #3
 800899c:	1a9b      	subs	r3, r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	3338      	adds	r3, #56	; 0x38
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	4413      	add	r3, r2
 80089a6:	3304      	adds	r3, #4
 80089a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	699a      	ldr	r2, [r3, #24]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d901      	bls.n	80089ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e06c      	b.n	8008a94 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	695a      	ldr	r2, [r3, #20]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	69fa      	ldr	r2, [r7, #28]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d902      	bls.n	80089d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	3303      	adds	r3, #3
 80089da:	089b      	lsrs	r3, r3, #2
 80089dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80089de:	e02b      	b.n	8008a38 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	695a      	ldr	r2, [r3, #20]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	69fa      	ldr	r2, [r7, #28]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d902      	bls.n	80089fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	3303      	adds	r3, #3
 8008a00:	089b      	lsrs	r3, r3, #2
 8008a02:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	68d9      	ldr	r1, [r3, #12]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	4603      	mov	r3, r0
 8008a1a:	6978      	ldr	r0, [r7, #20]
 8008a1c:	f003 fe6d 	bl	800c6fa <USB_WritePacket>

    ep->xfer_buff  += len;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	68da      	ldr	r2, [r3, #12]
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	441a      	add	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	699a      	ldr	r2, [r3, #24]
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	441a      	add	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d809      	bhi.n	8008a62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	699a      	ldr	r2, [r3, #24]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d203      	bcs.n	8008a62 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1be      	bne.n	80089e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	695a      	ldr	r2, [r3, #20]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d811      	bhi.n	8008a92 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	f003 030f 	and.w	r3, r3, #15
 8008a74:	2201      	movs	r2, #1
 8008a76:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	43db      	mvns	r3, r3
 8008a88:	6939      	ldr	r1, [r7, #16]
 8008a8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a8e:	4013      	ands	r3, r2
 8008a90:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3720      	adds	r7, #32
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	333c      	adds	r3, #60	; 0x3c
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	f040 80a0 	bne.w	8008c14 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	f003 0308 	and.w	r3, r3, #8
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d015      	beq.n	8008b0a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4a72      	ldr	r2, [pc, #456]	; (8008cac <PCD_EP_OutXfrComplete_int+0x210>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	f240 80dd 	bls.w	8008ca2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f000 80d7 	beq.w	8008ca2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b00:	461a      	mov	r2, r3
 8008b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b06:	6093      	str	r3, [r2, #8]
 8008b08:	e0cb      	b.n	8008ca2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	f003 0320 	and.w	r3, r3, #32
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d009      	beq.n	8008b28 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b20:	461a      	mov	r2, r3
 8008b22:	2320      	movs	r3, #32
 8008b24:	6093      	str	r3, [r2, #8]
 8008b26:	e0bc      	b.n	8008ca2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	f040 80b7 	bne.w	8008ca2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4a5d      	ldr	r2, [pc, #372]	; (8008cac <PCD_EP_OutXfrComplete_int+0x210>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d90f      	bls.n	8008b5c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b52:	461a      	mov	r2, r3
 8008b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b58:	6093      	str	r3, [r2, #8]
 8008b5a:	e0a2      	b.n	8008ca2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	4613      	mov	r3, r2
 8008b62:	00db      	lsls	r3, r3, #3
 8008b64:	1a9b      	subs	r3, r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	440b      	add	r3, r1
 8008b6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008b6e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	0159      	lsls	r1, r3, #5
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	440b      	add	r3, r1
 8008b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008b82:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	1a9b      	subs	r3, r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4403      	add	r3, r0
 8008b92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008b96:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008b98:	6879      	ldr	r1, [r7, #4]
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	00db      	lsls	r3, r3, #3
 8008ba0:	1a9b      	subs	r3, r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	440b      	add	r3, r1
 8008ba6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008baa:	6819      	ldr	r1, [r3, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	1a9b      	subs	r3, r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4403      	add	r3, r0
 8008bba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4419      	add	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	00db      	lsls	r3, r3, #3
 8008bca:	1a9b      	subs	r3, r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4403      	add	r3, r0
 8008bd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008bd4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d114      	bne.n	8008c06 <PCD_EP_OutXfrComplete_int+0x16a>
 8008bdc:	6879      	ldr	r1, [r7, #4]
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	4613      	mov	r3, r2
 8008be2:	00db      	lsls	r3, r3, #3
 8008be4:	1a9b      	subs	r3, r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	440b      	add	r3, r1
 8008bea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d108      	bne.n	8008c06 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6818      	ldr	r0, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008bfe:	461a      	mov	r2, r3
 8008c00:	2101      	movs	r1, #1
 8008c02:	f003 ffd9 	bl	800cbb8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f008 fe71 	bl	80118f4 <HAL_PCD_DataOutStageCallback>
 8008c12:	e046      	b.n	8008ca2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	4a26      	ldr	r2, [pc, #152]	; (8008cb0 <PCD_EP_OutXfrComplete_int+0x214>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d124      	bne.n	8008c66 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	015a      	lsls	r2, r3, #5
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c32:	461a      	mov	r2, r3
 8008c34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c38:	6093      	str	r3, [r2, #8]
 8008c3a:	e032      	b.n	8008ca2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	f003 0320 	and.w	r3, r3, #32
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d008      	beq.n	8008c58 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c52:	461a      	mov	r2, r3
 8008c54:	2320      	movs	r3, #32
 8008c56:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f008 fe48 	bl	80118f4 <HAL_PCD_DataOutStageCallback>
 8008c64:	e01d      	b.n	8008ca2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d114      	bne.n	8008c96 <PCD_EP_OutXfrComplete_int+0x1fa>
 8008c6c:	6879      	ldr	r1, [r7, #4]
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	4613      	mov	r3, r2
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	1a9b      	subs	r3, r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	440b      	add	r3, r1
 8008c7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d108      	bne.n	8008c96 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6818      	ldr	r0, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c8e:	461a      	mov	r2, r3
 8008c90:	2100      	movs	r1, #0
 8008c92:	f003 ff91 	bl	800cbb8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f008 fe29 	bl	80118f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	4f54300a 	.word	0x4f54300a
 8008cb0:	4f54310a 	.word	0x4f54310a

08008cb4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	333c      	adds	r3, #60	; 0x3c
 8008ccc:	3304      	adds	r3, #4
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4a15      	ldr	r2, [pc, #84]	; (8008d3c <PCD_EP_OutSetupPacket_int+0x88>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d90e      	bls.n	8008d08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d009      	beq.n	8008d08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d00:	461a      	mov	r2, r3
 8008d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f008 fde1 	bl	80118d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	4a0a      	ldr	r2, [pc, #40]	; (8008d3c <PCD_EP_OutSetupPacket_int+0x88>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d90c      	bls.n	8008d30 <PCD_EP_OutSetupPacket_int+0x7c>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d108      	bne.n	8008d30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6818      	ldr	r0, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d28:	461a      	mov	r2, r3
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	f003 ff44 	bl	800cbb8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	4f54300a 	.word	0x4f54300a

08008d40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008d58:	78fb      	ldrb	r3, [r7, #3]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d107      	bne.n	8008d6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008d5e:	883b      	ldrh	r3, [r7, #0]
 8008d60:	0419      	lsls	r1, r3, #16
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	430a      	orrs	r2, r1
 8008d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8008d6c:	e028      	b.n	8008dc0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d74:	0c1b      	lsrs	r3, r3, #16
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	4413      	add	r3, r2
 8008d7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	73fb      	strb	r3, [r7, #15]
 8008d80:	e00d      	b.n	8008d9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
 8008d88:	3340      	adds	r3, #64	; 0x40
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	0c1b      	lsrs	r3, r3, #16
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	4413      	add	r3, r2
 8008d96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	73fb      	strb	r3, [r7, #15]
 8008d9e:	7bfa      	ldrb	r2, [r7, #15]
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d3ec      	bcc.n	8008d82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008da8:	883b      	ldrh	r3, [r7, #0]
 8008daa:	0418      	lsls	r0, r3, #16
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6819      	ldr	r1, [r3, #0]
 8008db0:	78fb      	ldrb	r3, [r7, #3]
 8008db2:	3b01      	subs	r3, #1
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	4302      	orrs	r2, r0
 8008db8:	3340      	adds	r3, #64	; 0x40
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	440b      	add	r3, r1
 8008dbe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	887a      	ldrh	r2, [r7, #2]
 8008de0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e264      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d075      	beq.n	8008f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e26:	4ba3      	ldr	r3, [pc, #652]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f003 030c 	and.w	r3, r3, #12
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d00c      	beq.n	8008e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e32:	4ba0      	ldr	r3, [pc, #640]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008e3a:	2b08      	cmp	r3, #8
 8008e3c:	d112      	bne.n	8008e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e3e:	4b9d      	ldr	r3, [pc, #628]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e4a:	d10b      	bne.n	8008e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e4c:	4b99      	ldr	r3, [pc, #612]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d05b      	beq.n	8008f10 <HAL_RCC_OscConfig+0x108>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d157      	bne.n	8008f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	e23f      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e6c:	d106      	bne.n	8008e7c <HAL_RCC_OscConfig+0x74>
 8008e6e:	4b91      	ldr	r3, [pc, #580]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a90      	ldr	r2, [pc, #576]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e78:	6013      	str	r3, [r2, #0]
 8008e7a:	e01d      	b.n	8008eb8 <HAL_RCC_OscConfig+0xb0>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e84:	d10c      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x98>
 8008e86:	4b8b      	ldr	r3, [pc, #556]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a8a      	ldr	r2, [pc, #552]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	4b88      	ldr	r3, [pc, #544]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a87      	ldr	r2, [pc, #540]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	e00b      	b.n	8008eb8 <HAL_RCC_OscConfig+0xb0>
 8008ea0:	4b84      	ldr	r3, [pc, #528]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a83      	ldr	r2, [pc, #524]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	4b81      	ldr	r3, [pc, #516]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a80      	ldr	r2, [pc, #512]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d013      	beq.n	8008ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ec0:	f7fc ff34 	bl	8005d2c <HAL_GetTick>
 8008ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ec6:	e008      	b.n	8008eda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ec8:	f7fc ff30 	bl	8005d2c <HAL_GetTick>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	2b64      	cmp	r3, #100	; 0x64
 8008ed4:	d901      	bls.n	8008eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e204      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eda:	4b76      	ldr	r3, [pc, #472]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0f0      	beq.n	8008ec8 <HAL_RCC_OscConfig+0xc0>
 8008ee6:	e014      	b.n	8008f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ee8:	f7fc ff20 	bl	8005d2c <HAL_GetTick>
 8008eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008eee:	e008      	b.n	8008f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ef0:	f7fc ff1c 	bl	8005d2c <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	2b64      	cmp	r3, #100	; 0x64
 8008efc:	d901      	bls.n	8008f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e1f0      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f02:	4b6c      	ldr	r3, [pc, #432]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1f0      	bne.n	8008ef0 <HAL_RCC_OscConfig+0xe8>
 8008f0e:	e000      	b.n	8008f12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d063      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f1e:	4b65      	ldr	r3, [pc, #404]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	f003 030c 	and.w	r3, r3, #12
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00b      	beq.n	8008f42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f2a:	4b62      	ldr	r3, [pc, #392]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008f32:	2b08      	cmp	r3, #8
 8008f34:	d11c      	bne.n	8008f70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f36:	4b5f      	ldr	r3, [pc, #380]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d116      	bne.n	8008f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f42:	4b5c      	ldr	r3, [pc, #368]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0302 	and.w	r3, r3, #2
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d005      	beq.n	8008f5a <HAL_RCC_OscConfig+0x152>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d001      	beq.n	8008f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e1c4      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f5a:	4b56      	ldr	r3, [pc, #344]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	4952      	ldr	r1, [pc, #328]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f6e:	e03a      	b.n	8008fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d020      	beq.n	8008fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f78:	4b4f      	ldr	r3, [pc, #316]	; (80090b8 <HAL_RCC_OscConfig+0x2b0>)
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7e:	f7fc fed5 	bl	8005d2c <HAL_GetTick>
 8008f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f84:	e008      	b.n	8008f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f86:	f7fc fed1 	bl	8005d2c <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d901      	bls.n	8008f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e1a5      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f98:	4b46      	ldr	r3, [pc, #280]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0302 	and.w	r3, r3, #2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d0f0      	beq.n	8008f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fa4:	4b43      	ldr	r3, [pc, #268]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	4940      	ldr	r1, [pc, #256]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	600b      	str	r3, [r1, #0]
 8008fb8:	e015      	b.n	8008fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fba:	4b3f      	ldr	r3, [pc, #252]	; (80090b8 <HAL_RCC_OscConfig+0x2b0>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc0:	f7fc feb4 	bl	8005d2c <HAL_GetTick>
 8008fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fc6:	e008      	b.n	8008fda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fc8:	f7fc feb0 	bl	8005d2c <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d901      	bls.n	8008fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	e184      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008fda:	4b36      	ldr	r3, [pc, #216]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1f0      	bne.n	8008fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f003 0308 	and.w	r3, r3, #8
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d030      	beq.n	8009054 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d016      	beq.n	8009028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ffa:	4b30      	ldr	r3, [pc, #192]	; (80090bc <HAL_RCC_OscConfig+0x2b4>)
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009000:	f7fc fe94 	bl	8005d2c <HAL_GetTick>
 8009004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009006:	e008      	b.n	800901a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009008:	f7fc fe90 	bl	8005d2c <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	2b02      	cmp	r3, #2
 8009014:	d901      	bls.n	800901a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e164      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800901a:	4b26      	ldr	r3, [pc, #152]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 800901c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0f0      	beq.n	8009008 <HAL_RCC_OscConfig+0x200>
 8009026:	e015      	b.n	8009054 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009028:	4b24      	ldr	r3, [pc, #144]	; (80090bc <HAL_RCC_OscConfig+0x2b4>)
 800902a:	2200      	movs	r2, #0
 800902c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800902e:	f7fc fe7d 	bl	8005d2c <HAL_GetTick>
 8009032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009034:	e008      	b.n	8009048 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009036:	f7fc fe79 	bl	8005d2c <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	2b02      	cmp	r3, #2
 8009042:	d901      	bls.n	8009048 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e14d      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009048:	4b1a      	ldr	r3, [pc, #104]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 800904a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800904c:	f003 0302 	and.w	r3, r3, #2
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1f0      	bne.n	8009036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 0304 	and.w	r3, r3, #4
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 80a0 	beq.w	80091a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009062:	2300      	movs	r3, #0
 8009064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009066:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8009068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10f      	bne.n	8009092 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009072:	2300      	movs	r3, #0
 8009074:	60bb      	str	r3, [r7, #8]
 8009076:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	4a0e      	ldr	r2, [pc, #56]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 800907c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009080:	6413      	str	r3, [r2, #64]	; 0x40
 8009082:	4b0c      	ldr	r3, [pc, #48]	; (80090b4 <HAL_RCC_OscConfig+0x2ac>)
 8009084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800908a:	60bb      	str	r3, [r7, #8]
 800908c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800908e:	2301      	movs	r3, #1
 8009090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009092:	4b0b      	ldr	r3, [pc, #44]	; (80090c0 <HAL_RCC_OscConfig+0x2b8>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800909a:	2b00      	cmp	r3, #0
 800909c:	d121      	bne.n	80090e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800909e:	4b08      	ldr	r3, [pc, #32]	; (80090c0 <HAL_RCC_OscConfig+0x2b8>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a07      	ldr	r2, [pc, #28]	; (80090c0 <HAL_RCC_OscConfig+0x2b8>)
 80090a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090aa:	f7fc fe3f 	bl	8005d2c <HAL_GetTick>
 80090ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090b0:	e011      	b.n	80090d6 <HAL_RCC_OscConfig+0x2ce>
 80090b2:	bf00      	nop
 80090b4:	40023800 	.word	0x40023800
 80090b8:	42470000 	.word	0x42470000
 80090bc:	42470e80 	.word	0x42470e80
 80090c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090c4:	f7fc fe32 	bl	8005d2c <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d901      	bls.n	80090d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e106      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090d6:	4b85      	ldr	r3, [pc, #532]	; (80092ec <HAL_RCC_OscConfig+0x4e4>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0f0      	beq.n	80090c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d106      	bne.n	80090f8 <HAL_RCC_OscConfig+0x2f0>
 80090ea:	4b81      	ldr	r3, [pc, #516]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 80090ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ee:	4a80      	ldr	r2, [pc, #512]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 80090f0:	f043 0301 	orr.w	r3, r3, #1
 80090f4:	6713      	str	r3, [r2, #112]	; 0x70
 80090f6:	e01c      	b.n	8009132 <HAL_RCC_OscConfig+0x32a>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	2b05      	cmp	r3, #5
 80090fe:	d10c      	bne.n	800911a <HAL_RCC_OscConfig+0x312>
 8009100:	4b7b      	ldr	r3, [pc, #492]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 8009102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009104:	4a7a      	ldr	r2, [pc, #488]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 8009106:	f043 0304 	orr.w	r3, r3, #4
 800910a:	6713      	str	r3, [r2, #112]	; 0x70
 800910c:	4b78      	ldr	r3, [pc, #480]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 800910e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009110:	4a77      	ldr	r2, [pc, #476]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 8009112:	f043 0301 	orr.w	r3, r3, #1
 8009116:	6713      	str	r3, [r2, #112]	; 0x70
 8009118:	e00b      	b.n	8009132 <HAL_RCC_OscConfig+0x32a>
 800911a:	4b75      	ldr	r3, [pc, #468]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	4a74      	ldr	r2, [pc, #464]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 8009120:	f023 0301 	bic.w	r3, r3, #1
 8009124:	6713      	str	r3, [r2, #112]	; 0x70
 8009126:	4b72      	ldr	r3, [pc, #456]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 8009128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912a:	4a71      	ldr	r2, [pc, #452]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 800912c:	f023 0304 	bic.w	r3, r3, #4
 8009130:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d015      	beq.n	8009166 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800913a:	f7fc fdf7 	bl	8005d2c <HAL_GetTick>
 800913e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009140:	e00a      	b.n	8009158 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009142:	f7fc fdf3 	bl	8005d2c <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009150:	4293      	cmp	r3, r2
 8009152:	d901      	bls.n	8009158 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009154:	2303      	movs	r3, #3
 8009156:	e0c5      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009158:	4b65      	ldr	r3, [pc, #404]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 800915a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915c:	f003 0302 	and.w	r3, r3, #2
 8009160:	2b00      	cmp	r3, #0
 8009162:	d0ee      	beq.n	8009142 <HAL_RCC_OscConfig+0x33a>
 8009164:	e014      	b.n	8009190 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009166:	f7fc fde1 	bl	8005d2c <HAL_GetTick>
 800916a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800916c:	e00a      	b.n	8009184 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800916e:	f7fc fddd 	bl	8005d2c <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	f241 3288 	movw	r2, #5000	; 0x1388
 800917c:	4293      	cmp	r3, r2
 800917e:	d901      	bls.n	8009184 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	e0af      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009184:	4b5a      	ldr	r3, [pc, #360]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 8009186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009188:	f003 0302 	and.w	r3, r3, #2
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1ee      	bne.n	800916e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009190:	7dfb      	ldrb	r3, [r7, #23]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d105      	bne.n	80091a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009196:	4b56      	ldr	r3, [pc, #344]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 8009198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919a:	4a55      	ldr	r2, [pc, #340]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 800919c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 809b 	beq.w	80092e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80091ac:	4b50      	ldr	r3, [pc, #320]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f003 030c 	and.w	r3, r3, #12
 80091b4:	2b08      	cmp	r3, #8
 80091b6:	d05c      	beq.n	8009272 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d141      	bne.n	8009244 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091c0:	4b4c      	ldr	r3, [pc, #304]	; (80092f4 <HAL_RCC_OscConfig+0x4ec>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091c6:	f7fc fdb1 	bl	8005d2c <HAL_GetTick>
 80091ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091cc:	e008      	b.n	80091e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091ce:	f7fc fdad 	bl	8005d2c <HAL_GetTick>
 80091d2:	4602      	mov	r2, r0
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d901      	bls.n	80091e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e081      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091e0:	4b43      	ldr	r3, [pc, #268]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1f0      	bne.n	80091ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	69da      	ldr	r2, [r3, #28]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a1b      	ldr	r3, [r3, #32]
 80091f4:	431a      	orrs	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	019b      	lsls	r3, r3, #6
 80091fc:	431a      	orrs	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009202:	085b      	lsrs	r3, r3, #1
 8009204:	3b01      	subs	r3, #1
 8009206:	041b      	lsls	r3, r3, #16
 8009208:	431a      	orrs	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920e:	061b      	lsls	r3, r3, #24
 8009210:	4937      	ldr	r1, [pc, #220]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 8009212:	4313      	orrs	r3, r2
 8009214:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009216:	4b37      	ldr	r3, [pc, #220]	; (80092f4 <HAL_RCC_OscConfig+0x4ec>)
 8009218:	2201      	movs	r2, #1
 800921a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800921c:	f7fc fd86 	bl	8005d2c <HAL_GetTick>
 8009220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009222:	e008      	b.n	8009236 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009224:	f7fc fd82 	bl	8005d2c <HAL_GetTick>
 8009228:	4602      	mov	r2, r0
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	2b02      	cmp	r3, #2
 8009230:	d901      	bls.n	8009236 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009232:	2303      	movs	r3, #3
 8009234:	e056      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009236:	4b2e      	ldr	r3, [pc, #184]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0f0      	beq.n	8009224 <HAL_RCC_OscConfig+0x41c>
 8009242:	e04e      	b.n	80092e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009244:	4b2b      	ldr	r3, [pc, #172]	; (80092f4 <HAL_RCC_OscConfig+0x4ec>)
 8009246:	2200      	movs	r2, #0
 8009248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800924a:	f7fc fd6f 	bl	8005d2c <HAL_GetTick>
 800924e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009250:	e008      	b.n	8009264 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009252:	f7fc fd6b 	bl	8005d2c <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	2b02      	cmp	r3, #2
 800925e:	d901      	bls.n	8009264 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e03f      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009264:	4b22      	ldr	r3, [pc, #136]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1f0      	bne.n	8009252 <HAL_RCC_OscConfig+0x44a>
 8009270:	e037      	b.n	80092e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d101      	bne.n	800927e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e032      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800927e:	4b1c      	ldr	r3, [pc, #112]	; (80092f0 <HAL_RCC_OscConfig+0x4e8>)
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d028      	beq.n	80092de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009296:	429a      	cmp	r2, r3
 8009298:	d121      	bne.n	80092de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d11a      	bne.n	80092de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80092ae:	4013      	ands	r3, r2
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80092b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d111      	bne.n	80092de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c4:	085b      	lsrs	r3, r3, #1
 80092c6:	3b01      	subs	r3, #1
 80092c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d107      	bne.n	80092de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80092da:	429a      	cmp	r2, r3
 80092dc:	d001      	beq.n	80092e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e000      	b.n	80092e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3718      	adds	r7, #24
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	40007000 	.word	0x40007000
 80092f0:	40023800 	.word	0x40023800
 80092f4:	42470060 	.word	0x42470060

080092f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e0cc      	b.n	80094a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800930c:	4b68      	ldr	r3, [pc, #416]	; (80094b0 <HAL_RCC_ClockConfig+0x1b8>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0307 	and.w	r3, r3, #7
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	429a      	cmp	r2, r3
 8009318:	d90c      	bls.n	8009334 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800931a:	4b65      	ldr	r3, [pc, #404]	; (80094b0 <HAL_RCC_ClockConfig+0x1b8>)
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	b2d2      	uxtb	r2, r2
 8009320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009322:	4b63      	ldr	r3, [pc, #396]	; (80094b0 <HAL_RCC_ClockConfig+0x1b8>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0307 	and.w	r3, r3, #7
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	429a      	cmp	r2, r3
 800932e:	d001      	beq.n	8009334 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e0b8      	b.n	80094a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0302 	and.w	r3, r3, #2
 800933c:	2b00      	cmp	r3, #0
 800933e:	d020      	beq.n	8009382 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0304 	and.w	r3, r3, #4
 8009348:	2b00      	cmp	r3, #0
 800934a:	d005      	beq.n	8009358 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800934c:	4b59      	ldr	r3, [pc, #356]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	4a58      	ldr	r2, [pc, #352]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009352:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009356:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0308 	and.w	r3, r3, #8
 8009360:	2b00      	cmp	r3, #0
 8009362:	d005      	beq.n	8009370 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009364:	4b53      	ldr	r3, [pc, #332]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	4a52      	ldr	r2, [pc, #328]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 800936a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800936e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009370:	4b50      	ldr	r3, [pc, #320]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	494d      	ldr	r1, [pc, #308]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 800937e:	4313      	orrs	r3, r2
 8009380:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	d044      	beq.n	8009418 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d107      	bne.n	80093a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009396:	4b47      	ldr	r3, [pc, #284]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d119      	bne.n	80093d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e07f      	b.n	80094a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d003      	beq.n	80093b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d107      	bne.n	80093c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093b6:	4b3f      	ldr	r3, [pc, #252]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d109      	bne.n	80093d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e06f      	b.n	80094a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093c6:	4b3b      	ldr	r3, [pc, #236]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e067      	b.n	80094a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80093d6:	4b37      	ldr	r3, [pc, #220]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	f023 0203 	bic.w	r2, r3, #3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	4934      	ldr	r1, [pc, #208]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80093e8:	f7fc fca0 	bl	8005d2c <HAL_GetTick>
 80093ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093ee:	e00a      	b.n	8009406 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093f0:	f7fc fc9c 	bl	8005d2c <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80093fe:	4293      	cmp	r3, r2
 8009400:	d901      	bls.n	8009406 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e04f      	b.n	80094a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009406:	4b2b      	ldr	r3, [pc, #172]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f003 020c 	and.w	r2, r3, #12
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	429a      	cmp	r2, r3
 8009416:	d1eb      	bne.n	80093f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009418:	4b25      	ldr	r3, [pc, #148]	; (80094b0 <HAL_RCC_ClockConfig+0x1b8>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	429a      	cmp	r2, r3
 8009424:	d20c      	bcs.n	8009440 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009426:	4b22      	ldr	r3, [pc, #136]	; (80094b0 <HAL_RCC_ClockConfig+0x1b8>)
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	b2d2      	uxtb	r2, r2
 800942c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800942e:	4b20      	ldr	r3, [pc, #128]	; (80094b0 <HAL_RCC_ClockConfig+0x1b8>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 0307 	and.w	r3, r3, #7
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	429a      	cmp	r2, r3
 800943a:	d001      	beq.n	8009440 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e032      	b.n	80094a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f003 0304 	and.w	r3, r3, #4
 8009448:	2b00      	cmp	r3, #0
 800944a:	d008      	beq.n	800945e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800944c:	4b19      	ldr	r3, [pc, #100]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	4916      	ldr	r1, [pc, #88]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 800945a:	4313      	orrs	r3, r2
 800945c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0308 	and.w	r3, r3, #8
 8009466:	2b00      	cmp	r3, #0
 8009468:	d009      	beq.n	800947e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800946a:	4b12      	ldr	r3, [pc, #72]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	490e      	ldr	r1, [pc, #56]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 800947a:	4313      	orrs	r3, r2
 800947c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800947e:	f000 f821 	bl	80094c4 <HAL_RCC_GetSysClockFreq>
 8009482:	4602      	mov	r2, r0
 8009484:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	091b      	lsrs	r3, r3, #4
 800948a:	f003 030f 	and.w	r3, r3, #15
 800948e:	490a      	ldr	r1, [pc, #40]	; (80094b8 <HAL_RCC_ClockConfig+0x1c0>)
 8009490:	5ccb      	ldrb	r3, [r1, r3]
 8009492:	fa22 f303 	lsr.w	r3, r2, r3
 8009496:	4a09      	ldr	r2, [pc, #36]	; (80094bc <HAL_RCC_ClockConfig+0x1c4>)
 8009498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800949a:	4b09      	ldr	r3, [pc, #36]	; (80094c0 <HAL_RCC_ClockConfig+0x1c8>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fc fc00 	bl	8005ca4 <HAL_InitTick>

  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	40023c00 	.word	0x40023c00
 80094b4:	40023800 	.word	0x40023800
 80094b8:	080175f0 	.word	0x080175f0
 80094bc:	20000004 	.word	0x20000004
 80094c0:	20000008 	.word	0x20000008

080094c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	607b      	str	r3, [r7, #4]
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	2300      	movs	r3, #0
 80094d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80094d8:	2300      	movs	r3, #0
 80094da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094dc:	4b67      	ldr	r3, [pc, #412]	; (800967c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	f003 030c 	and.w	r3, r3, #12
 80094e4:	2b08      	cmp	r3, #8
 80094e6:	d00d      	beq.n	8009504 <HAL_RCC_GetSysClockFreq+0x40>
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	f200 80bd 	bhi.w	8009668 <HAL_RCC_GetSysClockFreq+0x1a4>
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <HAL_RCC_GetSysClockFreq+0x34>
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	d003      	beq.n	80094fe <HAL_RCC_GetSysClockFreq+0x3a>
 80094f6:	e0b7      	b.n	8009668 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80094f8:	4b61      	ldr	r3, [pc, #388]	; (8009680 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80094fa:	60bb      	str	r3, [r7, #8]
       break;
 80094fc:	e0b7      	b.n	800966e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80094fe:	4b60      	ldr	r3, [pc, #384]	; (8009680 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009500:	60bb      	str	r3, [r7, #8]
      break;
 8009502:	e0b4      	b.n	800966e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009504:	4b5d      	ldr	r3, [pc, #372]	; (800967c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800950c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800950e:	4b5b      	ldr	r3, [pc, #364]	; (800967c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d04d      	beq.n	80095b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800951a:	4b58      	ldr	r3, [pc, #352]	; (800967c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	099b      	lsrs	r3, r3, #6
 8009520:	461a      	mov	r2, r3
 8009522:	f04f 0300 	mov.w	r3, #0
 8009526:	f240 10ff 	movw	r0, #511	; 0x1ff
 800952a:	f04f 0100 	mov.w	r1, #0
 800952e:	ea02 0800 	and.w	r8, r2, r0
 8009532:	ea03 0901 	and.w	r9, r3, r1
 8009536:	4640      	mov	r0, r8
 8009538:	4649      	mov	r1, r9
 800953a:	f04f 0200 	mov.w	r2, #0
 800953e:	f04f 0300 	mov.w	r3, #0
 8009542:	014b      	lsls	r3, r1, #5
 8009544:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009548:	0142      	lsls	r2, r0, #5
 800954a:	4610      	mov	r0, r2
 800954c:	4619      	mov	r1, r3
 800954e:	ebb0 0008 	subs.w	r0, r0, r8
 8009552:	eb61 0109 	sbc.w	r1, r1, r9
 8009556:	f04f 0200 	mov.w	r2, #0
 800955a:	f04f 0300 	mov.w	r3, #0
 800955e:	018b      	lsls	r3, r1, #6
 8009560:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009564:	0182      	lsls	r2, r0, #6
 8009566:	1a12      	subs	r2, r2, r0
 8009568:	eb63 0301 	sbc.w	r3, r3, r1
 800956c:	f04f 0000 	mov.w	r0, #0
 8009570:	f04f 0100 	mov.w	r1, #0
 8009574:	00d9      	lsls	r1, r3, #3
 8009576:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800957a:	00d0      	lsls	r0, r2, #3
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	eb12 0208 	adds.w	r2, r2, r8
 8009584:	eb43 0309 	adc.w	r3, r3, r9
 8009588:	f04f 0000 	mov.w	r0, #0
 800958c:	f04f 0100 	mov.w	r1, #0
 8009590:	0299      	lsls	r1, r3, #10
 8009592:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009596:	0290      	lsls	r0, r2, #10
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4610      	mov	r0, r2
 800959e:	4619      	mov	r1, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	461a      	mov	r2, r3
 80095a4:	f04f 0300 	mov.w	r3, #0
 80095a8:	f7f7 fb6e 	bl	8000c88 <__aeabi_uldivmod>
 80095ac:	4602      	mov	r2, r0
 80095ae:	460b      	mov	r3, r1
 80095b0:	4613      	mov	r3, r2
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	e04a      	b.n	800964c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095b6:	4b31      	ldr	r3, [pc, #196]	; (800967c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	099b      	lsrs	r3, r3, #6
 80095bc:	461a      	mov	r2, r3
 80095be:	f04f 0300 	mov.w	r3, #0
 80095c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80095c6:	f04f 0100 	mov.w	r1, #0
 80095ca:	ea02 0400 	and.w	r4, r2, r0
 80095ce:	ea03 0501 	and.w	r5, r3, r1
 80095d2:	4620      	mov	r0, r4
 80095d4:	4629      	mov	r1, r5
 80095d6:	f04f 0200 	mov.w	r2, #0
 80095da:	f04f 0300 	mov.w	r3, #0
 80095de:	014b      	lsls	r3, r1, #5
 80095e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80095e4:	0142      	lsls	r2, r0, #5
 80095e6:	4610      	mov	r0, r2
 80095e8:	4619      	mov	r1, r3
 80095ea:	1b00      	subs	r0, r0, r4
 80095ec:	eb61 0105 	sbc.w	r1, r1, r5
 80095f0:	f04f 0200 	mov.w	r2, #0
 80095f4:	f04f 0300 	mov.w	r3, #0
 80095f8:	018b      	lsls	r3, r1, #6
 80095fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80095fe:	0182      	lsls	r2, r0, #6
 8009600:	1a12      	subs	r2, r2, r0
 8009602:	eb63 0301 	sbc.w	r3, r3, r1
 8009606:	f04f 0000 	mov.w	r0, #0
 800960a:	f04f 0100 	mov.w	r1, #0
 800960e:	00d9      	lsls	r1, r3, #3
 8009610:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009614:	00d0      	lsls	r0, r2, #3
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	1912      	adds	r2, r2, r4
 800961c:	eb45 0303 	adc.w	r3, r5, r3
 8009620:	f04f 0000 	mov.w	r0, #0
 8009624:	f04f 0100 	mov.w	r1, #0
 8009628:	0299      	lsls	r1, r3, #10
 800962a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800962e:	0290      	lsls	r0, r2, #10
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	4610      	mov	r0, r2
 8009636:	4619      	mov	r1, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	461a      	mov	r2, r3
 800963c:	f04f 0300 	mov.w	r3, #0
 8009640:	f7f7 fb22 	bl	8000c88 <__aeabi_uldivmod>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4613      	mov	r3, r2
 800964a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800964c:	4b0b      	ldr	r3, [pc, #44]	; (800967c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	0c1b      	lsrs	r3, r3, #16
 8009652:	f003 0303 	and.w	r3, r3, #3
 8009656:	3301      	adds	r3, #1
 8009658:	005b      	lsls	r3, r3, #1
 800965a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	fbb2 f3f3 	udiv	r3, r2, r3
 8009664:	60bb      	str	r3, [r7, #8]
      break;
 8009666:	e002      	b.n	800966e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009668:	4b05      	ldr	r3, [pc, #20]	; (8009680 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800966a:	60bb      	str	r3, [r7, #8]
      break;
 800966c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800966e:	68bb      	ldr	r3, [r7, #8]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800967a:	bf00      	nop
 800967c:	40023800 	.word	0x40023800
 8009680:	00f42400 	.word	0x00f42400

08009684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009684:	b480      	push	{r7}
 8009686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009688:	4b03      	ldr	r3, [pc, #12]	; (8009698 <HAL_RCC_GetHCLKFreq+0x14>)
 800968a:	681b      	ldr	r3, [r3, #0]
}
 800968c:	4618      	mov	r0, r3
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	20000004 	.word	0x20000004

0800969c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80096a0:	f7ff fff0 	bl	8009684 <HAL_RCC_GetHCLKFreq>
 80096a4:	4602      	mov	r2, r0
 80096a6:	4b05      	ldr	r3, [pc, #20]	; (80096bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	0a9b      	lsrs	r3, r3, #10
 80096ac:	f003 0307 	and.w	r3, r3, #7
 80096b0:	4903      	ldr	r1, [pc, #12]	; (80096c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80096b2:	5ccb      	ldrb	r3, [r1, r3]
 80096b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	40023800 	.word	0x40023800
 80096c0:	08017600 	.word	0x08017600

080096c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80096c8:	f7ff ffdc 	bl	8009684 <HAL_RCC_GetHCLKFreq>
 80096cc:	4602      	mov	r2, r0
 80096ce:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	0b5b      	lsrs	r3, r3, #13
 80096d4:	f003 0307 	and.w	r3, r3, #7
 80096d8:	4903      	ldr	r1, [pc, #12]	; (80096e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096da:	5ccb      	ldrb	r3, [r1, r3]
 80096dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	40023800 	.word	0x40023800
 80096e8:	08017600 	.word	0x08017600

080096ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e07b      	b.n	80097f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009702:	2b00      	cmp	r3, #0
 8009704:	d108      	bne.n	8009718 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800970e:	d009      	beq.n	8009724 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	61da      	str	r2, [r3, #28]
 8009716:	e005      	b.n	8009724 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d106      	bne.n	8009744 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7f9 fb22 	bl	8002d88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2202      	movs	r2, #2
 8009748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800975a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800976c:	431a      	orrs	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009776:	431a      	orrs	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	691b      	ldr	r3, [r3, #16]
 800977c:	f003 0302 	and.w	r3, r3, #2
 8009780:	431a      	orrs	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	431a      	orrs	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699b      	ldr	r3, [r3, #24]
 8009790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009794:	431a      	orrs	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800979e:	431a      	orrs	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a8:	ea42 0103 	orr.w	r1, r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	430a      	orrs	r2, r1
 80097ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	0c1b      	lsrs	r3, r3, #16
 80097c2:	f003 0104 	and.w	r1, r3, #4
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ca:	f003 0210 	and.w	r2, r3, #16
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	430a      	orrs	r2, r1
 80097d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	69da      	ldr	r2, [r3, #28]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b08c      	sub	sp, #48	; 0x30
 8009802:	af00      	add	r7, sp, #0
 8009804:	60f8      	str	r0, [r7, #12]
 8009806:	60b9      	str	r1, [r7, #8]
 8009808:	607a      	str	r2, [r7, #4]
 800980a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800980c:	2301      	movs	r3, #1
 800980e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009810:	2300      	movs	r3, #0
 8009812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800981c:	2b01      	cmp	r3, #1
 800981e:	d101      	bne.n	8009824 <HAL_SPI_TransmitReceive+0x26>
 8009820:	2302      	movs	r3, #2
 8009822:	e18a      	b.n	8009b3a <HAL_SPI_TransmitReceive+0x33c>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800982c:	f7fc fa7e 	bl	8005d2c <HAL_GetTick>
 8009830:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009842:	887b      	ldrh	r3, [r7, #2]
 8009844:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009846:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800984a:	2b01      	cmp	r3, #1
 800984c:	d00f      	beq.n	800986e <HAL_SPI_TransmitReceive+0x70>
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009854:	d107      	bne.n	8009866 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d103      	bne.n	8009866 <HAL_SPI_TransmitReceive+0x68>
 800985e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009862:	2b04      	cmp	r3, #4
 8009864:	d003      	beq.n	800986e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009866:	2302      	movs	r3, #2
 8009868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800986c:	e15b      	b.n	8009b26 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d005      	beq.n	8009880 <HAL_SPI_TransmitReceive+0x82>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d002      	beq.n	8009880 <HAL_SPI_TransmitReceive+0x82>
 800987a:	887b      	ldrh	r3, [r7, #2]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d103      	bne.n	8009888 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009886:	e14e      	b.n	8009b26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b04      	cmp	r3, #4
 8009892:	d003      	beq.n	800989c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2205      	movs	r2, #5
 8009898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2200      	movs	r2, #0
 80098a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	887a      	ldrh	r2, [r7, #2]
 80098ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	887a      	ldrh	r2, [r7, #2]
 80098b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	887a      	ldrh	r2, [r7, #2]
 80098be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	887a      	ldrh	r2, [r7, #2]
 80098c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2200      	movs	r2, #0
 80098d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098dc:	2b40      	cmp	r3, #64	; 0x40
 80098de:	d007      	beq.n	80098f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098f8:	d178      	bne.n	80099ec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d002      	beq.n	8009908 <HAL_SPI_TransmitReceive+0x10a>
 8009902:	8b7b      	ldrh	r3, [r7, #26]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d166      	bne.n	80099d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990c:	881a      	ldrh	r2, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009918:	1c9a      	adds	r2, r3, #2
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009922:	b29b      	uxth	r3, r3
 8009924:	3b01      	subs	r3, #1
 8009926:	b29a      	uxth	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800992c:	e053      	b.n	80099d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b02      	cmp	r3, #2
 800993a:	d11b      	bne.n	8009974 <HAL_SPI_TransmitReceive+0x176>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009940:	b29b      	uxth	r3, r3
 8009942:	2b00      	cmp	r3, #0
 8009944:	d016      	beq.n	8009974 <HAL_SPI_TransmitReceive+0x176>
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	2b01      	cmp	r3, #1
 800994a:	d113      	bne.n	8009974 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009950:	881a      	ldrh	r2, [r3, #0]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995c:	1c9a      	adds	r2, r3, #2
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009966:	b29b      	uxth	r3, r3
 8009968:	3b01      	subs	r3, #1
 800996a:	b29a      	uxth	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009970:	2300      	movs	r3, #0
 8009972:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	2b01      	cmp	r3, #1
 8009980:	d119      	bne.n	80099b6 <HAL_SPI_TransmitReceive+0x1b8>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009986:	b29b      	uxth	r3, r3
 8009988:	2b00      	cmp	r3, #0
 800998a:	d014      	beq.n	80099b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009996:	b292      	uxth	r2, r2
 8009998:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999e:	1c9a      	adds	r2, r3, #2
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	3b01      	subs	r3, #1
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80099b2:	2301      	movs	r3, #1
 80099b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80099b6:	f7fc f9b9 	bl	8005d2c <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d807      	bhi.n	80099d6 <HAL_SPI_TransmitReceive+0x1d8>
 80099c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099cc:	d003      	beq.n	80099d6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80099d4:	e0a7      	b.n	8009b26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099da:	b29b      	uxth	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1a6      	bne.n	800992e <HAL_SPI_TransmitReceive+0x130>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1a1      	bne.n	800992e <HAL_SPI_TransmitReceive+0x130>
 80099ea:	e07c      	b.n	8009ae6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <HAL_SPI_TransmitReceive+0x1fc>
 80099f4:	8b7b      	ldrh	r3, [r7, #26]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d16b      	bne.n	8009ad2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	330c      	adds	r3, #12
 8009a04:	7812      	ldrb	r2, [r2, #0]
 8009a06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a0c:	1c5a      	adds	r2, r3, #1
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a20:	e057      	b.n	8009ad2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f003 0302 	and.w	r3, r3, #2
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d11c      	bne.n	8009a6a <HAL_SPI_TransmitReceive+0x26c>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d017      	beq.n	8009a6a <HAL_SPI_TransmitReceive+0x26c>
 8009a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d114      	bne.n	8009a6a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	330c      	adds	r3, #12
 8009a4a:	7812      	ldrb	r2, [r2, #0]
 8009a4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a66:	2300      	movs	r3, #0
 8009a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d119      	bne.n	8009aac <HAL_SPI_TransmitReceive+0x2ae>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d014      	beq.n	8009aac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68da      	ldr	r2, [r3, #12]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8c:	b2d2      	uxtb	r2, r2
 8009a8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a94:	1c5a      	adds	r2, r3, #1
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	3b01      	subs	r3, #1
 8009aa2:	b29a      	uxth	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009aac:	f7fc f93e 	bl	8005d2c <HAL_GetTick>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d803      	bhi.n	8009ac4 <HAL_SPI_TransmitReceive+0x2c6>
 8009abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac2:	d102      	bne.n	8009aca <HAL_SPI_TransmitReceive+0x2cc>
 8009ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d103      	bne.n	8009ad2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009ad0:	e029      	b.n	8009b26 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1a2      	bne.n	8009a22 <HAL_SPI_TransmitReceive+0x224>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d19d      	bne.n	8009a22 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ae8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f000 f8b2 	bl	8009c54 <SPI_EndRxTxTransaction>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d006      	beq.n	8009b04 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2220      	movs	r2, #32
 8009b00:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009b02:	e010      	b.n	8009b26 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10b      	bne.n	8009b24 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	617b      	str	r3, [r7, #20]
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	e000      	b.n	8009b26 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009b24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009b36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3730      	adds	r7, #48	; 0x30
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
	...

08009b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b088      	sub	sp, #32
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	4613      	mov	r3, r2
 8009b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b54:	f7fc f8ea 	bl	8005d2c <HAL_GetTick>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	1a9b      	subs	r3, r3, r2
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	4413      	add	r3, r2
 8009b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b64:	f7fc f8e2 	bl	8005d2c <HAL_GetTick>
 8009b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b6a:	4b39      	ldr	r3, [pc, #228]	; (8009c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	015b      	lsls	r3, r3, #5
 8009b70:	0d1b      	lsrs	r3, r3, #20
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	fb02 f303 	mul.w	r3, r2, r3
 8009b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b7a:	e054      	b.n	8009c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b82:	d050      	beq.n	8009c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b84:	f7fc f8d2 	bl	8005d2c <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d902      	bls.n	8009b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d13d      	bne.n	8009c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bb2:	d111      	bne.n	8009bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bbc:	d004      	beq.n	8009bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc6:	d107      	bne.n	8009bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009be0:	d10f      	bne.n	8009c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e017      	b.n	8009c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d101      	bne.n	8009c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	bf0c      	ite	eq
 8009c36:	2301      	moveq	r3, #1
 8009c38:	2300      	movne	r3, #0
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d19b      	bne.n	8009b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3720      	adds	r7, #32
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000004 	.word	0x20000004

08009c54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b088      	sub	sp, #32
 8009c58:	af02      	add	r7, sp, #8
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c60:	4b1b      	ldr	r3, [pc, #108]	; (8009cd0 <SPI_EndRxTxTransaction+0x7c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a1b      	ldr	r2, [pc, #108]	; (8009cd4 <SPI_EndRxTxTransaction+0x80>)
 8009c66:	fba2 2303 	umull	r2, r3, r2, r3
 8009c6a:	0d5b      	lsrs	r3, r3, #21
 8009c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c70:	fb02 f303 	mul.w	r3, r2, r3
 8009c74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c7e:	d112      	bne.n	8009ca6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2200      	movs	r2, #0
 8009c88:	2180      	movs	r1, #128	; 0x80
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f7ff ff5a 	bl	8009b44 <SPI_WaitFlagStateUntilTimeout>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d016      	beq.n	8009cc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c9a:	f043 0220 	orr.w	r2, r3, #32
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e00f      	b.n	8009cc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d00a      	beq.n	8009cc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	3b01      	subs	r3, #1
 8009cb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cbc:	2b80      	cmp	r3, #128	; 0x80
 8009cbe:	d0f2      	beq.n	8009ca6 <SPI_EndRxTxTransaction+0x52>
 8009cc0:	e000      	b.n	8009cc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8009cc2:	bf00      	nop
  }

  return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000004 	.word	0x20000004
 8009cd4:	165e9f81 	.word	0x165e9f81

08009cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e041      	b.n	8009d6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d106      	bne.n	8009d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7f9 fb7e 	bl	8003400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2202      	movs	r2, #2
 8009d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3304      	adds	r3, #4
 8009d14:	4619      	mov	r1, r3
 8009d16:	4610      	mov	r0, r2
 8009d18:	f000 fac6 	bl	800a2a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b082      	sub	sp, #8
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e041      	b.n	8009e0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d106      	bne.n	8009da2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7f9 faf9 	bl	8003394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2202      	movs	r2, #2
 8009da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	3304      	adds	r3, #4
 8009db2:	4619      	mov	r1, r3
 8009db4:	4610      	mov	r0, r2
 8009db6:	f000 fa77 	bl	800a2a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2201      	movs	r2, #1
 8009de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d109      	bne.n	8009e38 <HAL_TIM_PWM_Start+0x24>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	bf14      	ite	ne
 8009e30:	2301      	movne	r3, #1
 8009e32:	2300      	moveq	r3, #0
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	e022      	b.n	8009e7e <HAL_TIM_PWM_Start+0x6a>
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	2b04      	cmp	r3, #4
 8009e3c:	d109      	bne.n	8009e52 <HAL_TIM_PWM_Start+0x3e>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	bf14      	ite	ne
 8009e4a:	2301      	movne	r3, #1
 8009e4c:	2300      	moveq	r3, #0
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	e015      	b.n	8009e7e <HAL_TIM_PWM_Start+0x6a>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b08      	cmp	r3, #8
 8009e56:	d109      	bne.n	8009e6c <HAL_TIM_PWM_Start+0x58>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	bf14      	ite	ne
 8009e64:	2301      	movne	r3, #1
 8009e66:	2300      	moveq	r3, #0
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	e008      	b.n	8009e7e <HAL_TIM_PWM_Start+0x6a>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	bf14      	ite	ne
 8009e78:	2301      	movne	r3, #1
 8009e7a:	2300      	moveq	r3, #0
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e07c      	b.n	8009f80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d104      	bne.n	8009e96 <HAL_TIM_PWM_Start+0x82>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e94:	e013      	b.n	8009ebe <HAL_TIM_PWM_Start+0xaa>
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b04      	cmp	r3, #4
 8009e9a:	d104      	bne.n	8009ea6 <HAL_TIM_PWM_Start+0x92>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ea4:	e00b      	b.n	8009ebe <HAL_TIM_PWM_Start+0xaa>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2b08      	cmp	r3, #8
 8009eaa:	d104      	bne.n	8009eb6 <HAL_TIM_PWM_Start+0xa2>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009eb4:	e003      	b.n	8009ebe <HAL_TIM_PWM_Start+0xaa>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2202      	movs	r2, #2
 8009eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 fcd8 	bl	800a87c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a2d      	ldr	r2, [pc, #180]	; (8009f88 <HAL_TIM_PWM_Start+0x174>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d004      	beq.n	8009ee0 <HAL_TIM_PWM_Start+0xcc>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a2c      	ldr	r2, [pc, #176]	; (8009f8c <HAL_TIM_PWM_Start+0x178>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d101      	bne.n	8009ee4 <HAL_TIM_PWM_Start+0xd0>
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e000      	b.n	8009ee6 <HAL_TIM_PWM_Start+0xd2>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d007      	beq.n	8009efa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ef8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a22      	ldr	r2, [pc, #136]	; (8009f88 <HAL_TIM_PWM_Start+0x174>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d022      	beq.n	8009f4a <HAL_TIM_PWM_Start+0x136>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f0c:	d01d      	beq.n	8009f4a <HAL_TIM_PWM_Start+0x136>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a1f      	ldr	r2, [pc, #124]	; (8009f90 <HAL_TIM_PWM_Start+0x17c>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d018      	beq.n	8009f4a <HAL_TIM_PWM_Start+0x136>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a1d      	ldr	r2, [pc, #116]	; (8009f94 <HAL_TIM_PWM_Start+0x180>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d013      	beq.n	8009f4a <HAL_TIM_PWM_Start+0x136>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a1c      	ldr	r2, [pc, #112]	; (8009f98 <HAL_TIM_PWM_Start+0x184>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d00e      	beq.n	8009f4a <HAL_TIM_PWM_Start+0x136>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a16      	ldr	r2, [pc, #88]	; (8009f8c <HAL_TIM_PWM_Start+0x178>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d009      	beq.n	8009f4a <HAL_TIM_PWM_Start+0x136>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a18      	ldr	r2, [pc, #96]	; (8009f9c <HAL_TIM_PWM_Start+0x188>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d004      	beq.n	8009f4a <HAL_TIM_PWM_Start+0x136>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a16      	ldr	r2, [pc, #88]	; (8009fa0 <HAL_TIM_PWM_Start+0x18c>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d111      	bne.n	8009f6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	f003 0307 	and.w	r3, r3, #7
 8009f54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b06      	cmp	r3, #6
 8009f5a:	d010      	beq.n	8009f7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0201 	orr.w	r2, r2, #1
 8009f6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f6c:	e007      	b.n	8009f7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f042 0201 	orr.w	r2, r2, #1
 8009f7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	40010000 	.word	0x40010000
 8009f8c:	40010400 	.word	0x40010400
 8009f90:	40000400 	.word	0x40000400
 8009f94:	40000800 	.word	0x40000800
 8009f98:	40000c00 	.word	0x40000c00
 8009f9c:	40014000 	.word	0x40014000
 8009fa0:	40001800 	.word	0x40001800

08009fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d101      	bne.n	8009fbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009fba:	2302      	movs	r3, #2
 8009fbc:	e0ac      	b.n	800a118 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b0c      	cmp	r3, #12
 8009fca:	f200 809f 	bhi.w	800a10c <HAL_TIM_PWM_ConfigChannel+0x168>
 8009fce:	a201      	add	r2, pc, #4	; (adr r2, 8009fd4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd4:	0800a009 	.word	0x0800a009
 8009fd8:	0800a10d 	.word	0x0800a10d
 8009fdc:	0800a10d 	.word	0x0800a10d
 8009fe0:	0800a10d 	.word	0x0800a10d
 8009fe4:	0800a049 	.word	0x0800a049
 8009fe8:	0800a10d 	.word	0x0800a10d
 8009fec:	0800a10d 	.word	0x0800a10d
 8009ff0:	0800a10d 	.word	0x0800a10d
 8009ff4:	0800a08b 	.word	0x0800a08b
 8009ff8:	0800a10d 	.word	0x0800a10d
 8009ffc:	0800a10d 	.word	0x0800a10d
 800a000:	0800a10d 	.word	0x0800a10d
 800a004:	0800a0cb 	.word	0x0800a0cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68b9      	ldr	r1, [r7, #8]
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 f9ea 	bl	800a3e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	699a      	ldr	r2, [r3, #24]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f042 0208 	orr.w	r2, r2, #8
 800a022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	699a      	ldr	r2, [r3, #24]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f022 0204 	bic.w	r2, r2, #4
 800a032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6999      	ldr	r1, [r3, #24]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	691a      	ldr	r2, [r3, #16]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	430a      	orrs	r2, r1
 800a044:	619a      	str	r2, [r3, #24]
      break;
 800a046:	e062      	b.n	800a10e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68b9      	ldr	r1, [r7, #8]
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 fa3a 	bl	800a4c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	699a      	ldr	r2, [r3, #24]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6999      	ldr	r1, [r3, #24]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	021a      	lsls	r2, r3, #8
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	430a      	orrs	r2, r1
 800a086:	619a      	str	r2, [r3, #24]
      break;
 800a088:	e041      	b.n	800a10e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68b9      	ldr	r1, [r7, #8]
 800a090:	4618      	mov	r0, r3
 800a092:	f000 fa8f 	bl	800a5b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	69da      	ldr	r2, [r3, #28]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f042 0208 	orr.w	r2, r2, #8
 800a0a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	69da      	ldr	r2, [r3, #28]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 0204 	bic.w	r2, r2, #4
 800a0b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	69d9      	ldr	r1, [r3, #28]
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	691a      	ldr	r2, [r3, #16]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	61da      	str	r2, [r3, #28]
      break;
 800a0c8:	e021      	b.n	800a10e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fae3 	bl	800a69c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69da      	ldr	r2, [r3, #28]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69da      	ldr	r2, [r3, #28]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	69d9      	ldr	r1, [r3, #28]
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	021a      	lsls	r2, r3, #8
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	430a      	orrs	r2, r1
 800a108:	61da      	str	r2, [r3, #28]
      break;
 800a10a:	e000      	b.n	800a10e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800a10c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a130:	2b01      	cmp	r3, #1
 800a132:	d101      	bne.n	800a138 <HAL_TIM_ConfigClockSource+0x18>
 800a134:	2302      	movs	r3, #2
 800a136:	e0b3      	b.n	800a2a0 <HAL_TIM_ConfigClockSource+0x180>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2202      	movs	r2, #2
 800a144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a156:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a15e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a170:	d03e      	beq.n	800a1f0 <HAL_TIM_ConfigClockSource+0xd0>
 800a172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a176:	f200 8087 	bhi.w	800a288 <HAL_TIM_ConfigClockSource+0x168>
 800a17a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a17e:	f000 8085 	beq.w	800a28c <HAL_TIM_ConfigClockSource+0x16c>
 800a182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a186:	d87f      	bhi.n	800a288 <HAL_TIM_ConfigClockSource+0x168>
 800a188:	2b70      	cmp	r3, #112	; 0x70
 800a18a:	d01a      	beq.n	800a1c2 <HAL_TIM_ConfigClockSource+0xa2>
 800a18c:	2b70      	cmp	r3, #112	; 0x70
 800a18e:	d87b      	bhi.n	800a288 <HAL_TIM_ConfigClockSource+0x168>
 800a190:	2b60      	cmp	r3, #96	; 0x60
 800a192:	d050      	beq.n	800a236 <HAL_TIM_ConfigClockSource+0x116>
 800a194:	2b60      	cmp	r3, #96	; 0x60
 800a196:	d877      	bhi.n	800a288 <HAL_TIM_ConfigClockSource+0x168>
 800a198:	2b50      	cmp	r3, #80	; 0x50
 800a19a:	d03c      	beq.n	800a216 <HAL_TIM_ConfigClockSource+0xf6>
 800a19c:	2b50      	cmp	r3, #80	; 0x50
 800a19e:	d873      	bhi.n	800a288 <HAL_TIM_ConfigClockSource+0x168>
 800a1a0:	2b40      	cmp	r3, #64	; 0x40
 800a1a2:	d058      	beq.n	800a256 <HAL_TIM_ConfigClockSource+0x136>
 800a1a4:	2b40      	cmp	r3, #64	; 0x40
 800a1a6:	d86f      	bhi.n	800a288 <HAL_TIM_ConfigClockSource+0x168>
 800a1a8:	2b30      	cmp	r3, #48	; 0x30
 800a1aa:	d064      	beq.n	800a276 <HAL_TIM_ConfigClockSource+0x156>
 800a1ac:	2b30      	cmp	r3, #48	; 0x30
 800a1ae:	d86b      	bhi.n	800a288 <HAL_TIM_ConfigClockSource+0x168>
 800a1b0:	2b20      	cmp	r3, #32
 800a1b2:	d060      	beq.n	800a276 <HAL_TIM_ConfigClockSource+0x156>
 800a1b4:	2b20      	cmp	r3, #32
 800a1b6:	d867      	bhi.n	800a288 <HAL_TIM_ConfigClockSource+0x168>
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d05c      	beq.n	800a276 <HAL_TIM_ConfigClockSource+0x156>
 800a1bc:	2b10      	cmp	r3, #16
 800a1be:	d05a      	beq.n	800a276 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a1c0:	e062      	b.n	800a288 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6818      	ldr	r0, [r3, #0]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	6899      	ldr	r1, [r3, #8]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	f000 fb33 	bl	800a83c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	609a      	str	r2, [r3, #8]
      break;
 800a1ee:	e04e      	b.n	800a28e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6818      	ldr	r0, [r3, #0]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	6899      	ldr	r1, [r3, #8]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	f000 fb1c 	bl	800a83c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689a      	ldr	r2, [r3, #8]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a212:	609a      	str	r2, [r3, #8]
      break;
 800a214:	e03b      	b.n	800a28e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6818      	ldr	r0, [r3, #0]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	6859      	ldr	r1, [r3, #4]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	461a      	mov	r2, r3
 800a224:	f000 fa90 	bl	800a748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2150      	movs	r1, #80	; 0x50
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 fae9 	bl	800a806 <TIM_ITRx_SetConfig>
      break;
 800a234:	e02b      	b.n	800a28e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6818      	ldr	r0, [r3, #0]
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	6859      	ldr	r1, [r3, #4]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	461a      	mov	r2, r3
 800a244:	f000 faaf 	bl	800a7a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2160      	movs	r1, #96	; 0x60
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 fad9 	bl	800a806 <TIM_ITRx_SetConfig>
      break;
 800a254:	e01b      	b.n	800a28e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	6859      	ldr	r1, [r3, #4]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	461a      	mov	r2, r3
 800a264:	f000 fa70 	bl	800a748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2140      	movs	r1, #64	; 0x40
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 fac9 	bl	800a806 <TIM_ITRx_SetConfig>
      break;
 800a274:	e00b      	b.n	800a28e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4619      	mov	r1, r3
 800a280:	4610      	mov	r0, r2
 800a282:	f000 fac0 	bl	800a806 <TIM_ITRx_SetConfig>
        break;
 800a286:	e002      	b.n	800a28e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a288:	bf00      	nop
 800a28a:	e000      	b.n	800a28e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a28c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a40      	ldr	r2, [pc, #256]	; (800a3bc <TIM_Base_SetConfig+0x114>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d013      	beq.n	800a2e8 <TIM_Base_SetConfig+0x40>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2c6:	d00f      	beq.n	800a2e8 <TIM_Base_SetConfig+0x40>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a3d      	ldr	r2, [pc, #244]	; (800a3c0 <TIM_Base_SetConfig+0x118>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d00b      	beq.n	800a2e8 <TIM_Base_SetConfig+0x40>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a3c      	ldr	r2, [pc, #240]	; (800a3c4 <TIM_Base_SetConfig+0x11c>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d007      	beq.n	800a2e8 <TIM_Base_SetConfig+0x40>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a3b      	ldr	r2, [pc, #236]	; (800a3c8 <TIM_Base_SetConfig+0x120>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d003      	beq.n	800a2e8 <TIM_Base_SetConfig+0x40>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a3a      	ldr	r2, [pc, #232]	; (800a3cc <TIM_Base_SetConfig+0x124>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d108      	bne.n	800a2fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a2f      	ldr	r2, [pc, #188]	; (800a3bc <TIM_Base_SetConfig+0x114>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d02b      	beq.n	800a35a <TIM_Base_SetConfig+0xb2>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a308:	d027      	beq.n	800a35a <TIM_Base_SetConfig+0xb2>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a2c      	ldr	r2, [pc, #176]	; (800a3c0 <TIM_Base_SetConfig+0x118>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d023      	beq.n	800a35a <TIM_Base_SetConfig+0xb2>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a2b      	ldr	r2, [pc, #172]	; (800a3c4 <TIM_Base_SetConfig+0x11c>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d01f      	beq.n	800a35a <TIM_Base_SetConfig+0xb2>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a2a      	ldr	r2, [pc, #168]	; (800a3c8 <TIM_Base_SetConfig+0x120>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d01b      	beq.n	800a35a <TIM_Base_SetConfig+0xb2>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a29      	ldr	r2, [pc, #164]	; (800a3cc <TIM_Base_SetConfig+0x124>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d017      	beq.n	800a35a <TIM_Base_SetConfig+0xb2>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a28      	ldr	r2, [pc, #160]	; (800a3d0 <TIM_Base_SetConfig+0x128>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d013      	beq.n	800a35a <TIM_Base_SetConfig+0xb2>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a27      	ldr	r2, [pc, #156]	; (800a3d4 <TIM_Base_SetConfig+0x12c>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d00f      	beq.n	800a35a <TIM_Base_SetConfig+0xb2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a26      	ldr	r2, [pc, #152]	; (800a3d8 <TIM_Base_SetConfig+0x130>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d00b      	beq.n	800a35a <TIM_Base_SetConfig+0xb2>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a25      	ldr	r2, [pc, #148]	; (800a3dc <TIM_Base_SetConfig+0x134>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d007      	beq.n	800a35a <TIM_Base_SetConfig+0xb2>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a24      	ldr	r2, [pc, #144]	; (800a3e0 <TIM_Base_SetConfig+0x138>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d003      	beq.n	800a35a <TIM_Base_SetConfig+0xb2>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a23      	ldr	r2, [pc, #140]	; (800a3e4 <TIM_Base_SetConfig+0x13c>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d108      	bne.n	800a36c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	4313      	orrs	r3, r2
 800a36a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	695b      	ldr	r3, [r3, #20]
 800a376:	4313      	orrs	r3, r2
 800a378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	689a      	ldr	r2, [r3, #8]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a0a      	ldr	r2, [pc, #40]	; (800a3bc <TIM_Base_SetConfig+0x114>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d003      	beq.n	800a3a0 <TIM_Base_SetConfig+0xf8>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a0c      	ldr	r2, [pc, #48]	; (800a3cc <TIM_Base_SetConfig+0x124>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d103      	bne.n	800a3a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	691a      	ldr	r2, [r3, #16]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	615a      	str	r2, [r3, #20]
}
 800a3ae:	bf00      	nop
 800a3b0:	3714      	adds	r7, #20
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	40010000 	.word	0x40010000
 800a3c0:	40000400 	.word	0x40000400
 800a3c4:	40000800 	.word	0x40000800
 800a3c8:	40000c00 	.word	0x40000c00
 800a3cc:	40010400 	.word	0x40010400
 800a3d0:	40014000 	.word	0x40014000
 800a3d4:	40014400 	.word	0x40014400
 800a3d8:	40014800 	.word	0x40014800
 800a3dc:	40001800 	.word	0x40001800
 800a3e0:	40001c00 	.word	0x40001c00
 800a3e4:	40002000 	.word	0x40002000

0800a3e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	f023 0201 	bic.w	r2, r3, #1
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f023 0303 	bic.w	r3, r3, #3
 800a41e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	4313      	orrs	r3, r2
 800a428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	f023 0302 	bic.w	r3, r3, #2
 800a430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	4313      	orrs	r3, r2
 800a43a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	4a20      	ldr	r2, [pc, #128]	; (800a4c0 <TIM_OC1_SetConfig+0xd8>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d003      	beq.n	800a44c <TIM_OC1_SetConfig+0x64>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a1f      	ldr	r2, [pc, #124]	; (800a4c4 <TIM_OC1_SetConfig+0xdc>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d10c      	bne.n	800a466 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	f023 0308 	bic.w	r3, r3, #8
 800a452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f023 0304 	bic.w	r3, r3, #4
 800a464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	4a15      	ldr	r2, [pc, #84]	; (800a4c0 <TIM_OC1_SetConfig+0xd8>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d003      	beq.n	800a476 <TIM_OC1_SetConfig+0x8e>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a14      	ldr	r2, [pc, #80]	; (800a4c4 <TIM_OC1_SetConfig+0xdc>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d111      	bne.n	800a49a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a47c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	695b      	ldr	r3, [r3, #20]
 800a48a:	693a      	ldr	r2, [r7, #16]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	4313      	orrs	r3, r2
 800a498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	685a      	ldr	r2, [r3, #4]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	621a      	str	r2, [r3, #32]
}
 800a4b4:	bf00      	nop
 800a4b6:	371c      	adds	r7, #28
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	40010000 	.word	0x40010000
 800a4c4:	40010400 	.word	0x40010400

0800a4c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a1b      	ldr	r3, [r3, #32]
 800a4d6:	f023 0210 	bic.w	r2, r3, #16
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	021b      	lsls	r3, r3, #8
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	4313      	orrs	r3, r2
 800a50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	f023 0320 	bic.w	r3, r3, #32
 800a512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	011b      	lsls	r3, r3, #4
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a22      	ldr	r2, [pc, #136]	; (800a5ac <TIM_OC2_SetConfig+0xe4>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d003      	beq.n	800a530 <TIM_OC2_SetConfig+0x68>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a21      	ldr	r2, [pc, #132]	; (800a5b0 <TIM_OC2_SetConfig+0xe8>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d10d      	bne.n	800a54c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	011b      	lsls	r3, r3, #4
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	4313      	orrs	r3, r2
 800a542:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a54a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a17      	ldr	r2, [pc, #92]	; (800a5ac <TIM_OC2_SetConfig+0xe4>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d003      	beq.n	800a55c <TIM_OC2_SetConfig+0x94>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a16      	ldr	r2, [pc, #88]	; (800a5b0 <TIM_OC2_SetConfig+0xe8>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d113      	bne.n	800a584 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a562:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a56a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	695b      	ldr	r3, [r3, #20]
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	693a      	ldr	r2, [r7, #16]
 800a574:	4313      	orrs	r3, r2
 800a576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	4313      	orrs	r3, r2
 800a582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	697a      	ldr	r2, [r7, #20]
 800a59c:	621a      	str	r2, [r3, #32]
}
 800a59e:	bf00      	nop
 800a5a0:	371c      	adds	r7, #28
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	40010000 	.word	0x40010000
 800a5b0:	40010400 	.word	0x40010400

0800a5b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a1b      	ldr	r3, [r3, #32]
 800a5c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a1b      	ldr	r3, [r3, #32]
 800a5ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f023 0303 	bic.w	r3, r3, #3
 800a5ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	021b      	lsls	r3, r3, #8
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	4313      	orrs	r3, r2
 800a608:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a21      	ldr	r2, [pc, #132]	; (800a694 <TIM_OC3_SetConfig+0xe0>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d003      	beq.n	800a61a <TIM_OC3_SetConfig+0x66>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4a20      	ldr	r2, [pc, #128]	; (800a698 <TIM_OC3_SetConfig+0xe4>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d10d      	bne.n	800a636 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	021b      	lsls	r3, r3, #8
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a16      	ldr	r2, [pc, #88]	; (800a694 <TIM_OC3_SetConfig+0xe0>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d003      	beq.n	800a646 <TIM_OC3_SetConfig+0x92>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a15      	ldr	r2, [pc, #84]	; (800a698 <TIM_OC3_SetConfig+0xe4>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d113      	bne.n	800a66e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a64c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	011b      	lsls	r3, r3, #4
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	4313      	orrs	r3, r2
 800a660:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	011b      	lsls	r3, r3, #4
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	621a      	str	r2, [r3, #32]
}
 800a688:	bf00      	nop
 800a68a:	371c      	adds	r7, #28
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	40010000 	.word	0x40010000
 800a698:	40010400 	.word	0x40010400

0800a69c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	021b      	lsls	r3, r3, #8
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	031b      	lsls	r3, r3, #12
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a12      	ldr	r2, [pc, #72]	; (800a740 <TIM_OC4_SetConfig+0xa4>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d003      	beq.n	800a704 <TIM_OC4_SetConfig+0x68>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a11      	ldr	r2, [pc, #68]	; (800a744 <TIM_OC4_SetConfig+0xa8>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d109      	bne.n	800a718 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a70a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	019b      	lsls	r3, r3, #6
 800a712:	697a      	ldr	r2, [r7, #20]
 800a714:	4313      	orrs	r3, r2
 800a716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	621a      	str	r2, [r3, #32]
}
 800a732:	bf00      	nop
 800a734:	371c      	adds	r7, #28
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	40010000 	.word	0x40010000
 800a744:	40010400 	.word	0x40010400

0800a748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6a1b      	ldr	r3, [r3, #32]
 800a758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6a1b      	ldr	r3, [r3, #32]
 800a75e:	f023 0201 	bic.w	r2, r3, #1
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	011b      	lsls	r3, r3, #4
 800a778:	693a      	ldr	r2, [r7, #16]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	f023 030a 	bic.w	r3, r3, #10
 800a784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	621a      	str	r2, [r3, #32]
}
 800a79a:	bf00      	nop
 800a79c:	371c      	adds	r7, #28
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7a6:	b480      	push	{r7}
 800a7a8:	b087      	sub	sp, #28
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	60f8      	str	r0, [r7, #12]
 800a7ae:	60b9      	str	r1, [r7, #8]
 800a7b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	f023 0210 	bic.w	r2, r3, #16
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6a1b      	ldr	r3, [r3, #32]
 800a7c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	031b      	lsls	r3, r3, #12
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	011b      	lsls	r3, r3, #4
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	693a      	ldr	r2, [r7, #16]
 800a7f8:	621a      	str	r2, [r3, #32]
}
 800a7fa:	bf00      	nop
 800a7fc:	371c      	adds	r7, #28
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a806:	b480      	push	{r7}
 800a808:	b085      	sub	sp, #20
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a81c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4313      	orrs	r3, r2
 800a824:	f043 0307 	orr.w	r3, r3, #7
 800a828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	609a      	str	r2, [r3, #8]
}
 800a830:	bf00      	nop
 800a832:	3714      	adds	r7, #20
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b087      	sub	sp, #28
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
 800a848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	021a      	lsls	r2, r3, #8
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	431a      	orrs	r2, r3
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	4313      	orrs	r3, r2
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	4313      	orrs	r3, r2
 800a868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	609a      	str	r2, [r3, #8]
}
 800a870:	bf00      	nop
 800a872:	371c      	adds	r7, #28
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b087      	sub	sp, #28
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	f003 031f 	and.w	r3, r3, #31
 800a88e:	2201      	movs	r2, #1
 800a890:	fa02 f303 	lsl.w	r3, r2, r3
 800a894:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6a1a      	ldr	r2, [r3, #32]
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	43db      	mvns	r3, r3
 800a89e:	401a      	ands	r2, r3
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6a1a      	ldr	r2, [r3, #32]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f003 031f 	and.w	r3, r3, #31
 800a8ae:	6879      	ldr	r1, [r7, #4]
 800a8b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a8b4:	431a      	orrs	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	621a      	str	r2, [r3, #32]
}
 800a8ba:	bf00      	nop
 800a8bc:	371c      	adds	r7, #28
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
	...

0800a8c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d101      	bne.n	800a8e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8dc:	2302      	movs	r3, #2
 800a8de:	e05a      	b.n	800a996 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	4313      	orrs	r3, r2
 800a910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a21      	ldr	r2, [pc, #132]	; (800a9a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d022      	beq.n	800a96a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a92c:	d01d      	beq.n	800a96a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a1d      	ldr	r2, [pc, #116]	; (800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d018      	beq.n	800a96a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a1b      	ldr	r2, [pc, #108]	; (800a9ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d013      	beq.n	800a96a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a1a      	ldr	r2, [pc, #104]	; (800a9b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d00e      	beq.n	800a96a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a18      	ldr	r2, [pc, #96]	; (800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d009      	beq.n	800a96a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a17      	ldr	r2, [pc, #92]	; (800a9b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d004      	beq.n	800a96a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a15      	ldr	r2, [pc, #84]	; (800a9bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d10c      	bne.n	800a984 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	4313      	orrs	r3, r2
 800a97a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	40010000 	.word	0x40010000
 800a9a8:	40000400 	.word	0x40000400
 800a9ac:	40000800 	.word	0x40000800
 800a9b0:	40000c00 	.word	0x40000c00
 800a9b4:	40010400 	.word	0x40010400
 800a9b8:	40014000 	.word	0x40014000
 800a9bc:	40001800 	.word	0x40001800

0800a9c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e03f      	b.n	800aa52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d106      	bne.n	800a9ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f7f8 fea4 	bl	8003734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2224      	movs	r2, #36	; 0x24
 800a9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68da      	ldr	r2, [r3, #12]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 fc7b 	bl	800b300 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	691a      	ldr	r2, [r3, #16]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	695a      	ldr	r2, [r3, #20]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68da      	ldr	r2, [r3, #12]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b08a      	sub	sp, #40	; 0x28
 800aa5e:	af02      	add	r7, sp, #8
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	60b9      	str	r1, [r7, #8]
 800aa64:	603b      	str	r3, [r7, #0]
 800aa66:	4613      	mov	r3, r2
 800aa68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b20      	cmp	r3, #32
 800aa78:	d17c      	bne.n	800ab74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <HAL_UART_Transmit+0x2c>
 800aa80:	88fb      	ldrh	r3, [r7, #6]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	e075      	b.n	800ab76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d101      	bne.n	800aa98 <HAL_UART_Transmit+0x3e>
 800aa94:	2302      	movs	r3, #2
 800aa96:	e06e      	b.n	800ab76 <HAL_UART_Transmit+0x11c>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2221      	movs	r2, #33	; 0x21
 800aaaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aaae:	f7fb f93d 	bl	8005d2c <HAL_GetTick>
 800aab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	88fa      	ldrh	r2, [r7, #6]
 800aab8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	88fa      	ldrh	r2, [r7, #6]
 800aabe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aac8:	d108      	bne.n	800aadc <HAL_UART_Transmit+0x82>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d104      	bne.n	800aadc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800aad2:	2300      	movs	r3, #0
 800aad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	61bb      	str	r3, [r7, #24]
 800aada:	e003      	b.n	800aae4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aae0:	2300      	movs	r3, #0
 800aae2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800aaec:	e02a      	b.n	800ab44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	2180      	movs	r1, #128	; 0x80
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 fa3d 	bl	800af78 <UART_WaitOnFlagUntilTimeout>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e036      	b.n	800ab76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d10b      	bne.n	800ab26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	461a      	mov	r2, r3
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	3302      	adds	r3, #2
 800ab22:	61bb      	str	r3, [r7, #24]
 800ab24:	e007      	b.n	800ab36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	781a      	ldrb	r2, [r3, #0]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	3301      	adds	r3, #1
 800ab34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1cf      	bne.n	800aaee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2200      	movs	r2, #0
 800ab56:	2140      	movs	r1, #64	; 0x40
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f000 fa0d 	bl	800af78 <UART_WaitOnFlagUntilTimeout>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d001      	beq.n	800ab68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ab64:	2303      	movs	r3, #3
 800ab66:	e006      	b.n	800ab76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2220      	movs	r2, #32
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ab70:	2300      	movs	r3, #0
 800ab72:	e000      	b.n	800ab76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ab74:	2302      	movs	r3, #2
  }
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3720      	adds	r7, #32
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	60f8      	str	r0, [r7, #12]
 800ab86:	60b9      	str	r1, [r7, #8]
 800ab88:	4613      	mov	r3, r2
 800ab8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b20      	cmp	r3, #32
 800ab96:	d11d      	bne.n	800abd4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d002      	beq.n	800aba4 <HAL_UART_Receive_IT+0x26>
 800ab9e:	88fb      	ldrh	r3, [r7, #6]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e016      	b.n	800abd6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d101      	bne.n	800abb6 <HAL_UART_Receive_IT+0x38>
 800abb2:	2302      	movs	r3, #2
 800abb4:	e00f      	b.n	800abd6 <HAL_UART_Receive_IT+0x58>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800abc4:	88fb      	ldrh	r3, [r7, #6]
 800abc6:	461a      	mov	r2, r3
 800abc8:	68b9      	ldr	r1, [r7, #8]
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f000 fa1e 	bl	800b00c <UART_Start_Receive_IT>
 800abd0:	4603      	mov	r3, r0
 800abd2:	e000      	b.n	800abd6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800abd4:	2302      	movs	r3, #2
  }
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
	...

0800abe0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b08a      	sub	sp, #40	; 0x28
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800ac00:	2300      	movs	r3, #0
 800ac02:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800ac04:	2300      	movs	r3, #0
 800ac06:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	f003 030f 	and.w	r3, r3, #15
 800ac0e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10d      	bne.n	800ac32 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac18:	f003 0320 	and.w	r3, r3, #32
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d008      	beq.n	800ac32 <HAL_UART_IRQHandler+0x52>
 800ac20:	6a3b      	ldr	r3, [r7, #32]
 800ac22:	f003 0320 	and.w	r3, r3, #32
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d003      	beq.n	800ac32 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fad1 	bl	800b1d2 <UART_Receive_IT>
      return;
 800ac30:	e17c      	b.n	800af2c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f000 80b1 	beq.w	800ad9c <HAL_UART_IRQHandler+0x1bc>
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d105      	bne.n	800ac50 <HAL_UART_IRQHandler+0x70>
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f000 80a6 	beq.w	800ad9c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	f003 0301 	and.w	r3, r3, #1
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <HAL_UART_IRQHandler+0x90>
 800ac5a:	6a3b      	ldr	r3, [r7, #32]
 800ac5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d005      	beq.n	800ac70 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac68:	f043 0201 	orr.w	r2, r3, #1
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	f003 0304 	and.w	r3, r3, #4
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00a      	beq.n	800ac90 <HAL_UART_IRQHandler+0xb0>
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	f003 0301 	and.w	r3, r3, #1
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d005      	beq.n	800ac90 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac88:	f043 0202 	orr.w	r2, r3, #2
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00a      	beq.n	800acb0 <HAL_UART_IRQHandler+0xd0>
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	f003 0301 	and.w	r3, r3, #1
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d005      	beq.n	800acb0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca8:	f043 0204 	orr.w	r2, r3, #4
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	f003 0308 	and.w	r3, r3, #8
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00f      	beq.n	800acda <HAL_UART_IRQHandler+0xfa>
 800acba:	6a3b      	ldr	r3, [r7, #32]
 800acbc:	f003 0320 	and.w	r3, r3, #32
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d104      	bne.n	800acce <HAL_UART_IRQHandler+0xee>
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	f003 0301 	and.w	r3, r3, #1
 800acca:	2b00      	cmp	r3, #0
 800accc:	d005      	beq.n	800acda <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd2:	f043 0208 	orr.w	r2, r3, #8
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 811f 	beq.w	800af22 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	f003 0320 	and.w	r3, r3, #32
 800acea:	2b00      	cmp	r3, #0
 800acec:	d007      	beq.n	800acfe <HAL_UART_IRQHandler+0x11e>
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	f003 0320 	and.w	r3, r3, #32
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d002      	beq.n	800acfe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fa6a 	bl	800b1d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	695b      	ldr	r3, [r3, #20]
 800ad04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad08:	2b40      	cmp	r3, #64	; 0x40
 800ad0a:	bf0c      	ite	eq
 800ad0c:	2301      	moveq	r3, #1
 800ad0e:	2300      	movne	r3, #0
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad18:	f003 0308 	and.w	r3, r3, #8
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d102      	bne.n	800ad26 <HAL_UART_IRQHandler+0x146>
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d031      	beq.n	800ad8a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f9aa 	bl	800b080 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	695b      	ldr	r3, [r3, #20]
 800ad32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad36:	2b40      	cmp	r3, #64	; 0x40
 800ad38:	d123      	bne.n	800ad82 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	695a      	ldr	r2, [r3, #20]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad48:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d013      	beq.n	800ad7a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad56:	4a77      	ldr	r2, [pc, #476]	; (800af34 <HAL_UART_IRQHandler+0x354>)
 800ad58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fb fd61 	bl	8006826 <HAL_DMA_Abort_IT>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d016      	beq.n	800ad98 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ad74:	4610      	mov	r0, r2
 800ad76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad78:	e00e      	b.n	800ad98 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f8e6 	bl	800af4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad80:	e00a      	b.n	800ad98 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 f8e2 	bl	800af4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad88:	e006      	b.n	800ad98 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f8de 	bl	800af4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2200      	movs	r2, #0
 800ad94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ad96:	e0c4      	b.n	800af22 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad98:	bf00      	nop
    return;
 800ad9a:	e0c2      	b.n	800af22 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	f040 80a2 	bne.w	800aeea <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	f003 0310 	and.w	r3, r3, #16
 800adac:	2b00      	cmp	r3, #0
 800adae:	f000 809c 	beq.w	800aeea <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	f003 0310 	and.w	r3, r3, #16
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 8096 	beq.w	800aeea <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800adbe:	2300      	movs	r3, #0
 800adc0:	60fb      	str	r3, [r7, #12]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	60fb      	str	r3, [r7, #12]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	60fb      	str	r3, [r7, #12]
 800add2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adde:	2b40      	cmp	r3, #64	; 0x40
 800ade0:	d14f      	bne.n	800ae82 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800adec:	8a3b      	ldrh	r3, [r7, #16]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f000 8099 	beq.w	800af26 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800adf8:	8a3a      	ldrh	r2, [r7, #16]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	f080 8093 	bcs.w	800af26 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	8a3a      	ldrh	r2, [r7, #16]
 800ae04:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae10:	d02b      	beq.n	800ae6a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68da      	ldr	r2, [r3, #12]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae20:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	695a      	ldr	r2, [r3, #20]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f022 0201 	bic.w	r2, r2, #1
 800ae30:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	695a      	ldr	r2, [r3, #20]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae40:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2220      	movs	r2, #32
 800ae46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68da      	ldr	r2, [r3, #12]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f022 0210 	bic.w	r2, r2, #16
 800ae5e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7fb fc6e 	bl	8006746 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f870 	bl	800af60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800ae80:	e051      	b.n	800af26 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	1ad3      	subs	r3, r2, r3
 800ae8e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d047      	beq.n	800af2a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800ae9a:	8a7b      	ldrh	r3, [r7, #18]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d044      	beq.n	800af2a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68da      	ldr	r2, [r3, #12]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aeae:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	695a      	ldr	r2, [r3, #20]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f022 0201 	bic.w	r2, r2, #1
 800aebe:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2220      	movs	r2, #32
 800aec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2200      	movs	r2, #0
 800aecc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68da      	ldr	r2, [r3, #12]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f022 0210 	bic.w	r2, r2, #16
 800aedc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aede:	8a7b      	ldrh	r3, [r7, #18]
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f83c 	bl	800af60 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800aee8:	e01f      	b.n	800af2a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d008      	beq.n	800af06 <HAL_UART_IRQHandler+0x326>
 800aef4:	6a3b      	ldr	r3, [r7, #32]
 800aef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d003      	beq.n	800af06 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 f8ff 	bl	800b102 <UART_Transmit_IT>
    return;
 800af04:	e012      	b.n	800af2c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d00d      	beq.n	800af2c <HAL_UART_IRQHandler+0x34c>
 800af10:	6a3b      	ldr	r3, [r7, #32]
 800af12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af16:	2b00      	cmp	r3, #0
 800af18:	d008      	beq.n	800af2c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f941 	bl	800b1a2 <UART_EndTransmit_IT>
    return;
 800af20:	e004      	b.n	800af2c <HAL_UART_IRQHandler+0x34c>
    return;
 800af22:	bf00      	nop
 800af24:	e002      	b.n	800af2c <HAL_UART_IRQHandler+0x34c>
      return;
 800af26:	bf00      	nop
 800af28:	e000      	b.n	800af2c <HAL_UART_IRQHandler+0x34c>
      return;
 800af2a:	bf00      	nop
  }
}
 800af2c:	3728      	adds	r7, #40	; 0x28
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	0800b0db 	.word	0x0800b0db

0800af38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af38:	b480      	push	{r7}
 800af3a:	b083      	sub	sp, #12
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	460b      	mov	r3, r1
 800af6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af6c:	bf00      	nop
 800af6e:	370c      	adds	r7, #12
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	603b      	str	r3, [r7, #0]
 800af84:	4613      	mov	r3, r2
 800af86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af88:	e02c      	b.n	800afe4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af90:	d028      	beq.n	800afe4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d007      	beq.n	800afa8 <UART_WaitOnFlagUntilTimeout+0x30>
 800af98:	f7fa fec8 	bl	8005d2c <HAL_GetTick>
 800af9c:	4602      	mov	r2, r0
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	69ba      	ldr	r2, [r7, #24]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d21d      	bcs.n	800afe4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68da      	ldr	r2, [r3, #12]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800afb6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	695a      	ldr	r2, [r3, #20]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f022 0201 	bic.w	r2, r2, #1
 800afc6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2220      	movs	r2, #32
 800afcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2220      	movs	r2, #32
 800afd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2200      	movs	r2, #0
 800afdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e00f      	b.n	800b004 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	4013      	ands	r3, r2
 800afee:	68ba      	ldr	r2, [r7, #8]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	bf0c      	ite	eq
 800aff4:	2301      	moveq	r3, #1
 800aff6:	2300      	movne	r3, #0
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	461a      	mov	r2, r3
 800affc:	79fb      	ldrb	r3, [r7, #7]
 800affe:	429a      	cmp	r2, r3
 800b000:	d0c3      	beq.n	800af8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	4613      	mov	r3, r2
 800b018:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	88fa      	ldrh	r2, [r7, #6]
 800b024:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	88fa      	ldrh	r2, [r7, #6]
 800b02a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2222      	movs	r2, #34	; 0x22
 800b036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	68da      	ldr	r2, [r3, #12]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b050:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	695a      	ldr	r2, [r3, #20]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f042 0201 	orr.w	r2, r2, #1
 800b060:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68da      	ldr	r2, [r3, #12]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f042 0220 	orr.w	r2, r2, #32
 800b070:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3714      	adds	r7, #20
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	68da      	ldr	r2, [r3, #12]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b096:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	695a      	ldr	r2, [r3, #20]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f022 0201 	bic.w	r2, r2, #1
 800b0a6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d107      	bne.n	800b0c0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68da      	ldr	r2, [r3, #12]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f022 0210 	bic.w	r2, r2, #16
 800b0be:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2220      	movs	r2, #32
 800b0c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b0ce:	bf00      	nop
 800b0d0:	370c      	adds	r7, #12
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f7ff ff29 	bl	800af4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0fa:	bf00      	nop
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b102:	b480      	push	{r7}
 800b104:	b085      	sub	sp, #20
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b110:	b2db      	uxtb	r3, r3
 800b112:	2b21      	cmp	r3, #33	; 0x21
 800b114:	d13e      	bne.n	800b194 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b11e:	d114      	bne.n	800b14a <UART_Transmit_IT+0x48>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d110      	bne.n	800b14a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a1b      	ldr	r3, [r3, #32]
 800b12c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	881b      	ldrh	r3, [r3, #0]
 800b132:	461a      	mov	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b13c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a1b      	ldr	r3, [r3, #32]
 800b142:	1c9a      	adds	r2, r3, #2
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	621a      	str	r2, [r3, #32]
 800b148:	e008      	b.n	800b15c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a1b      	ldr	r3, [r3, #32]
 800b14e:	1c59      	adds	r1, r3, #1
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	6211      	str	r1, [r2, #32]
 800b154:	781a      	ldrb	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b160:	b29b      	uxth	r3, r3
 800b162:	3b01      	subs	r3, #1
 800b164:	b29b      	uxth	r3, r3
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	4619      	mov	r1, r3
 800b16a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10f      	bne.n	800b190 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68da      	ldr	r2, [r3, #12]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b17e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68da      	ldr	r2, [r3, #12]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b18e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	e000      	b.n	800b196 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b194:	2302      	movs	r3, #2
  }
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	68da      	ldr	r2, [r3, #12]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2220      	movs	r2, #32
 800b1be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff feb8 	bl	800af38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	2b22      	cmp	r3, #34	; 0x22
 800b1e4:	f040 8087 	bne.w	800b2f6 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1f0:	d117      	bne.n	800b222 <UART_Receive_IT+0x50>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	691b      	ldr	r3, [r3, #16]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d113      	bne.n	800b222 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b202:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b210:	b29a      	uxth	r2, r3
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21a:	1c9a      	adds	r2, r3, #2
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	629a      	str	r2, [r3, #40]	; 0x28
 800b220:	e026      	b.n	800b270 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b226:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b228:	2300      	movs	r3, #0
 800b22a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b234:	d007      	beq.n	800b246 <UART_Receive_IT+0x74>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10a      	bne.n	800b254 <UART_Receive_IT+0x82>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d106      	bne.n	800b254 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	701a      	strb	r2, [r3, #0]
 800b252:	e008      	b.n	800b266 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b260:	b2da      	uxtb	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b274:	b29b      	uxth	r3, r3
 800b276:	3b01      	subs	r3, #1
 800b278:	b29b      	uxth	r3, r3
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	4619      	mov	r1, r3
 800b27e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b280:	2b00      	cmp	r3, #0
 800b282:	d136      	bne.n	800b2f2 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68da      	ldr	r2, [r3, #12]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f022 0220 	bic.w	r2, r2, #32
 800b292:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	68da      	ldr	r2, [r3, #12]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	695a      	ldr	r2, [r3, #20]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f022 0201 	bic.w	r2, r2, #1
 800b2b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2220      	movs	r2, #32
 800b2b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d10e      	bne.n	800b2e2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68da      	ldr	r2, [r3, #12]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f022 0210 	bic.w	r2, r2, #16
 800b2d2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7ff fe40 	bl	800af60 <HAL_UARTEx_RxEventCallback>
 800b2e0:	e002      	b.n	800b2e8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7f6 fc56 	bl	8001b94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	e002      	b.n	800b2f8 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	e000      	b.n	800b2f8 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b2f6:	2302      	movs	r3, #2
  }
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b304:	b09f      	sub	sp, #124	; 0x7c
 800b306:	af00      	add	r7, sp, #0
 800b308:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b30a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b316:	68d9      	ldr	r1, [r3, #12]
 800b318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	ea40 0301 	orr.w	r3, r0, r1
 800b320:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b324:	689a      	ldr	r2, [r3, #8]
 800b326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	431a      	orrs	r2, r3
 800b32c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b32e:	695b      	ldr	r3, [r3, #20]
 800b330:	431a      	orrs	r2, r3
 800b332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	4313      	orrs	r3, r2
 800b338:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b33a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b344:	f021 010c 	bic.w	r1, r1, #12
 800b348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b34e:	430b      	orrs	r3, r1
 800b350:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	695b      	ldr	r3, [r3, #20]
 800b358:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b35c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b35e:	6999      	ldr	r1, [r3, #24]
 800b360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	ea40 0301 	orr.w	r3, r0, r1
 800b368:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b36a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	4bc5      	ldr	r3, [pc, #788]	; (800b684 <UART_SetConfig+0x384>)
 800b370:	429a      	cmp	r2, r3
 800b372:	d004      	beq.n	800b37e <UART_SetConfig+0x7e>
 800b374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	4bc3      	ldr	r3, [pc, #780]	; (800b688 <UART_SetConfig+0x388>)
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d103      	bne.n	800b386 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b37e:	f7fe f9a1 	bl	80096c4 <HAL_RCC_GetPCLK2Freq>
 800b382:	6778      	str	r0, [r7, #116]	; 0x74
 800b384:	e002      	b.n	800b38c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b386:	f7fe f989 	bl	800969c <HAL_RCC_GetPCLK1Freq>
 800b38a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b38c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b38e:	69db      	ldr	r3, [r3, #28]
 800b390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b394:	f040 80b6 	bne.w	800b504 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b39a:	461c      	mov	r4, r3
 800b39c:	f04f 0500 	mov.w	r5, #0
 800b3a0:	4622      	mov	r2, r4
 800b3a2:	462b      	mov	r3, r5
 800b3a4:	1891      	adds	r1, r2, r2
 800b3a6:	6439      	str	r1, [r7, #64]	; 0x40
 800b3a8:	415b      	adcs	r3, r3
 800b3aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b3ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b3b0:	1912      	adds	r2, r2, r4
 800b3b2:	eb45 0303 	adc.w	r3, r5, r3
 800b3b6:	f04f 0000 	mov.w	r0, #0
 800b3ba:	f04f 0100 	mov.w	r1, #0
 800b3be:	00d9      	lsls	r1, r3, #3
 800b3c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b3c4:	00d0      	lsls	r0, r2, #3
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	1911      	adds	r1, r2, r4
 800b3cc:	6639      	str	r1, [r7, #96]	; 0x60
 800b3ce:	416b      	adcs	r3, r5
 800b3d0:	667b      	str	r3, [r7, #100]	; 0x64
 800b3d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	f04f 0300 	mov.w	r3, #0
 800b3dc:	1891      	adds	r1, r2, r2
 800b3de:	63b9      	str	r1, [r7, #56]	; 0x38
 800b3e0:	415b      	adcs	r3, r3
 800b3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b3e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b3ec:	f7f5 fc4c 	bl	8000c88 <__aeabi_uldivmod>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	4ba5      	ldr	r3, [pc, #660]	; (800b68c <UART_SetConfig+0x38c>)
 800b3f6:	fba3 2302 	umull	r2, r3, r3, r2
 800b3fa:	095b      	lsrs	r3, r3, #5
 800b3fc:	011e      	lsls	r6, r3, #4
 800b3fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b400:	461c      	mov	r4, r3
 800b402:	f04f 0500 	mov.w	r5, #0
 800b406:	4622      	mov	r2, r4
 800b408:	462b      	mov	r3, r5
 800b40a:	1891      	adds	r1, r2, r2
 800b40c:	6339      	str	r1, [r7, #48]	; 0x30
 800b40e:	415b      	adcs	r3, r3
 800b410:	637b      	str	r3, [r7, #52]	; 0x34
 800b412:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b416:	1912      	adds	r2, r2, r4
 800b418:	eb45 0303 	adc.w	r3, r5, r3
 800b41c:	f04f 0000 	mov.w	r0, #0
 800b420:	f04f 0100 	mov.w	r1, #0
 800b424:	00d9      	lsls	r1, r3, #3
 800b426:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b42a:	00d0      	lsls	r0, r2, #3
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	1911      	adds	r1, r2, r4
 800b432:	65b9      	str	r1, [r7, #88]	; 0x58
 800b434:	416b      	adcs	r3, r5
 800b436:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	461a      	mov	r2, r3
 800b43e:	f04f 0300 	mov.w	r3, #0
 800b442:	1891      	adds	r1, r2, r2
 800b444:	62b9      	str	r1, [r7, #40]	; 0x28
 800b446:	415b      	adcs	r3, r3
 800b448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b44a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b44e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b452:	f7f5 fc19 	bl	8000c88 <__aeabi_uldivmod>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	4b8c      	ldr	r3, [pc, #560]	; (800b68c <UART_SetConfig+0x38c>)
 800b45c:	fba3 1302 	umull	r1, r3, r3, r2
 800b460:	095b      	lsrs	r3, r3, #5
 800b462:	2164      	movs	r1, #100	; 0x64
 800b464:	fb01 f303 	mul.w	r3, r1, r3
 800b468:	1ad3      	subs	r3, r2, r3
 800b46a:	00db      	lsls	r3, r3, #3
 800b46c:	3332      	adds	r3, #50	; 0x32
 800b46e:	4a87      	ldr	r2, [pc, #540]	; (800b68c <UART_SetConfig+0x38c>)
 800b470:	fba2 2303 	umull	r2, r3, r2, r3
 800b474:	095b      	lsrs	r3, r3, #5
 800b476:	005b      	lsls	r3, r3, #1
 800b478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b47c:	441e      	add	r6, r3
 800b47e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b480:	4618      	mov	r0, r3
 800b482:	f04f 0100 	mov.w	r1, #0
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	1894      	adds	r4, r2, r2
 800b48c:	623c      	str	r4, [r7, #32]
 800b48e:	415b      	adcs	r3, r3
 800b490:	627b      	str	r3, [r7, #36]	; 0x24
 800b492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b496:	1812      	adds	r2, r2, r0
 800b498:	eb41 0303 	adc.w	r3, r1, r3
 800b49c:	f04f 0400 	mov.w	r4, #0
 800b4a0:	f04f 0500 	mov.w	r5, #0
 800b4a4:	00dd      	lsls	r5, r3, #3
 800b4a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b4aa:	00d4      	lsls	r4, r2, #3
 800b4ac:	4622      	mov	r2, r4
 800b4ae:	462b      	mov	r3, r5
 800b4b0:	1814      	adds	r4, r2, r0
 800b4b2:	653c      	str	r4, [r7, #80]	; 0x50
 800b4b4:	414b      	adcs	r3, r1
 800b4b6:	657b      	str	r3, [r7, #84]	; 0x54
 800b4b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	461a      	mov	r2, r3
 800b4be:	f04f 0300 	mov.w	r3, #0
 800b4c2:	1891      	adds	r1, r2, r2
 800b4c4:	61b9      	str	r1, [r7, #24]
 800b4c6:	415b      	adcs	r3, r3
 800b4c8:	61fb      	str	r3, [r7, #28]
 800b4ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b4ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b4d2:	f7f5 fbd9 	bl	8000c88 <__aeabi_uldivmod>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	460b      	mov	r3, r1
 800b4da:	4b6c      	ldr	r3, [pc, #432]	; (800b68c <UART_SetConfig+0x38c>)
 800b4dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b4e0:	095b      	lsrs	r3, r3, #5
 800b4e2:	2164      	movs	r1, #100	; 0x64
 800b4e4:	fb01 f303 	mul.w	r3, r1, r3
 800b4e8:	1ad3      	subs	r3, r2, r3
 800b4ea:	00db      	lsls	r3, r3, #3
 800b4ec:	3332      	adds	r3, #50	; 0x32
 800b4ee:	4a67      	ldr	r2, [pc, #412]	; (800b68c <UART_SetConfig+0x38c>)
 800b4f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4f4:	095b      	lsrs	r3, r3, #5
 800b4f6:	f003 0207 	and.w	r2, r3, #7
 800b4fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4432      	add	r2, r6
 800b500:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b502:	e0b9      	b.n	800b678 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b504:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b506:	461c      	mov	r4, r3
 800b508:	f04f 0500 	mov.w	r5, #0
 800b50c:	4622      	mov	r2, r4
 800b50e:	462b      	mov	r3, r5
 800b510:	1891      	adds	r1, r2, r2
 800b512:	6139      	str	r1, [r7, #16]
 800b514:	415b      	adcs	r3, r3
 800b516:	617b      	str	r3, [r7, #20]
 800b518:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b51c:	1912      	adds	r2, r2, r4
 800b51e:	eb45 0303 	adc.w	r3, r5, r3
 800b522:	f04f 0000 	mov.w	r0, #0
 800b526:	f04f 0100 	mov.w	r1, #0
 800b52a:	00d9      	lsls	r1, r3, #3
 800b52c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b530:	00d0      	lsls	r0, r2, #3
 800b532:	4602      	mov	r2, r0
 800b534:	460b      	mov	r3, r1
 800b536:	eb12 0804 	adds.w	r8, r2, r4
 800b53a:	eb43 0905 	adc.w	r9, r3, r5
 800b53e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	4618      	mov	r0, r3
 800b544:	f04f 0100 	mov.w	r1, #0
 800b548:	f04f 0200 	mov.w	r2, #0
 800b54c:	f04f 0300 	mov.w	r3, #0
 800b550:	008b      	lsls	r3, r1, #2
 800b552:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b556:	0082      	lsls	r2, r0, #2
 800b558:	4640      	mov	r0, r8
 800b55a:	4649      	mov	r1, r9
 800b55c:	f7f5 fb94 	bl	8000c88 <__aeabi_uldivmod>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	4b49      	ldr	r3, [pc, #292]	; (800b68c <UART_SetConfig+0x38c>)
 800b566:	fba3 2302 	umull	r2, r3, r3, r2
 800b56a:	095b      	lsrs	r3, r3, #5
 800b56c:	011e      	lsls	r6, r3, #4
 800b56e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b570:	4618      	mov	r0, r3
 800b572:	f04f 0100 	mov.w	r1, #0
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	1894      	adds	r4, r2, r2
 800b57c:	60bc      	str	r4, [r7, #8]
 800b57e:	415b      	adcs	r3, r3
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b586:	1812      	adds	r2, r2, r0
 800b588:	eb41 0303 	adc.w	r3, r1, r3
 800b58c:	f04f 0400 	mov.w	r4, #0
 800b590:	f04f 0500 	mov.w	r5, #0
 800b594:	00dd      	lsls	r5, r3, #3
 800b596:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b59a:	00d4      	lsls	r4, r2, #3
 800b59c:	4622      	mov	r2, r4
 800b59e:	462b      	mov	r3, r5
 800b5a0:	1814      	adds	r4, r2, r0
 800b5a2:	64bc      	str	r4, [r7, #72]	; 0x48
 800b5a4:	414b      	adcs	r3, r1
 800b5a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f04f 0100 	mov.w	r1, #0
 800b5b2:	f04f 0200 	mov.w	r2, #0
 800b5b6:	f04f 0300 	mov.w	r3, #0
 800b5ba:	008b      	lsls	r3, r1, #2
 800b5bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b5c0:	0082      	lsls	r2, r0, #2
 800b5c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b5c6:	f7f5 fb5f 	bl	8000c88 <__aeabi_uldivmod>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	4b2f      	ldr	r3, [pc, #188]	; (800b68c <UART_SetConfig+0x38c>)
 800b5d0:	fba3 1302 	umull	r1, r3, r3, r2
 800b5d4:	095b      	lsrs	r3, r3, #5
 800b5d6:	2164      	movs	r1, #100	; 0x64
 800b5d8:	fb01 f303 	mul.w	r3, r1, r3
 800b5dc:	1ad3      	subs	r3, r2, r3
 800b5de:	011b      	lsls	r3, r3, #4
 800b5e0:	3332      	adds	r3, #50	; 0x32
 800b5e2:	4a2a      	ldr	r2, [pc, #168]	; (800b68c <UART_SetConfig+0x38c>)
 800b5e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b5e8:	095b      	lsrs	r3, r3, #5
 800b5ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5ee:	441e      	add	r6, r3
 800b5f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f04f 0100 	mov.w	r1, #0
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	1894      	adds	r4, r2, r2
 800b5fe:	603c      	str	r4, [r7, #0]
 800b600:	415b      	adcs	r3, r3
 800b602:	607b      	str	r3, [r7, #4]
 800b604:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b608:	1812      	adds	r2, r2, r0
 800b60a:	eb41 0303 	adc.w	r3, r1, r3
 800b60e:	f04f 0400 	mov.w	r4, #0
 800b612:	f04f 0500 	mov.w	r5, #0
 800b616:	00dd      	lsls	r5, r3, #3
 800b618:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b61c:	00d4      	lsls	r4, r2, #3
 800b61e:	4622      	mov	r2, r4
 800b620:	462b      	mov	r3, r5
 800b622:	eb12 0a00 	adds.w	sl, r2, r0
 800b626:	eb43 0b01 	adc.w	fp, r3, r1
 800b62a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	4618      	mov	r0, r3
 800b630:	f04f 0100 	mov.w	r1, #0
 800b634:	f04f 0200 	mov.w	r2, #0
 800b638:	f04f 0300 	mov.w	r3, #0
 800b63c:	008b      	lsls	r3, r1, #2
 800b63e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b642:	0082      	lsls	r2, r0, #2
 800b644:	4650      	mov	r0, sl
 800b646:	4659      	mov	r1, fp
 800b648:	f7f5 fb1e 	bl	8000c88 <__aeabi_uldivmod>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	4b0e      	ldr	r3, [pc, #56]	; (800b68c <UART_SetConfig+0x38c>)
 800b652:	fba3 1302 	umull	r1, r3, r3, r2
 800b656:	095b      	lsrs	r3, r3, #5
 800b658:	2164      	movs	r1, #100	; 0x64
 800b65a:	fb01 f303 	mul.w	r3, r1, r3
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	011b      	lsls	r3, r3, #4
 800b662:	3332      	adds	r3, #50	; 0x32
 800b664:	4a09      	ldr	r2, [pc, #36]	; (800b68c <UART_SetConfig+0x38c>)
 800b666:	fba2 2303 	umull	r2, r3, r2, r3
 800b66a:	095b      	lsrs	r3, r3, #5
 800b66c:	f003 020f 	and.w	r2, r3, #15
 800b670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4432      	add	r2, r6
 800b676:	609a      	str	r2, [r3, #8]
}
 800b678:	bf00      	nop
 800b67a:	377c      	adds	r7, #124	; 0x7c
 800b67c:	46bd      	mov	sp, r7
 800b67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b682:	bf00      	nop
 800b684:	40011000 	.word	0x40011000
 800b688:	40011400 	.word	0x40011400
 800b68c:	51eb851f 	.word	0x51eb851f

0800b690 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b690:	b084      	sub	sp, #16
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	f107 001c 	add.w	r0, r7, #28
 800b69e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d122      	bne.n	800b6ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b6bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b6d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d105      	bne.n	800b6e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f001 fac6 	bl	800cc74 <USB_CoreReset>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	73fb      	strb	r3, [r7, #15]
 800b6ec:	e01a      	b.n	800b724 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f001 faba 	bl	800cc74 <USB_CoreReset>
 800b700:	4603      	mov	r3, r0
 800b702:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b706:	2b00      	cmp	r3, #0
 800b708:	d106      	bne.n	800b718 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	639a      	str	r2, [r3, #56]	; 0x38
 800b716:	e005      	b.n	800b724 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b726:	2b01      	cmp	r3, #1
 800b728:	d10b      	bne.n	800b742 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f043 0206 	orr.w	r2, r3, #6
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	689b      	ldr	r3, [r3, #8]
 800b73a:	f043 0220 	orr.w	r2, r3, #32
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b742:	7bfb      	ldrb	r3, [r7, #15]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b74e:	b004      	add	sp, #16
 800b750:	4770      	bx	lr
	...

0800b754 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b754:	b480      	push	{r7}
 800b756:	b087      	sub	sp, #28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	4613      	mov	r3, r2
 800b760:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b762:	79fb      	ldrb	r3, [r7, #7]
 800b764:	2b02      	cmp	r3, #2
 800b766:	d165      	bne.n	800b834 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	4a41      	ldr	r2, [pc, #260]	; (800b870 <USB_SetTurnaroundTime+0x11c>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d906      	bls.n	800b77e <USB_SetTurnaroundTime+0x2a>
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	4a40      	ldr	r2, [pc, #256]	; (800b874 <USB_SetTurnaroundTime+0x120>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d202      	bcs.n	800b77e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b778:	230f      	movs	r3, #15
 800b77a:	617b      	str	r3, [r7, #20]
 800b77c:	e062      	b.n	800b844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	4a3c      	ldr	r2, [pc, #240]	; (800b874 <USB_SetTurnaroundTime+0x120>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d306      	bcc.n	800b794 <USB_SetTurnaroundTime+0x40>
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	4a3b      	ldr	r2, [pc, #236]	; (800b878 <USB_SetTurnaroundTime+0x124>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d202      	bcs.n	800b794 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b78e:	230e      	movs	r3, #14
 800b790:	617b      	str	r3, [r7, #20]
 800b792:	e057      	b.n	800b844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	4a38      	ldr	r2, [pc, #224]	; (800b878 <USB_SetTurnaroundTime+0x124>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d306      	bcc.n	800b7aa <USB_SetTurnaroundTime+0x56>
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	4a37      	ldr	r2, [pc, #220]	; (800b87c <USB_SetTurnaroundTime+0x128>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d202      	bcs.n	800b7aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b7a4:	230d      	movs	r3, #13
 800b7a6:	617b      	str	r3, [r7, #20]
 800b7a8:	e04c      	b.n	800b844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	4a33      	ldr	r2, [pc, #204]	; (800b87c <USB_SetTurnaroundTime+0x128>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d306      	bcc.n	800b7c0 <USB_SetTurnaroundTime+0x6c>
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	4a32      	ldr	r2, [pc, #200]	; (800b880 <USB_SetTurnaroundTime+0x12c>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d802      	bhi.n	800b7c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b7ba:	230c      	movs	r3, #12
 800b7bc:	617b      	str	r3, [r7, #20]
 800b7be:	e041      	b.n	800b844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	4a2f      	ldr	r2, [pc, #188]	; (800b880 <USB_SetTurnaroundTime+0x12c>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d906      	bls.n	800b7d6 <USB_SetTurnaroundTime+0x82>
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	4a2e      	ldr	r2, [pc, #184]	; (800b884 <USB_SetTurnaroundTime+0x130>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d802      	bhi.n	800b7d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b7d0:	230b      	movs	r3, #11
 800b7d2:	617b      	str	r3, [r7, #20]
 800b7d4:	e036      	b.n	800b844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	4a2a      	ldr	r2, [pc, #168]	; (800b884 <USB_SetTurnaroundTime+0x130>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d906      	bls.n	800b7ec <USB_SetTurnaroundTime+0x98>
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	4a29      	ldr	r2, [pc, #164]	; (800b888 <USB_SetTurnaroundTime+0x134>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d802      	bhi.n	800b7ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b7e6:	230a      	movs	r3, #10
 800b7e8:	617b      	str	r3, [r7, #20]
 800b7ea:	e02b      	b.n	800b844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	4a26      	ldr	r2, [pc, #152]	; (800b888 <USB_SetTurnaroundTime+0x134>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d906      	bls.n	800b802 <USB_SetTurnaroundTime+0xae>
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	4a25      	ldr	r2, [pc, #148]	; (800b88c <USB_SetTurnaroundTime+0x138>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d202      	bcs.n	800b802 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b7fc:	2309      	movs	r3, #9
 800b7fe:	617b      	str	r3, [r7, #20]
 800b800:	e020      	b.n	800b844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	4a21      	ldr	r2, [pc, #132]	; (800b88c <USB_SetTurnaroundTime+0x138>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d306      	bcc.n	800b818 <USB_SetTurnaroundTime+0xc4>
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	4a20      	ldr	r2, [pc, #128]	; (800b890 <USB_SetTurnaroundTime+0x13c>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d802      	bhi.n	800b818 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b812:	2308      	movs	r3, #8
 800b814:	617b      	str	r3, [r7, #20]
 800b816:	e015      	b.n	800b844 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	4a1d      	ldr	r2, [pc, #116]	; (800b890 <USB_SetTurnaroundTime+0x13c>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d906      	bls.n	800b82e <USB_SetTurnaroundTime+0xda>
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	4a1c      	ldr	r2, [pc, #112]	; (800b894 <USB_SetTurnaroundTime+0x140>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d202      	bcs.n	800b82e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b828:	2307      	movs	r3, #7
 800b82a:	617b      	str	r3, [r7, #20]
 800b82c:	e00a      	b.n	800b844 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b82e:	2306      	movs	r3, #6
 800b830:	617b      	str	r3, [r7, #20]
 800b832:	e007      	b.n	800b844 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b834:	79fb      	ldrb	r3, [r7, #7]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d102      	bne.n	800b840 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b83a:	2309      	movs	r3, #9
 800b83c:	617b      	str	r3, [r7, #20]
 800b83e:	e001      	b.n	800b844 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b840:	2309      	movs	r3, #9
 800b842:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	68da      	ldr	r2, [r3, #12]
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	029b      	lsls	r3, r3, #10
 800b858:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b85c:	431a      	orrs	r2, r3
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b862:	2300      	movs	r3, #0
}
 800b864:	4618      	mov	r0, r3
 800b866:	371c      	adds	r7, #28
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr
 800b870:	00d8acbf 	.word	0x00d8acbf
 800b874:	00e4e1c0 	.word	0x00e4e1c0
 800b878:	00f42400 	.word	0x00f42400
 800b87c:	01067380 	.word	0x01067380
 800b880:	011a499f 	.word	0x011a499f
 800b884:	01312cff 	.word	0x01312cff
 800b888:	014ca43f 	.word	0x014ca43f
 800b88c:	016e3600 	.word	0x016e3600
 800b890:	01a6ab1f 	.word	0x01a6ab1f
 800b894:	01e84800 	.word	0x01e84800

0800b898 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	f043 0201 	orr.w	r2, r3, #1
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	370c      	adds	r7, #12
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr

0800b8ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b083      	sub	sp, #12
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	f023 0201 	bic.w	r2, r3, #1
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b8f4:	78fb      	ldrb	r3, [r7, #3]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d106      	bne.n	800b908 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	60da      	str	r2, [r3, #12]
 800b906:	e00b      	b.n	800b920 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b908:	78fb      	ldrb	r3, [r7, #3]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d106      	bne.n	800b91c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	60da      	str	r2, [r3, #12]
 800b91a:	e001      	b.n	800b920 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e003      	b.n	800b928 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b920:	2032      	movs	r0, #50	; 0x32
 800b922:	f7fa fa0f 	bl	8005d44 <HAL_Delay>

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b930:	b084      	sub	sp, #16
 800b932:	b580      	push	{r7, lr}
 800b934:	b086      	sub	sp, #24
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b93e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b94a:	2300      	movs	r3, #0
 800b94c:	613b      	str	r3, [r7, #16]
 800b94e:	e009      	b.n	800b964 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	3340      	adds	r3, #64	; 0x40
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4413      	add	r3, r2
 800b95a:	2200      	movs	r2, #0
 800b95c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	3301      	adds	r3, #1
 800b962:	613b      	str	r3, [r7, #16]
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	2b0e      	cmp	r3, #14
 800b968:	d9f2      	bls.n	800b950 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b96a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d11c      	bne.n	800b9aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b97e:	f043 0302 	orr.w	r3, r3, #2
 800b982:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b988:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b994:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	639a      	str	r2, [r3, #56]	; 0x38
 800b9a8:	e00b      	b.n	800b9c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9dc:	461a      	mov	r2, r3
 800b9de:	680b      	ldr	r3, [r1, #0]
 800b9e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d10c      	bne.n	800ba02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d104      	bne.n	800b9f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f949 	bl	800bc88 <USB_SetDevSpeed>
 800b9f6:	e008      	b.n	800ba0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 f944 	bl	800bc88 <USB_SetDevSpeed>
 800ba00:	e003      	b.n	800ba0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ba02:	2103      	movs	r1, #3
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f93f 	bl	800bc88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ba0a:	2110      	movs	r1, #16
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f8f3 	bl	800bbf8 <USB_FlushTxFifo>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d001      	beq.n	800ba1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 f911 	bl	800bc44 <USB_FlushRxFifo>
 800ba22:	4603      	mov	r3, r0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d001      	beq.n	800ba2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba32:	461a      	mov	r2, r3
 800ba34:	2300      	movs	r3, #0
 800ba36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba3e:	461a      	mov	r2, r3
 800ba40:	2300      	movs	r3, #0
 800ba42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba50:	2300      	movs	r3, #0
 800ba52:	613b      	str	r3, [r7, #16]
 800ba54:	e043      	b.n	800bade <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	015a      	lsls	r2, r3, #5
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba6c:	d118      	bne.n	800baa0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d10a      	bne.n	800ba8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	015a      	lsls	r2, r3, #5
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba80:	461a      	mov	r2, r3
 800ba82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba86:	6013      	str	r3, [r2, #0]
 800ba88:	e013      	b.n	800bab2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	015a      	lsls	r2, r3, #5
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	4413      	add	r3, r2
 800ba92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba96:	461a      	mov	r2, r3
 800ba98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	e008      	b.n	800bab2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	015a      	lsls	r2, r3, #5
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	4413      	add	r3, r2
 800baa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baac:	461a      	mov	r2, r3
 800baae:	2300      	movs	r3, #0
 800bab0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	015a      	lsls	r2, r3, #5
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	4413      	add	r3, r2
 800baba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800babe:	461a      	mov	r2, r3
 800bac0:	2300      	movs	r3, #0
 800bac2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	015a      	lsls	r2, r3, #5
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	4413      	add	r3, r2
 800bacc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bad0:	461a      	mov	r2, r3
 800bad2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bad6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	3301      	adds	r3, #1
 800badc:	613b      	str	r3, [r7, #16]
 800bade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae0:	693a      	ldr	r2, [r7, #16]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	d3b7      	bcc.n	800ba56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bae6:	2300      	movs	r3, #0
 800bae8:	613b      	str	r3, [r7, #16]
 800baea:	e043      	b.n	800bb74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	015a      	lsls	r2, r3, #5
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	4413      	add	r3, r2
 800baf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bafe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb02:	d118      	bne.n	800bb36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10a      	bne.n	800bb20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	015a      	lsls	r2, r3, #5
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	4413      	add	r3, r2
 800bb12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb16:	461a      	mov	r2, r3
 800bb18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb1c:	6013      	str	r3, [r2, #0]
 800bb1e:	e013      	b.n	800bb48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	015a      	lsls	r2, r3, #5
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	4413      	add	r3, r2
 800bb28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb32:	6013      	str	r3, [r2, #0]
 800bb34:	e008      	b.n	800bb48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	015a      	lsls	r2, r3, #5
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb42:	461a      	mov	r2, r3
 800bb44:	2300      	movs	r3, #0
 800bb46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	015a      	lsls	r2, r3, #5
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	4413      	add	r3, r2
 800bb50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb54:	461a      	mov	r2, r3
 800bb56:	2300      	movs	r3, #0
 800bb58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	015a      	lsls	r2, r3, #5
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	4413      	add	r3, r2
 800bb62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb66:	461a      	mov	r2, r3
 800bb68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	3301      	adds	r3, #1
 800bb72:	613b      	str	r3, [r7, #16]
 800bb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d3b7      	bcc.n	800baec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb82:	691b      	ldr	r3, [r3, #16]
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bb9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d105      	bne.n	800bbb0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	f043 0210 	orr.w	r2, r3, #16
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	699a      	ldr	r2, [r3, #24]
 800bbb4:	4b0f      	ldr	r3, [pc, #60]	; (800bbf4 <USB_DevInit+0x2c4>)
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d005      	beq.n	800bbce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	699b      	ldr	r3, [r3, #24]
 800bbc6:	f043 0208 	orr.w	r2, r3, #8
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bbce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d107      	bne.n	800bbe4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	699b      	ldr	r3, [r3, #24]
 800bbd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbdc:	f043 0304 	orr.w	r3, r3, #4
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbf0:	b004      	add	sp, #16
 800bbf2:	4770      	bx	lr
 800bbf4:	803c3800 	.word	0x803c3800

0800bbf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bc02:	2300      	movs	r3, #0
 800bc04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	019b      	lsls	r3, r3, #6
 800bc0a:	f043 0220 	orr.w	r2, r3, #32
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	3301      	adds	r3, #1
 800bc16:	60fb      	str	r3, [r7, #12]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	4a09      	ldr	r2, [pc, #36]	; (800bc40 <USB_FlushTxFifo+0x48>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d901      	bls.n	800bc24 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bc20:	2303      	movs	r3, #3
 800bc22:	e006      	b.n	800bc32 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	f003 0320 	and.w	r3, r3, #32
 800bc2c:	2b20      	cmp	r3, #32
 800bc2e:	d0f0      	beq.n	800bc12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop
 800bc40:	00030d40 	.word	0x00030d40

0800bc44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2210      	movs	r2, #16
 800bc54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	4a09      	ldr	r2, [pc, #36]	; (800bc84 <USB_FlushRxFifo+0x40>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d901      	bls.n	800bc68 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bc64:	2303      	movs	r3, #3
 800bc66:	e006      	b.n	800bc76 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	691b      	ldr	r3, [r3, #16]
 800bc6c:	f003 0310 	and.w	r3, r3, #16
 800bc70:	2b10      	cmp	r3, #16
 800bc72:	d0f0      	beq.n	800bc56 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3714      	adds	r7, #20
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	00030d40 	.word	0x00030d40

0800bc88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	460b      	mov	r3, r1
 800bc92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	78fb      	ldrb	r3, [r7, #3]
 800bca2:	68f9      	ldr	r1, [r7, #12]
 800bca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bcba:	b480      	push	{r7}
 800bcbc:	b087      	sub	sp, #28
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	f003 0306 	and.w	r3, r3, #6
 800bcd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d102      	bne.n	800bce0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	75fb      	strb	r3, [r7, #23]
 800bcde:	e00a      	b.n	800bcf6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d002      	beq.n	800bcec <USB_GetDevSpeed+0x32>
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2b06      	cmp	r3, #6
 800bcea:	d102      	bne.n	800bcf2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bcec:	2302      	movs	r3, #2
 800bcee:	75fb      	strb	r3, [r7, #23]
 800bcf0:	e001      	b.n	800bcf6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bcf2:	230f      	movs	r3, #15
 800bcf4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bcf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	371c      	adds	r7, #28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	785b      	ldrb	r3, [r3, #1]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d13a      	bne.n	800bd96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd26:	69da      	ldr	r2, [r3, #28]
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	f003 030f 	and.w	r3, r3, #15
 800bd30:	2101      	movs	r1, #1
 800bd32:	fa01 f303 	lsl.w	r3, r1, r3
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	68f9      	ldr	r1, [r7, #12]
 800bd3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	015a      	lsls	r2, r3, #5
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	4413      	add	r3, r2
 800bd4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d155      	bne.n	800be04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	78db      	ldrb	r3, [r3, #3]
 800bd72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	059b      	lsls	r3, r3, #22
 800bd7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	68ba      	ldr	r2, [r7, #8]
 800bd80:	0151      	lsls	r1, r2, #5
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	440a      	add	r2, r1
 800bd86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd92:	6013      	str	r3, [r2, #0]
 800bd94:	e036      	b.n	800be04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd9c:	69da      	ldr	r2, [r3, #28]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	f003 030f 	and.w	r3, r3, #15
 800bda6:	2101      	movs	r1, #1
 800bda8:	fa01 f303 	lsl.w	r3, r1, r3
 800bdac:	041b      	lsls	r3, r3, #16
 800bdae:	68f9      	ldr	r1, [r7, #12]
 800bdb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	015a      	lsls	r2, r3, #5
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d11a      	bne.n	800be04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	015a      	lsls	r2, r3, #5
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdda:	681a      	ldr	r2, [r3, #0]
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	78db      	ldrb	r3, [r3, #3]
 800bde8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bdea:	430b      	orrs	r3, r1
 800bdec:	4313      	orrs	r3, r2
 800bdee:	68ba      	ldr	r2, [r7, #8]
 800bdf0:	0151      	lsls	r1, r2, #5
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	440a      	add	r2, r1
 800bdf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3714      	adds	r7, #20
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr
	...

0800be14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	785b      	ldrb	r3, [r3, #1]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d161      	bne.n	800bef4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	015a      	lsls	r2, r3, #5
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	4413      	add	r3, r2
 800be38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be46:	d11f      	bne.n	800be88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	015a      	lsls	r2, r3, #5
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	4413      	add	r3, r2
 800be50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	68ba      	ldr	r2, [r7, #8]
 800be58:	0151      	lsls	r1, r2, #5
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	440a      	add	r2, r1
 800be5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	015a      	lsls	r2, r3, #5
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	4413      	add	r3, r2
 800be70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68ba      	ldr	r2, [r7, #8]
 800be78:	0151      	lsls	r1, r2, #5
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	440a      	add	r2, r1
 800be7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	f003 030f 	and.w	r3, r3, #15
 800be98:	2101      	movs	r1, #1
 800be9a:	fa01 f303 	lsl.w	r3, r1, r3
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	43db      	mvns	r3, r3
 800bea2:	68f9      	ldr	r1, [r7, #12]
 800bea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bea8:	4013      	ands	r3, r2
 800beaa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beb2:	69da      	ldr	r2, [r3, #28]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	f003 030f 	and.w	r3, r3, #15
 800bebc:	2101      	movs	r1, #1
 800bebe:	fa01 f303 	lsl.w	r3, r1, r3
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	43db      	mvns	r3, r3
 800bec6:	68f9      	ldr	r1, [r7, #12]
 800bec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800becc:	4013      	ands	r3, r2
 800bece:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	015a      	lsls	r2, r3, #5
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	4413      	add	r3, r2
 800bed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	0159      	lsls	r1, r3, #5
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	440b      	add	r3, r1
 800bee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beea:	4619      	mov	r1, r3
 800beec:	4b35      	ldr	r3, [pc, #212]	; (800bfc4 <USB_DeactivateEndpoint+0x1b0>)
 800beee:	4013      	ands	r3, r2
 800bef0:	600b      	str	r3, [r1, #0]
 800bef2:	e060      	b.n	800bfb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	015a      	lsls	r2, r3, #5
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	4413      	add	r3, r2
 800befc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf0a:	d11f      	bne.n	800bf4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	015a      	lsls	r2, r3, #5
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	0151      	lsls	r1, r2, #5
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	440a      	add	r2, r1
 800bf22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bf2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	015a      	lsls	r2, r3, #5
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	4413      	add	r3, r2
 800bf34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68ba      	ldr	r2, [r7, #8]
 800bf3c:	0151      	lsls	r1, r2, #5
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	440a      	add	r2, r1
 800bf42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	f003 030f 	and.w	r3, r3, #15
 800bf5c:	2101      	movs	r1, #1
 800bf5e:	fa01 f303 	lsl.w	r3, r1, r3
 800bf62:	041b      	lsls	r3, r3, #16
 800bf64:	43db      	mvns	r3, r3
 800bf66:	68f9      	ldr	r1, [r7, #12]
 800bf68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf76:	69da      	ldr	r2, [r3, #28]
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	f003 030f 	and.w	r3, r3, #15
 800bf80:	2101      	movs	r1, #1
 800bf82:	fa01 f303 	lsl.w	r3, r1, r3
 800bf86:	041b      	lsls	r3, r3, #16
 800bf88:	43db      	mvns	r3, r3
 800bf8a:	68f9      	ldr	r1, [r7, #12]
 800bf8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf90:	4013      	ands	r3, r2
 800bf92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	015a      	lsls	r2, r3, #5
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	0159      	lsls	r1, r3, #5
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	440b      	add	r3, r1
 800bfaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfae:	4619      	mov	r1, r3
 800bfb0:	4b05      	ldr	r3, [pc, #20]	; (800bfc8 <USB_DeactivateEndpoint+0x1b4>)
 800bfb2:	4013      	ands	r3, r2
 800bfb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3714      	adds	r7, #20
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr
 800bfc4:	ec337800 	.word	0xec337800
 800bfc8:	eff37800 	.word	0xeff37800

0800bfcc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b08a      	sub	sp, #40	; 0x28
 800bfd0:	af02      	add	r7, sp, #8
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	785b      	ldrb	r3, [r3, #1]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	f040 815c 	bne.w	800c2a6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	695b      	ldr	r3, [r3, #20]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d132      	bne.n	800c05c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	015a      	lsls	r2, r3, #5
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	4413      	add	r3, r2
 800bffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	69ba      	ldr	r2, [r7, #24]
 800c006:	0151      	lsls	r1, r2, #5
 800c008:	69fa      	ldr	r2, [r7, #28]
 800c00a:	440a      	add	r2, r1
 800c00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c010:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c014:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c018:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	015a      	lsls	r2, r3, #5
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	4413      	add	r3, r2
 800c022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	69ba      	ldr	r2, [r7, #24]
 800c02a:	0151      	lsls	r1, r2, #5
 800c02c:	69fa      	ldr	r2, [r7, #28]
 800c02e:	440a      	add	r2, r1
 800c030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c034:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c038:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	015a      	lsls	r2, r3, #5
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	4413      	add	r3, r2
 800c042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	69ba      	ldr	r2, [r7, #24]
 800c04a:	0151      	lsls	r1, r2, #5
 800c04c:	69fa      	ldr	r2, [r7, #28]
 800c04e:	440a      	add	r2, r1
 800c050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c054:	0cdb      	lsrs	r3, r3, #19
 800c056:	04db      	lsls	r3, r3, #19
 800c058:	6113      	str	r3, [r2, #16]
 800c05a:	e074      	b.n	800c146 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	015a      	lsls	r2, r3, #5
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	4413      	add	r3, r2
 800c064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	69ba      	ldr	r2, [r7, #24]
 800c06c:	0151      	lsls	r1, r2, #5
 800c06e:	69fa      	ldr	r2, [r7, #28]
 800c070:	440a      	add	r2, r1
 800c072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c076:	0cdb      	lsrs	r3, r3, #19
 800c078:	04db      	lsls	r3, r3, #19
 800c07a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	015a      	lsls	r2, r3, #5
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	4413      	add	r3, r2
 800c084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	69ba      	ldr	r2, [r7, #24]
 800c08c:	0151      	lsls	r1, r2, #5
 800c08e:	69fa      	ldr	r2, [r7, #28]
 800c090:	440a      	add	r2, r1
 800c092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c096:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c09a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c09e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	015a      	lsls	r2, r3, #5
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0ac:	691a      	ldr	r2, [r3, #16]
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	6959      	ldr	r1, [r3, #20]
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	440b      	add	r3, r1
 800c0b8:	1e59      	subs	r1, r3, #1
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	fbb1 f3f3 	udiv	r3, r1, r3
 800c0c2:	04d9      	lsls	r1, r3, #19
 800c0c4:	4b9d      	ldr	r3, [pc, #628]	; (800c33c <USB_EPStartXfer+0x370>)
 800c0c6:	400b      	ands	r3, r1
 800c0c8:	69b9      	ldr	r1, [r7, #24]
 800c0ca:	0148      	lsls	r0, r1, #5
 800c0cc:	69f9      	ldr	r1, [r7, #28]
 800c0ce:	4401      	add	r1, r0
 800c0d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	015a      	lsls	r2, r3, #5
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	4413      	add	r3, r2
 800c0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0e4:	691a      	ldr	r2, [r3, #16]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	695b      	ldr	r3, [r3, #20]
 800c0ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0ee:	69b9      	ldr	r1, [r7, #24]
 800c0f0:	0148      	lsls	r0, r1, #5
 800c0f2:	69f9      	ldr	r1, [r7, #28]
 800c0f4:	4401      	add	r1, r0
 800c0f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	78db      	ldrb	r3, [r3, #3]
 800c102:	2b01      	cmp	r3, #1
 800c104:	d11f      	bne.n	800c146 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	015a      	lsls	r2, r3, #5
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	4413      	add	r3, r2
 800c10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c112:	691b      	ldr	r3, [r3, #16]
 800c114:	69ba      	ldr	r2, [r7, #24]
 800c116:	0151      	lsls	r1, r2, #5
 800c118:	69fa      	ldr	r2, [r7, #28]
 800c11a:	440a      	add	r2, r1
 800c11c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c120:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c124:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	015a      	lsls	r2, r3, #5
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	4413      	add	r3, r2
 800c12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	69ba      	ldr	r2, [r7, #24]
 800c136:	0151      	lsls	r1, r2, #5
 800c138:	69fa      	ldr	r2, [r7, #28]
 800c13a:	440a      	add	r2, r1
 800c13c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c140:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c144:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c146:	79fb      	ldrb	r3, [r7, #7]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d14b      	bne.n	800c1e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	691b      	ldr	r3, [r3, #16]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d009      	beq.n	800c168 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	015a      	lsls	r2, r3, #5
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	4413      	add	r3, r2
 800c15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c160:	461a      	mov	r2, r3
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	78db      	ldrb	r3, [r3, #3]
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d128      	bne.n	800c1c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d110      	bne.n	800c1a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	015a      	lsls	r2, r3, #5
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	4413      	add	r3, r2
 800c188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	69ba      	ldr	r2, [r7, #24]
 800c190:	0151      	lsls	r1, r2, #5
 800c192:	69fa      	ldr	r2, [r7, #28]
 800c194:	440a      	add	r2, r1
 800c196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c19a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c19e:	6013      	str	r3, [r2, #0]
 800c1a0:	e00f      	b.n	800c1c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	015a      	lsls	r2, r3, #5
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	69ba      	ldr	r2, [r7, #24]
 800c1b2:	0151      	lsls	r1, r2, #5
 800c1b4:	69fa      	ldr	r2, [r7, #28]
 800c1b6:	440a      	add	r2, r1
 800c1b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	015a      	lsls	r2, r3, #5
 800c1c6:	69fb      	ldr	r3, [r7, #28]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	69ba      	ldr	r2, [r7, #24]
 800c1d2:	0151      	lsls	r1, r2, #5
 800c1d4:	69fa      	ldr	r2, [r7, #28]
 800c1d6:	440a      	add	r2, r1
 800c1d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c1e0:	6013      	str	r3, [r2, #0]
 800c1e2:	e12f      	b.n	800c444 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	015a      	lsls	r2, r3, #5
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	69ba      	ldr	r2, [r7, #24]
 800c1f4:	0151      	lsls	r1, r2, #5
 800c1f6:	69fa      	ldr	r2, [r7, #28]
 800c1f8:	440a      	add	r2, r1
 800c1fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c202:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	78db      	ldrb	r3, [r3, #3]
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d015      	beq.n	800c238 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	695b      	ldr	r3, [r3, #20]
 800c210:	2b00      	cmp	r3, #0
 800c212:	f000 8117 	beq.w	800c444 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c21c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	f003 030f 	and.w	r3, r3, #15
 800c226:	2101      	movs	r1, #1
 800c228:	fa01 f303 	lsl.w	r3, r1, r3
 800c22c:	69f9      	ldr	r1, [r7, #28]
 800c22e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c232:	4313      	orrs	r3, r2
 800c234:	634b      	str	r3, [r1, #52]	; 0x34
 800c236:	e105      	b.n	800c444 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c238:	69fb      	ldr	r3, [r7, #28]
 800c23a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c244:	2b00      	cmp	r3, #0
 800c246:	d110      	bne.n	800c26a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	015a      	lsls	r2, r3, #5
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	4413      	add	r3, r2
 800c250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	69ba      	ldr	r2, [r7, #24]
 800c258:	0151      	lsls	r1, r2, #5
 800c25a:	69fa      	ldr	r2, [r7, #28]
 800c25c:	440a      	add	r2, r1
 800c25e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c262:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c266:	6013      	str	r3, [r2, #0]
 800c268:	e00f      	b.n	800c28a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	015a      	lsls	r2, r3, #5
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	4413      	add	r3, r2
 800c272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	69ba      	ldr	r2, [r7, #24]
 800c27a:	0151      	lsls	r1, r2, #5
 800c27c:	69fa      	ldr	r2, [r7, #28]
 800c27e:	440a      	add	r2, r1
 800c280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c288:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	68d9      	ldr	r1, [r3, #12]
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	781a      	ldrb	r2, [r3, #0]
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	695b      	ldr	r3, [r3, #20]
 800c296:	b298      	uxth	r0, r3
 800c298:	79fb      	ldrb	r3, [r7, #7]
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	4603      	mov	r3, r0
 800c29e:	68f8      	ldr	r0, [r7, #12]
 800c2a0:	f000 fa2b 	bl	800c6fa <USB_WritePacket>
 800c2a4:	e0ce      	b.n	800c444 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	015a      	lsls	r2, r3, #5
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	69ba      	ldr	r2, [r7, #24]
 800c2b6:	0151      	lsls	r1, r2, #5
 800c2b8:	69fa      	ldr	r2, [r7, #28]
 800c2ba:	440a      	add	r2, r1
 800c2bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2c0:	0cdb      	lsrs	r3, r3, #19
 800c2c2:	04db      	lsls	r3, r3, #19
 800c2c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	015a      	lsls	r2, r3, #5
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	69ba      	ldr	r2, [r7, #24]
 800c2d6:	0151      	lsls	r1, r2, #5
 800c2d8:	69fa      	ldr	r2, [r7, #28]
 800c2da:	440a      	add	r2, r1
 800c2dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c2e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c2e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	695b      	ldr	r3, [r3, #20]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d126      	bne.n	800c340 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	015a      	lsls	r2, r3, #5
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2fe:	691a      	ldr	r2, [r3, #16]
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c308:	69b9      	ldr	r1, [r7, #24]
 800c30a:	0148      	lsls	r0, r1, #5
 800c30c:	69f9      	ldr	r1, [r7, #28]
 800c30e:	4401      	add	r1, r0
 800c310:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c314:	4313      	orrs	r3, r2
 800c316:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	015a      	lsls	r2, r3, #5
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	4413      	add	r3, r2
 800c320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	69ba      	ldr	r2, [r7, #24]
 800c328:	0151      	lsls	r1, r2, #5
 800c32a:	69fa      	ldr	r2, [r7, #28]
 800c32c:	440a      	add	r2, r1
 800c32e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c332:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c336:	6113      	str	r3, [r2, #16]
 800c338:	e036      	b.n	800c3a8 <USB_EPStartXfer+0x3dc>
 800c33a:	bf00      	nop
 800c33c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	695a      	ldr	r2, [r3, #20]
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	4413      	add	r3, r2
 800c34a:	1e5a      	subs	r2, r3, #1
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	fbb2 f3f3 	udiv	r3, r2, r3
 800c354:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	015a      	lsls	r2, r3, #5
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	4413      	add	r3, r2
 800c35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c362:	691a      	ldr	r2, [r3, #16]
 800c364:	8afb      	ldrh	r3, [r7, #22]
 800c366:	04d9      	lsls	r1, r3, #19
 800c368:	4b39      	ldr	r3, [pc, #228]	; (800c450 <USB_EPStartXfer+0x484>)
 800c36a:	400b      	ands	r3, r1
 800c36c:	69b9      	ldr	r1, [r7, #24]
 800c36e:	0148      	lsls	r0, r1, #5
 800c370:	69f9      	ldr	r1, [r7, #28]
 800c372:	4401      	add	r1, r0
 800c374:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c378:	4313      	orrs	r3, r2
 800c37a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	015a      	lsls	r2, r3, #5
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	4413      	add	r3, r2
 800c384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c388:	691a      	ldr	r2, [r3, #16]
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	8af9      	ldrh	r1, [r7, #22]
 800c390:	fb01 f303 	mul.w	r3, r1, r3
 800c394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c398:	69b9      	ldr	r1, [r7, #24]
 800c39a:	0148      	lsls	r0, r1, #5
 800c39c:	69f9      	ldr	r1, [r7, #28]
 800c39e:	4401      	add	r1, r0
 800c3a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c3a8:	79fb      	ldrb	r3, [r7, #7]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d10d      	bne.n	800c3ca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d009      	beq.n	800c3ca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	68d9      	ldr	r1, [r3, #12]
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	015a      	lsls	r2, r3, #5
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3c6:	460a      	mov	r2, r1
 800c3c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	78db      	ldrb	r3, [r3, #3]
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d128      	bne.n	800c424 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3d2:	69fb      	ldr	r3, [r7, #28]
 800c3d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d110      	bne.n	800c404 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	015a      	lsls	r2, r3, #5
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	4413      	add	r3, r2
 800c3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	69ba      	ldr	r2, [r7, #24]
 800c3f2:	0151      	lsls	r1, r2, #5
 800c3f4:	69fa      	ldr	r2, [r7, #28]
 800c3f6:	440a      	add	r2, r1
 800c3f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c400:	6013      	str	r3, [r2, #0]
 800c402:	e00f      	b.n	800c424 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	015a      	lsls	r2, r3, #5
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	4413      	add	r3, r2
 800c40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	69ba      	ldr	r2, [r7, #24]
 800c414:	0151      	lsls	r1, r2, #5
 800c416:	69fa      	ldr	r2, [r7, #28]
 800c418:	440a      	add	r2, r1
 800c41a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c41e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c422:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	015a      	lsls	r2, r3, #5
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	4413      	add	r3, r2
 800c42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	69ba      	ldr	r2, [r7, #24]
 800c434:	0151      	lsls	r1, r2, #5
 800c436:	69fa      	ldr	r2, [r7, #28]
 800c438:	440a      	add	r2, r1
 800c43a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c43e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c442:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3720      	adds	r7, #32
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	1ff80000 	.word	0x1ff80000

0800c454 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c454:	b480      	push	{r7}
 800c456:	b087      	sub	sp, #28
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	4613      	mov	r3, r2
 800c460:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	785b      	ldrb	r3, [r3, #1]
 800c470:	2b01      	cmp	r3, #1
 800c472:	f040 80cd 	bne.w	800c610 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	695b      	ldr	r3, [r3, #20]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d132      	bne.n	800c4e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	015a      	lsls	r2, r3, #5
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	4413      	add	r3, r2
 800c486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	693a      	ldr	r2, [r7, #16]
 800c48e:	0151      	lsls	r1, r2, #5
 800c490:	697a      	ldr	r2, [r7, #20]
 800c492:	440a      	add	r2, r1
 800c494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c498:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c49c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c4a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	015a      	lsls	r2, r3, #5
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ae:	691b      	ldr	r3, [r3, #16]
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	0151      	lsls	r1, r2, #5
 800c4b4:	697a      	ldr	r2, [r7, #20]
 800c4b6:	440a      	add	r2, r1
 800c4b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c4c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	015a      	lsls	r2, r3, #5
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	693a      	ldr	r2, [r7, #16]
 800c4d2:	0151      	lsls	r1, r2, #5
 800c4d4:	697a      	ldr	r2, [r7, #20]
 800c4d6:	440a      	add	r2, r1
 800c4d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4dc:	0cdb      	lsrs	r3, r3, #19
 800c4de:	04db      	lsls	r3, r3, #19
 800c4e0:	6113      	str	r3, [r2, #16]
 800c4e2:	e04e      	b.n	800c582 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	015a      	lsls	r2, r3, #5
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f0:	691b      	ldr	r3, [r3, #16]
 800c4f2:	693a      	ldr	r2, [r7, #16]
 800c4f4:	0151      	lsls	r1, r2, #5
 800c4f6:	697a      	ldr	r2, [r7, #20]
 800c4f8:	440a      	add	r2, r1
 800c4fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4fe:	0cdb      	lsrs	r3, r3, #19
 800c500:	04db      	lsls	r3, r3, #19
 800c502:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	015a      	lsls	r2, r3, #5
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	4413      	add	r3, r2
 800c50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	693a      	ldr	r2, [r7, #16]
 800c514:	0151      	lsls	r1, r2, #5
 800c516:	697a      	ldr	r2, [r7, #20]
 800c518:	440a      	add	r2, r1
 800c51a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c51e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c522:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c526:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	695a      	ldr	r2, [r3, #20]
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	429a      	cmp	r2, r3
 800c532:	d903      	bls.n	800c53c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	689a      	ldr	r2, [r3, #8]
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	015a      	lsls	r2, r3, #5
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	4413      	add	r3, r2
 800c544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c548:	691b      	ldr	r3, [r3, #16]
 800c54a:	693a      	ldr	r2, [r7, #16]
 800c54c:	0151      	lsls	r1, r2, #5
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	440a      	add	r2, r1
 800c552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c556:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c55a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	015a      	lsls	r2, r3, #5
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	4413      	add	r3, r2
 800c564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c568:	691a      	ldr	r2, [r3, #16]
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	695b      	ldr	r3, [r3, #20]
 800c56e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c572:	6939      	ldr	r1, [r7, #16]
 800c574:	0148      	lsls	r0, r1, #5
 800c576:	6979      	ldr	r1, [r7, #20]
 800c578:	4401      	add	r1, r0
 800c57a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c57e:	4313      	orrs	r3, r2
 800c580:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c582:	79fb      	ldrb	r3, [r7, #7]
 800c584:	2b01      	cmp	r3, #1
 800c586:	d11e      	bne.n	800c5c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d009      	beq.n	800c5a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	015a      	lsls	r2, r3, #5
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	4413      	add	r3, r2
 800c598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c59c:	461a      	mov	r2, r3
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	691b      	ldr	r3, [r3, #16]
 800c5a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	015a      	lsls	r2, r3, #5
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	0151      	lsls	r1, r2, #5
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	440a      	add	r2, r1
 800c5ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5c2:	6013      	str	r3, [r2, #0]
 800c5c4:	e092      	b.n	800c6ec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	015a      	lsls	r2, r3, #5
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	693a      	ldr	r2, [r7, #16]
 800c5d6:	0151      	lsls	r1, r2, #5
 800c5d8:	697a      	ldr	r2, [r7, #20]
 800c5da:	440a      	add	r2, r1
 800c5dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	695b      	ldr	r3, [r3, #20]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d07e      	beq.n	800c6ec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	f003 030f 	and.w	r3, r3, #15
 800c5fe:	2101      	movs	r1, #1
 800c600:	fa01 f303 	lsl.w	r3, r1, r3
 800c604:	6979      	ldr	r1, [r7, #20]
 800c606:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c60a:	4313      	orrs	r3, r2
 800c60c:	634b      	str	r3, [r1, #52]	; 0x34
 800c60e:	e06d      	b.n	800c6ec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	015a      	lsls	r2, r3, #5
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	4413      	add	r3, r2
 800c618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	693a      	ldr	r2, [r7, #16]
 800c620:	0151      	lsls	r1, r2, #5
 800c622:	697a      	ldr	r2, [r7, #20]
 800c624:	440a      	add	r2, r1
 800c626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c62a:	0cdb      	lsrs	r3, r3, #19
 800c62c:	04db      	lsls	r3, r3, #19
 800c62e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	015a      	lsls	r2, r3, #5
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	4413      	add	r3, r2
 800c638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	0151      	lsls	r1, r2, #5
 800c642:	697a      	ldr	r2, [r7, #20]
 800c644:	440a      	add	r2, r1
 800c646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c64a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c64e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c652:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	695b      	ldr	r3, [r3, #20]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d003      	beq.n	800c664 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	689a      	ldr	r2, [r3, #8]
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	015a      	lsls	r2, r3, #5
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	4413      	add	r3, r2
 800c66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c670:	691b      	ldr	r3, [r3, #16]
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	0151      	lsls	r1, r2, #5
 800c676:	697a      	ldr	r2, [r7, #20]
 800c678:	440a      	add	r2, r1
 800c67a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c67e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c682:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	015a      	lsls	r2, r3, #5
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	4413      	add	r3, r2
 800c68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c690:	691a      	ldr	r2, [r3, #16]
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	689b      	ldr	r3, [r3, #8]
 800c696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c69a:	6939      	ldr	r1, [r7, #16]
 800c69c:	0148      	lsls	r0, r1, #5
 800c69e:	6979      	ldr	r1, [r7, #20]
 800c6a0:	4401      	add	r1, r0
 800c6a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c6aa:	79fb      	ldrb	r3, [r7, #7]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d10d      	bne.n	800c6cc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d009      	beq.n	800c6cc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	68d9      	ldr	r1, [r3, #12]
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	015a      	lsls	r2, r3, #5
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6c8:	460a      	mov	r2, r1
 800c6ca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	015a      	lsls	r2, r3, #5
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	0151      	lsls	r1, r2, #5
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	440a      	add	r2, r1
 800c6e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c6ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	371c      	adds	r7, #28
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr

0800c6fa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c6fa:	b480      	push	{r7}
 800c6fc:	b089      	sub	sp, #36	; 0x24
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	60f8      	str	r0, [r7, #12]
 800c702:	60b9      	str	r1, [r7, #8]
 800c704:	4611      	mov	r1, r2
 800c706:	461a      	mov	r2, r3
 800c708:	460b      	mov	r3, r1
 800c70a:	71fb      	strb	r3, [r7, #7]
 800c70c:	4613      	mov	r3, r2
 800c70e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c718:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d11a      	bne.n	800c756 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c720:	88bb      	ldrh	r3, [r7, #4]
 800c722:	3303      	adds	r3, #3
 800c724:	089b      	lsrs	r3, r3, #2
 800c726:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c728:	2300      	movs	r3, #0
 800c72a:	61bb      	str	r3, [r7, #24]
 800c72c:	e00f      	b.n	800c74e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c72e:	79fb      	ldrb	r3, [r7, #7]
 800c730:	031a      	lsls	r2, r3, #12
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	4413      	add	r3, r2
 800c736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c73a:	461a      	mov	r2, r3
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	3304      	adds	r3, #4
 800c746:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	3301      	adds	r3, #1
 800c74c:	61bb      	str	r3, [r7, #24]
 800c74e:	69ba      	ldr	r2, [r7, #24]
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	429a      	cmp	r2, r3
 800c754:	d3eb      	bcc.n	800c72e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3724      	adds	r7, #36	; 0x24
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr

0800c764 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c764:	b480      	push	{r7}
 800c766:	b089      	sub	sp, #36	; 0x24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	4613      	mov	r3, r2
 800c770:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c77a:	88fb      	ldrh	r3, [r7, #6]
 800c77c:	3303      	adds	r3, #3
 800c77e:	089b      	lsrs	r3, r3, #2
 800c780:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c782:	2300      	movs	r3, #0
 800c784:	61bb      	str	r3, [r7, #24]
 800c786:	e00b      	b.n	800c7a0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	601a      	str	r2, [r3, #0]
    pDest++;
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	3304      	adds	r3, #4
 800c798:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c79a:	69bb      	ldr	r3, [r7, #24]
 800c79c:	3301      	adds	r3, #1
 800c79e:	61bb      	str	r3, [r7, #24]
 800c7a0:	69ba      	ldr	r2, [r7, #24]
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d3ef      	bcc.n	800c788 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c7a8:	69fb      	ldr	r3, [r7, #28]
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3724      	adds	r7, #36	; 0x24
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c7b6:	b480      	push	{r7}
 800c7b8:	b085      	sub	sp, #20
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	785b      	ldrb	r3, [r3, #1]
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d12c      	bne.n	800c82c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	015a      	lsls	r2, r3, #5
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	4413      	add	r3, r2
 800c7da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	db12      	blt.n	800c80a <USB_EPSetStall+0x54>
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00f      	beq.n	800c80a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	015a      	lsls	r2, r3, #5
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	4413      	add	r3, r2
 800c7f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	0151      	lsls	r1, r2, #5
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	440a      	add	r2, r1
 800c800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c804:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c808:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	015a      	lsls	r2, r3, #5
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	4413      	add	r3, r2
 800c812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	0151      	lsls	r1, r2, #5
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	440a      	add	r2, r1
 800c820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c828:	6013      	str	r3, [r2, #0]
 800c82a:	e02b      	b.n	800c884 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	015a      	lsls	r2, r3, #5
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	4413      	add	r3, r2
 800c834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	db12      	blt.n	800c864 <USB_EPSetStall+0xae>
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00f      	beq.n	800c864 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	015a      	lsls	r2, r3, #5
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	4413      	add	r3, r2
 800c84c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	0151      	lsls	r1, r2, #5
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	440a      	add	r2, r1
 800c85a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c85e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c862:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	015a      	lsls	r2, r3, #5
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	4413      	add	r3, r2
 800c86c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	0151      	lsls	r1, r2, #5
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	440a      	add	r2, r1
 800c87a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c87e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c882:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c892:	b480      	push	{r7}
 800c894:	b085      	sub	sp, #20
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	785b      	ldrb	r3, [r3, #1]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d128      	bne.n	800c900 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	015a      	lsls	r2, r3, #5
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68ba      	ldr	r2, [r7, #8]
 800c8be:	0151      	lsls	r1, r2, #5
 800c8c0:	68fa      	ldr	r2, [r7, #12]
 800c8c2:	440a      	add	r2, r1
 800c8c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c8cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	78db      	ldrb	r3, [r3, #3]
 800c8d2:	2b03      	cmp	r3, #3
 800c8d4:	d003      	beq.n	800c8de <USB_EPClearStall+0x4c>
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	78db      	ldrb	r3, [r3, #3]
 800c8da:	2b02      	cmp	r3, #2
 800c8dc:	d138      	bne.n	800c950 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	015a      	lsls	r2, r3, #5
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	0151      	lsls	r1, r2, #5
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	440a      	add	r2, r1
 800c8f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8fc:	6013      	str	r3, [r2, #0]
 800c8fe:	e027      	b.n	800c950 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	015a      	lsls	r2, r3, #5
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	4413      	add	r3, r2
 800c908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	68ba      	ldr	r2, [r7, #8]
 800c910:	0151      	lsls	r1, r2, #5
 800c912:	68fa      	ldr	r2, [r7, #12]
 800c914:	440a      	add	r2, r1
 800c916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c91a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c91e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	78db      	ldrb	r3, [r3, #3]
 800c924:	2b03      	cmp	r3, #3
 800c926:	d003      	beq.n	800c930 <USB_EPClearStall+0x9e>
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	78db      	ldrb	r3, [r3, #3]
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	d10f      	bne.n	800c950 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	015a      	lsls	r2, r3, #5
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	4413      	add	r3, r2
 800c938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	0151      	lsls	r1, r2, #5
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	440a      	add	r2, r1
 800c946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c94a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c94e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3714      	adds	r7, #20
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr

0800c95e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c95e:	b480      	push	{r7}
 800c960:	b085      	sub	sp, #20
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	460b      	mov	r3, r1
 800c968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c97c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c980:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	78fb      	ldrb	r3, [r7, #3]
 800c98c:	011b      	lsls	r3, r3, #4
 800c98e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c992:	68f9      	ldr	r1, [r7, #12]
 800c994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c998:	4313      	orrs	r3, r2
 800c99a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr

0800c9aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c9aa:	b480      	push	{r7}
 800c9ac:	b085      	sub	sp, #20
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9c4:	f023 0303 	bic.w	r3, r3, #3
 800c9c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c9d8:	f023 0302 	bic.w	r3, r3, #2
 800c9dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c9de:	2300      	movs	r3, #0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3714      	adds	r7, #20
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca06:	f023 0303 	bic.w	r3, r3, #3
 800ca0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca1a:	f043 0302 	orr.w	r3, r3, #2
 800ca1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca20:	2300      	movs	r3, #0
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3714      	adds	r7, #20
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr

0800ca2e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ca2e:	b480      	push	{r7}
 800ca30:	b085      	sub	sp, #20
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	695b      	ldr	r3, [r3, #20]
 800ca3a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	699b      	ldr	r3, [r3, #24]
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	4013      	ands	r3, r2
 800ca44:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca46:	68fb      	ldr	r3, [r7, #12]
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3714      	adds	r7, #20
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca66:	699b      	ldr	r3, [r3, #24]
 800ca68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca70:	69db      	ldr	r3, [r3, #28]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	4013      	ands	r3, r2
 800ca76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	0c1b      	lsrs	r3, r3, #16
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca9a:	699b      	ldr	r3, [r3, #24]
 800ca9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caa4:	69db      	ldr	r3, [r3, #28]
 800caa6:	68ba      	ldr	r2, [r7, #8]
 800caa8:	4013      	ands	r3, r2
 800caaa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	b29b      	uxth	r3, r3
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b085      	sub	sp, #20
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	460b      	mov	r3, r1
 800cac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800cacc:	78fb      	ldrb	r3, [r7, #3]
 800cace:	015a      	lsls	r2, r3, #5
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	4413      	add	r3, r2
 800cad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cae2:	695b      	ldr	r3, [r3, #20]
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	4013      	ands	r3, r2
 800cae8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800caea:	68bb      	ldr	r3, [r7, #8]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3714      	adds	r7, #20
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b087      	sub	sp, #28
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	460b      	mov	r3, r1
 800cb02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb0e:	691b      	ldr	r3, [r3, #16]
 800cb10:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb1a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cb1c:	78fb      	ldrb	r3, [r7, #3]
 800cb1e:	f003 030f 	and.w	r3, r3, #15
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	fa22 f303 	lsr.w	r3, r2, r3
 800cb28:	01db      	lsls	r3, r3, #7
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	693a      	ldr	r2, [r7, #16]
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cb32:	78fb      	ldrb	r3, [r7, #3]
 800cb34:	015a      	lsls	r2, r3, #5
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	4413      	add	r3, r2
 800cb3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	693a      	ldr	r2, [r7, #16]
 800cb42:	4013      	ands	r3, r2
 800cb44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cb46:	68bb      	ldr	r3, [r7, #8]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	371c      	adds	r7, #28
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr

0800cb54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	695b      	ldr	r3, [r3, #20]
 800cb60:	f003 0301 	and.w	r3, r3, #1
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	370c      	adds	r7, #12
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6e:	4770      	bx	lr

0800cb70 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb8a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cb8e:	f023 0307 	bic.w	r3, r3, #7
 800cb92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cba6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
	...

0800cbb8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b087      	sub	sp, #28
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	607a      	str	r2, [r7, #4]
 800cbc4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	333c      	adds	r3, #60	; 0x3c
 800cbce:	3304      	adds	r3, #4
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	4a26      	ldr	r2, [pc, #152]	; (800cc70 <USB_EP0_OutStart+0xb8>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d90a      	bls.n	800cbf2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbe8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbec:	d101      	bne.n	800cbf2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	e037      	b.n	800cc62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc04:	691b      	ldr	r3, [r3, #16]
 800cc06:	697a      	ldr	r2, [r7, #20]
 800cc08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cc10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc18:	691b      	ldr	r3, [r3, #16]
 800cc1a:	697a      	ldr	r2, [r7, #20]
 800cc1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc20:	f043 0318 	orr.w	r3, r3, #24
 800cc24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	697a      	ldr	r2, [r7, #20]
 800cc30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cc38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cc3a:	7afb      	ldrb	r3, [r7, #11]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d10f      	bne.n	800cc60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc46:	461a      	mov	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	697a      	ldr	r2, [r7, #20]
 800cc56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cc5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	371c      	adds	r7, #28
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	4f54300a 	.word	0x4f54300a

0800cc74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b085      	sub	sp, #20
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	3301      	adds	r3, #1
 800cc84:	60fb      	str	r3, [r7, #12]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	4a13      	ldr	r2, [pc, #76]	; (800ccd8 <USB_CoreReset+0x64>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d901      	bls.n	800cc92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc8e:	2303      	movs	r3, #3
 800cc90:	e01b      	b.n	800ccca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	daf2      	bge.n	800cc80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	691b      	ldr	r3, [r3, #16]
 800cca2:	f043 0201 	orr.w	r2, r3, #1
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	3301      	adds	r3, #1
 800ccae:	60fb      	str	r3, [r7, #12]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	4a09      	ldr	r2, [pc, #36]	; (800ccd8 <USB_CoreReset+0x64>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d901      	bls.n	800ccbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ccb8:	2303      	movs	r3, #3
 800ccba:	e006      	b.n	800ccca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	691b      	ldr	r3, [r3, #16]
 800ccc0:	f003 0301 	and.w	r3, r3, #1
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d0f0      	beq.n	800ccaa <USB_CoreReset+0x36>

  return HAL_OK;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3714      	adds	r7, #20
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr
 800ccd6:	bf00      	nop
 800ccd8:	00030d40 	.word	0x00030d40

0800ccdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800cce0:	4904      	ldr	r1, [pc, #16]	; (800ccf4 <MX_FATFS_Init+0x18>)
 800cce2:	4805      	ldr	r0, [pc, #20]	; (800ccf8 <MX_FATFS_Init+0x1c>)
 800cce4:	f004 fb8a 	bl	80113fc <FATFS_LinkDriver>
 800cce8:	4603      	mov	r3, r0
 800ccea:	461a      	mov	r2, r3
 800ccec:	4b03      	ldr	r3, [pc, #12]	; (800ccfc <MX_FATFS_Init+0x20>)
 800ccee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ccf0:	bf00      	nop
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	20001a24 	.word	0x20001a24
 800ccf8:	20000010 	.word	0x20000010
 800ccfc:	20001a20 	.word	0x20001a20

0800cd00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cd00:	b480      	push	{r7}
 800cd02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cd04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	4603      	mov	r3, r0
 800cd18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800cd1a:	79fb      	ldrb	r3, [r7, #7]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 f9dd 	bl	800d0dc <USER_SPI_initialize>
 800cd22:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	4603      	mov	r3, r0
 800cd34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800cd36:	79fb      	ldrb	r3, [r7, #7]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f000 fabb 	bl	800d2b4 <USER_SPI_status>
 800cd3e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60b9      	str	r1, [r7, #8]
 800cd50:	607a      	str	r2, [r7, #4]
 800cd52:	603b      	str	r3, [r7, #0]
 800cd54:	4603      	mov	r3, r0
 800cd56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800cd58:	7bf8      	ldrb	r0, [r7, #15]
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	68b9      	ldr	r1, [r7, #8]
 800cd60:	f000 fabe 	bl	800d2e0 <USER_SPI_read>
 800cd64:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b084      	sub	sp, #16
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	607a      	str	r2, [r7, #4]
 800cd78:	603b      	str	r3, [r7, #0]
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800cd7e:	7bf8      	ldrb	r0, [r7, #15]
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	68b9      	ldr	r1, [r7, #8]
 800cd86:	f000 fb11 	bl	800d3ac <USER_SPI_write>
 800cd8a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	603a      	str	r2, [r7, #0]
 800cd9e:	71fb      	strb	r3, [r7, #7]
 800cda0:	460b      	mov	r3, r1
 800cda2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800cda4:	79b9      	ldrb	r1, [r7, #6]
 800cda6:	79fb      	ldrb	r3, [r7, #7]
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f000 fb7a 	bl	800d4a4 <USER_SPI_ioctl>
 800cdb0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
	...

0800cdbc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800cdc4:	f7f8 ffb2 	bl	8005d2c <HAL_GetTick>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	4a04      	ldr	r2, [pc, #16]	; (800cddc <SPI_Timer_On+0x20>)
 800cdcc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800cdce:	4a04      	ldr	r2, [pc, #16]	; (800cde0 <SPI_Timer_On+0x24>)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6013      	str	r3, [r2, #0]
}
 800cdd4:	bf00      	nop
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	20001a2c 	.word	0x20001a2c
 800cde0:	20001a28 	.word	0x20001a28

0800cde4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800cde4:	b580      	push	{r7, lr}
 800cde6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800cde8:	f7f8 ffa0 	bl	8005d2c <HAL_GetTick>
 800cdec:	4602      	mov	r2, r0
 800cdee:	4b06      	ldr	r3, [pc, #24]	; (800ce08 <SPI_Timer_Status+0x24>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	1ad2      	subs	r2, r2, r3
 800cdf4:	4b05      	ldr	r3, [pc, #20]	; (800ce0c <SPI_Timer_Status+0x28>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	bf34      	ite	cc
 800cdfc:	2301      	movcc	r3, #1
 800cdfe:	2300      	movcs	r3, #0
 800ce00:	b2db      	uxtb	r3, r3
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	20001a2c 	.word	0x20001a2c
 800ce0c:	20001a28 	.word	0x20001a28

0800ce10 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af02      	add	r7, sp, #8
 800ce16:	4603      	mov	r3, r0
 800ce18:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800ce1a:	f107 020f 	add.w	r2, r7, #15
 800ce1e:	1df9      	adds	r1, r7, #7
 800ce20:	2332      	movs	r3, #50	; 0x32
 800ce22:	9300      	str	r3, [sp, #0]
 800ce24:	2301      	movs	r3, #1
 800ce26:	4804      	ldr	r0, [pc, #16]	; (800ce38 <xchg_spi+0x28>)
 800ce28:	f7fc fce9 	bl	80097fe <HAL_SPI_TransmitReceive>
    return rxDat;
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	20001404 	.word	0x20001404

0800ce3c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800ce3c:	b590      	push	{r4, r7, lr}
 800ce3e:	b085      	sub	sp, #20
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800ce46:	2300      	movs	r3, #0
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	e00a      	b.n	800ce62 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	18d4      	adds	r4, r2, r3
 800ce52:	20ff      	movs	r0, #255	; 0xff
 800ce54:	f7ff ffdc 	bl	800ce10 <xchg_spi>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	60fb      	str	r3, [r7, #12]
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d3f0      	bcc.n	800ce4c <rcvr_spi_multi+0x10>
	}
}
 800ce6a:	bf00      	nop
 800ce6c:	bf00      	nop
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd90      	pop	{r4, r7, pc}

0800ce74 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800ce7e:	2300      	movs	r3, #0
 800ce80:	60fb      	str	r3, [r7, #12]
 800ce82:	e009      	b.n	800ce98 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	4413      	add	r3, r2
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7ff ffbf 	bl	800ce10 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	3301      	adds	r3, #1
 800ce96:	60fb      	str	r3, [r7, #12]
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d3f1      	bcc.n	800ce84 <xmit_spi_multi+0x10>
	}
}
 800cea0:	bf00      	nop
 800cea2:	bf00      	nop
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b086      	sub	sp, #24
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800ceb2:	f7f8 ff3b 	bl	8005d2c <HAL_GetTick>
 800ceb6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800cebc:	20ff      	movs	r0, #255	; 0xff
 800cebe:	f7ff ffa7 	bl	800ce10 <xchg_spi>
 800cec2:	4603      	mov	r3, r0
 800cec4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800cec6:	7bfb      	ldrb	r3, [r7, #15]
 800cec8:	2bff      	cmp	r3, #255	; 0xff
 800ceca:	d007      	beq.n	800cedc <wait_ready+0x32>
 800cecc:	f7f8 ff2e 	bl	8005d2c <HAL_GetTick>
 800ced0:	4602      	mov	r2, r0
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	1ad3      	subs	r3, r2, r3
 800ced6:	693a      	ldr	r2, [r7, #16]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d8ef      	bhi.n	800cebc <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800cedc:	7bfb      	ldrb	r3, [r7, #15]
 800cede:	2bff      	cmp	r3, #255	; 0xff
 800cee0:	bf0c      	ite	eq
 800cee2:	2301      	moveq	r3, #1
 800cee4:	2300      	movne	r3, #0
 800cee6:	b2db      	uxtb	r3, r3
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3718      	adds	r7, #24
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800cef4:	2201      	movs	r2, #1
 800cef6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cefa:	4804      	ldr	r0, [pc, #16]	; (800cf0c <despiselect+0x1c>)
 800cefc:	f7f9 fe52 	bl	8006ba4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800cf00:	20ff      	movs	r0, #255	; 0xff
 800cf02:	f7ff ff85 	bl	800ce10 <xchg_spi>

}
 800cf06:	bf00      	nop
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	40020000 	.word	0x40020000

0800cf10 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800cf14:	2200      	movs	r2, #0
 800cf16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cf1a:	480a      	ldr	r0, [pc, #40]	; (800cf44 <spiselect+0x34>)
 800cf1c:	f7f9 fe42 	bl	8006ba4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800cf20:	20ff      	movs	r0, #255	; 0xff
 800cf22:	f7ff ff75 	bl	800ce10 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800cf26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cf2a:	f7ff ffbe 	bl	800ceaa <wait_ready>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d001      	beq.n	800cf38 <spiselect+0x28>
 800cf34:	2301      	movs	r3, #1
 800cf36:	e002      	b.n	800cf3e <spiselect+0x2e>

	despiselect();
 800cf38:	f7ff ffda 	bl	800cef0 <despiselect>
	return 0;	/* Timeout */
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	40020000 	.word	0x40020000

0800cf48 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800cf52:	20c8      	movs	r0, #200	; 0xc8
 800cf54:	f7ff ff32 	bl	800cdbc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800cf58:	20ff      	movs	r0, #255	; 0xff
 800cf5a:	f7ff ff59 	bl	800ce10 <xchg_spi>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
 800cf64:	2bff      	cmp	r3, #255	; 0xff
 800cf66:	d104      	bne.n	800cf72 <rcvr_datablock+0x2a>
 800cf68:	f7ff ff3c 	bl	800cde4 <SPI_Timer_Status>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d1f2      	bne.n	800cf58 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800cf72:	7bfb      	ldrb	r3, [r7, #15]
 800cf74:	2bfe      	cmp	r3, #254	; 0xfe
 800cf76:	d001      	beq.n	800cf7c <rcvr_datablock+0x34>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	e00a      	b.n	800cf92 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800cf7c:	6839      	ldr	r1, [r7, #0]
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f7ff ff5c 	bl	800ce3c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800cf84:	20ff      	movs	r0, #255	; 0xff
 800cf86:	f7ff ff43 	bl	800ce10 <xchg_spi>
 800cf8a:	20ff      	movs	r0, #255	; 0xff
 800cf8c:	f7ff ff40 	bl	800ce10 <xchg_spi>

	return 1;						/* Function succeeded */
 800cf90:	2301      	movs	r3, #1
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b084      	sub	sp, #16
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800cfa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800cfaa:	f7ff ff7e 	bl	800ceaa <wait_ready>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d101      	bne.n	800cfb8 <xmit_datablock+0x1e>
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	e01e      	b.n	800cff6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800cfb8:	78fb      	ldrb	r3, [r7, #3]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7ff ff28 	bl	800ce10 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800cfc0:	78fb      	ldrb	r3, [r7, #3]
 800cfc2:	2bfd      	cmp	r3, #253	; 0xfd
 800cfc4:	d016      	beq.n	800cff4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800cfc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f7ff ff52 	bl	800ce74 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800cfd0:	20ff      	movs	r0, #255	; 0xff
 800cfd2:	f7ff ff1d 	bl	800ce10 <xchg_spi>
 800cfd6:	20ff      	movs	r0, #255	; 0xff
 800cfd8:	f7ff ff1a 	bl	800ce10 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800cfdc:	20ff      	movs	r0, #255	; 0xff
 800cfde:	f7ff ff17 	bl	800ce10 <xchg_spi>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800cfe6:	7bfb      	ldrb	r3, [r7, #15]
 800cfe8:	f003 031f 	and.w	r3, r3, #31
 800cfec:	2b05      	cmp	r3, #5
 800cfee:	d001      	beq.n	800cff4 <xmit_datablock+0x5a>
 800cff0:	2300      	movs	r3, #0
 800cff2:	e000      	b.n	800cff6 <xmit_datablock+0x5c>
	}
	return 1;
 800cff4:	2301      	movs	r3, #1
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800cffe:	b580      	push	{r7, lr}
 800d000:	b084      	sub	sp, #16
 800d002:	af00      	add	r7, sp, #0
 800d004:	4603      	mov	r3, r0
 800d006:	6039      	str	r1, [r7, #0]
 800d008:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800d00a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	da0e      	bge.n	800d030 <send_cmd+0x32>
		cmd &= 0x7F;
 800d012:	79fb      	ldrb	r3, [r7, #7]
 800d014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d018:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800d01a:	2100      	movs	r1, #0
 800d01c:	2037      	movs	r0, #55	; 0x37
 800d01e:	f7ff ffee 	bl	800cffe <send_cmd>
 800d022:	4603      	mov	r3, r0
 800d024:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800d026:	7bbb      	ldrb	r3, [r7, #14]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d901      	bls.n	800d030 <send_cmd+0x32>
 800d02c:	7bbb      	ldrb	r3, [r7, #14]
 800d02e:	e051      	b.n	800d0d4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800d030:	79fb      	ldrb	r3, [r7, #7]
 800d032:	2b0c      	cmp	r3, #12
 800d034:	d008      	beq.n	800d048 <send_cmd+0x4a>
		despiselect();
 800d036:	f7ff ff5b 	bl	800cef0 <despiselect>
		if (!spiselect()) return 0xFF;
 800d03a:	f7ff ff69 	bl	800cf10 <spiselect>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d101      	bne.n	800d048 <send_cmd+0x4a>
 800d044:	23ff      	movs	r3, #255	; 0xff
 800d046:	e045      	b.n	800d0d4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800d048:	79fb      	ldrb	r3, [r7, #7]
 800d04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	4618      	mov	r0, r3
 800d052:	f7ff fedd 	bl	800ce10 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	0e1b      	lsrs	r3, r3, #24
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7ff fed7 	bl	800ce10 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	0c1b      	lsrs	r3, r3, #16
 800d066:	b2db      	uxtb	r3, r3
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff fed1 	bl	800ce10 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	0a1b      	lsrs	r3, r3, #8
 800d072:	b2db      	uxtb	r3, r3
 800d074:	4618      	mov	r0, r3
 800d076:	f7ff fecb 	bl	800ce10 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	4618      	mov	r0, r3
 800d080:	f7ff fec6 	bl	800ce10 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800d084:	2301      	movs	r3, #1
 800d086:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800d088:	79fb      	ldrb	r3, [r7, #7]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d101      	bne.n	800d092 <send_cmd+0x94>
 800d08e:	2395      	movs	r3, #149	; 0x95
 800d090:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800d092:	79fb      	ldrb	r3, [r7, #7]
 800d094:	2b08      	cmp	r3, #8
 800d096:	d101      	bne.n	800d09c <send_cmd+0x9e>
 800d098:	2387      	movs	r3, #135	; 0x87
 800d09a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800d09c:	7bfb      	ldrb	r3, [r7, #15]
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7ff feb6 	bl	800ce10 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
 800d0a6:	2b0c      	cmp	r3, #12
 800d0a8:	d102      	bne.n	800d0b0 <send_cmd+0xb2>
 800d0aa:	20ff      	movs	r0, #255	; 0xff
 800d0ac:	f7ff feb0 	bl	800ce10 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800d0b0:	230a      	movs	r3, #10
 800d0b2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800d0b4:	20ff      	movs	r0, #255	; 0xff
 800d0b6:	f7ff feab 	bl	800ce10 <xchg_spi>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800d0be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	da05      	bge.n	800d0d2 <send_cmd+0xd4>
 800d0c6:	7bfb      	ldrb	r3, [r7, #15]
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	73fb      	strb	r3, [r7, #15]
 800d0cc:	7bfb      	ldrb	r3, [r7, #15]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d1f0      	bne.n	800d0b4 <send_cmd+0xb6>

	return res;							/* Return received response */
 800d0d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3710      	adds	r7, #16
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800d0dc:	b590      	push	{r4, r7, lr}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800d0e6:	79fb      	ldrb	r3, [r7, #7]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d001      	beq.n	800d0f0 <USER_SPI_initialize+0x14>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	e0d6      	b.n	800d29e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800d0f0:	4b6d      	ldr	r3, [pc, #436]	; (800d2a8 <USER_SPI_initialize+0x1cc>)
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	f003 0302 	and.w	r3, r3, #2
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d003      	beq.n	800d106 <USER_SPI_initialize+0x2a>
 800d0fe:	4b6a      	ldr	r3, [pc, #424]	; (800d2a8 <USER_SPI_initialize+0x1cc>)
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	b2db      	uxtb	r3, r3
 800d104:	e0cb      	b.n	800d29e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800d106:	4b69      	ldr	r3, [pc, #420]	; (800d2ac <USER_SPI_initialize+0x1d0>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800d110:	4b66      	ldr	r3, [pc, #408]	; (800d2ac <USER_SPI_initialize+0x1d0>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800d118:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800d11a:	230a      	movs	r3, #10
 800d11c:	73fb      	strb	r3, [r7, #15]
 800d11e:	e005      	b.n	800d12c <USER_SPI_initialize+0x50>
 800d120:	20ff      	movs	r0, #255	; 0xff
 800d122:	f7ff fe75 	bl	800ce10 <xchg_spi>
 800d126:	7bfb      	ldrb	r3, [r7, #15]
 800d128:	3b01      	subs	r3, #1
 800d12a:	73fb      	strb	r3, [r7, #15]
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1f6      	bne.n	800d120 <USER_SPI_initialize+0x44>

	ty = 0;
 800d132:	2300      	movs	r3, #0
 800d134:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800d136:	2100      	movs	r1, #0
 800d138:	2000      	movs	r0, #0
 800d13a:	f7ff ff60 	bl	800cffe <send_cmd>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b01      	cmp	r3, #1
 800d142:	f040 808b 	bne.w	800d25c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800d146:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d14a:	f7ff fe37 	bl	800cdbc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800d14e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d152:	2008      	movs	r0, #8
 800d154:	f7ff ff53 	bl	800cffe <send_cmd>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d151      	bne.n	800d202 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800d15e:	2300      	movs	r3, #0
 800d160:	73fb      	strb	r3, [r7, #15]
 800d162:	e00d      	b.n	800d180 <USER_SPI_initialize+0xa4>
 800d164:	7bfc      	ldrb	r4, [r7, #15]
 800d166:	20ff      	movs	r0, #255	; 0xff
 800d168:	f7ff fe52 	bl	800ce10 <xchg_spi>
 800d16c:	4603      	mov	r3, r0
 800d16e:	461a      	mov	r2, r3
 800d170:	f107 0310 	add.w	r3, r7, #16
 800d174:	4423      	add	r3, r4
 800d176:	f803 2c08 	strb.w	r2, [r3, #-8]
 800d17a:	7bfb      	ldrb	r3, [r7, #15]
 800d17c:	3301      	adds	r3, #1
 800d17e:	73fb      	strb	r3, [r7, #15]
 800d180:	7bfb      	ldrb	r3, [r7, #15]
 800d182:	2b03      	cmp	r3, #3
 800d184:	d9ee      	bls.n	800d164 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800d186:	7abb      	ldrb	r3, [r7, #10]
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d167      	bne.n	800d25c <USER_SPI_initialize+0x180>
 800d18c:	7afb      	ldrb	r3, [r7, #11]
 800d18e:	2baa      	cmp	r3, #170	; 0xaa
 800d190:	d164      	bne.n	800d25c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800d192:	bf00      	nop
 800d194:	f7ff fe26 	bl	800cde4 <SPI_Timer_Status>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d007      	beq.n	800d1ae <USER_SPI_initialize+0xd2>
 800d19e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d1a2:	20a9      	movs	r0, #169	; 0xa9
 800d1a4:	f7ff ff2b 	bl	800cffe <send_cmd>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d1f2      	bne.n	800d194 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800d1ae:	f7ff fe19 	bl	800cde4 <SPI_Timer_Status>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d051      	beq.n	800d25c <USER_SPI_initialize+0x180>
 800d1b8:	2100      	movs	r1, #0
 800d1ba:	203a      	movs	r0, #58	; 0x3a
 800d1bc:	f7ff ff1f 	bl	800cffe <send_cmd>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d14a      	bne.n	800d25c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	73fb      	strb	r3, [r7, #15]
 800d1ca:	e00d      	b.n	800d1e8 <USER_SPI_initialize+0x10c>
 800d1cc:	7bfc      	ldrb	r4, [r7, #15]
 800d1ce:	20ff      	movs	r0, #255	; 0xff
 800d1d0:	f7ff fe1e 	bl	800ce10 <xchg_spi>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	f107 0310 	add.w	r3, r7, #16
 800d1dc:	4423      	add	r3, r4
 800d1de:	f803 2c08 	strb.w	r2, [r3, #-8]
 800d1e2:	7bfb      	ldrb	r3, [r7, #15]
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	73fb      	strb	r3, [r7, #15]
 800d1e8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ea:	2b03      	cmp	r3, #3
 800d1ec:	d9ee      	bls.n	800d1cc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800d1ee:	7a3b      	ldrb	r3, [r7, #8]
 800d1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d001      	beq.n	800d1fc <USER_SPI_initialize+0x120>
 800d1f8:	230c      	movs	r3, #12
 800d1fa:	e000      	b.n	800d1fe <USER_SPI_initialize+0x122>
 800d1fc:	2304      	movs	r3, #4
 800d1fe:	737b      	strb	r3, [r7, #13]
 800d200:	e02c      	b.n	800d25c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800d202:	2100      	movs	r1, #0
 800d204:	20a9      	movs	r0, #169	; 0xa9
 800d206:	f7ff fefa 	bl	800cffe <send_cmd>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d804      	bhi.n	800d21a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800d210:	2302      	movs	r3, #2
 800d212:	737b      	strb	r3, [r7, #13]
 800d214:	23a9      	movs	r3, #169	; 0xa9
 800d216:	73bb      	strb	r3, [r7, #14]
 800d218:	e003      	b.n	800d222 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800d21a:	2301      	movs	r3, #1
 800d21c:	737b      	strb	r3, [r7, #13]
 800d21e:	2301      	movs	r3, #1
 800d220:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800d222:	bf00      	nop
 800d224:	f7ff fdde 	bl	800cde4 <SPI_Timer_Status>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d007      	beq.n	800d23e <USER_SPI_initialize+0x162>
 800d22e:	7bbb      	ldrb	r3, [r7, #14]
 800d230:	2100      	movs	r1, #0
 800d232:	4618      	mov	r0, r3
 800d234:	f7ff fee3 	bl	800cffe <send_cmd>
 800d238:	4603      	mov	r3, r0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d1f2      	bne.n	800d224 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800d23e:	f7ff fdd1 	bl	800cde4 <SPI_Timer_Status>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	d007      	beq.n	800d258 <USER_SPI_initialize+0x17c>
 800d248:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d24c:	2010      	movs	r0, #16
 800d24e:	f7ff fed6 	bl	800cffe <send_cmd>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d001      	beq.n	800d25c <USER_SPI_initialize+0x180>
				ty = 0;
 800d258:	2300      	movs	r3, #0
 800d25a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800d25c:	4a14      	ldr	r2, [pc, #80]	; (800d2b0 <USER_SPI_initialize+0x1d4>)
 800d25e:	7b7b      	ldrb	r3, [r7, #13]
 800d260:	7013      	strb	r3, [r2, #0]
	despiselect();
 800d262:	f7ff fe45 	bl	800cef0 <despiselect>

	if (ty) {			/* OK */
 800d266:	7b7b      	ldrb	r3, [r7, #13]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d012      	beq.n	800d292 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800d26c:	4b0f      	ldr	r3, [pc, #60]	; (800d2ac <USER_SPI_initialize+0x1d0>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800d276:	4b0d      	ldr	r3, [pc, #52]	; (800d2ac <USER_SPI_initialize+0x1d0>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f042 0210 	orr.w	r2, r2, #16
 800d27e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800d280:	4b09      	ldr	r3, [pc, #36]	; (800d2a8 <USER_SPI_initialize+0x1cc>)
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	b2db      	uxtb	r3, r3
 800d286:	f023 0301 	bic.w	r3, r3, #1
 800d28a:	b2da      	uxtb	r2, r3
 800d28c:	4b06      	ldr	r3, [pc, #24]	; (800d2a8 <USER_SPI_initialize+0x1cc>)
 800d28e:	701a      	strb	r2, [r3, #0]
 800d290:	e002      	b.n	800d298 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800d292:	4b05      	ldr	r3, [pc, #20]	; (800d2a8 <USER_SPI_initialize+0x1cc>)
 800d294:	2201      	movs	r2, #1
 800d296:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800d298:	4b03      	ldr	r3, [pc, #12]	; (800d2a8 <USER_SPI_initialize+0x1cc>)
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	b2db      	uxtb	r3, r3
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd90      	pop	{r4, r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	20000024 	.word	0x20000024
 800d2ac:	20001404 	.word	0x20001404
 800d2b0:	2000064d 	.word	0x2000064d

0800d2b4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800d2be:	79fb      	ldrb	r3, [r7, #7]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d001      	beq.n	800d2c8 <USER_SPI_status+0x14>
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e002      	b.n	800d2ce <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800d2c8:	4b04      	ldr	r3, [pc, #16]	; (800d2dc <USER_SPI_status+0x28>)
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	b2db      	uxtb	r3, r3
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	370c      	adds	r7, #12
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d8:	4770      	bx	lr
 800d2da:	bf00      	nop
 800d2dc:	20000024 	.word	0x20000024

0800d2e0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60b9      	str	r1, [r7, #8]
 800d2e8:	607a      	str	r2, [r7, #4]
 800d2ea:	603b      	str	r3, [r7, #0]
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d102      	bne.n	800d2fc <USER_SPI_read+0x1c>
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d101      	bne.n	800d300 <USER_SPI_read+0x20>
 800d2fc:	2304      	movs	r3, #4
 800d2fe:	e04d      	b.n	800d39c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800d300:	4b28      	ldr	r3, [pc, #160]	; (800d3a4 <USER_SPI_read+0xc4>)
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	b2db      	uxtb	r3, r3
 800d306:	f003 0301 	and.w	r3, r3, #1
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <USER_SPI_read+0x32>
 800d30e:	2303      	movs	r3, #3
 800d310:	e044      	b.n	800d39c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800d312:	4b25      	ldr	r3, [pc, #148]	; (800d3a8 <USER_SPI_read+0xc8>)
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	f003 0308 	and.w	r3, r3, #8
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d102      	bne.n	800d324 <USER_SPI_read+0x44>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	025b      	lsls	r3, r3, #9
 800d322:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	2b01      	cmp	r3, #1
 800d328:	d111      	bne.n	800d34e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800d32a:	6879      	ldr	r1, [r7, #4]
 800d32c:	2011      	movs	r0, #17
 800d32e:	f7ff fe66 	bl	800cffe <send_cmd>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d129      	bne.n	800d38c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800d338:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d33c:	68b8      	ldr	r0, [r7, #8]
 800d33e:	f7ff fe03 	bl	800cf48 <rcvr_datablock>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d021      	beq.n	800d38c <USER_SPI_read+0xac>
			count = 0;
 800d348:	2300      	movs	r3, #0
 800d34a:	603b      	str	r3, [r7, #0]
 800d34c:	e01e      	b.n	800d38c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800d34e:	6879      	ldr	r1, [r7, #4]
 800d350:	2012      	movs	r0, #18
 800d352:	f7ff fe54 	bl	800cffe <send_cmd>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d117      	bne.n	800d38c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800d35c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d360:	68b8      	ldr	r0, [r7, #8]
 800d362:	f7ff fdf1 	bl	800cf48 <rcvr_datablock>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d00a      	beq.n	800d382 <USER_SPI_read+0xa2>
				buff += 512;
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d372:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	3b01      	subs	r3, #1
 800d378:	603b      	str	r3, [r7, #0]
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1ed      	bne.n	800d35c <USER_SPI_read+0x7c>
 800d380:	e000      	b.n	800d384 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800d382:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800d384:	2100      	movs	r1, #0
 800d386:	200c      	movs	r0, #12
 800d388:	f7ff fe39 	bl	800cffe <send_cmd>
		}
	}
	despiselect();
 800d38c:	f7ff fdb0 	bl	800cef0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	bf14      	ite	ne
 800d396:	2301      	movne	r3, #1
 800d398:	2300      	moveq	r3, #0
 800d39a:	b2db      	uxtb	r3, r3
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	20000024 	.word	0x20000024
 800d3a8:	2000064d 	.word	0x2000064d

0800d3ac <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60b9      	str	r1, [r7, #8]
 800d3b4:	607a      	str	r2, [r7, #4]
 800d3b6:	603b      	str	r3, [r7, #0]
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800d3bc:	7bfb      	ldrb	r3, [r7, #15]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d102      	bne.n	800d3c8 <USER_SPI_write+0x1c>
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d101      	bne.n	800d3cc <USER_SPI_write+0x20>
 800d3c8:	2304      	movs	r3, #4
 800d3ca:	e063      	b.n	800d494 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800d3cc:	4b33      	ldr	r3, [pc, #204]	; (800d49c <USER_SPI_write+0xf0>)
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	f003 0301 	and.w	r3, r3, #1
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d001      	beq.n	800d3de <USER_SPI_write+0x32>
 800d3da:	2303      	movs	r3, #3
 800d3dc:	e05a      	b.n	800d494 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800d3de:	4b2f      	ldr	r3, [pc, #188]	; (800d49c <USER_SPI_write+0xf0>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	f003 0304 	and.w	r3, r3, #4
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d001      	beq.n	800d3f0 <USER_SPI_write+0x44>
 800d3ec:	2302      	movs	r3, #2
 800d3ee:	e051      	b.n	800d494 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800d3f0:	4b2b      	ldr	r3, [pc, #172]	; (800d4a0 <USER_SPI_write+0xf4>)
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	f003 0308 	and.w	r3, r3, #8
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d102      	bne.n	800d402 <USER_SPI_write+0x56>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	025b      	lsls	r3, r3, #9
 800d400:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d110      	bne.n	800d42a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800d408:	6879      	ldr	r1, [r7, #4]
 800d40a:	2018      	movs	r0, #24
 800d40c:	f7ff fdf7 	bl	800cffe <send_cmd>
 800d410:	4603      	mov	r3, r0
 800d412:	2b00      	cmp	r3, #0
 800d414:	d136      	bne.n	800d484 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800d416:	21fe      	movs	r1, #254	; 0xfe
 800d418:	68b8      	ldr	r0, [r7, #8]
 800d41a:	f7ff fdbe 	bl	800cf9a <xmit_datablock>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d02f      	beq.n	800d484 <USER_SPI_write+0xd8>
			count = 0;
 800d424:	2300      	movs	r3, #0
 800d426:	603b      	str	r3, [r7, #0]
 800d428:	e02c      	b.n	800d484 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800d42a:	4b1d      	ldr	r3, [pc, #116]	; (800d4a0 <USER_SPI_write+0xf4>)
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	f003 0306 	and.w	r3, r3, #6
 800d432:	2b00      	cmp	r3, #0
 800d434:	d003      	beq.n	800d43e <USER_SPI_write+0x92>
 800d436:	6839      	ldr	r1, [r7, #0]
 800d438:	2097      	movs	r0, #151	; 0x97
 800d43a:	f7ff fde0 	bl	800cffe <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800d43e:	6879      	ldr	r1, [r7, #4]
 800d440:	2019      	movs	r0, #25
 800d442:	f7ff fddc 	bl	800cffe <send_cmd>
 800d446:	4603      	mov	r3, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d11b      	bne.n	800d484 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800d44c:	21fc      	movs	r1, #252	; 0xfc
 800d44e:	68b8      	ldr	r0, [r7, #8]
 800d450:	f7ff fda3 	bl	800cf9a <xmit_datablock>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00a      	beq.n	800d470 <USER_SPI_write+0xc4>
				buff += 512;
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d460:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	3b01      	subs	r3, #1
 800d466:	603b      	str	r3, [r7, #0]
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1ee      	bne.n	800d44c <USER_SPI_write+0xa0>
 800d46e:	e000      	b.n	800d472 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800d470:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800d472:	21fd      	movs	r1, #253	; 0xfd
 800d474:	2000      	movs	r0, #0
 800d476:	f7ff fd90 	bl	800cf9a <xmit_datablock>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d101      	bne.n	800d484 <USER_SPI_write+0xd8>
 800d480:	2301      	movs	r3, #1
 800d482:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800d484:	f7ff fd34 	bl	800cef0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	bf14      	ite	ne
 800d48e:	2301      	movne	r3, #1
 800d490:	2300      	moveq	r3, #0
 800d492:	b2db      	uxtb	r3, r3
}
 800d494:	4618      	mov	r0, r3
 800d496:	3710      	adds	r7, #16
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	20000024 	.word	0x20000024
 800d4a0:	2000064d 	.word	0x2000064d

0800d4a4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b08c      	sub	sp, #48	; 0x30
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	603a      	str	r2, [r7, #0]
 800d4ae:	71fb      	strb	r3, [r7, #7]
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800d4b4:	79fb      	ldrb	r3, [r7, #7]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d001      	beq.n	800d4be <USER_SPI_ioctl+0x1a>
 800d4ba:	2304      	movs	r3, #4
 800d4bc:	e15a      	b.n	800d774 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800d4be:	4baf      	ldr	r3, [pc, #700]	; (800d77c <USER_SPI_ioctl+0x2d8>)
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	f003 0301 	and.w	r3, r3, #1
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d001      	beq.n	800d4d0 <USER_SPI_ioctl+0x2c>
 800d4cc:	2303      	movs	r3, #3
 800d4ce:	e151      	b.n	800d774 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800d4d6:	79bb      	ldrb	r3, [r7, #6]
 800d4d8:	2b04      	cmp	r3, #4
 800d4da:	f200 8136 	bhi.w	800d74a <USER_SPI_ioctl+0x2a6>
 800d4de:	a201      	add	r2, pc, #4	; (adr r2, 800d4e4 <USER_SPI_ioctl+0x40>)
 800d4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e4:	0800d4f9 	.word	0x0800d4f9
 800d4e8:	0800d50d 	.word	0x0800d50d
 800d4ec:	0800d74b 	.word	0x0800d74b
 800d4f0:	0800d5b9 	.word	0x0800d5b9
 800d4f4:	0800d6af 	.word	0x0800d6af
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800d4f8:	f7ff fd0a 	bl	800cf10 <spiselect>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	f000 8127 	beq.w	800d752 <USER_SPI_ioctl+0x2ae>
 800d504:	2300      	movs	r3, #0
 800d506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800d50a:	e122      	b.n	800d752 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800d50c:	2100      	movs	r1, #0
 800d50e:	2009      	movs	r0, #9
 800d510:	f7ff fd75 	bl	800cffe <send_cmd>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	f040 811d 	bne.w	800d756 <USER_SPI_ioctl+0x2b2>
 800d51c:	f107 030c 	add.w	r3, r7, #12
 800d520:	2110      	movs	r1, #16
 800d522:	4618      	mov	r0, r3
 800d524:	f7ff fd10 	bl	800cf48 <rcvr_datablock>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f000 8113 	beq.w	800d756 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800d530:	7b3b      	ldrb	r3, [r7, #12]
 800d532:	099b      	lsrs	r3, r3, #6
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b01      	cmp	r3, #1
 800d538:	d111      	bne.n	800d55e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800d53a:	7d7b      	ldrb	r3, [r7, #21]
 800d53c:	461a      	mov	r2, r3
 800d53e:	7d3b      	ldrb	r3, [r7, #20]
 800d540:	021b      	lsls	r3, r3, #8
 800d542:	4413      	add	r3, r2
 800d544:	461a      	mov	r2, r3
 800d546:	7cfb      	ldrb	r3, [r7, #19]
 800d548:	041b      	lsls	r3, r3, #16
 800d54a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800d54e:	4413      	add	r3, r2
 800d550:	3301      	adds	r3, #1
 800d552:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	029a      	lsls	r2, r3, #10
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	601a      	str	r2, [r3, #0]
 800d55c:	e028      	b.n	800d5b0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800d55e:	7c7b      	ldrb	r3, [r7, #17]
 800d560:	f003 030f 	and.w	r3, r3, #15
 800d564:	b2da      	uxtb	r2, r3
 800d566:	7dbb      	ldrb	r3, [r7, #22]
 800d568:	09db      	lsrs	r3, r3, #7
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	4413      	add	r3, r2
 800d56e:	b2da      	uxtb	r2, r3
 800d570:	7d7b      	ldrb	r3, [r7, #21]
 800d572:	005b      	lsls	r3, r3, #1
 800d574:	b2db      	uxtb	r3, r3
 800d576:	f003 0306 	and.w	r3, r3, #6
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	4413      	add	r3, r2
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	3302      	adds	r3, #2
 800d582:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800d586:	7d3b      	ldrb	r3, [r7, #20]
 800d588:	099b      	lsrs	r3, r3, #6
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	461a      	mov	r2, r3
 800d58e:	7cfb      	ldrb	r3, [r7, #19]
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	441a      	add	r2, r3
 800d594:	7cbb      	ldrb	r3, [r7, #18]
 800d596:	029b      	lsls	r3, r3, #10
 800d598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d59c:	4413      	add	r3, r2
 800d59e:	3301      	adds	r3, #1
 800d5a0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800d5a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d5a6:	3b09      	subs	r3, #9
 800d5a8:	69fa      	ldr	r2, [r7, #28]
 800d5aa:	409a      	lsls	r2, r3
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800d5b6:	e0ce      	b.n	800d756 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800d5b8:	4b71      	ldr	r3, [pc, #452]	; (800d780 <USER_SPI_ioctl+0x2dc>)
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	f003 0304 	and.w	r3, r3, #4
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d031      	beq.n	800d628 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800d5c4:	2100      	movs	r1, #0
 800d5c6:	208d      	movs	r0, #141	; 0x8d
 800d5c8:	f7ff fd19 	bl	800cffe <send_cmd>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	f040 80c3 	bne.w	800d75a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800d5d4:	20ff      	movs	r0, #255	; 0xff
 800d5d6:	f7ff fc1b 	bl	800ce10 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800d5da:	f107 030c 	add.w	r3, r7, #12
 800d5de:	2110      	movs	r1, #16
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7ff fcb1 	bl	800cf48 <rcvr_datablock>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	f000 80b6 	beq.w	800d75a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800d5ee:	2330      	movs	r3, #48	; 0x30
 800d5f0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800d5f4:	e007      	b.n	800d606 <USER_SPI_ioctl+0x162>
 800d5f6:	20ff      	movs	r0, #255	; 0xff
 800d5f8:	f7ff fc0a 	bl	800ce10 <xchg_spi>
 800d5fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d600:	3b01      	subs	r3, #1
 800d602:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800d606:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d1f3      	bne.n	800d5f6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800d60e:	7dbb      	ldrb	r3, [r7, #22]
 800d610:	091b      	lsrs	r3, r3, #4
 800d612:	b2db      	uxtb	r3, r3
 800d614:	461a      	mov	r2, r3
 800d616:	2310      	movs	r3, #16
 800d618:	fa03 f202 	lsl.w	r2, r3, r2
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800d620:	2300      	movs	r3, #0
 800d622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800d626:	e098      	b.n	800d75a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800d628:	2100      	movs	r1, #0
 800d62a:	2009      	movs	r0, #9
 800d62c:	f7ff fce7 	bl	800cffe <send_cmd>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	f040 8091 	bne.w	800d75a <USER_SPI_ioctl+0x2b6>
 800d638:	f107 030c 	add.w	r3, r7, #12
 800d63c:	2110      	movs	r1, #16
 800d63e:	4618      	mov	r0, r3
 800d640:	f7ff fc82 	bl	800cf48 <rcvr_datablock>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 8087 	beq.w	800d75a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800d64c:	4b4c      	ldr	r3, [pc, #304]	; (800d780 <USER_SPI_ioctl+0x2dc>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	f003 0302 	and.w	r3, r3, #2
 800d654:	2b00      	cmp	r3, #0
 800d656:	d012      	beq.n	800d67e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800d658:	7dbb      	ldrb	r3, [r7, #22]
 800d65a:	005b      	lsls	r3, r3, #1
 800d65c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800d660:	7dfa      	ldrb	r2, [r7, #23]
 800d662:	09d2      	lsrs	r2, r2, #7
 800d664:	b2d2      	uxtb	r2, r2
 800d666:	4413      	add	r3, r2
 800d668:	1c5a      	adds	r2, r3, #1
 800d66a:	7e7b      	ldrb	r3, [r7, #25]
 800d66c:	099b      	lsrs	r3, r3, #6
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	3b01      	subs	r3, #1
 800d672:	fa02 f303 	lsl.w	r3, r2, r3
 800d676:	461a      	mov	r2, r3
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	601a      	str	r2, [r3, #0]
 800d67c:	e013      	b.n	800d6a6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800d67e:	7dbb      	ldrb	r3, [r7, #22]
 800d680:	109b      	asrs	r3, r3, #2
 800d682:	b29b      	uxth	r3, r3
 800d684:	f003 031f 	and.w	r3, r3, #31
 800d688:	3301      	adds	r3, #1
 800d68a:	7dfa      	ldrb	r2, [r7, #23]
 800d68c:	00d2      	lsls	r2, r2, #3
 800d68e:	f002 0218 	and.w	r2, r2, #24
 800d692:	7df9      	ldrb	r1, [r7, #23]
 800d694:	0949      	lsrs	r1, r1, #5
 800d696:	b2c9      	uxtb	r1, r1
 800d698:	440a      	add	r2, r1
 800d69a:	3201      	adds	r2, #1
 800d69c:	fb02 f303 	mul.w	r3, r2, r3
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800d6ac:	e055      	b.n	800d75a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800d6ae:	4b34      	ldr	r3, [pc, #208]	; (800d780 <USER_SPI_ioctl+0x2dc>)
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	f003 0306 	and.w	r3, r3, #6
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d051      	beq.n	800d75e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800d6ba:	f107 020c 	add.w	r2, r7, #12
 800d6be:	79fb      	ldrb	r3, [r7, #7]
 800d6c0:	210b      	movs	r1, #11
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7ff feee 	bl	800d4a4 <USER_SPI_ioctl>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d149      	bne.n	800d762 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800d6ce:	7b3b      	ldrb	r3, [r7, #12]
 800d6d0:	099b      	lsrs	r3, r3, #6
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d104      	bne.n	800d6e2 <USER_SPI_ioctl+0x23e>
 800d6d8:	7dbb      	ldrb	r3, [r7, #22]
 800d6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d041      	beq.n	800d766 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	623b      	str	r3, [r7, #32]
 800d6e6:	6a3b      	ldr	r3, [r7, #32]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6ec:	6a3b      	ldr	r3, [r7, #32]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800d6f2:	4b23      	ldr	r3, [pc, #140]	; (800d780 <USER_SPI_ioctl+0x2dc>)
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	f003 0308 	and.w	r3, r3, #8
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d105      	bne.n	800d70a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d700:	025b      	lsls	r3, r3, #9
 800d702:	62bb      	str	r3, [r7, #40]	; 0x28
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d706:	025b      	lsls	r3, r3, #9
 800d708:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800d70a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d70c:	2020      	movs	r0, #32
 800d70e:	f7ff fc76 	bl	800cffe <send_cmd>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d128      	bne.n	800d76a <USER_SPI_ioctl+0x2c6>
 800d718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d71a:	2021      	movs	r0, #33	; 0x21
 800d71c:	f7ff fc6f 	bl	800cffe <send_cmd>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d121      	bne.n	800d76a <USER_SPI_ioctl+0x2c6>
 800d726:	2100      	movs	r1, #0
 800d728:	2026      	movs	r0, #38	; 0x26
 800d72a:	f7ff fc68 	bl	800cffe <send_cmd>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d11a      	bne.n	800d76a <USER_SPI_ioctl+0x2c6>
 800d734:	f247 5030 	movw	r0, #30000	; 0x7530
 800d738:	f7ff fbb7 	bl	800ceaa <wait_ready>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d013      	beq.n	800d76a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800d742:	2300      	movs	r3, #0
 800d744:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800d748:	e00f      	b.n	800d76a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800d74a:	2304      	movs	r3, #4
 800d74c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d750:	e00c      	b.n	800d76c <USER_SPI_ioctl+0x2c8>
		break;
 800d752:	bf00      	nop
 800d754:	e00a      	b.n	800d76c <USER_SPI_ioctl+0x2c8>
		break;
 800d756:	bf00      	nop
 800d758:	e008      	b.n	800d76c <USER_SPI_ioctl+0x2c8>
		break;
 800d75a:	bf00      	nop
 800d75c:	e006      	b.n	800d76c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800d75e:	bf00      	nop
 800d760:	e004      	b.n	800d76c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800d762:	bf00      	nop
 800d764:	e002      	b.n	800d76c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800d766:	bf00      	nop
 800d768:	e000      	b.n	800d76c <USER_SPI_ioctl+0x2c8>
		break;
 800d76a:	bf00      	nop
	}

	despiselect();
 800d76c:	f7ff fbc0 	bl	800cef0 <despiselect>

	return res;
 800d770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d774:	4618      	mov	r0, r3
 800d776:	3730      	adds	r7, #48	; 0x30
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	20000024 	.word	0x20000024
 800d780:	2000064d 	.word	0x2000064d

0800d784 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	460b      	mov	r3, r1
 800d78e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d790:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d794:	f004 fb18 	bl	8011dc8 <USBD_static_malloc>
 800d798:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d105      	bne.n	800d7ac <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d7a8:	2302      	movs	r3, #2
 800d7aa:	e066      	b.n	800d87a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	7c1b      	ldrb	r3, [r3, #16]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d119      	bne.n	800d7f0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d7bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7c0:	2202      	movs	r2, #2
 800d7c2:	2181      	movs	r1, #129	; 0x81
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f004 f9dc 	bl	8011b82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d7d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7d4:	2202      	movs	r2, #2
 800d7d6:	2101      	movs	r1, #1
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f004 f9d2 	bl	8011b82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2210      	movs	r2, #16
 800d7ea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d7ee:	e016      	b.n	800d81e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d7f0:	2340      	movs	r3, #64	; 0x40
 800d7f2:	2202      	movs	r2, #2
 800d7f4:	2181      	movs	r1, #129	; 0x81
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f004 f9c3 	bl	8011b82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2201      	movs	r2, #1
 800d800:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d802:	2340      	movs	r3, #64	; 0x40
 800d804:	2202      	movs	r2, #2
 800d806:	2101      	movs	r1, #1
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f004 f9ba 	bl	8011b82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2201      	movs	r2, #1
 800d812:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2210      	movs	r2, #16
 800d81a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d81e:	2308      	movs	r3, #8
 800d820:	2203      	movs	r2, #3
 800d822:	2182      	movs	r1, #130	; 0x82
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f004 f9ac 	bl	8011b82 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2201      	movs	r2, #1
 800d82e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2200      	movs	r2, #0
 800d840:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2200      	movs	r2, #0
 800d848:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	7c1b      	ldrb	r3, [r3, #16]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d109      	bne.n	800d868 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d85a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d85e:	2101      	movs	r1, #1
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f004 fa7d 	bl	8011d60 <USBD_LL_PrepareReceive>
 800d866:	e007      	b.n	800d878 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d86e:	2340      	movs	r3, #64	; 0x40
 800d870:	2101      	movs	r1, #1
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f004 fa74 	bl	8011d60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d878:	2300      	movs	r3, #0
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}

0800d882 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d882:	b580      	push	{r7, lr}
 800d884:	b082      	sub	sp, #8
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
 800d88a:	460b      	mov	r3, r1
 800d88c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d88e:	2181      	movs	r1, #129	; 0x81
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f004 f99c 	bl	8011bce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d89c:	2101      	movs	r1, #1
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f004 f995 	bl	8011bce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d8ac:	2182      	movs	r1, #130	; 0x82
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f004 f98d 	bl	8011bce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d00e      	beq.n	800d8ec <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f004 fa80 	bl	8011de4 <USBD_static_free>
    pdev->pClassData = NULL;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d8ec:	2300      	movs	r3, #0
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3708      	adds	r7, #8
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
	...

0800d8f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d908:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d90a:	2300      	movs	r3, #0
 800d90c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d90e:	2300      	movs	r3, #0
 800d910:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d912:	2300      	movs	r3, #0
 800d914:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d101      	bne.n	800d920 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d91c:	2303      	movs	r3, #3
 800d91e:	e0af      	b.n	800da80 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d03f      	beq.n	800d9ac <USBD_CDC_Setup+0xb4>
 800d92c:	2b20      	cmp	r3, #32
 800d92e:	f040 809f 	bne.w	800da70 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	88db      	ldrh	r3, [r3, #6]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d02e      	beq.n	800d998 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	b25b      	sxtb	r3, r3
 800d940:	2b00      	cmp	r3, #0
 800d942:	da16      	bge.n	800d972 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d94a:	689b      	ldr	r3, [r3, #8]
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d950:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d952:	683a      	ldr	r2, [r7, #0]
 800d954:	88d2      	ldrh	r2, [r2, #6]
 800d956:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	88db      	ldrh	r3, [r3, #6]
 800d95c:	2b07      	cmp	r3, #7
 800d95e:	bf28      	it	cs
 800d960:	2307      	movcs	r3, #7
 800d962:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	89fa      	ldrh	r2, [r7, #14]
 800d968:	4619      	mov	r1, r3
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f001 fb19 	bl	800efa2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d970:	e085      	b.n	800da7e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	785a      	ldrb	r2, [r3, #1]
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	88db      	ldrh	r3, [r3, #6]
 800d980:	b2da      	uxtb	r2, r3
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d988:	6939      	ldr	r1, [r7, #16]
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	88db      	ldrh	r3, [r3, #6]
 800d98e:	461a      	mov	r2, r3
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f001 fb32 	bl	800effa <USBD_CtlPrepareRx>
      break;
 800d996:	e072      	b.n	800da7e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d99e:	689b      	ldr	r3, [r3, #8]
 800d9a0:	683a      	ldr	r2, [r7, #0]
 800d9a2:	7850      	ldrb	r0, [r2, #1]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	6839      	ldr	r1, [r7, #0]
 800d9a8:	4798      	blx	r3
      break;
 800d9aa:	e068      	b.n	800da7e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	785b      	ldrb	r3, [r3, #1]
 800d9b0:	2b0b      	cmp	r3, #11
 800d9b2:	d852      	bhi.n	800da5a <USBD_CDC_Setup+0x162>
 800d9b4:	a201      	add	r2, pc, #4	; (adr r2, 800d9bc <USBD_CDC_Setup+0xc4>)
 800d9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ba:	bf00      	nop
 800d9bc:	0800d9ed 	.word	0x0800d9ed
 800d9c0:	0800da69 	.word	0x0800da69
 800d9c4:	0800da5b 	.word	0x0800da5b
 800d9c8:	0800da5b 	.word	0x0800da5b
 800d9cc:	0800da5b 	.word	0x0800da5b
 800d9d0:	0800da5b 	.word	0x0800da5b
 800d9d4:	0800da5b 	.word	0x0800da5b
 800d9d8:	0800da5b 	.word	0x0800da5b
 800d9dc:	0800da5b 	.word	0x0800da5b
 800d9e0:	0800da5b 	.word	0x0800da5b
 800d9e4:	0800da17 	.word	0x0800da17
 800d9e8:	0800da41 	.word	0x0800da41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	2b03      	cmp	r3, #3
 800d9f6:	d107      	bne.n	800da08 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d9f8:	f107 030a 	add.w	r3, r7, #10
 800d9fc:	2202      	movs	r2, #2
 800d9fe:	4619      	mov	r1, r3
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f001 face 	bl	800efa2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da06:	e032      	b.n	800da6e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800da08:	6839      	ldr	r1, [r7, #0]
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f001 fa58 	bl	800eec0 <USBD_CtlError>
            ret = USBD_FAIL;
 800da10:	2303      	movs	r3, #3
 800da12:	75fb      	strb	r3, [r7, #23]
          break;
 800da14:	e02b      	b.n	800da6e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	2b03      	cmp	r3, #3
 800da20:	d107      	bne.n	800da32 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800da22:	f107 030d 	add.w	r3, r7, #13
 800da26:	2201      	movs	r2, #1
 800da28:	4619      	mov	r1, r3
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f001 fab9 	bl	800efa2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da30:	e01d      	b.n	800da6e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800da32:	6839      	ldr	r1, [r7, #0]
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f001 fa43 	bl	800eec0 <USBD_CtlError>
            ret = USBD_FAIL;
 800da3a:	2303      	movs	r3, #3
 800da3c:	75fb      	strb	r3, [r7, #23]
          break;
 800da3e:	e016      	b.n	800da6e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da46:	b2db      	uxtb	r3, r3
 800da48:	2b03      	cmp	r3, #3
 800da4a:	d00f      	beq.n	800da6c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800da4c:	6839      	ldr	r1, [r7, #0]
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f001 fa36 	bl	800eec0 <USBD_CtlError>
            ret = USBD_FAIL;
 800da54:	2303      	movs	r3, #3
 800da56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800da58:	e008      	b.n	800da6c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800da5a:	6839      	ldr	r1, [r7, #0]
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f001 fa2f 	bl	800eec0 <USBD_CtlError>
          ret = USBD_FAIL;
 800da62:	2303      	movs	r3, #3
 800da64:	75fb      	strb	r3, [r7, #23]
          break;
 800da66:	e002      	b.n	800da6e <USBD_CDC_Setup+0x176>
          break;
 800da68:	bf00      	nop
 800da6a:	e008      	b.n	800da7e <USBD_CDC_Setup+0x186>
          break;
 800da6c:	bf00      	nop
      }
      break;
 800da6e:	e006      	b.n	800da7e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800da70:	6839      	ldr	r1, [r7, #0]
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f001 fa24 	bl	800eec0 <USBD_CtlError>
      ret = USBD_FAIL;
 800da78:	2303      	movs	r3, #3
 800da7a:	75fb      	strb	r3, [r7, #23]
      break;
 800da7c:	bf00      	nop
  }

  return (uint8_t)ret;
 800da7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	460b      	mov	r3, r1
 800da92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d101      	bne.n	800daaa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800daa6:	2303      	movs	r3, #3
 800daa8:	e04f      	b.n	800db4a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dab0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800dab2:	78fa      	ldrb	r2, [r7, #3]
 800dab4:	6879      	ldr	r1, [r7, #4]
 800dab6:	4613      	mov	r3, r2
 800dab8:	009b      	lsls	r3, r3, #2
 800daba:	4413      	add	r3, r2
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	440b      	add	r3, r1
 800dac0:	3318      	adds	r3, #24
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d029      	beq.n	800db1c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dac8:	78fa      	ldrb	r2, [r7, #3]
 800daca:	6879      	ldr	r1, [r7, #4]
 800dacc:	4613      	mov	r3, r2
 800dace:	009b      	lsls	r3, r3, #2
 800dad0:	4413      	add	r3, r2
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	440b      	add	r3, r1
 800dad6:	3318      	adds	r3, #24
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	78f9      	ldrb	r1, [r7, #3]
 800dadc:	68f8      	ldr	r0, [r7, #12]
 800dade:	460b      	mov	r3, r1
 800dae0:	00db      	lsls	r3, r3, #3
 800dae2:	1a5b      	subs	r3, r3, r1
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	4403      	add	r3, r0
 800dae8:	3344      	adds	r3, #68	; 0x44
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	fbb2 f1f3 	udiv	r1, r2, r3
 800daf0:	fb03 f301 	mul.w	r3, r3, r1
 800daf4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d110      	bne.n	800db1c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800dafa:	78fa      	ldrb	r2, [r7, #3]
 800dafc:	6879      	ldr	r1, [r7, #4]
 800dafe:	4613      	mov	r3, r2
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4413      	add	r3, r2
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	440b      	add	r3, r1
 800db08:	3318      	adds	r3, #24
 800db0a:	2200      	movs	r2, #0
 800db0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800db0e:	78f9      	ldrb	r1, [r7, #3]
 800db10:	2300      	movs	r3, #0
 800db12:	2200      	movs	r2, #0
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f004 f902 	bl	8011d1e <USBD_LL_Transmit>
 800db1a:	e015      	b.n	800db48 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	2200      	movs	r2, #0
 800db20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db2a:	691b      	ldr	r3, [r3, #16]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00b      	beq.n	800db48 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	68ba      	ldr	r2, [r7, #8]
 800db3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800db3e:	68ba      	ldr	r2, [r7, #8]
 800db40:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800db44:	78fa      	ldrb	r2, [r7, #3]
 800db46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800db48:	2300      	movs	r3, #0
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3710      	adds	r7, #16
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b084      	sub	sp, #16
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
 800db5a:	460b      	mov	r3, r1
 800db5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db64:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d101      	bne.n	800db74 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800db70:	2303      	movs	r3, #3
 800db72:	e015      	b.n	800dba0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800db74:	78fb      	ldrb	r3, [r7, #3]
 800db76:	4619      	mov	r1, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f004 f912 	bl	8011da2 <USBD_LL_GetRxDataSize>
 800db7e:	4602      	mov	r2, r0
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db8c:	68db      	ldr	r3, [r3, #12]
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800db9a:	4611      	mov	r1, r2
 800db9c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3710      	adds	r7, #16
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbb6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d101      	bne.n	800dbc2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	e01b      	b.n	800dbfa <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d015      	beq.n	800dbf8 <USBD_CDC_EP0_RxReady+0x50>
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dbd2:	2bff      	cmp	r3, #255	; 0xff
 800dbd4:	d010      	beq.n	800dbf8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800dbe4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dbec:	b292      	uxth	r2, r2
 800dbee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	22ff      	movs	r2, #255	; 0xff
 800dbf4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800dbf8:	2300      	movs	r3, #0
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
	...

0800dc04 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2243      	movs	r2, #67	; 0x43
 800dc10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800dc12:	4b03      	ldr	r3, [pc, #12]	; (800dc20 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr
 800dc20:	200000b0 	.word	0x200000b0

0800dc24 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b083      	sub	sp, #12
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2243      	movs	r2, #67	; 0x43
 800dc30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800dc32:	4b03      	ldr	r3, [pc, #12]	; (800dc40 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr
 800dc40:	2000006c 	.word	0x2000006c

0800dc44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b083      	sub	sp, #12
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2243      	movs	r2, #67	; 0x43
 800dc50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800dc52:	4b03      	ldr	r3, [pc, #12]	; (800dc60 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr
 800dc60:	200000f4 	.word	0x200000f4

0800dc64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	220a      	movs	r2, #10
 800dc70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dc72:	4b03      	ldr	r3, [pc, #12]	; (800dc80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr
 800dc80:	20000028 	.word	0x20000028

0800dc84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d101      	bne.n	800dc98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dc94:	2303      	movs	r3, #3
 800dc96:	e004      	b.n	800dca2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	683a      	ldr	r2, [r7, #0]
 800dc9c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dca0:	2300      	movs	r3, #0
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	370c      	adds	r7, #12
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr

0800dcae <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dcae:	b480      	push	{r7}
 800dcb0:	b087      	sub	sp, #28
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	60f8      	str	r0, [r7, #12]
 800dcb6:	60b9      	str	r1, [r7, #8]
 800dcb8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcc0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d101      	bne.n	800dccc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dcc8:	2303      	movs	r3, #3
 800dcca:	e008      	b.n	800dcde <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	68ba      	ldr	r2, [r7, #8]
 800dcd0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	687a      	ldr	r2, [r7, #4]
 800dcd8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dcdc:	2300      	movs	r3, #0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	371c      	adds	r7, #28
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr

0800dcea <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dcea:	b480      	push	{r7}
 800dcec:	b085      	sub	sp, #20
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
 800dcf2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcfa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d101      	bne.n	800dd06 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800dd02:	2303      	movs	r3, #3
 800dd04:	e004      	b.n	800dd10 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	683a      	ldr	r2, [r7, #0]
 800dd0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dd0e:	2300      	movs	r3, #0
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3714      	adds	r7, #20
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr

0800dd1c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd2a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d101      	bne.n	800dd3e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dd3a:	2303      	movs	r3, #3
 800dd3c:	e01a      	b.n	800dd74 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d114      	bne.n	800dd72 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800dd66:	2181      	movs	r1, #129	; 0x81
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f003 ffd8 	bl	8011d1e <USBD_LL_Transmit>

    ret = USBD_OK;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800dd72:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd74:	4618      	mov	r0, r3
 800dd76:	3710      	adds	r7, #16
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b084      	sub	sp, #16
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d101      	bne.n	800dd9a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dd96:	2303      	movs	r3, #3
 800dd98:	e016      	b.n	800ddc8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	7c1b      	ldrb	r3, [r3, #16]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d109      	bne.n	800ddb6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dda8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddac:	2101      	movs	r1, #1
 800ddae:	6878      	ldr	r0, [r7, #4]
 800ddb0:	f003 ffd6 	bl	8011d60 <USBD_LL_PrepareReceive>
 800ddb4:	e007      	b.n	800ddc6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ddbc:	2340      	movs	r3, #64	; 0x40
 800ddbe:	2101      	movs	r1, #1
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f003 ffcd 	bl	8011d60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3710      	adds	r7, #16
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}

0800ddd0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b086      	sub	sp, #24
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	4613      	mov	r3, r2
 800dddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d101      	bne.n	800dde8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dde4:	2303      	movs	r3, #3
 800dde6:	e01f      	b.n	800de28 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d003      	beq.n	800de0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	68ba      	ldr	r2, [r7, #8]
 800de0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2201      	movs	r2, #1
 800de12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	79fa      	ldrb	r2, [r7, #7]
 800de1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f003 fe49 	bl	8011ab4 <USBD_LL_Init>
 800de22:	4603      	mov	r3, r0
 800de24:	75fb      	strb	r3, [r7, #23]

  return ret;
 800de26:	7dfb      	ldrb	r3, [r7, #23]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3718      	adds	r7, #24
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de3a:	2300      	movs	r3, #0
 800de3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d101      	bne.n	800de48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800de44:	2303      	movs	r3, #3
 800de46:	e016      	b.n	800de76 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	683a      	ldr	r2, [r7, #0]
 800de4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00b      	beq.n	800de74 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de64:	f107 020e 	add.w	r2, r7, #14
 800de68:	4610      	mov	r0, r2
 800de6a:	4798      	blx	r3
 800de6c:	4602      	mov	r2, r0
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3710      	adds	r7, #16
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}

0800de7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800de7e:	b580      	push	{r7, lr}
 800de80:	b082      	sub	sp, #8
 800de82:	af00      	add	r7, sp, #0
 800de84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f003 fe60 	bl	8011b4c <USBD_LL_Start>
 800de8c:	4603      	mov	r3, r0
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3708      	adds	r7, #8
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}

0800de96 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800de96:	b480      	push	{r7}
 800de98:	b083      	sub	sp, #12
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	370c      	adds	r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	460b      	mov	r3, r1
 800deb6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800deb8:	2303      	movs	r3, #3
 800deba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d009      	beq.n	800deda <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	78fa      	ldrb	r2, [r7, #3]
 800ded0:	4611      	mov	r1, r2
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	4798      	blx	r3
 800ded6:	4603      	mov	r3, r0
 800ded8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800deda:	7bfb      	ldrb	r3, [r7, #15]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	460b      	mov	r3, r1
 800deee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800def6:	2b00      	cmp	r3, #0
 800def8:	d007      	beq.n	800df0a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	78fa      	ldrb	r2, [r7, #3]
 800df04:	4611      	mov	r1, r2
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	4798      	blx	r3
  }

  return USBD_OK;
 800df0a:	2300      	movs	r3, #0
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3708      	adds	r7, #8
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800df24:	6839      	ldr	r1, [r7, #0]
 800df26:	4618      	mov	r0, r3
 800df28:	f000 ff90 	bl	800ee4c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2201      	movs	r2, #1
 800df30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800df3a:	461a      	mov	r2, r3
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800df48:	f003 031f 	and.w	r3, r3, #31
 800df4c:	2b02      	cmp	r3, #2
 800df4e:	d01a      	beq.n	800df86 <USBD_LL_SetupStage+0x72>
 800df50:	2b02      	cmp	r3, #2
 800df52:	d822      	bhi.n	800df9a <USBD_LL_SetupStage+0x86>
 800df54:	2b00      	cmp	r3, #0
 800df56:	d002      	beq.n	800df5e <USBD_LL_SetupStage+0x4a>
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d00a      	beq.n	800df72 <USBD_LL_SetupStage+0x5e>
 800df5c:	e01d      	b.n	800df9a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800df64:	4619      	mov	r1, r3
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f000 fa62 	bl	800e430 <USBD_StdDevReq>
 800df6c:	4603      	mov	r3, r0
 800df6e:	73fb      	strb	r3, [r7, #15]
      break;
 800df70:	e020      	b.n	800dfb4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800df78:	4619      	mov	r1, r3
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 fac6 	bl	800e50c <USBD_StdItfReq>
 800df80:	4603      	mov	r3, r0
 800df82:	73fb      	strb	r3, [r7, #15]
      break;
 800df84:	e016      	b.n	800dfb4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800df8c:	4619      	mov	r1, r3
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 fb05 	bl	800e59e <USBD_StdEPReq>
 800df94:	4603      	mov	r3, r0
 800df96:	73fb      	strb	r3, [r7, #15]
      break;
 800df98:	e00c      	b.n	800dfb4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dfa0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f003 fe2f 	bl	8011c0c <USBD_LL_StallEP>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	73fb      	strb	r3, [r7, #15]
      break;
 800dfb2:	bf00      	nop
  }

  return ret;
 800dfb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3710      	adds	r7, #16
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b086      	sub	sp, #24
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	60f8      	str	r0, [r7, #12]
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	607a      	str	r2, [r7, #4]
 800dfca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dfcc:	7afb      	ldrb	r3, [r7, #11]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d138      	bne.n	800e044 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dfd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dfe0:	2b03      	cmp	r3, #3
 800dfe2:	d14a      	bne.n	800e07a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	689a      	ldr	r2, [r3, #8]
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d913      	bls.n	800e018 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	689a      	ldr	r2, [r3, #8]
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	1ad2      	subs	r2, r2, r3
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	68da      	ldr	r2, [r3, #12]
 800e002:	693b      	ldr	r3, [r7, #16]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	4293      	cmp	r3, r2
 800e008:	bf28      	it	cs
 800e00a:	4613      	movcs	r3, r2
 800e00c:	461a      	mov	r2, r3
 800e00e:	6879      	ldr	r1, [r7, #4]
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	f001 f80f 	bl	800f034 <USBD_CtlContinueRx>
 800e016:	e030      	b.n	800e07a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	2b03      	cmp	r3, #3
 800e022:	d10b      	bne.n	800e03c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d005      	beq.n	800e03c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e036:	691b      	ldr	r3, [r3, #16]
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e03c:	68f8      	ldr	r0, [r7, #12]
 800e03e:	f001 f80a 	bl	800f056 <USBD_CtlSendStatus>
 800e042:	e01a      	b.n	800e07a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	2b03      	cmp	r3, #3
 800e04e:	d114      	bne.n	800e07a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e056:	699b      	ldr	r3, [r3, #24]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d00e      	beq.n	800e07a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e062:	699b      	ldr	r3, [r3, #24]
 800e064:	7afa      	ldrb	r2, [r7, #11]
 800e066:	4611      	mov	r1, r2
 800e068:	68f8      	ldr	r0, [r7, #12]
 800e06a:	4798      	blx	r3
 800e06c:	4603      	mov	r3, r0
 800e06e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e070:	7dfb      	ldrb	r3, [r7, #23]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d001      	beq.n	800e07a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e076:	7dfb      	ldrb	r3, [r7, #23]
 800e078:	e000      	b.n	800e07c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3718      	adds	r7, #24
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b086      	sub	sp, #24
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	460b      	mov	r3, r1
 800e08e:	607a      	str	r2, [r7, #4]
 800e090:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e092:	7afb      	ldrb	r3, [r7, #11]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d16b      	bne.n	800e170 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	3314      	adds	r3, #20
 800e09c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e0a4:	2b02      	cmp	r3, #2
 800e0a6:	d156      	bne.n	800e156 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	689a      	ldr	r2, [r3, #8]
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d914      	bls.n	800e0de <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	689a      	ldr	r2, [r3, #8]
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	1ad2      	subs	r2, r2, r3
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	6879      	ldr	r1, [r7, #4]
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f000 ff84 	bl	800efd8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	2100      	movs	r1, #0
 800e0d6:	68f8      	ldr	r0, [r7, #12]
 800e0d8:	f003 fe42 	bl	8011d60 <USBD_LL_PrepareReceive>
 800e0dc:	e03b      	b.n	800e156 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	68da      	ldr	r2, [r3, #12]
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	689b      	ldr	r3, [r3, #8]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d11c      	bne.n	800e124 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	685a      	ldr	r2, [r3, #4]
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d316      	bcc.n	800e124 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	685a      	ldr	r2, [r3, #4]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e100:	429a      	cmp	r2, r3
 800e102:	d20f      	bcs.n	800e124 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e104:	2200      	movs	r2, #0
 800e106:	2100      	movs	r1, #0
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	f000 ff65 	bl	800efd8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2200      	movs	r2, #0
 800e112:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e116:	2300      	movs	r3, #0
 800e118:	2200      	movs	r2, #0
 800e11a:	2100      	movs	r1, #0
 800e11c:	68f8      	ldr	r0, [r7, #12]
 800e11e:	f003 fe1f 	bl	8011d60 <USBD_LL_PrepareReceive>
 800e122:	e018      	b.n	800e156 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	2b03      	cmp	r3, #3
 800e12e:	d10b      	bne.n	800e148 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d005      	beq.n	800e148 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	68f8      	ldr	r0, [r7, #12]
 800e146:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e148:	2180      	movs	r1, #128	; 0x80
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	f003 fd5e 	bl	8011c0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e150:	68f8      	ldr	r0, [r7, #12]
 800e152:	f000 ff93 	bl	800f07c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d122      	bne.n	800e1a6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	f7ff fe98 	bl	800de96 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2200      	movs	r2, #0
 800e16a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e16e:	e01a      	b.n	800e1a6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e176:	b2db      	uxtb	r3, r3
 800e178:	2b03      	cmp	r3, #3
 800e17a:	d114      	bne.n	800e1a6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e182:	695b      	ldr	r3, [r3, #20]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d00e      	beq.n	800e1a6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e18e:	695b      	ldr	r3, [r3, #20]
 800e190:	7afa      	ldrb	r2, [r7, #11]
 800e192:	4611      	mov	r1, r2
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	4798      	blx	r3
 800e198:	4603      	mov	r3, r0
 800e19a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e19c:	7dfb      	ldrb	r3, [r7, #23]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d001      	beq.n	800e1a6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e1a2:	7dfb      	ldrb	r3, [r7, #23]
 800e1a4:	e000      	b.n	800e1a8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e1a6:	2300      	movs	r3, #0
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3718      	adds	r7, #24
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d101      	bne.n	800e1e4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e1e0:	2303      	movs	r3, #3
 800e1e2:	e02f      	b.n	800e244 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d00f      	beq.n	800e20e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d009      	beq.n	800e20e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	6852      	ldr	r2, [r2, #4]
 800e206:	b2d2      	uxtb	r2, r2
 800e208:	4611      	mov	r1, r2
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e20e:	2340      	movs	r3, #64	; 0x40
 800e210:	2200      	movs	r2, #0
 800e212:	2100      	movs	r1, #0
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f003 fcb4 	bl	8011b82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2201      	movs	r2, #1
 800e21e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2240      	movs	r2, #64	; 0x40
 800e226:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e22a:	2340      	movs	r3, #64	; 0x40
 800e22c:	2200      	movs	r2, #0
 800e22e:	2180      	movs	r1, #128	; 0x80
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f003 fca6 	bl	8011b82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2201      	movs	r2, #1
 800e23a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2240      	movs	r2, #64	; 0x40
 800e240:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e242:	2300      	movs	r3, #0
}
 800e244:	4618      	mov	r0, r3
 800e246:	3708      	adds	r7, #8
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	460b      	mov	r3, r1
 800e256:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	78fa      	ldrb	r2, [r7, #3]
 800e25c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e27a:	b2da      	uxtb	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2204      	movs	r2, #4
 800e286:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	370c      	adds	r7, #12
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr

0800e298 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	2b04      	cmp	r3, #4
 800e2aa:	d106      	bne.n	800e2ba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e2b2:	b2da      	uxtb	r2, r3
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e2ba:	2300      	movs	r3, #0
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	370c      	adds	r7, #12
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d101      	bne.n	800e2de <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e2da:	2303      	movs	r3, #3
 800e2dc:	e012      	b.n	800e304 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	2b03      	cmp	r3, #3
 800e2e8:	d10b      	bne.n	800e302 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2f0:	69db      	ldr	r3, [r3, #28]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d005      	beq.n	800e302 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2fc:	69db      	ldr	r3, [r3, #28]
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	3708      	adds	r7, #8
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	460b      	mov	r3, r1
 800e316:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d101      	bne.n	800e326 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e322:	2303      	movs	r3, #3
 800e324:	e014      	b.n	800e350 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e32c:	b2db      	uxtb	r3, r3
 800e32e:	2b03      	cmp	r3, #3
 800e330:	d10d      	bne.n	800e34e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e338:	6a1b      	ldr	r3, [r3, #32]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d007      	beq.n	800e34e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e344:	6a1b      	ldr	r3, [r3, #32]
 800e346:	78fa      	ldrb	r2, [r7, #3]
 800e348:	4611      	mov	r1, r2
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	4618      	mov	r0, r3
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	460b      	mov	r3, r1
 800e362:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d101      	bne.n	800e372 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e36e:	2303      	movs	r3, #3
 800e370:	e014      	b.n	800e39c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	2b03      	cmp	r3, #3
 800e37c:	d10d      	bne.n	800e39a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e386:	2b00      	cmp	r3, #0
 800e388:	d007      	beq.n	800e39a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e392:	78fa      	ldrb	r2, [r7, #3]
 800e394:	4611      	mov	r1, r2
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e3ac:	2300      	movs	r3, #0
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	370c      	adds	r7, #12
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b8:	4770      	bx	lr

0800e3ba <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b082      	sub	sp, #8
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d009      	beq.n	800e3e8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	6852      	ldr	r2, [r2, #4]
 800e3e0:	b2d2      	uxtb	r2, r2
 800e3e2:	4611      	mov	r1, r2
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	4798      	blx	r3
  }

  return USBD_OK;
 800e3e8:	2300      	movs	r3, #0
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}

0800e3f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e3f2:	b480      	push	{r7}
 800e3f4:	b087      	sub	sp, #28
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	3301      	adds	r3, #1
 800e408:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e40a:	697b      	ldr	r3, [r7, #20]
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e410:	8a3b      	ldrh	r3, [r7, #16]
 800e412:	021b      	lsls	r3, r3, #8
 800e414:	b21a      	sxth	r2, r3
 800e416:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e41a:	4313      	orrs	r3, r2
 800e41c:	b21b      	sxth	r3, r3
 800e41e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e420:	89fb      	ldrh	r3, [r7, #14]
}
 800e422:	4618      	mov	r0, r3
 800e424:	371c      	adds	r7, #28
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr
	...

0800e430 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e43a:	2300      	movs	r3, #0
 800e43c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e446:	2b40      	cmp	r3, #64	; 0x40
 800e448:	d005      	beq.n	800e456 <USBD_StdDevReq+0x26>
 800e44a:	2b40      	cmp	r3, #64	; 0x40
 800e44c:	d853      	bhi.n	800e4f6 <USBD_StdDevReq+0xc6>
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d00b      	beq.n	800e46a <USBD_StdDevReq+0x3a>
 800e452:	2b20      	cmp	r3, #32
 800e454:	d14f      	bne.n	800e4f6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e45c:	689b      	ldr	r3, [r3, #8]
 800e45e:	6839      	ldr	r1, [r7, #0]
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	4798      	blx	r3
 800e464:	4603      	mov	r3, r0
 800e466:	73fb      	strb	r3, [r7, #15]
      break;
 800e468:	e04a      	b.n	800e500 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	785b      	ldrb	r3, [r3, #1]
 800e46e:	2b09      	cmp	r3, #9
 800e470:	d83b      	bhi.n	800e4ea <USBD_StdDevReq+0xba>
 800e472:	a201      	add	r2, pc, #4	; (adr r2, 800e478 <USBD_StdDevReq+0x48>)
 800e474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e478:	0800e4cd 	.word	0x0800e4cd
 800e47c:	0800e4e1 	.word	0x0800e4e1
 800e480:	0800e4eb 	.word	0x0800e4eb
 800e484:	0800e4d7 	.word	0x0800e4d7
 800e488:	0800e4eb 	.word	0x0800e4eb
 800e48c:	0800e4ab 	.word	0x0800e4ab
 800e490:	0800e4a1 	.word	0x0800e4a1
 800e494:	0800e4eb 	.word	0x0800e4eb
 800e498:	0800e4c3 	.word	0x0800e4c3
 800e49c:	0800e4b5 	.word	0x0800e4b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e4a0:	6839      	ldr	r1, [r7, #0]
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f000 f9de 	bl	800e864 <USBD_GetDescriptor>
          break;
 800e4a8:	e024      	b.n	800e4f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e4aa:	6839      	ldr	r1, [r7, #0]
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 fb43 	bl	800eb38 <USBD_SetAddress>
          break;
 800e4b2:	e01f      	b.n	800e4f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e4b4:	6839      	ldr	r1, [r7, #0]
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 fb82 	bl	800ebc0 <USBD_SetConfig>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	73fb      	strb	r3, [r7, #15]
          break;
 800e4c0:	e018      	b.n	800e4f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e4c2:	6839      	ldr	r1, [r7, #0]
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 fc21 	bl	800ed0c <USBD_GetConfig>
          break;
 800e4ca:	e013      	b.n	800e4f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e4cc:	6839      	ldr	r1, [r7, #0]
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 fc52 	bl	800ed78 <USBD_GetStatus>
          break;
 800e4d4:	e00e      	b.n	800e4f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e4d6:	6839      	ldr	r1, [r7, #0]
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 fc81 	bl	800ede0 <USBD_SetFeature>
          break;
 800e4de:	e009      	b.n	800e4f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e4e0:	6839      	ldr	r1, [r7, #0]
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 fc90 	bl	800ee08 <USBD_ClrFeature>
          break;
 800e4e8:	e004      	b.n	800e4f4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e4ea:	6839      	ldr	r1, [r7, #0]
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 fce7 	bl	800eec0 <USBD_CtlError>
          break;
 800e4f2:	bf00      	nop
      }
      break;
 800e4f4:	e004      	b.n	800e500 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e4f6:	6839      	ldr	r1, [r7, #0]
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 fce1 	bl	800eec0 <USBD_CtlError>
      break;
 800e4fe:	bf00      	nop
  }

  return ret;
 800e500:	7bfb      	ldrb	r3, [r7, #15]
}
 800e502:	4618      	mov	r0, r3
 800e504:	3710      	adds	r7, #16
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop

0800e50c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e516:	2300      	movs	r3, #0
 800e518:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e522:	2b40      	cmp	r3, #64	; 0x40
 800e524:	d005      	beq.n	800e532 <USBD_StdItfReq+0x26>
 800e526:	2b40      	cmp	r3, #64	; 0x40
 800e528:	d82f      	bhi.n	800e58a <USBD_StdItfReq+0x7e>
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d001      	beq.n	800e532 <USBD_StdItfReq+0x26>
 800e52e:	2b20      	cmp	r3, #32
 800e530:	d12b      	bne.n	800e58a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e538:	b2db      	uxtb	r3, r3
 800e53a:	3b01      	subs	r3, #1
 800e53c:	2b02      	cmp	r3, #2
 800e53e:	d81d      	bhi.n	800e57c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	889b      	ldrh	r3, [r3, #4]
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b01      	cmp	r3, #1
 800e548:	d813      	bhi.n	800e572 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e550:	689b      	ldr	r3, [r3, #8]
 800e552:	6839      	ldr	r1, [r7, #0]
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	4798      	blx	r3
 800e558:	4603      	mov	r3, r0
 800e55a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	88db      	ldrh	r3, [r3, #6]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d110      	bne.n	800e586 <USBD_StdItfReq+0x7a>
 800e564:	7bfb      	ldrb	r3, [r7, #15]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d10d      	bne.n	800e586 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 fd73 	bl	800f056 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e570:	e009      	b.n	800e586 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e572:	6839      	ldr	r1, [r7, #0]
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f000 fca3 	bl	800eec0 <USBD_CtlError>
          break;
 800e57a:	e004      	b.n	800e586 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e57c:	6839      	ldr	r1, [r7, #0]
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 fc9e 	bl	800eec0 <USBD_CtlError>
          break;
 800e584:	e000      	b.n	800e588 <USBD_StdItfReq+0x7c>
          break;
 800e586:	bf00      	nop
      }
      break;
 800e588:	e004      	b.n	800e594 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e58a:	6839      	ldr	r1, [r7, #0]
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 fc97 	bl	800eec0 <USBD_CtlError>
      break;
 800e592:	bf00      	nop
  }

  return ret;
 800e594:	7bfb      	ldrb	r3, [r7, #15]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b084      	sub	sp, #16
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
 800e5a6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	889b      	ldrh	r3, [r3, #4]
 800e5b0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e5ba:	2b40      	cmp	r3, #64	; 0x40
 800e5bc:	d007      	beq.n	800e5ce <USBD_StdEPReq+0x30>
 800e5be:	2b40      	cmp	r3, #64	; 0x40
 800e5c0:	f200 8145 	bhi.w	800e84e <USBD_StdEPReq+0x2b0>
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00c      	beq.n	800e5e2 <USBD_StdEPReq+0x44>
 800e5c8:	2b20      	cmp	r3, #32
 800e5ca:	f040 8140 	bne.w	800e84e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5d4:	689b      	ldr	r3, [r3, #8]
 800e5d6:	6839      	ldr	r1, [r7, #0]
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	4798      	blx	r3
 800e5dc:	4603      	mov	r3, r0
 800e5de:	73fb      	strb	r3, [r7, #15]
      break;
 800e5e0:	e13a      	b.n	800e858 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	785b      	ldrb	r3, [r3, #1]
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	d007      	beq.n	800e5fa <USBD_StdEPReq+0x5c>
 800e5ea:	2b03      	cmp	r3, #3
 800e5ec:	f300 8129 	bgt.w	800e842 <USBD_StdEPReq+0x2a4>
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d07f      	beq.n	800e6f4 <USBD_StdEPReq+0x156>
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d03c      	beq.n	800e672 <USBD_StdEPReq+0xd4>
 800e5f8:	e123      	b.n	800e842 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e600:	b2db      	uxtb	r3, r3
 800e602:	2b02      	cmp	r3, #2
 800e604:	d002      	beq.n	800e60c <USBD_StdEPReq+0x6e>
 800e606:	2b03      	cmp	r3, #3
 800e608:	d016      	beq.n	800e638 <USBD_StdEPReq+0x9a>
 800e60a:	e02c      	b.n	800e666 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e60c:	7bbb      	ldrb	r3, [r7, #14]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d00d      	beq.n	800e62e <USBD_StdEPReq+0x90>
 800e612:	7bbb      	ldrb	r3, [r7, #14]
 800e614:	2b80      	cmp	r3, #128	; 0x80
 800e616:	d00a      	beq.n	800e62e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e618:	7bbb      	ldrb	r3, [r7, #14]
 800e61a:	4619      	mov	r1, r3
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f003 faf5 	bl	8011c0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e622:	2180      	movs	r1, #128	; 0x80
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f003 faf1 	bl	8011c0c <USBD_LL_StallEP>
 800e62a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e62c:	e020      	b.n	800e670 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e62e:	6839      	ldr	r1, [r7, #0]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 fc45 	bl	800eec0 <USBD_CtlError>
              break;
 800e636:	e01b      	b.n	800e670 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	885b      	ldrh	r3, [r3, #2]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d10e      	bne.n	800e65e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e640:	7bbb      	ldrb	r3, [r7, #14]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d00b      	beq.n	800e65e <USBD_StdEPReq+0xc0>
 800e646:	7bbb      	ldrb	r3, [r7, #14]
 800e648:	2b80      	cmp	r3, #128	; 0x80
 800e64a:	d008      	beq.n	800e65e <USBD_StdEPReq+0xc0>
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	88db      	ldrh	r3, [r3, #6]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d104      	bne.n	800e65e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e654:	7bbb      	ldrb	r3, [r7, #14]
 800e656:	4619      	mov	r1, r3
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f003 fad7 	bl	8011c0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f000 fcf9 	bl	800f056 <USBD_CtlSendStatus>

              break;
 800e664:	e004      	b.n	800e670 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e666:	6839      	ldr	r1, [r7, #0]
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f000 fc29 	bl	800eec0 <USBD_CtlError>
              break;
 800e66e:	bf00      	nop
          }
          break;
 800e670:	e0ec      	b.n	800e84c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	2b02      	cmp	r3, #2
 800e67c:	d002      	beq.n	800e684 <USBD_StdEPReq+0xe6>
 800e67e:	2b03      	cmp	r3, #3
 800e680:	d016      	beq.n	800e6b0 <USBD_StdEPReq+0x112>
 800e682:	e030      	b.n	800e6e6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e684:	7bbb      	ldrb	r3, [r7, #14]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d00d      	beq.n	800e6a6 <USBD_StdEPReq+0x108>
 800e68a:	7bbb      	ldrb	r3, [r7, #14]
 800e68c:	2b80      	cmp	r3, #128	; 0x80
 800e68e:	d00a      	beq.n	800e6a6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e690:	7bbb      	ldrb	r3, [r7, #14]
 800e692:	4619      	mov	r1, r3
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f003 fab9 	bl	8011c0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e69a:	2180      	movs	r1, #128	; 0x80
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f003 fab5 	bl	8011c0c <USBD_LL_StallEP>
 800e6a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e6a4:	e025      	b.n	800e6f2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e6a6:	6839      	ldr	r1, [r7, #0]
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f000 fc09 	bl	800eec0 <USBD_CtlError>
              break;
 800e6ae:	e020      	b.n	800e6f2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	885b      	ldrh	r3, [r3, #2]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d11b      	bne.n	800e6f0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e6b8:	7bbb      	ldrb	r3, [r7, #14]
 800e6ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d004      	beq.n	800e6cc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e6c2:	7bbb      	ldrb	r3, [r7, #14]
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f003 fabf 	bl	8011c4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 fcc2 	bl	800f056 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	6839      	ldr	r1, [r7, #0]
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	4798      	blx	r3
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e6e4:	e004      	b.n	800e6f0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e6e6:	6839      	ldr	r1, [r7, #0]
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 fbe9 	bl	800eec0 <USBD_CtlError>
              break;
 800e6ee:	e000      	b.n	800e6f2 <USBD_StdEPReq+0x154>
              break;
 800e6f0:	bf00      	nop
          }
          break;
 800e6f2:	e0ab      	b.n	800e84c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	2b02      	cmp	r3, #2
 800e6fe:	d002      	beq.n	800e706 <USBD_StdEPReq+0x168>
 800e700:	2b03      	cmp	r3, #3
 800e702:	d032      	beq.n	800e76a <USBD_StdEPReq+0x1cc>
 800e704:	e097      	b.n	800e836 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e706:	7bbb      	ldrb	r3, [r7, #14]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d007      	beq.n	800e71c <USBD_StdEPReq+0x17e>
 800e70c:	7bbb      	ldrb	r3, [r7, #14]
 800e70e:	2b80      	cmp	r3, #128	; 0x80
 800e710:	d004      	beq.n	800e71c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e712:	6839      	ldr	r1, [r7, #0]
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 fbd3 	bl	800eec0 <USBD_CtlError>
                break;
 800e71a:	e091      	b.n	800e840 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e71c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e720:	2b00      	cmp	r3, #0
 800e722:	da0b      	bge.n	800e73c <USBD_StdEPReq+0x19e>
 800e724:	7bbb      	ldrb	r3, [r7, #14]
 800e726:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e72a:	4613      	mov	r3, r2
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	4413      	add	r3, r2
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	3310      	adds	r3, #16
 800e734:	687a      	ldr	r2, [r7, #4]
 800e736:	4413      	add	r3, r2
 800e738:	3304      	adds	r3, #4
 800e73a:	e00b      	b.n	800e754 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e73c:	7bbb      	ldrb	r3, [r7, #14]
 800e73e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e742:	4613      	mov	r3, r2
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	4413      	add	r3, r2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	4413      	add	r3, r2
 800e752:	3304      	adds	r3, #4
 800e754:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	2200      	movs	r2, #0
 800e75a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	2202      	movs	r2, #2
 800e760:	4619      	mov	r1, r3
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f000 fc1d 	bl	800efa2 <USBD_CtlSendData>
              break;
 800e768:	e06a      	b.n	800e840 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e76a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	da11      	bge.n	800e796 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e772:	7bbb      	ldrb	r3, [r7, #14]
 800e774:	f003 020f 	and.w	r2, r3, #15
 800e778:	6879      	ldr	r1, [r7, #4]
 800e77a:	4613      	mov	r3, r2
 800e77c:	009b      	lsls	r3, r3, #2
 800e77e:	4413      	add	r3, r2
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	440b      	add	r3, r1
 800e784:	3324      	adds	r3, #36	; 0x24
 800e786:	881b      	ldrh	r3, [r3, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d117      	bne.n	800e7bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e78c:	6839      	ldr	r1, [r7, #0]
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 fb96 	bl	800eec0 <USBD_CtlError>
                  break;
 800e794:	e054      	b.n	800e840 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e796:	7bbb      	ldrb	r3, [r7, #14]
 800e798:	f003 020f 	and.w	r2, r3, #15
 800e79c:	6879      	ldr	r1, [r7, #4]
 800e79e:	4613      	mov	r3, r2
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	4413      	add	r3, r2
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	440b      	add	r3, r1
 800e7a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e7ac:	881b      	ldrh	r3, [r3, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d104      	bne.n	800e7bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e7b2:	6839      	ldr	r1, [r7, #0]
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f000 fb83 	bl	800eec0 <USBD_CtlError>
                  break;
 800e7ba:	e041      	b.n	800e840 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e7bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	da0b      	bge.n	800e7dc <USBD_StdEPReq+0x23e>
 800e7c4:	7bbb      	ldrb	r3, [r7, #14]
 800e7c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7ca:	4613      	mov	r3, r2
 800e7cc:	009b      	lsls	r3, r3, #2
 800e7ce:	4413      	add	r3, r2
 800e7d0:	009b      	lsls	r3, r3, #2
 800e7d2:	3310      	adds	r3, #16
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	4413      	add	r3, r2
 800e7d8:	3304      	adds	r3, #4
 800e7da:	e00b      	b.n	800e7f4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e7dc:	7bbb      	ldrb	r3, [r7, #14]
 800e7de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e7e2:	4613      	mov	r3, r2
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	4413      	add	r3, r2
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	4413      	add	r3, r2
 800e7f2:	3304      	adds	r3, #4
 800e7f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e7f6:	7bbb      	ldrb	r3, [r7, #14]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d002      	beq.n	800e802 <USBD_StdEPReq+0x264>
 800e7fc:	7bbb      	ldrb	r3, [r7, #14]
 800e7fe:	2b80      	cmp	r3, #128	; 0x80
 800e800:	d103      	bne.n	800e80a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2200      	movs	r2, #0
 800e806:	601a      	str	r2, [r3, #0]
 800e808:	e00e      	b.n	800e828 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e80a:	7bbb      	ldrb	r3, [r7, #14]
 800e80c:	4619      	mov	r1, r3
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f003 fa3a 	bl	8011c88 <USBD_LL_IsStallEP>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d003      	beq.n	800e822 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	2201      	movs	r2, #1
 800e81e:	601a      	str	r2, [r3, #0]
 800e820:	e002      	b.n	800e828 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	2200      	movs	r2, #0
 800e826:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	2202      	movs	r2, #2
 800e82c:	4619      	mov	r1, r3
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 fbb7 	bl	800efa2 <USBD_CtlSendData>
              break;
 800e834:	e004      	b.n	800e840 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e836:	6839      	ldr	r1, [r7, #0]
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f000 fb41 	bl	800eec0 <USBD_CtlError>
              break;
 800e83e:	bf00      	nop
          }
          break;
 800e840:	e004      	b.n	800e84c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e842:	6839      	ldr	r1, [r7, #0]
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f000 fb3b 	bl	800eec0 <USBD_CtlError>
          break;
 800e84a:	bf00      	nop
      }
      break;
 800e84c:	e004      	b.n	800e858 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e84e:	6839      	ldr	r1, [r7, #0]
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f000 fb35 	bl	800eec0 <USBD_CtlError>
      break;
 800e856:	bf00      	nop
  }

  return ret;
 800e858:	7bfb      	ldrb	r3, [r7, #15]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3710      	adds	r7, #16
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
	...

0800e864 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e86e:	2300      	movs	r3, #0
 800e870:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e872:	2300      	movs	r3, #0
 800e874:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e876:	2300      	movs	r3, #0
 800e878:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	885b      	ldrh	r3, [r3, #2]
 800e87e:	0a1b      	lsrs	r3, r3, #8
 800e880:	b29b      	uxth	r3, r3
 800e882:	3b01      	subs	r3, #1
 800e884:	2b06      	cmp	r3, #6
 800e886:	f200 8128 	bhi.w	800eada <USBD_GetDescriptor+0x276>
 800e88a:	a201      	add	r2, pc, #4	; (adr r2, 800e890 <USBD_GetDescriptor+0x2c>)
 800e88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e890:	0800e8ad 	.word	0x0800e8ad
 800e894:	0800e8c5 	.word	0x0800e8c5
 800e898:	0800e905 	.word	0x0800e905
 800e89c:	0800eadb 	.word	0x0800eadb
 800e8a0:	0800eadb 	.word	0x0800eadb
 800e8a4:	0800ea7b 	.word	0x0800ea7b
 800e8a8:	0800eaa7 	.word	0x0800eaa7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	687a      	ldr	r2, [r7, #4]
 800e8b6:	7c12      	ldrb	r2, [r2, #16]
 800e8b8:	f107 0108 	add.w	r1, r7, #8
 800e8bc:	4610      	mov	r0, r2
 800e8be:	4798      	blx	r3
 800e8c0:	60f8      	str	r0, [r7, #12]
      break;
 800e8c2:	e112      	b.n	800eaea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	7c1b      	ldrb	r3, [r3, #16]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d10d      	bne.n	800e8e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8d4:	f107 0208 	add.w	r2, r7, #8
 800e8d8:	4610      	mov	r0, r2
 800e8da:	4798      	blx	r3
 800e8dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	2202      	movs	r2, #2
 800e8e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e8e6:	e100      	b.n	800eaea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f0:	f107 0208 	add.w	r2, r7, #8
 800e8f4:	4610      	mov	r0, r2
 800e8f6:	4798      	blx	r3
 800e8f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	2202      	movs	r2, #2
 800e900:	701a      	strb	r2, [r3, #0]
      break;
 800e902:	e0f2      	b.n	800eaea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	885b      	ldrh	r3, [r3, #2]
 800e908:	b2db      	uxtb	r3, r3
 800e90a:	2b05      	cmp	r3, #5
 800e90c:	f200 80ac 	bhi.w	800ea68 <USBD_GetDescriptor+0x204>
 800e910:	a201      	add	r2, pc, #4	; (adr r2, 800e918 <USBD_GetDescriptor+0xb4>)
 800e912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e916:	bf00      	nop
 800e918:	0800e931 	.word	0x0800e931
 800e91c:	0800e965 	.word	0x0800e965
 800e920:	0800e999 	.word	0x0800e999
 800e924:	0800e9cd 	.word	0x0800e9cd
 800e928:	0800ea01 	.word	0x0800ea01
 800e92c:	0800ea35 	.word	0x0800ea35
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d00b      	beq.n	800e954 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	7c12      	ldrb	r2, [r2, #16]
 800e948:	f107 0108 	add.w	r1, r7, #8
 800e94c:	4610      	mov	r0, r2
 800e94e:	4798      	blx	r3
 800e950:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e952:	e091      	b.n	800ea78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e954:	6839      	ldr	r1, [r7, #0]
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 fab2 	bl	800eec0 <USBD_CtlError>
            err++;
 800e95c:	7afb      	ldrb	r3, [r7, #11]
 800e95e:	3301      	adds	r3, #1
 800e960:	72fb      	strb	r3, [r7, #11]
          break;
 800e962:	e089      	b.n	800ea78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d00b      	beq.n	800e988 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	7c12      	ldrb	r2, [r2, #16]
 800e97c:	f107 0108 	add.w	r1, r7, #8
 800e980:	4610      	mov	r0, r2
 800e982:	4798      	blx	r3
 800e984:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e986:	e077      	b.n	800ea78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e988:	6839      	ldr	r1, [r7, #0]
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 fa98 	bl	800eec0 <USBD_CtlError>
            err++;
 800e990:	7afb      	ldrb	r3, [r7, #11]
 800e992:	3301      	adds	r3, #1
 800e994:	72fb      	strb	r3, [r7, #11]
          break;
 800e996:	e06f      	b.n	800ea78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e99e:	68db      	ldr	r3, [r3, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d00b      	beq.n	800e9bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	7c12      	ldrb	r2, [r2, #16]
 800e9b0:	f107 0108 	add.w	r1, r7, #8
 800e9b4:	4610      	mov	r0, r2
 800e9b6:	4798      	blx	r3
 800e9b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9ba:	e05d      	b.n	800ea78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e9bc:	6839      	ldr	r1, [r7, #0]
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f000 fa7e 	bl	800eec0 <USBD_CtlError>
            err++;
 800e9c4:	7afb      	ldrb	r3, [r7, #11]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	72fb      	strb	r3, [r7, #11]
          break;
 800e9ca:	e055      	b.n	800ea78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9d2:	691b      	ldr	r3, [r3, #16]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d00b      	beq.n	800e9f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9de:	691b      	ldr	r3, [r3, #16]
 800e9e0:	687a      	ldr	r2, [r7, #4]
 800e9e2:	7c12      	ldrb	r2, [r2, #16]
 800e9e4:	f107 0108 	add.w	r1, r7, #8
 800e9e8:	4610      	mov	r0, r2
 800e9ea:	4798      	blx	r3
 800e9ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9ee:	e043      	b.n	800ea78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e9f0:	6839      	ldr	r1, [r7, #0]
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f000 fa64 	bl	800eec0 <USBD_CtlError>
            err++;
 800e9f8:	7afb      	ldrb	r3, [r7, #11]
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	72fb      	strb	r3, [r7, #11]
          break;
 800e9fe:	e03b      	b.n	800ea78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea06:	695b      	ldr	r3, [r3, #20]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d00b      	beq.n	800ea24 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea12:	695b      	ldr	r3, [r3, #20]
 800ea14:	687a      	ldr	r2, [r7, #4]
 800ea16:	7c12      	ldrb	r2, [r2, #16]
 800ea18:	f107 0108 	add.w	r1, r7, #8
 800ea1c:	4610      	mov	r0, r2
 800ea1e:	4798      	blx	r3
 800ea20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea22:	e029      	b.n	800ea78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ea24:	6839      	ldr	r1, [r7, #0]
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 fa4a 	bl	800eec0 <USBD_CtlError>
            err++;
 800ea2c:	7afb      	ldrb	r3, [r7, #11]
 800ea2e:	3301      	adds	r3, #1
 800ea30:	72fb      	strb	r3, [r7, #11]
          break;
 800ea32:	e021      	b.n	800ea78 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea3a:	699b      	ldr	r3, [r3, #24]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d00b      	beq.n	800ea58 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea46:	699b      	ldr	r3, [r3, #24]
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	7c12      	ldrb	r2, [r2, #16]
 800ea4c:	f107 0108 	add.w	r1, r7, #8
 800ea50:	4610      	mov	r0, r2
 800ea52:	4798      	blx	r3
 800ea54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea56:	e00f      	b.n	800ea78 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ea58:	6839      	ldr	r1, [r7, #0]
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 fa30 	bl	800eec0 <USBD_CtlError>
            err++;
 800ea60:	7afb      	ldrb	r3, [r7, #11]
 800ea62:	3301      	adds	r3, #1
 800ea64:	72fb      	strb	r3, [r7, #11]
          break;
 800ea66:	e007      	b.n	800ea78 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ea68:	6839      	ldr	r1, [r7, #0]
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 fa28 	bl	800eec0 <USBD_CtlError>
          err++;
 800ea70:	7afb      	ldrb	r3, [r7, #11]
 800ea72:	3301      	adds	r3, #1
 800ea74:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ea76:	bf00      	nop
      }
      break;
 800ea78:	e037      	b.n	800eaea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	7c1b      	ldrb	r3, [r3, #16]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d109      	bne.n	800ea96 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea8a:	f107 0208 	add.w	r2, r7, #8
 800ea8e:	4610      	mov	r0, r2
 800ea90:	4798      	blx	r3
 800ea92:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ea94:	e029      	b.n	800eaea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ea96:	6839      	ldr	r1, [r7, #0]
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f000 fa11 	bl	800eec0 <USBD_CtlError>
        err++;
 800ea9e:	7afb      	ldrb	r3, [r7, #11]
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	72fb      	strb	r3, [r7, #11]
      break;
 800eaa4:	e021      	b.n	800eaea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	7c1b      	ldrb	r3, [r3, #16]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d10d      	bne.n	800eaca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eab6:	f107 0208 	add.w	r2, r7, #8
 800eaba:	4610      	mov	r0, r2
 800eabc:	4798      	blx	r3
 800eabe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	3301      	adds	r3, #1
 800eac4:	2207      	movs	r2, #7
 800eac6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eac8:	e00f      	b.n	800eaea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800eaca:	6839      	ldr	r1, [r7, #0]
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f000 f9f7 	bl	800eec0 <USBD_CtlError>
        err++;
 800ead2:	7afb      	ldrb	r3, [r7, #11]
 800ead4:	3301      	adds	r3, #1
 800ead6:	72fb      	strb	r3, [r7, #11]
      break;
 800ead8:	e007      	b.n	800eaea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800eada:	6839      	ldr	r1, [r7, #0]
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 f9ef 	bl	800eec0 <USBD_CtlError>
      err++;
 800eae2:	7afb      	ldrb	r3, [r7, #11]
 800eae4:	3301      	adds	r3, #1
 800eae6:	72fb      	strb	r3, [r7, #11]
      break;
 800eae8:	bf00      	nop
  }

  if (err != 0U)
 800eaea:	7afb      	ldrb	r3, [r7, #11]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d11e      	bne.n	800eb2e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	88db      	ldrh	r3, [r3, #6]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d016      	beq.n	800eb26 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800eaf8:	893b      	ldrh	r3, [r7, #8]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d00e      	beq.n	800eb1c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	88da      	ldrh	r2, [r3, #6]
 800eb02:	893b      	ldrh	r3, [r7, #8]
 800eb04:	4293      	cmp	r3, r2
 800eb06:	bf28      	it	cs
 800eb08:	4613      	movcs	r3, r2
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800eb0e:	893b      	ldrh	r3, [r7, #8]
 800eb10:	461a      	mov	r2, r3
 800eb12:	68f9      	ldr	r1, [r7, #12]
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 fa44 	bl	800efa2 <USBD_CtlSendData>
 800eb1a:	e009      	b.n	800eb30 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800eb1c:	6839      	ldr	r1, [r7, #0]
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 f9ce 	bl	800eec0 <USBD_CtlError>
 800eb24:	e004      	b.n	800eb30 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f000 fa95 	bl	800f056 <USBD_CtlSendStatus>
 800eb2c:	e000      	b.n	800eb30 <USBD_GetDescriptor+0x2cc>
    return;
 800eb2e:	bf00      	nop
  }
}
 800eb30:	3710      	adds	r7, #16
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop

0800eb38 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	889b      	ldrh	r3, [r3, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d131      	bne.n	800ebae <USBD_SetAddress+0x76>
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	88db      	ldrh	r3, [r3, #6]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d12d      	bne.n	800ebae <USBD_SetAddress+0x76>
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	885b      	ldrh	r3, [r3, #2]
 800eb56:	2b7f      	cmp	r3, #127	; 0x7f
 800eb58:	d829      	bhi.n	800ebae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	885b      	ldrh	r3, [r3, #2]
 800eb5e:	b2db      	uxtb	r3, r3
 800eb60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	2b03      	cmp	r3, #3
 800eb70:	d104      	bne.n	800eb7c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800eb72:	6839      	ldr	r1, [r7, #0]
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 f9a3 	bl	800eec0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb7a:	e01d      	b.n	800ebb8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	7bfa      	ldrb	r2, [r7, #15]
 800eb80:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800eb84:	7bfb      	ldrb	r3, [r7, #15]
 800eb86:	4619      	mov	r1, r3
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f003 f8a9 	bl	8011ce0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f000 fa61 	bl	800f056 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800eb94:	7bfb      	ldrb	r3, [r7, #15]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d004      	beq.n	800eba4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	2202      	movs	r2, #2
 800eb9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eba2:	e009      	b.n	800ebb8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2201      	movs	r2, #1
 800eba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebac:	e004      	b.n	800ebb8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ebae:	6839      	ldr	r1, [r7, #0]
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f000 f985 	bl	800eec0 <USBD_CtlError>
  }
}
 800ebb6:	bf00      	nop
 800ebb8:	bf00      	nop
 800ebba:	3710      	adds	r7, #16
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	885b      	ldrh	r3, [r3, #2]
 800ebd2:	b2da      	uxtb	r2, r3
 800ebd4:	4b4c      	ldr	r3, [pc, #304]	; (800ed08 <USBD_SetConfig+0x148>)
 800ebd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ebd8:	4b4b      	ldr	r3, [pc, #300]	; (800ed08 <USBD_SetConfig+0x148>)
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d905      	bls.n	800ebec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ebe0:	6839      	ldr	r1, [r7, #0]
 800ebe2:	6878      	ldr	r0, [r7, #4]
 800ebe4:	f000 f96c 	bl	800eec0 <USBD_CtlError>
    return USBD_FAIL;
 800ebe8:	2303      	movs	r3, #3
 800ebea:	e088      	b.n	800ecfe <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	2b02      	cmp	r3, #2
 800ebf6:	d002      	beq.n	800ebfe <USBD_SetConfig+0x3e>
 800ebf8:	2b03      	cmp	r3, #3
 800ebfa:	d025      	beq.n	800ec48 <USBD_SetConfig+0x88>
 800ebfc:	e071      	b.n	800ece2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ebfe:	4b42      	ldr	r3, [pc, #264]	; (800ed08 <USBD_SetConfig+0x148>)
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d01c      	beq.n	800ec40 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ec06:	4b40      	ldr	r3, [pc, #256]	; (800ed08 <USBD_SetConfig+0x148>)
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ec10:	4b3d      	ldr	r3, [pc, #244]	; (800ed08 <USBD_SetConfig+0x148>)
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	4619      	mov	r1, r3
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f7ff f948 	bl	800deac <USBD_SetClassConfig>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ec20:	7bfb      	ldrb	r3, [r7, #15]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d004      	beq.n	800ec30 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ec26:	6839      	ldr	r1, [r7, #0]
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f000 f949 	bl	800eec0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ec2e:	e065      	b.n	800ecfc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f000 fa10 	bl	800f056 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2203      	movs	r2, #3
 800ec3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ec3e:	e05d      	b.n	800ecfc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f000 fa08 	bl	800f056 <USBD_CtlSendStatus>
      break;
 800ec46:	e059      	b.n	800ecfc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ec48:	4b2f      	ldr	r3, [pc, #188]	; (800ed08 <USBD_SetConfig+0x148>)
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d112      	bne.n	800ec76 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2202      	movs	r2, #2
 800ec54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ec58:	4b2b      	ldr	r3, [pc, #172]	; (800ed08 <USBD_SetConfig+0x148>)
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ec62:	4b29      	ldr	r3, [pc, #164]	; (800ed08 <USBD_SetConfig+0x148>)
 800ec64:	781b      	ldrb	r3, [r3, #0]
 800ec66:	4619      	mov	r1, r3
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f7ff f93b 	bl	800dee4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f000 f9f1 	bl	800f056 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ec74:	e042      	b.n	800ecfc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ec76:	4b24      	ldr	r3, [pc, #144]	; (800ed08 <USBD_SetConfig+0x148>)
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d02a      	beq.n	800ecda <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	b2db      	uxtb	r3, r3
 800ec8a:	4619      	mov	r1, r3
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f7ff f929 	bl	800dee4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ec92:	4b1d      	ldr	r3, [pc, #116]	; (800ed08 <USBD_SetConfig+0x148>)
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	461a      	mov	r2, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ec9c:	4b1a      	ldr	r3, [pc, #104]	; (800ed08 <USBD_SetConfig+0x148>)
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	4619      	mov	r1, r3
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f7ff f902 	bl	800deac <USBD_SetClassConfig>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00f      	beq.n	800ecd2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ecb2:	6839      	ldr	r1, [r7, #0]
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 f903 	bl	800eec0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f7ff f90e 	bl	800dee4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2202      	movs	r2, #2
 800eccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ecd0:	e014      	b.n	800ecfc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f000 f9bf 	bl	800f056 <USBD_CtlSendStatus>
      break;
 800ecd8:	e010      	b.n	800ecfc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f000 f9bb 	bl	800f056 <USBD_CtlSendStatus>
      break;
 800ece0:	e00c      	b.n	800ecfc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ece2:	6839      	ldr	r1, [r7, #0]
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f000 f8eb 	bl	800eec0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ecea:	4b07      	ldr	r3, [pc, #28]	; (800ed08 <USBD_SetConfig+0x148>)
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	4619      	mov	r1, r3
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f7ff f8f7 	bl	800dee4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ecf6:	2303      	movs	r3, #3
 800ecf8:	73fb      	strb	r3, [r7, #15]
      break;
 800ecfa:	bf00      	nop
  }

  return ret;
 800ecfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	2000064e 	.word	0x2000064e

0800ed0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	88db      	ldrh	r3, [r3, #6]
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d004      	beq.n	800ed28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ed1e:	6839      	ldr	r1, [r7, #0]
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f000 f8cd 	bl	800eec0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ed26:	e023      	b.n	800ed70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	2b02      	cmp	r3, #2
 800ed32:	dc02      	bgt.n	800ed3a <USBD_GetConfig+0x2e>
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	dc03      	bgt.n	800ed40 <USBD_GetConfig+0x34>
 800ed38:	e015      	b.n	800ed66 <USBD_GetConfig+0x5a>
 800ed3a:	2b03      	cmp	r3, #3
 800ed3c:	d00b      	beq.n	800ed56 <USBD_GetConfig+0x4a>
 800ed3e:	e012      	b.n	800ed66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2200      	movs	r2, #0
 800ed44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	3308      	adds	r3, #8
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 f927 	bl	800efa2 <USBD_CtlSendData>
        break;
 800ed54:	e00c      	b.n	800ed70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	3304      	adds	r3, #4
 800ed5a:	2201      	movs	r2, #1
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 f91f 	bl	800efa2 <USBD_CtlSendData>
        break;
 800ed64:	e004      	b.n	800ed70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ed66:	6839      	ldr	r1, [r7, #0]
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f000 f8a9 	bl	800eec0 <USBD_CtlError>
        break;
 800ed6e:	bf00      	nop
}
 800ed70:	bf00      	nop
 800ed72:	3708      	adds	r7, #8
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	3b01      	subs	r3, #1
 800ed8c:	2b02      	cmp	r3, #2
 800ed8e:	d81e      	bhi.n	800edce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	88db      	ldrh	r3, [r3, #6]
 800ed94:	2b02      	cmp	r3, #2
 800ed96:	d004      	beq.n	800eda2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ed98:	6839      	ldr	r1, [r7, #0]
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 f890 	bl	800eec0 <USBD_CtlError>
        break;
 800eda0:	e01a      	b.n	800edd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2201      	movs	r2, #1
 800eda6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d005      	beq.n	800edbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	68db      	ldr	r3, [r3, #12]
 800edb6:	f043 0202 	orr.w	r2, r3, #2
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	330c      	adds	r3, #12
 800edc2:	2202      	movs	r2, #2
 800edc4:	4619      	mov	r1, r3
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f000 f8eb 	bl	800efa2 <USBD_CtlSendData>
      break;
 800edcc:	e004      	b.n	800edd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800edce:	6839      	ldr	r1, [r7, #0]
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f000 f875 	bl	800eec0 <USBD_CtlError>
      break;
 800edd6:	bf00      	nop
  }
}
 800edd8:	bf00      	nop
 800edda:	3708      	adds	r7, #8
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b082      	sub	sp, #8
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	885b      	ldrh	r3, [r3, #2]
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d106      	bne.n	800ee00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2201      	movs	r2, #1
 800edf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f000 f92b 	bl	800f056 <USBD_CtlSendStatus>
  }
}
 800ee00:	bf00      	nop
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b082      	sub	sp, #8
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	2b02      	cmp	r3, #2
 800ee1e:	d80b      	bhi.n	800ee38 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	885b      	ldrh	r3, [r3, #2]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d10c      	bne.n	800ee42 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f000 f910 	bl	800f056 <USBD_CtlSendStatus>
      }
      break;
 800ee36:	e004      	b.n	800ee42 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ee38:	6839      	ldr	r1, [r7, #0]
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 f840 	bl	800eec0 <USBD_CtlError>
      break;
 800ee40:	e000      	b.n	800ee44 <USBD_ClrFeature+0x3c>
      break;
 800ee42:	bf00      	nop
  }
}
 800ee44:	bf00      	nop
 800ee46:	3708      	adds	r7, #8
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	781a      	ldrb	r2, [r3, #0]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	3301      	adds	r3, #1
 800ee66:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	781a      	ldrb	r2, [r3, #0]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	3301      	adds	r3, #1
 800ee74:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ee76:	68f8      	ldr	r0, [r7, #12]
 800ee78:	f7ff fabb 	bl	800e3f2 <SWAPBYTE>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	461a      	mov	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	3301      	adds	r3, #1
 800ee88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ee90:	68f8      	ldr	r0, [r7, #12]
 800ee92:	f7ff faae 	bl	800e3f2 <SWAPBYTE>
 800ee96:	4603      	mov	r3, r0
 800ee98:	461a      	mov	r2, r3
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	3301      	adds	r3, #1
 800eea2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	3301      	adds	r3, #1
 800eea8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	f7ff faa1 	bl	800e3f2 <SWAPBYTE>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	80da      	strh	r2, [r3, #6]
}
 800eeb8:	bf00      	nop
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eeca:	2180      	movs	r1, #128	; 0x80
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f002 fe9d 	bl	8011c0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eed2:	2100      	movs	r1, #0
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f002 fe99 	bl	8011c0c <USBD_LL_StallEP>
}
 800eeda:	bf00      	nop
 800eedc:	3708      	adds	r7, #8
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}

0800eee2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eee2:	b580      	push	{r7, lr}
 800eee4:	b086      	sub	sp, #24
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	60f8      	str	r0, [r7, #12]
 800eeea:	60b9      	str	r1, [r7, #8]
 800eeec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eeee:	2300      	movs	r3, #0
 800eef0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d036      	beq.n	800ef66 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eefc:	6938      	ldr	r0, [r7, #16]
 800eefe:	f000 f836 	bl	800ef6e <USBD_GetLen>
 800ef02:	4603      	mov	r3, r0
 800ef04:	3301      	adds	r3, #1
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	005b      	lsls	r3, r3, #1
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ef10:	7dfb      	ldrb	r3, [r7, #23]
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	4413      	add	r3, r2
 800ef16:	687a      	ldr	r2, [r7, #4]
 800ef18:	7812      	ldrb	r2, [r2, #0]
 800ef1a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ef1c:	7dfb      	ldrb	r3, [r7, #23]
 800ef1e:	3301      	adds	r3, #1
 800ef20:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ef22:	7dfb      	ldrb	r3, [r7, #23]
 800ef24:	68ba      	ldr	r2, [r7, #8]
 800ef26:	4413      	add	r3, r2
 800ef28:	2203      	movs	r2, #3
 800ef2a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ef2c:	7dfb      	ldrb	r3, [r7, #23]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ef32:	e013      	b.n	800ef5c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ef34:	7dfb      	ldrb	r3, [r7, #23]
 800ef36:	68ba      	ldr	r2, [r7, #8]
 800ef38:	4413      	add	r3, r2
 800ef3a:	693a      	ldr	r2, [r7, #16]
 800ef3c:	7812      	ldrb	r2, [r2, #0]
 800ef3e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	3301      	adds	r3, #1
 800ef44:	613b      	str	r3, [r7, #16]
    idx++;
 800ef46:	7dfb      	ldrb	r3, [r7, #23]
 800ef48:	3301      	adds	r3, #1
 800ef4a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ef4c:	7dfb      	ldrb	r3, [r7, #23]
 800ef4e:	68ba      	ldr	r2, [r7, #8]
 800ef50:	4413      	add	r3, r2
 800ef52:	2200      	movs	r2, #0
 800ef54:	701a      	strb	r2, [r3, #0]
    idx++;
 800ef56:	7dfb      	ldrb	r3, [r7, #23]
 800ef58:	3301      	adds	r3, #1
 800ef5a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d1e7      	bne.n	800ef34 <USBD_GetString+0x52>
 800ef64:	e000      	b.n	800ef68 <USBD_GetString+0x86>
    return;
 800ef66:	bf00      	nop
  }
}
 800ef68:	3718      	adds	r7, #24
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ef6e:	b480      	push	{r7}
 800ef70:	b085      	sub	sp, #20
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ef76:	2300      	movs	r3, #0
 800ef78:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ef7e:	e005      	b.n	800ef8c <USBD_GetLen+0x1e>
  {
    len++;
 800ef80:	7bfb      	ldrb	r3, [r7, #15]
 800ef82:	3301      	adds	r3, #1
 800ef84:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d1f5      	bne.n	800ef80 <USBD_GetLen+0x12>
  }

  return len;
 800ef94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3714      	adds	r7, #20
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr

0800efa2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800efa2:	b580      	push	{r7, lr}
 800efa4:	b084      	sub	sp, #16
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	60f8      	str	r0, [r7, #12]
 800efaa:	60b9      	str	r1, [r7, #8]
 800efac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2202      	movs	r2, #2
 800efb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	687a      	ldr	r2, [r7, #4]
 800efc0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	68ba      	ldr	r2, [r7, #8]
 800efc6:	2100      	movs	r1, #0
 800efc8:	68f8      	ldr	r0, [r7, #12]
 800efca:	f002 fea8 	bl	8011d1e <USBD_LL_Transmit>

  return USBD_OK;
 800efce:	2300      	movs	r3, #0
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3710      	adds	r7, #16
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	68ba      	ldr	r2, [r7, #8]
 800efe8:	2100      	movs	r1, #0
 800efea:	68f8      	ldr	r0, [r7, #12]
 800efec:	f002 fe97 	bl	8011d1e <USBD_LL_Transmit>

  return USBD_OK;
 800eff0:	2300      	movs	r3, #0
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3710      	adds	r7, #16
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}

0800effa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800effa:	b580      	push	{r7, lr}
 800effc:	b084      	sub	sp, #16
 800effe:	af00      	add	r7, sp, #0
 800f000:	60f8      	str	r0, [r7, #12]
 800f002:	60b9      	str	r1, [r7, #8]
 800f004:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2203      	movs	r2, #3
 800f00a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	687a      	ldr	r2, [r7, #4]
 800f01a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	2100      	movs	r1, #0
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f002 fe9b 	bl	8011d60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f02a:	2300      	movs	r3, #0
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3710      	adds	r7, #16
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b084      	sub	sp, #16
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	68ba      	ldr	r2, [r7, #8]
 800f044:	2100      	movs	r1, #0
 800f046:	68f8      	ldr	r0, [r7, #12]
 800f048:	f002 fe8a 	bl	8011d60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f04c:	2300      	movs	r3, #0
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3710      	adds	r7, #16
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f056:	b580      	push	{r7, lr}
 800f058:	b082      	sub	sp, #8
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2204      	movs	r2, #4
 800f062:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f066:	2300      	movs	r3, #0
 800f068:	2200      	movs	r2, #0
 800f06a:	2100      	movs	r1, #0
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f002 fe56 	bl	8011d1e <USBD_LL_Transmit>

  return USBD_OK;
 800f072:	2300      	movs	r3, #0
}
 800f074:	4618      	mov	r0, r3
 800f076:	3708      	adds	r7, #8
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2205      	movs	r2, #5
 800f088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f08c:	2300      	movs	r3, #0
 800f08e:	2200      	movs	r2, #0
 800f090:	2100      	movs	r1, #0
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f002 fe64 	bl	8011d60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3708      	adds	r7, #8
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
	...

0800f0a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f0ae:	79fb      	ldrb	r3, [r7, #7]
 800f0b0:	4a08      	ldr	r2, [pc, #32]	; (800f0d4 <disk_status+0x30>)
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4413      	add	r3, r2
 800f0b6:	685b      	ldr	r3, [r3, #4]
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	79fa      	ldrb	r2, [r7, #7]
 800f0bc:	4905      	ldr	r1, [pc, #20]	; (800f0d4 <disk_status+0x30>)
 800f0be:	440a      	add	r2, r1
 800f0c0:	7a12      	ldrb	r2, [r2, #8]
 800f0c2:	4610      	mov	r0, r2
 800f0c4:	4798      	blx	r3
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3710      	adds	r7, #16
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	20000678 	.word	0x20000678

0800f0d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	4603      	mov	r3, r0
 800f0e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f0e6:	79fb      	ldrb	r3, [r7, #7]
 800f0e8:	4a0d      	ldr	r2, [pc, #52]	; (800f120 <disk_initialize+0x48>)
 800f0ea:	5cd3      	ldrb	r3, [r2, r3]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d111      	bne.n	800f114 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f0f0:	79fb      	ldrb	r3, [r7, #7]
 800f0f2:	4a0b      	ldr	r2, [pc, #44]	; (800f120 <disk_initialize+0x48>)
 800f0f4:	2101      	movs	r1, #1
 800f0f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f0f8:	79fb      	ldrb	r3, [r7, #7]
 800f0fa:	4a09      	ldr	r2, [pc, #36]	; (800f120 <disk_initialize+0x48>)
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	4413      	add	r3, r2
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	79fa      	ldrb	r2, [r7, #7]
 800f106:	4906      	ldr	r1, [pc, #24]	; (800f120 <disk_initialize+0x48>)
 800f108:	440a      	add	r2, r1
 800f10a:	7a12      	ldrb	r2, [r2, #8]
 800f10c:	4610      	mov	r0, r2
 800f10e:	4798      	blx	r3
 800f110:	4603      	mov	r3, r0
 800f112:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f114:	7bfb      	ldrb	r3, [r7, #15]
}
 800f116:	4618      	mov	r0, r3
 800f118:	3710      	adds	r7, #16
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	20000678 	.word	0x20000678

0800f124 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f124:	b590      	push	{r4, r7, lr}
 800f126:	b087      	sub	sp, #28
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60b9      	str	r1, [r7, #8]
 800f12c:	607a      	str	r2, [r7, #4]
 800f12e:	603b      	str	r3, [r7, #0]
 800f130:	4603      	mov	r3, r0
 800f132:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f134:	7bfb      	ldrb	r3, [r7, #15]
 800f136:	4a0a      	ldr	r2, [pc, #40]	; (800f160 <disk_read+0x3c>)
 800f138:	009b      	lsls	r3, r3, #2
 800f13a:	4413      	add	r3, r2
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	689c      	ldr	r4, [r3, #8]
 800f140:	7bfb      	ldrb	r3, [r7, #15]
 800f142:	4a07      	ldr	r2, [pc, #28]	; (800f160 <disk_read+0x3c>)
 800f144:	4413      	add	r3, r2
 800f146:	7a18      	ldrb	r0, [r3, #8]
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	687a      	ldr	r2, [r7, #4]
 800f14c:	68b9      	ldr	r1, [r7, #8]
 800f14e:	47a0      	blx	r4
 800f150:	4603      	mov	r3, r0
 800f152:	75fb      	strb	r3, [r7, #23]
  return res;
 800f154:	7dfb      	ldrb	r3, [r7, #23]
}
 800f156:	4618      	mov	r0, r3
 800f158:	371c      	adds	r7, #28
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd90      	pop	{r4, r7, pc}
 800f15e:	bf00      	nop
 800f160:	20000678 	.word	0x20000678

0800f164 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f164:	b590      	push	{r4, r7, lr}
 800f166:	b087      	sub	sp, #28
 800f168:	af00      	add	r7, sp, #0
 800f16a:	60b9      	str	r1, [r7, #8]
 800f16c:	607a      	str	r2, [r7, #4]
 800f16e:	603b      	str	r3, [r7, #0]
 800f170:	4603      	mov	r3, r0
 800f172:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f174:	7bfb      	ldrb	r3, [r7, #15]
 800f176:	4a0a      	ldr	r2, [pc, #40]	; (800f1a0 <disk_write+0x3c>)
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	4413      	add	r3, r2
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	68dc      	ldr	r4, [r3, #12]
 800f180:	7bfb      	ldrb	r3, [r7, #15]
 800f182:	4a07      	ldr	r2, [pc, #28]	; (800f1a0 <disk_write+0x3c>)
 800f184:	4413      	add	r3, r2
 800f186:	7a18      	ldrb	r0, [r3, #8]
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	68b9      	ldr	r1, [r7, #8]
 800f18e:	47a0      	blx	r4
 800f190:	4603      	mov	r3, r0
 800f192:	75fb      	strb	r3, [r7, #23]
  return res;
 800f194:	7dfb      	ldrb	r3, [r7, #23]
}
 800f196:	4618      	mov	r0, r3
 800f198:	371c      	adds	r7, #28
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd90      	pop	{r4, r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	20000678 	.word	0x20000678

0800f1a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	603a      	str	r2, [r7, #0]
 800f1ae:	71fb      	strb	r3, [r7, #7]
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f1b4:	79fb      	ldrb	r3, [r7, #7]
 800f1b6:	4a09      	ldr	r2, [pc, #36]	; (800f1dc <disk_ioctl+0x38>)
 800f1b8:	009b      	lsls	r3, r3, #2
 800f1ba:	4413      	add	r3, r2
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	691b      	ldr	r3, [r3, #16]
 800f1c0:	79fa      	ldrb	r2, [r7, #7]
 800f1c2:	4906      	ldr	r1, [pc, #24]	; (800f1dc <disk_ioctl+0x38>)
 800f1c4:	440a      	add	r2, r1
 800f1c6:	7a10      	ldrb	r0, [r2, #8]
 800f1c8:	79b9      	ldrb	r1, [r7, #6]
 800f1ca:	683a      	ldr	r2, [r7, #0]
 800f1cc:	4798      	blx	r3
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	73fb      	strb	r3, [r7, #15]
  return res;
 800f1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3710      	adds	r7, #16
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	20000678 	.word	0x20000678

0800f1e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b085      	sub	sp, #20
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f1f0:	89fb      	ldrh	r3, [r7, #14]
 800f1f2:	021b      	lsls	r3, r3, #8
 800f1f4:	b21a      	sxth	r2, r3
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	b21b      	sxth	r3, r3
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	b21b      	sxth	r3, r3
 800f200:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f202:	89fb      	ldrh	r3, [r7, #14]
}
 800f204:	4618      	mov	r0, r3
 800f206:	3714      	adds	r7, #20
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f210:	b480      	push	{r7}
 800f212:	b085      	sub	sp, #20
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	3303      	adds	r3, #3
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	021b      	lsls	r3, r3, #8
 800f224:	687a      	ldr	r2, [r7, #4]
 800f226:	3202      	adds	r2, #2
 800f228:	7812      	ldrb	r2, [r2, #0]
 800f22a:	4313      	orrs	r3, r2
 800f22c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	021b      	lsls	r3, r3, #8
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	3201      	adds	r2, #1
 800f236:	7812      	ldrb	r2, [r2, #0]
 800f238:	4313      	orrs	r3, r2
 800f23a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	021b      	lsls	r3, r3, #8
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	7812      	ldrb	r2, [r2, #0]
 800f244:	4313      	orrs	r3, r2
 800f246:	60fb      	str	r3, [r7, #12]
	return rv;
 800f248:	68fb      	ldr	r3, [r7, #12]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3714      	adds	r7, #20
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr

0800f256 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f256:	b480      	push	{r7}
 800f258:	b083      	sub	sp, #12
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
 800f25e:	460b      	mov	r3, r1
 800f260:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	1c5a      	adds	r2, r3, #1
 800f266:	607a      	str	r2, [r7, #4]
 800f268:	887a      	ldrh	r2, [r7, #2]
 800f26a:	b2d2      	uxtb	r2, r2
 800f26c:	701a      	strb	r2, [r3, #0]
 800f26e:	887b      	ldrh	r3, [r7, #2]
 800f270:	0a1b      	lsrs	r3, r3, #8
 800f272:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	1c5a      	adds	r2, r3, #1
 800f278:	607a      	str	r2, [r7, #4]
 800f27a:	887a      	ldrh	r2, [r7, #2]
 800f27c:	b2d2      	uxtb	r2, r2
 800f27e:	701a      	strb	r2, [r3, #0]
}
 800f280:	bf00      	nop
 800f282:	370c      	adds	r7, #12
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f28c:	b480      	push	{r7}
 800f28e:	b083      	sub	sp, #12
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	1c5a      	adds	r2, r3, #1
 800f29a:	607a      	str	r2, [r7, #4]
 800f29c:	683a      	ldr	r2, [r7, #0]
 800f29e:	b2d2      	uxtb	r2, r2
 800f2a0:	701a      	strb	r2, [r3, #0]
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	0a1b      	lsrs	r3, r3, #8
 800f2a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	1c5a      	adds	r2, r3, #1
 800f2ac:	607a      	str	r2, [r7, #4]
 800f2ae:	683a      	ldr	r2, [r7, #0]
 800f2b0:	b2d2      	uxtb	r2, r2
 800f2b2:	701a      	strb	r2, [r3, #0]
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	0a1b      	lsrs	r3, r3, #8
 800f2b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	1c5a      	adds	r2, r3, #1
 800f2be:	607a      	str	r2, [r7, #4]
 800f2c0:	683a      	ldr	r2, [r7, #0]
 800f2c2:	b2d2      	uxtb	r2, r2
 800f2c4:	701a      	strb	r2, [r3, #0]
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	0a1b      	lsrs	r3, r3, #8
 800f2ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	1c5a      	adds	r2, r3, #1
 800f2d0:	607a      	str	r2, [r7, #4]
 800f2d2:	683a      	ldr	r2, [r7, #0]
 800f2d4:	b2d2      	uxtb	r2, r2
 800f2d6:	701a      	strb	r2, [r3, #0]
}
 800f2d8:	bf00      	nop
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f2e4:	b480      	push	{r7}
 800f2e6:	b087      	sub	sp, #28
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	60f8      	str	r0, [r7, #12]
 800f2ec:	60b9      	str	r1, [r7, #8]
 800f2ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00d      	beq.n	800f31a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f2fe:	693a      	ldr	r2, [r7, #16]
 800f300:	1c53      	adds	r3, r2, #1
 800f302:	613b      	str	r3, [r7, #16]
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	1c59      	adds	r1, r3, #1
 800f308:	6179      	str	r1, [r7, #20]
 800f30a:	7812      	ldrb	r2, [r2, #0]
 800f30c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	3b01      	subs	r3, #1
 800f312:	607b      	str	r3, [r7, #4]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d1f1      	bne.n	800f2fe <mem_cpy+0x1a>
	}
}
 800f31a:	bf00      	nop
 800f31c:	371c      	adds	r7, #28
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr

0800f326 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f326:	b480      	push	{r7}
 800f328:	b087      	sub	sp, #28
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	60f8      	str	r0, [r7, #12]
 800f32e:	60b9      	str	r1, [r7, #8]
 800f330:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	1c5a      	adds	r2, r3, #1
 800f33a:	617a      	str	r2, [r7, #20]
 800f33c:	68ba      	ldr	r2, [r7, #8]
 800f33e:	b2d2      	uxtb	r2, r2
 800f340:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	3b01      	subs	r3, #1
 800f346:	607b      	str	r3, [r7, #4]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d1f3      	bne.n	800f336 <mem_set+0x10>
}
 800f34e:	bf00      	nop
 800f350:	bf00      	nop
 800f352:	371c      	adds	r7, #28
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f35c:	b480      	push	{r7}
 800f35e:	b089      	sub	sp, #36	; 0x24
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	61fb      	str	r3, [r7, #28]
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f370:	2300      	movs	r3, #0
 800f372:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	1c5a      	adds	r2, r3, #1
 800f378:	61fa      	str	r2, [r7, #28]
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	4619      	mov	r1, r3
 800f37e:	69bb      	ldr	r3, [r7, #24]
 800f380:	1c5a      	adds	r2, r3, #1
 800f382:	61ba      	str	r2, [r7, #24]
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	1acb      	subs	r3, r1, r3
 800f388:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	3b01      	subs	r3, #1
 800f38e:	607b      	str	r3, [r7, #4]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d002      	beq.n	800f39c <mem_cmp+0x40>
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d0eb      	beq.n	800f374 <mem_cmp+0x18>

	return r;
 800f39c:	697b      	ldr	r3, [r7, #20]
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3724      	adds	r7, #36	; 0x24
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr

0800f3aa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f3aa:	b480      	push	{r7}
 800f3ac:	b083      	sub	sp, #12
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
 800f3b2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f3b4:	e002      	b.n	800f3bc <chk_chr+0x12>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	607b      	str	r3, [r7, #4]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d005      	beq.n	800f3d0 <chk_chr+0x26>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d1f2      	bne.n	800f3b6 <chk_chr+0xc>
	return *str;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	781b      	ldrb	r3, [r3, #0]
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	370c      	adds	r7, #12
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b085      	sub	sp, #20
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	60bb      	str	r3, [r7, #8]
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	60fb      	str	r3, [r7, #12]
 800f3f2:	e029      	b.n	800f448 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f3f4:	4a27      	ldr	r2, [pc, #156]	; (800f494 <chk_lock+0xb4>)
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	011b      	lsls	r3, r3, #4
 800f3fa:	4413      	add	r3, r2
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d01d      	beq.n	800f43e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f402:	4a24      	ldr	r2, [pc, #144]	; (800f494 <chk_lock+0xb4>)
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	011b      	lsls	r3, r3, #4
 800f408:	4413      	add	r3, r2
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	429a      	cmp	r2, r3
 800f412:	d116      	bne.n	800f442 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f414:	4a1f      	ldr	r2, [pc, #124]	; (800f494 <chk_lock+0xb4>)
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	011b      	lsls	r3, r3, #4
 800f41a:	4413      	add	r3, r2
 800f41c:	3304      	adds	r3, #4
 800f41e:	681a      	ldr	r2, [r3, #0]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f424:	429a      	cmp	r2, r3
 800f426:	d10c      	bne.n	800f442 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f428:	4a1a      	ldr	r2, [pc, #104]	; (800f494 <chk_lock+0xb4>)
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	011b      	lsls	r3, r3, #4
 800f42e:	4413      	add	r3, r2
 800f430:	3308      	adds	r3, #8
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f438:	429a      	cmp	r2, r3
 800f43a:	d102      	bne.n	800f442 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f43c:	e007      	b.n	800f44e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f43e:	2301      	movs	r3, #1
 800f440:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	3301      	adds	r3, #1
 800f446:	60fb      	str	r3, [r7, #12]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d9d2      	bls.n	800f3f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2b02      	cmp	r3, #2
 800f452:	d109      	bne.n	800f468 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d102      	bne.n	800f460 <chk_lock+0x80>
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	2b02      	cmp	r3, #2
 800f45e:	d101      	bne.n	800f464 <chk_lock+0x84>
 800f460:	2300      	movs	r3, #0
 800f462:	e010      	b.n	800f486 <chk_lock+0xa6>
 800f464:	2312      	movs	r3, #18
 800f466:	e00e      	b.n	800f486 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d108      	bne.n	800f480 <chk_lock+0xa0>
 800f46e:	4a09      	ldr	r2, [pc, #36]	; (800f494 <chk_lock+0xb4>)
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	011b      	lsls	r3, r3, #4
 800f474:	4413      	add	r3, r2
 800f476:	330c      	adds	r3, #12
 800f478:	881b      	ldrh	r3, [r3, #0]
 800f47a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f47e:	d101      	bne.n	800f484 <chk_lock+0xa4>
 800f480:	2310      	movs	r3, #16
 800f482:	e000      	b.n	800f486 <chk_lock+0xa6>
 800f484:	2300      	movs	r3, #0
}
 800f486:	4618      	mov	r0, r3
 800f488:	3714      	adds	r7, #20
 800f48a:	46bd      	mov	sp, r7
 800f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop
 800f494:	20000658 	.word	0x20000658

0800f498 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	607b      	str	r3, [r7, #4]
 800f4a2:	e002      	b.n	800f4aa <enq_lock+0x12>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	607b      	str	r3, [r7, #4]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d806      	bhi.n	800f4be <enq_lock+0x26>
 800f4b0:	4a09      	ldr	r2, [pc, #36]	; (800f4d8 <enq_lock+0x40>)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	011b      	lsls	r3, r3, #4
 800f4b6:	4413      	add	r3, r2
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d1f2      	bne.n	800f4a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2b02      	cmp	r3, #2
 800f4c2:	bf14      	ite	ne
 800f4c4:	2301      	movne	r3, #1
 800f4c6:	2300      	moveq	r3, #0
 800f4c8:	b2db      	uxtb	r3, r3
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	370c      	adds	r7, #12
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop
 800f4d8:	20000658 	.word	0x20000658

0800f4dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b085      	sub	sp, #20
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	60fb      	str	r3, [r7, #12]
 800f4ea:	e01f      	b.n	800f52c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f4ec:	4a41      	ldr	r2, [pc, #260]	; (800f5f4 <inc_lock+0x118>)
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	011b      	lsls	r3, r3, #4
 800f4f2:	4413      	add	r3, r2
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d113      	bne.n	800f526 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f4fe:	4a3d      	ldr	r2, [pc, #244]	; (800f5f4 <inc_lock+0x118>)
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	011b      	lsls	r3, r3, #4
 800f504:	4413      	add	r3, r2
 800f506:	3304      	adds	r3, #4
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f50e:	429a      	cmp	r2, r3
 800f510:	d109      	bne.n	800f526 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f512:	4a38      	ldr	r2, [pc, #224]	; (800f5f4 <inc_lock+0x118>)
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	011b      	lsls	r3, r3, #4
 800f518:	4413      	add	r3, r2
 800f51a:	3308      	adds	r3, #8
 800f51c:	681a      	ldr	r2, [r3, #0]
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f522:	429a      	cmp	r2, r3
 800f524:	d006      	beq.n	800f534 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	3301      	adds	r3, #1
 800f52a:	60fb      	str	r3, [r7, #12]
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d9dc      	bls.n	800f4ec <inc_lock+0x10>
 800f532:	e000      	b.n	800f536 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f534:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2b02      	cmp	r3, #2
 800f53a:	d132      	bne.n	800f5a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f53c:	2300      	movs	r3, #0
 800f53e:	60fb      	str	r3, [r7, #12]
 800f540:	e002      	b.n	800f548 <inc_lock+0x6c>
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	3301      	adds	r3, #1
 800f546:	60fb      	str	r3, [r7, #12]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d806      	bhi.n	800f55c <inc_lock+0x80>
 800f54e:	4a29      	ldr	r2, [pc, #164]	; (800f5f4 <inc_lock+0x118>)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	011b      	lsls	r3, r3, #4
 800f554:	4413      	add	r3, r2
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d1f2      	bne.n	800f542 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	2b02      	cmp	r3, #2
 800f560:	d101      	bne.n	800f566 <inc_lock+0x8a>
 800f562:	2300      	movs	r3, #0
 800f564:	e040      	b.n	800f5e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	4922      	ldr	r1, [pc, #136]	; (800f5f4 <inc_lock+0x118>)
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	011b      	lsls	r3, r3, #4
 800f570:	440b      	add	r3, r1
 800f572:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	689a      	ldr	r2, [r3, #8]
 800f578:	491e      	ldr	r1, [pc, #120]	; (800f5f4 <inc_lock+0x118>)
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	011b      	lsls	r3, r3, #4
 800f57e:	440b      	add	r3, r1
 800f580:	3304      	adds	r3, #4
 800f582:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	695a      	ldr	r2, [r3, #20]
 800f588:	491a      	ldr	r1, [pc, #104]	; (800f5f4 <inc_lock+0x118>)
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	011b      	lsls	r3, r3, #4
 800f58e:	440b      	add	r3, r1
 800f590:	3308      	adds	r3, #8
 800f592:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f594:	4a17      	ldr	r2, [pc, #92]	; (800f5f4 <inc_lock+0x118>)
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	011b      	lsls	r3, r3, #4
 800f59a:	4413      	add	r3, r2
 800f59c:	330c      	adds	r3, #12
 800f59e:	2200      	movs	r2, #0
 800f5a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d009      	beq.n	800f5bc <inc_lock+0xe0>
 800f5a8:	4a12      	ldr	r2, [pc, #72]	; (800f5f4 <inc_lock+0x118>)
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	011b      	lsls	r3, r3, #4
 800f5ae:	4413      	add	r3, r2
 800f5b0:	330c      	adds	r3, #12
 800f5b2:	881b      	ldrh	r3, [r3, #0]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d001      	beq.n	800f5bc <inc_lock+0xe0>
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	e015      	b.n	800f5e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d108      	bne.n	800f5d4 <inc_lock+0xf8>
 800f5c2:	4a0c      	ldr	r2, [pc, #48]	; (800f5f4 <inc_lock+0x118>)
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	011b      	lsls	r3, r3, #4
 800f5c8:	4413      	add	r3, r2
 800f5ca:	330c      	adds	r3, #12
 800f5cc:	881b      	ldrh	r3, [r3, #0]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	b29a      	uxth	r2, r3
 800f5d2:	e001      	b.n	800f5d8 <inc_lock+0xfc>
 800f5d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f5d8:	4906      	ldr	r1, [pc, #24]	; (800f5f4 <inc_lock+0x118>)
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	011b      	lsls	r3, r3, #4
 800f5de:	440b      	add	r3, r1
 800f5e0:	330c      	adds	r3, #12
 800f5e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	3301      	adds	r3, #1
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3714      	adds	r7, #20
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr
 800f5f4:	20000658 	.word	0x20000658

0800f5f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	3b01      	subs	r3, #1
 800f604:	607b      	str	r3, [r7, #4]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2b01      	cmp	r3, #1
 800f60a:	d825      	bhi.n	800f658 <dec_lock+0x60>
		n = Files[i].ctr;
 800f60c:	4a17      	ldr	r2, [pc, #92]	; (800f66c <dec_lock+0x74>)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	011b      	lsls	r3, r3, #4
 800f612:	4413      	add	r3, r2
 800f614:	330c      	adds	r3, #12
 800f616:	881b      	ldrh	r3, [r3, #0]
 800f618:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f61a:	89fb      	ldrh	r3, [r7, #14]
 800f61c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f620:	d101      	bne.n	800f626 <dec_lock+0x2e>
 800f622:	2300      	movs	r3, #0
 800f624:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f626:	89fb      	ldrh	r3, [r7, #14]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d002      	beq.n	800f632 <dec_lock+0x3a>
 800f62c:	89fb      	ldrh	r3, [r7, #14]
 800f62e:	3b01      	subs	r3, #1
 800f630:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f632:	4a0e      	ldr	r2, [pc, #56]	; (800f66c <dec_lock+0x74>)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	011b      	lsls	r3, r3, #4
 800f638:	4413      	add	r3, r2
 800f63a:	330c      	adds	r3, #12
 800f63c:	89fa      	ldrh	r2, [r7, #14]
 800f63e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f640:	89fb      	ldrh	r3, [r7, #14]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d105      	bne.n	800f652 <dec_lock+0x5a>
 800f646:	4a09      	ldr	r2, [pc, #36]	; (800f66c <dec_lock+0x74>)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	011b      	lsls	r3, r3, #4
 800f64c:	4413      	add	r3, r2
 800f64e:	2200      	movs	r2, #0
 800f650:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f652:	2300      	movs	r3, #0
 800f654:	737b      	strb	r3, [r7, #13]
 800f656:	e001      	b.n	800f65c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f658:	2302      	movs	r3, #2
 800f65a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f65c:	7b7b      	ldrb	r3, [r7, #13]
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3714      	adds	r7, #20
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr
 800f66a:	bf00      	nop
 800f66c:	20000658 	.word	0x20000658

0800f670 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f670:	b480      	push	{r7}
 800f672:	b085      	sub	sp, #20
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f678:	2300      	movs	r3, #0
 800f67a:	60fb      	str	r3, [r7, #12]
 800f67c:	e010      	b.n	800f6a0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f67e:	4a0d      	ldr	r2, [pc, #52]	; (800f6b4 <clear_lock+0x44>)
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	011b      	lsls	r3, r3, #4
 800f684:	4413      	add	r3, r2
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	687a      	ldr	r2, [r7, #4]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d105      	bne.n	800f69a <clear_lock+0x2a>
 800f68e:	4a09      	ldr	r2, [pc, #36]	; (800f6b4 <clear_lock+0x44>)
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	011b      	lsls	r3, r3, #4
 800f694:	4413      	add	r3, r2
 800f696:	2200      	movs	r2, #0
 800f698:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	3301      	adds	r3, #1
 800f69e:	60fb      	str	r3, [r7, #12]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d9eb      	bls.n	800f67e <clear_lock+0xe>
	}
}
 800f6a6:	bf00      	nop
 800f6a8:	bf00      	nop
 800f6aa:	3714      	adds	r7, #20
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr
 800f6b4:	20000658 	.word	0x20000658

0800f6b8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b086      	sub	sp, #24
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	78db      	ldrb	r3, [r3, #3]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d034      	beq.n	800f736 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	7858      	ldrb	r0, [r3, #1]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f6dc:	2301      	movs	r3, #1
 800f6de:	697a      	ldr	r2, [r7, #20]
 800f6e0:	f7ff fd40 	bl	800f164 <disk_write>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d002      	beq.n	800f6f0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	73fb      	strb	r3, [r7, #15]
 800f6ee:	e022      	b.n	800f736 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6a1b      	ldr	r3, [r3, #32]
 800f6fa:	697a      	ldr	r2, [r7, #20]
 800f6fc:	1ad2      	subs	r2, r2, r3
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	699b      	ldr	r3, [r3, #24]
 800f702:	429a      	cmp	r2, r3
 800f704:	d217      	bcs.n	800f736 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	789b      	ldrb	r3, [r3, #2]
 800f70a:	613b      	str	r3, [r7, #16]
 800f70c:	e010      	b.n	800f730 <sync_window+0x78>
					wsect += fs->fsize;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	699b      	ldr	r3, [r3, #24]
 800f712:	697a      	ldr	r2, [r7, #20]
 800f714:	4413      	add	r3, r2
 800f716:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	7858      	ldrb	r0, [r3, #1]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f722:	2301      	movs	r3, #1
 800f724:	697a      	ldr	r2, [r7, #20]
 800f726:	f7ff fd1d 	bl	800f164 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	3b01      	subs	r3, #1
 800f72e:	613b      	str	r3, [r7, #16]
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	2b01      	cmp	r3, #1
 800f734:	d8eb      	bhi.n	800f70e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f736:	7bfb      	ldrb	r3, [r7, #15]
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3718      	adds	r7, #24
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f74a:	2300      	movs	r3, #0
 800f74c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f752:	683a      	ldr	r2, [r7, #0]
 800f754:	429a      	cmp	r2, r3
 800f756:	d01b      	beq.n	800f790 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7ff ffad 	bl	800f6b8 <sync_window>
 800f75e:	4603      	mov	r3, r0
 800f760:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f762:	7bfb      	ldrb	r3, [r7, #15]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d113      	bne.n	800f790 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	7858      	ldrb	r0, [r3, #1]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f772:	2301      	movs	r3, #1
 800f774:	683a      	ldr	r2, [r7, #0]
 800f776:	f7ff fcd5 	bl	800f124 <disk_read>
 800f77a:	4603      	mov	r3, r0
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d004      	beq.n	800f78a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f780:	f04f 33ff 	mov.w	r3, #4294967295
 800f784:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f786:	2301      	movs	r3, #1
 800f788:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	683a      	ldr	r2, [r7, #0]
 800f78e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800f790:	7bfb      	ldrb	r3, [r7, #15]
}
 800f792:	4618      	mov	r0, r3
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
	...

0800f79c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b084      	sub	sp, #16
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f7ff ff87 	bl	800f6b8 <sync_window>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f7ae:	7bfb      	ldrb	r3, [r7, #15]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d158      	bne.n	800f866 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	2b03      	cmp	r3, #3
 800f7ba:	d148      	bne.n	800f84e <sync_fs+0xb2>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	791b      	ldrb	r3, [r3, #4]
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	d144      	bne.n	800f84e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	3330      	adds	r3, #48	; 0x30
 800f7c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f7cc:	2100      	movs	r1, #0
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7ff fda9 	bl	800f326 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	3330      	adds	r3, #48	; 0x30
 800f7d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f7dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7ff fd38 	bl	800f256 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	3330      	adds	r3, #48	; 0x30
 800f7ea:	4921      	ldr	r1, [pc, #132]	; (800f870 <sync_fs+0xd4>)
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f7ff fd4d 	bl	800f28c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	3330      	adds	r3, #48	; 0x30
 800f7f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f7fa:	491e      	ldr	r1, [pc, #120]	; (800f874 <sync_fs+0xd8>)
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7ff fd45 	bl	800f28c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	3330      	adds	r3, #48	; 0x30
 800f806:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	691b      	ldr	r3, [r3, #16]
 800f80e:	4619      	mov	r1, r3
 800f810:	4610      	mov	r0, r2
 800f812:	f7ff fd3b 	bl	800f28c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	3330      	adds	r3, #48	; 0x30
 800f81a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	68db      	ldr	r3, [r3, #12]
 800f822:	4619      	mov	r1, r3
 800f824:	4610      	mov	r0, r2
 800f826:	f7ff fd31 	bl	800f28c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	69db      	ldr	r3, [r3, #28]
 800f82e:	1c5a      	adds	r2, r3, #1
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	7858      	ldrb	r0, [r3, #1]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f842:	2301      	movs	r3, #1
 800f844:	f7ff fc8e 	bl	800f164 <disk_write>
			fs->fsi_flag = 0;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2200      	movs	r2, #0
 800f84c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	785b      	ldrb	r3, [r3, #1]
 800f852:	2200      	movs	r2, #0
 800f854:	2100      	movs	r1, #0
 800f856:	4618      	mov	r0, r3
 800f858:	f7ff fca4 	bl	800f1a4 <disk_ioctl>
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d001      	beq.n	800f866 <sync_fs+0xca>
 800f862:	2301      	movs	r3, #1
 800f864:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f866:	7bfb      	ldrb	r3, [r7, #15]
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3710      	adds	r7, #16
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}
 800f870:	41615252 	.word	0x41615252
 800f874:	61417272 	.word	0x61417272

0800f878 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f878:	b480      	push	{r7}
 800f87a:	b083      	sub	sp, #12
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	3b02      	subs	r3, #2
 800f886:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	695b      	ldr	r3, [r3, #20]
 800f88c:	3b02      	subs	r3, #2
 800f88e:	683a      	ldr	r2, [r7, #0]
 800f890:	429a      	cmp	r2, r3
 800f892:	d301      	bcc.n	800f898 <clust2sect+0x20>
 800f894:	2300      	movs	r3, #0
 800f896:	e008      	b.n	800f8aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	895b      	ldrh	r3, [r3, #10]
 800f89c:	461a      	mov	r2, r3
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	fb03 f202 	mul.w	r2, r3, r2
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8a8:	4413      	add	r3, r2
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	370c      	adds	r7, #12
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr

0800f8b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b086      	sub	sp, #24
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
 800f8be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d904      	bls.n	800f8d6 <get_fat+0x20>
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	695b      	ldr	r3, [r3, #20]
 800f8d0:	683a      	ldr	r2, [r7, #0]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d302      	bcc.n	800f8dc <get_fat+0x26>
		val = 1;	/* Internal error */
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	617b      	str	r3, [r7, #20]
 800f8da:	e08f      	b.n	800f9fc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f8e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	2b03      	cmp	r3, #3
 800f8e8:	d062      	beq.n	800f9b0 <get_fat+0xfa>
 800f8ea:	2b03      	cmp	r3, #3
 800f8ec:	dc7c      	bgt.n	800f9e8 <get_fat+0x132>
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	d002      	beq.n	800f8f8 <get_fat+0x42>
 800f8f2:	2b02      	cmp	r3, #2
 800f8f4:	d042      	beq.n	800f97c <get_fat+0xc6>
 800f8f6:	e077      	b.n	800f9e8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	60fb      	str	r3, [r7, #12]
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	085b      	lsrs	r3, r3, #1
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	4413      	add	r3, r2
 800f904:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	6a1a      	ldr	r2, [r3, #32]
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	0a5b      	lsrs	r3, r3, #9
 800f90e:	4413      	add	r3, r2
 800f910:	4619      	mov	r1, r3
 800f912:	6938      	ldr	r0, [r7, #16]
 800f914:	f7ff ff14 	bl	800f740 <move_window>
 800f918:	4603      	mov	r3, r0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d167      	bne.n	800f9ee <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	1c5a      	adds	r2, r3, #1
 800f922:	60fa      	str	r2, [r7, #12]
 800f924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f928:	693a      	ldr	r2, [r7, #16]
 800f92a:	4413      	add	r3, r2
 800f92c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f930:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	6a1a      	ldr	r2, [r3, #32]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	0a5b      	lsrs	r3, r3, #9
 800f93a:	4413      	add	r3, r2
 800f93c:	4619      	mov	r1, r3
 800f93e:	6938      	ldr	r0, [r7, #16]
 800f940:	f7ff fefe 	bl	800f740 <move_window>
 800f944:	4603      	mov	r3, r0
 800f946:	2b00      	cmp	r3, #0
 800f948:	d153      	bne.n	800f9f2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f950:	693a      	ldr	r2, [r7, #16]
 800f952:	4413      	add	r3, r2
 800f954:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f958:	021b      	lsls	r3, r3, #8
 800f95a:	461a      	mov	r2, r3
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	4313      	orrs	r3, r2
 800f960:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	f003 0301 	and.w	r3, r3, #1
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d002      	beq.n	800f972 <get_fat+0xbc>
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	091b      	lsrs	r3, r3, #4
 800f970:	e002      	b.n	800f978 <get_fat+0xc2>
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f978:	617b      	str	r3, [r7, #20]
			break;
 800f97a:	e03f      	b.n	800f9fc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	6a1a      	ldr	r2, [r3, #32]
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	0a1b      	lsrs	r3, r3, #8
 800f984:	4413      	add	r3, r2
 800f986:	4619      	mov	r1, r3
 800f988:	6938      	ldr	r0, [r7, #16]
 800f98a:	f7ff fed9 	bl	800f740 <move_window>
 800f98e:	4603      	mov	r3, r0
 800f990:	2b00      	cmp	r3, #0
 800f992:	d130      	bne.n	800f9f6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	005b      	lsls	r3, r3, #1
 800f99e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f9a2:	4413      	add	r3, r2
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7ff fc1b 	bl	800f1e0 <ld_word>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	617b      	str	r3, [r7, #20]
			break;
 800f9ae:	e025      	b.n	800f9fc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	6a1a      	ldr	r2, [r3, #32]
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	09db      	lsrs	r3, r3, #7
 800f9b8:	4413      	add	r3, r2
 800f9ba:	4619      	mov	r1, r3
 800f9bc:	6938      	ldr	r0, [r7, #16]
 800f9be:	f7ff febf 	bl	800f740 <move_window>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d118      	bne.n	800f9fa <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	009b      	lsls	r3, r3, #2
 800f9d2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f9d6:	4413      	add	r3, r2
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7ff fc19 	bl	800f210 <ld_dword>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f9e4:	617b      	str	r3, [r7, #20]
			break;
 800f9e6:	e009      	b.n	800f9fc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	617b      	str	r3, [r7, #20]
 800f9ec:	e006      	b.n	800f9fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f9ee:	bf00      	nop
 800f9f0:	e004      	b.n	800f9fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f9f2:	bf00      	nop
 800f9f4:	e002      	b.n	800f9fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f9f6:	bf00      	nop
 800f9f8:	e000      	b.n	800f9fc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f9fa:	bf00      	nop
		}
	}

	return val;
 800f9fc:	697b      	ldr	r3, [r7, #20]
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3718      	adds	r7, #24
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fa06:	b590      	push	{r4, r7, lr}
 800fa08:	b089      	sub	sp, #36	; 0x24
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	60f8      	str	r0, [r7, #12]
 800fa0e:	60b9      	str	r1, [r7, #8]
 800fa10:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fa12:	2302      	movs	r3, #2
 800fa14:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	f240 80d2 	bls.w	800fbc2 <put_fat+0x1bc>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	695b      	ldr	r3, [r3, #20]
 800fa22:	68ba      	ldr	r2, [r7, #8]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	f080 80cc 	bcs.w	800fbc2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	2b03      	cmp	r3, #3
 800fa30:	f000 8096 	beq.w	800fb60 <put_fat+0x15a>
 800fa34:	2b03      	cmp	r3, #3
 800fa36:	f300 80cd 	bgt.w	800fbd4 <put_fat+0x1ce>
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d002      	beq.n	800fa44 <put_fat+0x3e>
 800fa3e:	2b02      	cmp	r3, #2
 800fa40:	d06e      	beq.n	800fb20 <put_fat+0x11a>
 800fa42:	e0c7      	b.n	800fbd4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	61bb      	str	r3, [r7, #24]
 800fa48:	69bb      	ldr	r3, [r7, #24]
 800fa4a:	085b      	lsrs	r3, r3, #1
 800fa4c:	69ba      	ldr	r2, [r7, #24]
 800fa4e:	4413      	add	r3, r2
 800fa50:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	6a1a      	ldr	r2, [r3, #32]
 800fa56:	69bb      	ldr	r3, [r7, #24]
 800fa58:	0a5b      	lsrs	r3, r3, #9
 800fa5a:	4413      	add	r3, r2
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f7ff fe6e 	bl	800f740 <move_window>
 800fa64:	4603      	mov	r3, r0
 800fa66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fa68:	7ffb      	ldrb	r3, [r7, #31]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	f040 80ab 	bne.w	800fbc6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fa76:	69bb      	ldr	r3, [r7, #24]
 800fa78:	1c59      	adds	r1, r3, #1
 800fa7a:	61b9      	str	r1, [r7, #24]
 800fa7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa80:	4413      	add	r3, r2
 800fa82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	f003 0301 	and.w	r3, r3, #1
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d00d      	beq.n	800faaa <put_fat+0xa4>
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	b25b      	sxtb	r3, r3
 800fa94:	f003 030f 	and.w	r3, r3, #15
 800fa98:	b25a      	sxtb	r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	011b      	lsls	r3, r3, #4
 800faa0:	b25b      	sxtb	r3, r3
 800faa2:	4313      	orrs	r3, r2
 800faa4:	b25b      	sxtb	r3, r3
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	e001      	b.n	800faae <put_fat+0xa8>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	b2db      	uxtb	r3, r3
 800faae:	697a      	ldr	r2, [r7, #20]
 800fab0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	2201      	movs	r2, #1
 800fab6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	6a1a      	ldr	r2, [r3, #32]
 800fabc:	69bb      	ldr	r3, [r7, #24]
 800fabe:	0a5b      	lsrs	r3, r3, #9
 800fac0:	4413      	add	r3, r2
 800fac2:	4619      	mov	r1, r3
 800fac4:	68f8      	ldr	r0, [r7, #12]
 800fac6:	f7ff fe3b 	bl	800f740 <move_window>
 800faca:	4603      	mov	r3, r0
 800facc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800face:	7ffb      	ldrb	r3, [r7, #31]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d17a      	bne.n	800fbca <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fada:	69bb      	ldr	r3, [r7, #24]
 800fadc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fae0:	4413      	add	r3, r2
 800fae2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	f003 0301 	and.w	r3, r3, #1
 800faea:	2b00      	cmp	r3, #0
 800faec:	d003      	beq.n	800faf6 <put_fat+0xf0>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	091b      	lsrs	r3, r3, #4
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	e00e      	b.n	800fb14 <put_fat+0x10e>
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	b25b      	sxtb	r3, r3
 800fafc:	f023 030f 	bic.w	r3, r3, #15
 800fb00:	b25a      	sxtb	r2, r3
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	0a1b      	lsrs	r3, r3, #8
 800fb06:	b25b      	sxtb	r3, r3
 800fb08:	f003 030f 	and.w	r3, r3, #15
 800fb0c:	b25b      	sxtb	r3, r3
 800fb0e:	4313      	orrs	r3, r2
 800fb10:	b25b      	sxtb	r3, r3
 800fb12:	b2db      	uxtb	r3, r3
 800fb14:	697a      	ldr	r2, [r7, #20]
 800fb16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	70da      	strb	r2, [r3, #3]
			break;
 800fb1e:	e059      	b.n	800fbd4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	6a1a      	ldr	r2, [r3, #32]
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	0a1b      	lsrs	r3, r3, #8
 800fb28:	4413      	add	r3, r2
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	68f8      	ldr	r0, [r7, #12]
 800fb2e:	f7ff fe07 	bl	800f740 <move_window>
 800fb32:	4603      	mov	r3, r0
 800fb34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fb36:	7ffb      	ldrb	r3, [r7, #31]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d148      	bne.n	800fbce <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	005b      	lsls	r3, r3, #1
 800fb46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fb4a:	4413      	add	r3, r2
 800fb4c:	687a      	ldr	r2, [r7, #4]
 800fb4e:	b292      	uxth	r2, r2
 800fb50:	4611      	mov	r1, r2
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7ff fb7f 	bl	800f256 <st_word>
			fs->wflag = 1;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	70da      	strb	r2, [r3, #3]
			break;
 800fb5e:	e039      	b.n	800fbd4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	6a1a      	ldr	r2, [r3, #32]
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	09db      	lsrs	r3, r3, #7
 800fb68:	4413      	add	r3, r2
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	68f8      	ldr	r0, [r7, #12]
 800fb6e:	f7ff fde7 	bl	800f740 <move_window>
 800fb72:	4603      	mov	r3, r0
 800fb74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fb76:	7ffb      	ldrb	r3, [r7, #31]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d12a      	bne.n	800fbd2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	009b      	lsls	r3, r3, #2
 800fb8c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fb90:	4413      	add	r3, r2
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7ff fb3c 	bl	800f210 <ld_dword>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fb9e:	4323      	orrs	r3, r4
 800fba0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	009b      	lsls	r3, r3, #2
 800fbac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fbb0:	4413      	add	r3, r2
 800fbb2:	6879      	ldr	r1, [r7, #4]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7ff fb69 	bl	800f28c <st_dword>
			fs->wflag = 1;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	70da      	strb	r2, [r3, #3]
			break;
 800fbc0:	e008      	b.n	800fbd4 <put_fat+0x1ce>
		}
	}
 800fbc2:	bf00      	nop
 800fbc4:	e006      	b.n	800fbd4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fbc6:	bf00      	nop
 800fbc8:	e004      	b.n	800fbd4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fbca:	bf00      	nop
 800fbcc:	e002      	b.n	800fbd4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fbce:	bf00      	nop
 800fbd0:	e000      	b.n	800fbd4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800fbd2:	bf00      	nop
	return res;
 800fbd4:	7ffb      	ldrb	r3, [r7, #31]
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3724      	adds	r7, #36	; 0x24
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd90      	pop	{r4, r7, pc}

0800fbde <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fbde:	b580      	push	{r7, lr}
 800fbe0:	b088      	sub	sp, #32
 800fbe2:	af00      	add	r7, sp, #0
 800fbe4:	60f8      	str	r0, [r7, #12]
 800fbe6:	60b9      	str	r1, [r7, #8]
 800fbe8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fbea:	2300      	movs	r3, #0
 800fbec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	d904      	bls.n	800fc04 <remove_chain+0x26>
 800fbfa:	69bb      	ldr	r3, [r7, #24]
 800fbfc:	695b      	ldr	r3, [r3, #20]
 800fbfe:	68ba      	ldr	r2, [r7, #8]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d301      	bcc.n	800fc08 <remove_chain+0x2a>
 800fc04:	2302      	movs	r3, #2
 800fc06:	e04b      	b.n	800fca0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00c      	beq.n	800fc28 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fc0e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc12:	6879      	ldr	r1, [r7, #4]
 800fc14:	69b8      	ldr	r0, [r7, #24]
 800fc16:	f7ff fef6 	bl	800fa06 <put_fat>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fc1e:	7ffb      	ldrb	r3, [r7, #31]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d001      	beq.n	800fc28 <remove_chain+0x4a>
 800fc24:	7ffb      	ldrb	r3, [r7, #31]
 800fc26:	e03b      	b.n	800fca0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fc28:	68b9      	ldr	r1, [r7, #8]
 800fc2a:	68f8      	ldr	r0, [r7, #12]
 800fc2c:	f7ff fe43 	bl	800f8b6 <get_fat>
 800fc30:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d031      	beq.n	800fc9c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d101      	bne.n	800fc42 <remove_chain+0x64>
 800fc3e:	2302      	movs	r3, #2
 800fc40:	e02e      	b.n	800fca0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc48:	d101      	bne.n	800fc4e <remove_chain+0x70>
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	e028      	b.n	800fca0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fc4e:	2200      	movs	r2, #0
 800fc50:	68b9      	ldr	r1, [r7, #8]
 800fc52:	69b8      	ldr	r0, [r7, #24]
 800fc54:	f7ff fed7 	bl	800fa06 <put_fat>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fc5c:	7ffb      	ldrb	r3, [r7, #31]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d001      	beq.n	800fc66 <remove_chain+0x88>
 800fc62:	7ffb      	ldrb	r3, [r7, #31]
 800fc64:	e01c      	b.n	800fca0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	691a      	ldr	r2, [r3, #16]
 800fc6a:	69bb      	ldr	r3, [r7, #24]
 800fc6c:	695b      	ldr	r3, [r3, #20]
 800fc6e:	3b02      	subs	r3, #2
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d20b      	bcs.n	800fc8c <remove_chain+0xae>
			fs->free_clst++;
 800fc74:	69bb      	ldr	r3, [r7, #24]
 800fc76:	691b      	ldr	r3, [r3, #16]
 800fc78:	1c5a      	adds	r2, r3, #1
 800fc7a:	69bb      	ldr	r3, [r7, #24]
 800fc7c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	791b      	ldrb	r3, [r3, #4]
 800fc82:	f043 0301 	orr.w	r3, r3, #1
 800fc86:	b2da      	uxtb	r2, r3
 800fc88:	69bb      	ldr	r3, [r7, #24]
 800fc8a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fc90:	69bb      	ldr	r3, [r7, #24]
 800fc92:	695b      	ldr	r3, [r3, #20]
 800fc94:	68ba      	ldr	r2, [r7, #8]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d3c6      	bcc.n	800fc28 <remove_chain+0x4a>
 800fc9a:	e000      	b.n	800fc9e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fc9c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fc9e:	2300      	movs	r3, #0
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3720      	adds	r7, #32
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}

0800fca8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b088      	sub	sp, #32
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d10d      	bne.n	800fcda <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d004      	beq.n	800fcd4 <create_chain+0x2c>
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	695b      	ldr	r3, [r3, #20]
 800fcce:	69ba      	ldr	r2, [r7, #24]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d31b      	bcc.n	800fd0c <create_chain+0x64>
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	61bb      	str	r3, [r7, #24]
 800fcd8:	e018      	b.n	800fd0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fcda:	6839      	ldr	r1, [r7, #0]
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f7ff fdea 	bl	800f8b6 <get_fat>
 800fce2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	2b01      	cmp	r3, #1
 800fce8:	d801      	bhi.n	800fcee <create_chain+0x46>
 800fcea:	2301      	movs	r3, #1
 800fcec:	e070      	b.n	800fdd0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcf4:	d101      	bne.n	800fcfa <create_chain+0x52>
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	e06a      	b.n	800fdd0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	695b      	ldr	r3, [r3, #20]
 800fcfe:	68fa      	ldr	r2, [r7, #12]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d201      	bcs.n	800fd08 <create_chain+0x60>
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	e063      	b.n	800fdd0 <create_chain+0x128>
		scl = clst;
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fd0c:	69bb      	ldr	r3, [r7, #24]
 800fd0e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fd10:	69fb      	ldr	r3, [r7, #28]
 800fd12:	3301      	adds	r3, #1
 800fd14:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	695b      	ldr	r3, [r3, #20]
 800fd1a:	69fa      	ldr	r2, [r7, #28]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d307      	bcc.n	800fd30 <create_chain+0x88>
				ncl = 2;
 800fd20:	2302      	movs	r3, #2
 800fd22:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fd24:	69fa      	ldr	r2, [r7, #28]
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d901      	bls.n	800fd30 <create_chain+0x88>
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	e04f      	b.n	800fdd0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fd30:	69f9      	ldr	r1, [r7, #28]
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f7ff fdbf 	bl	800f8b6 <get_fat>
 800fd38:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d00e      	beq.n	800fd5e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2b01      	cmp	r3, #1
 800fd44:	d003      	beq.n	800fd4e <create_chain+0xa6>
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd4c:	d101      	bne.n	800fd52 <create_chain+0xaa>
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	e03e      	b.n	800fdd0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fd52:	69fa      	ldr	r2, [r7, #28]
 800fd54:	69bb      	ldr	r3, [r7, #24]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d1da      	bne.n	800fd10 <create_chain+0x68>
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	e038      	b.n	800fdd0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fd5e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fd60:	f04f 32ff 	mov.w	r2, #4294967295
 800fd64:	69f9      	ldr	r1, [r7, #28]
 800fd66:	6938      	ldr	r0, [r7, #16]
 800fd68:	f7ff fe4d 	bl	800fa06 <put_fat>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fd70:	7dfb      	ldrb	r3, [r7, #23]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d109      	bne.n	800fd8a <create_chain+0xe2>
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d006      	beq.n	800fd8a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fd7c:	69fa      	ldr	r2, [r7, #28]
 800fd7e:	6839      	ldr	r1, [r7, #0]
 800fd80:	6938      	ldr	r0, [r7, #16]
 800fd82:	f7ff fe40 	bl	800fa06 <put_fat>
 800fd86:	4603      	mov	r3, r0
 800fd88:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fd8a:	7dfb      	ldrb	r3, [r7, #23]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d116      	bne.n	800fdbe <create_chain+0x116>
		fs->last_clst = ncl;
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	69fa      	ldr	r2, [r7, #28]
 800fd94:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	691a      	ldr	r2, [r3, #16]
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	695b      	ldr	r3, [r3, #20]
 800fd9e:	3b02      	subs	r3, #2
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d804      	bhi.n	800fdae <create_chain+0x106>
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	691b      	ldr	r3, [r3, #16]
 800fda8:	1e5a      	subs	r2, r3, #1
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800fdae:	693b      	ldr	r3, [r7, #16]
 800fdb0:	791b      	ldrb	r3, [r3, #4]
 800fdb2:	f043 0301 	orr.w	r3, r3, #1
 800fdb6:	b2da      	uxtb	r2, r3
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	711a      	strb	r2, [r3, #4]
 800fdbc:	e007      	b.n	800fdce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fdbe:	7dfb      	ldrb	r3, [r7, #23]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d102      	bne.n	800fdca <create_chain+0x122>
 800fdc4:	f04f 33ff 	mov.w	r3, #4294967295
 800fdc8:	e000      	b.n	800fdcc <create_chain+0x124>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fdce:	69fb      	ldr	r3, [r7, #28]
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3720      	adds	r7, #32
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b087      	sub	sp, #28
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdec:	3304      	adds	r3, #4
 800fdee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	0a5b      	lsrs	r3, r3, #9
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	8952      	ldrh	r2, [r2, #10]
 800fdf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdfc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	1d1a      	adds	r2, r3, #4
 800fe02:	613a      	str	r2, [r7, #16]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d101      	bne.n	800fe12 <clmt_clust+0x3a>
 800fe0e:	2300      	movs	r3, #0
 800fe10:	e010      	b.n	800fe34 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800fe12:	697a      	ldr	r2, [r7, #20]
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d307      	bcc.n	800fe2a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800fe1a:	697a      	ldr	r2, [r7, #20]
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	1ad3      	subs	r3, r2, r3
 800fe20:	617b      	str	r3, [r7, #20]
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	3304      	adds	r3, #4
 800fe26:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fe28:	e7e9      	b.n	800fdfe <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800fe2a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	681a      	ldr	r2, [r3, #0]
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	4413      	add	r3, r2
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	371c      	adds	r7, #28
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b086      	sub	sp, #24
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fe56:	d204      	bcs.n	800fe62 <dir_sdi+0x22>
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	f003 031f 	and.w	r3, r3, #31
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d001      	beq.n	800fe66 <dir_sdi+0x26>
		return FR_INT_ERR;
 800fe62:	2302      	movs	r3, #2
 800fe64:	e063      	b.n	800ff2e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	683a      	ldr	r2, [r7, #0]
 800fe6a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	689b      	ldr	r3, [r3, #8]
 800fe70:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d106      	bne.n	800fe86 <dir_sdi+0x46>
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d902      	bls.n	800fe86 <dir_sdi+0x46>
		clst = fs->dirbase;
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe84:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d10c      	bne.n	800fea6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	095b      	lsrs	r3, r3, #5
 800fe90:	693a      	ldr	r2, [r7, #16]
 800fe92:	8912      	ldrh	r2, [r2, #8]
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d301      	bcc.n	800fe9c <dir_sdi+0x5c>
 800fe98:	2302      	movs	r3, #2
 800fe9a:	e048      	b.n	800ff2e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	61da      	str	r2, [r3, #28]
 800fea4:	e029      	b.n	800fefa <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	895b      	ldrh	r3, [r3, #10]
 800feaa:	025b      	lsls	r3, r3, #9
 800feac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800feae:	e019      	b.n	800fee4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6979      	ldr	r1, [r7, #20]
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7ff fcfe 	bl	800f8b6 <get_fat>
 800feba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fec2:	d101      	bne.n	800fec8 <dir_sdi+0x88>
 800fec4:	2301      	movs	r3, #1
 800fec6:	e032      	b.n	800ff2e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d904      	bls.n	800fed8 <dir_sdi+0x98>
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	695b      	ldr	r3, [r3, #20]
 800fed2:	697a      	ldr	r2, [r7, #20]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d301      	bcc.n	800fedc <dir_sdi+0x9c>
 800fed8:	2302      	movs	r3, #2
 800feda:	e028      	b.n	800ff2e <dir_sdi+0xee>
			ofs -= csz;
 800fedc:	683a      	ldr	r2, [r7, #0]
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	1ad3      	subs	r3, r2, r3
 800fee2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fee4:	683a      	ldr	r2, [r7, #0]
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	429a      	cmp	r2, r3
 800feea:	d2e1      	bcs.n	800feb0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800feec:	6979      	ldr	r1, [r7, #20]
 800feee:	6938      	ldr	r0, [r7, #16]
 800fef0:	f7ff fcc2 	bl	800f878 <clust2sect>
 800fef4:	4602      	mov	r2, r0
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	697a      	ldr	r2, [r7, #20]
 800fefe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	69db      	ldr	r3, [r3, #28]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d101      	bne.n	800ff0c <dir_sdi+0xcc>
 800ff08:	2302      	movs	r3, #2
 800ff0a:	e010      	b.n	800ff2e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	69da      	ldr	r2, [r3, #28]
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	0a5b      	lsrs	r3, r3, #9
 800ff14:	441a      	add	r2, r3
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff26:	441a      	add	r2, r3
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ff2c:	2300      	movs	r3, #0
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3718      	adds	r7, #24
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ff36:	b580      	push	{r7, lr}
 800ff38:	b086      	sub	sp, #24
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
 800ff3e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	695b      	ldr	r3, [r3, #20]
 800ff4a:	3320      	adds	r3, #32
 800ff4c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	69db      	ldr	r3, [r3, #28]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d003      	beq.n	800ff5e <dir_next+0x28>
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ff5c:	d301      	bcc.n	800ff62 <dir_next+0x2c>
 800ff5e:	2304      	movs	r3, #4
 800ff60:	e0aa      	b.n	80100b8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	f040 8098 	bne.w	801009e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	69db      	ldr	r3, [r3, #28]
 800ff72:	1c5a      	adds	r2, r3, #1
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	699b      	ldr	r3, [r3, #24]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d10b      	bne.n	800ff98 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	095b      	lsrs	r3, r3, #5
 800ff84:	68fa      	ldr	r2, [r7, #12]
 800ff86:	8912      	ldrh	r2, [r2, #8]
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	f0c0 8088 	bcc.w	801009e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2200      	movs	r2, #0
 800ff92:	61da      	str	r2, [r3, #28]
 800ff94:	2304      	movs	r3, #4
 800ff96:	e08f      	b.n	80100b8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	0a5b      	lsrs	r3, r3, #9
 800ff9c:	68fa      	ldr	r2, [r7, #12]
 800ff9e:	8952      	ldrh	r2, [r2, #10]
 800ffa0:	3a01      	subs	r2, #1
 800ffa2:	4013      	ands	r3, r2
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d17a      	bne.n	801009e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	699b      	ldr	r3, [r3, #24]
 800ffae:	4619      	mov	r1, r3
 800ffb0:	4610      	mov	r0, r2
 800ffb2:	f7ff fc80 	bl	800f8b6 <get_fat>
 800ffb6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	2b01      	cmp	r3, #1
 800ffbc:	d801      	bhi.n	800ffc2 <dir_next+0x8c>
 800ffbe:	2302      	movs	r3, #2
 800ffc0:	e07a      	b.n	80100b8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffc8:	d101      	bne.n	800ffce <dir_next+0x98>
 800ffca:	2301      	movs	r3, #1
 800ffcc:	e074      	b.n	80100b8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	695b      	ldr	r3, [r3, #20]
 800ffd2:	697a      	ldr	r2, [r7, #20]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d358      	bcc.n	801008a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d104      	bne.n	800ffe8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	61da      	str	r2, [r3, #28]
 800ffe4:	2304      	movs	r3, #4
 800ffe6:	e067      	b.n	80100b8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	699b      	ldr	r3, [r3, #24]
 800ffee:	4619      	mov	r1, r3
 800fff0:	4610      	mov	r0, r2
 800fff2:	f7ff fe59 	bl	800fca8 <create_chain>
 800fff6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d101      	bne.n	8010002 <dir_next+0xcc>
 800fffe:	2307      	movs	r3, #7
 8010000:	e05a      	b.n	80100b8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	2b01      	cmp	r3, #1
 8010006:	d101      	bne.n	801000c <dir_next+0xd6>
 8010008:	2302      	movs	r3, #2
 801000a:	e055      	b.n	80100b8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010012:	d101      	bne.n	8010018 <dir_next+0xe2>
 8010014:	2301      	movs	r3, #1
 8010016:	e04f      	b.n	80100b8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010018:	68f8      	ldr	r0, [r7, #12]
 801001a:	f7ff fb4d 	bl	800f6b8 <sync_window>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d001      	beq.n	8010028 <dir_next+0xf2>
 8010024:	2301      	movs	r3, #1
 8010026:	e047      	b.n	80100b8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	3330      	adds	r3, #48	; 0x30
 801002c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010030:	2100      	movs	r1, #0
 8010032:	4618      	mov	r0, r3
 8010034:	f7ff f977 	bl	800f326 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010038:	2300      	movs	r3, #0
 801003a:	613b      	str	r3, [r7, #16]
 801003c:	6979      	ldr	r1, [r7, #20]
 801003e:	68f8      	ldr	r0, [r7, #12]
 8010040:	f7ff fc1a 	bl	800f878 <clust2sect>
 8010044:	4602      	mov	r2, r0
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	62da      	str	r2, [r3, #44]	; 0x2c
 801004a:	e012      	b.n	8010072 <dir_next+0x13c>
						fs->wflag = 1;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2201      	movs	r2, #1
 8010050:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010052:	68f8      	ldr	r0, [r7, #12]
 8010054:	f7ff fb30 	bl	800f6b8 <sync_window>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	d001      	beq.n	8010062 <dir_next+0x12c>
 801005e:	2301      	movs	r3, #1
 8010060:	e02a      	b.n	80100b8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	3301      	adds	r3, #1
 8010066:	613b      	str	r3, [r7, #16]
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801006c:	1c5a      	adds	r2, r3, #1
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	62da      	str	r2, [r3, #44]	; 0x2c
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	895b      	ldrh	r3, [r3, #10]
 8010076:	461a      	mov	r2, r3
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	4293      	cmp	r3, r2
 801007c:	d3e6      	bcc.n	801004c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	1ad2      	subs	r2, r2, r3
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	697a      	ldr	r2, [r7, #20]
 801008e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010090:	6979      	ldr	r1, [r7, #20]
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f7ff fbf0 	bl	800f878 <clust2sect>
 8010098:	4602      	mov	r2, r0
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	68ba      	ldr	r2, [r7, #8]
 80100a2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100b0:	441a      	add	r2, r3
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80100b6:	2300      	movs	r3, #0
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3718      	adds	r7, #24
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b086      	sub	sp, #24
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80100d0:	2100      	movs	r1, #0
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f7ff feb4 	bl	800fe40 <dir_sdi>
 80100d8:	4603      	mov	r3, r0
 80100da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80100dc:	7dfb      	ldrb	r3, [r7, #23]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d12b      	bne.n	801013a <dir_alloc+0x7a>
		n = 0;
 80100e2:	2300      	movs	r3, #0
 80100e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	69db      	ldr	r3, [r3, #28]
 80100ea:	4619      	mov	r1, r3
 80100ec:	68f8      	ldr	r0, [r7, #12]
 80100ee:	f7ff fb27 	bl	800f740 <move_window>
 80100f2:	4603      	mov	r3, r0
 80100f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80100f6:	7dfb      	ldrb	r3, [r7, #23]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d11d      	bne.n	8010138 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6a1b      	ldr	r3, [r3, #32]
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	2be5      	cmp	r3, #229	; 0xe5
 8010104:	d004      	beq.n	8010110 <dir_alloc+0x50>
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6a1b      	ldr	r3, [r3, #32]
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d107      	bne.n	8010120 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010110:	693b      	ldr	r3, [r7, #16]
 8010112:	3301      	adds	r3, #1
 8010114:	613b      	str	r3, [r7, #16]
 8010116:	693a      	ldr	r2, [r7, #16]
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	429a      	cmp	r2, r3
 801011c:	d102      	bne.n	8010124 <dir_alloc+0x64>
 801011e:	e00c      	b.n	801013a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010120:	2300      	movs	r3, #0
 8010122:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010124:	2101      	movs	r1, #1
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f7ff ff05 	bl	800ff36 <dir_next>
 801012c:	4603      	mov	r3, r0
 801012e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010130:	7dfb      	ldrb	r3, [r7, #23]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d0d7      	beq.n	80100e6 <dir_alloc+0x26>
 8010136:	e000      	b.n	801013a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010138:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801013a:	7dfb      	ldrb	r3, [r7, #23]
 801013c:	2b04      	cmp	r3, #4
 801013e:	d101      	bne.n	8010144 <dir_alloc+0x84>
 8010140:	2307      	movs	r3, #7
 8010142:	75fb      	strb	r3, [r7, #23]
	return res;
 8010144:	7dfb      	ldrb	r3, [r7, #23]
}
 8010146:	4618      	mov	r0, r3
 8010148:	3718      	adds	r7, #24
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}

0801014e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801014e:	b580      	push	{r7, lr}
 8010150:	b084      	sub	sp, #16
 8010152:	af00      	add	r7, sp, #0
 8010154:	6078      	str	r0, [r7, #4]
 8010156:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	331a      	adds	r3, #26
 801015c:	4618      	mov	r0, r3
 801015e:	f7ff f83f 	bl	800f1e0 <ld_word>
 8010162:	4603      	mov	r3, r0
 8010164:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	781b      	ldrb	r3, [r3, #0]
 801016a:	2b03      	cmp	r3, #3
 801016c:	d109      	bne.n	8010182 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	3314      	adds	r3, #20
 8010172:	4618      	mov	r0, r3
 8010174:	f7ff f834 	bl	800f1e0 <ld_word>
 8010178:	4603      	mov	r3, r0
 801017a:	041b      	lsls	r3, r3, #16
 801017c:	68fa      	ldr	r2, [r7, #12]
 801017e:	4313      	orrs	r3, r2
 8010180:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010182:	68fb      	ldr	r3, [r7, #12]
}
 8010184:	4618      	mov	r0, r3
 8010186:	3710      	adds	r7, #16
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
 8010192:	60f8      	str	r0, [r7, #12]
 8010194:	60b9      	str	r1, [r7, #8]
 8010196:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	331a      	adds	r3, #26
 801019c:	687a      	ldr	r2, [r7, #4]
 801019e:	b292      	uxth	r2, r2
 80101a0:	4611      	mov	r1, r2
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7ff f857 	bl	800f256 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	2b03      	cmp	r3, #3
 80101ae:	d109      	bne.n	80101c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	f103 0214 	add.w	r2, r3, #20
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	0c1b      	lsrs	r3, r3, #16
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	4619      	mov	r1, r3
 80101be:	4610      	mov	r0, r2
 80101c0:	f7ff f849 	bl	800f256 <st_word>
	}
}
 80101c4:	bf00      	nop
 80101c6:	3710      	adds	r7, #16
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b086      	sub	sp, #24
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80101da:	2100      	movs	r1, #0
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f7ff fe2f 	bl	800fe40 <dir_sdi>
 80101e2:	4603      	mov	r3, r0
 80101e4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80101e6:	7dfb      	ldrb	r3, [r7, #23]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d001      	beq.n	80101f0 <dir_find+0x24>
 80101ec:	7dfb      	ldrb	r3, [r7, #23]
 80101ee:	e03e      	b.n	801026e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	69db      	ldr	r3, [r3, #28]
 80101f4:	4619      	mov	r1, r3
 80101f6:	6938      	ldr	r0, [r7, #16]
 80101f8:	f7ff faa2 	bl	800f740 <move_window>
 80101fc:	4603      	mov	r3, r0
 80101fe:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010200:	7dfb      	ldrb	r3, [r7, #23]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d12f      	bne.n	8010266 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6a1b      	ldr	r3, [r3, #32]
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801020e:	7bfb      	ldrb	r3, [r7, #15]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d102      	bne.n	801021a <dir_find+0x4e>
 8010214:	2304      	movs	r3, #4
 8010216:	75fb      	strb	r3, [r7, #23]
 8010218:	e028      	b.n	801026c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6a1b      	ldr	r3, [r3, #32]
 801021e:	330b      	adds	r3, #11
 8010220:	781b      	ldrb	r3, [r3, #0]
 8010222:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010226:	b2da      	uxtb	r2, r3
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6a1b      	ldr	r3, [r3, #32]
 8010230:	330b      	adds	r3, #11
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	f003 0308 	and.w	r3, r3, #8
 8010238:	2b00      	cmp	r3, #0
 801023a:	d10a      	bne.n	8010252 <dir_find+0x86>
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6a18      	ldr	r0, [r3, #32]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	3324      	adds	r3, #36	; 0x24
 8010244:	220b      	movs	r2, #11
 8010246:	4619      	mov	r1, r3
 8010248:	f7ff f888 	bl	800f35c <mem_cmp>
 801024c:	4603      	mov	r3, r0
 801024e:	2b00      	cmp	r3, #0
 8010250:	d00b      	beq.n	801026a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010252:	2100      	movs	r1, #0
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f7ff fe6e 	bl	800ff36 <dir_next>
 801025a:	4603      	mov	r3, r0
 801025c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801025e:	7dfb      	ldrb	r3, [r7, #23]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d0c5      	beq.n	80101f0 <dir_find+0x24>
 8010264:	e002      	b.n	801026c <dir_find+0xa0>
		if (res != FR_OK) break;
 8010266:	bf00      	nop
 8010268:	e000      	b.n	801026c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801026a:	bf00      	nop

	return res;
 801026c:	7dfb      	ldrb	r3, [r7, #23]
}
 801026e:	4618      	mov	r0, r3
 8010270:	3718      	adds	r7, #24
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}

08010276 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010276:	b580      	push	{r7, lr}
 8010278:	b084      	sub	sp, #16
 801027a:	af00      	add	r7, sp, #0
 801027c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010284:	2101      	movs	r1, #1
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f7ff ff1a 	bl	80100c0 <dir_alloc>
 801028c:	4603      	mov	r3, r0
 801028e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010290:	7bfb      	ldrb	r3, [r7, #15]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d11c      	bne.n	80102d0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	69db      	ldr	r3, [r3, #28]
 801029a:	4619      	mov	r1, r3
 801029c:	68b8      	ldr	r0, [r7, #8]
 801029e:	f7ff fa4f 	bl	800f740 <move_window>
 80102a2:	4603      	mov	r3, r0
 80102a4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80102a6:	7bfb      	ldrb	r3, [r7, #15]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d111      	bne.n	80102d0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6a1b      	ldr	r3, [r3, #32]
 80102b0:	2220      	movs	r2, #32
 80102b2:	2100      	movs	r1, #0
 80102b4:	4618      	mov	r0, r3
 80102b6:	f7ff f836 	bl	800f326 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6a18      	ldr	r0, [r3, #32]
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	3324      	adds	r3, #36	; 0x24
 80102c2:	220b      	movs	r2, #11
 80102c4:	4619      	mov	r1, r3
 80102c6:	f7ff f80d 	bl	800f2e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	2201      	movs	r2, #1
 80102ce:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80102d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3710      	adds	r7, #16
 80102d6:	46bd      	mov	sp, r7
 80102d8:	bd80      	pop	{r7, pc}
	...

080102dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b088      	sub	sp, #32
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	60fb      	str	r3, [r7, #12]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	3324      	adds	r3, #36	; 0x24
 80102f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80102f2:	220b      	movs	r2, #11
 80102f4:	2120      	movs	r1, #32
 80102f6:	68b8      	ldr	r0, [r7, #8]
 80102f8:	f7ff f815 	bl	800f326 <mem_set>
	si = i = 0; ni = 8;
 80102fc:	2300      	movs	r3, #0
 80102fe:	613b      	str	r3, [r7, #16]
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	61fb      	str	r3, [r7, #28]
 8010304:	2308      	movs	r3, #8
 8010306:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	1c5a      	adds	r2, r3, #1
 801030c:	61fa      	str	r2, [r7, #28]
 801030e:	68fa      	ldr	r2, [r7, #12]
 8010310:	4413      	add	r3, r2
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010316:	7efb      	ldrb	r3, [r7, #27]
 8010318:	2b20      	cmp	r3, #32
 801031a:	d94e      	bls.n	80103ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801031c:	7efb      	ldrb	r3, [r7, #27]
 801031e:	2b2f      	cmp	r3, #47	; 0x2f
 8010320:	d006      	beq.n	8010330 <create_name+0x54>
 8010322:	7efb      	ldrb	r3, [r7, #27]
 8010324:	2b5c      	cmp	r3, #92	; 0x5c
 8010326:	d110      	bne.n	801034a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010328:	e002      	b.n	8010330 <create_name+0x54>
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	3301      	adds	r3, #1
 801032e:	61fb      	str	r3, [r7, #28]
 8010330:	68fa      	ldr	r2, [r7, #12]
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	4413      	add	r3, r2
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	2b2f      	cmp	r3, #47	; 0x2f
 801033a:	d0f6      	beq.n	801032a <create_name+0x4e>
 801033c:	68fa      	ldr	r2, [r7, #12]
 801033e:	69fb      	ldr	r3, [r7, #28]
 8010340:	4413      	add	r3, r2
 8010342:	781b      	ldrb	r3, [r3, #0]
 8010344:	2b5c      	cmp	r3, #92	; 0x5c
 8010346:	d0f0      	beq.n	801032a <create_name+0x4e>
			break;
 8010348:	e038      	b.n	80103bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801034a:	7efb      	ldrb	r3, [r7, #27]
 801034c:	2b2e      	cmp	r3, #46	; 0x2e
 801034e:	d003      	beq.n	8010358 <create_name+0x7c>
 8010350:	693a      	ldr	r2, [r7, #16]
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	429a      	cmp	r2, r3
 8010356:	d30c      	bcc.n	8010372 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010358:	697b      	ldr	r3, [r7, #20]
 801035a:	2b0b      	cmp	r3, #11
 801035c:	d002      	beq.n	8010364 <create_name+0x88>
 801035e:	7efb      	ldrb	r3, [r7, #27]
 8010360:	2b2e      	cmp	r3, #46	; 0x2e
 8010362:	d001      	beq.n	8010368 <create_name+0x8c>
 8010364:	2306      	movs	r3, #6
 8010366:	e044      	b.n	80103f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010368:	2308      	movs	r3, #8
 801036a:	613b      	str	r3, [r7, #16]
 801036c:	230b      	movs	r3, #11
 801036e:	617b      	str	r3, [r7, #20]
			continue;
 8010370:	e022      	b.n	80103b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010372:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010376:	2b00      	cmp	r3, #0
 8010378:	da04      	bge.n	8010384 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801037a:	7efb      	ldrb	r3, [r7, #27]
 801037c:	3b80      	subs	r3, #128	; 0x80
 801037e:	4a1f      	ldr	r2, [pc, #124]	; (80103fc <create_name+0x120>)
 8010380:	5cd3      	ldrb	r3, [r2, r3]
 8010382:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010384:	7efb      	ldrb	r3, [r7, #27]
 8010386:	4619      	mov	r1, r3
 8010388:	481d      	ldr	r0, [pc, #116]	; (8010400 <create_name+0x124>)
 801038a:	f7ff f80e 	bl	800f3aa <chk_chr>
 801038e:	4603      	mov	r3, r0
 8010390:	2b00      	cmp	r3, #0
 8010392:	d001      	beq.n	8010398 <create_name+0xbc>
 8010394:	2306      	movs	r3, #6
 8010396:	e02c      	b.n	80103f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010398:	7efb      	ldrb	r3, [r7, #27]
 801039a:	2b60      	cmp	r3, #96	; 0x60
 801039c:	d905      	bls.n	80103aa <create_name+0xce>
 801039e:	7efb      	ldrb	r3, [r7, #27]
 80103a0:	2b7a      	cmp	r3, #122	; 0x7a
 80103a2:	d802      	bhi.n	80103aa <create_name+0xce>
 80103a4:	7efb      	ldrb	r3, [r7, #27]
 80103a6:	3b20      	subs	r3, #32
 80103a8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	1c5a      	adds	r2, r3, #1
 80103ae:	613a      	str	r2, [r7, #16]
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	4413      	add	r3, r2
 80103b4:	7efa      	ldrb	r2, [r7, #27]
 80103b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80103b8:	e7a6      	b.n	8010308 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80103ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80103bc:	68fa      	ldr	r2, [r7, #12]
 80103be:	69fb      	ldr	r3, [r7, #28]
 80103c0:	441a      	add	r2, r3
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d101      	bne.n	80103d0 <create_name+0xf4>
 80103cc:	2306      	movs	r3, #6
 80103ce:	e010      	b.n	80103f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	2be5      	cmp	r3, #229	; 0xe5
 80103d6:	d102      	bne.n	80103de <create_name+0x102>
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	2205      	movs	r2, #5
 80103dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80103de:	7efb      	ldrb	r3, [r7, #27]
 80103e0:	2b20      	cmp	r3, #32
 80103e2:	d801      	bhi.n	80103e8 <create_name+0x10c>
 80103e4:	2204      	movs	r2, #4
 80103e6:	e000      	b.n	80103ea <create_name+0x10e>
 80103e8:	2200      	movs	r2, #0
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	330b      	adds	r3, #11
 80103ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80103f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80103f2:	4618      	mov	r0, r3
 80103f4:	3720      	adds	r7, #32
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
 80103fa:	bf00      	nop
 80103fc:	08018f34 	.word	0x08018f34
 8010400:	08017558 	.word	0x08017558

08010404 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b086      	sub	sp, #24
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010418:	e002      	b.n	8010420 <follow_path+0x1c>
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	3301      	adds	r3, #1
 801041e:	603b      	str	r3, [r7, #0]
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	2b2f      	cmp	r3, #47	; 0x2f
 8010426:	d0f8      	beq.n	801041a <follow_path+0x16>
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	2b5c      	cmp	r3, #92	; 0x5c
 801042e:	d0f4      	beq.n	801041a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	2200      	movs	r2, #0
 8010434:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	2b1f      	cmp	r3, #31
 801043c:	d80a      	bhi.n	8010454 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2280      	movs	r2, #128	; 0x80
 8010442:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010446:	2100      	movs	r1, #0
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f7ff fcf9 	bl	800fe40 <dir_sdi>
 801044e:	4603      	mov	r3, r0
 8010450:	75fb      	strb	r3, [r7, #23]
 8010452:	e043      	b.n	80104dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010454:	463b      	mov	r3, r7
 8010456:	4619      	mov	r1, r3
 8010458:	6878      	ldr	r0, [r7, #4]
 801045a:	f7ff ff3f 	bl	80102dc <create_name>
 801045e:	4603      	mov	r3, r0
 8010460:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010462:	7dfb      	ldrb	r3, [r7, #23]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d134      	bne.n	80104d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f7ff feaf 	bl	80101cc <dir_find>
 801046e:	4603      	mov	r3, r0
 8010470:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010478:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801047a:	7dfb      	ldrb	r3, [r7, #23]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d00a      	beq.n	8010496 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010480:	7dfb      	ldrb	r3, [r7, #23]
 8010482:	2b04      	cmp	r3, #4
 8010484:	d127      	bne.n	80104d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010486:	7afb      	ldrb	r3, [r7, #11]
 8010488:	f003 0304 	and.w	r3, r3, #4
 801048c:	2b00      	cmp	r3, #0
 801048e:	d122      	bne.n	80104d6 <follow_path+0xd2>
 8010490:	2305      	movs	r3, #5
 8010492:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010494:	e01f      	b.n	80104d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010496:	7afb      	ldrb	r3, [r7, #11]
 8010498:	f003 0304 	and.w	r3, r3, #4
 801049c:	2b00      	cmp	r3, #0
 801049e:	d11c      	bne.n	80104da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	799b      	ldrb	r3, [r3, #6]
 80104a4:	f003 0310 	and.w	r3, r3, #16
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d102      	bne.n	80104b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80104ac:	2305      	movs	r3, #5
 80104ae:	75fb      	strb	r3, [r7, #23]
 80104b0:	e014      	b.n	80104dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	695b      	ldr	r3, [r3, #20]
 80104bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104c0:	4413      	add	r3, r2
 80104c2:	4619      	mov	r1, r3
 80104c4:	68f8      	ldr	r0, [r7, #12]
 80104c6:	f7ff fe42 	bl	801014e <ld_clust>
 80104ca:	4602      	mov	r2, r0
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80104d0:	e7c0      	b.n	8010454 <follow_path+0x50>
			if (res != FR_OK) break;
 80104d2:	bf00      	nop
 80104d4:	e002      	b.n	80104dc <follow_path+0xd8>
				break;
 80104d6:	bf00      	nop
 80104d8:	e000      	b.n	80104dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80104da:	bf00      	nop
			}
		}
	}

	return res;
 80104dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3718      	adds	r7, #24
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80104e6:	b480      	push	{r7}
 80104e8:	b087      	sub	sp, #28
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80104ee:	f04f 33ff 	mov.w	r3, #4294967295
 80104f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d031      	beq.n	8010560 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	617b      	str	r3, [r7, #20]
 8010502:	e002      	b.n	801050a <get_ldnumber+0x24>
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	3301      	adds	r3, #1
 8010508:	617b      	str	r3, [r7, #20]
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	2b20      	cmp	r3, #32
 8010510:	d903      	bls.n	801051a <get_ldnumber+0x34>
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	2b3a      	cmp	r3, #58	; 0x3a
 8010518:	d1f4      	bne.n	8010504 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	2b3a      	cmp	r3, #58	; 0x3a
 8010520:	d11c      	bne.n	801055c <get_ldnumber+0x76>
			tp = *path;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	1c5a      	adds	r2, r3, #1
 801052c:	60fa      	str	r2, [r7, #12]
 801052e:	781b      	ldrb	r3, [r3, #0]
 8010530:	3b30      	subs	r3, #48	; 0x30
 8010532:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	2b09      	cmp	r3, #9
 8010538:	d80e      	bhi.n	8010558 <get_ldnumber+0x72>
 801053a:	68fa      	ldr	r2, [r7, #12]
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	429a      	cmp	r2, r3
 8010540:	d10a      	bne.n	8010558 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d107      	bne.n	8010558 <get_ldnumber+0x72>
					vol = (int)i;
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	3301      	adds	r3, #1
 8010550:	617b      	str	r3, [r7, #20]
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	697a      	ldr	r2, [r7, #20]
 8010556:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	e002      	b.n	8010562 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801055c:	2300      	movs	r3, #0
 801055e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010560:	693b      	ldr	r3, [r7, #16]
}
 8010562:	4618      	mov	r0, r3
 8010564:	371c      	adds	r7, #28
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr
	...

08010570 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b082      	sub	sp, #8
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2200      	movs	r2, #0
 801057e:	70da      	strb	r2, [r3, #3]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f04f 32ff 	mov.w	r2, #4294967295
 8010586:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010588:	6839      	ldr	r1, [r7, #0]
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7ff f8d8 	bl	800f740 <move_window>
 8010590:	4603      	mov	r3, r0
 8010592:	2b00      	cmp	r3, #0
 8010594:	d001      	beq.n	801059a <check_fs+0x2a>
 8010596:	2304      	movs	r3, #4
 8010598:	e038      	b.n	801060c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	3330      	adds	r3, #48	; 0x30
 801059e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7fe fe1c 	bl	800f1e0 <ld_word>
 80105a8:	4603      	mov	r3, r0
 80105aa:	461a      	mov	r2, r3
 80105ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d001      	beq.n	80105b8 <check_fs+0x48>
 80105b4:	2303      	movs	r3, #3
 80105b6:	e029      	b.n	801060c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105be:	2be9      	cmp	r3, #233	; 0xe9
 80105c0:	d009      	beq.n	80105d6 <check_fs+0x66>
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105c8:	2beb      	cmp	r3, #235	; 0xeb
 80105ca:	d11e      	bne.n	801060a <check_fs+0x9a>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80105d2:	2b90      	cmp	r3, #144	; 0x90
 80105d4:	d119      	bne.n	801060a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	3330      	adds	r3, #48	; 0x30
 80105da:	3336      	adds	r3, #54	; 0x36
 80105dc:	4618      	mov	r0, r3
 80105de:	f7fe fe17 	bl	800f210 <ld_dword>
 80105e2:	4603      	mov	r3, r0
 80105e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80105e8:	4a0a      	ldr	r2, [pc, #40]	; (8010614 <check_fs+0xa4>)
 80105ea:	4293      	cmp	r3, r2
 80105ec:	d101      	bne.n	80105f2 <check_fs+0x82>
 80105ee:	2300      	movs	r3, #0
 80105f0:	e00c      	b.n	801060c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	3330      	adds	r3, #48	; 0x30
 80105f6:	3352      	adds	r3, #82	; 0x52
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7fe fe09 	bl	800f210 <ld_dword>
 80105fe:	4603      	mov	r3, r0
 8010600:	4a05      	ldr	r2, [pc, #20]	; (8010618 <check_fs+0xa8>)
 8010602:	4293      	cmp	r3, r2
 8010604:	d101      	bne.n	801060a <check_fs+0x9a>
 8010606:	2300      	movs	r3, #0
 8010608:	e000      	b.n	801060c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801060a:	2302      	movs	r3, #2
}
 801060c:	4618      	mov	r0, r3
 801060e:	3708      	adds	r7, #8
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}
 8010614:	00544146 	.word	0x00544146
 8010618:	33544146 	.word	0x33544146

0801061c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b096      	sub	sp, #88	; 0x58
 8010620:	af00      	add	r7, sp, #0
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	60b9      	str	r1, [r7, #8]
 8010626:	4613      	mov	r3, r2
 8010628:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	2200      	movs	r2, #0
 801062e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f7ff ff58 	bl	80104e6 <get_ldnumber>
 8010636:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801063a:	2b00      	cmp	r3, #0
 801063c:	da01      	bge.n	8010642 <find_volume+0x26>
 801063e:	230b      	movs	r3, #11
 8010640:	e22e      	b.n	8010aa0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010642:	4aa8      	ldr	r2, [pc, #672]	; (80108e4 <find_volume+0x2c8>)
 8010644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801064a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801064c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801064e:	2b00      	cmp	r3, #0
 8010650:	d101      	bne.n	8010656 <find_volume+0x3a>
 8010652:	230c      	movs	r3, #12
 8010654:	e224      	b.n	8010aa0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801065a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801065c:	79fb      	ldrb	r3, [r7, #7]
 801065e:	f023 0301 	bic.w	r3, r3, #1
 8010662:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d01a      	beq.n	80106a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801066c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066e:	785b      	ldrb	r3, [r3, #1]
 8010670:	4618      	mov	r0, r3
 8010672:	f7fe fd17 	bl	800f0a4 <disk_status>
 8010676:	4603      	mov	r3, r0
 8010678:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801067c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010680:	f003 0301 	and.w	r3, r3, #1
 8010684:	2b00      	cmp	r3, #0
 8010686:	d10c      	bne.n	80106a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010688:	79fb      	ldrb	r3, [r7, #7]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d007      	beq.n	801069e <find_volume+0x82>
 801068e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010692:	f003 0304 	and.w	r3, r3, #4
 8010696:	2b00      	cmp	r3, #0
 8010698:	d001      	beq.n	801069e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801069a:	230a      	movs	r3, #10
 801069c:	e200      	b.n	8010aa0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 801069e:	2300      	movs	r3, #0
 80106a0:	e1fe      	b.n	8010aa0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80106a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a4:	2200      	movs	r2, #0
 80106a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80106a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106aa:	b2da      	uxtb	r2, r3
 80106ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80106b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b2:	785b      	ldrb	r3, [r3, #1]
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7fe fd0f 	bl	800f0d8 <disk_initialize>
 80106ba:	4603      	mov	r3, r0
 80106bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80106c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106c4:	f003 0301 	and.w	r3, r3, #1
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d001      	beq.n	80106d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80106cc:	2303      	movs	r3, #3
 80106ce:	e1e7      	b.n	8010aa0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80106d0:	79fb      	ldrb	r3, [r7, #7]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d007      	beq.n	80106e6 <find_volume+0xca>
 80106d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106da:	f003 0304 	and.w	r3, r3, #4
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80106e2:	230a      	movs	r3, #10
 80106e4:	e1dc      	b.n	8010aa0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80106e6:	2300      	movs	r3, #0
 80106e8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80106ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80106ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80106ee:	f7ff ff3f 	bl	8010570 <check_fs>
 80106f2:	4603      	mov	r3, r0
 80106f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80106f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80106fc:	2b02      	cmp	r3, #2
 80106fe:	d14b      	bne.n	8010798 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010700:	2300      	movs	r3, #0
 8010702:	643b      	str	r3, [r7, #64]	; 0x40
 8010704:	e01f      	b.n	8010746 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010708:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801070c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801070e:	011b      	lsls	r3, r3, #4
 8010710:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010714:	4413      	add	r3, r2
 8010716:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801071a:	3304      	adds	r3, #4
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d006      	beq.n	8010730 <find_volume+0x114>
 8010722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010724:	3308      	adds	r3, #8
 8010726:	4618      	mov	r0, r3
 8010728:	f7fe fd72 	bl	800f210 <ld_dword>
 801072c:	4602      	mov	r2, r0
 801072e:	e000      	b.n	8010732 <find_volume+0x116>
 8010730:	2200      	movs	r2, #0
 8010732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010734:	009b      	lsls	r3, r3, #2
 8010736:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801073a:	440b      	add	r3, r1
 801073c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010742:	3301      	adds	r3, #1
 8010744:	643b      	str	r3, [r7, #64]	; 0x40
 8010746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010748:	2b03      	cmp	r3, #3
 801074a:	d9dc      	bls.n	8010706 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801074c:	2300      	movs	r3, #0
 801074e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010752:	2b00      	cmp	r3, #0
 8010754:	d002      	beq.n	801075c <find_volume+0x140>
 8010756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010758:	3b01      	subs	r3, #1
 801075a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801075c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801075e:	009b      	lsls	r3, r3, #2
 8010760:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010764:	4413      	add	r3, r2
 8010766:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801076a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801076c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801076e:	2b00      	cmp	r3, #0
 8010770:	d005      	beq.n	801077e <find_volume+0x162>
 8010772:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010774:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010776:	f7ff fefb 	bl	8010570 <check_fs>
 801077a:	4603      	mov	r3, r0
 801077c:	e000      	b.n	8010780 <find_volume+0x164>
 801077e:	2303      	movs	r3, #3
 8010780:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010788:	2b01      	cmp	r3, #1
 801078a:	d905      	bls.n	8010798 <find_volume+0x17c>
 801078c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801078e:	3301      	adds	r3, #1
 8010790:	643b      	str	r3, [r7, #64]	; 0x40
 8010792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010794:	2b03      	cmp	r3, #3
 8010796:	d9e1      	bls.n	801075c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010798:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801079c:	2b04      	cmp	r3, #4
 801079e:	d101      	bne.n	80107a4 <find_volume+0x188>
 80107a0:	2301      	movs	r3, #1
 80107a2:	e17d      	b.n	8010aa0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80107a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	d901      	bls.n	80107b0 <find_volume+0x194>
 80107ac:	230d      	movs	r3, #13
 80107ae:	e177      	b.n	8010aa0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80107b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b2:	3330      	adds	r3, #48	; 0x30
 80107b4:	330b      	adds	r3, #11
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7fe fd12 	bl	800f1e0 <ld_word>
 80107bc:	4603      	mov	r3, r0
 80107be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80107c2:	d001      	beq.n	80107c8 <find_volume+0x1ac>
 80107c4:	230d      	movs	r3, #13
 80107c6:	e16b      	b.n	8010aa0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80107c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ca:	3330      	adds	r3, #48	; 0x30
 80107cc:	3316      	adds	r3, #22
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fe fd06 	bl	800f1e0 <ld_word>
 80107d4:	4603      	mov	r3, r0
 80107d6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80107d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d106      	bne.n	80107ec <find_volume+0x1d0>
 80107de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107e0:	3330      	adds	r3, #48	; 0x30
 80107e2:	3324      	adds	r3, #36	; 0x24
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7fe fd13 	bl	800f210 <ld_dword>
 80107ea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80107ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80107f0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80107f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80107f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80107fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fe:	789b      	ldrb	r3, [r3, #2]
 8010800:	2b01      	cmp	r3, #1
 8010802:	d005      	beq.n	8010810 <find_volume+0x1f4>
 8010804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010806:	789b      	ldrb	r3, [r3, #2]
 8010808:	2b02      	cmp	r3, #2
 801080a:	d001      	beq.n	8010810 <find_volume+0x1f4>
 801080c:	230d      	movs	r3, #13
 801080e:	e147      	b.n	8010aa0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010812:	789b      	ldrb	r3, [r3, #2]
 8010814:	461a      	mov	r2, r3
 8010816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010818:	fb02 f303 	mul.w	r3, r2, r3
 801081c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801081e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010824:	b29a      	uxth	r2, r3
 8010826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010828:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801082a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801082c:	895b      	ldrh	r3, [r3, #10]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d008      	beq.n	8010844 <find_volume+0x228>
 8010832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010834:	895b      	ldrh	r3, [r3, #10]
 8010836:	461a      	mov	r2, r3
 8010838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801083a:	895b      	ldrh	r3, [r3, #10]
 801083c:	3b01      	subs	r3, #1
 801083e:	4013      	ands	r3, r2
 8010840:	2b00      	cmp	r3, #0
 8010842:	d001      	beq.n	8010848 <find_volume+0x22c>
 8010844:	230d      	movs	r3, #13
 8010846:	e12b      	b.n	8010aa0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801084a:	3330      	adds	r3, #48	; 0x30
 801084c:	3311      	adds	r3, #17
 801084e:	4618      	mov	r0, r3
 8010850:	f7fe fcc6 	bl	800f1e0 <ld_word>
 8010854:	4603      	mov	r3, r0
 8010856:	461a      	mov	r2, r3
 8010858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801085c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085e:	891b      	ldrh	r3, [r3, #8]
 8010860:	f003 030f 	and.w	r3, r3, #15
 8010864:	b29b      	uxth	r3, r3
 8010866:	2b00      	cmp	r3, #0
 8010868:	d001      	beq.n	801086e <find_volume+0x252>
 801086a:	230d      	movs	r3, #13
 801086c:	e118      	b.n	8010aa0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801086e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010870:	3330      	adds	r3, #48	; 0x30
 8010872:	3313      	adds	r3, #19
 8010874:	4618      	mov	r0, r3
 8010876:	f7fe fcb3 	bl	800f1e0 <ld_word>
 801087a:	4603      	mov	r3, r0
 801087c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801087e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010880:	2b00      	cmp	r3, #0
 8010882:	d106      	bne.n	8010892 <find_volume+0x276>
 8010884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010886:	3330      	adds	r3, #48	; 0x30
 8010888:	3320      	adds	r3, #32
 801088a:	4618      	mov	r0, r3
 801088c:	f7fe fcc0 	bl	800f210 <ld_dword>
 8010890:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010894:	3330      	adds	r3, #48	; 0x30
 8010896:	330e      	adds	r3, #14
 8010898:	4618      	mov	r0, r3
 801089a:	f7fe fca1 	bl	800f1e0 <ld_word>
 801089e:	4603      	mov	r3, r0
 80108a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80108a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d101      	bne.n	80108ac <find_volume+0x290>
 80108a8:	230d      	movs	r3, #13
 80108aa:	e0f9      	b.n	8010aa0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80108ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80108ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108b0:	4413      	add	r3, r2
 80108b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108b4:	8912      	ldrh	r2, [r2, #8]
 80108b6:	0912      	lsrs	r2, r2, #4
 80108b8:	b292      	uxth	r2, r2
 80108ba:	4413      	add	r3, r2
 80108bc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80108be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d201      	bcs.n	80108ca <find_volume+0x2ae>
 80108c6:	230d      	movs	r3, #13
 80108c8:	e0ea      	b.n	8010aa0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80108ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ce:	1ad3      	subs	r3, r2, r3
 80108d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108d2:	8952      	ldrh	r2, [r2, #10]
 80108d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80108d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80108da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d103      	bne.n	80108e8 <find_volume+0x2cc>
 80108e0:	230d      	movs	r3, #13
 80108e2:	e0dd      	b.n	8010aa0 <find_volume+0x484>
 80108e4:	20000650 	.word	0x20000650
		fmt = FS_FAT32;
 80108e8:	2303      	movs	r3, #3
 80108ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80108ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80108f4:	4293      	cmp	r3, r2
 80108f6:	d802      	bhi.n	80108fe <find_volume+0x2e2>
 80108f8:	2302      	movs	r3, #2
 80108fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80108fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010900:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010904:	4293      	cmp	r3, r2
 8010906:	d802      	bhi.n	801090e <find_volume+0x2f2>
 8010908:	2301      	movs	r3, #1
 801090a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010910:	1c9a      	adds	r2, r3, #2
 8010912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010914:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010918:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801091a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801091c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801091e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010920:	441a      	add	r2, r3
 8010922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010924:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010926:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801092a:	441a      	add	r2, r3
 801092c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8010930:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010934:	2b03      	cmp	r3, #3
 8010936:	d11e      	bne.n	8010976 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801093a:	3330      	adds	r3, #48	; 0x30
 801093c:	332a      	adds	r3, #42	; 0x2a
 801093e:	4618      	mov	r0, r3
 8010940:	f7fe fc4e 	bl	800f1e0 <ld_word>
 8010944:	4603      	mov	r3, r0
 8010946:	2b00      	cmp	r3, #0
 8010948:	d001      	beq.n	801094e <find_volume+0x332>
 801094a:	230d      	movs	r3, #13
 801094c:	e0a8      	b.n	8010aa0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801094e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010950:	891b      	ldrh	r3, [r3, #8]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d001      	beq.n	801095a <find_volume+0x33e>
 8010956:	230d      	movs	r3, #13
 8010958:	e0a2      	b.n	8010aa0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801095a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801095c:	3330      	adds	r3, #48	; 0x30
 801095e:	332c      	adds	r3, #44	; 0x2c
 8010960:	4618      	mov	r0, r3
 8010962:	f7fe fc55 	bl	800f210 <ld_dword>
 8010966:	4602      	mov	r2, r0
 8010968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801096a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801096c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801096e:	695b      	ldr	r3, [r3, #20]
 8010970:	009b      	lsls	r3, r3, #2
 8010972:	647b      	str	r3, [r7, #68]	; 0x44
 8010974:	e01f      	b.n	80109b6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010978:	891b      	ldrh	r3, [r3, #8]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d101      	bne.n	8010982 <find_volume+0x366>
 801097e:	230d      	movs	r3, #13
 8010980:	e08e      	b.n	8010aa0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010984:	6a1a      	ldr	r2, [r3, #32]
 8010986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010988:	441a      	add	r2, r3
 801098a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801098e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010992:	2b02      	cmp	r3, #2
 8010994:	d103      	bne.n	801099e <find_volume+0x382>
 8010996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010998:	695b      	ldr	r3, [r3, #20]
 801099a:	005b      	lsls	r3, r3, #1
 801099c:	e00a      	b.n	80109b4 <find_volume+0x398>
 801099e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a0:	695a      	ldr	r2, [r3, #20]
 80109a2:	4613      	mov	r3, r2
 80109a4:	005b      	lsls	r3, r3, #1
 80109a6:	4413      	add	r3, r2
 80109a8:	085a      	lsrs	r2, r3, #1
 80109aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ac:	695b      	ldr	r3, [r3, #20]
 80109ae:	f003 0301 	and.w	r3, r3, #1
 80109b2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80109b4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80109b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b8:	699a      	ldr	r2, [r3, #24]
 80109ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80109c0:	0a5b      	lsrs	r3, r3, #9
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d201      	bcs.n	80109ca <find_volume+0x3ae>
 80109c6:	230d      	movs	r3, #13
 80109c8:	e06a      	b.n	8010aa0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80109ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109cc:	f04f 32ff 	mov.w	r2, #4294967295
 80109d0:	611a      	str	r2, [r3, #16]
 80109d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d4:	691a      	ldr	r2, [r3, #16]
 80109d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80109da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109dc:	2280      	movs	r2, #128	; 0x80
 80109de:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80109e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109e4:	2b03      	cmp	r3, #3
 80109e6:	d149      	bne.n	8010a7c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80109e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ea:	3330      	adds	r3, #48	; 0x30
 80109ec:	3330      	adds	r3, #48	; 0x30
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7fe fbf6 	bl	800f1e0 <ld_word>
 80109f4:	4603      	mov	r3, r0
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d140      	bne.n	8010a7c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80109fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109fc:	3301      	adds	r3, #1
 80109fe:	4619      	mov	r1, r3
 8010a00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a02:	f7fe fe9d 	bl	800f740 <move_window>
 8010a06:	4603      	mov	r3, r0
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d137      	bne.n	8010a7c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8010a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0e:	2200      	movs	r2, #0
 8010a10:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a14:	3330      	adds	r3, #48	; 0x30
 8010a16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7fe fbe0 	bl	800f1e0 <ld_word>
 8010a20:	4603      	mov	r3, r0
 8010a22:	461a      	mov	r2, r3
 8010a24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d127      	bne.n	8010a7c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a2e:	3330      	adds	r3, #48	; 0x30
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7fe fbed 	bl	800f210 <ld_dword>
 8010a36:	4603      	mov	r3, r0
 8010a38:	4a1b      	ldr	r2, [pc, #108]	; (8010aa8 <find_volume+0x48c>)
 8010a3a:	4293      	cmp	r3, r2
 8010a3c:	d11e      	bne.n	8010a7c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a40:	3330      	adds	r3, #48	; 0x30
 8010a42:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7fe fbe2 	bl	800f210 <ld_dword>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	4a17      	ldr	r2, [pc, #92]	; (8010aac <find_volume+0x490>)
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d113      	bne.n	8010a7c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a56:	3330      	adds	r3, #48	; 0x30
 8010a58:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7fe fbd7 	bl	800f210 <ld_dword>
 8010a62:	4602      	mov	r2, r0
 8010a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a66:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a6a:	3330      	adds	r3, #48	; 0x30
 8010a6c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7fe fbcd 	bl	800f210 <ld_dword>
 8010a76:	4602      	mov	r2, r0
 8010a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010a82:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010a84:	4b0a      	ldr	r3, [pc, #40]	; (8010ab0 <find_volume+0x494>)
 8010a86:	881b      	ldrh	r3, [r3, #0]
 8010a88:	3301      	adds	r3, #1
 8010a8a:	b29a      	uxth	r2, r3
 8010a8c:	4b08      	ldr	r3, [pc, #32]	; (8010ab0 <find_volume+0x494>)
 8010a8e:	801a      	strh	r2, [r3, #0]
 8010a90:	4b07      	ldr	r3, [pc, #28]	; (8010ab0 <find_volume+0x494>)
 8010a92:	881a      	ldrh	r2, [r3, #0]
 8010a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a96:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010a98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a9a:	f7fe fde9 	bl	800f670 <clear_lock>
#endif
	return FR_OK;
 8010a9e:	2300      	movs	r3, #0
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3758      	adds	r7, #88	; 0x58
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}
 8010aa8:	41615252 	.word	0x41615252
 8010aac:	61417272 	.word	0x61417272
 8010ab0:	20000654 	.word	0x20000654

08010ab4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010abe:	2309      	movs	r3, #9
 8010ac0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d01c      	beq.n	8010b02 <validate+0x4e>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d018      	beq.n	8010b02 <validate+0x4e>
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d013      	beq.n	8010b02 <validate+0x4e>
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	889a      	ldrh	r2, [r3, #4]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	88db      	ldrh	r3, [r3, #6]
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d10c      	bne.n	8010b02 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	785b      	ldrb	r3, [r3, #1]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fe fad8 	bl	800f0a4 <disk_status>
 8010af4:	4603      	mov	r3, r0
 8010af6:	f003 0301 	and.w	r3, r3, #1
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d101      	bne.n	8010b02 <validate+0x4e>
			res = FR_OK;
 8010afe:	2300      	movs	r3, #0
 8010b00:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010b02:	7bfb      	ldrb	r3, [r7, #15]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d102      	bne.n	8010b0e <validate+0x5a>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	e000      	b.n	8010b10 <validate+0x5c>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	683a      	ldr	r2, [r7, #0]
 8010b12:	6013      	str	r3, [r2, #0]
	return res;
 8010b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3710      	adds	r7, #16
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}
	...

08010b20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b088      	sub	sp, #32
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	4613      	mov	r3, r2
 8010b2c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010b32:	f107 0310 	add.w	r3, r7, #16
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7ff fcd5 	bl	80104e6 <get_ldnumber>
 8010b3c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	da01      	bge.n	8010b48 <f_mount+0x28>
 8010b44:	230b      	movs	r3, #11
 8010b46:	e02b      	b.n	8010ba0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010b48:	4a17      	ldr	r2, [pc, #92]	; (8010ba8 <f_mount+0x88>)
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b50:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010b52:	69bb      	ldr	r3, [r7, #24]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d005      	beq.n	8010b64 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010b58:	69b8      	ldr	r0, [r7, #24]
 8010b5a:	f7fe fd89 	bl	800f670 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	2200      	movs	r2, #0
 8010b62:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d002      	beq.n	8010b70 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010b70:	68fa      	ldr	r2, [r7, #12]
 8010b72:	490d      	ldr	r1, [pc, #52]	; (8010ba8 <f_mount+0x88>)
 8010b74:	69fb      	ldr	r3, [r7, #28]
 8010b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d002      	beq.n	8010b86 <f_mount+0x66>
 8010b80:	79fb      	ldrb	r3, [r7, #7]
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d001      	beq.n	8010b8a <f_mount+0x6a>
 8010b86:	2300      	movs	r3, #0
 8010b88:	e00a      	b.n	8010ba0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010b8a:	f107 010c 	add.w	r1, r7, #12
 8010b8e:	f107 0308 	add.w	r3, r7, #8
 8010b92:	2200      	movs	r2, #0
 8010b94:	4618      	mov	r0, r3
 8010b96:	f7ff fd41 	bl	801061c <find_volume>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3720      	adds	r7, #32
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}
 8010ba8:	20000650 	.word	0x20000650

08010bac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b098      	sub	sp, #96	; 0x60
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d101      	bne.n	8010bc4 <f_open+0x18>
 8010bc0:	2309      	movs	r3, #9
 8010bc2:	e1ad      	b.n	8010f20 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010bc4:	79fb      	ldrb	r3, [r7, #7]
 8010bc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010bcc:	79fa      	ldrb	r2, [r7, #7]
 8010bce:	f107 0110 	add.w	r1, r7, #16
 8010bd2:	f107 0308 	add.w	r3, r7, #8
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7ff fd20 	bl	801061c <find_volume>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010be2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	f040 8191 	bne.w	8010f0e <f_open+0x362>
		dj.obj.fs = fs;
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010bf0:	68ba      	ldr	r2, [r7, #8]
 8010bf2:	f107 0314 	add.w	r3, r7, #20
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7ff fc03 	bl	8010404 <follow_path>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010c04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d11a      	bne.n	8010c42 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010c0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010c10:	b25b      	sxtb	r3, r3
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	da03      	bge.n	8010c1e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010c16:	2306      	movs	r3, #6
 8010c18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010c1c:	e011      	b.n	8010c42 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010c1e:	79fb      	ldrb	r3, [r7, #7]
 8010c20:	f023 0301 	bic.w	r3, r3, #1
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	bf14      	ite	ne
 8010c28:	2301      	movne	r3, #1
 8010c2a:	2300      	moveq	r3, #0
 8010c2c:	b2db      	uxtb	r3, r3
 8010c2e:	461a      	mov	r2, r3
 8010c30:	f107 0314 	add.w	r3, r7, #20
 8010c34:	4611      	mov	r1, r2
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fe fbd2 	bl	800f3e0 <chk_lock>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010c42:	79fb      	ldrb	r3, [r7, #7]
 8010c44:	f003 031c 	and.w	r3, r3, #28
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d07f      	beq.n	8010d4c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010c4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d017      	beq.n	8010c84 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010c54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c58:	2b04      	cmp	r3, #4
 8010c5a:	d10e      	bne.n	8010c7a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010c5c:	f7fe fc1c 	bl	800f498 <enq_lock>
 8010c60:	4603      	mov	r3, r0
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d006      	beq.n	8010c74 <f_open+0xc8>
 8010c66:	f107 0314 	add.w	r3, r7, #20
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7ff fb03 	bl	8010276 <dir_register>
 8010c70:	4603      	mov	r3, r0
 8010c72:	e000      	b.n	8010c76 <f_open+0xca>
 8010c74:	2312      	movs	r3, #18
 8010c76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010c7a:	79fb      	ldrb	r3, [r7, #7]
 8010c7c:	f043 0308 	orr.w	r3, r3, #8
 8010c80:	71fb      	strb	r3, [r7, #7]
 8010c82:	e010      	b.n	8010ca6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010c84:	7ebb      	ldrb	r3, [r7, #26]
 8010c86:	f003 0311 	and.w	r3, r3, #17
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d003      	beq.n	8010c96 <f_open+0xea>
					res = FR_DENIED;
 8010c8e:	2307      	movs	r3, #7
 8010c90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010c94:	e007      	b.n	8010ca6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010c96:	79fb      	ldrb	r3, [r7, #7]
 8010c98:	f003 0304 	and.w	r3, r3, #4
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d002      	beq.n	8010ca6 <f_open+0xfa>
 8010ca0:	2308      	movs	r3, #8
 8010ca2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010ca6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d168      	bne.n	8010d80 <f_open+0x1d4>
 8010cae:	79fb      	ldrb	r3, [r7, #7]
 8010cb0:	f003 0308 	and.w	r3, r3, #8
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d063      	beq.n	8010d80 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010cb8:	f7fc f822 	bl	800cd00 <get_fattime>
 8010cbc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cc0:	330e      	adds	r3, #14
 8010cc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7fe fae1 	bl	800f28c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ccc:	3316      	adds	r3, #22
 8010cce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7fe fadb 	bl	800f28c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cd8:	330b      	adds	r3, #11
 8010cda:	2220      	movs	r2, #32
 8010cdc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ce2:	4611      	mov	r1, r2
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7ff fa32 	bl	801014e <ld_clust>
 8010cea:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010cec:	693b      	ldr	r3, [r7, #16]
 8010cee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7ff fa4a 	bl	801018c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cfa:	331c      	adds	r3, #28
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7fe fac4 	bl	800f28c <st_dword>
					fs->wflag = 1;
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	2201      	movs	r2, #1
 8010d08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d037      	beq.n	8010d80 <f_open+0x1d4>
						dw = fs->winsect;
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d14:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010d16:	f107 0314 	add.w	r3, r7, #20
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7fe ff5d 	bl	800fbde <remove_chain>
 8010d24:	4603      	mov	r3, r0
 8010d26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d126      	bne.n	8010d80 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010d32:	693b      	ldr	r3, [r7, #16]
 8010d34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7fe fd02 	bl	800f740 <move_window>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010d46:	3a01      	subs	r2, #1
 8010d48:	60da      	str	r2, [r3, #12]
 8010d4a:	e019      	b.n	8010d80 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d115      	bne.n	8010d80 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010d54:	7ebb      	ldrb	r3, [r7, #26]
 8010d56:	f003 0310 	and.w	r3, r3, #16
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d003      	beq.n	8010d66 <f_open+0x1ba>
					res = FR_NO_FILE;
 8010d5e:	2304      	movs	r3, #4
 8010d60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010d64:	e00c      	b.n	8010d80 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010d66:	79fb      	ldrb	r3, [r7, #7]
 8010d68:	f003 0302 	and.w	r3, r3, #2
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d007      	beq.n	8010d80 <f_open+0x1d4>
 8010d70:	7ebb      	ldrb	r3, [r7, #26]
 8010d72:	f003 0301 	and.w	r3, r3, #1
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d002      	beq.n	8010d80 <f_open+0x1d4>
						res = FR_DENIED;
 8010d7a:	2307      	movs	r3, #7
 8010d7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010d80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d128      	bne.n	8010dda <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010d88:	79fb      	ldrb	r3, [r7, #7]
 8010d8a:	f003 0308 	and.w	r3, r3, #8
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d003      	beq.n	8010d9a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010d92:	79fb      	ldrb	r3, [r7, #7]
 8010d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010da8:	79fb      	ldrb	r3, [r7, #7]
 8010daa:	f023 0301 	bic.w	r3, r3, #1
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	bf14      	ite	ne
 8010db2:	2301      	movne	r3, #1
 8010db4:	2300      	moveq	r3, #0
 8010db6:	b2db      	uxtb	r3, r3
 8010db8:	461a      	mov	r2, r3
 8010dba:	f107 0314 	add.w	r3, r7, #20
 8010dbe:	4611      	mov	r1, r2
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7fe fb8b 	bl	800f4dc <inc_lock>
 8010dc6:	4602      	mov	r2, r0
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	691b      	ldr	r3, [r3, #16]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d102      	bne.n	8010dda <f_open+0x22e>
 8010dd4:	2302      	movs	r3, #2
 8010dd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010dda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	f040 8095 	bne.w	8010f0e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010de4:	693b      	ldr	r3, [r7, #16]
 8010de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010de8:	4611      	mov	r1, r2
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7ff f9af 	bl	801014e <ld_clust>
 8010df0:	4602      	mov	r2, r0
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010df8:	331c      	adds	r3, #28
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7fe fa08 	bl	800f210 <ld_dword>
 8010e00:	4602      	mov	r2, r0
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010e0c:	693a      	ldr	r2, [r7, #16]
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	88da      	ldrh	r2, [r3, #6]
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	79fa      	ldrb	r2, [r7, #7]
 8010e1e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	2200      	movs	r2, #0
 8010e24:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	3330      	adds	r3, #48	; 0x30
 8010e36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e3a:	2100      	movs	r1, #0
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7fe fa72 	bl	800f326 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010e42:	79fb      	ldrb	r3, [r7, #7]
 8010e44:	f003 0320 	and.w	r3, r3, #32
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d060      	beq.n	8010f0e <f_open+0x362>
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	68db      	ldr	r3, [r3, #12]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d05c      	beq.n	8010f0e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	68da      	ldr	r2, [r3, #12]
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	895b      	ldrh	r3, [r3, #10]
 8010e60:	025b      	lsls	r3, r3, #9
 8010e62:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	689b      	ldr	r3, [r3, #8]
 8010e68:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	68db      	ldr	r3, [r3, #12]
 8010e6e:	657b      	str	r3, [r7, #84]	; 0x54
 8010e70:	e016      	b.n	8010ea0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7fe fd1d 	bl	800f8b6 <get_fat>
 8010e7c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e80:	2b01      	cmp	r3, #1
 8010e82:	d802      	bhi.n	8010e8a <f_open+0x2de>
 8010e84:	2302      	movs	r3, #2
 8010e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e90:	d102      	bne.n	8010e98 <f_open+0x2ec>
 8010e92:	2301      	movs	r3, #1
 8010e94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010e98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010e9c:	1ad3      	subs	r3, r2, r3
 8010e9e:	657b      	str	r3, [r7, #84]	; 0x54
 8010ea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d103      	bne.n	8010eb0 <f_open+0x304>
 8010ea8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d8e0      	bhi.n	8010e72 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010eb4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010eb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d127      	bne.n	8010f0e <f_open+0x362>
 8010ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d022      	beq.n	8010f0e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010ec8:	693b      	ldr	r3, [r7, #16]
 8010eca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7fe fcd3 	bl	800f878 <clust2sect>
 8010ed2:	6478      	str	r0, [r7, #68]	; 0x44
 8010ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d103      	bne.n	8010ee2 <f_open+0x336>
						res = FR_INT_ERR;
 8010eda:	2302      	movs	r3, #2
 8010edc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010ee0:	e015      	b.n	8010f0e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ee4:	0a5a      	lsrs	r2, r3, #9
 8010ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ee8:	441a      	add	r2, r3
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	7858      	ldrb	r0, [r3, #1]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	6a1a      	ldr	r2, [r3, #32]
 8010efc:	2301      	movs	r3, #1
 8010efe:	f7fe f911 	bl	800f124 <disk_read>
 8010f02:	4603      	mov	r3, r0
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d002      	beq.n	8010f0e <f_open+0x362>
 8010f08:	2301      	movs	r3, #1
 8010f0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010f0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d002      	beq.n	8010f1c <f_open+0x370>
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010f1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3760      	adds	r7, #96	; 0x60
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b08c      	sub	sp, #48	; 0x30
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	60b9      	str	r1, [r7, #8]
 8010f32:	607a      	str	r2, [r7, #4]
 8010f34:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	f107 0210 	add.w	r2, r7, #16
 8010f46:	4611      	mov	r1, r2
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7ff fdb3 	bl	8010ab4 <validate>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010f54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d107      	bne.n	8010f6c <f_write+0x44>
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	7d5b      	ldrb	r3, [r3, #21]
 8010f60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010f64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d002      	beq.n	8010f72 <f_write+0x4a>
 8010f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f70:	e14b      	b.n	801120a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	7d1b      	ldrb	r3, [r3, #20]
 8010f76:	f003 0302 	and.w	r3, r3, #2
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d101      	bne.n	8010f82 <f_write+0x5a>
 8010f7e:	2307      	movs	r3, #7
 8010f80:	e143      	b.n	801120a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	699a      	ldr	r2, [r3, #24]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	441a      	add	r2, r3
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	699b      	ldr	r3, [r3, #24]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	f080 812d 	bcs.w	80111ee <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	699b      	ldr	r3, [r3, #24]
 8010f98:	43db      	mvns	r3, r3
 8010f9a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010f9c:	e127      	b.n	80111ee <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	699b      	ldr	r3, [r3, #24]
 8010fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	f040 80e3 	bne.w	8011172 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	699b      	ldr	r3, [r3, #24]
 8010fb0:	0a5b      	lsrs	r3, r3, #9
 8010fb2:	693a      	ldr	r2, [r7, #16]
 8010fb4:	8952      	ldrh	r2, [r2, #10]
 8010fb6:	3a01      	subs	r2, #1
 8010fb8:	4013      	ands	r3, r2
 8010fba:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010fbc:	69bb      	ldr	r3, [r7, #24]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d143      	bne.n	801104a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	699b      	ldr	r3, [r3, #24]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d10c      	bne.n	8010fe4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	689b      	ldr	r3, [r3, #8]
 8010fce:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d11a      	bne.n	801100c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2100      	movs	r1, #0
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7fe fe64 	bl	800fca8 <create_chain>
 8010fe0:	62b8      	str	r0, [r7, #40]	; 0x28
 8010fe2:	e013      	b.n	801100c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d007      	beq.n	8010ffc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	699b      	ldr	r3, [r3, #24]
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	68f8      	ldr	r0, [r7, #12]
 8010ff4:	f7fe fef0 	bl	800fdd8 <clmt_clust>
 8010ff8:	62b8      	str	r0, [r7, #40]	; 0x28
 8010ffa:	e007      	b.n	801100c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010ffc:	68fa      	ldr	r2, [r7, #12]
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	69db      	ldr	r3, [r3, #28]
 8011002:	4619      	mov	r1, r3
 8011004:	4610      	mov	r0, r2
 8011006:	f7fe fe4f 	bl	800fca8 <create_chain>
 801100a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801100c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801100e:	2b00      	cmp	r3, #0
 8011010:	f000 80f2 	beq.w	80111f8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011016:	2b01      	cmp	r3, #1
 8011018:	d104      	bne.n	8011024 <f_write+0xfc>
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	2202      	movs	r2, #2
 801101e:	755a      	strb	r2, [r3, #21]
 8011020:	2302      	movs	r3, #2
 8011022:	e0f2      	b.n	801120a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011026:	f1b3 3fff 	cmp.w	r3, #4294967295
 801102a:	d104      	bne.n	8011036 <f_write+0x10e>
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2201      	movs	r2, #1
 8011030:	755a      	strb	r2, [r3, #21]
 8011032:	2301      	movs	r3, #1
 8011034:	e0e9      	b.n	801120a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801103a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	689b      	ldr	r3, [r3, #8]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d102      	bne.n	801104a <f_write+0x122>
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011048:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	7d1b      	ldrb	r3, [r3, #20]
 801104e:	b25b      	sxtb	r3, r3
 8011050:	2b00      	cmp	r3, #0
 8011052:	da18      	bge.n	8011086 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	7858      	ldrb	r0, [r3, #1]
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	6a1a      	ldr	r2, [r3, #32]
 8011062:	2301      	movs	r3, #1
 8011064:	f7fe f87e 	bl	800f164 <disk_write>
 8011068:	4603      	mov	r3, r0
 801106a:	2b00      	cmp	r3, #0
 801106c:	d004      	beq.n	8011078 <f_write+0x150>
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2201      	movs	r2, #1
 8011072:	755a      	strb	r2, [r3, #21]
 8011074:	2301      	movs	r3, #1
 8011076:	e0c8      	b.n	801120a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	7d1b      	ldrb	r3, [r3, #20]
 801107c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011080:	b2da      	uxtb	r2, r3
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011086:	693a      	ldr	r2, [r7, #16]
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	69db      	ldr	r3, [r3, #28]
 801108c:	4619      	mov	r1, r3
 801108e:	4610      	mov	r0, r2
 8011090:	f7fe fbf2 	bl	800f878 <clust2sect>
 8011094:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d104      	bne.n	80110a6 <f_write+0x17e>
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2202      	movs	r2, #2
 80110a0:	755a      	strb	r2, [r3, #21]
 80110a2:	2302      	movs	r3, #2
 80110a4:	e0b1      	b.n	801120a <f_write+0x2e2>
			sect += csect;
 80110a6:	697a      	ldr	r2, [r7, #20]
 80110a8:	69bb      	ldr	r3, [r7, #24]
 80110aa:	4413      	add	r3, r2
 80110ac:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	0a5b      	lsrs	r3, r3, #9
 80110b2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80110b4:	6a3b      	ldr	r3, [r7, #32]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d03c      	beq.n	8011134 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80110ba:	69ba      	ldr	r2, [r7, #24]
 80110bc:	6a3b      	ldr	r3, [r7, #32]
 80110be:	4413      	add	r3, r2
 80110c0:	693a      	ldr	r2, [r7, #16]
 80110c2:	8952      	ldrh	r2, [r2, #10]
 80110c4:	4293      	cmp	r3, r2
 80110c6:	d905      	bls.n	80110d4 <f_write+0x1ac>
					cc = fs->csize - csect;
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	895b      	ldrh	r3, [r3, #10]
 80110cc:	461a      	mov	r2, r3
 80110ce:	69bb      	ldr	r3, [r7, #24]
 80110d0:	1ad3      	subs	r3, r2, r3
 80110d2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	7858      	ldrb	r0, [r3, #1]
 80110d8:	6a3b      	ldr	r3, [r7, #32]
 80110da:	697a      	ldr	r2, [r7, #20]
 80110dc:	69f9      	ldr	r1, [r7, #28]
 80110de:	f7fe f841 	bl	800f164 <disk_write>
 80110e2:	4603      	mov	r3, r0
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d004      	beq.n	80110f2 <f_write+0x1ca>
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2201      	movs	r2, #1
 80110ec:	755a      	strb	r2, [r3, #21]
 80110ee:	2301      	movs	r3, #1
 80110f0:	e08b      	b.n	801120a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	6a1a      	ldr	r2, [r3, #32]
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	1ad3      	subs	r3, r2, r3
 80110fa:	6a3a      	ldr	r2, [r7, #32]
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d915      	bls.n	801112c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	6a1a      	ldr	r2, [r3, #32]
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	1ad3      	subs	r3, r2, r3
 801110e:	025b      	lsls	r3, r3, #9
 8011110:	69fa      	ldr	r2, [r7, #28]
 8011112:	4413      	add	r3, r2
 8011114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011118:	4619      	mov	r1, r3
 801111a:	f7fe f8e3 	bl	800f2e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	7d1b      	ldrb	r3, [r3, #20]
 8011122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011126:	b2da      	uxtb	r2, r3
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801112c:	6a3b      	ldr	r3, [r7, #32]
 801112e:	025b      	lsls	r3, r3, #9
 8011130:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011132:	e03f      	b.n	80111b4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	6a1b      	ldr	r3, [r3, #32]
 8011138:	697a      	ldr	r2, [r7, #20]
 801113a:	429a      	cmp	r2, r3
 801113c:	d016      	beq.n	801116c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	699a      	ldr	r2, [r3, #24]
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011146:	429a      	cmp	r2, r3
 8011148:	d210      	bcs.n	801116c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	7858      	ldrb	r0, [r3, #1]
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011154:	2301      	movs	r3, #1
 8011156:	697a      	ldr	r2, [r7, #20]
 8011158:	f7fd ffe4 	bl	800f124 <disk_read>
 801115c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801115e:	2b00      	cmp	r3, #0
 8011160:	d004      	beq.n	801116c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2201      	movs	r2, #1
 8011166:	755a      	strb	r2, [r3, #21]
 8011168:	2301      	movs	r3, #1
 801116a:	e04e      	b.n	801120a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	697a      	ldr	r2, [r7, #20]
 8011170:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	699b      	ldr	r3, [r3, #24]
 8011176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801117a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801117e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	429a      	cmp	r2, r3
 8011186:	d901      	bls.n	801118c <f_write+0x264>
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	699b      	ldr	r3, [r3, #24]
 8011196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801119a:	4413      	add	r3, r2
 801119c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801119e:	69f9      	ldr	r1, [r7, #28]
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7fe f89f 	bl	800f2e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	7d1b      	ldrb	r3, [r3, #20]
 80111aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80111ae:	b2da      	uxtb	r2, r3
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80111b4:	69fa      	ldr	r2, [r7, #28]
 80111b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b8:	4413      	add	r3, r2
 80111ba:	61fb      	str	r3, [r7, #28]
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	699a      	ldr	r2, [r3, #24]
 80111c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c2:	441a      	add	r2, r3
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	619a      	str	r2, [r3, #24]
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	68da      	ldr	r2, [r3, #12]
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	699b      	ldr	r3, [r3, #24]
 80111d0:	429a      	cmp	r2, r3
 80111d2:	bf38      	it	cc
 80111d4:	461a      	movcc	r2, r3
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	60da      	str	r2, [r3, #12]
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	681a      	ldr	r2, [r3, #0]
 80111de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e0:	441a      	add	r2, r3
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	601a      	str	r2, [r3, #0]
 80111e6:	687a      	ldr	r2, [r7, #4]
 80111e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ea:	1ad3      	subs	r3, r2, r3
 80111ec:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	f47f aed4 	bne.w	8010f9e <f_write+0x76>
 80111f6:	e000      	b.n	80111fa <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80111f8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	7d1b      	ldrb	r3, [r3, #20]
 80111fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011202:	b2da      	uxtb	r2, r3
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011208:	2300      	movs	r3, #0
}
 801120a:	4618      	mov	r0, r3
 801120c:	3730      	adds	r7, #48	; 0x30
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}

08011212 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011212:	b580      	push	{r7, lr}
 8011214:	b086      	sub	sp, #24
 8011216:	af00      	add	r7, sp, #0
 8011218:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f107 0208 	add.w	r2, r7, #8
 8011220:	4611      	mov	r1, r2
 8011222:	4618      	mov	r0, r3
 8011224:	f7ff fc46 	bl	8010ab4 <validate>
 8011228:	4603      	mov	r3, r0
 801122a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801122c:	7dfb      	ldrb	r3, [r7, #23]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d168      	bne.n	8011304 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	7d1b      	ldrb	r3, [r3, #20]
 8011236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801123a:	2b00      	cmp	r3, #0
 801123c:	d062      	beq.n	8011304 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	7d1b      	ldrb	r3, [r3, #20]
 8011242:	b25b      	sxtb	r3, r3
 8011244:	2b00      	cmp	r3, #0
 8011246:	da15      	bge.n	8011274 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	7858      	ldrb	r0, [r3, #1]
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6a1a      	ldr	r2, [r3, #32]
 8011256:	2301      	movs	r3, #1
 8011258:	f7fd ff84 	bl	800f164 <disk_write>
 801125c:	4603      	mov	r3, r0
 801125e:	2b00      	cmp	r3, #0
 8011260:	d001      	beq.n	8011266 <f_sync+0x54>
 8011262:	2301      	movs	r3, #1
 8011264:	e04f      	b.n	8011306 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	7d1b      	ldrb	r3, [r3, #20]
 801126a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801126e:	b2da      	uxtb	r2, r3
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011274:	f7fb fd44 	bl	800cd00 <get_fattime>
 8011278:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801127a:	68ba      	ldr	r2, [r7, #8]
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011280:	4619      	mov	r1, r3
 8011282:	4610      	mov	r0, r2
 8011284:	f7fe fa5c 	bl	800f740 <move_window>
 8011288:	4603      	mov	r3, r0
 801128a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801128c:	7dfb      	ldrb	r3, [r7, #23]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d138      	bne.n	8011304 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011296:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	330b      	adds	r3, #11
 801129c:	781a      	ldrb	r2, [r3, #0]
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	330b      	adds	r3, #11
 80112a2:	f042 0220 	orr.w	r2, r2, #32
 80112a6:	b2d2      	uxtb	r2, r2
 80112a8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6818      	ldr	r0, [r3, #0]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	689b      	ldr	r3, [r3, #8]
 80112b2:	461a      	mov	r2, r3
 80112b4:	68f9      	ldr	r1, [r7, #12]
 80112b6:	f7fe ff69 	bl	801018c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	f103 021c 	add.w	r2, r3, #28
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	68db      	ldr	r3, [r3, #12]
 80112c4:	4619      	mov	r1, r3
 80112c6:	4610      	mov	r0, r2
 80112c8:	f7fd ffe0 	bl	800f28c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	3316      	adds	r3, #22
 80112d0:	6939      	ldr	r1, [r7, #16]
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7fd ffda 	bl	800f28c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	3312      	adds	r3, #18
 80112dc:	2100      	movs	r1, #0
 80112de:	4618      	mov	r0, r3
 80112e0:	f7fd ffb9 	bl	800f256 <st_word>
					fs->wflag = 1;
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	2201      	movs	r2, #1
 80112e8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7fe fa55 	bl	800f79c <sync_fs>
 80112f2:	4603      	mov	r3, r0
 80112f4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	7d1b      	ldrb	r3, [r3, #20]
 80112fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112fe:	b2da      	uxtb	r2, r3
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011304:	7dfb      	ldrb	r3, [r7, #23]
}
 8011306:	4618      	mov	r0, r3
 8011308:	3718      	adds	r7, #24
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}

0801130e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801130e:	b580      	push	{r7, lr}
 8011310:	b084      	sub	sp, #16
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f7ff ff7b 	bl	8011212 <f_sync>
 801131c:	4603      	mov	r3, r0
 801131e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011320:	7bfb      	ldrb	r3, [r7, #15]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d118      	bne.n	8011358 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f107 0208 	add.w	r2, r7, #8
 801132c:	4611      	mov	r1, r2
 801132e:	4618      	mov	r0, r3
 8011330:	f7ff fbc0 	bl	8010ab4 <validate>
 8011334:	4603      	mov	r3, r0
 8011336:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011338:	7bfb      	ldrb	r3, [r7, #15]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d10c      	bne.n	8011358 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	691b      	ldr	r3, [r3, #16]
 8011342:	4618      	mov	r0, r3
 8011344:	f7fe f958 	bl	800f5f8 <dec_lock>
 8011348:	4603      	mov	r3, r0
 801134a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801134c:	7bfb      	ldrb	r3, [r7, #15]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d102      	bne.n	8011358 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2200      	movs	r2, #0
 8011356:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011358:	7bfb      	ldrb	r3, [r7, #15]
}
 801135a:	4618      	mov	r0, r3
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
	...

08011364 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011364:	b480      	push	{r7}
 8011366:	b087      	sub	sp, #28
 8011368:	af00      	add	r7, sp, #0
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	60b9      	str	r1, [r7, #8]
 801136e:	4613      	mov	r3, r2
 8011370:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011372:	2301      	movs	r3, #1
 8011374:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011376:	2300      	movs	r3, #0
 8011378:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801137a:	4b1f      	ldr	r3, [pc, #124]	; (80113f8 <FATFS_LinkDriverEx+0x94>)
 801137c:	7a5b      	ldrb	r3, [r3, #9]
 801137e:	b2db      	uxtb	r3, r3
 8011380:	2b00      	cmp	r3, #0
 8011382:	d131      	bne.n	80113e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011384:	4b1c      	ldr	r3, [pc, #112]	; (80113f8 <FATFS_LinkDriverEx+0x94>)
 8011386:	7a5b      	ldrb	r3, [r3, #9]
 8011388:	b2db      	uxtb	r3, r3
 801138a:	461a      	mov	r2, r3
 801138c:	4b1a      	ldr	r3, [pc, #104]	; (80113f8 <FATFS_LinkDriverEx+0x94>)
 801138e:	2100      	movs	r1, #0
 8011390:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011392:	4b19      	ldr	r3, [pc, #100]	; (80113f8 <FATFS_LinkDriverEx+0x94>)
 8011394:	7a5b      	ldrb	r3, [r3, #9]
 8011396:	b2db      	uxtb	r3, r3
 8011398:	4a17      	ldr	r2, [pc, #92]	; (80113f8 <FATFS_LinkDriverEx+0x94>)
 801139a:	009b      	lsls	r3, r3, #2
 801139c:	4413      	add	r3, r2
 801139e:	68fa      	ldr	r2, [r7, #12]
 80113a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80113a2:	4b15      	ldr	r3, [pc, #84]	; (80113f8 <FATFS_LinkDriverEx+0x94>)
 80113a4:	7a5b      	ldrb	r3, [r3, #9]
 80113a6:	b2db      	uxtb	r3, r3
 80113a8:	461a      	mov	r2, r3
 80113aa:	4b13      	ldr	r3, [pc, #76]	; (80113f8 <FATFS_LinkDriverEx+0x94>)
 80113ac:	4413      	add	r3, r2
 80113ae:	79fa      	ldrb	r2, [r7, #7]
 80113b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80113b2:	4b11      	ldr	r3, [pc, #68]	; (80113f8 <FATFS_LinkDriverEx+0x94>)
 80113b4:	7a5b      	ldrb	r3, [r3, #9]
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	1c5a      	adds	r2, r3, #1
 80113ba:	b2d1      	uxtb	r1, r2
 80113bc:	4a0e      	ldr	r2, [pc, #56]	; (80113f8 <FATFS_LinkDriverEx+0x94>)
 80113be:	7251      	strb	r1, [r2, #9]
 80113c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80113c2:	7dbb      	ldrb	r3, [r7, #22]
 80113c4:	3330      	adds	r3, #48	; 0x30
 80113c6:	b2da      	uxtb	r2, r3
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	3301      	adds	r3, #1
 80113d0:	223a      	movs	r2, #58	; 0x3a
 80113d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	3302      	adds	r3, #2
 80113d8:	222f      	movs	r2, #47	; 0x2f
 80113da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	3303      	adds	r3, #3
 80113e0:	2200      	movs	r2, #0
 80113e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80113e4:	2300      	movs	r3, #0
 80113e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80113e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	371c      	adds	r7, #28
 80113ee:	46bd      	mov	sp, r7
 80113f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f4:	4770      	bx	lr
 80113f6:	bf00      	nop
 80113f8:	20000678 	.word	0x20000678

080113fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011406:	2200      	movs	r2, #0
 8011408:	6839      	ldr	r1, [r7, #0]
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f7ff ffaa 	bl	8011364 <FATFS_LinkDriverEx>
 8011410:	4603      	mov	r3, r0
}
 8011412:	4618      	mov	r0, r3
 8011414:	3708      	adds	r7, #8
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
	...

0801141c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011420:	2200      	movs	r2, #0
 8011422:	4912      	ldr	r1, [pc, #72]	; (801146c <MX_USB_DEVICE_Init+0x50>)
 8011424:	4812      	ldr	r0, [pc, #72]	; (8011470 <MX_USB_DEVICE_Init+0x54>)
 8011426:	f7fc fcd3 	bl	800ddd0 <USBD_Init>
 801142a:	4603      	mov	r3, r0
 801142c:	2b00      	cmp	r3, #0
 801142e:	d001      	beq.n	8011434 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011430:	f7f1 fc38 	bl	8002ca4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011434:	490f      	ldr	r1, [pc, #60]	; (8011474 <MX_USB_DEVICE_Init+0x58>)
 8011436:	480e      	ldr	r0, [pc, #56]	; (8011470 <MX_USB_DEVICE_Init+0x54>)
 8011438:	f7fc fcfa 	bl	800de30 <USBD_RegisterClass>
 801143c:	4603      	mov	r3, r0
 801143e:	2b00      	cmp	r3, #0
 8011440:	d001      	beq.n	8011446 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011442:	f7f1 fc2f 	bl	8002ca4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011446:	490c      	ldr	r1, [pc, #48]	; (8011478 <MX_USB_DEVICE_Init+0x5c>)
 8011448:	4809      	ldr	r0, [pc, #36]	; (8011470 <MX_USB_DEVICE_Init+0x54>)
 801144a:	f7fc fc1b 	bl	800dc84 <USBD_CDC_RegisterInterface>
 801144e:	4603      	mov	r3, r0
 8011450:	2b00      	cmp	r3, #0
 8011452:	d001      	beq.n	8011458 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011454:	f7f1 fc26 	bl	8002ca4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011458:	4805      	ldr	r0, [pc, #20]	; (8011470 <MX_USB_DEVICE_Init+0x54>)
 801145a:	f7fc fd10 	bl	800de7e <USBD_Start>
 801145e:	4603      	mov	r3, r0
 8011460:	2b00      	cmp	r3, #0
 8011462:	d001      	beq.n	8011468 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011464:	f7f1 fc1e 	bl	8002ca4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011468:	bf00      	nop
 801146a:	bd80      	pop	{r7, pc}
 801146c:	2000014c 	.word	0x2000014c
 8011470:	20001a30 	.word	0x20001a30
 8011474:	20000034 	.word	0x20000034
 8011478:	20000138 	.word	0x20000138

0801147c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011480:	2200      	movs	r2, #0
 8011482:	4905      	ldr	r1, [pc, #20]	; (8011498 <CDC_Init_FS+0x1c>)
 8011484:	4805      	ldr	r0, [pc, #20]	; (801149c <CDC_Init_FS+0x20>)
 8011486:	f7fc fc12 	bl	800dcae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801148a:	4905      	ldr	r1, [pc, #20]	; (80114a0 <CDC_Init_FS+0x24>)
 801148c:	4803      	ldr	r0, [pc, #12]	; (801149c <CDC_Init_FS+0x20>)
 801148e:	f7fc fc2c 	bl	800dcea <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011492:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011494:	4618      	mov	r0, r3
 8011496:	bd80      	pop	{r7, pc}
 8011498:	20001d00 	.word	0x20001d00
 801149c:	20001a30 	.word	0x20001a30
 80114a0:	20002500 	.word	0x20002500

080114a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80114a4:	b480      	push	{r7}
 80114a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80114a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr

080114b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80114b4:	b480      	push	{r7}
 80114b6:	b083      	sub	sp, #12
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	4603      	mov	r3, r0
 80114bc:	6039      	str	r1, [r7, #0]
 80114be:	71fb      	strb	r3, [r7, #7]
 80114c0:	4613      	mov	r3, r2
 80114c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80114c4:	79fb      	ldrb	r3, [r7, #7]
 80114c6:	2b23      	cmp	r3, #35	; 0x23
 80114c8:	d84a      	bhi.n	8011560 <CDC_Control_FS+0xac>
 80114ca:	a201      	add	r2, pc, #4	; (adr r2, 80114d0 <CDC_Control_FS+0x1c>)
 80114cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114d0:	08011561 	.word	0x08011561
 80114d4:	08011561 	.word	0x08011561
 80114d8:	08011561 	.word	0x08011561
 80114dc:	08011561 	.word	0x08011561
 80114e0:	08011561 	.word	0x08011561
 80114e4:	08011561 	.word	0x08011561
 80114e8:	08011561 	.word	0x08011561
 80114ec:	08011561 	.word	0x08011561
 80114f0:	08011561 	.word	0x08011561
 80114f4:	08011561 	.word	0x08011561
 80114f8:	08011561 	.word	0x08011561
 80114fc:	08011561 	.word	0x08011561
 8011500:	08011561 	.word	0x08011561
 8011504:	08011561 	.word	0x08011561
 8011508:	08011561 	.word	0x08011561
 801150c:	08011561 	.word	0x08011561
 8011510:	08011561 	.word	0x08011561
 8011514:	08011561 	.word	0x08011561
 8011518:	08011561 	.word	0x08011561
 801151c:	08011561 	.word	0x08011561
 8011520:	08011561 	.word	0x08011561
 8011524:	08011561 	.word	0x08011561
 8011528:	08011561 	.word	0x08011561
 801152c:	08011561 	.word	0x08011561
 8011530:	08011561 	.word	0x08011561
 8011534:	08011561 	.word	0x08011561
 8011538:	08011561 	.word	0x08011561
 801153c:	08011561 	.word	0x08011561
 8011540:	08011561 	.word	0x08011561
 8011544:	08011561 	.word	0x08011561
 8011548:	08011561 	.word	0x08011561
 801154c:	08011561 	.word	0x08011561
 8011550:	08011561 	.word	0x08011561
 8011554:	08011561 	.word	0x08011561
 8011558:	08011561 	.word	0x08011561
 801155c:	08011561 	.word	0x08011561
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011560:	bf00      	nop
  }

  return (USBD_OK);
 8011562:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011564:	4618      	mov	r0, r3
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr

08011570 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801157a:	6879      	ldr	r1, [r7, #4]
 801157c:	4805      	ldr	r0, [pc, #20]	; (8011594 <CDC_Receive_FS+0x24>)
 801157e:	f7fc fbb4 	bl	800dcea <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011582:	4804      	ldr	r0, [pc, #16]	; (8011594 <CDC_Receive_FS+0x24>)
 8011584:	f7fc fbfa 	bl	800dd7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011588:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801158a:	4618      	mov	r0, r3
 801158c:	3708      	adds	r7, #8
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	20001a30 	.word	0x20001a30

08011598 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b084      	sub	sp, #16
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
 80115a0:	460b      	mov	r3, r1
 80115a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80115a4:	2300      	movs	r3, #0
 80115a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80115a8:	4b0d      	ldr	r3, [pc, #52]	; (80115e0 <CDC_Transmit_FS+0x48>)
 80115aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d001      	beq.n	80115be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80115ba:	2301      	movs	r3, #1
 80115bc:	e00b      	b.n	80115d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80115be:	887b      	ldrh	r3, [r7, #2]
 80115c0:	461a      	mov	r2, r3
 80115c2:	6879      	ldr	r1, [r7, #4]
 80115c4:	4806      	ldr	r0, [pc, #24]	; (80115e0 <CDC_Transmit_FS+0x48>)
 80115c6:	f7fc fb72 	bl	800dcae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80115ca:	4805      	ldr	r0, [pc, #20]	; (80115e0 <CDC_Transmit_FS+0x48>)
 80115cc:	f7fc fba6 	bl	800dd1c <USBD_CDC_TransmitPacket>
 80115d0:	4603      	mov	r3, r0
 80115d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80115d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3710      	adds	r7, #16
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
 80115de:	bf00      	nop
 80115e0:	20001a30 	.word	0x20001a30

080115e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b087      	sub	sp, #28
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	60b9      	str	r1, [r7, #8]
 80115ee:	4613      	mov	r3, r2
 80115f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80115f2:	2300      	movs	r3, #0
 80115f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80115f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	371c      	adds	r7, #28
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr
	...

08011608 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011608:	b480      	push	{r7}
 801160a:	b083      	sub	sp, #12
 801160c:	af00      	add	r7, sp, #0
 801160e:	4603      	mov	r3, r0
 8011610:	6039      	str	r1, [r7, #0]
 8011612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	2212      	movs	r2, #18
 8011618:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801161a:	4b03      	ldr	r3, [pc, #12]	; (8011628 <USBD_FS_DeviceDescriptor+0x20>)
}
 801161c:	4618      	mov	r0, r3
 801161e:	370c      	adds	r7, #12
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr
 8011628:	20000168 	.word	0x20000168

0801162c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801162c:	b480      	push	{r7}
 801162e:	b083      	sub	sp, #12
 8011630:	af00      	add	r7, sp, #0
 8011632:	4603      	mov	r3, r0
 8011634:	6039      	str	r1, [r7, #0]
 8011636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	2204      	movs	r2, #4
 801163c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801163e:	4b03      	ldr	r3, [pc, #12]	; (801164c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011640:	4618      	mov	r0, r3
 8011642:	370c      	adds	r7, #12
 8011644:	46bd      	mov	sp, r7
 8011646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164a:	4770      	bx	lr
 801164c:	2000017c 	.word	0x2000017c

08011650 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	4603      	mov	r3, r0
 8011658:	6039      	str	r1, [r7, #0]
 801165a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801165c:	79fb      	ldrb	r3, [r7, #7]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d105      	bne.n	801166e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011662:	683a      	ldr	r2, [r7, #0]
 8011664:	4907      	ldr	r1, [pc, #28]	; (8011684 <USBD_FS_ProductStrDescriptor+0x34>)
 8011666:	4808      	ldr	r0, [pc, #32]	; (8011688 <USBD_FS_ProductStrDescriptor+0x38>)
 8011668:	f7fd fc3b 	bl	800eee2 <USBD_GetString>
 801166c:	e004      	b.n	8011678 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801166e:	683a      	ldr	r2, [r7, #0]
 8011670:	4904      	ldr	r1, [pc, #16]	; (8011684 <USBD_FS_ProductStrDescriptor+0x34>)
 8011672:	4805      	ldr	r0, [pc, #20]	; (8011688 <USBD_FS_ProductStrDescriptor+0x38>)
 8011674:	f7fd fc35 	bl	800eee2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011678:	4b02      	ldr	r3, [pc, #8]	; (8011684 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801167a:	4618      	mov	r0, r3
 801167c:	3708      	adds	r7, #8
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}
 8011682:	bf00      	nop
 8011684:	20002d00 	.word	0x20002d00
 8011688:	0801759c 	.word	0x0801759c

0801168c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	4603      	mov	r3, r0
 8011694:	6039      	str	r1, [r7, #0]
 8011696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011698:	683a      	ldr	r2, [r7, #0]
 801169a:	4904      	ldr	r1, [pc, #16]	; (80116ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801169c:	4804      	ldr	r0, [pc, #16]	; (80116b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801169e:	f7fd fc20 	bl	800eee2 <USBD_GetString>
  return USBD_StrDesc;
 80116a2:	4b02      	ldr	r3, [pc, #8]	; (80116ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	20002d00 	.word	0x20002d00
 80116b0:	080175b4 	.word	0x080175b4

080116b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	4603      	mov	r3, r0
 80116bc:	6039      	str	r1, [r7, #0]
 80116be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	221a      	movs	r2, #26
 80116c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80116c6:	f000 f843 	bl	8011750 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80116ca:	4b02      	ldr	r3, [pc, #8]	; (80116d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80116cc:	4618      	mov	r0, r3
 80116ce:	3708      	adds	r7, #8
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	20000180 	.word	0x20000180

080116d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
 80116de:	4603      	mov	r3, r0
 80116e0:	6039      	str	r1, [r7, #0]
 80116e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80116e4:	79fb      	ldrb	r3, [r7, #7]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d105      	bne.n	80116f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80116ea:	683a      	ldr	r2, [r7, #0]
 80116ec:	4907      	ldr	r1, [pc, #28]	; (801170c <USBD_FS_ConfigStrDescriptor+0x34>)
 80116ee:	4808      	ldr	r0, [pc, #32]	; (8011710 <USBD_FS_ConfigStrDescriptor+0x38>)
 80116f0:	f7fd fbf7 	bl	800eee2 <USBD_GetString>
 80116f4:	e004      	b.n	8011700 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80116f6:	683a      	ldr	r2, [r7, #0]
 80116f8:	4904      	ldr	r1, [pc, #16]	; (801170c <USBD_FS_ConfigStrDescriptor+0x34>)
 80116fa:	4805      	ldr	r0, [pc, #20]	; (8011710 <USBD_FS_ConfigStrDescriptor+0x38>)
 80116fc:	f7fd fbf1 	bl	800eee2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011700:	4b02      	ldr	r3, [pc, #8]	; (801170c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011702:	4618      	mov	r0, r3
 8011704:	3708      	adds	r7, #8
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	20002d00 	.word	0x20002d00
 8011710:	080175c8 	.word	0x080175c8

08011714 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b082      	sub	sp, #8
 8011718:	af00      	add	r7, sp, #0
 801171a:	4603      	mov	r3, r0
 801171c:	6039      	str	r1, [r7, #0]
 801171e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011720:	79fb      	ldrb	r3, [r7, #7]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d105      	bne.n	8011732 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011726:	683a      	ldr	r2, [r7, #0]
 8011728:	4907      	ldr	r1, [pc, #28]	; (8011748 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801172a:	4808      	ldr	r0, [pc, #32]	; (801174c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801172c:	f7fd fbd9 	bl	800eee2 <USBD_GetString>
 8011730:	e004      	b.n	801173c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011732:	683a      	ldr	r2, [r7, #0]
 8011734:	4904      	ldr	r1, [pc, #16]	; (8011748 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011736:	4805      	ldr	r0, [pc, #20]	; (801174c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011738:	f7fd fbd3 	bl	800eee2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801173c:	4b02      	ldr	r3, [pc, #8]	; (8011748 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801173e:	4618      	mov	r0, r3
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	20002d00 	.word	0x20002d00
 801174c:	080175d4 	.word	0x080175d4

08011750 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b084      	sub	sp, #16
 8011754:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011756:	4b0f      	ldr	r3, [pc, #60]	; (8011794 <Get_SerialNum+0x44>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801175c:	4b0e      	ldr	r3, [pc, #56]	; (8011798 <Get_SerialNum+0x48>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011762:	4b0e      	ldr	r3, [pc, #56]	; (801179c <Get_SerialNum+0x4c>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011768:	68fa      	ldr	r2, [r7, #12]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	4413      	add	r3, r2
 801176e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d009      	beq.n	801178a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011776:	2208      	movs	r2, #8
 8011778:	4909      	ldr	r1, [pc, #36]	; (80117a0 <Get_SerialNum+0x50>)
 801177a:	68f8      	ldr	r0, [r7, #12]
 801177c:	f000 f814 	bl	80117a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011780:	2204      	movs	r2, #4
 8011782:	4908      	ldr	r1, [pc, #32]	; (80117a4 <Get_SerialNum+0x54>)
 8011784:	68b8      	ldr	r0, [r7, #8]
 8011786:	f000 f80f 	bl	80117a8 <IntToUnicode>
  }
}
 801178a:	bf00      	nop
 801178c:	3710      	adds	r7, #16
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	1fff7a10 	.word	0x1fff7a10
 8011798:	1fff7a14 	.word	0x1fff7a14
 801179c:	1fff7a18 	.word	0x1fff7a18
 80117a0:	20000182 	.word	0x20000182
 80117a4:	20000192 	.word	0x20000192

080117a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80117a8:	b480      	push	{r7}
 80117aa:	b087      	sub	sp, #28
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	60f8      	str	r0, [r7, #12]
 80117b0:	60b9      	str	r1, [r7, #8]
 80117b2:	4613      	mov	r3, r2
 80117b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80117ba:	2300      	movs	r3, #0
 80117bc:	75fb      	strb	r3, [r7, #23]
 80117be:	e027      	b.n	8011810 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	0f1b      	lsrs	r3, r3, #28
 80117c4:	2b09      	cmp	r3, #9
 80117c6:	d80b      	bhi.n	80117e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	0f1b      	lsrs	r3, r3, #28
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	7dfb      	ldrb	r3, [r7, #23]
 80117d0:	005b      	lsls	r3, r3, #1
 80117d2:	4619      	mov	r1, r3
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	440b      	add	r3, r1
 80117d8:	3230      	adds	r2, #48	; 0x30
 80117da:	b2d2      	uxtb	r2, r2
 80117dc:	701a      	strb	r2, [r3, #0]
 80117de:	e00a      	b.n	80117f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	0f1b      	lsrs	r3, r3, #28
 80117e4:	b2da      	uxtb	r2, r3
 80117e6:	7dfb      	ldrb	r3, [r7, #23]
 80117e8:	005b      	lsls	r3, r3, #1
 80117ea:	4619      	mov	r1, r3
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	440b      	add	r3, r1
 80117f0:	3237      	adds	r2, #55	; 0x37
 80117f2:	b2d2      	uxtb	r2, r2
 80117f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	011b      	lsls	r3, r3, #4
 80117fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80117fc:	7dfb      	ldrb	r3, [r7, #23]
 80117fe:	005b      	lsls	r3, r3, #1
 8011800:	3301      	adds	r3, #1
 8011802:	68ba      	ldr	r2, [r7, #8]
 8011804:	4413      	add	r3, r2
 8011806:	2200      	movs	r2, #0
 8011808:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801180a:	7dfb      	ldrb	r3, [r7, #23]
 801180c:	3301      	adds	r3, #1
 801180e:	75fb      	strb	r3, [r7, #23]
 8011810:	7dfa      	ldrb	r2, [r7, #23]
 8011812:	79fb      	ldrb	r3, [r7, #7]
 8011814:	429a      	cmp	r2, r3
 8011816:	d3d3      	bcc.n	80117c0 <IntToUnicode+0x18>
  }
}
 8011818:	bf00      	nop
 801181a:	bf00      	nop
 801181c:	371c      	adds	r7, #28
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr
	...

08011828 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b08a      	sub	sp, #40	; 0x28
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011830:	f107 0314 	add.w	r3, r7, #20
 8011834:	2200      	movs	r2, #0
 8011836:	601a      	str	r2, [r3, #0]
 8011838:	605a      	str	r2, [r3, #4]
 801183a:	609a      	str	r2, [r3, #8]
 801183c:	60da      	str	r2, [r3, #12]
 801183e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011848:	d13a      	bne.n	80118c0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801184a:	2300      	movs	r3, #0
 801184c:	613b      	str	r3, [r7, #16]
 801184e:	4b1e      	ldr	r3, [pc, #120]	; (80118c8 <HAL_PCD_MspInit+0xa0>)
 8011850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011852:	4a1d      	ldr	r2, [pc, #116]	; (80118c8 <HAL_PCD_MspInit+0xa0>)
 8011854:	f043 0301 	orr.w	r3, r3, #1
 8011858:	6313      	str	r3, [r2, #48]	; 0x30
 801185a:	4b1b      	ldr	r3, [pc, #108]	; (80118c8 <HAL_PCD_MspInit+0xa0>)
 801185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801185e:	f003 0301 	and.w	r3, r3, #1
 8011862:	613b      	str	r3, [r7, #16]
 8011864:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011866:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801186a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801186c:	2302      	movs	r3, #2
 801186e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011870:	2300      	movs	r3, #0
 8011872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011874:	2303      	movs	r3, #3
 8011876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011878:	230a      	movs	r3, #10
 801187a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801187c:	f107 0314 	add.w	r3, r7, #20
 8011880:	4619      	mov	r1, r3
 8011882:	4812      	ldr	r0, [pc, #72]	; (80118cc <HAL_PCD_MspInit+0xa4>)
 8011884:	f7f4 fff2 	bl	800686c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011888:	4b0f      	ldr	r3, [pc, #60]	; (80118c8 <HAL_PCD_MspInit+0xa0>)
 801188a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801188c:	4a0e      	ldr	r2, [pc, #56]	; (80118c8 <HAL_PCD_MspInit+0xa0>)
 801188e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011892:	6353      	str	r3, [r2, #52]	; 0x34
 8011894:	2300      	movs	r3, #0
 8011896:	60fb      	str	r3, [r7, #12]
 8011898:	4b0b      	ldr	r3, [pc, #44]	; (80118c8 <HAL_PCD_MspInit+0xa0>)
 801189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801189c:	4a0a      	ldr	r2, [pc, #40]	; (80118c8 <HAL_PCD_MspInit+0xa0>)
 801189e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80118a2:	6453      	str	r3, [r2, #68]	; 0x44
 80118a4:	4b08      	ldr	r3, [pc, #32]	; (80118c8 <HAL_PCD_MspInit+0xa0>)
 80118a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118ac:	60fb      	str	r3, [r7, #12]
 80118ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80118b0:	2200      	movs	r2, #0
 80118b2:	2100      	movs	r1, #0
 80118b4:	2043      	movs	r0, #67	; 0x43
 80118b6:	f7f4 ff10 	bl	80066da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80118ba:	2043      	movs	r0, #67	; 0x43
 80118bc:	f7f4 ff29 	bl	8006712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80118c0:	bf00      	nop
 80118c2:	3728      	adds	r7, #40	; 0x28
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	40023800 	.word	0x40023800
 80118cc:	40020000 	.word	0x40020000

080118d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80118e4:	4619      	mov	r1, r3
 80118e6:	4610      	mov	r0, r2
 80118e8:	f7fc fb14 	bl	800df14 <USBD_LL_SetupStage>
}
 80118ec:	bf00      	nop
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	460b      	mov	r3, r1
 80118fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011906:	78fa      	ldrb	r2, [r7, #3]
 8011908:	6879      	ldr	r1, [r7, #4]
 801190a:	4613      	mov	r3, r2
 801190c:	00db      	lsls	r3, r3, #3
 801190e:	1a9b      	subs	r3, r3, r2
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	440b      	add	r3, r1
 8011914:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011918:	681a      	ldr	r2, [r3, #0]
 801191a:	78fb      	ldrb	r3, [r7, #3]
 801191c:	4619      	mov	r1, r3
 801191e:	f7fc fb4e 	bl	800dfbe <USBD_LL_DataOutStage>
}
 8011922:	bf00      	nop
 8011924:	3708      	adds	r7, #8
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}

0801192a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801192a:	b580      	push	{r7, lr}
 801192c:	b082      	sub	sp, #8
 801192e:	af00      	add	r7, sp, #0
 8011930:	6078      	str	r0, [r7, #4]
 8011932:	460b      	mov	r3, r1
 8011934:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801193c:	78fa      	ldrb	r2, [r7, #3]
 801193e:	6879      	ldr	r1, [r7, #4]
 8011940:	4613      	mov	r3, r2
 8011942:	00db      	lsls	r3, r3, #3
 8011944:	1a9b      	subs	r3, r3, r2
 8011946:	009b      	lsls	r3, r3, #2
 8011948:	440b      	add	r3, r1
 801194a:	3348      	adds	r3, #72	; 0x48
 801194c:	681a      	ldr	r2, [r3, #0]
 801194e:	78fb      	ldrb	r3, [r7, #3]
 8011950:	4619      	mov	r1, r3
 8011952:	f7fc fb97 	bl	800e084 <USBD_LL_DataInStage>
}
 8011956:	bf00      	nop
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}

0801195e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801195e:	b580      	push	{r7, lr}
 8011960:	b082      	sub	sp, #8
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801196c:	4618      	mov	r0, r3
 801196e:	f7fc fcab 	bl	800e2c8 <USBD_LL_SOF>
}
 8011972:	bf00      	nop
 8011974:	3708      	adds	r7, #8
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}

0801197a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801197a:	b580      	push	{r7, lr}
 801197c:	b084      	sub	sp, #16
 801197e:	af00      	add	r7, sp, #0
 8011980:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011982:	2301      	movs	r3, #1
 8011984:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d102      	bne.n	8011994 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801198e:	2300      	movs	r3, #0
 8011990:	73fb      	strb	r3, [r7, #15]
 8011992:	e008      	b.n	80119a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	68db      	ldr	r3, [r3, #12]
 8011998:	2b02      	cmp	r3, #2
 801199a:	d102      	bne.n	80119a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801199c:	2301      	movs	r3, #1
 801199e:	73fb      	strb	r3, [r7, #15]
 80119a0:	e001      	b.n	80119a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80119a2:	f7f1 f97f 	bl	8002ca4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80119ac:	7bfa      	ldrb	r2, [r7, #15]
 80119ae:	4611      	mov	r1, r2
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7fc fc4b 	bl	800e24c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fc fbf7 	bl	800e1b0 <USBD_LL_Reset>
}
 80119c2:	bf00      	nop
 80119c4:	3710      	adds	r7, #16
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
	...

080119cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b082      	sub	sp, #8
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80119da:	4618      	mov	r0, r3
 80119dc:	f7fc fc46 	bl	800e26c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	687a      	ldr	r2, [r7, #4]
 80119ec:	6812      	ldr	r2, [r2, #0]
 80119ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80119f2:	f043 0301 	orr.w	r3, r3, #1
 80119f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6a1b      	ldr	r3, [r3, #32]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d005      	beq.n	8011a0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a00:	4b04      	ldr	r3, [pc, #16]	; (8011a14 <HAL_PCD_SuspendCallback+0x48>)
 8011a02:	691b      	ldr	r3, [r3, #16]
 8011a04:	4a03      	ldr	r2, [pc, #12]	; (8011a14 <HAL_PCD_SuspendCallback+0x48>)
 8011a06:	f043 0306 	orr.w	r3, r3, #6
 8011a0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011a0c:	bf00      	nop
 8011a0e:	3708      	adds	r7, #8
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	e000ed00 	.word	0xe000ed00

08011a18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7fc fc36 	bl	800e298 <USBD_LL_Resume>
}
 8011a2c:	bf00      	nop
 8011a2e:	3708      	adds	r7, #8
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}

08011a34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	460b      	mov	r3, r1
 8011a3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011a46:	78fa      	ldrb	r2, [r7, #3]
 8011a48:	4611      	mov	r1, r2
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fc fc84 	bl	800e358 <USBD_LL_IsoOUTIncomplete>
}
 8011a50:	bf00      	nop
 8011a52:	3708      	adds	r7, #8
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}

08011a58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	460b      	mov	r3, r1
 8011a62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011a6a:	78fa      	ldrb	r2, [r7, #3]
 8011a6c:	4611      	mov	r1, r2
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7fc fc4c 	bl	800e30c <USBD_LL_IsoINIncomplete>
}
 8011a74:	bf00      	nop
 8011a76:	3708      	adds	r7, #8
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}

08011a7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b082      	sub	sp, #8
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7fc fc8a 	bl	800e3a4 <USBD_LL_DevConnected>
}
 8011a90:	bf00      	nop
 8011a92:	3708      	adds	r7, #8
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}

08011a98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7fc fc87 	bl	800e3ba <USBD_LL_DevDisconnected>
}
 8011aac:	bf00      	nop
 8011aae:	3708      	adds	r7, #8
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd80      	pop	{r7, pc}

08011ab4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d13c      	bne.n	8011b3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011ac4:	4a20      	ldr	r2, [pc, #128]	; (8011b48 <USBD_LL_Init+0x94>)
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	4a1e      	ldr	r2, [pc, #120]	; (8011b48 <USBD_LL_Init+0x94>)
 8011ad0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011ad4:	4b1c      	ldr	r3, [pc, #112]	; (8011b48 <USBD_LL_Init+0x94>)
 8011ad6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011ada:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011adc:	4b1a      	ldr	r3, [pc, #104]	; (8011b48 <USBD_LL_Init+0x94>)
 8011ade:	2204      	movs	r2, #4
 8011ae0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011ae2:	4b19      	ldr	r3, [pc, #100]	; (8011b48 <USBD_LL_Init+0x94>)
 8011ae4:	2202      	movs	r2, #2
 8011ae6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011ae8:	4b17      	ldr	r3, [pc, #92]	; (8011b48 <USBD_LL_Init+0x94>)
 8011aea:	2200      	movs	r2, #0
 8011aec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011aee:	4b16      	ldr	r3, [pc, #88]	; (8011b48 <USBD_LL_Init+0x94>)
 8011af0:	2202      	movs	r2, #2
 8011af2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011af4:	4b14      	ldr	r3, [pc, #80]	; (8011b48 <USBD_LL_Init+0x94>)
 8011af6:	2200      	movs	r2, #0
 8011af8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011afa:	4b13      	ldr	r3, [pc, #76]	; (8011b48 <USBD_LL_Init+0x94>)
 8011afc:	2200      	movs	r2, #0
 8011afe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011b00:	4b11      	ldr	r3, [pc, #68]	; (8011b48 <USBD_LL_Init+0x94>)
 8011b02:	2200      	movs	r2, #0
 8011b04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011b06:	4b10      	ldr	r3, [pc, #64]	; (8011b48 <USBD_LL_Init+0x94>)
 8011b08:	2200      	movs	r2, #0
 8011b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011b0c:	4b0e      	ldr	r3, [pc, #56]	; (8011b48 <USBD_LL_Init+0x94>)
 8011b0e:	2200      	movs	r2, #0
 8011b10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011b12:	480d      	ldr	r0, [pc, #52]	; (8011b48 <USBD_LL_Init+0x94>)
 8011b14:	f7f5 fff5 	bl	8007b02 <HAL_PCD_Init>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d001      	beq.n	8011b22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011b1e:	f7f1 f8c1 	bl	8002ca4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011b22:	2180      	movs	r1, #128	; 0x80
 8011b24:	4808      	ldr	r0, [pc, #32]	; (8011b48 <USBD_LL_Init+0x94>)
 8011b26:	f7f7 f952 	bl	8008dce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011b2a:	2240      	movs	r2, #64	; 0x40
 8011b2c:	2100      	movs	r1, #0
 8011b2e:	4806      	ldr	r0, [pc, #24]	; (8011b48 <USBD_LL_Init+0x94>)
 8011b30:	f7f7 f906 	bl	8008d40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011b34:	2280      	movs	r2, #128	; 0x80
 8011b36:	2101      	movs	r1, #1
 8011b38:	4803      	ldr	r0, [pc, #12]	; (8011b48 <USBD_LL_Init+0x94>)
 8011b3a:	f7f7 f901 	bl	8008d40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3708      	adds	r7, #8
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	20002f00 	.word	0x20002f00

08011b4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b084      	sub	sp, #16
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b54:	2300      	movs	r3, #0
 8011b56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7f6 f8ea 	bl	8007d3c <HAL_PCD_Start>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b6c:	7bfb      	ldrb	r3, [r7, #15]
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f000 f942 	bl	8011df8 <USBD_Get_USB_Status>
 8011b74:	4603      	mov	r3, r0
 8011b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3710      	adds	r7, #16
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}

08011b82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011b82:	b580      	push	{r7, lr}
 8011b84:	b084      	sub	sp, #16
 8011b86:	af00      	add	r7, sp, #0
 8011b88:	6078      	str	r0, [r7, #4]
 8011b8a:	4608      	mov	r0, r1
 8011b8c:	4611      	mov	r1, r2
 8011b8e:	461a      	mov	r2, r3
 8011b90:	4603      	mov	r3, r0
 8011b92:	70fb      	strb	r3, [r7, #3]
 8011b94:	460b      	mov	r3, r1
 8011b96:	70bb      	strb	r3, [r7, #2]
 8011b98:	4613      	mov	r3, r2
 8011b9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011baa:	78bb      	ldrb	r3, [r7, #2]
 8011bac:	883a      	ldrh	r2, [r7, #0]
 8011bae:	78f9      	ldrb	r1, [r7, #3]
 8011bb0:	f7f6 fcce 	bl	8008550 <HAL_PCD_EP_Open>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bb8:	7bfb      	ldrb	r3, [r7, #15]
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f000 f91c 	bl	8011df8 <USBD_Get_USB_Status>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3710      	adds	r7, #16
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}

08011bce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bce:	b580      	push	{r7, lr}
 8011bd0:	b084      	sub	sp, #16
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	6078      	str	r0, [r7, #4]
 8011bd6:	460b      	mov	r3, r1
 8011bd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bda:	2300      	movs	r3, #0
 8011bdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bde:	2300      	movs	r3, #0
 8011be0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011be8:	78fa      	ldrb	r2, [r7, #3]
 8011bea:	4611      	mov	r1, r2
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7f6 fd17 	bl	8008620 <HAL_PCD_EP_Close>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bf6:	7bfb      	ldrb	r3, [r7, #15]
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f000 f8fd 	bl	8011df8 <USBD_Get_USB_Status>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c02:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	3710      	adds	r7, #16
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b084      	sub	sp, #16
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
 8011c14:	460b      	mov	r3, r1
 8011c16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c26:	78fa      	ldrb	r2, [r7, #3]
 8011c28:	4611      	mov	r1, r2
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7f6 fdef 	bl	800880e <HAL_PCD_EP_SetStall>
 8011c30:	4603      	mov	r3, r0
 8011c32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c34:	7bfb      	ldrb	r3, [r7, #15]
 8011c36:	4618      	mov	r0, r3
 8011c38:	f000 f8de 	bl	8011df8 <USBD_Get_USB_Status>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c40:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3710      	adds	r7, #16
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}

08011c4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c4a:	b580      	push	{r7, lr}
 8011c4c:	b084      	sub	sp, #16
 8011c4e:	af00      	add	r7, sp, #0
 8011c50:	6078      	str	r0, [r7, #4]
 8011c52:	460b      	mov	r3, r1
 8011c54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c56:	2300      	movs	r3, #0
 8011c58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c64:	78fa      	ldrb	r2, [r7, #3]
 8011c66:	4611      	mov	r1, r2
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7f6 fe34 	bl	80088d6 <HAL_PCD_EP_ClrStall>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c72:	7bfb      	ldrb	r3, [r7, #15]
 8011c74:	4618      	mov	r0, r3
 8011c76:	f000 f8bf 	bl	8011df8 <USBD_Get_USB_Status>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3710      	adds	r7, #16
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b085      	sub	sp, #20
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	460b      	mov	r3, r1
 8011c92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	da0b      	bge.n	8011cbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011ca4:	78fb      	ldrb	r3, [r7, #3]
 8011ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011caa:	68f9      	ldr	r1, [r7, #12]
 8011cac:	4613      	mov	r3, r2
 8011cae:	00db      	lsls	r3, r3, #3
 8011cb0:	1a9b      	subs	r3, r3, r2
 8011cb2:	009b      	lsls	r3, r3, #2
 8011cb4:	440b      	add	r3, r1
 8011cb6:	333e      	adds	r3, #62	; 0x3e
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	e00b      	b.n	8011cd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011cbc:	78fb      	ldrb	r3, [r7, #3]
 8011cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011cc2:	68f9      	ldr	r1, [r7, #12]
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	00db      	lsls	r3, r3, #3
 8011cc8:	1a9b      	subs	r3, r3, r2
 8011cca:	009b      	lsls	r3, r3, #2
 8011ccc:	440b      	add	r3, r1
 8011cce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011cd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3714      	adds	r7, #20
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr

08011ce0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b084      	sub	sp, #16
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	460b      	mov	r3, r1
 8011cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cec:	2300      	movs	r3, #0
 8011cee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011cfa:	78fa      	ldrb	r2, [r7, #3]
 8011cfc:	4611      	mov	r1, r2
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7f6 fc01 	bl	8008506 <HAL_PCD_SetAddress>
 8011d04:	4603      	mov	r3, r0
 8011d06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d08:	7bfb      	ldrb	r3, [r7, #15]
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f000 f874 	bl	8011df8 <USBD_Get_USB_Status>
 8011d10:	4603      	mov	r3, r0
 8011d12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3710      	adds	r7, #16
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}

08011d1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d1e:	b580      	push	{r7, lr}
 8011d20:	b086      	sub	sp, #24
 8011d22:	af00      	add	r7, sp, #0
 8011d24:	60f8      	str	r0, [r7, #12]
 8011d26:	607a      	str	r2, [r7, #4]
 8011d28:	603b      	str	r3, [r7, #0]
 8011d2a:	460b      	mov	r3, r1
 8011d2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d32:	2300      	movs	r3, #0
 8011d34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011d3c:	7af9      	ldrb	r1, [r7, #11]
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	687a      	ldr	r2, [r7, #4]
 8011d42:	f7f6 fd1a 	bl	800877a <HAL_PCD_EP_Transmit>
 8011d46:	4603      	mov	r3, r0
 8011d48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d4a:	7dfb      	ldrb	r3, [r7, #23]
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f000 f853 	bl	8011df8 <USBD_Get_USB_Status>
 8011d52:	4603      	mov	r3, r0
 8011d54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d56:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d58:	4618      	mov	r0, r3
 8011d5a:	3718      	adds	r7, #24
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}

08011d60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b086      	sub	sp, #24
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	607a      	str	r2, [r7, #4]
 8011d6a:	603b      	str	r3, [r7, #0]
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d70:	2300      	movs	r3, #0
 8011d72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d74:	2300      	movs	r3, #0
 8011d76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011d7e:	7af9      	ldrb	r1, [r7, #11]
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	687a      	ldr	r2, [r7, #4]
 8011d84:	f7f6 fc96 	bl	80086b4 <HAL_PCD_EP_Receive>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d8c:	7dfb      	ldrb	r3, [r7, #23]
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f000 f832 	bl	8011df8 <USBD_Get_USB_Status>
 8011d94:	4603      	mov	r3, r0
 8011d96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d98:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3718      	adds	r7, #24
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011da2:	b580      	push	{r7, lr}
 8011da4:	b082      	sub	sp, #8
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	6078      	str	r0, [r7, #4]
 8011daa:	460b      	mov	r3, r1
 8011dac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011db4:	78fa      	ldrb	r2, [r7, #3]
 8011db6:	4611      	mov	r1, r2
 8011db8:	4618      	mov	r0, r3
 8011dba:	f7f6 fcc6 	bl	800874a <HAL_PCD_EP_GetRxCount>
 8011dbe:	4603      	mov	r3, r0
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3708      	adds	r7, #8
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}

08011dc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011dc8:	b480      	push	{r7}
 8011dca:	b083      	sub	sp, #12
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011dd0:	4b03      	ldr	r3, [pc, #12]	; (8011de0 <USBD_static_malloc+0x18>)
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	370c      	adds	r7, #12
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ddc:	4770      	bx	lr
 8011dde:	bf00      	nop
 8011de0:	20000684 	.word	0x20000684

08011de4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011de4:	b480      	push	{r7}
 8011de6:	b083      	sub	sp, #12
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]

}
 8011dec:	bf00      	nop
 8011dee:	370c      	adds	r7, #12
 8011df0:	46bd      	mov	sp, r7
 8011df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df6:	4770      	bx	lr

08011df8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011df8:	b480      	push	{r7}
 8011dfa:	b085      	sub	sp, #20
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	4603      	mov	r3, r0
 8011e00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e02:	2300      	movs	r3, #0
 8011e04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011e06:	79fb      	ldrb	r3, [r7, #7]
 8011e08:	2b03      	cmp	r3, #3
 8011e0a:	d817      	bhi.n	8011e3c <USBD_Get_USB_Status+0x44>
 8011e0c:	a201      	add	r2, pc, #4	; (adr r2, 8011e14 <USBD_Get_USB_Status+0x1c>)
 8011e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e12:	bf00      	nop
 8011e14:	08011e25 	.word	0x08011e25
 8011e18:	08011e2b 	.word	0x08011e2b
 8011e1c:	08011e31 	.word	0x08011e31
 8011e20:	08011e37 	.word	0x08011e37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011e24:	2300      	movs	r3, #0
 8011e26:	73fb      	strb	r3, [r7, #15]
    break;
 8011e28:	e00b      	b.n	8011e42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011e2a:	2303      	movs	r3, #3
 8011e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8011e2e:	e008      	b.n	8011e42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011e30:	2301      	movs	r3, #1
 8011e32:	73fb      	strb	r3, [r7, #15]
    break;
 8011e34:	e005      	b.n	8011e42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011e36:	2303      	movs	r3, #3
 8011e38:	73fb      	strb	r3, [r7, #15]
    break;
 8011e3a:	e002      	b.n	8011e42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011e3c:	2303      	movs	r3, #3
 8011e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8011e40:	bf00      	nop
  }
  return usb_status;
 8011e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3714      	adds	r7, #20
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4e:	4770      	bx	lr

08011e50 <atof>:
 8011e50:	2100      	movs	r1, #0
 8011e52:	f001 bd89 	b.w	8013968 <strtod>
	...

08011e58 <__errno>:
 8011e58:	4b01      	ldr	r3, [pc, #4]	; (8011e60 <__errno+0x8>)
 8011e5a:	6818      	ldr	r0, [r3, #0]
 8011e5c:	4770      	bx	lr
 8011e5e:	bf00      	nop
 8011e60:	2000019c 	.word	0x2000019c

08011e64 <__libc_init_array>:
 8011e64:	b570      	push	{r4, r5, r6, lr}
 8011e66:	4d0d      	ldr	r5, [pc, #52]	; (8011e9c <__libc_init_array+0x38>)
 8011e68:	4c0d      	ldr	r4, [pc, #52]	; (8011ea0 <__libc_init_array+0x3c>)
 8011e6a:	1b64      	subs	r4, r4, r5
 8011e6c:	10a4      	asrs	r4, r4, #2
 8011e6e:	2600      	movs	r6, #0
 8011e70:	42a6      	cmp	r6, r4
 8011e72:	d109      	bne.n	8011e88 <__libc_init_array+0x24>
 8011e74:	4d0b      	ldr	r5, [pc, #44]	; (8011ea4 <__libc_init_array+0x40>)
 8011e76:	4c0c      	ldr	r4, [pc, #48]	; (8011ea8 <__libc_init_array+0x44>)
 8011e78:	f005 fa3a 	bl	80172f0 <_init>
 8011e7c:	1b64      	subs	r4, r4, r5
 8011e7e:	10a4      	asrs	r4, r4, #2
 8011e80:	2600      	movs	r6, #0
 8011e82:	42a6      	cmp	r6, r4
 8011e84:	d105      	bne.n	8011e92 <__libc_init_array+0x2e>
 8011e86:	bd70      	pop	{r4, r5, r6, pc}
 8011e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e8c:	4798      	blx	r3
 8011e8e:	3601      	adds	r6, #1
 8011e90:	e7ee      	b.n	8011e70 <__libc_init_array+0xc>
 8011e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e96:	4798      	blx	r3
 8011e98:	3601      	adds	r6, #1
 8011e9a:	e7f2      	b.n	8011e82 <__libc_init_array+0x1e>
 8011e9c:	08019498 	.word	0x08019498
 8011ea0:	08019498 	.word	0x08019498
 8011ea4:	08019498 	.word	0x08019498
 8011ea8:	0801949c 	.word	0x0801949c

08011eac <memset>:
 8011eac:	4402      	add	r2, r0
 8011eae:	4603      	mov	r3, r0
 8011eb0:	4293      	cmp	r3, r2
 8011eb2:	d100      	bne.n	8011eb6 <memset+0xa>
 8011eb4:	4770      	bx	lr
 8011eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8011eba:	e7f9      	b.n	8011eb0 <memset+0x4>

08011ebc <__cvt>:
 8011ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ec0:	ec55 4b10 	vmov	r4, r5, d0
 8011ec4:	2d00      	cmp	r5, #0
 8011ec6:	460e      	mov	r6, r1
 8011ec8:	4619      	mov	r1, r3
 8011eca:	462b      	mov	r3, r5
 8011ecc:	bfbb      	ittet	lt
 8011ece:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011ed2:	461d      	movlt	r5, r3
 8011ed4:	2300      	movge	r3, #0
 8011ed6:	232d      	movlt	r3, #45	; 0x2d
 8011ed8:	700b      	strb	r3, [r1, #0]
 8011eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011edc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011ee0:	4691      	mov	r9, r2
 8011ee2:	f023 0820 	bic.w	r8, r3, #32
 8011ee6:	bfbc      	itt	lt
 8011ee8:	4622      	movlt	r2, r4
 8011eea:	4614      	movlt	r4, r2
 8011eec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011ef0:	d005      	beq.n	8011efe <__cvt+0x42>
 8011ef2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011ef6:	d100      	bne.n	8011efa <__cvt+0x3e>
 8011ef8:	3601      	adds	r6, #1
 8011efa:	2102      	movs	r1, #2
 8011efc:	e000      	b.n	8011f00 <__cvt+0x44>
 8011efe:	2103      	movs	r1, #3
 8011f00:	ab03      	add	r3, sp, #12
 8011f02:	9301      	str	r3, [sp, #4]
 8011f04:	ab02      	add	r3, sp, #8
 8011f06:	9300      	str	r3, [sp, #0]
 8011f08:	ec45 4b10 	vmov	d0, r4, r5
 8011f0c:	4653      	mov	r3, sl
 8011f0e:	4632      	mov	r2, r6
 8011f10:	f001 fe6a 	bl	8013be8 <_dtoa_r>
 8011f14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011f18:	4607      	mov	r7, r0
 8011f1a:	d102      	bne.n	8011f22 <__cvt+0x66>
 8011f1c:	f019 0f01 	tst.w	r9, #1
 8011f20:	d022      	beq.n	8011f68 <__cvt+0xac>
 8011f22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011f26:	eb07 0906 	add.w	r9, r7, r6
 8011f2a:	d110      	bne.n	8011f4e <__cvt+0x92>
 8011f2c:	783b      	ldrb	r3, [r7, #0]
 8011f2e:	2b30      	cmp	r3, #48	; 0x30
 8011f30:	d10a      	bne.n	8011f48 <__cvt+0x8c>
 8011f32:	2200      	movs	r2, #0
 8011f34:	2300      	movs	r3, #0
 8011f36:	4620      	mov	r0, r4
 8011f38:	4629      	mov	r1, r5
 8011f3a:	f7ee fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f3e:	b918      	cbnz	r0, 8011f48 <__cvt+0x8c>
 8011f40:	f1c6 0601 	rsb	r6, r6, #1
 8011f44:	f8ca 6000 	str.w	r6, [sl]
 8011f48:	f8da 3000 	ldr.w	r3, [sl]
 8011f4c:	4499      	add	r9, r3
 8011f4e:	2200      	movs	r2, #0
 8011f50:	2300      	movs	r3, #0
 8011f52:	4620      	mov	r0, r4
 8011f54:	4629      	mov	r1, r5
 8011f56:	f7ee fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f5a:	b108      	cbz	r0, 8011f60 <__cvt+0xa4>
 8011f5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011f60:	2230      	movs	r2, #48	; 0x30
 8011f62:	9b03      	ldr	r3, [sp, #12]
 8011f64:	454b      	cmp	r3, r9
 8011f66:	d307      	bcc.n	8011f78 <__cvt+0xbc>
 8011f68:	9b03      	ldr	r3, [sp, #12]
 8011f6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f6c:	1bdb      	subs	r3, r3, r7
 8011f6e:	4638      	mov	r0, r7
 8011f70:	6013      	str	r3, [r2, #0]
 8011f72:	b004      	add	sp, #16
 8011f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f78:	1c59      	adds	r1, r3, #1
 8011f7a:	9103      	str	r1, [sp, #12]
 8011f7c:	701a      	strb	r2, [r3, #0]
 8011f7e:	e7f0      	b.n	8011f62 <__cvt+0xa6>

08011f80 <__exponent>:
 8011f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f82:	4603      	mov	r3, r0
 8011f84:	2900      	cmp	r1, #0
 8011f86:	bfb8      	it	lt
 8011f88:	4249      	neglt	r1, r1
 8011f8a:	f803 2b02 	strb.w	r2, [r3], #2
 8011f8e:	bfb4      	ite	lt
 8011f90:	222d      	movlt	r2, #45	; 0x2d
 8011f92:	222b      	movge	r2, #43	; 0x2b
 8011f94:	2909      	cmp	r1, #9
 8011f96:	7042      	strb	r2, [r0, #1]
 8011f98:	dd2a      	ble.n	8011ff0 <__exponent+0x70>
 8011f9a:	f10d 0407 	add.w	r4, sp, #7
 8011f9e:	46a4      	mov	ip, r4
 8011fa0:	270a      	movs	r7, #10
 8011fa2:	46a6      	mov	lr, r4
 8011fa4:	460a      	mov	r2, r1
 8011fa6:	fb91 f6f7 	sdiv	r6, r1, r7
 8011faa:	fb07 1516 	mls	r5, r7, r6, r1
 8011fae:	3530      	adds	r5, #48	; 0x30
 8011fb0:	2a63      	cmp	r2, #99	; 0x63
 8011fb2:	f104 34ff 	add.w	r4, r4, #4294967295
 8011fb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011fba:	4631      	mov	r1, r6
 8011fbc:	dcf1      	bgt.n	8011fa2 <__exponent+0x22>
 8011fbe:	3130      	adds	r1, #48	; 0x30
 8011fc0:	f1ae 0502 	sub.w	r5, lr, #2
 8011fc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011fc8:	1c44      	adds	r4, r0, #1
 8011fca:	4629      	mov	r1, r5
 8011fcc:	4561      	cmp	r1, ip
 8011fce:	d30a      	bcc.n	8011fe6 <__exponent+0x66>
 8011fd0:	f10d 0209 	add.w	r2, sp, #9
 8011fd4:	eba2 020e 	sub.w	r2, r2, lr
 8011fd8:	4565      	cmp	r5, ip
 8011fda:	bf88      	it	hi
 8011fdc:	2200      	movhi	r2, #0
 8011fde:	4413      	add	r3, r2
 8011fe0:	1a18      	subs	r0, r3, r0
 8011fe2:	b003      	add	sp, #12
 8011fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011fea:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011fee:	e7ed      	b.n	8011fcc <__exponent+0x4c>
 8011ff0:	2330      	movs	r3, #48	; 0x30
 8011ff2:	3130      	adds	r1, #48	; 0x30
 8011ff4:	7083      	strb	r3, [r0, #2]
 8011ff6:	70c1      	strb	r1, [r0, #3]
 8011ff8:	1d03      	adds	r3, r0, #4
 8011ffa:	e7f1      	b.n	8011fe0 <__exponent+0x60>

08011ffc <_printf_float>:
 8011ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012000:	ed2d 8b02 	vpush	{d8}
 8012004:	b08d      	sub	sp, #52	; 0x34
 8012006:	460c      	mov	r4, r1
 8012008:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801200c:	4616      	mov	r6, r2
 801200e:	461f      	mov	r7, r3
 8012010:	4605      	mov	r5, r0
 8012012:	f003 f839 	bl	8015088 <_localeconv_r>
 8012016:	f8d0 a000 	ldr.w	sl, [r0]
 801201a:	4650      	mov	r0, sl
 801201c:	f7ee f8d8 	bl	80001d0 <strlen>
 8012020:	2300      	movs	r3, #0
 8012022:	930a      	str	r3, [sp, #40]	; 0x28
 8012024:	6823      	ldr	r3, [r4, #0]
 8012026:	9305      	str	r3, [sp, #20]
 8012028:	f8d8 3000 	ldr.w	r3, [r8]
 801202c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012030:	3307      	adds	r3, #7
 8012032:	f023 0307 	bic.w	r3, r3, #7
 8012036:	f103 0208 	add.w	r2, r3, #8
 801203a:	f8c8 2000 	str.w	r2, [r8]
 801203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012042:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012046:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801204a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801204e:	9307      	str	r3, [sp, #28]
 8012050:	f8cd 8018 	str.w	r8, [sp, #24]
 8012054:	ee08 0a10 	vmov	s16, r0
 8012058:	4b9f      	ldr	r3, [pc, #636]	; (80122d8 <_printf_float+0x2dc>)
 801205a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801205e:	f04f 32ff 	mov.w	r2, #4294967295
 8012062:	f7ee fd63 	bl	8000b2c <__aeabi_dcmpun>
 8012066:	bb88      	cbnz	r0, 80120cc <_printf_float+0xd0>
 8012068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801206c:	4b9a      	ldr	r3, [pc, #616]	; (80122d8 <_printf_float+0x2dc>)
 801206e:	f04f 32ff 	mov.w	r2, #4294967295
 8012072:	f7ee fd3d 	bl	8000af0 <__aeabi_dcmple>
 8012076:	bb48      	cbnz	r0, 80120cc <_printf_float+0xd0>
 8012078:	2200      	movs	r2, #0
 801207a:	2300      	movs	r3, #0
 801207c:	4640      	mov	r0, r8
 801207e:	4649      	mov	r1, r9
 8012080:	f7ee fd2c 	bl	8000adc <__aeabi_dcmplt>
 8012084:	b110      	cbz	r0, 801208c <_printf_float+0x90>
 8012086:	232d      	movs	r3, #45	; 0x2d
 8012088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801208c:	4b93      	ldr	r3, [pc, #588]	; (80122dc <_printf_float+0x2e0>)
 801208e:	4894      	ldr	r0, [pc, #592]	; (80122e0 <_printf_float+0x2e4>)
 8012090:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012094:	bf94      	ite	ls
 8012096:	4698      	movls	r8, r3
 8012098:	4680      	movhi	r8, r0
 801209a:	2303      	movs	r3, #3
 801209c:	6123      	str	r3, [r4, #16]
 801209e:	9b05      	ldr	r3, [sp, #20]
 80120a0:	f023 0204 	bic.w	r2, r3, #4
 80120a4:	6022      	str	r2, [r4, #0]
 80120a6:	f04f 0900 	mov.w	r9, #0
 80120aa:	9700      	str	r7, [sp, #0]
 80120ac:	4633      	mov	r3, r6
 80120ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80120b0:	4621      	mov	r1, r4
 80120b2:	4628      	mov	r0, r5
 80120b4:	f000 f9d8 	bl	8012468 <_printf_common>
 80120b8:	3001      	adds	r0, #1
 80120ba:	f040 8090 	bne.w	80121de <_printf_float+0x1e2>
 80120be:	f04f 30ff 	mov.w	r0, #4294967295
 80120c2:	b00d      	add	sp, #52	; 0x34
 80120c4:	ecbd 8b02 	vpop	{d8}
 80120c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120cc:	4642      	mov	r2, r8
 80120ce:	464b      	mov	r3, r9
 80120d0:	4640      	mov	r0, r8
 80120d2:	4649      	mov	r1, r9
 80120d4:	f7ee fd2a 	bl	8000b2c <__aeabi_dcmpun>
 80120d8:	b140      	cbz	r0, 80120ec <_printf_float+0xf0>
 80120da:	464b      	mov	r3, r9
 80120dc:	2b00      	cmp	r3, #0
 80120de:	bfbc      	itt	lt
 80120e0:	232d      	movlt	r3, #45	; 0x2d
 80120e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80120e6:	487f      	ldr	r0, [pc, #508]	; (80122e4 <_printf_float+0x2e8>)
 80120e8:	4b7f      	ldr	r3, [pc, #508]	; (80122e8 <_printf_float+0x2ec>)
 80120ea:	e7d1      	b.n	8012090 <_printf_float+0x94>
 80120ec:	6863      	ldr	r3, [r4, #4]
 80120ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80120f2:	9206      	str	r2, [sp, #24]
 80120f4:	1c5a      	adds	r2, r3, #1
 80120f6:	d13f      	bne.n	8012178 <_printf_float+0x17c>
 80120f8:	2306      	movs	r3, #6
 80120fa:	6063      	str	r3, [r4, #4]
 80120fc:	9b05      	ldr	r3, [sp, #20]
 80120fe:	6861      	ldr	r1, [r4, #4]
 8012100:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012104:	2300      	movs	r3, #0
 8012106:	9303      	str	r3, [sp, #12]
 8012108:	ab0a      	add	r3, sp, #40	; 0x28
 801210a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801210e:	ab09      	add	r3, sp, #36	; 0x24
 8012110:	ec49 8b10 	vmov	d0, r8, r9
 8012114:	9300      	str	r3, [sp, #0]
 8012116:	6022      	str	r2, [r4, #0]
 8012118:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801211c:	4628      	mov	r0, r5
 801211e:	f7ff fecd 	bl	8011ebc <__cvt>
 8012122:	9b06      	ldr	r3, [sp, #24]
 8012124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012126:	2b47      	cmp	r3, #71	; 0x47
 8012128:	4680      	mov	r8, r0
 801212a:	d108      	bne.n	801213e <_printf_float+0x142>
 801212c:	1cc8      	adds	r0, r1, #3
 801212e:	db02      	blt.n	8012136 <_printf_float+0x13a>
 8012130:	6863      	ldr	r3, [r4, #4]
 8012132:	4299      	cmp	r1, r3
 8012134:	dd41      	ble.n	80121ba <_printf_float+0x1be>
 8012136:	f1ab 0b02 	sub.w	fp, fp, #2
 801213a:	fa5f fb8b 	uxtb.w	fp, fp
 801213e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012142:	d820      	bhi.n	8012186 <_printf_float+0x18a>
 8012144:	3901      	subs	r1, #1
 8012146:	465a      	mov	r2, fp
 8012148:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801214c:	9109      	str	r1, [sp, #36]	; 0x24
 801214e:	f7ff ff17 	bl	8011f80 <__exponent>
 8012152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012154:	1813      	adds	r3, r2, r0
 8012156:	2a01      	cmp	r2, #1
 8012158:	4681      	mov	r9, r0
 801215a:	6123      	str	r3, [r4, #16]
 801215c:	dc02      	bgt.n	8012164 <_printf_float+0x168>
 801215e:	6822      	ldr	r2, [r4, #0]
 8012160:	07d2      	lsls	r2, r2, #31
 8012162:	d501      	bpl.n	8012168 <_printf_float+0x16c>
 8012164:	3301      	adds	r3, #1
 8012166:	6123      	str	r3, [r4, #16]
 8012168:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801216c:	2b00      	cmp	r3, #0
 801216e:	d09c      	beq.n	80120aa <_printf_float+0xae>
 8012170:	232d      	movs	r3, #45	; 0x2d
 8012172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012176:	e798      	b.n	80120aa <_printf_float+0xae>
 8012178:	9a06      	ldr	r2, [sp, #24]
 801217a:	2a47      	cmp	r2, #71	; 0x47
 801217c:	d1be      	bne.n	80120fc <_printf_float+0x100>
 801217e:	2b00      	cmp	r3, #0
 8012180:	d1bc      	bne.n	80120fc <_printf_float+0x100>
 8012182:	2301      	movs	r3, #1
 8012184:	e7b9      	b.n	80120fa <_printf_float+0xfe>
 8012186:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801218a:	d118      	bne.n	80121be <_printf_float+0x1c2>
 801218c:	2900      	cmp	r1, #0
 801218e:	6863      	ldr	r3, [r4, #4]
 8012190:	dd0b      	ble.n	80121aa <_printf_float+0x1ae>
 8012192:	6121      	str	r1, [r4, #16]
 8012194:	b913      	cbnz	r3, 801219c <_printf_float+0x1a0>
 8012196:	6822      	ldr	r2, [r4, #0]
 8012198:	07d0      	lsls	r0, r2, #31
 801219a:	d502      	bpl.n	80121a2 <_printf_float+0x1a6>
 801219c:	3301      	adds	r3, #1
 801219e:	440b      	add	r3, r1
 80121a0:	6123      	str	r3, [r4, #16]
 80121a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80121a4:	f04f 0900 	mov.w	r9, #0
 80121a8:	e7de      	b.n	8012168 <_printf_float+0x16c>
 80121aa:	b913      	cbnz	r3, 80121b2 <_printf_float+0x1b6>
 80121ac:	6822      	ldr	r2, [r4, #0]
 80121ae:	07d2      	lsls	r2, r2, #31
 80121b0:	d501      	bpl.n	80121b6 <_printf_float+0x1ba>
 80121b2:	3302      	adds	r3, #2
 80121b4:	e7f4      	b.n	80121a0 <_printf_float+0x1a4>
 80121b6:	2301      	movs	r3, #1
 80121b8:	e7f2      	b.n	80121a0 <_printf_float+0x1a4>
 80121ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80121be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121c0:	4299      	cmp	r1, r3
 80121c2:	db05      	blt.n	80121d0 <_printf_float+0x1d4>
 80121c4:	6823      	ldr	r3, [r4, #0]
 80121c6:	6121      	str	r1, [r4, #16]
 80121c8:	07d8      	lsls	r0, r3, #31
 80121ca:	d5ea      	bpl.n	80121a2 <_printf_float+0x1a6>
 80121cc:	1c4b      	adds	r3, r1, #1
 80121ce:	e7e7      	b.n	80121a0 <_printf_float+0x1a4>
 80121d0:	2900      	cmp	r1, #0
 80121d2:	bfd4      	ite	le
 80121d4:	f1c1 0202 	rsble	r2, r1, #2
 80121d8:	2201      	movgt	r2, #1
 80121da:	4413      	add	r3, r2
 80121dc:	e7e0      	b.n	80121a0 <_printf_float+0x1a4>
 80121de:	6823      	ldr	r3, [r4, #0]
 80121e0:	055a      	lsls	r2, r3, #21
 80121e2:	d407      	bmi.n	80121f4 <_printf_float+0x1f8>
 80121e4:	6923      	ldr	r3, [r4, #16]
 80121e6:	4642      	mov	r2, r8
 80121e8:	4631      	mov	r1, r6
 80121ea:	4628      	mov	r0, r5
 80121ec:	47b8      	blx	r7
 80121ee:	3001      	adds	r0, #1
 80121f0:	d12c      	bne.n	801224c <_printf_float+0x250>
 80121f2:	e764      	b.n	80120be <_printf_float+0xc2>
 80121f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80121f8:	f240 80e0 	bls.w	80123bc <_printf_float+0x3c0>
 80121fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012200:	2200      	movs	r2, #0
 8012202:	2300      	movs	r3, #0
 8012204:	f7ee fc60 	bl	8000ac8 <__aeabi_dcmpeq>
 8012208:	2800      	cmp	r0, #0
 801220a:	d034      	beq.n	8012276 <_printf_float+0x27a>
 801220c:	4a37      	ldr	r2, [pc, #220]	; (80122ec <_printf_float+0x2f0>)
 801220e:	2301      	movs	r3, #1
 8012210:	4631      	mov	r1, r6
 8012212:	4628      	mov	r0, r5
 8012214:	47b8      	blx	r7
 8012216:	3001      	adds	r0, #1
 8012218:	f43f af51 	beq.w	80120be <_printf_float+0xc2>
 801221c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012220:	429a      	cmp	r2, r3
 8012222:	db02      	blt.n	801222a <_printf_float+0x22e>
 8012224:	6823      	ldr	r3, [r4, #0]
 8012226:	07d8      	lsls	r0, r3, #31
 8012228:	d510      	bpl.n	801224c <_printf_float+0x250>
 801222a:	ee18 3a10 	vmov	r3, s16
 801222e:	4652      	mov	r2, sl
 8012230:	4631      	mov	r1, r6
 8012232:	4628      	mov	r0, r5
 8012234:	47b8      	blx	r7
 8012236:	3001      	adds	r0, #1
 8012238:	f43f af41 	beq.w	80120be <_printf_float+0xc2>
 801223c:	f04f 0800 	mov.w	r8, #0
 8012240:	f104 091a 	add.w	r9, r4, #26
 8012244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012246:	3b01      	subs	r3, #1
 8012248:	4543      	cmp	r3, r8
 801224a:	dc09      	bgt.n	8012260 <_printf_float+0x264>
 801224c:	6823      	ldr	r3, [r4, #0]
 801224e:	079b      	lsls	r3, r3, #30
 8012250:	f100 8105 	bmi.w	801245e <_printf_float+0x462>
 8012254:	68e0      	ldr	r0, [r4, #12]
 8012256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012258:	4298      	cmp	r0, r3
 801225a:	bfb8      	it	lt
 801225c:	4618      	movlt	r0, r3
 801225e:	e730      	b.n	80120c2 <_printf_float+0xc6>
 8012260:	2301      	movs	r3, #1
 8012262:	464a      	mov	r2, r9
 8012264:	4631      	mov	r1, r6
 8012266:	4628      	mov	r0, r5
 8012268:	47b8      	blx	r7
 801226a:	3001      	adds	r0, #1
 801226c:	f43f af27 	beq.w	80120be <_printf_float+0xc2>
 8012270:	f108 0801 	add.w	r8, r8, #1
 8012274:	e7e6      	b.n	8012244 <_printf_float+0x248>
 8012276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012278:	2b00      	cmp	r3, #0
 801227a:	dc39      	bgt.n	80122f0 <_printf_float+0x2f4>
 801227c:	4a1b      	ldr	r2, [pc, #108]	; (80122ec <_printf_float+0x2f0>)
 801227e:	2301      	movs	r3, #1
 8012280:	4631      	mov	r1, r6
 8012282:	4628      	mov	r0, r5
 8012284:	47b8      	blx	r7
 8012286:	3001      	adds	r0, #1
 8012288:	f43f af19 	beq.w	80120be <_printf_float+0xc2>
 801228c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012290:	4313      	orrs	r3, r2
 8012292:	d102      	bne.n	801229a <_printf_float+0x29e>
 8012294:	6823      	ldr	r3, [r4, #0]
 8012296:	07d9      	lsls	r1, r3, #31
 8012298:	d5d8      	bpl.n	801224c <_printf_float+0x250>
 801229a:	ee18 3a10 	vmov	r3, s16
 801229e:	4652      	mov	r2, sl
 80122a0:	4631      	mov	r1, r6
 80122a2:	4628      	mov	r0, r5
 80122a4:	47b8      	blx	r7
 80122a6:	3001      	adds	r0, #1
 80122a8:	f43f af09 	beq.w	80120be <_printf_float+0xc2>
 80122ac:	f04f 0900 	mov.w	r9, #0
 80122b0:	f104 0a1a 	add.w	sl, r4, #26
 80122b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122b6:	425b      	negs	r3, r3
 80122b8:	454b      	cmp	r3, r9
 80122ba:	dc01      	bgt.n	80122c0 <_printf_float+0x2c4>
 80122bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122be:	e792      	b.n	80121e6 <_printf_float+0x1ea>
 80122c0:	2301      	movs	r3, #1
 80122c2:	4652      	mov	r2, sl
 80122c4:	4631      	mov	r1, r6
 80122c6:	4628      	mov	r0, r5
 80122c8:	47b8      	blx	r7
 80122ca:	3001      	adds	r0, #1
 80122cc:	f43f aef7 	beq.w	80120be <_printf_float+0xc2>
 80122d0:	f109 0901 	add.w	r9, r9, #1
 80122d4:	e7ee      	b.n	80122b4 <_printf_float+0x2b8>
 80122d6:	bf00      	nop
 80122d8:	7fefffff 	.word	0x7fefffff
 80122dc:	08018fb8 	.word	0x08018fb8
 80122e0:	08018fbc 	.word	0x08018fbc
 80122e4:	08018fc4 	.word	0x08018fc4
 80122e8:	08018fc0 	.word	0x08018fc0
 80122ec:	08019429 	.word	0x08019429
 80122f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80122f4:	429a      	cmp	r2, r3
 80122f6:	bfa8      	it	ge
 80122f8:	461a      	movge	r2, r3
 80122fa:	2a00      	cmp	r2, #0
 80122fc:	4691      	mov	r9, r2
 80122fe:	dc37      	bgt.n	8012370 <_printf_float+0x374>
 8012300:	f04f 0b00 	mov.w	fp, #0
 8012304:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012308:	f104 021a 	add.w	r2, r4, #26
 801230c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801230e:	9305      	str	r3, [sp, #20]
 8012310:	eba3 0309 	sub.w	r3, r3, r9
 8012314:	455b      	cmp	r3, fp
 8012316:	dc33      	bgt.n	8012380 <_printf_float+0x384>
 8012318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801231c:	429a      	cmp	r2, r3
 801231e:	db3b      	blt.n	8012398 <_printf_float+0x39c>
 8012320:	6823      	ldr	r3, [r4, #0]
 8012322:	07da      	lsls	r2, r3, #31
 8012324:	d438      	bmi.n	8012398 <_printf_float+0x39c>
 8012326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012328:	9b05      	ldr	r3, [sp, #20]
 801232a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801232c:	1ad3      	subs	r3, r2, r3
 801232e:	eba2 0901 	sub.w	r9, r2, r1
 8012332:	4599      	cmp	r9, r3
 8012334:	bfa8      	it	ge
 8012336:	4699      	movge	r9, r3
 8012338:	f1b9 0f00 	cmp.w	r9, #0
 801233c:	dc35      	bgt.n	80123aa <_printf_float+0x3ae>
 801233e:	f04f 0800 	mov.w	r8, #0
 8012342:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012346:	f104 0a1a 	add.w	sl, r4, #26
 801234a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801234e:	1a9b      	subs	r3, r3, r2
 8012350:	eba3 0309 	sub.w	r3, r3, r9
 8012354:	4543      	cmp	r3, r8
 8012356:	f77f af79 	ble.w	801224c <_printf_float+0x250>
 801235a:	2301      	movs	r3, #1
 801235c:	4652      	mov	r2, sl
 801235e:	4631      	mov	r1, r6
 8012360:	4628      	mov	r0, r5
 8012362:	47b8      	blx	r7
 8012364:	3001      	adds	r0, #1
 8012366:	f43f aeaa 	beq.w	80120be <_printf_float+0xc2>
 801236a:	f108 0801 	add.w	r8, r8, #1
 801236e:	e7ec      	b.n	801234a <_printf_float+0x34e>
 8012370:	4613      	mov	r3, r2
 8012372:	4631      	mov	r1, r6
 8012374:	4642      	mov	r2, r8
 8012376:	4628      	mov	r0, r5
 8012378:	47b8      	blx	r7
 801237a:	3001      	adds	r0, #1
 801237c:	d1c0      	bne.n	8012300 <_printf_float+0x304>
 801237e:	e69e      	b.n	80120be <_printf_float+0xc2>
 8012380:	2301      	movs	r3, #1
 8012382:	4631      	mov	r1, r6
 8012384:	4628      	mov	r0, r5
 8012386:	9205      	str	r2, [sp, #20]
 8012388:	47b8      	blx	r7
 801238a:	3001      	adds	r0, #1
 801238c:	f43f ae97 	beq.w	80120be <_printf_float+0xc2>
 8012390:	9a05      	ldr	r2, [sp, #20]
 8012392:	f10b 0b01 	add.w	fp, fp, #1
 8012396:	e7b9      	b.n	801230c <_printf_float+0x310>
 8012398:	ee18 3a10 	vmov	r3, s16
 801239c:	4652      	mov	r2, sl
 801239e:	4631      	mov	r1, r6
 80123a0:	4628      	mov	r0, r5
 80123a2:	47b8      	blx	r7
 80123a4:	3001      	adds	r0, #1
 80123a6:	d1be      	bne.n	8012326 <_printf_float+0x32a>
 80123a8:	e689      	b.n	80120be <_printf_float+0xc2>
 80123aa:	9a05      	ldr	r2, [sp, #20]
 80123ac:	464b      	mov	r3, r9
 80123ae:	4442      	add	r2, r8
 80123b0:	4631      	mov	r1, r6
 80123b2:	4628      	mov	r0, r5
 80123b4:	47b8      	blx	r7
 80123b6:	3001      	adds	r0, #1
 80123b8:	d1c1      	bne.n	801233e <_printf_float+0x342>
 80123ba:	e680      	b.n	80120be <_printf_float+0xc2>
 80123bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123be:	2a01      	cmp	r2, #1
 80123c0:	dc01      	bgt.n	80123c6 <_printf_float+0x3ca>
 80123c2:	07db      	lsls	r3, r3, #31
 80123c4:	d538      	bpl.n	8012438 <_printf_float+0x43c>
 80123c6:	2301      	movs	r3, #1
 80123c8:	4642      	mov	r2, r8
 80123ca:	4631      	mov	r1, r6
 80123cc:	4628      	mov	r0, r5
 80123ce:	47b8      	blx	r7
 80123d0:	3001      	adds	r0, #1
 80123d2:	f43f ae74 	beq.w	80120be <_printf_float+0xc2>
 80123d6:	ee18 3a10 	vmov	r3, s16
 80123da:	4652      	mov	r2, sl
 80123dc:	4631      	mov	r1, r6
 80123de:	4628      	mov	r0, r5
 80123e0:	47b8      	blx	r7
 80123e2:	3001      	adds	r0, #1
 80123e4:	f43f ae6b 	beq.w	80120be <_printf_float+0xc2>
 80123e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80123ec:	2200      	movs	r2, #0
 80123ee:	2300      	movs	r3, #0
 80123f0:	f7ee fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80123f4:	b9d8      	cbnz	r0, 801242e <_printf_float+0x432>
 80123f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123f8:	f108 0201 	add.w	r2, r8, #1
 80123fc:	3b01      	subs	r3, #1
 80123fe:	4631      	mov	r1, r6
 8012400:	4628      	mov	r0, r5
 8012402:	47b8      	blx	r7
 8012404:	3001      	adds	r0, #1
 8012406:	d10e      	bne.n	8012426 <_printf_float+0x42a>
 8012408:	e659      	b.n	80120be <_printf_float+0xc2>
 801240a:	2301      	movs	r3, #1
 801240c:	4652      	mov	r2, sl
 801240e:	4631      	mov	r1, r6
 8012410:	4628      	mov	r0, r5
 8012412:	47b8      	blx	r7
 8012414:	3001      	adds	r0, #1
 8012416:	f43f ae52 	beq.w	80120be <_printf_float+0xc2>
 801241a:	f108 0801 	add.w	r8, r8, #1
 801241e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012420:	3b01      	subs	r3, #1
 8012422:	4543      	cmp	r3, r8
 8012424:	dcf1      	bgt.n	801240a <_printf_float+0x40e>
 8012426:	464b      	mov	r3, r9
 8012428:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801242c:	e6dc      	b.n	80121e8 <_printf_float+0x1ec>
 801242e:	f04f 0800 	mov.w	r8, #0
 8012432:	f104 0a1a 	add.w	sl, r4, #26
 8012436:	e7f2      	b.n	801241e <_printf_float+0x422>
 8012438:	2301      	movs	r3, #1
 801243a:	4642      	mov	r2, r8
 801243c:	e7df      	b.n	80123fe <_printf_float+0x402>
 801243e:	2301      	movs	r3, #1
 8012440:	464a      	mov	r2, r9
 8012442:	4631      	mov	r1, r6
 8012444:	4628      	mov	r0, r5
 8012446:	47b8      	blx	r7
 8012448:	3001      	adds	r0, #1
 801244a:	f43f ae38 	beq.w	80120be <_printf_float+0xc2>
 801244e:	f108 0801 	add.w	r8, r8, #1
 8012452:	68e3      	ldr	r3, [r4, #12]
 8012454:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012456:	1a5b      	subs	r3, r3, r1
 8012458:	4543      	cmp	r3, r8
 801245a:	dcf0      	bgt.n	801243e <_printf_float+0x442>
 801245c:	e6fa      	b.n	8012254 <_printf_float+0x258>
 801245e:	f04f 0800 	mov.w	r8, #0
 8012462:	f104 0919 	add.w	r9, r4, #25
 8012466:	e7f4      	b.n	8012452 <_printf_float+0x456>

08012468 <_printf_common>:
 8012468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801246c:	4616      	mov	r6, r2
 801246e:	4699      	mov	r9, r3
 8012470:	688a      	ldr	r2, [r1, #8]
 8012472:	690b      	ldr	r3, [r1, #16]
 8012474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012478:	4293      	cmp	r3, r2
 801247a:	bfb8      	it	lt
 801247c:	4613      	movlt	r3, r2
 801247e:	6033      	str	r3, [r6, #0]
 8012480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012484:	4607      	mov	r7, r0
 8012486:	460c      	mov	r4, r1
 8012488:	b10a      	cbz	r2, 801248e <_printf_common+0x26>
 801248a:	3301      	adds	r3, #1
 801248c:	6033      	str	r3, [r6, #0]
 801248e:	6823      	ldr	r3, [r4, #0]
 8012490:	0699      	lsls	r1, r3, #26
 8012492:	bf42      	ittt	mi
 8012494:	6833      	ldrmi	r3, [r6, #0]
 8012496:	3302      	addmi	r3, #2
 8012498:	6033      	strmi	r3, [r6, #0]
 801249a:	6825      	ldr	r5, [r4, #0]
 801249c:	f015 0506 	ands.w	r5, r5, #6
 80124a0:	d106      	bne.n	80124b0 <_printf_common+0x48>
 80124a2:	f104 0a19 	add.w	sl, r4, #25
 80124a6:	68e3      	ldr	r3, [r4, #12]
 80124a8:	6832      	ldr	r2, [r6, #0]
 80124aa:	1a9b      	subs	r3, r3, r2
 80124ac:	42ab      	cmp	r3, r5
 80124ae:	dc26      	bgt.n	80124fe <_printf_common+0x96>
 80124b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80124b4:	1e13      	subs	r3, r2, #0
 80124b6:	6822      	ldr	r2, [r4, #0]
 80124b8:	bf18      	it	ne
 80124ba:	2301      	movne	r3, #1
 80124bc:	0692      	lsls	r2, r2, #26
 80124be:	d42b      	bmi.n	8012518 <_printf_common+0xb0>
 80124c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80124c4:	4649      	mov	r1, r9
 80124c6:	4638      	mov	r0, r7
 80124c8:	47c0      	blx	r8
 80124ca:	3001      	adds	r0, #1
 80124cc:	d01e      	beq.n	801250c <_printf_common+0xa4>
 80124ce:	6823      	ldr	r3, [r4, #0]
 80124d0:	68e5      	ldr	r5, [r4, #12]
 80124d2:	6832      	ldr	r2, [r6, #0]
 80124d4:	f003 0306 	and.w	r3, r3, #6
 80124d8:	2b04      	cmp	r3, #4
 80124da:	bf08      	it	eq
 80124dc:	1aad      	subeq	r5, r5, r2
 80124de:	68a3      	ldr	r3, [r4, #8]
 80124e0:	6922      	ldr	r2, [r4, #16]
 80124e2:	bf0c      	ite	eq
 80124e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124e8:	2500      	movne	r5, #0
 80124ea:	4293      	cmp	r3, r2
 80124ec:	bfc4      	itt	gt
 80124ee:	1a9b      	subgt	r3, r3, r2
 80124f0:	18ed      	addgt	r5, r5, r3
 80124f2:	2600      	movs	r6, #0
 80124f4:	341a      	adds	r4, #26
 80124f6:	42b5      	cmp	r5, r6
 80124f8:	d11a      	bne.n	8012530 <_printf_common+0xc8>
 80124fa:	2000      	movs	r0, #0
 80124fc:	e008      	b.n	8012510 <_printf_common+0xa8>
 80124fe:	2301      	movs	r3, #1
 8012500:	4652      	mov	r2, sl
 8012502:	4649      	mov	r1, r9
 8012504:	4638      	mov	r0, r7
 8012506:	47c0      	blx	r8
 8012508:	3001      	adds	r0, #1
 801250a:	d103      	bne.n	8012514 <_printf_common+0xac>
 801250c:	f04f 30ff 	mov.w	r0, #4294967295
 8012510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012514:	3501      	adds	r5, #1
 8012516:	e7c6      	b.n	80124a6 <_printf_common+0x3e>
 8012518:	18e1      	adds	r1, r4, r3
 801251a:	1c5a      	adds	r2, r3, #1
 801251c:	2030      	movs	r0, #48	; 0x30
 801251e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012522:	4422      	add	r2, r4
 8012524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801252c:	3302      	adds	r3, #2
 801252e:	e7c7      	b.n	80124c0 <_printf_common+0x58>
 8012530:	2301      	movs	r3, #1
 8012532:	4622      	mov	r2, r4
 8012534:	4649      	mov	r1, r9
 8012536:	4638      	mov	r0, r7
 8012538:	47c0      	blx	r8
 801253a:	3001      	adds	r0, #1
 801253c:	d0e6      	beq.n	801250c <_printf_common+0xa4>
 801253e:	3601      	adds	r6, #1
 8012540:	e7d9      	b.n	80124f6 <_printf_common+0x8e>
	...

08012544 <_printf_i>:
 8012544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012548:	460c      	mov	r4, r1
 801254a:	4691      	mov	r9, r2
 801254c:	7e27      	ldrb	r7, [r4, #24]
 801254e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012550:	2f78      	cmp	r7, #120	; 0x78
 8012552:	4680      	mov	r8, r0
 8012554:	469a      	mov	sl, r3
 8012556:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801255a:	d807      	bhi.n	801256c <_printf_i+0x28>
 801255c:	2f62      	cmp	r7, #98	; 0x62
 801255e:	d80a      	bhi.n	8012576 <_printf_i+0x32>
 8012560:	2f00      	cmp	r7, #0
 8012562:	f000 80d8 	beq.w	8012716 <_printf_i+0x1d2>
 8012566:	2f58      	cmp	r7, #88	; 0x58
 8012568:	f000 80a3 	beq.w	80126b2 <_printf_i+0x16e>
 801256c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012574:	e03a      	b.n	80125ec <_printf_i+0xa8>
 8012576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801257a:	2b15      	cmp	r3, #21
 801257c:	d8f6      	bhi.n	801256c <_printf_i+0x28>
 801257e:	a001      	add	r0, pc, #4	; (adr r0, 8012584 <_printf_i+0x40>)
 8012580:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012584:	080125dd 	.word	0x080125dd
 8012588:	080125f1 	.word	0x080125f1
 801258c:	0801256d 	.word	0x0801256d
 8012590:	0801256d 	.word	0x0801256d
 8012594:	0801256d 	.word	0x0801256d
 8012598:	0801256d 	.word	0x0801256d
 801259c:	080125f1 	.word	0x080125f1
 80125a0:	0801256d 	.word	0x0801256d
 80125a4:	0801256d 	.word	0x0801256d
 80125a8:	0801256d 	.word	0x0801256d
 80125ac:	0801256d 	.word	0x0801256d
 80125b0:	080126fd 	.word	0x080126fd
 80125b4:	08012621 	.word	0x08012621
 80125b8:	080126df 	.word	0x080126df
 80125bc:	0801256d 	.word	0x0801256d
 80125c0:	0801256d 	.word	0x0801256d
 80125c4:	0801271f 	.word	0x0801271f
 80125c8:	0801256d 	.word	0x0801256d
 80125cc:	08012621 	.word	0x08012621
 80125d0:	0801256d 	.word	0x0801256d
 80125d4:	0801256d 	.word	0x0801256d
 80125d8:	080126e7 	.word	0x080126e7
 80125dc:	680b      	ldr	r3, [r1, #0]
 80125de:	1d1a      	adds	r2, r3, #4
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	600a      	str	r2, [r1, #0]
 80125e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80125e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80125ec:	2301      	movs	r3, #1
 80125ee:	e0a3      	b.n	8012738 <_printf_i+0x1f4>
 80125f0:	6825      	ldr	r5, [r4, #0]
 80125f2:	6808      	ldr	r0, [r1, #0]
 80125f4:	062e      	lsls	r6, r5, #24
 80125f6:	f100 0304 	add.w	r3, r0, #4
 80125fa:	d50a      	bpl.n	8012612 <_printf_i+0xce>
 80125fc:	6805      	ldr	r5, [r0, #0]
 80125fe:	600b      	str	r3, [r1, #0]
 8012600:	2d00      	cmp	r5, #0
 8012602:	da03      	bge.n	801260c <_printf_i+0xc8>
 8012604:	232d      	movs	r3, #45	; 0x2d
 8012606:	426d      	negs	r5, r5
 8012608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801260c:	485e      	ldr	r0, [pc, #376]	; (8012788 <_printf_i+0x244>)
 801260e:	230a      	movs	r3, #10
 8012610:	e019      	b.n	8012646 <_printf_i+0x102>
 8012612:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012616:	6805      	ldr	r5, [r0, #0]
 8012618:	600b      	str	r3, [r1, #0]
 801261a:	bf18      	it	ne
 801261c:	b22d      	sxthne	r5, r5
 801261e:	e7ef      	b.n	8012600 <_printf_i+0xbc>
 8012620:	680b      	ldr	r3, [r1, #0]
 8012622:	6825      	ldr	r5, [r4, #0]
 8012624:	1d18      	adds	r0, r3, #4
 8012626:	6008      	str	r0, [r1, #0]
 8012628:	0628      	lsls	r0, r5, #24
 801262a:	d501      	bpl.n	8012630 <_printf_i+0xec>
 801262c:	681d      	ldr	r5, [r3, #0]
 801262e:	e002      	b.n	8012636 <_printf_i+0xf2>
 8012630:	0669      	lsls	r1, r5, #25
 8012632:	d5fb      	bpl.n	801262c <_printf_i+0xe8>
 8012634:	881d      	ldrh	r5, [r3, #0]
 8012636:	4854      	ldr	r0, [pc, #336]	; (8012788 <_printf_i+0x244>)
 8012638:	2f6f      	cmp	r7, #111	; 0x6f
 801263a:	bf0c      	ite	eq
 801263c:	2308      	moveq	r3, #8
 801263e:	230a      	movne	r3, #10
 8012640:	2100      	movs	r1, #0
 8012642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012646:	6866      	ldr	r6, [r4, #4]
 8012648:	60a6      	str	r6, [r4, #8]
 801264a:	2e00      	cmp	r6, #0
 801264c:	bfa2      	ittt	ge
 801264e:	6821      	ldrge	r1, [r4, #0]
 8012650:	f021 0104 	bicge.w	r1, r1, #4
 8012654:	6021      	strge	r1, [r4, #0]
 8012656:	b90d      	cbnz	r5, 801265c <_printf_i+0x118>
 8012658:	2e00      	cmp	r6, #0
 801265a:	d04d      	beq.n	80126f8 <_printf_i+0x1b4>
 801265c:	4616      	mov	r6, r2
 801265e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012662:	fb03 5711 	mls	r7, r3, r1, r5
 8012666:	5dc7      	ldrb	r7, [r0, r7]
 8012668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801266c:	462f      	mov	r7, r5
 801266e:	42bb      	cmp	r3, r7
 8012670:	460d      	mov	r5, r1
 8012672:	d9f4      	bls.n	801265e <_printf_i+0x11a>
 8012674:	2b08      	cmp	r3, #8
 8012676:	d10b      	bne.n	8012690 <_printf_i+0x14c>
 8012678:	6823      	ldr	r3, [r4, #0]
 801267a:	07df      	lsls	r7, r3, #31
 801267c:	d508      	bpl.n	8012690 <_printf_i+0x14c>
 801267e:	6923      	ldr	r3, [r4, #16]
 8012680:	6861      	ldr	r1, [r4, #4]
 8012682:	4299      	cmp	r1, r3
 8012684:	bfde      	ittt	le
 8012686:	2330      	movle	r3, #48	; 0x30
 8012688:	f806 3c01 	strble.w	r3, [r6, #-1]
 801268c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012690:	1b92      	subs	r2, r2, r6
 8012692:	6122      	str	r2, [r4, #16]
 8012694:	f8cd a000 	str.w	sl, [sp]
 8012698:	464b      	mov	r3, r9
 801269a:	aa03      	add	r2, sp, #12
 801269c:	4621      	mov	r1, r4
 801269e:	4640      	mov	r0, r8
 80126a0:	f7ff fee2 	bl	8012468 <_printf_common>
 80126a4:	3001      	adds	r0, #1
 80126a6:	d14c      	bne.n	8012742 <_printf_i+0x1fe>
 80126a8:	f04f 30ff 	mov.w	r0, #4294967295
 80126ac:	b004      	add	sp, #16
 80126ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126b2:	4835      	ldr	r0, [pc, #212]	; (8012788 <_printf_i+0x244>)
 80126b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80126b8:	6823      	ldr	r3, [r4, #0]
 80126ba:	680e      	ldr	r6, [r1, #0]
 80126bc:	061f      	lsls	r7, r3, #24
 80126be:	f856 5b04 	ldr.w	r5, [r6], #4
 80126c2:	600e      	str	r6, [r1, #0]
 80126c4:	d514      	bpl.n	80126f0 <_printf_i+0x1ac>
 80126c6:	07d9      	lsls	r1, r3, #31
 80126c8:	bf44      	itt	mi
 80126ca:	f043 0320 	orrmi.w	r3, r3, #32
 80126ce:	6023      	strmi	r3, [r4, #0]
 80126d0:	b91d      	cbnz	r5, 80126da <_printf_i+0x196>
 80126d2:	6823      	ldr	r3, [r4, #0]
 80126d4:	f023 0320 	bic.w	r3, r3, #32
 80126d8:	6023      	str	r3, [r4, #0]
 80126da:	2310      	movs	r3, #16
 80126dc:	e7b0      	b.n	8012640 <_printf_i+0xfc>
 80126de:	6823      	ldr	r3, [r4, #0]
 80126e0:	f043 0320 	orr.w	r3, r3, #32
 80126e4:	6023      	str	r3, [r4, #0]
 80126e6:	2378      	movs	r3, #120	; 0x78
 80126e8:	4828      	ldr	r0, [pc, #160]	; (801278c <_printf_i+0x248>)
 80126ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80126ee:	e7e3      	b.n	80126b8 <_printf_i+0x174>
 80126f0:	065e      	lsls	r6, r3, #25
 80126f2:	bf48      	it	mi
 80126f4:	b2ad      	uxthmi	r5, r5
 80126f6:	e7e6      	b.n	80126c6 <_printf_i+0x182>
 80126f8:	4616      	mov	r6, r2
 80126fa:	e7bb      	b.n	8012674 <_printf_i+0x130>
 80126fc:	680b      	ldr	r3, [r1, #0]
 80126fe:	6826      	ldr	r6, [r4, #0]
 8012700:	6960      	ldr	r0, [r4, #20]
 8012702:	1d1d      	adds	r5, r3, #4
 8012704:	600d      	str	r5, [r1, #0]
 8012706:	0635      	lsls	r5, r6, #24
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	d501      	bpl.n	8012710 <_printf_i+0x1cc>
 801270c:	6018      	str	r0, [r3, #0]
 801270e:	e002      	b.n	8012716 <_printf_i+0x1d2>
 8012710:	0671      	lsls	r1, r6, #25
 8012712:	d5fb      	bpl.n	801270c <_printf_i+0x1c8>
 8012714:	8018      	strh	r0, [r3, #0]
 8012716:	2300      	movs	r3, #0
 8012718:	6123      	str	r3, [r4, #16]
 801271a:	4616      	mov	r6, r2
 801271c:	e7ba      	b.n	8012694 <_printf_i+0x150>
 801271e:	680b      	ldr	r3, [r1, #0]
 8012720:	1d1a      	adds	r2, r3, #4
 8012722:	600a      	str	r2, [r1, #0]
 8012724:	681e      	ldr	r6, [r3, #0]
 8012726:	6862      	ldr	r2, [r4, #4]
 8012728:	2100      	movs	r1, #0
 801272a:	4630      	mov	r0, r6
 801272c:	f7ed fd58 	bl	80001e0 <memchr>
 8012730:	b108      	cbz	r0, 8012736 <_printf_i+0x1f2>
 8012732:	1b80      	subs	r0, r0, r6
 8012734:	6060      	str	r0, [r4, #4]
 8012736:	6863      	ldr	r3, [r4, #4]
 8012738:	6123      	str	r3, [r4, #16]
 801273a:	2300      	movs	r3, #0
 801273c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012740:	e7a8      	b.n	8012694 <_printf_i+0x150>
 8012742:	6923      	ldr	r3, [r4, #16]
 8012744:	4632      	mov	r2, r6
 8012746:	4649      	mov	r1, r9
 8012748:	4640      	mov	r0, r8
 801274a:	47d0      	blx	sl
 801274c:	3001      	adds	r0, #1
 801274e:	d0ab      	beq.n	80126a8 <_printf_i+0x164>
 8012750:	6823      	ldr	r3, [r4, #0]
 8012752:	079b      	lsls	r3, r3, #30
 8012754:	d413      	bmi.n	801277e <_printf_i+0x23a>
 8012756:	68e0      	ldr	r0, [r4, #12]
 8012758:	9b03      	ldr	r3, [sp, #12]
 801275a:	4298      	cmp	r0, r3
 801275c:	bfb8      	it	lt
 801275e:	4618      	movlt	r0, r3
 8012760:	e7a4      	b.n	80126ac <_printf_i+0x168>
 8012762:	2301      	movs	r3, #1
 8012764:	4632      	mov	r2, r6
 8012766:	4649      	mov	r1, r9
 8012768:	4640      	mov	r0, r8
 801276a:	47d0      	blx	sl
 801276c:	3001      	adds	r0, #1
 801276e:	d09b      	beq.n	80126a8 <_printf_i+0x164>
 8012770:	3501      	adds	r5, #1
 8012772:	68e3      	ldr	r3, [r4, #12]
 8012774:	9903      	ldr	r1, [sp, #12]
 8012776:	1a5b      	subs	r3, r3, r1
 8012778:	42ab      	cmp	r3, r5
 801277a:	dcf2      	bgt.n	8012762 <_printf_i+0x21e>
 801277c:	e7eb      	b.n	8012756 <_printf_i+0x212>
 801277e:	2500      	movs	r5, #0
 8012780:	f104 0619 	add.w	r6, r4, #25
 8012784:	e7f5      	b.n	8012772 <_printf_i+0x22e>
 8012786:	bf00      	nop
 8012788:	08018fc8 	.word	0x08018fc8
 801278c:	08018fd9 	.word	0x08018fd9

08012790 <_scanf_float>:
 8012790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012794:	b087      	sub	sp, #28
 8012796:	4617      	mov	r7, r2
 8012798:	9303      	str	r3, [sp, #12]
 801279a:	688b      	ldr	r3, [r1, #8]
 801279c:	1e5a      	subs	r2, r3, #1
 801279e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80127a2:	bf83      	ittte	hi
 80127a4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80127a8:	195b      	addhi	r3, r3, r5
 80127aa:	9302      	strhi	r3, [sp, #8]
 80127ac:	2300      	movls	r3, #0
 80127ae:	bf86      	itte	hi
 80127b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80127b4:	608b      	strhi	r3, [r1, #8]
 80127b6:	9302      	strls	r3, [sp, #8]
 80127b8:	680b      	ldr	r3, [r1, #0]
 80127ba:	468b      	mov	fp, r1
 80127bc:	2500      	movs	r5, #0
 80127be:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80127c2:	f84b 3b1c 	str.w	r3, [fp], #28
 80127c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80127ca:	4680      	mov	r8, r0
 80127cc:	460c      	mov	r4, r1
 80127ce:	465e      	mov	r6, fp
 80127d0:	46aa      	mov	sl, r5
 80127d2:	46a9      	mov	r9, r5
 80127d4:	9501      	str	r5, [sp, #4]
 80127d6:	68a2      	ldr	r2, [r4, #8]
 80127d8:	b152      	cbz	r2, 80127f0 <_scanf_float+0x60>
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	2b4e      	cmp	r3, #78	; 0x4e
 80127e0:	d864      	bhi.n	80128ac <_scanf_float+0x11c>
 80127e2:	2b40      	cmp	r3, #64	; 0x40
 80127e4:	d83c      	bhi.n	8012860 <_scanf_float+0xd0>
 80127e6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80127ea:	b2c8      	uxtb	r0, r1
 80127ec:	280e      	cmp	r0, #14
 80127ee:	d93a      	bls.n	8012866 <_scanf_float+0xd6>
 80127f0:	f1b9 0f00 	cmp.w	r9, #0
 80127f4:	d003      	beq.n	80127fe <_scanf_float+0x6e>
 80127f6:	6823      	ldr	r3, [r4, #0]
 80127f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80127fc:	6023      	str	r3, [r4, #0]
 80127fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012802:	f1ba 0f01 	cmp.w	sl, #1
 8012806:	f200 8113 	bhi.w	8012a30 <_scanf_float+0x2a0>
 801280a:	455e      	cmp	r6, fp
 801280c:	f200 8105 	bhi.w	8012a1a <_scanf_float+0x28a>
 8012810:	2501      	movs	r5, #1
 8012812:	4628      	mov	r0, r5
 8012814:	b007      	add	sp, #28
 8012816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801281a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801281e:	2a0d      	cmp	r2, #13
 8012820:	d8e6      	bhi.n	80127f0 <_scanf_float+0x60>
 8012822:	a101      	add	r1, pc, #4	; (adr r1, 8012828 <_scanf_float+0x98>)
 8012824:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012828:	08012967 	.word	0x08012967
 801282c:	080127f1 	.word	0x080127f1
 8012830:	080127f1 	.word	0x080127f1
 8012834:	080127f1 	.word	0x080127f1
 8012838:	080129c7 	.word	0x080129c7
 801283c:	0801299f 	.word	0x0801299f
 8012840:	080127f1 	.word	0x080127f1
 8012844:	080127f1 	.word	0x080127f1
 8012848:	08012975 	.word	0x08012975
 801284c:	080127f1 	.word	0x080127f1
 8012850:	080127f1 	.word	0x080127f1
 8012854:	080127f1 	.word	0x080127f1
 8012858:	080127f1 	.word	0x080127f1
 801285c:	0801292d 	.word	0x0801292d
 8012860:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012864:	e7db      	b.n	801281e <_scanf_float+0x8e>
 8012866:	290e      	cmp	r1, #14
 8012868:	d8c2      	bhi.n	80127f0 <_scanf_float+0x60>
 801286a:	a001      	add	r0, pc, #4	; (adr r0, 8012870 <_scanf_float+0xe0>)
 801286c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012870:	0801291f 	.word	0x0801291f
 8012874:	080127f1 	.word	0x080127f1
 8012878:	0801291f 	.word	0x0801291f
 801287c:	080129b3 	.word	0x080129b3
 8012880:	080127f1 	.word	0x080127f1
 8012884:	080128cd 	.word	0x080128cd
 8012888:	08012909 	.word	0x08012909
 801288c:	08012909 	.word	0x08012909
 8012890:	08012909 	.word	0x08012909
 8012894:	08012909 	.word	0x08012909
 8012898:	08012909 	.word	0x08012909
 801289c:	08012909 	.word	0x08012909
 80128a0:	08012909 	.word	0x08012909
 80128a4:	08012909 	.word	0x08012909
 80128a8:	08012909 	.word	0x08012909
 80128ac:	2b6e      	cmp	r3, #110	; 0x6e
 80128ae:	d809      	bhi.n	80128c4 <_scanf_float+0x134>
 80128b0:	2b60      	cmp	r3, #96	; 0x60
 80128b2:	d8b2      	bhi.n	801281a <_scanf_float+0x8a>
 80128b4:	2b54      	cmp	r3, #84	; 0x54
 80128b6:	d077      	beq.n	80129a8 <_scanf_float+0x218>
 80128b8:	2b59      	cmp	r3, #89	; 0x59
 80128ba:	d199      	bne.n	80127f0 <_scanf_float+0x60>
 80128bc:	2d07      	cmp	r5, #7
 80128be:	d197      	bne.n	80127f0 <_scanf_float+0x60>
 80128c0:	2508      	movs	r5, #8
 80128c2:	e029      	b.n	8012918 <_scanf_float+0x188>
 80128c4:	2b74      	cmp	r3, #116	; 0x74
 80128c6:	d06f      	beq.n	80129a8 <_scanf_float+0x218>
 80128c8:	2b79      	cmp	r3, #121	; 0x79
 80128ca:	e7f6      	b.n	80128ba <_scanf_float+0x12a>
 80128cc:	6821      	ldr	r1, [r4, #0]
 80128ce:	05c8      	lsls	r0, r1, #23
 80128d0:	d51a      	bpl.n	8012908 <_scanf_float+0x178>
 80128d2:	9b02      	ldr	r3, [sp, #8]
 80128d4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80128d8:	6021      	str	r1, [r4, #0]
 80128da:	f109 0901 	add.w	r9, r9, #1
 80128de:	b11b      	cbz	r3, 80128e8 <_scanf_float+0x158>
 80128e0:	3b01      	subs	r3, #1
 80128e2:	3201      	adds	r2, #1
 80128e4:	9302      	str	r3, [sp, #8]
 80128e6:	60a2      	str	r2, [r4, #8]
 80128e8:	68a3      	ldr	r3, [r4, #8]
 80128ea:	3b01      	subs	r3, #1
 80128ec:	60a3      	str	r3, [r4, #8]
 80128ee:	6923      	ldr	r3, [r4, #16]
 80128f0:	3301      	adds	r3, #1
 80128f2:	6123      	str	r3, [r4, #16]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	3b01      	subs	r3, #1
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	607b      	str	r3, [r7, #4]
 80128fc:	f340 8084 	ble.w	8012a08 <_scanf_float+0x278>
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	3301      	adds	r3, #1
 8012904:	603b      	str	r3, [r7, #0]
 8012906:	e766      	b.n	80127d6 <_scanf_float+0x46>
 8012908:	eb1a 0f05 	cmn.w	sl, r5
 801290c:	f47f af70 	bne.w	80127f0 <_scanf_float+0x60>
 8012910:	6822      	ldr	r2, [r4, #0]
 8012912:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012916:	6022      	str	r2, [r4, #0]
 8012918:	f806 3b01 	strb.w	r3, [r6], #1
 801291c:	e7e4      	b.n	80128e8 <_scanf_float+0x158>
 801291e:	6822      	ldr	r2, [r4, #0]
 8012920:	0610      	lsls	r0, r2, #24
 8012922:	f57f af65 	bpl.w	80127f0 <_scanf_float+0x60>
 8012926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801292a:	e7f4      	b.n	8012916 <_scanf_float+0x186>
 801292c:	f1ba 0f00 	cmp.w	sl, #0
 8012930:	d10e      	bne.n	8012950 <_scanf_float+0x1c0>
 8012932:	f1b9 0f00 	cmp.w	r9, #0
 8012936:	d10e      	bne.n	8012956 <_scanf_float+0x1c6>
 8012938:	6822      	ldr	r2, [r4, #0]
 801293a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801293e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012942:	d108      	bne.n	8012956 <_scanf_float+0x1c6>
 8012944:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012948:	6022      	str	r2, [r4, #0]
 801294a:	f04f 0a01 	mov.w	sl, #1
 801294e:	e7e3      	b.n	8012918 <_scanf_float+0x188>
 8012950:	f1ba 0f02 	cmp.w	sl, #2
 8012954:	d055      	beq.n	8012a02 <_scanf_float+0x272>
 8012956:	2d01      	cmp	r5, #1
 8012958:	d002      	beq.n	8012960 <_scanf_float+0x1d0>
 801295a:	2d04      	cmp	r5, #4
 801295c:	f47f af48 	bne.w	80127f0 <_scanf_float+0x60>
 8012960:	3501      	adds	r5, #1
 8012962:	b2ed      	uxtb	r5, r5
 8012964:	e7d8      	b.n	8012918 <_scanf_float+0x188>
 8012966:	f1ba 0f01 	cmp.w	sl, #1
 801296a:	f47f af41 	bne.w	80127f0 <_scanf_float+0x60>
 801296e:	f04f 0a02 	mov.w	sl, #2
 8012972:	e7d1      	b.n	8012918 <_scanf_float+0x188>
 8012974:	b97d      	cbnz	r5, 8012996 <_scanf_float+0x206>
 8012976:	f1b9 0f00 	cmp.w	r9, #0
 801297a:	f47f af3c 	bne.w	80127f6 <_scanf_float+0x66>
 801297e:	6822      	ldr	r2, [r4, #0]
 8012980:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012984:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012988:	f47f af39 	bne.w	80127fe <_scanf_float+0x6e>
 801298c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012990:	6022      	str	r2, [r4, #0]
 8012992:	2501      	movs	r5, #1
 8012994:	e7c0      	b.n	8012918 <_scanf_float+0x188>
 8012996:	2d03      	cmp	r5, #3
 8012998:	d0e2      	beq.n	8012960 <_scanf_float+0x1d0>
 801299a:	2d05      	cmp	r5, #5
 801299c:	e7de      	b.n	801295c <_scanf_float+0x1cc>
 801299e:	2d02      	cmp	r5, #2
 80129a0:	f47f af26 	bne.w	80127f0 <_scanf_float+0x60>
 80129a4:	2503      	movs	r5, #3
 80129a6:	e7b7      	b.n	8012918 <_scanf_float+0x188>
 80129a8:	2d06      	cmp	r5, #6
 80129aa:	f47f af21 	bne.w	80127f0 <_scanf_float+0x60>
 80129ae:	2507      	movs	r5, #7
 80129b0:	e7b2      	b.n	8012918 <_scanf_float+0x188>
 80129b2:	6822      	ldr	r2, [r4, #0]
 80129b4:	0591      	lsls	r1, r2, #22
 80129b6:	f57f af1b 	bpl.w	80127f0 <_scanf_float+0x60>
 80129ba:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80129be:	6022      	str	r2, [r4, #0]
 80129c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80129c4:	e7a8      	b.n	8012918 <_scanf_float+0x188>
 80129c6:	6822      	ldr	r2, [r4, #0]
 80129c8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80129cc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80129d0:	d006      	beq.n	80129e0 <_scanf_float+0x250>
 80129d2:	0550      	lsls	r0, r2, #21
 80129d4:	f57f af0c 	bpl.w	80127f0 <_scanf_float+0x60>
 80129d8:	f1b9 0f00 	cmp.w	r9, #0
 80129dc:	f43f af0f 	beq.w	80127fe <_scanf_float+0x6e>
 80129e0:	0591      	lsls	r1, r2, #22
 80129e2:	bf58      	it	pl
 80129e4:	9901      	ldrpl	r1, [sp, #4]
 80129e6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80129ea:	bf58      	it	pl
 80129ec:	eba9 0101 	subpl.w	r1, r9, r1
 80129f0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80129f4:	bf58      	it	pl
 80129f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80129fa:	6022      	str	r2, [r4, #0]
 80129fc:	f04f 0900 	mov.w	r9, #0
 8012a00:	e78a      	b.n	8012918 <_scanf_float+0x188>
 8012a02:	f04f 0a03 	mov.w	sl, #3
 8012a06:	e787      	b.n	8012918 <_scanf_float+0x188>
 8012a08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012a0c:	4639      	mov	r1, r7
 8012a0e:	4640      	mov	r0, r8
 8012a10:	4798      	blx	r3
 8012a12:	2800      	cmp	r0, #0
 8012a14:	f43f aedf 	beq.w	80127d6 <_scanf_float+0x46>
 8012a18:	e6ea      	b.n	80127f0 <_scanf_float+0x60>
 8012a1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a22:	463a      	mov	r2, r7
 8012a24:	4640      	mov	r0, r8
 8012a26:	4798      	blx	r3
 8012a28:	6923      	ldr	r3, [r4, #16]
 8012a2a:	3b01      	subs	r3, #1
 8012a2c:	6123      	str	r3, [r4, #16]
 8012a2e:	e6ec      	b.n	801280a <_scanf_float+0x7a>
 8012a30:	1e6b      	subs	r3, r5, #1
 8012a32:	2b06      	cmp	r3, #6
 8012a34:	d825      	bhi.n	8012a82 <_scanf_float+0x2f2>
 8012a36:	2d02      	cmp	r5, #2
 8012a38:	d836      	bhi.n	8012aa8 <_scanf_float+0x318>
 8012a3a:	455e      	cmp	r6, fp
 8012a3c:	f67f aee8 	bls.w	8012810 <_scanf_float+0x80>
 8012a40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a44:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a48:	463a      	mov	r2, r7
 8012a4a:	4640      	mov	r0, r8
 8012a4c:	4798      	blx	r3
 8012a4e:	6923      	ldr	r3, [r4, #16]
 8012a50:	3b01      	subs	r3, #1
 8012a52:	6123      	str	r3, [r4, #16]
 8012a54:	e7f1      	b.n	8012a3a <_scanf_float+0x2aa>
 8012a56:	9802      	ldr	r0, [sp, #8]
 8012a58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a5c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012a60:	9002      	str	r0, [sp, #8]
 8012a62:	463a      	mov	r2, r7
 8012a64:	4640      	mov	r0, r8
 8012a66:	4798      	blx	r3
 8012a68:	6923      	ldr	r3, [r4, #16]
 8012a6a:	3b01      	subs	r3, #1
 8012a6c:	6123      	str	r3, [r4, #16]
 8012a6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a72:	fa5f fa8a 	uxtb.w	sl, sl
 8012a76:	f1ba 0f02 	cmp.w	sl, #2
 8012a7a:	d1ec      	bne.n	8012a56 <_scanf_float+0x2c6>
 8012a7c:	3d03      	subs	r5, #3
 8012a7e:	b2ed      	uxtb	r5, r5
 8012a80:	1b76      	subs	r6, r6, r5
 8012a82:	6823      	ldr	r3, [r4, #0]
 8012a84:	05da      	lsls	r2, r3, #23
 8012a86:	d52f      	bpl.n	8012ae8 <_scanf_float+0x358>
 8012a88:	055b      	lsls	r3, r3, #21
 8012a8a:	d510      	bpl.n	8012aae <_scanf_float+0x31e>
 8012a8c:	455e      	cmp	r6, fp
 8012a8e:	f67f aebf 	bls.w	8012810 <_scanf_float+0x80>
 8012a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012a9a:	463a      	mov	r2, r7
 8012a9c:	4640      	mov	r0, r8
 8012a9e:	4798      	blx	r3
 8012aa0:	6923      	ldr	r3, [r4, #16]
 8012aa2:	3b01      	subs	r3, #1
 8012aa4:	6123      	str	r3, [r4, #16]
 8012aa6:	e7f1      	b.n	8012a8c <_scanf_float+0x2fc>
 8012aa8:	46aa      	mov	sl, r5
 8012aaa:	9602      	str	r6, [sp, #8]
 8012aac:	e7df      	b.n	8012a6e <_scanf_float+0x2de>
 8012aae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012ab2:	6923      	ldr	r3, [r4, #16]
 8012ab4:	2965      	cmp	r1, #101	; 0x65
 8012ab6:	f103 33ff 	add.w	r3, r3, #4294967295
 8012aba:	f106 35ff 	add.w	r5, r6, #4294967295
 8012abe:	6123      	str	r3, [r4, #16]
 8012ac0:	d00c      	beq.n	8012adc <_scanf_float+0x34c>
 8012ac2:	2945      	cmp	r1, #69	; 0x45
 8012ac4:	d00a      	beq.n	8012adc <_scanf_float+0x34c>
 8012ac6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012aca:	463a      	mov	r2, r7
 8012acc:	4640      	mov	r0, r8
 8012ace:	4798      	blx	r3
 8012ad0:	6923      	ldr	r3, [r4, #16]
 8012ad2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012ad6:	3b01      	subs	r3, #1
 8012ad8:	1eb5      	subs	r5, r6, #2
 8012ada:	6123      	str	r3, [r4, #16]
 8012adc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012ae0:	463a      	mov	r2, r7
 8012ae2:	4640      	mov	r0, r8
 8012ae4:	4798      	blx	r3
 8012ae6:	462e      	mov	r6, r5
 8012ae8:	6825      	ldr	r5, [r4, #0]
 8012aea:	f015 0510 	ands.w	r5, r5, #16
 8012aee:	d158      	bne.n	8012ba2 <_scanf_float+0x412>
 8012af0:	7035      	strb	r5, [r6, #0]
 8012af2:	6823      	ldr	r3, [r4, #0]
 8012af4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012afc:	d11c      	bne.n	8012b38 <_scanf_float+0x3a8>
 8012afe:	9b01      	ldr	r3, [sp, #4]
 8012b00:	454b      	cmp	r3, r9
 8012b02:	eba3 0209 	sub.w	r2, r3, r9
 8012b06:	d124      	bne.n	8012b52 <_scanf_float+0x3c2>
 8012b08:	2200      	movs	r2, #0
 8012b0a:	4659      	mov	r1, fp
 8012b0c:	4640      	mov	r0, r8
 8012b0e:	f000 ff25 	bl	801395c <_strtod_r>
 8012b12:	9b03      	ldr	r3, [sp, #12]
 8012b14:	6821      	ldr	r1, [r4, #0]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	f011 0f02 	tst.w	r1, #2
 8012b1c:	ec57 6b10 	vmov	r6, r7, d0
 8012b20:	f103 0204 	add.w	r2, r3, #4
 8012b24:	d020      	beq.n	8012b68 <_scanf_float+0x3d8>
 8012b26:	9903      	ldr	r1, [sp, #12]
 8012b28:	600a      	str	r2, [r1, #0]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	e9c3 6700 	strd	r6, r7, [r3]
 8012b30:	68e3      	ldr	r3, [r4, #12]
 8012b32:	3301      	adds	r3, #1
 8012b34:	60e3      	str	r3, [r4, #12]
 8012b36:	e66c      	b.n	8012812 <_scanf_float+0x82>
 8012b38:	9b04      	ldr	r3, [sp, #16]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d0e4      	beq.n	8012b08 <_scanf_float+0x378>
 8012b3e:	9905      	ldr	r1, [sp, #20]
 8012b40:	230a      	movs	r3, #10
 8012b42:	462a      	mov	r2, r5
 8012b44:	3101      	adds	r1, #1
 8012b46:	4640      	mov	r0, r8
 8012b48:	f000 ff9e 	bl	8013a88 <_strtol_r>
 8012b4c:	9b04      	ldr	r3, [sp, #16]
 8012b4e:	9e05      	ldr	r6, [sp, #20]
 8012b50:	1ac2      	subs	r2, r0, r3
 8012b52:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012b56:	429e      	cmp	r6, r3
 8012b58:	bf28      	it	cs
 8012b5a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012b5e:	4912      	ldr	r1, [pc, #72]	; (8012ba8 <_scanf_float+0x418>)
 8012b60:	4630      	mov	r0, r6
 8012b62:	f000 f82b 	bl	8012bbc <siprintf>
 8012b66:	e7cf      	b.n	8012b08 <_scanf_float+0x378>
 8012b68:	f011 0f04 	tst.w	r1, #4
 8012b6c:	9903      	ldr	r1, [sp, #12]
 8012b6e:	600a      	str	r2, [r1, #0]
 8012b70:	d1db      	bne.n	8012b2a <_scanf_float+0x39a>
 8012b72:	f8d3 8000 	ldr.w	r8, [r3]
 8012b76:	ee10 2a10 	vmov	r2, s0
 8012b7a:	ee10 0a10 	vmov	r0, s0
 8012b7e:	463b      	mov	r3, r7
 8012b80:	4639      	mov	r1, r7
 8012b82:	f7ed ffd3 	bl	8000b2c <__aeabi_dcmpun>
 8012b86:	b128      	cbz	r0, 8012b94 <_scanf_float+0x404>
 8012b88:	4808      	ldr	r0, [pc, #32]	; (8012bac <_scanf_float+0x41c>)
 8012b8a:	f000 f811 	bl	8012bb0 <nanf>
 8012b8e:	ed88 0a00 	vstr	s0, [r8]
 8012b92:	e7cd      	b.n	8012b30 <_scanf_float+0x3a0>
 8012b94:	4630      	mov	r0, r6
 8012b96:	4639      	mov	r1, r7
 8012b98:	f7ee f826 	bl	8000be8 <__aeabi_d2f>
 8012b9c:	f8c8 0000 	str.w	r0, [r8]
 8012ba0:	e7c6      	b.n	8012b30 <_scanf_float+0x3a0>
 8012ba2:	2500      	movs	r5, #0
 8012ba4:	e635      	b.n	8012812 <_scanf_float+0x82>
 8012ba6:	bf00      	nop
 8012ba8:	08018fea 	.word	0x08018fea
 8012bac:	0801947b 	.word	0x0801947b

08012bb0 <nanf>:
 8012bb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012bb8 <nanf+0x8>
 8012bb4:	4770      	bx	lr
 8012bb6:	bf00      	nop
 8012bb8:	7fc00000 	.word	0x7fc00000

08012bbc <siprintf>:
 8012bbc:	b40e      	push	{r1, r2, r3}
 8012bbe:	b500      	push	{lr}
 8012bc0:	b09c      	sub	sp, #112	; 0x70
 8012bc2:	ab1d      	add	r3, sp, #116	; 0x74
 8012bc4:	9002      	str	r0, [sp, #8]
 8012bc6:	9006      	str	r0, [sp, #24]
 8012bc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012bcc:	4809      	ldr	r0, [pc, #36]	; (8012bf4 <siprintf+0x38>)
 8012bce:	9107      	str	r1, [sp, #28]
 8012bd0:	9104      	str	r1, [sp, #16]
 8012bd2:	4909      	ldr	r1, [pc, #36]	; (8012bf8 <siprintf+0x3c>)
 8012bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bd8:	9105      	str	r1, [sp, #20]
 8012bda:	6800      	ldr	r0, [r0, #0]
 8012bdc:	9301      	str	r3, [sp, #4]
 8012bde:	a902      	add	r1, sp, #8
 8012be0:	f003 f864 	bl	8015cac <_svfiprintf_r>
 8012be4:	9b02      	ldr	r3, [sp, #8]
 8012be6:	2200      	movs	r2, #0
 8012be8:	701a      	strb	r2, [r3, #0]
 8012bea:	b01c      	add	sp, #112	; 0x70
 8012bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bf0:	b003      	add	sp, #12
 8012bf2:	4770      	bx	lr
 8012bf4:	2000019c 	.word	0x2000019c
 8012bf8:	ffff0208 	.word	0xffff0208

08012bfc <siscanf>:
 8012bfc:	b40e      	push	{r1, r2, r3}
 8012bfe:	b510      	push	{r4, lr}
 8012c00:	b09f      	sub	sp, #124	; 0x7c
 8012c02:	ac21      	add	r4, sp, #132	; 0x84
 8012c04:	f44f 7101 	mov.w	r1, #516	; 0x204
 8012c08:	f854 2b04 	ldr.w	r2, [r4], #4
 8012c0c:	9201      	str	r2, [sp, #4]
 8012c0e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012c12:	9004      	str	r0, [sp, #16]
 8012c14:	9008      	str	r0, [sp, #32]
 8012c16:	f7ed fadb 	bl	80001d0 <strlen>
 8012c1a:	4b0c      	ldr	r3, [pc, #48]	; (8012c4c <siscanf+0x50>)
 8012c1c:	9005      	str	r0, [sp, #20]
 8012c1e:	9009      	str	r0, [sp, #36]	; 0x24
 8012c20:	930d      	str	r3, [sp, #52]	; 0x34
 8012c22:	480b      	ldr	r0, [pc, #44]	; (8012c50 <siscanf+0x54>)
 8012c24:	9a01      	ldr	r2, [sp, #4]
 8012c26:	6800      	ldr	r0, [r0, #0]
 8012c28:	9403      	str	r4, [sp, #12]
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	9311      	str	r3, [sp, #68]	; 0x44
 8012c2e:	9316      	str	r3, [sp, #88]	; 0x58
 8012c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c34:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012c38:	a904      	add	r1, sp, #16
 8012c3a:	4623      	mov	r3, r4
 8012c3c:	f003 f990 	bl	8015f60 <__ssvfiscanf_r>
 8012c40:	b01f      	add	sp, #124	; 0x7c
 8012c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c46:	b003      	add	sp, #12
 8012c48:	4770      	bx	lr
 8012c4a:	bf00      	nop
 8012c4c:	08012c77 	.word	0x08012c77
 8012c50:	2000019c 	.word	0x2000019c

08012c54 <__sread>:
 8012c54:	b510      	push	{r4, lr}
 8012c56:	460c      	mov	r4, r1
 8012c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c5c:	f003 fc44 	bl	80164e8 <_read_r>
 8012c60:	2800      	cmp	r0, #0
 8012c62:	bfab      	itete	ge
 8012c64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012c66:	89a3      	ldrhlt	r3, [r4, #12]
 8012c68:	181b      	addge	r3, r3, r0
 8012c6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012c6e:	bfac      	ite	ge
 8012c70:	6563      	strge	r3, [r4, #84]	; 0x54
 8012c72:	81a3      	strhlt	r3, [r4, #12]
 8012c74:	bd10      	pop	{r4, pc}

08012c76 <__seofread>:
 8012c76:	2000      	movs	r0, #0
 8012c78:	4770      	bx	lr

08012c7a <__swrite>:
 8012c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c7e:	461f      	mov	r7, r3
 8012c80:	898b      	ldrh	r3, [r1, #12]
 8012c82:	05db      	lsls	r3, r3, #23
 8012c84:	4605      	mov	r5, r0
 8012c86:	460c      	mov	r4, r1
 8012c88:	4616      	mov	r6, r2
 8012c8a:	d505      	bpl.n	8012c98 <__swrite+0x1e>
 8012c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c90:	2302      	movs	r3, #2
 8012c92:	2200      	movs	r2, #0
 8012c94:	f002 fa00 	bl	8015098 <_lseek_r>
 8012c98:	89a3      	ldrh	r3, [r4, #12]
 8012c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ca2:	81a3      	strh	r3, [r4, #12]
 8012ca4:	4632      	mov	r2, r6
 8012ca6:	463b      	mov	r3, r7
 8012ca8:	4628      	mov	r0, r5
 8012caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cae:	f000 beed 	b.w	8013a8c <_write_r>

08012cb2 <__sseek>:
 8012cb2:	b510      	push	{r4, lr}
 8012cb4:	460c      	mov	r4, r1
 8012cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cba:	f002 f9ed 	bl	8015098 <_lseek_r>
 8012cbe:	1c43      	adds	r3, r0, #1
 8012cc0:	89a3      	ldrh	r3, [r4, #12]
 8012cc2:	bf15      	itete	ne
 8012cc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8012cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012cce:	81a3      	strheq	r3, [r4, #12]
 8012cd0:	bf18      	it	ne
 8012cd2:	81a3      	strhne	r3, [r4, #12]
 8012cd4:	bd10      	pop	{r4, pc}

08012cd6 <__sclose>:
 8012cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cda:	f000 bee9 	b.w	8013ab0 <_close_r>

08012cde <strstr>:
 8012cde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ce0:	780c      	ldrb	r4, [r1, #0]
 8012ce2:	b164      	cbz	r4, 8012cfe <strstr+0x20>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	781a      	ldrb	r2, [r3, #0]
 8012ce8:	4618      	mov	r0, r3
 8012cea:	1c5e      	adds	r6, r3, #1
 8012cec:	b90a      	cbnz	r2, 8012cf2 <strstr+0x14>
 8012cee:	4610      	mov	r0, r2
 8012cf0:	e005      	b.n	8012cfe <strstr+0x20>
 8012cf2:	4294      	cmp	r4, r2
 8012cf4:	d108      	bne.n	8012d08 <strstr+0x2a>
 8012cf6:	460d      	mov	r5, r1
 8012cf8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8012cfc:	b902      	cbnz	r2, 8012d00 <strstr+0x22>
 8012cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d00:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8012d04:	4297      	cmp	r7, r2
 8012d06:	d0f7      	beq.n	8012cf8 <strstr+0x1a>
 8012d08:	4633      	mov	r3, r6
 8012d0a:	e7ec      	b.n	8012ce6 <strstr+0x8>

08012d0c <sulp>:
 8012d0c:	b570      	push	{r4, r5, r6, lr}
 8012d0e:	4604      	mov	r4, r0
 8012d10:	460d      	mov	r5, r1
 8012d12:	ec45 4b10 	vmov	d0, r4, r5
 8012d16:	4616      	mov	r6, r2
 8012d18:	f002 fd64 	bl	80157e4 <__ulp>
 8012d1c:	ec51 0b10 	vmov	r0, r1, d0
 8012d20:	b17e      	cbz	r6, 8012d42 <sulp+0x36>
 8012d22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012d26:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	dd09      	ble.n	8012d42 <sulp+0x36>
 8012d2e:	051b      	lsls	r3, r3, #20
 8012d30:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012d34:	2400      	movs	r4, #0
 8012d36:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012d3a:	4622      	mov	r2, r4
 8012d3c:	462b      	mov	r3, r5
 8012d3e:	f7ed fc5b 	bl	80005f8 <__aeabi_dmul>
 8012d42:	bd70      	pop	{r4, r5, r6, pc}
 8012d44:	0000      	movs	r0, r0
	...

08012d48 <_strtod_l>:
 8012d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d4c:	b0a3      	sub	sp, #140	; 0x8c
 8012d4e:	461f      	mov	r7, r3
 8012d50:	2300      	movs	r3, #0
 8012d52:	931e      	str	r3, [sp, #120]	; 0x78
 8012d54:	4ba4      	ldr	r3, [pc, #656]	; (8012fe8 <_strtod_l+0x2a0>)
 8012d56:	9219      	str	r2, [sp, #100]	; 0x64
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	9307      	str	r3, [sp, #28]
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	4618      	mov	r0, r3
 8012d60:	4688      	mov	r8, r1
 8012d62:	f7ed fa35 	bl	80001d0 <strlen>
 8012d66:	f04f 0a00 	mov.w	sl, #0
 8012d6a:	4605      	mov	r5, r0
 8012d6c:	f04f 0b00 	mov.w	fp, #0
 8012d70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012d74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012d76:	781a      	ldrb	r2, [r3, #0]
 8012d78:	2a2b      	cmp	r2, #43	; 0x2b
 8012d7a:	d04c      	beq.n	8012e16 <_strtod_l+0xce>
 8012d7c:	d839      	bhi.n	8012df2 <_strtod_l+0xaa>
 8012d7e:	2a0d      	cmp	r2, #13
 8012d80:	d832      	bhi.n	8012de8 <_strtod_l+0xa0>
 8012d82:	2a08      	cmp	r2, #8
 8012d84:	d832      	bhi.n	8012dec <_strtod_l+0xa4>
 8012d86:	2a00      	cmp	r2, #0
 8012d88:	d03c      	beq.n	8012e04 <_strtod_l+0xbc>
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	930e      	str	r3, [sp, #56]	; 0x38
 8012d8e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012d90:	7833      	ldrb	r3, [r6, #0]
 8012d92:	2b30      	cmp	r3, #48	; 0x30
 8012d94:	f040 80b4 	bne.w	8012f00 <_strtod_l+0x1b8>
 8012d98:	7873      	ldrb	r3, [r6, #1]
 8012d9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012d9e:	2b58      	cmp	r3, #88	; 0x58
 8012da0:	d16c      	bne.n	8012e7c <_strtod_l+0x134>
 8012da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012da4:	9301      	str	r3, [sp, #4]
 8012da6:	ab1e      	add	r3, sp, #120	; 0x78
 8012da8:	9702      	str	r7, [sp, #8]
 8012daa:	9300      	str	r3, [sp, #0]
 8012dac:	4a8f      	ldr	r2, [pc, #572]	; (8012fec <_strtod_l+0x2a4>)
 8012dae:	ab1f      	add	r3, sp, #124	; 0x7c
 8012db0:	a91d      	add	r1, sp, #116	; 0x74
 8012db2:	4620      	mov	r0, r4
 8012db4:	f001 fe60 	bl	8014a78 <__gethex>
 8012db8:	f010 0707 	ands.w	r7, r0, #7
 8012dbc:	4605      	mov	r5, r0
 8012dbe:	d005      	beq.n	8012dcc <_strtod_l+0x84>
 8012dc0:	2f06      	cmp	r7, #6
 8012dc2:	d12a      	bne.n	8012e1a <_strtod_l+0xd2>
 8012dc4:	3601      	adds	r6, #1
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	961d      	str	r6, [sp, #116]	; 0x74
 8012dca:	930e      	str	r3, [sp, #56]	; 0x38
 8012dcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	f040 8596 	bne.w	8013900 <_strtod_l+0xbb8>
 8012dd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012dd6:	b1db      	cbz	r3, 8012e10 <_strtod_l+0xc8>
 8012dd8:	4652      	mov	r2, sl
 8012dda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012dde:	ec43 2b10 	vmov	d0, r2, r3
 8012de2:	b023      	add	sp, #140	; 0x8c
 8012de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012de8:	2a20      	cmp	r2, #32
 8012dea:	d1ce      	bne.n	8012d8a <_strtod_l+0x42>
 8012dec:	3301      	adds	r3, #1
 8012dee:	931d      	str	r3, [sp, #116]	; 0x74
 8012df0:	e7c0      	b.n	8012d74 <_strtod_l+0x2c>
 8012df2:	2a2d      	cmp	r2, #45	; 0x2d
 8012df4:	d1c9      	bne.n	8012d8a <_strtod_l+0x42>
 8012df6:	2201      	movs	r2, #1
 8012df8:	920e      	str	r2, [sp, #56]	; 0x38
 8012dfa:	1c5a      	adds	r2, r3, #1
 8012dfc:	921d      	str	r2, [sp, #116]	; 0x74
 8012dfe:	785b      	ldrb	r3, [r3, #1]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d1c4      	bne.n	8012d8e <_strtod_l+0x46>
 8012e04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012e06:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	f040 8576 	bne.w	80138fc <_strtod_l+0xbb4>
 8012e10:	4652      	mov	r2, sl
 8012e12:	465b      	mov	r3, fp
 8012e14:	e7e3      	b.n	8012dde <_strtod_l+0x96>
 8012e16:	2200      	movs	r2, #0
 8012e18:	e7ee      	b.n	8012df8 <_strtod_l+0xb0>
 8012e1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012e1c:	b13a      	cbz	r2, 8012e2e <_strtod_l+0xe6>
 8012e1e:	2135      	movs	r1, #53	; 0x35
 8012e20:	a820      	add	r0, sp, #128	; 0x80
 8012e22:	f002 fdea 	bl	80159fa <__copybits>
 8012e26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012e28:	4620      	mov	r0, r4
 8012e2a:	f002 f9af 	bl	801518c <_Bfree>
 8012e2e:	3f01      	subs	r7, #1
 8012e30:	2f05      	cmp	r7, #5
 8012e32:	d807      	bhi.n	8012e44 <_strtod_l+0xfc>
 8012e34:	e8df f007 	tbb	[pc, r7]
 8012e38:	1d180b0e 	.word	0x1d180b0e
 8012e3c:	030e      	.short	0x030e
 8012e3e:	f04f 0b00 	mov.w	fp, #0
 8012e42:	46da      	mov	sl, fp
 8012e44:	0728      	lsls	r0, r5, #28
 8012e46:	d5c1      	bpl.n	8012dcc <_strtod_l+0x84>
 8012e48:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012e4c:	e7be      	b.n	8012dcc <_strtod_l+0x84>
 8012e4e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8012e52:	e7f7      	b.n	8012e44 <_strtod_l+0xfc>
 8012e54:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8012e58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012e5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012e5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012e62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012e66:	e7ed      	b.n	8012e44 <_strtod_l+0xfc>
 8012e68:	f8df b184 	ldr.w	fp, [pc, #388]	; 8012ff0 <_strtod_l+0x2a8>
 8012e6c:	f04f 0a00 	mov.w	sl, #0
 8012e70:	e7e8      	b.n	8012e44 <_strtod_l+0xfc>
 8012e72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012e76:	f04f 3aff 	mov.w	sl, #4294967295
 8012e7a:	e7e3      	b.n	8012e44 <_strtod_l+0xfc>
 8012e7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e7e:	1c5a      	adds	r2, r3, #1
 8012e80:	921d      	str	r2, [sp, #116]	; 0x74
 8012e82:	785b      	ldrb	r3, [r3, #1]
 8012e84:	2b30      	cmp	r3, #48	; 0x30
 8012e86:	d0f9      	beq.n	8012e7c <_strtod_l+0x134>
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d09f      	beq.n	8012dcc <_strtod_l+0x84>
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	f04f 0900 	mov.w	r9, #0
 8012e92:	9304      	str	r3, [sp, #16]
 8012e94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012e96:	930a      	str	r3, [sp, #40]	; 0x28
 8012e98:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012e9c:	464f      	mov	r7, r9
 8012e9e:	220a      	movs	r2, #10
 8012ea0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8012ea2:	7806      	ldrb	r6, [r0, #0]
 8012ea4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012ea8:	b2d9      	uxtb	r1, r3
 8012eaa:	2909      	cmp	r1, #9
 8012eac:	d92a      	bls.n	8012f04 <_strtod_l+0x1bc>
 8012eae:	9907      	ldr	r1, [sp, #28]
 8012eb0:	462a      	mov	r2, r5
 8012eb2:	f003 fb7f 	bl	80165b4 <strncmp>
 8012eb6:	b398      	cbz	r0, 8012f20 <_strtod_l+0x1d8>
 8012eb8:	2000      	movs	r0, #0
 8012eba:	4633      	mov	r3, r6
 8012ebc:	463d      	mov	r5, r7
 8012ebe:	9007      	str	r0, [sp, #28]
 8012ec0:	4602      	mov	r2, r0
 8012ec2:	2b65      	cmp	r3, #101	; 0x65
 8012ec4:	d001      	beq.n	8012eca <_strtod_l+0x182>
 8012ec6:	2b45      	cmp	r3, #69	; 0x45
 8012ec8:	d118      	bne.n	8012efc <_strtod_l+0x1b4>
 8012eca:	b91d      	cbnz	r5, 8012ed4 <_strtod_l+0x18c>
 8012ecc:	9b04      	ldr	r3, [sp, #16]
 8012ece:	4303      	orrs	r3, r0
 8012ed0:	d098      	beq.n	8012e04 <_strtod_l+0xbc>
 8012ed2:	2500      	movs	r5, #0
 8012ed4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8012ed8:	f108 0301 	add.w	r3, r8, #1
 8012edc:	931d      	str	r3, [sp, #116]	; 0x74
 8012ede:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012ee2:	2b2b      	cmp	r3, #43	; 0x2b
 8012ee4:	d075      	beq.n	8012fd2 <_strtod_l+0x28a>
 8012ee6:	2b2d      	cmp	r3, #45	; 0x2d
 8012ee8:	d07b      	beq.n	8012fe2 <_strtod_l+0x29a>
 8012eea:	f04f 0c00 	mov.w	ip, #0
 8012eee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012ef2:	2909      	cmp	r1, #9
 8012ef4:	f240 8082 	bls.w	8012ffc <_strtod_l+0x2b4>
 8012ef8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012efc:	2600      	movs	r6, #0
 8012efe:	e09d      	b.n	801303c <_strtod_l+0x2f4>
 8012f00:	2300      	movs	r3, #0
 8012f02:	e7c4      	b.n	8012e8e <_strtod_l+0x146>
 8012f04:	2f08      	cmp	r7, #8
 8012f06:	bfd8      	it	le
 8012f08:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012f0a:	f100 0001 	add.w	r0, r0, #1
 8012f0e:	bfda      	itte	le
 8012f10:	fb02 3301 	mlale	r3, r2, r1, r3
 8012f14:	9309      	strle	r3, [sp, #36]	; 0x24
 8012f16:	fb02 3909 	mlagt	r9, r2, r9, r3
 8012f1a:	3701      	adds	r7, #1
 8012f1c:	901d      	str	r0, [sp, #116]	; 0x74
 8012f1e:	e7bf      	b.n	8012ea0 <_strtod_l+0x158>
 8012f20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f22:	195a      	adds	r2, r3, r5
 8012f24:	921d      	str	r2, [sp, #116]	; 0x74
 8012f26:	5d5b      	ldrb	r3, [r3, r5]
 8012f28:	2f00      	cmp	r7, #0
 8012f2a:	d037      	beq.n	8012f9c <_strtod_l+0x254>
 8012f2c:	9007      	str	r0, [sp, #28]
 8012f2e:	463d      	mov	r5, r7
 8012f30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012f34:	2a09      	cmp	r2, #9
 8012f36:	d912      	bls.n	8012f5e <_strtod_l+0x216>
 8012f38:	2201      	movs	r2, #1
 8012f3a:	e7c2      	b.n	8012ec2 <_strtod_l+0x17a>
 8012f3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f3e:	1c5a      	adds	r2, r3, #1
 8012f40:	921d      	str	r2, [sp, #116]	; 0x74
 8012f42:	785b      	ldrb	r3, [r3, #1]
 8012f44:	3001      	adds	r0, #1
 8012f46:	2b30      	cmp	r3, #48	; 0x30
 8012f48:	d0f8      	beq.n	8012f3c <_strtod_l+0x1f4>
 8012f4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012f4e:	2a08      	cmp	r2, #8
 8012f50:	f200 84db 	bhi.w	801390a <_strtod_l+0xbc2>
 8012f54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012f56:	9007      	str	r0, [sp, #28]
 8012f58:	2000      	movs	r0, #0
 8012f5a:	920a      	str	r2, [sp, #40]	; 0x28
 8012f5c:	4605      	mov	r5, r0
 8012f5e:	3b30      	subs	r3, #48	; 0x30
 8012f60:	f100 0201 	add.w	r2, r0, #1
 8012f64:	d014      	beq.n	8012f90 <_strtod_l+0x248>
 8012f66:	9907      	ldr	r1, [sp, #28]
 8012f68:	4411      	add	r1, r2
 8012f6a:	9107      	str	r1, [sp, #28]
 8012f6c:	462a      	mov	r2, r5
 8012f6e:	eb00 0e05 	add.w	lr, r0, r5
 8012f72:	210a      	movs	r1, #10
 8012f74:	4572      	cmp	r2, lr
 8012f76:	d113      	bne.n	8012fa0 <_strtod_l+0x258>
 8012f78:	182a      	adds	r2, r5, r0
 8012f7a:	2a08      	cmp	r2, #8
 8012f7c:	f105 0501 	add.w	r5, r5, #1
 8012f80:	4405      	add	r5, r0
 8012f82:	dc1c      	bgt.n	8012fbe <_strtod_l+0x276>
 8012f84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f86:	220a      	movs	r2, #10
 8012f88:	fb02 3301 	mla	r3, r2, r1, r3
 8012f8c:	9309      	str	r3, [sp, #36]	; 0x24
 8012f8e:	2200      	movs	r2, #0
 8012f90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012f92:	1c59      	adds	r1, r3, #1
 8012f94:	911d      	str	r1, [sp, #116]	; 0x74
 8012f96:	785b      	ldrb	r3, [r3, #1]
 8012f98:	4610      	mov	r0, r2
 8012f9a:	e7c9      	b.n	8012f30 <_strtod_l+0x1e8>
 8012f9c:	4638      	mov	r0, r7
 8012f9e:	e7d2      	b.n	8012f46 <_strtod_l+0x1fe>
 8012fa0:	2a08      	cmp	r2, #8
 8012fa2:	dc04      	bgt.n	8012fae <_strtod_l+0x266>
 8012fa4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012fa6:	434e      	muls	r6, r1
 8012fa8:	9609      	str	r6, [sp, #36]	; 0x24
 8012faa:	3201      	adds	r2, #1
 8012fac:	e7e2      	b.n	8012f74 <_strtod_l+0x22c>
 8012fae:	f102 0c01 	add.w	ip, r2, #1
 8012fb2:	f1bc 0f10 	cmp.w	ip, #16
 8012fb6:	bfd8      	it	le
 8012fb8:	fb01 f909 	mulle.w	r9, r1, r9
 8012fbc:	e7f5      	b.n	8012faa <_strtod_l+0x262>
 8012fbe:	2d10      	cmp	r5, #16
 8012fc0:	bfdc      	itt	le
 8012fc2:	220a      	movle	r2, #10
 8012fc4:	fb02 3909 	mlale	r9, r2, r9, r3
 8012fc8:	e7e1      	b.n	8012f8e <_strtod_l+0x246>
 8012fca:	2300      	movs	r3, #0
 8012fcc:	9307      	str	r3, [sp, #28]
 8012fce:	2201      	movs	r2, #1
 8012fd0:	e77c      	b.n	8012ecc <_strtod_l+0x184>
 8012fd2:	f04f 0c00 	mov.w	ip, #0
 8012fd6:	f108 0302 	add.w	r3, r8, #2
 8012fda:	931d      	str	r3, [sp, #116]	; 0x74
 8012fdc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012fe0:	e785      	b.n	8012eee <_strtod_l+0x1a6>
 8012fe2:	f04f 0c01 	mov.w	ip, #1
 8012fe6:	e7f6      	b.n	8012fd6 <_strtod_l+0x28e>
 8012fe8:	080192a4 	.word	0x080192a4
 8012fec:	08018ff0 	.word	0x08018ff0
 8012ff0:	7ff00000 	.word	0x7ff00000
 8012ff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012ff6:	1c59      	adds	r1, r3, #1
 8012ff8:	911d      	str	r1, [sp, #116]	; 0x74
 8012ffa:	785b      	ldrb	r3, [r3, #1]
 8012ffc:	2b30      	cmp	r3, #48	; 0x30
 8012ffe:	d0f9      	beq.n	8012ff4 <_strtod_l+0x2ac>
 8013000:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8013004:	2908      	cmp	r1, #8
 8013006:	f63f af79 	bhi.w	8012efc <_strtod_l+0x1b4>
 801300a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801300e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013010:	9308      	str	r3, [sp, #32]
 8013012:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013014:	1c59      	adds	r1, r3, #1
 8013016:	911d      	str	r1, [sp, #116]	; 0x74
 8013018:	785b      	ldrb	r3, [r3, #1]
 801301a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801301e:	2e09      	cmp	r6, #9
 8013020:	d937      	bls.n	8013092 <_strtod_l+0x34a>
 8013022:	9e08      	ldr	r6, [sp, #32]
 8013024:	1b89      	subs	r1, r1, r6
 8013026:	2908      	cmp	r1, #8
 8013028:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801302c:	dc02      	bgt.n	8013034 <_strtod_l+0x2ec>
 801302e:	4576      	cmp	r6, lr
 8013030:	bfa8      	it	ge
 8013032:	4676      	movge	r6, lr
 8013034:	f1bc 0f00 	cmp.w	ip, #0
 8013038:	d000      	beq.n	801303c <_strtod_l+0x2f4>
 801303a:	4276      	negs	r6, r6
 801303c:	2d00      	cmp	r5, #0
 801303e:	d14f      	bne.n	80130e0 <_strtod_l+0x398>
 8013040:	9904      	ldr	r1, [sp, #16]
 8013042:	4301      	orrs	r1, r0
 8013044:	f47f aec2 	bne.w	8012dcc <_strtod_l+0x84>
 8013048:	2a00      	cmp	r2, #0
 801304a:	f47f aedb 	bne.w	8012e04 <_strtod_l+0xbc>
 801304e:	2b69      	cmp	r3, #105	; 0x69
 8013050:	d027      	beq.n	80130a2 <_strtod_l+0x35a>
 8013052:	dc24      	bgt.n	801309e <_strtod_l+0x356>
 8013054:	2b49      	cmp	r3, #73	; 0x49
 8013056:	d024      	beq.n	80130a2 <_strtod_l+0x35a>
 8013058:	2b4e      	cmp	r3, #78	; 0x4e
 801305a:	f47f aed3 	bne.w	8012e04 <_strtod_l+0xbc>
 801305e:	499e      	ldr	r1, [pc, #632]	; (80132d8 <_strtod_l+0x590>)
 8013060:	a81d      	add	r0, sp, #116	; 0x74
 8013062:	f001 ff61 	bl	8014f28 <__match>
 8013066:	2800      	cmp	r0, #0
 8013068:	f43f aecc 	beq.w	8012e04 <_strtod_l+0xbc>
 801306c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	2b28      	cmp	r3, #40	; 0x28
 8013072:	d12d      	bne.n	80130d0 <_strtod_l+0x388>
 8013074:	4999      	ldr	r1, [pc, #612]	; (80132dc <_strtod_l+0x594>)
 8013076:	aa20      	add	r2, sp, #128	; 0x80
 8013078:	a81d      	add	r0, sp, #116	; 0x74
 801307a:	f001 ff69 	bl	8014f50 <__hexnan>
 801307e:	2805      	cmp	r0, #5
 8013080:	d126      	bne.n	80130d0 <_strtod_l+0x388>
 8013082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013084:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8013088:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801308c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013090:	e69c      	b.n	8012dcc <_strtod_l+0x84>
 8013092:	210a      	movs	r1, #10
 8013094:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013098:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801309c:	e7b9      	b.n	8013012 <_strtod_l+0x2ca>
 801309e:	2b6e      	cmp	r3, #110	; 0x6e
 80130a0:	e7db      	b.n	801305a <_strtod_l+0x312>
 80130a2:	498f      	ldr	r1, [pc, #572]	; (80132e0 <_strtod_l+0x598>)
 80130a4:	a81d      	add	r0, sp, #116	; 0x74
 80130a6:	f001 ff3f 	bl	8014f28 <__match>
 80130aa:	2800      	cmp	r0, #0
 80130ac:	f43f aeaa 	beq.w	8012e04 <_strtod_l+0xbc>
 80130b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80130b2:	498c      	ldr	r1, [pc, #560]	; (80132e4 <_strtod_l+0x59c>)
 80130b4:	3b01      	subs	r3, #1
 80130b6:	a81d      	add	r0, sp, #116	; 0x74
 80130b8:	931d      	str	r3, [sp, #116]	; 0x74
 80130ba:	f001 ff35 	bl	8014f28 <__match>
 80130be:	b910      	cbnz	r0, 80130c6 <_strtod_l+0x37e>
 80130c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80130c2:	3301      	adds	r3, #1
 80130c4:	931d      	str	r3, [sp, #116]	; 0x74
 80130c6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80132f4 <_strtod_l+0x5ac>
 80130ca:	f04f 0a00 	mov.w	sl, #0
 80130ce:	e67d      	b.n	8012dcc <_strtod_l+0x84>
 80130d0:	4885      	ldr	r0, [pc, #532]	; (80132e8 <_strtod_l+0x5a0>)
 80130d2:	f003 fa1d 	bl	8016510 <nan>
 80130d6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80130da:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80130de:	e675      	b.n	8012dcc <_strtod_l+0x84>
 80130e0:	9b07      	ldr	r3, [sp, #28]
 80130e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130e4:	1af3      	subs	r3, r6, r3
 80130e6:	2f00      	cmp	r7, #0
 80130e8:	bf08      	it	eq
 80130ea:	462f      	moveq	r7, r5
 80130ec:	2d10      	cmp	r5, #16
 80130ee:	9308      	str	r3, [sp, #32]
 80130f0:	46a8      	mov	r8, r5
 80130f2:	bfa8      	it	ge
 80130f4:	f04f 0810 	movge.w	r8, #16
 80130f8:	f7ed fa04 	bl	8000504 <__aeabi_ui2d>
 80130fc:	2d09      	cmp	r5, #9
 80130fe:	4682      	mov	sl, r0
 8013100:	468b      	mov	fp, r1
 8013102:	dd13      	ble.n	801312c <_strtod_l+0x3e4>
 8013104:	4b79      	ldr	r3, [pc, #484]	; (80132ec <_strtod_l+0x5a4>)
 8013106:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801310a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801310e:	f7ed fa73 	bl	80005f8 <__aeabi_dmul>
 8013112:	4682      	mov	sl, r0
 8013114:	4648      	mov	r0, r9
 8013116:	468b      	mov	fp, r1
 8013118:	f7ed f9f4 	bl	8000504 <__aeabi_ui2d>
 801311c:	4602      	mov	r2, r0
 801311e:	460b      	mov	r3, r1
 8013120:	4650      	mov	r0, sl
 8013122:	4659      	mov	r1, fp
 8013124:	f7ed f8b2 	bl	800028c <__adddf3>
 8013128:	4682      	mov	sl, r0
 801312a:	468b      	mov	fp, r1
 801312c:	2d0f      	cmp	r5, #15
 801312e:	dc38      	bgt.n	80131a2 <_strtod_l+0x45a>
 8013130:	9b08      	ldr	r3, [sp, #32]
 8013132:	2b00      	cmp	r3, #0
 8013134:	f43f ae4a 	beq.w	8012dcc <_strtod_l+0x84>
 8013138:	dd24      	ble.n	8013184 <_strtod_l+0x43c>
 801313a:	2b16      	cmp	r3, #22
 801313c:	dc0b      	bgt.n	8013156 <_strtod_l+0x40e>
 801313e:	4d6b      	ldr	r5, [pc, #428]	; (80132ec <_strtod_l+0x5a4>)
 8013140:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8013144:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013148:	4652      	mov	r2, sl
 801314a:	465b      	mov	r3, fp
 801314c:	f7ed fa54 	bl	80005f8 <__aeabi_dmul>
 8013150:	4682      	mov	sl, r0
 8013152:	468b      	mov	fp, r1
 8013154:	e63a      	b.n	8012dcc <_strtod_l+0x84>
 8013156:	9a08      	ldr	r2, [sp, #32]
 8013158:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801315c:	4293      	cmp	r3, r2
 801315e:	db20      	blt.n	80131a2 <_strtod_l+0x45a>
 8013160:	4c62      	ldr	r4, [pc, #392]	; (80132ec <_strtod_l+0x5a4>)
 8013162:	f1c5 050f 	rsb	r5, r5, #15
 8013166:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801316a:	4652      	mov	r2, sl
 801316c:	465b      	mov	r3, fp
 801316e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013172:	f7ed fa41 	bl	80005f8 <__aeabi_dmul>
 8013176:	9b08      	ldr	r3, [sp, #32]
 8013178:	1b5d      	subs	r5, r3, r5
 801317a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801317e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013182:	e7e3      	b.n	801314c <_strtod_l+0x404>
 8013184:	9b08      	ldr	r3, [sp, #32]
 8013186:	3316      	adds	r3, #22
 8013188:	db0b      	blt.n	80131a2 <_strtod_l+0x45a>
 801318a:	9b07      	ldr	r3, [sp, #28]
 801318c:	4a57      	ldr	r2, [pc, #348]	; (80132ec <_strtod_l+0x5a4>)
 801318e:	1b9e      	subs	r6, r3, r6
 8013190:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8013194:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013198:	4650      	mov	r0, sl
 801319a:	4659      	mov	r1, fp
 801319c:	f7ed fb56 	bl	800084c <__aeabi_ddiv>
 80131a0:	e7d6      	b.n	8013150 <_strtod_l+0x408>
 80131a2:	9b08      	ldr	r3, [sp, #32]
 80131a4:	eba5 0808 	sub.w	r8, r5, r8
 80131a8:	4498      	add	r8, r3
 80131aa:	f1b8 0f00 	cmp.w	r8, #0
 80131ae:	dd71      	ble.n	8013294 <_strtod_l+0x54c>
 80131b0:	f018 030f 	ands.w	r3, r8, #15
 80131b4:	d00a      	beq.n	80131cc <_strtod_l+0x484>
 80131b6:	494d      	ldr	r1, [pc, #308]	; (80132ec <_strtod_l+0x5a4>)
 80131b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80131bc:	4652      	mov	r2, sl
 80131be:	465b      	mov	r3, fp
 80131c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131c4:	f7ed fa18 	bl	80005f8 <__aeabi_dmul>
 80131c8:	4682      	mov	sl, r0
 80131ca:	468b      	mov	fp, r1
 80131cc:	f038 080f 	bics.w	r8, r8, #15
 80131d0:	d04d      	beq.n	801326e <_strtod_l+0x526>
 80131d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80131d6:	dd22      	ble.n	801321e <_strtod_l+0x4d6>
 80131d8:	2500      	movs	r5, #0
 80131da:	462e      	mov	r6, r5
 80131dc:	9509      	str	r5, [sp, #36]	; 0x24
 80131de:	9507      	str	r5, [sp, #28]
 80131e0:	2322      	movs	r3, #34	; 0x22
 80131e2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80132f4 <_strtod_l+0x5ac>
 80131e6:	6023      	str	r3, [r4, #0]
 80131e8:	f04f 0a00 	mov.w	sl, #0
 80131ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	f43f adec 	beq.w	8012dcc <_strtod_l+0x84>
 80131f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80131f6:	4620      	mov	r0, r4
 80131f8:	f001 ffc8 	bl	801518c <_Bfree>
 80131fc:	9907      	ldr	r1, [sp, #28]
 80131fe:	4620      	mov	r0, r4
 8013200:	f001 ffc4 	bl	801518c <_Bfree>
 8013204:	4631      	mov	r1, r6
 8013206:	4620      	mov	r0, r4
 8013208:	f001 ffc0 	bl	801518c <_Bfree>
 801320c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801320e:	4620      	mov	r0, r4
 8013210:	f001 ffbc 	bl	801518c <_Bfree>
 8013214:	4629      	mov	r1, r5
 8013216:	4620      	mov	r0, r4
 8013218:	f001 ffb8 	bl	801518c <_Bfree>
 801321c:	e5d6      	b.n	8012dcc <_strtod_l+0x84>
 801321e:	2300      	movs	r3, #0
 8013220:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013224:	4650      	mov	r0, sl
 8013226:	4659      	mov	r1, fp
 8013228:	4699      	mov	r9, r3
 801322a:	f1b8 0f01 	cmp.w	r8, #1
 801322e:	dc21      	bgt.n	8013274 <_strtod_l+0x52c>
 8013230:	b10b      	cbz	r3, 8013236 <_strtod_l+0x4ee>
 8013232:	4682      	mov	sl, r0
 8013234:	468b      	mov	fp, r1
 8013236:	4b2e      	ldr	r3, [pc, #184]	; (80132f0 <_strtod_l+0x5a8>)
 8013238:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801323c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013240:	4652      	mov	r2, sl
 8013242:	465b      	mov	r3, fp
 8013244:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013248:	f7ed f9d6 	bl	80005f8 <__aeabi_dmul>
 801324c:	4b29      	ldr	r3, [pc, #164]	; (80132f4 <_strtod_l+0x5ac>)
 801324e:	460a      	mov	r2, r1
 8013250:	400b      	ands	r3, r1
 8013252:	4929      	ldr	r1, [pc, #164]	; (80132f8 <_strtod_l+0x5b0>)
 8013254:	428b      	cmp	r3, r1
 8013256:	4682      	mov	sl, r0
 8013258:	d8be      	bhi.n	80131d8 <_strtod_l+0x490>
 801325a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801325e:	428b      	cmp	r3, r1
 8013260:	bf86      	itte	hi
 8013262:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80132fc <_strtod_l+0x5b4>
 8013266:	f04f 3aff 	movhi.w	sl, #4294967295
 801326a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801326e:	2300      	movs	r3, #0
 8013270:	9304      	str	r3, [sp, #16]
 8013272:	e081      	b.n	8013378 <_strtod_l+0x630>
 8013274:	f018 0f01 	tst.w	r8, #1
 8013278:	d007      	beq.n	801328a <_strtod_l+0x542>
 801327a:	4b1d      	ldr	r3, [pc, #116]	; (80132f0 <_strtod_l+0x5a8>)
 801327c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013284:	f7ed f9b8 	bl	80005f8 <__aeabi_dmul>
 8013288:	2301      	movs	r3, #1
 801328a:	f109 0901 	add.w	r9, r9, #1
 801328e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013292:	e7ca      	b.n	801322a <_strtod_l+0x4e2>
 8013294:	d0eb      	beq.n	801326e <_strtod_l+0x526>
 8013296:	f1c8 0800 	rsb	r8, r8, #0
 801329a:	f018 020f 	ands.w	r2, r8, #15
 801329e:	d00a      	beq.n	80132b6 <_strtod_l+0x56e>
 80132a0:	4b12      	ldr	r3, [pc, #72]	; (80132ec <_strtod_l+0x5a4>)
 80132a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132a6:	4650      	mov	r0, sl
 80132a8:	4659      	mov	r1, fp
 80132aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ae:	f7ed facd 	bl	800084c <__aeabi_ddiv>
 80132b2:	4682      	mov	sl, r0
 80132b4:	468b      	mov	fp, r1
 80132b6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80132ba:	d0d8      	beq.n	801326e <_strtod_l+0x526>
 80132bc:	f1b8 0f1f 	cmp.w	r8, #31
 80132c0:	dd1e      	ble.n	8013300 <_strtod_l+0x5b8>
 80132c2:	2500      	movs	r5, #0
 80132c4:	462e      	mov	r6, r5
 80132c6:	9509      	str	r5, [sp, #36]	; 0x24
 80132c8:	9507      	str	r5, [sp, #28]
 80132ca:	2322      	movs	r3, #34	; 0x22
 80132cc:	f04f 0a00 	mov.w	sl, #0
 80132d0:	f04f 0b00 	mov.w	fp, #0
 80132d4:	6023      	str	r3, [r4, #0]
 80132d6:	e789      	b.n	80131ec <_strtod_l+0x4a4>
 80132d8:	08018fc5 	.word	0x08018fc5
 80132dc:	08019004 	.word	0x08019004
 80132e0:	08018fbd 	.word	0x08018fbd
 80132e4:	08019144 	.word	0x08019144
 80132e8:	0801947b 	.word	0x0801947b
 80132ec:	08019340 	.word	0x08019340
 80132f0:	08019318 	.word	0x08019318
 80132f4:	7ff00000 	.word	0x7ff00000
 80132f8:	7ca00000 	.word	0x7ca00000
 80132fc:	7fefffff 	.word	0x7fefffff
 8013300:	f018 0310 	ands.w	r3, r8, #16
 8013304:	bf18      	it	ne
 8013306:	236a      	movne	r3, #106	; 0x6a
 8013308:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80136c0 <_strtod_l+0x978>
 801330c:	9304      	str	r3, [sp, #16]
 801330e:	4650      	mov	r0, sl
 8013310:	4659      	mov	r1, fp
 8013312:	2300      	movs	r3, #0
 8013314:	f018 0f01 	tst.w	r8, #1
 8013318:	d004      	beq.n	8013324 <_strtod_l+0x5dc>
 801331a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801331e:	f7ed f96b 	bl	80005f8 <__aeabi_dmul>
 8013322:	2301      	movs	r3, #1
 8013324:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013328:	f109 0908 	add.w	r9, r9, #8
 801332c:	d1f2      	bne.n	8013314 <_strtod_l+0x5cc>
 801332e:	b10b      	cbz	r3, 8013334 <_strtod_l+0x5ec>
 8013330:	4682      	mov	sl, r0
 8013332:	468b      	mov	fp, r1
 8013334:	9b04      	ldr	r3, [sp, #16]
 8013336:	b1bb      	cbz	r3, 8013368 <_strtod_l+0x620>
 8013338:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801333c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013340:	2b00      	cmp	r3, #0
 8013342:	4659      	mov	r1, fp
 8013344:	dd10      	ble.n	8013368 <_strtod_l+0x620>
 8013346:	2b1f      	cmp	r3, #31
 8013348:	f340 8128 	ble.w	801359c <_strtod_l+0x854>
 801334c:	2b34      	cmp	r3, #52	; 0x34
 801334e:	bfde      	ittt	le
 8013350:	3b20      	suble	r3, #32
 8013352:	f04f 32ff 	movle.w	r2, #4294967295
 8013356:	fa02 f303 	lslle.w	r3, r2, r3
 801335a:	f04f 0a00 	mov.w	sl, #0
 801335e:	bfcc      	ite	gt
 8013360:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013364:	ea03 0b01 	andle.w	fp, r3, r1
 8013368:	2200      	movs	r2, #0
 801336a:	2300      	movs	r3, #0
 801336c:	4650      	mov	r0, sl
 801336e:	4659      	mov	r1, fp
 8013370:	f7ed fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8013374:	2800      	cmp	r0, #0
 8013376:	d1a4      	bne.n	80132c2 <_strtod_l+0x57a>
 8013378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801337a:	9300      	str	r3, [sp, #0]
 801337c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801337e:	462b      	mov	r3, r5
 8013380:	463a      	mov	r2, r7
 8013382:	4620      	mov	r0, r4
 8013384:	f001 ff6e 	bl	8015264 <__s2b>
 8013388:	9009      	str	r0, [sp, #36]	; 0x24
 801338a:	2800      	cmp	r0, #0
 801338c:	f43f af24 	beq.w	80131d8 <_strtod_l+0x490>
 8013390:	9b07      	ldr	r3, [sp, #28]
 8013392:	1b9e      	subs	r6, r3, r6
 8013394:	9b08      	ldr	r3, [sp, #32]
 8013396:	2b00      	cmp	r3, #0
 8013398:	bfb4      	ite	lt
 801339a:	4633      	movlt	r3, r6
 801339c:	2300      	movge	r3, #0
 801339e:	9310      	str	r3, [sp, #64]	; 0x40
 80133a0:	9b08      	ldr	r3, [sp, #32]
 80133a2:	2500      	movs	r5, #0
 80133a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80133a8:	9318      	str	r3, [sp, #96]	; 0x60
 80133aa:	462e      	mov	r6, r5
 80133ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133ae:	4620      	mov	r0, r4
 80133b0:	6859      	ldr	r1, [r3, #4]
 80133b2:	f001 feab 	bl	801510c <_Balloc>
 80133b6:	9007      	str	r0, [sp, #28]
 80133b8:	2800      	cmp	r0, #0
 80133ba:	f43f af11 	beq.w	80131e0 <_strtod_l+0x498>
 80133be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133c0:	691a      	ldr	r2, [r3, #16]
 80133c2:	3202      	adds	r2, #2
 80133c4:	f103 010c 	add.w	r1, r3, #12
 80133c8:	0092      	lsls	r2, r2, #2
 80133ca:	300c      	adds	r0, #12
 80133cc:	f001 fe90 	bl	80150f0 <memcpy>
 80133d0:	ec4b ab10 	vmov	d0, sl, fp
 80133d4:	aa20      	add	r2, sp, #128	; 0x80
 80133d6:	a91f      	add	r1, sp, #124	; 0x7c
 80133d8:	4620      	mov	r0, r4
 80133da:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80133de:	f002 fa7d 	bl	80158dc <__d2b>
 80133e2:	901e      	str	r0, [sp, #120]	; 0x78
 80133e4:	2800      	cmp	r0, #0
 80133e6:	f43f aefb 	beq.w	80131e0 <_strtod_l+0x498>
 80133ea:	2101      	movs	r1, #1
 80133ec:	4620      	mov	r0, r4
 80133ee:	f001 ffd3 	bl	8015398 <__i2b>
 80133f2:	4606      	mov	r6, r0
 80133f4:	2800      	cmp	r0, #0
 80133f6:	f43f aef3 	beq.w	80131e0 <_strtod_l+0x498>
 80133fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80133fc:	9904      	ldr	r1, [sp, #16]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	bfab      	itete	ge
 8013402:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8013404:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8013406:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8013408:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801340c:	bfac      	ite	ge
 801340e:	eb03 0902 	addge.w	r9, r3, r2
 8013412:	1ad7      	sublt	r7, r2, r3
 8013414:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013416:	eba3 0801 	sub.w	r8, r3, r1
 801341a:	4490      	add	r8, r2
 801341c:	4ba3      	ldr	r3, [pc, #652]	; (80136ac <_strtod_l+0x964>)
 801341e:	f108 38ff 	add.w	r8, r8, #4294967295
 8013422:	4598      	cmp	r8, r3
 8013424:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013428:	f280 80cc 	bge.w	80135c4 <_strtod_l+0x87c>
 801342c:	eba3 0308 	sub.w	r3, r3, r8
 8013430:	2b1f      	cmp	r3, #31
 8013432:	eba2 0203 	sub.w	r2, r2, r3
 8013436:	f04f 0101 	mov.w	r1, #1
 801343a:	f300 80b6 	bgt.w	80135aa <_strtod_l+0x862>
 801343e:	fa01 f303 	lsl.w	r3, r1, r3
 8013442:	9311      	str	r3, [sp, #68]	; 0x44
 8013444:	2300      	movs	r3, #0
 8013446:	930c      	str	r3, [sp, #48]	; 0x30
 8013448:	eb09 0802 	add.w	r8, r9, r2
 801344c:	9b04      	ldr	r3, [sp, #16]
 801344e:	45c1      	cmp	r9, r8
 8013450:	4417      	add	r7, r2
 8013452:	441f      	add	r7, r3
 8013454:	464b      	mov	r3, r9
 8013456:	bfa8      	it	ge
 8013458:	4643      	movge	r3, r8
 801345a:	42bb      	cmp	r3, r7
 801345c:	bfa8      	it	ge
 801345e:	463b      	movge	r3, r7
 8013460:	2b00      	cmp	r3, #0
 8013462:	bfc2      	ittt	gt
 8013464:	eba8 0803 	subgt.w	r8, r8, r3
 8013468:	1aff      	subgt	r7, r7, r3
 801346a:	eba9 0903 	subgt.w	r9, r9, r3
 801346e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013470:	2b00      	cmp	r3, #0
 8013472:	dd17      	ble.n	80134a4 <_strtod_l+0x75c>
 8013474:	4631      	mov	r1, r6
 8013476:	461a      	mov	r2, r3
 8013478:	4620      	mov	r0, r4
 801347a:	f002 f849 	bl	8015510 <__pow5mult>
 801347e:	4606      	mov	r6, r0
 8013480:	2800      	cmp	r0, #0
 8013482:	f43f aead 	beq.w	80131e0 <_strtod_l+0x498>
 8013486:	4601      	mov	r1, r0
 8013488:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801348a:	4620      	mov	r0, r4
 801348c:	f001 ff9a 	bl	80153c4 <__multiply>
 8013490:	900f      	str	r0, [sp, #60]	; 0x3c
 8013492:	2800      	cmp	r0, #0
 8013494:	f43f aea4 	beq.w	80131e0 <_strtod_l+0x498>
 8013498:	991e      	ldr	r1, [sp, #120]	; 0x78
 801349a:	4620      	mov	r0, r4
 801349c:	f001 fe76 	bl	801518c <_Bfree>
 80134a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80134a2:	931e      	str	r3, [sp, #120]	; 0x78
 80134a4:	f1b8 0f00 	cmp.w	r8, #0
 80134a8:	f300 8091 	bgt.w	80135ce <_strtod_l+0x886>
 80134ac:	9b08      	ldr	r3, [sp, #32]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	dd08      	ble.n	80134c4 <_strtod_l+0x77c>
 80134b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80134b4:	9907      	ldr	r1, [sp, #28]
 80134b6:	4620      	mov	r0, r4
 80134b8:	f002 f82a 	bl	8015510 <__pow5mult>
 80134bc:	9007      	str	r0, [sp, #28]
 80134be:	2800      	cmp	r0, #0
 80134c0:	f43f ae8e 	beq.w	80131e0 <_strtod_l+0x498>
 80134c4:	2f00      	cmp	r7, #0
 80134c6:	dd08      	ble.n	80134da <_strtod_l+0x792>
 80134c8:	9907      	ldr	r1, [sp, #28]
 80134ca:	463a      	mov	r2, r7
 80134cc:	4620      	mov	r0, r4
 80134ce:	f002 f879 	bl	80155c4 <__lshift>
 80134d2:	9007      	str	r0, [sp, #28]
 80134d4:	2800      	cmp	r0, #0
 80134d6:	f43f ae83 	beq.w	80131e0 <_strtod_l+0x498>
 80134da:	f1b9 0f00 	cmp.w	r9, #0
 80134de:	dd08      	ble.n	80134f2 <_strtod_l+0x7aa>
 80134e0:	4631      	mov	r1, r6
 80134e2:	464a      	mov	r2, r9
 80134e4:	4620      	mov	r0, r4
 80134e6:	f002 f86d 	bl	80155c4 <__lshift>
 80134ea:	4606      	mov	r6, r0
 80134ec:	2800      	cmp	r0, #0
 80134ee:	f43f ae77 	beq.w	80131e0 <_strtod_l+0x498>
 80134f2:	9a07      	ldr	r2, [sp, #28]
 80134f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80134f6:	4620      	mov	r0, r4
 80134f8:	f002 f8ec 	bl	80156d4 <__mdiff>
 80134fc:	4605      	mov	r5, r0
 80134fe:	2800      	cmp	r0, #0
 8013500:	f43f ae6e 	beq.w	80131e0 <_strtod_l+0x498>
 8013504:	68c3      	ldr	r3, [r0, #12]
 8013506:	930f      	str	r3, [sp, #60]	; 0x3c
 8013508:	2300      	movs	r3, #0
 801350a:	60c3      	str	r3, [r0, #12]
 801350c:	4631      	mov	r1, r6
 801350e:	f002 f8c5 	bl	801569c <__mcmp>
 8013512:	2800      	cmp	r0, #0
 8013514:	da65      	bge.n	80135e2 <_strtod_l+0x89a>
 8013516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013518:	ea53 030a 	orrs.w	r3, r3, sl
 801351c:	f040 8087 	bne.w	801362e <_strtod_l+0x8e6>
 8013520:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013524:	2b00      	cmp	r3, #0
 8013526:	f040 8082 	bne.w	801362e <_strtod_l+0x8e6>
 801352a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801352e:	0d1b      	lsrs	r3, r3, #20
 8013530:	051b      	lsls	r3, r3, #20
 8013532:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013536:	d97a      	bls.n	801362e <_strtod_l+0x8e6>
 8013538:	696b      	ldr	r3, [r5, #20]
 801353a:	b913      	cbnz	r3, 8013542 <_strtod_l+0x7fa>
 801353c:	692b      	ldr	r3, [r5, #16]
 801353e:	2b01      	cmp	r3, #1
 8013540:	dd75      	ble.n	801362e <_strtod_l+0x8e6>
 8013542:	4629      	mov	r1, r5
 8013544:	2201      	movs	r2, #1
 8013546:	4620      	mov	r0, r4
 8013548:	f002 f83c 	bl	80155c4 <__lshift>
 801354c:	4631      	mov	r1, r6
 801354e:	4605      	mov	r5, r0
 8013550:	f002 f8a4 	bl	801569c <__mcmp>
 8013554:	2800      	cmp	r0, #0
 8013556:	dd6a      	ble.n	801362e <_strtod_l+0x8e6>
 8013558:	9904      	ldr	r1, [sp, #16]
 801355a:	4a55      	ldr	r2, [pc, #340]	; (80136b0 <_strtod_l+0x968>)
 801355c:	465b      	mov	r3, fp
 801355e:	2900      	cmp	r1, #0
 8013560:	f000 8085 	beq.w	801366e <_strtod_l+0x926>
 8013564:	ea02 010b 	and.w	r1, r2, fp
 8013568:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801356c:	dc7f      	bgt.n	801366e <_strtod_l+0x926>
 801356e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013572:	f77f aeaa 	ble.w	80132ca <_strtod_l+0x582>
 8013576:	4a4f      	ldr	r2, [pc, #316]	; (80136b4 <_strtod_l+0x96c>)
 8013578:	2300      	movs	r3, #0
 801357a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801357e:	4650      	mov	r0, sl
 8013580:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8013584:	4659      	mov	r1, fp
 8013586:	f7ed f837 	bl	80005f8 <__aeabi_dmul>
 801358a:	460b      	mov	r3, r1
 801358c:	4303      	orrs	r3, r0
 801358e:	bf08      	it	eq
 8013590:	2322      	moveq	r3, #34	; 0x22
 8013592:	4682      	mov	sl, r0
 8013594:	468b      	mov	fp, r1
 8013596:	bf08      	it	eq
 8013598:	6023      	streq	r3, [r4, #0]
 801359a:	e62b      	b.n	80131f4 <_strtod_l+0x4ac>
 801359c:	f04f 32ff 	mov.w	r2, #4294967295
 80135a0:	fa02 f303 	lsl.w	r3, r2, r3
 80135a4:	ea03 0a0a 	and.w	sl, r3, sl
 80135a8:	e6de      	b.n	8013368 <_strtod_l+0x620>
 80135aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80135ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80135b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80135b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80135ba:	fa01 f308 	lsl.w	r3, r1, r8
 80135be:	930c      	str	r3, [sp, #48]	; 0x30
 80135c0:	9111      	str	r1, [sp, #68]	; 0x44
 80135c2:	e741      	b.n	8013448 <_strtod_l+0x700>
 80135c4:	2300      	movs	r3, #0
 80135c6:	930c      	str	r3, [sp, #48]	; 0x30
 80135c8:	2301      	movs	r3, #1
 80135ca:	9311      	str	r3, [sp, #68]	; 0x44
 80135cc:	e73c      	b.n	8013448 <_strtod_l+0x700>
 80135ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80135d0:	4642      	mov	r2, r8
 80135d2:	4620      	mov	r0, r4
 80135d4:	f001 fff6 	bl	80155c4 <__lshift>
 80135d8:	901e      	str	r0, [sp, #120]	; 0x78
 80135da:	2800      	cmp	r0, #0
 80135dc:	f47f af66 	bne.w	80134ac <_strtod_l+0x764>
 80135e0:	e5fe      	b.n	80131e0 <_strtod_l+0x498>
 80135e2:	465f      	mov	r7, fp
 80135e4:	d16e      	bne.n	80136c4 <_strtod_l+0x97c>
 80135e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80135e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80135ec:	b342      	cbz	r2, 8013640 <_strtod_l+0x8f8>
 80135ee:	4a32      	ldr	r2, [pc, #200]	; (80136b8 <_strtod_l+0x970>)
 80135f0:	4293      	cmp	r3, r2
 80135f2:	d128      	bne.n	8013646 <_strtod_l+0x8fe>
 80135f4:	9b04      	ldr	r3, [sp, #16]
 80135f6:	4650      	mov	r0, sl
 80135f8:	b1eb      	cbz	r3, 8013636 <_strtod_l+0x8ee>
 80135fa:	4a2d      	ldr	r2, [pc, #180]	; (80136b0 <_strtod_l+0x968>)
 80135fc:	403a      	ands	r2, r7
 80135fe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013602:	f04f 31ff 	mov.w	r1, #4294967295
 8013606:	d819      	bhi.n	801363c <_strtod_l+0x8f4>
 8013608:	0d12      	lsrs	r2, r2, #20
 801360a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801360e:	fa01 f303 	lsl.w	r3, r1, r3
 8013612:	4298      	cmp	r0, r3
 8013614:	d117      	bne.n	8013646 <_strtod_l+0x8fe>
 8013616:	4b29      	ldr	r3, [pc, #164]	; (80136bc <_strtod_l+0x974>)
 8013618:	429f      	cmp	r7, r3
 801361a:	d102      	bne.n	8013622 <_strtod_l+0x8da>
 801361c:	3001      	adds	r0, #1
 801361e:	f43f addf 	beq.w	80131e0 <_strtod_l+0x498>
 8013622:	4b23      	ldr	r3, [pc, #140]	; (80136b0 <_strtod_l+0x968>)
 8013624:	403b      	ands	r3, r7
 8013626:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801362a:	f04f 0a00 	mov.w	sl, #0
 801362e:	9b04      	ldr	r3, [sp, #16]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d1a0      	bne.n	8013576 <_strtod_l+0x82e>
 8013634:	e5de      	b.n	80131f4 <_strtod_l+0x4ac>
 8013636:	f04f 33ff 	mov.w	r3, #4294967295
 801363a:	e7ea      	b.n	8013612 <_strtod_l+0x8ca>
 801363c:	460b      	mov	r3, r1
 801363e:	e7e8      	b.n	8013612 <_strtod_l+0x8ca>
 8013640:	ea53 030a 	orrs.w	r3, r3, sl
 8013644:	d088      	beq.n	8013558 <_strtod_l+0x810>
 8013646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013648:	b1db      	cbz	r3, 8013682 <_strtod_l+0x93a>
 801364a:	423b      	tst	r3, r7
 801364c:	d0ef      	beq.n	801362e <_strtod_l+0x8e6>
 801364e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013650:	9a04      	ldr	r2, [sp, #16]
 8013652:	4650      	mov	r0, sl
 8013654:	4659      	mov	r1, fp
 8013656:	b1c3      	cbz	r3, 801368a <_strtod_l+0x942>
 8013658:	f7ff fb58 	bl	8012d0c <sulp>
 801365c:	4602      	mov	r2, r0
 801365e:	460b      	mov	r3, r1
 8013660:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013664:	f7ec fe12 	bl	800028c <__adddf3>
 8013668:	4682      	mov	sl, r0
 801366a:	468b      	mov	fp, r1
 801366c:	e7df      	b.n	801362e <_strtod_l+0x8e6>
 801366e:	4013      	ands	r3, r2
 8013670:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013674:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013678:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801367c:	f04f 3aff 	mov.w	sl, #4294967295
 8013680:	e7d5      	b.n	801362e <_strtod_l+0x8e6>
 8013682:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013684:	ea13 0f0a 	tst.w	r3, sl
 8013688:	e7e0      	b.n	801364c <_strtod_l+0x904>
 801368a:	f7ff fb3f 	bl	8012d0c <sulp>
 801368e:	4602      	mov	r2, r0
 8013690:	460b      	mov	r3, r1
 8013692:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013696:	f7ec fdf7 	bl	8000288 <__aeabi_dsub>
 801369a:	2200      	movs	r2, #0
 801369c:	2300      	movs	r3, #0
 801369e:	4682      	mov	sl, r0
 80136a0:	468b      	mov	fp, r1
 80136a2:	f7ed fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 80136a6:	2800      	cmp	r0, #0
 80136a8:	d0c1      	beq.n	801362e <_strtod_l+0x8e6>
 80136aa:	e60e      	b.n	80132ca <_strtod_l+0x582>
 80136ac:	fffffc02 	.word	0xfffffc02
 80136b0:	7ff00000 	.word	0x7ff00000
 80136b4:	39500000 	.word	0x39500000
 80136b8:	000fffff 	.word	0x000fffff
 80136bc:	7fefffff 	.word	0x7fefffff
 80136c0:	08019018 	.word	0x08019018
 80136c4:	4631      	mov	r1, r6
 80136c6:	4628      	mov	r0, r5
 80136c8:	f002 f964 	bl	8015994 <__ratio>
 80136cc:	ec59 8b10 	vmov	r8, r9, d0
 80136d0:	ee10 0a10 	vmov	r0, s0
 80136d4:	2200      	movs	r2, #0
 80136d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80136da:	4649      	mov	r1, r9
 80136dc:	f7ed fa08 	bl	8000af0 <__aeabi_dcmple>
 80136e0:	2800      	cmp	r0, #0
 80136e2:	d07c      	beq.n	80137de <_strtod_l+0xa96>
 80136e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d04c      	beq.n	8013784 <_strtod_l+0xa3c>
 80136ea:	4b95      	ldr	r3, [pc, #596]	; (8013940 <_strtod_l+0xbf8>)
 80136ec:	2200      	movs	r2, #0
 80136ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80136f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8013940 <_strtod_l+0xbf8>
 80136f6:	f04f 0800 	mov.w	r8, #0
 80136fa:	4b92      	ldr	r3, [pc, #584]	; (8013944 <_strtod_l+0xbfc>)
 80136fc:	403b      	ands	r3, r7
 80136fe:	9311      	str	r3, [sp, #68]	; 0x44
 8013700:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013702:	4b91      	ldr	r3, [pc, #580]	; (8013948 <_strtod_l+0xc00>)
 8013704:	429a      	cmp	r2, r3
 8013706:	f040 80b2 	bne.w	801386e <_strtod_l+0xb26>
 801370a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801370e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013712:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013716:	ec4b ab10 	vmov	d0, sl, fp
 801371a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801371e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013722:	f002 f85f 	bl	80157e4 <__ulp>
 8013726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801372a:	ec53 2b10 	vmov	r2, r3, d0
 801372e:	f7ec ff63 	bl	80005f8 <__aeabi_dmul>
 8013732:	4652      	mov	r2, sl
 8013734:	465b      	mov	r3, fp
 8013736:	f7ec fda9 	bl	800028c <__adddf3>
 801373a:	460b      	mov	r3, r1
 801373c:	4981      	ldr	r1, [pc, #516]	; (8013944 <_strtod_l+0xbfc>)
 801373e:	4a83      	ldr	r2, [pc, #524]	; (801394c <_strtod_l+0xc04>)
 8013740:	4019      	ands	r1, r3
 8013742:	4291      	cmp	r1, r2
 8013744:	4682      	mov	sl, r0
 8013746:	d95e      	bls.n	8013806 <_strtod_l+0xabe>
 8013748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801374a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801374e:	4293      	cmp	r3, r2
 8013750:	d103      	bne.n	801375a <_strtod_l+0xa12>
 8013752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013754:	3301      	adds	r3, #1
 8013756:	f43f ad43 	beq.w	80131e0 <_strtod_l+0x498>
 801375a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8013958 <_strtod_l+0xc10>
 801375e:	f04f 3aff 	mov.w	sl, #4294967295
 8013762:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013764:	4620      	mov	r0, r4
 8013766:	f001 fd11 	bl	801518c <_Bfree>
 801376a:	9907      	ldr	r1, [sp, #28]
 801376c:	4620      	mov	r0, r4
 801376e:	f001 fd0d 	bl	801518c <_Bfree>
 8013772:	4631      	mov	r1, r6
 8013774:	4620      	mov	r0, r4
 8013776:	f001 fd09 	bl	801518c <_Bfree>
 801377a:	4629      	mov	r1, r5
 801377c:	4620      	mov	r0, r4
 801377e:	f001 fd05 	bl	801518c <_Bfree>
 8013782:	e613      	b.n	80133ac <_strtod_l+0x664>
 8013784:	f1ba 0f00 	cmp.w	sl, #0
 8013788:	d11b      	bne.n	80137c2 <_strtod_l+0xa7a>
 801378a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801378e:	b9f3      	cbnz	r3, 80137ce <_strtod_l+0xa86>
 8013790:	4b6b      	ldr	r3, [pc, #428]	; (8013940 <_strtod_l+0xbf8>)
 8013792:	2200      	movs	r2, #0
 8013794:	4640      	mov	r0, r8
 8013796:	4649      	mov	r1, r9
 8013798:	f7ed f9a0 	bl	8000adc <__aeabi_dcmplt>
 801379c:	b9d0      	cbnz	r0, 80137d4 <_strtod_l+0xa8c>
 801379e:	4640      	mov	r0, r8
 80137a0:	4649      	mov	r1, r9
 80137a2:	4b6b      	ldr	r3, [pc, #428]	; (8013950 <_strtod_l+0xc08>)
 80137a4:	2200      	movs	r2, #0
 80137a6:	f7ec ff27 	bl	80005f8 <__aeabi_dmul>
 80137aa:	4680      	mov	r8, r0
 80137ac:	4689      	mov	r9, r1
 80137ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80137b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80137b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80137b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80137bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80137c0:	e79b      	b.n	80136fa <_strtod_l+0x9b2>
 80137c2:	f1ba 0f01 	cmp.w	sl, #1
 80137c6:	d102      	bne.n	80137ce <_strtod_l+0xa86>
 80137c8:	2f00      	cmp	r7, #0
 80137ca:	f43f ad7e 	beq.w	80132ca <_strtod_l+0x582>
 80137ce:	4b61      	ldr	r3, [pc, #388]	; (8013954 <_strtod_l+0xc0c>)
 80137d0:	2200      	movs	r2, #0
 80137d2:	e78c      	b.n	80136ee <_strtod_l+0x9a6>
 80137d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013950 <_strtod_l+0xc08>
 80137d8:	f04f 0800 	mov.w	r8, #0
 80137dc:	e7e7      	b.n	80137ae <_strtod_l+0xa66>
 80137de:	4b5c      	ldr	r3, [pc, #368]	; (8013950 <_strtod_l+0xc08>)
 80137e0:	4640      	mov	r0, r8
 80137e2:	4649      	mov	r1, r9
 80137e4:	2200      	movs	r2, #0
 80137e6:	f7ec ff07 	bl	80005f8 <__aeabi_dmul>
 80137ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137ec:	4680      	mov	r8, r0
 80137ee:	4689      	mov	r9, r1
 80137f0:	b933      	cbnz	r3, 8013800 <_strtod_l+0xab8>
 80137f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80137f6:	9012      	str	r0, [sp, #72]	; 0x48
 80137f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80137fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80137fe:	e7dd      	b.n	80137bc <_strtod_l+0xa74>
 8013800:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8013804:	e7f9      	b.n	80137fa <_strtod_l+0xab2>
 8013806:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801380a:	9b04      	ldr	r3, [sp, #16]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d1a8      	bne.n	8013762 <_strtod_l+0xa1a>
 8013810:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013814:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013816:	0d1b      	lsrs	r3, r3, #20
 8013818:	051b      	lsls	r3, r3, #20
 801381a:	429a      	cmp	r2, r3
 801381c:	d1a1      	bne.n	8013762 <_strtod_l+0xa1a>
 801381e:	4640      	mov	r0, r8
 8013820:	4649      	mov	r1, r9
 8013822:	f7ed fa49 	bl	8000cb8 <__aeabi_d2lz>
 8013826:	f7ec feb9 	bl	800059c <__aeabi_l2d>
 801382a:	4602      	mov	r2, r0
 801382c:	460b      	mov	r3, r1
 801382e:	4640      	mov	r0, r8
 8013830:	4649      	mov	r1, r9
 8013832:	f7ec fd29 	bl	8000288 <__aeabi_dsub>
 8013836:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013838:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801383c:	ea43 030a 	orr.w	r3, r3, sl
 8013840:	4313      	orrs	r3, r2
 8013842:	4680      	mov	r8, r0
 8013844:	4689      	mov	r9, r1
 8013846:	d053      	beq.n	80138f0 <_strtod_l+0xba8>
 8013848:	a335      	add	r3, pc, #212	; (adr r3, 8013920 <_strtod_l+0xbd8>)
 801384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801384e:	f7ed f945 	bl	8000adc <__aeabi_dcmplt>
 8013852:	2800      	cmp	r0, #0
 8013854:	f47f acce 	bne.w	80131f4 <_strtod_l+0x4ac>
 8013858:	a333      	add	r3, pc, #204	; (adr r3, 8013928 <_strtod_l+0xbe0>)
 801385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385e:	4640      	mov	r0, r8
 8013860:	4649      	mov	r1, r9
 8013862:	f7ed f959 	bl	8000b18 <__aeabi_dcmpgt>
 8013866:	2800      	cmp	r0, #0
 8013868:	f43f af7b 	beq.w	8013762 <_strtod_l+0xa1a>
 801386c:	e4c2      	b.n	80131f4 <_strtod_l+0x4ac>
 801386e:	9b04      	ldr	r3, [sp, #16]
 8013870:	b333      	cbz	r3, 80138c0 <_strtod_l+0xb78>
 8013872:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013874:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013878:	d822      	bhi.n	80138c0 <_strtod_l+0xb78>
 801387a:	a32d      	add	r3, pc, #180	; (adr r3, 8013930 <_strtod_l+0xbe8>)
 801387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013880:	4640      	mov	r0, r8
 8013882:	4649      	mov	r1, r9
 8013884:	f7ed f934 	bl	8000af0 <__aeabi_dcmple>
 8013888:	b1a0      	cbz	r0, 80138b4 <_strtod_l+0xb6c>
 801388a:	4649      	mov	r1, r9
 801388c:	4640      	mov	r0, r8
 801388e:	f7ed f98b 	bl	8000ba8 <__aeabi_d2uiz>
 8013892:	2801      	cmp	r0, #1
 8013894:	bf38      	it	cc
 8013896:	2001      	movcc	r0, #1
 8013898:	f7ec fe34 	bl	8000504 <__aeabi_ui2d>
 801389c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801389e:	4680      	mov	r8, r0
 80138a0:	4689      	mov	r9, r1
 80138a2:	bb13      	cbnz	r3, 80138ea <_strtod_l+0xba2>
 80138a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138a8:	9014      	str	r0, [sp, #80]	; 0x50
 80138aa:	9315      	str	r3, [sp, #84]	; 0x54
 80138ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80138b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80138b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80138b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80138bc:	1a9b      	subs	r3, r3, r2
 80138be:	930d      	str	r3, [sp, #52]	; 0x34
 80138c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80138c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80138c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80138cc:	f001 ff8a 	bl	80157e4 <__ulp>
 80138d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80138d4:	ec53 2b10 	vmov	r2, r3, d0
 80138d8:	f7ec fe8e 	bl	80005f8 <__aeabi_dmul>
 80138dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80138e0:	f7ec fcd4 	bl	800028c <__adddf3>
 80138e4:	4682      	mov	sl, r0
 80138e6:	468b      	mov	fp, r1
 80138e8:	e78f      	b.n	801380a <_strtod_l+0xac2>
 80138ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80138ee:	e7dd      	b.n	80138ac <_strtod_l+0xb64>
 80138f0:	a311      	add	r3, pc, #68	; (adr r3, 8013938 <_strtod_l+0xbf0>)
 80138f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f6:	f7ed f8f1 	bl	8000adc <__aeabi_dcmplt>
 80138fa:	e7b4      	b.n	8013866 <_strtod_l+0xb1e>
 80138fc:	2300      	movs	r3, #0
 80138fe:	930e      	str	r3, [sp, #56]	; 0x38
 8013900:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013902:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013904:	6013      	str	r3, [r2, #0]
 8013906:	f7ff ba65 	b.w	8012dd4 <_strtod_l+0x8c>
 801390a:	2b65      	cmp	r3, #101	; 0x65
 801390c:	f43f ab5d 	beq.w	8012fca <_strtod_l+0x282>
 8013910:	2b45      	cmp	r3, #69	; 0x45
 8013912:	f43f ab5a 	beq.w	8012fca <_strtod_l+0x282>
 8013916:	2201      	movs	r2, #1
 8013918:	f7ff bb92 	b.w	8013040 <_strtod_l+0x2f8>
 801391c:	f3af 8000 	nop.w
 8013920:	94a03595 	.word	0x94a03595
 8013924:	3fdfffff 	.word	0x3fdfffff
 8013928:	35afe535 	.word	0x35afe535
 801392c:	3fe00000 	.word	0x3fe00000
 8013930:	ffc00000 	.word	0xffc00000
 8013934:	41dfffff 	.word	0x41dfffff
 8013938:	94a03595 	.word	0x94a03595
 801393c:	3fcfffff 	.word	0x3fcfffff
 8013940:	3ff00000 	.word	0x3ff00000
 8013944:	7ff00000 	.word	0x7ff00000
 8013948:	7fe00000 	.word	0x7fe00000
 801394c:	7c9fffff 	.word	0x7c9fffff
 8013950:	3fe00000 	.word	0x3fe00000
 8013954:	bff00000 	.word	0xbff00000
 8013958:	7fefffff 	.word	0x7fefffff

0801395c <_strtod_r>:
 801395c:	4b01      	ldr	r3, [pc, #4]	; (8013964 <_strtod_r+0x8>)
 801395e:	f7ff b9f3 	b.w	8012d48 <_strtod_l>
 8013962:	bf00      	nop
 8013964:	20000204 	.word	0x20000204

08013968 <strtod>:
 8013968:	460a      	mov	r2, r1
 801396a:	4601      	mov	r1, r0
 801396c:	4802      	ldr	r0, [pc, #8]	; (8013978 <strtod+0x10>)
 801396e:	4b03      	ldr	r3, [pc, #12]	; (801397c <strtod+0x14>)
 8013970:	6800      	ldr	r0, [r0, #0]
 8013972:	f7ff b9e9 	b.w	8012d48 <_strtod_l>
 8013976:	bf00      	nop
 8013978:	2000019c 	.word	0x2000019c
 801397c:	20000204 	.word	0x20000204

08013980 <_strtol_l.isra.0>:
 8013980:	2b01      	cmp	r3, #1
 8013982:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013986:	d001      	beq.n	801398c <_strtol_l.isra.0+0xc>
 8013988:	2b24      	cmp	r3, #36	; 0x24
 801398a:	d906      	bls.n	801399a <_strtol_l.isra.0+0x1a>
 801398c:	f7fe fa64 	bl	8011e58 <__errno>
 8013990:	2316      	movs	r3, #22
 8013992:	6003      	str	r3, [r0, #0]
 8013994:	2000      	movs	r0, #0
 8013996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801399a:	4f3a      	ldr	r7, [pc, #232]	; (8013a84 <_strtol_l.isra.0+0x104>)
 801399c:	468e      	mov	lr, r1
 801399e:	4676      	mov	r6, lr
 80139a0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80139a4:	5de5      	ldrb	r5, [r4, r7]
 80139a6:	f015 0508 	ands.w	r5, r5, #8
 80139aa:	d1f8      	bne.n	801399e <_strtol_l.isra.0+0x1e>
 80139ac:	2c2d      	cmp	r4, #45	; 0x2d
 80139ae:	d134      	bne.n	8013a1a <_strtol_l.isra.0+0x9a>
 80139b0:	f89e 4000 	ldrb.w	r4, [lr]
 80139b4:	f04f 0801 	mov.w	r8, #1
 80139b8:	f106 0e02 	add.w	lr, r6, #2
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d05c      	beq.n	8013a7a <_strtol_l.isra.0+0xfa>
 80139c0:	2b10      	cmp	r3, #16
 80139c2:	d10c      	bne.n	80139de <_strtol_l.isra.0+0x5e>
 80139c4:	2c30      	cmp	r4, #48	; 0x30
 80139c6:	d10a      	bne.n	80139de <_strtol_l.isra.0+0x5e>
 80139c8:	f89e 4000 	ldrb.w	r4, [lr]
 80139cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80139d0:	2c58      	cmp	r4, #88	; 0x58
 80139d2:	d14d      	bne.n	8013a70 <_strtol_l.isra.0+0xf0>
 80139d4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80139d8:	2310      	movs	r3, #16
 80139da:	f10e 0e02 	add.w	lr, lr, #2
 80139de:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80139e2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80139e6:	2600      	movs	r6, #0
 80139e8:	fbbc f9f3 	udiv	r9, ip, r3
 80139ec:	4635      	mov	r5, r6
 80139ee:	fb03 ca19 	mls	sl, r3, r9, ip
 80139f2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80139f6:	2f09      	cmp	r7, #9
 80139f8:	d818      	bhi.n	8013a2c <_strtol_l.isra.0+0xac>
 80139fa:	463c      	mov	r4, r7
 80139fc:	42a3      	cmp	r3, r4
 80139fe:	dd24      	ble.n	8013a4a <_strtol_l.isra.0+0xca>
 8013a00:	2e00      	cmp	r6, #0
 8013a02:	db1f      	blt.n	8013a44 <_strtol_l.isra.0+0xc4>
 8013a04:	45a9      	cmp	r9, r5
 8013a06:	d31d      	bcc.n	8013a44 <_strtol_l.isra.0+0xc4>
 8013a08:	d101      	bne.n	8013a0e <_strtol_l.isra.0+0x8e>
 8013a0a:	45a2      	cmp	sl, r4
 8013a0c:	db1a      	blt.n	8013a44 <_strtol_l.isra.0+0xc4>
 8013a0e:	fb05 4503 	mla	r5, r5, r3, r4
 8013a12:	2601      	movs	r6, #1
 8013a14:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013a18:	e7eb      	b.n	80139f2 <_strtol_l.isra.0+0x72>
 8013a1a:	2c2b      	cmp	r4, #43	; 0x2b
 8013a1c:	bf08      	it	eq
 8013a1e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8013a22:	46a8      	mov	r8, r5
 8013a24:	bf08      	it	eq
 8013a26:	f106 0e02 	addeq.w	lr, r6, #2
 8013a2a:	e7c7      	b.n	80139bc <_strtol_l.isra.0+0x3c>
 8013a2c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013a30:	2f19      	cmp	r7, #25
 8013a32:	d801      	bhi.n	8013a38 <_strtol_l.isra.0+0xb8>
 8013a34:	3c37      	subs	r4, #55	; 0x37
 8013a36:	e7e1      	b.n	80139fc <_strtol_l.isra.0+0x7c>
 8013a38:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013a3c:	2f19      	cmp	r7, #25
 8013a3e:	d804      	bhi.n	8013a4a <_strtol_l.isra.0+0xca>
 8013a40:	3c57      	subs	r4, #87	; 0x57
 8013a42:	e7db      	b.n	80139fc <_strtol_l.isra.0+0x7c>
 8013a44:	f04f 36ff 	mov.w	r6, #4294967295
 8013a48:	e7e4      	b.n	8013a14 <_strtol_l.isra.0+0x94>
 8013a4a:	2e00      	cmp	r6, #0
 8013a4c:	da05      	bge.n	8013a5a <_strtol_l.isra.0+0xda>
 8013a4e:	2322      	movs	r3, #34	; 0x22
 8013a50:	6003      	str	r3, [r0, #0]
 8013a52:	4665      	mov	r5, ip
 8013a54:	b942      	cbnz	r2, 8013a68 <_strtol_l.isra.0+0xe8>
 8013a56:	4628      	mov	r0, r5
 8013a58:	e79d      	b.n	8013996 <_strtol_l.isra.0+0x16>
 8013a5a:	f1b8 0f00 	cmp.w	r8, #0
 8013a5e:	d000      	beq.n	8013a62 <_strtol_l.isra.0+0xe2>
 8013a60:	426d      	negs	r5, r5
 8013a62:	2a00      	cmp	r2, #0
 8013a64:	d0f7      	beq.n	8013a56 <_strtol_l.isra.0+0xd6>
 8013a66:	b10e      	cbz	r6, 8013a6c <_strtol_l.isra.0+0xec>
 8013a68:	f10e 31ff 	add.w	r1, lr, #4294967295
 8013a6c:	6011      	str	r1, [r2, #0]
 8013a6e:	e7f2      	b.n	8013a56 <_strtol_l.isra.0+0xd6>
 8013a70:	2430      	movs	r4, #48	; 0x30
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d1b3      	bne.n	80139de <_strtol_l.isra.0+0x5e>
 8013a76:	2308      	movs	r3, #8
 8013a78:	e7b1      	b.n	80139de <_strtol_l.isra.0+0x5e>
 8013a7a:	2c30      	cmp	r4, #48	; 0x30
 8013a7c:	d0a4      	beq.n	80139c8 <_strtol_l.isra.0+0x48>
 8013a7e:	230a      	movs	r3, #10
 8013a80:	e7ad      	b.n	80139de <_strtol_l.isra.0+0x5e>
 8013a82:	bf00      	nop
 8013a84:	08019041 	.word	0x08019041

08013a88 <_strtol_r>:
 8013a88:	f7ff bf7a 	b.w	8013980 <_strtol_l.isra.0>

08013a8c <_write_r>:
 8013a8c:	b538      	push	{r3, r4, r5, lr}
 8013a8e:	4d07      	ldr	r5, [pc, #28]	; (8013aac <_write_r+0x20>)
 8013a90:	4604      	mov	r4, r0
 8013a92:	4608      	mov	r0, r1
 8013a94:	4611      	mov	r1, r2
 8013a96:	2200      	movs	r2, #0
 8013a98:	602a      	str	r2, [r5, #0]
 8013a9a:	461a      	mov	r2, r3
 8013a9c:	f7ef fa95 	bl	8002fca <_write>
 8013aa0:	1c43      	adds	r3, r0, #1
 8013aa2:	d102      	bne.n	8013aaa <_write_r+0x1e>
 8013aa4:	682b      	ldr	r3, [r5, #0]
 8013aa6:	b103      	cbz	r3, 8013aaa <_write_r+0x1e>
 8013aa8:	6023      	str	r3, [r4, #0]
 8013aaa:	bd38      	pop	{r3, r4, r5, pc}
 8013aac:	20003314 	.word	0x20003314

08013ab0 <_close_r>:
 8013ab0:	b538      	push	{r3, r4, r5, lr}
 8013ab2:	4d06      	ldr	r5, [pc, #24]	; (8013acc <_close_r+0x1c>)
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	4604      	mov	r4, r0
 8013ab8:	4608      	mov	r0, r1
 8013aba:	602b      	str	r3, [r5, #0]
 8013abc:	f7ef faa1 	bl	8003002 <_close>
 8013ac0:	1c43      	adds	r3, r0, #1
 8013ac2:	d102      	bne.n	8013aca <_close_r+0x1a>
 8013ac4:	682b      	ldr	r3, [r5, #0]
 8013ac6:	b103      	cbz	r3, 8013aca <_close_r+0x1a>
 8013ac8:	6023      	str	r3, [r4, #0]
 8013aca:	bd38      	pop	{r3, r4, r5, pc}
 8013acc:	20003314 	.word	0x20003314

08013ad0 <quorem>:
 8013ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad4:	6903      	ldr	r3, [r0, #16]
 8013ad6:	690c      	ldr	r4, [r1, #16]
 8013ad8:	42a3      	cmp	r3, r4
 8013ada:	4607      	mov	r7, r0
 8013adc:	f2c0 8081 	blt.w	8013be2 <quorem+0x112>
 8013ae0:	3c01      	subs	r4, #1
 8013ae2:	f101 0814 	add.w	r8, r1, #20
 8013ae6:	f100 0514 	add.w	r5, r0, #20
 8013aea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013aee:	9301      	str	r3, [sp, #4]
 8013af0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013af4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013af8:	3301      	adds	r3, #1
 8013afa:	429a      	cmp	r2, r3
 8013afc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013b00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013b04:	fbb2 f6f3 	udiv	r6, r2, r3
 8013b08:	d331      	bcc.n	8013b6e <quorem+0x9e>
 8013b0a:	f04f 0e00 	mov.w	lr, #0
 8013b0e:	4640      	mov	r0, r8
 8013b10:	46ac      	mov	ip, r5
 8013b12:	46f2      	mov	sl, lr
 8013b14:	f850 2b04 	ldr.w	r2, [r0], #4
 8013b18:	b293      	uxth	r3, r2
 8013b1a:	fb06 e303 	mla	r3, r6, r3, lr
 8013b1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013b22:	b29b      	uxth	r3, r3
 8013b24:	ebaa 0303 	sub.w	r3, sl, r3
 8013b28:	0c12      	lsrs	r2, r2, #16
 8013b2a:	f8dc a000 	ldr.w	sl, [ip]
 8013b2e:	fb06 e202 	mla	r2, r6, r2, lr
 8013b32:	fa13 f38a 	uxtah	r3, r3, sl
 8013b36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013b3a:	fa1f fa82 	uxth.w	sl, r2
 8013b3e:	f8dc 2000 	ldr.w	r2, [ip]
 8013b42:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013b46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013b4a:	b29b      	uxth	r3, r3
 8013b4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013b50:	4581      	cmp	r9, r0
 8013b52:	f84c 3b04 	str.w	r3, [ip], #4
 8013b56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013b5a:	d2db      	bcs.n	8013b14 <quorem+0x44>
 8013b5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8013b60:	b92b      	cbnz	r3, 8013b6e <quorem+0x9e>
 8013b62:	9b01      	ldr	r3, [sp, #4]
 8013b64:	3b04      	subs	r3, #4
 8013b66:	429d      	cmp	r5, r3
 8013b68:	461a      	mov	r2, r3
 8013b6a:	d32e      	bcc.n	8013bca <quorem+0xfa>
 8013b6c:	613c      	str	r4, [r7, #16]
 8013b6e:	4638      	mov	r0, r7
 8013b70:	f001 fd94 	bl	801569c <__mcmp>
 8013b74:	2800      	cmp	r0, #0
 8013b76:	db24      	blt.n	8013bc2 <quorem+0xf2>
 8013b78:	3601      	adds	r6, #1
 8013b7a:	4628      	mov	r0, r5
 8013b7c:	f04f 0c00 	mov.w	ip, #0
 8013b80:	f858 2b04 	ldr.w	r2, [r8], #4
 8013b84:	f8d0 e000 	ldr.w	lr, [r0]
 8013b88:	b293      	uxth	r3, r2
 8013b8a:	ebac 0303 	sub.w	r3, ip, r3
 8013b8e:	0c12      	lsrs	r2, r2, #16
 8013b90:	fa13 f38e 	uxtah	r3, r3, lr
 8013b94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013b98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013b9c:	b29b      	uxth	r3, r3
 8013b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ba2:	45c1      	cmp	r9, r8
 8013ba4:	f840 3b04 	str.w	r3, [r0], #4
 8013ba8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013bac:	d2e8      	bcs.n	8013b80 <quorem+0xb0>
 8013bae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013bb6:	b922      	cbnz	r2, 8013bc2 <quorem+0xf2>
 8013bb8:	3b04      	subs	r3, #4
 8013bba:	429d      	cmp	r5, r3
 8013bbc:	461a      	mov	r2, r3
 8013bbe:	d30a      	bcc.n	8013bd6 <quorem+0x106>
 8013bc0:	613c      	str	r4, [r7, #16]
 8013bc2:	4630      	mov	r0, r6
 8013bc4:	b003      	add	sp, #12
 8013bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bca:	6812      	ldr	r2, [r2, #0]
 8013bcc:	3b04      	subs	r3, #4
 8013bce:	2a00      	cmp	r2, #0
 8013bd0:	d1cc      	bne.n	8013b6c <quorem+0x9c>
 8013bd2:	3c01      	subs	r4, #1
 8013bd4:	e7c7      	b.n	8013b66 <quorem+0x96>
 8013bd6:	6812      	ldr	r2, [r2, #0]
 8013bd8:	3b04      	subs	r3, #4
 8013bda:	2a00      	cmp	r2, #0
 8013bdc:	d1f0      	bne.n	8013bc0 <quorem+0xf0>
 8013bde:	3c01      	subs	r4, #1
 8013be0:	e7eb      	b.n	8013bba <quorem+0xea>
 8013be2:	2000      	movs	r0, #0
 8013be4:	e7ee      	b.n	8013bc4 <quorem+0xf4>
	...

08013be8 <_dtoa_r>:
 8013be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bec:	ed2d 8b02 	vpush	{d8}
 8013bf0:	ec57 6b10 	vmov	r6, r7, d0
 8013bf4:	b095      	sub	sp, #84	; 0x54
 8013bf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013bf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013bfc:	9105      	str	r1, [sp, #20]
 8013bfe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013c02:	4604      	mov	r4, r0
 8013c04:	9209      	str	r2, [sp, #36]	; 0x24
 8013c06:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c08:	b975      	cbnz	r5, 8013c28 <_dtoa_r+0x40>
 8013c0a:	2010      	movs	r0, #16
 8013c0c:	f001 fa56 	bl	80150bc <malloc>
 8013c10:	4602      	mov	r2, r0
 8013c12:	6260      	str	r0, [r4, #36]	; 0x24
 8013c14:	b920      	cbnz	r0, 8013c20 <_dtoa_r+0x38>
 8013c16:	4bb2      	ldr	r3, [pc, #712]	; (8013ee0 <_dtoa_r+0x2f8>)
 8013c18:	21ea      	movs	r1, #234	; 0xea
 8013c1a:	48b2      	ldr	r0, [pc, #712]	; (8013ee4 <_dtoa_r+0x2fc>)
 8013c1c:	f002 fe62 	bl	80168e4 <__assert_func>
 8013c20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013c24:	6005      	str	r5, [r0, #0]
 8013c26:	60c5      	str	r5, [r0, #12]
 8013c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c2a:	6819      	ldr	r1, [r3, #0]
 8013c2c:	b151      	cbz	r1, 8013c44 <_dtoa_r+0x5c>
 8013c2e:	685a      	ldr	r2, [r3, #4]
 8013c30:	604a      	str	r2, [r1, #4]
 8013c32:	2301      	movs	r3, #1
 8013c34:	4093      	lsls	r3, r2
 8013c36:	608b      	str	r3, [r1, #8]
 8013c38:	4620      	mov	r0, r4
 8013c3a:	f001 faa7 	bl	801518c <_Bfree>
 8013c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013c40:	2200      	movs	r2, #0
 8013c42:	601a      	str	r2, [r3, #0]
 8013c44:	1e3b      	subs	r3, r7, #0
 8013c46:	bfb9      	ittee	lt
 8013c48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013c4c:	9303      	strlt	r3, [sp, #12]
 8013c4e:	2300      	movge	r3, #0
 8013c50:	f8c8 3000 	strge.w	r3, [r8]
 8013c54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013c58:	4ba3      	ldr	r3, [pc, #652]	; (8013ee8 <_dtoa_r+0x300>)
 8013c5a:	bfbc      	itt	lt
 8013c5c:	2201      	movlt	r2, #1
 8013c5e:	f8c8 2000 	strlt.w	r2, [r8]
 8013c62:	ea33 0309 	bics.w	r3, r3, r9
 8013c66:	d11b      	bne.n	8013ca0 <_dtoa_r+0xb8>
 8013c68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8013c6e:	6013      	str	r3, [r2, #0]
 8013c70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013c74:	4333      	orrs	r3, r6
 8013c76:	f000 857a 	beq.w	801476e <_dtoa_r+0xb86>
 8013c7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c7c:	b963      	cbnz	r3, 8013c98 <_dtoa_r+0xb0>
 8013c7e:	4b9b      	ldr	r3, [pc, #620]	; (8013eec <_dtoa_r+0x304>)
 8013c80:	e024      	b.n	8013ccc <_dtoa_r+0xe4>
 8013c82:	4b9b      	ldr	r3, [pc, #620]	; (8013ef0 <_dtoa_r+0x308>)
 8013c84:	9300      	str	r3, [sp, #0]
 8013c86:	3308      	adds	r3, #8
 8013c88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013c8a:	6013      	str	r3, [r2, #0]
 8013c8c:	9800      	ldr	r0, [sp, #0]
 8013c8e:	b015      	add	sp, #84	; 0x54
 8013c90:	ecbd 8b02 	vpop	{d8}
 8013c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c98:	4b94      	ldr	r3, [pc, #592]	; (8013eec <_dtoa_r+0x304>)
 8013c9a:	9300      	str	r3, [sp, #0]
 8013c9c:	3303      	adds	r3, #3
 8013c9e:	e7f3      	b.n	8013c88 <_dtoa_r+0xa0>
 8013ca0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	ec51 0b17 	vmov	r0, r1, d7
 8013caa:	2300      	movs	r3, #0
 8013cac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013cb0:	f7ec ff0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8013cb4:	4680      	mov	r8, r0
 8013cb6:	b158      	cbz	r0, 8013cd0 <_dtoa_r+0xe8>
 8013cb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013cba:	2301      	movs	r3, #1
 8013cbc:	6013      	str	r3, [r2, #0]
 8013cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	f000 8551 	beq.w	8014768 <_dtoa_r+0xb80>
 8013cc6:	488b      	ldr	r0, [pc, #556]	; (8013ef4 <_dtoa_r+0x30c>)
 8013cc8:	6018      	str	r0, [r3, #0]
 8013cca:	1e43      	subs	r3, r0, #1
 8013ccc:	9300      	str	r3, [sp, #0]
 8013cce:	e7dd      	b.n	8013c8c <_dtoa_r+0xa4>
 8013cd0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013cd4:	aa12      	add	r2, sp, #72	; 0x48
 8013cd6:	a913      	add	r1, sp, #76	; 0x4c
 8013cd8:	4620      	mov	r0, r4
 8013cda:	f001 fdff 	bl	80158dc <__d2b>
 8013cde:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013ce2:	4683      	mov	fp, r0
 8013ce4:	2d00      	cmp	r5, #0
 8013ce6:	d07c      	beq.n	8013de2 <_dtoa_r+0x1fa>
 8013ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013cea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013cee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013cf2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013cf6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013cfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013cfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013d02:	4b7d      	ldr	r3, [pc, #500]	; (8013ef8 <_dtoa_r+0x310>)
 8013d04:	2200      	movs	r2, #0
 8013d06:	4630      	mov	r0, r6
 8013d08:	4639      	mov	r1, r7
 8013d0a:	f7ec fabd 	bl	8000288 <__aeabi_dsub>
 8013d0e:	a36e      	add	r3, pc, #440	; (adr r3, 8013ec8 <_dtoa_r+0x2e0>)
 8013d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d14:	f7ec fc70 	bl	80005f8 <__aeabi_dmul>
 8013d18:	a36d      	add	r3, pc, #436	; (adr r3, 8013ed0 <_dtoa_r+0x2e8>)
 8013d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d1e:	f7ec fab5 	bl	800028c <__adddf3>
 8013d22:	4606      	mov	r6, r0
 8013d24:	4628      	mov	r0, r5
 8013d26:	460f      	mov	r7, r1
 8013d28:	f7ec fbfc 	bl	8000524 <__aeabi_i2d>
 8013d2c:	a36a      	add	r3, pc, #424	; (adr r3, 8013ed8 <_dtoa_r+0x2f0>)
 8013d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d32:	f7ec fc61 	bl	80005f8 <__aeabi_dmul>
 8013d36:	4602      	mov	r2, r0
 8013d38:	460b      	mov	r3, r1
 8013d3a:	4630      	mov	r0, r6
 8013d3c:	4639      	mov	r1, r7
 8013d3e:	f7ec faa5 	bl	800028c <__adddf3>
 8013d42:	4606      	mov	r6, r0
 8013d44:	460f      	mov	r7, r1
 8013d46:	f7ec ff07 	bl	8000b58 <__aeabi_d2iz>
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	4682      	mov	sl, r0
 8013d4e:	2300      	movs	r3, #0
 8013d50:	4630      	mov	r0, r6
 8013d52:	4639      	mov	r1, r7
 8013d54:	f7ec fec2 	bl	8000adc <__aeabi_dcmplt>
 8013d58:	b148      	cbz	r0, 8013d6e <_dtoa_r+0x186>
 8013d5a:	4650      	mov	r0, sl
 8013d5c:	f7ec fbe2 	bl	8000524 <__aeabi_i2d>
 8013d60:	4632      	mov	r2, r6
 8013d62:	463b      	mov	r3, r7
 8013d64:	f7ec feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8013d68:	b908      	cbnz	r0, 8013d6e <_dtoa_r+0x186>
 8013d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013d6e:	f1ba 0f16 	cmp.w	sl, #22
 8013d72:	d854      	bhi.n	8013e1e <_dtoa_r+0x236>
 8013d74:	4b61      	ldr	r3, [pc, #388]	; (8013efc <_dtoa_r+0x314>)
 8013d76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013d82:	f7ec feab 	bl	8000adc <__aeabi_dcmplt>
 8013d86:	2800      	cmp	r0, #0
 8013d88:	d04b      	beq.n	8013e22 <_dtoa_r+0x23a>
 8013d8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013d8e:	2300      	movs	r3, #0
 8013d90:	930e      	str	r3, [sp, #56]	; 0x38
 8013d92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013d94:	1b5d      	subs	r5, r3, r5
 8013d96:	1e6b      	subs	r3, r5, #1
 8013d98:	9304      	str	r3, [sp, #16]
 8013d9a:	bf43      	ittte	mi
 8013d9c:	2300      	movmi	r3, #0
 8013d9e:	f1c5 0801 	rsbmi	r8, r5, #1
 8013da2:	9304      	strmi	r3, [sp, #16]
 8013da4:	f04f 0800 	movpl.w	r8, #0
 8013da8:	f1ba 0f00 	cmp.w	sl, #0
 8013dac:	db3b      	blt.n	8013e26 <_dtoa_r+0x23e>
 8013dae:	9b04      	ldr	r3, [sp, #16]
 8013db0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013db4:	4453      	add	r3, sl
 8013db6:	9304      	str	r3, [sp, #16]
 8013db8:	2300      	movs	r3, #0
 8013dba:	9306      	str	r3, [sp, #24]
 8013dbc:	9b05      	ldr	r3, [sp, #20]
 8013dbe:	2b09      	cmp	r3, #9
 8013dc0:	d869      	bhi.n	8013e96 <_dtoa_r+0x2ae>
 8013dc2:	2b05      	cmp	r3, #5
 8013dc4:	bfc4      	itt	gt
 8013dc6:	3b04      	subgt	r3, #4
 8013dc8:	9305      	strgt	r3, [sp, #20]
 8013dca:	9b05      	ldr	r3, [sp, #20]
 8013dcc:	f1a3 0302 	sub.w	r3, r3, #2
 8013dd0:	bfcc      	ite	gt
 8013dd2:	2500      	movgt	r5, #0
 8013dd4:	2501      	movle	r5, #1
 8013dd6:	2b03      	cmp	r3, #3
 8013dd8:	d869      	bhi.n	8013eae <_dtoa_r+0x2c6>
 8013dda:	e8df f003 	tbb	[pc, r3]
 8013dde:	4e2c      	.short	0x4e2c
 8013de0:	5a4c      	.short	0x5a4c
 8013de2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013de6:	441d      	add	r5, r3
 8013de8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013dec:	2b20      	cmp	r3, #32
 8013dee:	bfc1      	itttt	gt
 8013df0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013df4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013df8:	fa09 f303 	lslgt.w	r3, r9, r3
 8013dfc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013e00:	bfda      	itte	le
 8013e02:	f1c3 0320 	rsble	r3, r3, #32
 8013e06:	fa06 f003 	lslle.w	r0, r6, r3
 8013e0a:	4318      	orrgt	r0, r3
 8013e0c:	f7ec fb7a 	bl	8000504 <__aeabi_ui2d>
 8013e10:	2301      	movs	r3, #1
 8013e12:	4606      	mov	r6, r0
 8013e14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013e18:	3d01      	subs	r5, #1
 8013e1a:	9310      	str	r3, [sp, #64]	; 0x40
 8013e1c:	e771      	b.n	8013d02 <_dtoa_r+0x11a>
 8013e1e:	2301      	movs	r3, #1
 8013e20:	e7b6      	b.n	8013d90 <_dtoa_r+0x1a8>
 8013e22:	900e      	str	r0, [sp, #56]	; 0x38
 8013e24:	e7b5      	b.n	8013d92 <_dtoa_r+0x1aa>
 8013e26:	f1ca 0300 	rsb	r3, sl, #0
 8013e2a:	9306      	str	r3, [sp, #24]
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	eba8 080a 	sub.w	r8, r8, sl
 8013e32:	930d      	str	r3, [sp, #52]	; 0x34
 8013e34:	e7c2      	b.n	8013dbc <_dtoa_r+0x1d4>
 8013e36:	2300      	movs	r3, #0
 8013e38:	9308      	str	r3, [sp, #32]
 8013e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	dc39      	bgt.n	8013eb4 <_dtoa_r+0x2cc>
 8013e40:	f04f 0901 	mov.w	r9, #1
 8013e44:	f8cd 9004 	str.w	r9, [sp, #4]
 8013e48:	464b      	mov	r3, r9
 8013e4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013e4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013e50:	2200      	movs	r2, #0
 8013e52:	6042      	str	r2, [r0, #4]
 8013e54:	2204      	movs	r2, #4
 8013e56:	f102 0614 	add.w	r6, r2, #20
 8013e5a:	429e      	cmp	r6, r3
 8013e5c:	6841      	ldr	r1, [r0, #4]
 8013e5e:	d92f      	bls.n	8013ec0 <_dtoa_r+0x2d8>
 8013e60:	4620      	mov	r0, r4
 8013e62:	f001 f953 	bl	801510c <_Balloc>
 8013e66:	9000      	str	r0, [sp, #0]
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	d14b      	bne.n	8013f04 <_dtoa_r+0x31c>
 8013e6c:	4b24      	ldr	r3, [pc, #144]	; (8013f00 <_dtoa_r+0x318>)
 8013e6e:	4602      	mov	r2, r0
 8013e70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013e74:	e6d1      	b.n	8013c1a <_dtoa_r+0x32>
 8013e76:	2301      	movs	r3, #1
 8013e78:	e7de      	b.n	8013e38 <_dtoa_r+0x250>
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	9308      	str	r3, [sp, #32]
 8013e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e80:	eb0a 0903 	add.w	r9, sl, r3
 8013e84:	f109 0301 	add.w	r3, r9, #1
 8013e88:	2b01      	cmp	r3, #1
 8013e8a:	9301      	str	r3, [sp, #4]
 8013e8c:	bfb8      	it	lt
 8013e8e:	2301      	movlt	r3, #1
 8013e90:	e7dd      	b.n	8013e4e <_dtoa_r+0x266>
 8013e92:	2301      	movs	r3, #1
 8013e94:	e7f2      	b.n	8013e7c <_dtoa_r+0x294>
 8013e96:	2501      	movs	r5, #1
 8013e98:	2300      	movs	r3, #0
 8013e9a:	9305      	str	r3, [sp, #20]
 8013e9c:	9508      	str	r5, [sp, #32]
 8013e9e:	f04f 39ff 	mov.w	r9, #4294967295
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	f8cd 9004 	str.w	r9, [sp, #4]
 8013ea8:	2312      	movs	r3, #18
 8013eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8013eac:	e7cf      	b.n	8013e4e <_dtoa_r+0x266>
 8013eae:	2301      	movs	r3, #1
 8013eb0:	9308      	str	r3, [sp, #32]
 8013eb2:	e7f4      	b.n	8013e9e <_dtoa_r+0x2b6>
 8013eb4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013eb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8013ebc:	464b      	mov	r3, r9
 8013ebe:	e7c6      	b.n	8013e4e <_dtoa_r+0x266>
 8013ec0:	3101      	adds	r1, #1
 8013ec2:	6041      	str	r1, [r0, #4]
 8013ec4:	0052      	lsls	r2, r2, #1
 8013ec6:	e7c6      	b.n	8013e56 <_dtoa_r+0x26e>
 8013ec8:	636f4361 	.word	0x636f4361
 8013ecc:	3fd287a7 	.word	0x3fd287a7
 8013ed0:	8b60c8b3 	.word	0x8b60c8b3
 8013ed4:	3fc68a28 	.word	0x3fc68a28
 8013ed8:	509f79fb 	.word	0x509f79fb
 8013edc:	3fd34413 	.word	0x3fd34413
 8013ee0:	0801914e 	.word	0x0801914e
 8013ee4:	08019165 	.word	0x08019165
 8013ee8:	7ff00000 	.word	0x7ff00000
 8013eec:	0801914a 	.word	0x0801914a
 8013ef0:	08019141 	.word	0x08019141
 8013ef4:	0801942a 	.word	0x0801942a
 8013ef8:	3ff80000 	.word	0x3ff80000
 8013efc:	08019340 	.word	0x08019340
 8013f00:	080191c4 	.word	0x080191c4
 8013f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f06:	9a00      	ldr	r2, [sp, #0]
 8013f08:	601a      	str	r2, [r3, #0]
 8013f0a:	9b01      	ldr	r3, [sp, #4]
 8013f0c:	2b0e      	cmp	r3, #14
 8013f0e:	f200 80ad 	bhi.w	801406c <_dtoa_r+0x484>
 8013f12:	2d00      	cmp	r5, #0
 8013f14:	f000 80aa 	beq.w	801406c <_dtoa_r+0x484>
 8013f18:	f1ba 0f00 	cmp.w	sl, #0
 8013f1c:	dd36      	ble.n	8013f8c <_dtoa_r+0x3a4>
 8013f1e:	4ac3      	ldr	r2, [pc, #780]	; (801422c <_dtoa_r+0x644>)
 8013f20:	f00a 030f 	and.w	r3, sl, #15
 8013f24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013f28:	ed93 7b00 	vldr	d7, [r3]
 8013f2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013f30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013f34:	eeb0 8a47 	vmov.f32	s16, s14
 8013f38:	eef0 8a67 	vmov.f32	s17, s15
 8013f3c:	d016      	beq.n	8013f6c <_dtoa_r+0x384>
 8013f3e:	4bbc      	ldr	r3, [pc, #752]	; (8014230 <_dtoa_r+0x648>)
 8013f40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013f44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013f48:	f7ec fc80 	bl	800084c <__aeabi_ddiv>
 8013f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f50:	f007 070f 	and.w	r7, r7, #15
 8013f54:	2503      	movs	r5, #3
 8013f56:	4eb6      	ldr	r6, [pc, #728]	; (8014230 <_dtoa_r+0x648>)
 8013f58:	b957      	cbnz	r7, 8013f70 <_dtoa_r+0x388>
 8013f5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f5e:	ec53 2b18 	vmov	r2, r3, d8
 8013f62:	f7ec fc73 	bl	800084c <__aeabi_ddiv>
 8013f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f6a:	e029      	b.n	8013fc0 <_dtoa_r+0x3d8>
 8013f6c:	2502      	movs	r5, #2
 8013f6e:	e7f2      	b.n	8013f56 <_dtoa_r+0x36e>
 8013f70:	07f9      	lsls	r1, r7, #31
 8013f72:	d508      	bpl.n	8013f86 <_dtoa_r+0x39e>
 8013f74:	ec51 0b18 	vmov	r0, r1, d8
 8013f78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013f7c:	f7ec fb3c 	bl	80005f8 <__aeabi_dmul>
 8013f80:	ec41 0b18 	vmov	d8, r0, r1
 8013f84:	3501      	adds	r5, #1
 8013f86:	107f      	asrs	r7, r7, #1
 8013f88:	3608      	adds	r6, #8
 8013f8a:	e7e5      	b.n	8013f58 <_dtoa_r+0x370>
 8013f8c:	f000 80a6 	beq.w	80140dc <_dtoa_r+0x4f4>
 8013f90:	f1ca 0600 	rsb	r6, sl, #0
 8013f94:	4ba5      	ldr	r3, [pc, #660]	; (801422c <_dtoa_r+0x644>)
 8013f96:	4fa6      	ldr	r7, [pc, #664]	; (8014230 <_dtoa_r+0x648>)
 8013f98:	f006 020f 	and.w	r2, r6, #15
 8013f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013fa8:	f7ec fb26 	bl	80005f8 <__aeabi_dmul>
 8013fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013fb0:	1136      	asrs	r6, r6, #4
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	2502      	movs	r5, #2
 8013fb6:	2e00      	cmp	r6, #0
 8013fb8:	f040 8085 	bne.w	80140c6 <_dtoa_r+0x4de>
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d1d2      	bne.n	8013f66 <_dtoa_r+0x37e>
 8013fc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	f000 808c 	beq.w	80140e0 <_dtoa_r+0x4f8>
 8013fc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013fcc:	4b99      	ldr	r3, [pc, #612]	; (8014234 <_dtoa_r+0x64c>)
 8013fce:	2200      	movs	r2, #0
 8013fd0:	4630      	mov	r0, r6
 8013fd2:	4639      	mov	r1, r7
 8013fd4:	f7ec fd82 	bl	8000adc <__aeabi_dcmplt>
 8013fd8:	2800      	cmp	r0, #0
 8013fda:	f000 8081 	beq.w	80140e0 <_dtoa_r+0x4f8>
 8013fde:	9b01      	ldr	r3, [sp, #4]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d07d      	beq.n	80140e0 <_dtoa_r+0x4f8>
 8013fe4:	f1b9 0f00 	cmp.w	r9, #0
 8013fe8:	dd3c      	ble.n	8014064 <_dtoa_r+0x47c>
 8013fea:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013fee:	9307      	str	r3, [sp, #28]
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	4b91      	ldr	r3, [pc, #580]	; (8014238 <_dtoa_r+0x650>)
 8013ff4:	4630      	mov	r0, r6
 8013ff6:	4639      	mov	r1, r7
 8013ff8:	f7ec fafe 	bl	80005f8 <__aeabi_dmul>
 8013ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014000:	3501      	adds	r5, #1
 8014002:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8014006:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801400a:	4628      	mov	r0, r5
 801400c:	f7ec fa8a 	bl	8000524 <__aeabi_i2d>
 8014010:	4632      	mov	r2, r6
 8014012:	463b      	mov	r3, r7
 8014014:	f7ec faf0 	bl	80005f8 <__aeabi_dmul>
 8014018:	4b88      	ldr	r3, [pc, #544]	; (801423c <_dtoa_r+0x654>)
 801401a:	2200      	movs	r2, #0
 801401c:	f7ec f936 	bl	800028c <__adddf3>
 8014020:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014028:	9303      	str	r3, [sp, #12]
 801402a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801402c:	2b00      	cmp	r3, #0
 801402e:	d15c      	bne.n	80140ea <_dtoa_r+0x502>
 8014030:	4b83      	ldr	r3, [pc, #524]	; (8014240 <_dtoa_r+0x658>)
 8014032:	2200      	movs	r2, #0
 8014034:	4630      	mov	r0, r6
 8014036:	4639      	mov	r1, r7
 8014038:	f7ec f926 	bl	8000288 <__aeabi_dsub>
 801403c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014040:	4606      	mov	r6, r0
 8014042:	460f      	mov	r7, r1
 8014044:	f7ec fd68 	bl	8000b18 <__aeabi_dcmpgt>
 8014048:	2800      	cmp	r0, #0
 801404a:	f040 8296 	bne.w	801457a <_dtoa_r+0x992>
 801404e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014052:	4630      	mov	r0, r6
 8014054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014058:	4639      	mov	r1, r7
 801405a:	f7ec fd3f 	bl	8000adc <__aeabi_dcmplt>
 801405e:	2800      	cmp	r0, #0
 8014060:	f040 8288 	bne.w	8014574 <_dtoa_r+0x98c>
 8014064:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014068:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801406c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801406e:	2b00      	cmp	r3, #0
 8014070:	f2c0 8158 	blt.w	8014324 <_dtoa_r+0x73c>
 8014074:	f1ba 0f0e 	cmp.w	sl, #14
 8014078:	f300 8154 	bgt.w	8014324 <_dtoa_r+0x73c>
 801407c:	4b6b      	ldr	r3, [pc, #428]	; (801422c <_dtoa_r+0x644>)
 801407e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014082:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014088:	2b00      	cmp	r3, #0
 801408a:	f280 80e3 	bge.w	8014254 <_dtoa_r+0x66c>
 801408e:	9b01      	ldr	r3, [sp, #4]
 8014090:	2b00      	cmp	r3, #0
 8014092:	f300 80df 	bgt.w	8014254 <_dtoa_r+0x66c>
 8014096:	f040 826d 	bne.w	8014574 <_dtoa_r+0x98c>
 801409a:	4b69      	ldr	r3, [pc, #420]	; (8014240 <_dtoa_r+0x658>)
 801409c:	2200      	movs	r2, #0
 801409e:	4640      	mov	r0, r8
 80140a0:	4649      	mov	r1, r9
 80140a2:	f7ec faa9 	bl	80005f8 <__aeabi_dmul>
 80140a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80140aa:	f7ec fd2b 	bl	8000b04 <__aeabi_dcmpge>
 80140ae:	9e01      	ldr	r6, [sp, #4]
 80140b0:	4637      	mov	r7, r6
 80140b2:	2800      	cmp	r0, #0
 80140b4:	f040 8243 	bne.w	801453e <_dtoa_r+0x956>
 80140b8:	9d00      	ldr	r5, [sp, #0]
 80140ba:	2331      	movs	r3, #49	; 0x31
 80140bc:	f805 3b01 	strb.w	r3, [r5], #1
 80140c0:	f10a 0a01 	add.w	sl, sl, #1
 80140c4:	e23f      	b.n	8014546 <_dtoa_r+0x95e>
 80140c6:	07f2      	lsls	r2, r6, #31
 80140c8:	d505      	bpl.n	80140d6 <_dtoa_r+0x4ee>
 80140ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80140ce:	f7ec fa93 	bl	80005f8 <__aeabi_dmul>
 80140d2:	3501      	adds	r5, #1
 80140d4:	2301      	movs	r3, #1
 80140d6:	1076      	asrs	r6, r6, #1
 80140d8:	3708      	adds	r7, #8
 80140da:	e76c      	b.n	8013fb6 <_dtoa_r+0x3ce>
 80140dc:	2502      	movs	r5, #2
 80140de:	e76f      	b.n	8013fc0 <_dtoa_r+0x3d8>
 80140e0:	9b01      	ldr	r3, [sp, #4]
 80140e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80140e6:	930c      	str	r3, [sp, #48]	; 0x30
 80140e8:	e78d      	b.n	8014006 <_dtoa_r+0x41e>
 80140ea:	9900      	ldr	r1, [sp, #0]
 80140ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80140ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80140f0:	4b4e      	ldr	r3, [pc, #312]	; (801422c <_dtoa_r+0x644>)
 80140f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80140f6:	4401      	add	r1, r0
 80140f8:	9102      	str	r1, [sp, #8]
 80140fa:	9908      	ldr	r1, [sp, #32]
 80140fc:	eeb0 8a47 	vmov.f32	s16, s14
 8014100:	eef0 8a67 	vmov.f32	s17, s15
 8014104:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014108:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801410c:	2900      	cmp	r1, #0
 801410e:	d045      	beq.n	801419c <_dtoa_r+0x5b4>
 8014110:	494c      	ldr	r1, [pc, #304]	; (8014244 <_dtoa_r+0x65c>)
 8014112:	2000      	movs	r0, #0
 8014114:	f7ec fb9a 	bl	800084c <__aeabi_ddiv>
 8014118:	ec53 2b18 	vmov	r2, r3, d8
 801411c:	f7ec f8b4 	bl	8000288 <__aeabi_dsub>
 8014120:	9d00      	ldr	r5, [sp, #0]
 8014122:	ec41 0b18 	vmov	d8, r0, r1
 8014126:	4639      	mov	r1, r7
 8014128:	4630      	mov	r0, r6
 801412a:	f7ec fd15 	bl	8000b58 <__aeabi_d2iz>
 801412e:	900c      	str	r0, [sp, #48]	; 0x30
 8014130:	f7ec f9f8 	bl	8000524 <__aeabi_i2d>
 8014134:	4602      	mov	r2, r0
 8014136:	460b      	mov	r3, r1
 8014138:	4630      	mov	r0, r6
 801413a:	4639      	mov	r1, r7
 801413c:	f7ec f8a4 	bl	8000288 <__aeabi_dsub>
 8014140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014142:	3330      	adds	r3, #48	; 0x30
 8014144:	f805 3b01 	strb.w	r3, [r5], #1
 8014148:	ec53 2b18 	vmov	r2, r3, d8
 801414c:	4606      	mov	r6, r0
 801414e:	460f      	mov	r7, r1
 8014150:	f7ec fcc4 	bl	8000adc <__aeabi_dcmplt>
 8014154:	2800      	cmp	r0, #0
 8014156:	d165      	bne.n	8014224 <_dtoa_r+0x63c>
 8014158:	4632      	mov	r2, r6
 801415a:	463b      	mov	r3, r7
 801415c:	4935      	ldr	r1, [pc, #212]	; (8014234 <_dtoa_r+0x64c>)
 801415e:	2000      	movs	r0, #0
 8014160:	f7ec f892 	bl	8000288 <__aeabi_dsub>
 8014164:	ec53 2b18 	vmov	r2, r3, d8
 8014168:	f7ec fcb8 	bl	8000adc <__aeabi_dcmplt>
 801416c:	2800      	cmp	r0, #0
 801416e:	f040 80b9 	bne.w	80142e4 <_dtoa_r+0x6fc>
 8014172:	9b02      	ldr	r3, [sp, #8]
 8014174:	429d      	cmp	r5, r3
 8014176:	f43f af75 	beq.w	8014064 <_dtoa_r+0x47c>
 801417a:	4b2f      	ldr	r3, [pc, #188]	; (8014238 <_dtoa_r+0x650>)
 801417c:	ec51 0b18 	vmov	r0, r1, d8
 8014180:	2200      	movs	r2, #0
 8014182:	f7ec fa39 	bl	80005f8 <__aeabi_dmul>
 8014186:	4b2c      	ldr	r3, [pc, #176]	; (8014238 <_dtoa_r+0x650>)
 8014188:	ec41 0b18 	vmov	d8, r0, r1
 801418c:	2200      	movs	r2, #0
 801418e:	4630      	mov	r0, r6
 8014190:	4639      	mov	r1, r7
 8014192:	f7ec fa31 	bl	80005f8 <__aeabi_dmul>
 8014196:	4606      	mov	r6, r0
 8014198:	460f      	mov	r7, r1
 801419a:	e7c4      	b.n	8014126 <_dtoa_r+0x53e>
 801419c:	ec51 0b17 	vmov	r0, r1, d7
 80141a0:	f7ec fa2a 	bl	80005f8 <__aeabi_dmul>
 80141a4:	9b02      	ldr	r3, [sp, #8]
 80141a6:	9d00      	ldr	r5, [sp, #0]
 80141a8:	930c      	str	r3, [sp, #48]	; 0x30
 80141aa:	ec41 0b18 	vmov	d8, r0, r1
 80141ae:	4639      	mov	r1, r7
 80141b0:	4630      	mov	r0, r6
 80141b2:	f7ec fcd1 	bl	8000b58 <__aeabi_d2iz>
 80141b6:	9011      	str	r0, [sp, #68]	; 0x44
 80141b8:	f7ec f9b4 	bl	8000524 <__aeabi_i2d>
 80141bc:	4602      	mov	r2, r0
 80141be:	460b      	mov	r3, r1
 80141c0:	4630      	mov	r0, r6
 80141c2:	4639      	mov	r1, r7
 80141c4:	f7ec f860 	bl	8000288 <__aeabi_dsub>
 80141c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141ca:	3330      	adds	r3, #48	; 0x30
 80141cc:	f805 3b01 	strb.w	r3, [r5], #1
 80141d0:	9b02      	ldr	r3, [sp, #8]
 80141d2:	429d      	cmp	r5, r3
 80141d4:	4606      	mov	r6, r0
 80141d6:	460f      	mov	r7, r1
 80141d8:	f04f 0200 	mov.w	r2, #0
 80141dc:	d134      	bne.n	8014248 <_dtoa_r+0x660>
 80141de:	4b19      	ldr	r3, [pc, #100]	; (8014244 <_dtoa_r+0x65c>)
 80141e0:	ec51 0b18 	vmov	r0, r1, d8
 80141e4:	f7ec f852 	bl	800028c <__adddf3>
 80141e8:	4602      	mov	r2, r0
 80141ea:	460b      	mov	r3, r1
 80141ec:	4630      	mov	r0, r6
 80141ee:	4639      	mov	r1, r7
 80141f0:	f7ec fc92 	bl	8000b18 <__aeabi_dcmpgt>
 80141f4:	2800      	cmp	r0, #0
 80141f6:	d175      	bne.n	80142e4 <_dtoa_r+0x6fc>
 80141f8:	ec53 2b18 	vmov	r2, r3, d8
 80141fc:	4911      	ldr	r1, [pc, #68]	; (8014244 <_dtoa_r+0x65c>)
 80141fe:	2000      	movs	r0, #0
 8014200:	f7ec f842 	bl	8000288 <__aeabi_dsub>
 8014204:	4602      	mov	r2, r0
 8014206:	460b      	mov	r3, r1
 8014208:	4630      	mov	r0, r6
 801420a:	4639      	mov	r1, r7
 801420c:	f7ec fc66 	bl	8000adc <__aeabi_dcmplt>
 8014210:	2800      	cmp	r0, #0
 8014212:	f43f af27 	beq.w	8014064 <_dtoa_r+0x47c>
 8014216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014218:	1e6b      	subs	r3, r5, #1
 801421a:	930c      	str	r3, [sp, #48]	; 0x30
 801421c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014220:	2b30      	cmp	r3, #48	; 0x30
 8014222:	d0f8      	beq.n	8014216 <_dtoa_r+0x62e>
 8014224:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014228:	e04a      	b.n	80142c0 <_dtoa_r+0x6d8>
 801422a:	bf00      	nop
 801422c:	08019340 	.word	0x08019340
 8014230:	08019318 	.word	0x08019318
 8014234:	3ff00000 	.word	0x3ff00000
 8014238:	40240000 	.word	0x40240000
 801423c:	401c0000 	.word	0x401c0000
 8014240:	40140000 	.word	0x40140000
 8014244:	3fe00000 	.word	0x3fe00000
 8014248:	4baf      	ldr	r3, [pc, #700]	; (8014508 <_dtoa_r+0x920>)
 801424a:	f7ec f9d5 	bl	80005f8 <__aeabi_dmul>
 801424e:	4606      	mov	r6, r0
 8014250:	460f      	mov	r7, r1
 8014252:	e7ac      	b.n	80141ae <_dtoa_r+0x5c6>
 8014254:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014258:	9d00      	ldr	r5, [sp, #0]
 801425a:	4642      	mov	r2, r8
 801425c:	464b      	mov	r3, r9
 801425e:	4630      	mov	r0, r6
 8014260:	4639      	mov	r1, r7
 8014262:	f7ec faf3 	bl	800084c <__aeabi_ddiv>
 8014266:	f7ec fc77 	bl	8000b58 <__aeabi_d2iz>
 801426a:	9002      	str	r0, [sp, #8]
 801426c:	f7ec f95a 	bl	8000524 <__aeabi_i2d>
 8014270:	4642      	mov	r2, r8
 8014272:	464b      	mov	r3, r9
 8014274:	f7ec f9c0 	bl	80005f8 <__aeabi_dmul>
 8014278:	4602      	mov	r2, r0
 801427a:	460b      	mov	r3, r1
 801427c:	4630      	mov	r0, r6
 801427e:	4639      	mov	r1, r7
 8014280:	f7ec f802 	bl	8000288 <__aeabi_dsub>
 8014284:	9e02      	ldr	r6, [sp, #8]
 8014286:	9f01      	ldr	r7, [sp, #4]
 8014288:	3630      	adds	r6, #48	; 0x30
 801428a:	f805 6b01 	strb.w	r6, [r5], #1
 801428e:	9e00      	ldr	r6, [sp, #0]
 8014290:	1bae      	subs	r6, r5, r6
 8014292:	42b7      	cmp	r7, r6
 8014294:	4602      	mov	r2, r0
 8014296:	460b      	mov	r3, r1
 8014298:	d137      	bne.n	801430a <_dtoa_r+0x722>
 801429a:	f7eb fff7 	bl	800028c <__adddf3>
 801429e:	4642      	mov	r2, r8
 80142a0:	464b      	mov	r3, r9
 80142a2:	4606      	mov	r6, r0
 80142a4:	460f      	mov	r7, r1
 80142a6:	f7ec fc37 	bl	8000b18 <__aeabi_dcmpgt>
 80142aa:	b9c8      	cbnz	r0, 80142e0 <_dtoa_r+0x6f8>
 80142ac:	4642      	mov	r2, r8
 80142ae:	464b      	mov	r3, r9
 80142b0:	4630      	mov	r0, r6
 80142b2:	4639      	mov	r1, r7
 80142b4:	f7ec fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 80142b8:	b110      	cbz	r0, 80142c0 <_dtoa_r+0x6d8>
 80142ba:	9b02      	ldr	r3, [sp, #8]
 80142bc:	07d9      	lsls	r1, r3, #31
 80142be:	d40f      	bmi.n	80142e0 <_dtoa_r+0x6f8>
 80142c0:	4620      	mov	r0, r4
 80142c2:	4659      	mov	r1, fp
 80142c4:	f000 ff62 	bl	801518c <_Bfree>
 80142c8:	2300      	movs	r3, #0
 80142ca:	702b      	strb	r3, [r5, #0]
 80142cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142ce:	f10a 0001 	add.w	r0, sl, #1
 80142d2:	6018      	str	r0, [r3, #0]
 80142d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	f43f acd8 	beq.w	8013c8c <_dtoa_r+0xa4>
 80142dc:	601d      	str	r5, [r3, #0]
 80142de:	e4d5      	b.n	8013c8c <_dtoa_r+0xa4>
 80142e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80142e4:	462b      	mov	r3, r5
 80142e6:	461d      	mov	r5, r3
 80142e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80142ec:	2a39      	cmp	r2, #57	; 0x39
 80142ee:	d108      	bne.n	8014302 <_dtoa_r+0x71a>
 80142f0:	9a00      	ldr	r2, [sp, #0]
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d1f7      	bne.n	80142e6 <_dtoa_r+0x6fe>
 80142f6:	9a07      	ldr	r2, [sp, #28]
 80142f8:	9900      	ldr	r1, [sp, #0]
 80142fa:	3201      	adds	r2, #1
 80142fc:	9207      	str	r2, [sp, #28]
 80142fe:	2230      	movs	r2, #48	; 0x30
 8014300:	700a      	strb	r2, [r1, #0]
 8014302:	781a      	ldrb	r2, [r3, #0]
 8014304:	3201      	adds	r2, #1
 8014306:	701a      	strb	r2, [r3, #0]
 8014308:	e78c      	b.n	8014224 <_dtoa_r+0x63c>
 801430a:	4b7f      	ldr	r3, [pc, #508]	; (8014508 <_dtoa_r+0x920>)
 801430c:	2200      	movs	r2, #0
 801430e:	f7ec f973 	bl	80005f8 <__aeabi_dmul>
 8014312:	2200      	movs	r2, #0
 8014314:	2300      	movs	r3, #0
 8014316:	4606      	mov	r6, r0
 8014318:	460f      	mov	r7, r1
 801431a:	f7ec fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 801431e:	2800      	cmp	r0, #0
 8014320:	d09b      	beq.n	801425a <_dtoa_r+0x672>
 8014322:	e7cd      	b.n	80142c0 <_dtoa_r+0x6d8>
 8014324:	9a08      	ldr	r2, [sp, #32]
 8014326:	2a00      	cmp	r2, #0
 8014328:	f000 80c4 	beq.w	80144b4 <_dtoa_r+0x8cc>
 801432c:	9a05      	ldr	r2, [sp, #20]
 801432e:	2a01      	cmp	r2, #1
 8014330:	f300 80a8 	bgt.w	8014484 <_dtoa_r+0x89c>
 8014334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014336:	2a00      	cmp	r2, #0
 8014338:	f000 80a0 	beq.w	801447c <_dtoa_r+0x894>
 801433c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014340:	9e06      	ldr	r6, [sp, #24]
 8014342:	4645      	mov	r5, r8
 8014344:	9a04      	ldr	r2, [sp, #16]
 8014346:	2101      	movs	r1, #1
 8014348:	441a      	add	r2, r3
 801434a:	4620      	mov	r0, r4
 801434c:	4498      	add	r8, r3
 801434e:	9204      	str	r2, [sp, #16]
 8014350:	f001 f822 	bl	8015398 <__i2b>
 8014354:	4607      	mov	r7, r0
 8014356:	2d00      	cmp	r5, #0
 8014358:	dd0b      	ble.n	8014372 <_dtoa_r+0x78a>
 801435a:	9b04      	ldr	r3, [sp, #16]
 801435c:	2b00      	cmp	r3, #0
 801435e:	dd08      	ble.n	8014372 <_dtoa_r+0x78a>
 8014360:	42ab      	cmp	r3, r5
 8014362:	9a04      	ldr	r2, [sp, #16]
 8014364:	bfa8      	it	ge
 8014366:	462b      	movge	r3, r5
 8014368:	eba8 0803 	sub.w	r8, r8, r3
 801436c:	1aed      	subs	r5, r5, r3
 801436e:	1ad3      	subs	r3, r2, r3
 8014370:	9304      	str	r3, [sp, #16]
 8014372:	9b06      	ldr	r3, [sp, #24]
 8014374:	b1fb      	cbz	r3, 80143b6 <_dtoa_r+0x7ce>
 8014376:	9b08      	ldr	r3, [sp, #32]
 8014378:	2b00      	cmp	r3, #0
 801437a:	f000 809f 	beq.w	80144bc <_dtoa_r+0x8d4>
 801437e:	2e00      	cmp	r6, #0
 8014380:	dd11      	ble.n	80143a6 <_dtoa_r+0x7be>
 8014382:	4639      	mov	r1, r7
 8014384:	4632      	mov	r2, r6
 8014386:	4620      	mov	r0, r4
 8014388:	f001 f8c2 	bl	8015510 <__pow5mult>
 801438c:	465a      	mov	r2, fp
 801438e:	4601      	mov	r1, r0
 8014390:	4607      	mov	r7, r0
 8014392:	4620      	mov	r0, r4
 8014394:	f001 f816 	bl	80153c4 <__multiply>
 8014398:	4659      	mov	r1, fp
 801439a:	9007      	str	r0, [sp, #28]
 801439c:	4620      	mov	r0, r4
 801439e:	f000 fef5 	bl	801518c <_Bfree>
 80143a2:	9b07      	ldr	r3, [sp, #28]
 80143a4:	469b      	mov	fp, r3
 80143a6:	9b06      	ldr	r3, [sp, #24]
 80143a8:	1b9a      	subs	r2, r3, r6
 80143aa:	d004      	beq.n	80143b6 <_dtoa_r+0x7ce>
 80143ac:	4659      	mov	r1, fp
 80143ae:	4620      	mov	r0, r4
 80143b0:	f001 f8ae 	bl	8015510 <__pow5mult>
 80143b4:	4683      	mov	fp, r0
 80143b6:	2101      	movs	r1, #1
 80143b8:	4620      	mov	r0, r4
 80143ba:	f000 ffed 	bl	8015398 <__i2b>
 80143be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	4606      	mov	r6, r0
 80143c4:	dd7c      	ble.n	80144c0 <_dtoa_r+0x8d8>
 80143c6:	461a      	mov	r2, r3
 80143c8:	4601      	mov	r1, r0
 80143ca:	4620      	mov	r0, r4
 80143cc:	f001 f8a0 	bl	8015510 <__pow5mult>
 80143d0:	9b05      	ldr	r3, [sp, #20]
 80143d2:	2b01      	cmp	r3, #1
 80143d4:	4606      	mov	r6, r0
 80143d6:	dd76      	ble.n	80144c6 <_dtoa_r+0x8de>
 80143d8:	2300      	movs	r3, #0
 80143da:	9306      	str	r3, [sp, #24]
 80143dc:	6933      	ldr	r3, [r6, #16]
 80143de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80143e2:	6918      	ldr	r0, [r3, #16]
 80143e4:	f000 ff88 	bl	80152f8 <__hi0bits>
 80143e8:	f1c0 0020 	rsb	r0, r0, #32
 80143ec:	9b04      	ldr	r3, [sp, #16]
 80143ee:	4418      	add	r0, r3
 80143f0:	f010 001f 	ands.w	r0, r0, #31
 80143f4:	f000 8086 	beq.w	8014504 <_dtoa_r+0x91c>
 80143f8:	f1c0 0320 	rsb	r3, r0, #32
 80143fc:	2b04      	cmp	r3, #4
 80143fe:	dd7f      	ble.n	8014500 <_dtoa_r+0x918>
 8014400:	f1c0 001c 	rsb	r0, r0, #28
 8014404:	9b04      	ldr	r3, [sp, #16]
 8014406:	4403      	add	r3, r0
 8014408:	4480      	add	r8, r0
 801440a:	4405      	add	r5, r0
 801440c:	9304      	str	r3, [sp, #16]
 801440e:	f1b8 0f00 	cmp.w	r8, #0
 8014412:	dd05      	ble.n	8014420 <_dtoa_r+0x838>
 8014414:	4659      	mov	r1, fp
 8014416:	4642      	mov	r2, r8
 8014418:	4620      	mov	r0, r4
 801441a:	f001 f8d3 	bl	80155c4 <__lshift>
 801441e:	4683      	mov	fp, r0
 8014420:	9b04      	ldr	r3, [sp, #16]
 8014422:	2b00      	cmp	r3, #0
 8014424:	dd05      	ble.n	8014432 <_dtoa_r+0x84a>
 8014426:	4631      	mov	r1, r6
 8014428:	461a      	mov	r2, r3
 801442a:	4620      	mov	r0, r4
 801442c:	f001 f8ca 	bl	80155c4 <__lshift>
 8014430:	4606      	mov	r6, r0
 8014432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014434:	2b00      	cmp	r3, #0
 8014436:	d069      	beq.n	801450c <_dtoa_r+0x924>
 8014438:	4631      	mov	r1, r6
 801443a:	4658      	mov	r0, fp
 801443c:	f001 f92e 	bl	801569c <__mcmp>
 8014440:	2800      	cmp	r0, #0
 8014442:	da63      	bge.n	801450c <_dtoa_r+0x924>
 8014444:	2300      	movs	r3, #0
 8014446:	4659      	mov	r1, fp
 8014448:	220a      	movs	r2, #10
 801444a:	4620      	mov	r0, r4
 801444c:	f000 fec0 	bl	80151d0 <__multadd>
 8014450:	9b08      	ldr	r3, [sp, #32]
 8014452:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014456:	4683      	mov	fp, r0
 8014458:	2b00      	cmp	r3, #0
 801445a:	f000 818f 	beq.w	801477c <_dtoa_r+0xb94>
 801445e:	4639      	mov	r1, r7
 8014460:	2300      	movs	r3, #0
 8014462:	220a      	movs	r2, #10
 8014464:	4620      	mov	r0, r4
 8014466:	f000 feb3 	bl	80151d0 <__multadd>
 801446a:	f1b9 0f00 	cmp.w	r9, #0
 801446e:	4607      	mov	r7, r0
 8014470:	f300 808e 	bgt.w	8014590 <_dtoa_r+0x9a8>
 8014474:	9b05      	ldr	r3, [sp, #20]
 8014476:	2b02      	cmp	r3, #2
 8014478:	dc50      	bgt.n	801451c <_dtoa_r+0x934>
 801447a:	e089      	b.n	8014590 <_dtoa_r+0x9a8>
 801447c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801447e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014482:	e75d      	b.n	8014340 <_dtoa_r+0x758>
 8014484:	9b01      	ldr	r3, [sp, #4]
 8014486:	1e5e      	subs	r6, r3, #1
 8014488:	9b06      	ldr	r3, [sp, #24]
 801448a:	42b3      	cmp	r3, r6
 801448c:	bfbf      	itttt	lt
 801448e:	9b06      	ldrlt	r3, [sp, #24]
 8014490:	9606      	strlt	r6, [sp, #24]
 8014492:	1af2      	sublt	r2, r6, r3
 8014494:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8014496:	bfb6      	itet	lt
 8014498:	189b      	addlt	r3, r3, r2
 801449a:	1b9e      	subge	r6, r3, r6
 801449c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801449e:	9b01      	ldr	r3, [sp, #4]
 80144a0:	bfb8      	it	lt
 80144a2:	2600      	movlt	r6, #0
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	bfb5      	itete	lt
 80144a8:	eba8 0503 	sublt.w	r5, r8, r3
 80144ac:	9b01      	ldrge	r3, [sp, #4]
 80144ae:	2300      	movlt	r3, #0
 80144b0:	4645      	movge	r5, r8
 80144b2:	e747      	b.n	8014344 <_dtoa_r+0x75c>
 80144b4:	9e06      	ldr	r6, [sp, #24]
 80144b6:	9f08      	ldr	r7, [sp, #32]
 80144b8:	4645      	mov	r5, r8
 80144ba:	e74c      	b.n	8014356 <_dtoa_r+0x76e>
 80144bc:	9a06      	ldr	r2, [sp, #24]
 80144be:	e775      	b.n	80143ac <_dtoa_r+0x7c4>
 80144c0:	9b05      	ldr	r3, [sp, #20]
 80144c2:	2b01      	cmp	r3, #1
 80144c4:	dc18      	bgt.n	80144f8 <_dtoa_r+0x910>
 80144c6:	9b02      	ldr	r3, [sp, #8]
 80144c8:	b9b3      	cbnz	r3, 80144f8 <_dtoa_r+0x910>
 80144ca:	9b03      	ldr	r3, [sp, #12]
 80144cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80144d0:	b9a3      	cbnz	r3, 80144fc <_dtoa_r+0x914>
 80144d2:	9b03      	ldr	r3, [sp, #12]
 80144d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80144d8:	0d1b      	lsrs	r3, r3, #20
 80144da:	051b      	lsls	r3, r3, #20
 80144dc:	b12b      	cbz	r3, 80144ea <_dtoa_r+0x902>
 80144de:	9b04      	ldr	r3, [sp, #16]
 80144e0:	3301      	adds	r3, #1
 80144e2:	9304      	str	r3, [sp, #16]
 80144e4:	f108 0801 	add.w	r8, r8, #1
 80144e8:	2301      	movs	r3, #1
 80144ea:	9306      	str	r3, [sp, #24]
 80144ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	f47f af74 	bne.w	80143dc <_dtoa_r+0x7f4>
 80144f4:	2001      	movs	r0, #1
 80144f6:	e779      	b.n	80143ec <_dtoa_r+0x804>
 80144f8:	2300      	movs	r3, #0
 80144fa:	e7f6      	b.n	80144ea <_dtoa_r+0x902>
 80144fc:	9b02      	ldr	r3, [sp, #8]
 80144fe:	e7f4      	b.n	80144ea <_dtoa_r+0x902>
 8014500:	d085      	beq.n	801440e <_dtoa_r+0x826>
 8014502:	4618      	mov	r0, r3
 8014504:	301c      	adds	r0, #28
 8014506:	e77d      	b.n	8014404 <_dtoa_r+0x81c>
 8014508:	40240000 	.word	0x40240000
 801450c:	9b01      	ldr	r3, [sp, #4]
 801450e:	2b00      	cmp	r3, #0
 8014510:	dc38      	bgt.n	8014584 <_dtoa_r+0x99c>
 8014512:	9b05      	ldr	r3, [sp, #20]
 8014514:	2b02      	cmp	r3, #2
 8014516:	dd35      	ble.n	8014584 <_dtoa_r+0x99c>
 8014518:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801451c:	f1b9 0f00 	cmp.w	r9, #0
 8014520:	d10d      	bne.n	801453e <_dtoa_r+0x956>
 8014522:	4631      	mov	r1, r6
 8014524:	464b      	mov	r3, r9
 8014526:	2205      	movs	r2, #5
 8014528:	4620      	mov	r0, r4
 801452a:	f000 fe51 	bl	80151d0 <__multadd>
 801452e:	4601      	mov	r1, r0
 8014530:	4606      	mov	r6, r0
 8014532:	4658      	mov	r0, fp
 8014534:	f001 f8b2 	bl	801569c <__mcmp>
 8014538:	2800      	cmp	r0, #0
 801453a:	f73f adbd 	bgt.w	80140b8 <_dtoa_r+0x4d0>
 801453e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014540:	9d00      	ldr	r5, [sp, #0]
 8014542:	ea6f 0a03 	mvn.w	sl, r3
 8014546:	f04f 0800 	mov.w	r8, #0
 801454a:	4631      	mov	r1, r6
 801454c:	4620      	mov	r0, r4
 801454e:	f000 fe1d 	bl	801518c <_Bfree>
 8014552:	2f00      	cmp	r7, #0
 8014554:	f43f aeb4 	beq.w	80142c0 <_dtoa_r+0x6d8>
 8014558:	f1b8 0f00 	cmp.w	r8, #0
 801455c:	d005      	beq.n	801456a <_dtoa_r+0x982>
 801455e:	45b8      	cmp	r8, r7
 8014560:	d003      	beq.n	801456a <_dtoa_r+0x982>
 8014562:	4641      	mov	r1, r8
 8014564:	4620      	mov	r0, r4
 8014566:	f000 fe11 	bl	801518c <_Bfree>
 801456a:	4639      	mov	r1, r7
 801456c:	4620      	mov	r0, r4
 801456e:	f000 fe0d 	bl	801518c <_Bfree>
 8014572:	e6a5      	b.n	80142c0 <_dtoa_r+0x6d8>
 8014574:	2600      	movs	r6, #0
 8014576:	4637      	mov	r7, r6
 8014578:	e7e1      	b.n	801453e <_dtoa_r+0x956>
 801457a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801457c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014580:	4637      	mov	r7, r6
 8014582:	e599      	b.n	80140b8 <_dtoa_r+0x4d0>
 8014584:	9b08      	ldr	r3, [sp, #32]
 8014586:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801458a:	2b00      	cmp	r3, #0
 801458c:	f000 80fd 	beq.w	801478a <_dtoa_r+0xba2>
 8014590:	2d00      	cmp	r5, #0
 8014592:	dd05      	ble.n	80145a0 <_dtoa_r+0x9b8>
 8014594:	4639      	mov	r1, r7
 8014596:	462a      	mov	r2, r5
 8014598:	4620      	mov	r0, r4
 801459a:	f001 f813 	bl	80155c4 <__lshift>
 801459e:	4607      	mov	r7, r0
 80145a0:	9b06      	ldr	r3, [sp, #24]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d05c      	beq.n	8014660 <_dtoa_r+0xa78>
 80145a6:	6879      	ldr	r1, [r7, #4]
 80145a8:	4620      	mov	r0, r4
 80145aa:	f000 fdaf 	bl	801510c <_Balloc>
 80145ae:	4605      	mov	r5, r0
 80145b0:	b928      	cbnz	r0, 80145be <_dtoa_r+0x9d6>
 80145b2:	4b80      	ldr	r3, [pc, #512]	; (80147b4 <_dtoa_r+0xbcc>)
 80145b4:	4602      	mov	r2, r0
 80145b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80145ba:	f7ff bb2e 	b.w	8013c1a <_dtoa_r+0x32>
 80145be:	693a      	ldr	r2, [r7, #16]
 80145c0:	3202      	adds	r2, #2
 80145c2:	0092      	lsls	r2, r2, #2
 80145c4:	f107 010c 	add.w	r1, r7, #12
 80145c8:	300c      	adds	r0, #12
 80145ca:	f000 fd91 	bl	80150f0 <memcpy>
 80145ce:	2201      	movs	r2, #1
 80145d0:	4629      	mov	r1, r5
 80145d2:	4620      	mov	r0, r4
 80145d4:	f000 fff6 	bl	80155c4 <__lshift>
 80145d8:	9b00      	ldr	r3, [sp, #0]
 80145da:	3301      	adds	r3, #1
 80145dc:	9301      	str	r3, [sp, #4]
 80145de:	9b00      	ldr	r3, [sp, #0]
 80145e0:	444b      	add	r3, r9
 80145e2:	9307      	str	r3, [sp, #28]
 80145e4:	9b02      	ldr	r3, [sp, #8]
 80145e6:	f003 0301 	and.w	r3, r3, #1
 80145ea:	46b8      	mov	r8, r7
 80145ec:	9306      	str	r3, [sp, #24]
 80145ee:	4607      	mov	r7, r0
 80145f0:	9b01      	ldr	r3, [sp, #4]
 80145f2:	4631      	mov	r1, r6
 80145f4:	3b01      	subs	r3, #1
 80145f6:	4658      	mov	r0, fp
 80145f8:	9302      	str	r3, [sp, #8]
 80145fa:	f7ff fa69 	bl	8013ad0 <quorem>
 80145fe:	4603      	mov	r3, r0
 8014600:	3330      	adds	r3, #48	; 0x30
 8014602:	9004      	str	r0, [sp, #16]
 8014604:	4641      	mov	r1, r8
 8014606:	4658      	mov	r0, fp
 8014608:	9308      	str	r3, [sp, #32]
 801460a:	f001 f847 	bl	801569c <__mcmp>
 801460e:	463a      	mov	r2, r7
 8014610:	4681      	mov	r9, r0
 8014612:	4631      	mov	r1, r6
 8014614:	4620      	mov	r0, r4
 8014616:	f001 f85d 	bl	80156d4 <__mdiff>
 801461a:	68c2      	ldr	r2, [r0, #12]
 801461c:	9b08      	ldr	r3, [sp, #32]
 801461e:	4605      	mov	r5, r0
 8014620:	bb02      	cbnz	r2, 8014664 <_dtoa_r+0xa7c>
 8014622:	4601      	mov	r1, r0
 8014624:	4658      	mov	r0, fp
 8014626:	f001 f839 	bl	801569c <__mcmp>
 801462a:	9b08      	ldr	r3, [sp, #32]
 801462c:	4602      	mov	r2, r0
 801462e:	4629      	mov	r1, r5
 8014630:	4620      	mov	r0, r4
 8014632:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8014636:	f000 fda9 	bl	801518c <_Bfree>
 801463a:	9b05      	ldr	r3, [sp, #20]
 801463c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801463e:	9d01      	ldr	r5, [sp, #4]
 8014640:	ea43 0102 	orr.w	r1, r3, r2
 8014644:	9b06      	ldr	r3, [sp, #24]
 8014646:	430b      	orrs	r3, r1
 8014648:	9b08      	ldr	r3, [sp, #32]
 801464a:	d10d      	bne.n	8014668 <_dtoa_r+0xa80>
 801464c:	2b39      	cmp	r3, #57	; 0x39
 801464e:	d029      	beq.n	80146a4 <_dtoa_r+0xabc>
 8014650:	f1b9 0f00 	cmp.w	r9, #0
 8014654:	dd01      	ble.n	801465a <_dtoa_r+0xa72>
 8014656:	9b04      	ldr	r3, [sp, #16]
 8014658:	3331      	adds	r3, #49	; 0x31
 801465a:	9a02      	ldr	r2, [sp, #8]
 801465c:	7013      	strb	r3, [r2, #0]
 801465e:	e774      	b.n	801454a <_dtoa_r+0x962>
 8014660:	4638      	mov	r0, r7
 8014662:	e7b9      	b.n	80145d8 <_dtoa_r+0x9f0>
 8014664:	2201      	movs	r2, #1
 8014666:	e7e2      	b.n	801462e <_dtoa_r+0xa46>
 8014668:	f1b9 0f00 	cmp.w	r9, #0
 801466c:	db06      	blt.n	801467c <_dtoa_r+0xa94>
 801466e:	9905      	ldr	r1, [sp, #20]
 8014670:	ea41 0909 	orr.w	r9, r1, r9
 8014674:	9906      	ldr	r1, [sp, #24]
 8014676:	ea59 0101 	orrs.w	r1, r9, r1
 801467a:	d120      	bne.n	80146be <_dtoa_r+0xad6>
 801467c:	2a00      	cmp	r2, #0
 801467e:	ddec      	ble.n	801465a <_dtoa_r+0xa72>
 8014680:	4659      	mov	r1, fp
 8014682:	2201      	movs	r2, #1
 8014684:	4620      	mov	r0, r4
 8014686:	9301      	str	r3, [sp, #4]
 8014688:	f000 ff9c 	bl	80155c4 <__lshift>
 801468c:	4631      	mov	r1, r6
 801468e:	4683      	mov	fp, r0
 8014690:	f001 f804 	bl	801569c <__mcmp>
 8014694:	2800      	cmp	r0, #0
 8014696:	9b01      	ldr	r3, [sp, #4]
 8014698:	dc02      	bgt.n	80146a0 <_dtoa_r+0xab8>
 801469a:	d1de      	bne.n	801465a <_dtoa_r+0xa72>
 801469c:	07da      	lsls	r2, r3, #31
 801469e:	d5dc      	bpl.n	801465a <_dtoa_r+0xa72>
 80146a0:	2b39      	cmp	r3, #57	; 0x39
 80146a2:	d1d8      	bne.n	8014656 <_dtoa_r+0xa6e>
 80146a4:	9a02      	ldr	r2, [sp, #8]
 80146a6:	2339      	movs	r3, #57	; 0x39
 80146a8:	7013      	strb	r3, [r2, #0]
 80146aa:	462b      	mov	r3, r5
 80146ac:	461d      	mov	r5, r3
 80146ae:	3b01      	subs	r3, #1
 80146b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80146b4:	2a39      	cmp	r2, #57	; 0x39
 80146b6:	d050      	beq.n	801475a <_dtoa_r+0xb72>
 80146b8:	3201      	adds	r2, #1
 80146ba:	701a      	strb	r2, [r3, #0]
 80146bc:	e745      	b.n	801454a <_dtoa_r+0x962>
 80146be:	2a00      	cmp	r2, #0
 80146c0:	dd03      	ble.n	80146ca <_dtoa_r+0xae2>
 80146c2:	2b39      	cmp	r3, #57	; 0x39
 80146c4:	d0ee      	beq.n	80146a4 <_dtoa_r+0xabc>
 80146c6:	3301      	adds	r3, #1
 80146c8:	e7c7      	b.n	801465a <_dtoa_r+0xa72>
 80146ca:	9a01      	ldr	r2, [sp, #4]
 80146cc:	9907      	ldr	r1, [sp, #28]
 80146ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80146d2:	428a      	cmp	r2, r1
 80146d4:	d02a      	beq.n	801472c <_dtoa_r+0xb44>
 80146d6:	4659      	mov	r1, fp
 80146d8:	2300      	movs	r3, #0
 80146da:	220a      	movs	r2, #10
 80146dc:	4620      	mov	r0, r4
 80146de:	f000 fd77 	bl	80151d0 <__multadd>
 80146e2:	45b8      	cmp	r8, r7
 80146e4:	4683      	mov	fp, r0
 80146e6:	f04f 0300 	mov.w	r3, #0
 80146ea:	f04f 020a 	mov.w	r2, #10
 80146ee:	4641      	mov	r1, r8
 80146f0:	4620      	mov	r0, r4
 80146f2:	d107      	bne.n	8014704 <_dtoa_r+0xb1c>
 80146f4:	f000 fd6c 	bl	80151d0 <__multadd>
 80146f8:	4680      	mov	r8, r0
 80146fa:	4607      	mov	r7, r0
 80146fc:	9b01      	ldr	r3, [sp, #4]
 80146fe:	3301      	adds	r3, #1
 8014700:	9301      	str	r3, [sp, #4]
 8014702:	e775      	b.n	80145f0 <_dtoa_r+0xa08>
 8014704:	f000 fd64 	bl	80151d0 <__multadd>
 8014708:	4639      	mov	r1, r7
 801470a:	4680      	mov	r8, r0
 801470c:	2300      	movs	r3, #0
 801470e:	220a      	movs	r2, #10
 8014710:	4620      	mov	r0, r4
 8014712:	f000 fd5d 	bl	80151d0 <__multadd>
 8014716:	4607      	mov	r7, r0
 8014718:	e7f0      	b.n	80146fc <_dtoa_r+0xb14>
 801471a:	f1b9 0f00 	cmp.w	r9, #0
 801471e:	9a00      	ldr	r2, [sp, #0]
 8014720:	bfcc      	ite	gt
 8014722:	464d      	movgt	r5, r9
 8014724:	2501      	movle	r5, #1
 8014726:	4415      	add	r5, r2
 8014728:	f04f 0800 	mov.w	r8, #0
 801472c:	4659      	mov	r1, fp
 801472e:	2201      	movs	r2, #1
 8014730:	4620      	mov	r0, r4
 8014732:	9301      	str	r3, [sp, #4]
 8014734:	f000 ff46 	bl	80155c4 <__lshift>
 8014738:	4631      	mov	r1, r6
 801473a:	4683      	mov	fp, r0
 801473c:	f000 ffae 	bl	801569c <__mcmp>
 8014740:	2800      	cmp	r0, #0
 8014742:	dcb2      	bgt.n	80146aa <_dtoa_r+0xac2>
 8014744:	d102      	bne.n	801474c <_dtoa_r+0xb64>
 8014746:	9b01      	ldr	r3, [sp, #4]
 8014748:	07db      	lsls	r3, r3, #31
 801474a:	d4ae      	bmi.n	80146aa <_dtoa_r+0xac2>
 801474c:	462b      	mov	r3, r5
 801474e:	461d      	mov	r5, r3
 8014750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014754:	2a30      	cmp	r2, #48	; 0x30
 8014756:	d0fa      	beq.n	801474e <_dtoa_r+0xb66>
 8014758:	e6f7      	b.n	801454a <_dtoa_r+0x962>
 801475a:	9a00      	ldr	r2, [sp, #0]
 801475c:	429a      	cmp	r2, r3
 801475e:	d1a5      	bne.n	80146ac <_dtoa_r+0xac4>
 8014760:	f10a 0a01 	add.w	sl, sl, #1
 8014764:	2331      	movs	r3, #49	; 0x31
 8014766:	e779      	b.n	801465c <_dtoa_r+0xa74>
 8014768:	4b13      	ldr	r3, [pc, #76]	; (80147b8 <_dtoa_r+0xbd0>)
 801476a:	f7ff baaf 	b.w	8013ccc <_dtoa_r+0xe4>
 801476e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014770:	2b00      	cmp	r3, #0
 8014772:	f47f aa86 	bne.w	8013c82 <_dtoa_r+0x9a>
 8014776:	4b11      	ldr	r3, [pc, #68]	; (80147bc <_dtoa_r+0xbd4>)
 8014778:	f7ff baa8 	b.w	8013ccc <_dtoa_r+0xe4>
 801477c:	f1b9 0f00 	cmp.w	r9, #0
 8014780:	dc03      	bgt.n	801478a <_dtoa_r+0xba2>
 8014782:	9b05      	ldr	r3, [sp, #20]
 8014784:	2b02      	cmp	r3, #2
 8014786:	f73f aec9 	bgt.w	801451c <_dtoa_r+0x934>
 801478a:	9d00      	ldr	r5, [sp, #0]
 801478c:	4631      	mov	r1, r6
 801478e:	4658      	mov	r0, fp
 8014790:	f7ff f99e 	bl	8013ad0 <quorem>
 8014794:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014798:	f805 3b01 	strb.w	r3, [r5], #1
 801479c:	9a00      	ldr	r2, [sp, #0]
 801479e:	1aaa      	subs	r2, r5, r2
 80147a0:	4591      	cmp	r9, r2
 80147a2:	ddba      	ble.n	801471a <_dtoa_r+0xb32>
 80147a4:	4659      	mov	r1, fp
 80147a6:	2300      	movs	r3, #0
 80147a8:	220a      	movs	r2, #10
 80147aa:	4620      	mov	r0, r4
 80147ac:	f000 fd10 	bl	80151d0 <__multadd>
 80147b0:	4683      	mov	fp, r0
 80147b2:	e7eb      	b.n	801478c <_dtoa_r+0xba4>
 80147b4:	080191c4 	.word	0x080191c4
 80147b8:	08019429 	.word	0x08019429
 80147bc:	08019141 	.word	0x08019141

080147c0 <std>:
 80147c0:	2300      	movs	r3, #0
 80147c2:	b510      	push	{r4, lr}
 80147c4:	4604      	mov	r4, r0
 80147c6:	e9c0 3300 	strd	r3, r3, [r0]
 80147ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80147ce:	6083      	str	r3, [r0, #8]
 80147d0:	8181      	strh	r1, [r0, #12]
 80147d2:	6643      	str	r3, [r0, #100]	; 0x64
 80147d4:	81c2      	strh	r2, [r0, #14]
 80147d6:	6183      	str	r3, [r0, #24]
 80147d8:	4619      	mov	r1, r3
 80147da:	2208      	movs	r2, #8
 80147dc:	305c      	adds	r0, #92	; 0x5c
 80147de:	f7fd fb65 	bl	8011eac <memset>
 80147e2:	4b05      	ldr	r3, [pc, #20]	; (80147f8 <std+0x38>)
 80147e4:	6263      	str	r3, [r4, #36]	; 0x24
 80147e6:	4b05      	ldr	r3, [pc, #20]	; (80147fc <std+0x3c>)
 80147e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80147ea:	4b05      	ldr	r3, [pc, #20]	; (8014800 <std+0x40>)
 80147ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80147ee:	4b05      	ldr	r3, [pc, #20]	; (8014804 <std+0x44>)
 80147f0:	6224      	str	r4, [r4, #32]
 80147f2:	6323      	str	r3, [r4, #48]	; 0x30
 80147f4:	bd10      	pop	{r4, pc}
 80147f6:	bf00      	nop
 80147f8:	08012c55 	.word	0x08012c55
 80147fc:	08012c7b 	.word	0x08012c7b
 8014800:	08012cb3 	.word	0x08012cb3
 8014804:	08012cd7 	.word	0x08012cd7

08014808 <_cleanup_r>:
 8014808:	4901      	ldr	r1, [pc, #4]	; (8014810 <_cleanup_r+0x8>)
 801480a:	f000 b8af 	b.w	801496c <_fwalk_reent>
 801480e:	bf00      	nop
 8014810:	08016a2d 	.word	0x08016a2d

08014814 <__sfmoreglue>:
 8014814:	b570      	push	{r4, r5, r6, lr}
 8014816:	1e4a      	subs	r2, r1, #1
 8014818:	2568      	movs	r5, #104	; 0x68
 801481a:	4355      	muls	r5, r2
 801481c:	460e      	mov	r6, r1
 801481e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014822:	f001 f98d 	bl	8015b40 <_malloc_r>
 8014826:	4604      	mov	r4, r0
 8014828:	b140      	cbz	r0, 801483c <__sfmoreglue+0x28>
 801482a:	2100      	movs	r1, #0
 801482c:	e9c0 1600 	strd	r1, r6, [r0]
 8014830:	300c      	adds	r0, #12
 8014832:	60a0      	str	r0, [r4, #8]
 8014834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014838:	f7fd fb38 	bl	8011eac <memset>
 801483c:	4620      	mov	r0, r4
 801483e:	bd70      	pop	{r4, r5, r6, pc}

08014840 <__sfp_lock_acquire>:
 8014840:	4801      	ldr	r0, [pc, #4]	; (8014848 <__sfp_lock_acquire+0x8>)
 8014842:	f000 bc26 	b.w	8015092 <__retarget_lock_acquire_recursive>
 8014846:	bf00      	nop
 8014848:	2000330c 	.word	0x2000330c

0801484c <__sfp_lock_release>:
 801484c:	4801      	ldr	r0, [pc, #4]	; (8014854 <__sfp_lock_release+0x8>)
 801484e:	f000 bc21 	b.w	8015094 <__retarget_lock_release_recursive>
 8014852:	bf00      	nop
 8014854:	2000330c 	.word	0x2000330c

08014858 <__sinit_lock_acquire>:
 8014858:	4801      	ldr	r0, [pc, #4]	; (8014860 <__sinit_lock_acquire+0x8>)
 801485a:	f000 bc1a 	b.w	8015092 <__retarget_lock_acquire_recursive>
 801485e:	bf00      	nop
 8014860:	2000330b 	.word	0x2000330b

08014864 <__sinit_lock_release>:
 8014864:	4801      	ldr	r0, [pc, #4]	; (801486c <__sinit_lock_release+0x8>)
 8014866:	f000 bc15 	b.w	8015094 <__retarget_lock_release_recursive>
 801486a:	bf00      	nop
 801486c:	2000330b 	.word	0x2000330b

08014870 <__sinit>:
 8014870:	b510      	push	{r4, lr}
 8014872:	4604      	mov	r4, r0
 8014874:	f7ff fff0 	bl	8014858 <__sinit_lock_acquire>
 8014878:	69a3      	ldr	r3, [r4, #24]
 801487a:	b11b      	cbz	r3, 8014884 <__sinit+0x14>
 801487c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014880:	f7ff bff0 	b.w	8014864 <__sinit_lock_release>
 8014884:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014888:	6523      	str	r3, [r4, #80]	; 0x50
 801488a:	4b13      	ldr	r3, [pc, #76]	; (80148d8 <__sinit+0x68>)
 801488c:	4a13      	ldr	r2, [pc, #76]	; (80148dc <__sinit+0x6c>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	62a2      	str	r2, [r4, #40]	; 0x28
 8014892:	42a3      	cmp	r3, r4
 8014894:	bf04      	itt	eq
 8014896:	2301      	moveq	r3, #1
 8014898:	61a3      	streq	r3, [r4, #24]
 801489a:	4620      	mov	r0, r4
 801489c:	f000 f820 	bl	80148e0 <__sfp>
 80148a0:	6060      	str	r0, [r4, #4]
 80148a2:	4620      	mov	r0, r4
 80148a4:	f000 f81c 	bl	80148e0 <__sfp>
 80148a8:	60a0      	str	r0, [r4, #8]
 80148aa:	4620      	mov	r0, r4
 80148ac:	f000 f818 	bl	80148e0 <__sfp>
 80148b0:	2200      	movs	r2, #0
 80148b2:	60e0      	str	r0, [r4, #12]
 80148b4:	2104      	movs	r1, #4
 80148b6:	6860      	ldr	r0, [r4, #4]
 80148b8:	f7ff ff82 	bl	80147c0 <std>
 80148bc:	68a0      	ldr	r0, [r4, #8]
 80148be:	2201      	movs	r2, #1
 80148c0:	2109      	movs	r1, #9
 80148c2:	f7ff ff7d 	bl	80147c0 <std>
 80148c6:	68e0      	ldr	r0, [r4, #12]
 80148c8:	2202      	movs	r2, #2
 80148ca:	2112      	movs	r1, #18
 80148cc:	f7ff ff78 	bl	80147c0 <std>
 80148d0:	2301      	movs	r3, #1
 80148d2:	61a3      	str	r3, [r4, #24]
 80148d4:	e7d2      	b.n	801487c <__sinit+0xc>
 80148d6:	bf00      	nop
 80148d8:	08018fb4 	.word	0x08018fb4
 80148dc:	08014809 	.word	0x08014809

080148e0 <__sfp>:
 80148e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148e2:	4607      	mov	r7, r0
 80148e4:	f7ff ffac 	bl	8014840 <__sfp_lock_acquire>
 80148e8:	4b1e      	ldr	r3, [pc, #120]	; (8014964 <__sfp+0x84>)
 80148ea:	681e      	ldr	r6, [r3, #0]
 80148ec:	69b3      	ldr	r3, [r6, #24]
 80148ee:	b913      	cbnz	r3, 80148f6 <__sfp+0x16>
 80148f0:	4630      	mov	r0, r6
 80148f2:	f7ff ffbd 	bl	8014870 <__sinit>
 80148f6:	3648      	adds	r6, #72	; 0x48
 80148f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80148fc:	3b01      	subs	r3, #1
 80148fe:	d503      	bpl.n	8014908 <__sfp+0x28>
 8014900:	6833      	ldr	r3, [r6, #0]
 8014902:	b30b      	cbz	r3, 8014948 <__sfp+0x68>
 8014904:	6836      	ldr	r6, [r6, #0]
 8014906:	e7f7      	b.n	80148f8 <__sfp+0x18>
 8014908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801490c:	b9d5      	cbnz	r5, 8014944 <__sfp+0x64>
 801490e:	4b16      	ldr	r3, [pc, #88]	; (8014968 <__sfp+0x88>)
 8014910:	60e3      	str	r3, [r4, #12]
 8014912:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014916:	6665      	str	r5, [r4, #100]	; 0x64
 8014918:	f000 fbba 	bl	8015090 <__retarget_lock_init_recursive>
 801491c:	f7ff ff96 	bl	801484c <__sfp_lock_release>
 8014920:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014924:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014928:	6025      	str	r5, [r4, #0]
 801492a:	61a5      	str	r5, [r4, #24]
 801492c:	2208      	movs	r2, #8
 801492e:	4629      	mov	r1, r5
 8014930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014934:	f7fd faba 	bl	8011eac <memset>
 8014938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801493c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014940:	4620      	mov	r0, r4
 8014942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014944:	3468      	adds	r4, #104	; 0x68
 8014946:	e7d9      	b.n	80148fc <__sfp+0x1c>
 8014948:	2104      	movs	r1, #4
 801494a:	4638      	mov	r0, r7
 801494c:	f7ff ff62 	bl	8014814 <__sfmoreglue>
 8014950:	4604      	mov	r4, r0
 8014952:	6030      	str	r0, [r6, #0]
 8014954:	2800      	cmp	r0, #0
 8014956:	d1d5      	bne.n	8014904 <__sfp+0x24>
 8014958:	f7ff ff78 	bl	801484c <__sfp_lock_release>
 801495c:	230c      	movs	r3, #12
 801495e:	603b      	str	r3, [r7, #0]
 8014960:	e7ee      	b.n	8014940 <__sfp+0x60>
 8014962:	bf00      	nop
 8014964:	08018fb4 	.word	0x08018fb4
 8014968:	ffff0001 	.word	0xffff0001

0801496c <_fwalk_reent>:
 801496c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014970:	4606      	mov	r6, r0
 8014972:	4688      	mov	r8, r1
 8014974:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014978:	2700      	movs	r7, #0
 801497a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801497e:	f1b9 0901 	subs.w	r9, r9, #1
 8014982:	d505      	bpl.n	8014990 <_fwalk_reent+0x24>
 8014984:	6824      	ldr	r4, [r4, #0]
 8014986:	2c00      	cmp	r4, #0
 8014988:	d1f7      	bne.n	801497a <_fwalk_reent+0xe>
 801498a:	4638      	mov	r0, r7
 801498c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014990:	89ab      	ldrh	r3, [r5, #12]
 8014992:	2b01      	cmp	r3, #1
 8014994:	d907      	bls.n	80149a6 <_fwalk_reent+0x3a>
 8014996:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801499a:	3301      	adds	r3, #1
 801499c:	d003      	beq.n	80149a6 <_fwalk_reent+0x3a>
 801499e:	4629      	mov	r1, r5
 80149a0:	4630      	mov	r0, r6
 80149a2:	47c0      	blx	r8
 80149a4:	4307      	orrs	r7, r0
 80149a6:	3568      	adds	r5, #104	; 0x68
 80149a8:	e7e9      	b.n	801497e <_fwalk_reent+0x12>

080149aa <rshift>:
 80149aa:	6903      	ldr	r3, [r0, #16]
 80149ac:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80149b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149b4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80149b8:	f100 0414 	add.w	r4, r0, #20
 80149bc:	dd45      	ble.n	8014a4a <rshift+0xa0>
 80149be:	f011 011f 	ands.w	r1, r1, #31
 80149c2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80149c6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80149ca:	d10c      	bne.n	80149e6 <rshift+0x3c>
 80149cc:	f100 0710 	add.w	r7, r0, #16
 80149d0:	4629      	mov	r1, r5
 80149d2:	42b1      	cmp	r1, r6
 80149d4:	d334      	bcc.n	8014a40 <rshift+0x96>
 80149d6:	1a9b      	subs	r3, r3, r2
 80149d8:	009b      	lsls	r3, r3, #2
 80149da:	1eea      	subs	r2, r5, #3
 80149dc:	4296      	cmp	r6, r2
 80149de:	bf38      	it	cc
 80149e0:	2300      	movcc	r3, #0
 80149e2:	4423      	add	r3, r4
 80149e4:	e015      	b.n	8014a12 <rshift+0x68>
 80149e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80149ea:	f1c1 0820 	rsb	r8, r1, #32
 80149ee:	40cf      	lsrs	r7, r1
 80149f0:	f105 0e04 	add.w	lr, r5, #4
 80149f4:	46a1      	mov	r9, r4
 80149f6:	4576      	cmp	r6, lr
 80149f8:	46f4      	mov	ip, lr
 80149fa:	d815      	bhi.n	8014a28 <rshift+0x7e>
 80149fc:	1a9b      	subs	r3, r3, r2
 80149fe:	009a      	lsls	r2, r3, #2
 8014a00:	3a04      	subs	r2, #4
 8014a02:	3501      	adds	r5, #1
 8014a04:	42ae      	cmp	r6, r5
 8014a06:	bf38      	it	cc
 8014a08:	2200      	movcc	r2, #0
 8014a0a:	18a3      	adds	r3, r4, r2
 8014a0c:	50a7      	str	r7, [r4, r2]
 8014a0e:	b107      	cbz	r7, 8014a12 <rshift+0x68>
 8014a10:	3304      	adds	r3, #4
 8014a12:	1b1a      	subs	r2, r3, r4
 8014a14:	42a3      	cmp	r3, r4
 8014a16:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014a1a:	bf08      	it	eq
 8014a1c:	2300      	moveq	r3, #0
 8014a1e:	6102      	str	r2, [r0, #16]
 8014a20:	bf08      	it	eq
 8014a22:	6143      	streq	r3, [r0, #20]
 8014a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a28:	f8dc c000 	ldr.w	ip, [ip]
 8014a2c:	fa0c fc08 	lsl.w	ip, ip, r8
 8014a30:	ea4c 0707 	orr.w	r7, ip, r7
 8014a34:	f849 7b04 	str.w	r7, [r9], #4
 8014a38:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014a3c:	40cf      	lsrs	r7, r1
 8014a3e:	e7da      	b.n	80149f6 <rshift+0x4c>
 8014a40:	f851 cb04 	ldr.w	ip, [r1], #4
 8014a44:	f847 cf04 	str.w	ip, [r7, #4]!
 8014a48:	e7c3      	b.n	80149d2 <rshift+0x28>
 8014a4a:	4623      	mov	r3, r4
 8014a4c:	e7e1      	b.n	8014a12 <rshift+0x68>

08014a4e <__hexdig_fun>:
 8014a4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014a52:	2b09      	cmp	r3, #9
 8014a54:	d802      	bhi.n	8014a5c <__hexdig_fun+0xe>
 8014a56:	3820      	subs	r0, #32
 8014a58:	b2c0      	uxtb	r0, r0
 8014a5a:	4770      	bx	lr
 8014a5c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014a60:	2b05      	cmp	r3, #5
 8014a62:	d801      	bhi.n	8014a68 <__hexdig_fun+0x1a>
 8014a64:	3847      	subs	r0, #71	; 0x47
 8014a66:	e7f7      	b.n	8014a58 <__hexdig_fun+0xa>
 8014a68:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014a6c:	2b05      	cmp	r3, #5
 8014a6e:	d801      	bhi.n	8014a74 <__hexdig_fun+0x26>
 8014a70:	3827      	subs	r0, #39	; 0x27
 8014a72:	e7f1      	b.n	8014a58 <__hexdig_fun+0xa>
 8014a74:	2000      	movs	r0, #0
 8014a76:	4770      	bx	lr

08014a78 <__gethex>:
 8014a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a7c:	ed2d 8b02 	vpush	{d8}
 8014a80:	b089      	sub	sp, #36	; 0x24
 8014a82:	ee08 0a10 	vmov	s16, r0
 8014a86:	9304      	str	r3, [sp, #16]
 8014a88:	4bbc      	ldr	r3, [pc, #752]	; (8014d7c <__gethex+0x304>)
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	9301      	str	r3, [sp, #4]
 8014a8e:	4618      	mov	r0, r3
 8014a90:	468b      	mov	fp, r1
 8014a92:	4690      	mov	r8, r2
 8014a94:	f7eb fb9c 	bl	80001d0 <strlen>
 8014a98:	9b01      	ldr	r3, [sp, #4]
 8014a9a:	f8db 2000 	ldr.w	r2, [fp]
 8014a9e:	4403      	add	r3, r0
 8014aa0:	4682      	mov	sl, r0
 8014aa2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014aa6:	9305      	str	r3, [sp, #20]
 8014aa8:	1c93      	adds	r3, r2, #2
 8014aaa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014aae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014ab2:	32fe      	adds	r2, #254	; 0xfe
 8014ab4:	18d1      	adds	r1, r2, r3
 8014ab6:	461f      	mov	r7, r3
 8014ab8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014abc:	9100      	str	r1, [sp, #0]
 8014abe:	2830      	cmp	r0, #48	; 0x30
 8014ac0:	d0f8      	beq.n	8014ab4 <__gethex+0x3c>
 8014ac2:	f7ff ffc4 	bl	8014a4e <__hexdig_fun>
 8014ac6:	4604      	mov	r4, r0
 8014ac8:	2800      	cmp	r0, #0
 8014aca:	d13a      	bne.n	8014b42 <__gethex+0xca>
 8014acc:	9901      	ldr	r1, [sp, #4]
 8014ace:	4652      	mov	r2, sl
 8014ad0:	4638      	mov	r0, r7
 8014ad2:	f001 fd6f 	bl	80165b4 <strncmp>
 8014ad6:	4605      	mov	r5, r0
 8014ad8:	2800      	cmp	r0, #0
 8014ada:	d168      	bne.n	8014bae <__gethex+0x136>
 8014adc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8014ae0:	eb07 060a 	add.w	r6, r7, sl
 8014ae4:	f7ff ffb3 	bl	8014a4e <__hexdig_fun>
 8014ae8:	2800      	cmp	r0, #0
 8014aea:	d062      	beq.n	8014bb2 <__gethex+0x13a>
 8014aec:	4633      	mov	r3, r6
 8014aee:	7818      	ldrb	r0, [r3, #0]
 8014af0:	2830      	cmp	r0, #48	; 0x30
 8014af2:	461f      	mov	r7, r3
 8014af4:	f103 0301 	add.w	r3, r3, #1
 8014af8:	d0f9      	beq.n	8014aee <__gethex+0x76>
 8014afa:	f7ff ffa8 	bl	8014a4e <__hexdig_fun>
 8014afe:	2301      	movs	r3, #1
 8014b00:	fab0 f480 	clz	r4, r0
 8014b04:	0964      	lsrs	r4, r4, #5
 8014b06:	4635      	mov	r5, r6
 8014b08:	9300      	str	r3, [sp, #0]
 8014b0a:	463a      	mov	r2, r7
 8014b0c:	4616      	mov	r6, r2
 8014b0e:	3201      	adds	r2, #1
 8014b10:	7830      	ldrb	r0, [r6, #0]
 8014b12:	f7ff ff9c 	bl	8014a4e <__hexdig_fun>
 8014b16:	2800      	cmp	r0, #0
 8014b18:	d1f8      	bne.n	8014b0c <__gethex+0x94>
 8014b1a:	9901      	ldr	r1, [sp, #4]
 8014b1c:	4652      	mov	r2, sl
 8014b1e:	4630      	mov	r0, r6
 8014b20:	f001 fd48 	bl	80165b4 <strncmp>
 8014b24:	b980      	cbnz	r0, 8014b48 <__gethex+0xd0>
 8014b26:	b94d      	cbnz	r5, 8014b3c <__gethex+0xc4>
 8014b28:	eb06 050a 	add.w	r5, r6, sl
 8014b2c:	462a      	mov	r2, r5
 8014b2e:	4616      	mov	r6, r2
 8014b30:	3201      	adds	r2, #1
 8014b32:	7830      	ldrb	r0, [r6, #0]
 8014b34:	f7ff ff8b 	bl	8014a4e <__hexdig_fun>
 8014b38:	2800      	cmp	r0, #0
 8014b3a:	d1f8      	bne.n	8014b2e <__gethex+0xb6>
 8014b3c:	1bad      	subs	r5, r5, r6
 8014b3e:	00ad      	lsls	r5, r5, #2
 8014b40:	e004      	b.n	8014b4c <__gethex+0xd4>
 8014b42:	2400      	movs	r4, #0
 8014b44:	4625      	mov	r5, r4
 8014b46:	e7e0      	b.n	8014b0a <__gethex+0x92>
 8014b48:	2d00      	cmp	r5, #0
 8014b4a:	d1f7      	bne.n	8014b3c <__gethex+0xc4>
 8014b4c:	7833      	ldrb	r3, [r6, #0]
 8014b4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014b52:	2b50      	cmp	r3, #80	; 0x50
 8014b54:	d13b      	bne.n	8014bce <__gethex+0x156>
 8014b56:	7873      	ldrb	r3, [r6, #1]
 8014b58:	2b2b      	cmp	r3, #43	; 0x2b
 8014b5a:	d02c      	beq.n	8014bb6 <__gethex+0x13e>
 8014b5c:	2b2d      	cmp	r3, #45	; 0x2d
 8014b5e:	d02e      	beq.n	8014bbe <__gethex+0x146>
 8014b60:	1c71      	adds	r1, r6, #1
 8014b62:	f04f 0900 	mov.w	r9, #0
 8014b66:	7808      	ldrb	r0, [r1, #0]
 8014b68:	f7ff ff71 	bl	8014a4e <__hexdig_fun>
 8014b6c:	1e43      	subs	r3, r0, #1
 8014b6e:	b2db      	uxtb	r3, r3
 8014b70:	2b18      	cmp	r3, #24
 8014b72:	d82c      	bhi.n	8014bce <__gethex+0x156>
 8014b74:	f1a0 0210 	sub.w	r2, r0, #16
 8014b78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014b7c:	f7ff ff67 	bl	8014a4e <__hexdig_fun>
 8014b80:	1e43      	subs	r3, r0, #1
 8014b82:	b2db      	uxtb	r3, r3
 8014b84:	2b18      	cmp	r3, #24
 8014b86:	d91d      	bls.n	8014bc4 <__gethex+0x14c>
 8014b88:	f1b9 0f00 	cmp.w	r9, #0
 8014b8c:	d000      	beq.n	8014b90 <__gethex+0x118>
 8014b8e:	4252      	negs	r2, r2
 8014b90:	4415      	add	r5, r2
 8014b92:	f8cb 1000 	str.w	r1, [fp]
 8014b96:	b1e4      	cbz	r4, 8014bd2 <__gethex+0x15a>
 8014b98:	9b00      	ldr	r3, [sp, #0]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	bf14      	ite	ne
 8014b9e:	2700      	movne	r7, #0
 8014ba0:	2706      	moveq	r7, #6
 8014ba2:	4638      	mov	r0, r7
 8014ba4:	b009      	add	sp, #36	; 0x24
 8014ba6:	ecbd 8b02 	vpop	{d8}
 8014baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bae:	463e      	mov	r6, r7
 8014bb0:	4625      	mov	r5, r4
 8014bb2:	2401      	movs	r4, #1
 8014bb4:	e7ca      	b.n	8014b4c <__gethex+0xd4>
 8014bb6:	f04f 0900 	mov.w	r9, #0
 8014bba:	1cb1      	adds	r1, r6, #2
 8014bbc:	e7d3      	b.n	8014b66 <__gethex+0xee>
 8014bbe:	f04f 0901 	mov.w	r9, #1
 8014bc2:	e7fa      	b.n	8014bba <__gethex+0x142>
 8014bc4:	230a      	movs	r3, #10
 8014bc6:	fb03 0202 	mla	r2, r3, r2, r0
 8014bca:	3a10      	subs	r2, #16
 8014bcc:	e7d4      	b.n	8014b78 <__gethex+0x100>
 8014bce:	4631      	mov	r1, r6
 8014bd0:	e7df      	b.n	8014b92 <__gethex+0x11a>
 8014bd2:	1bf3      	subs	r3, r6, r7
 8014bd4:	3b01      	subs	r3, #1
 8014bd6:	4621      	mov	r1, r4
 8014bd8:	2b07      	cmp	r3, #7
 8014bda:	dc0b      	bgt.n	8014bf4 <__gethex+0x17c>
 8014bdc:	ee18 0a10 	vmov	r0, s16
 8014be0:	f000 fa94 	bl	801510c <_Balloc>
 8014be4:	4604      	mov	r4, r0
 8014be6:	b940      	cbnz	r0, 8014bfa <__gethex+0x182>
 8014be8:	4b65      	ldr	r3, [pc, #404]	; (8014d80 <__gethex+0x308>)
 8014bea:	4602      	mov	r2, r0
 8014bec:	21de      	movs	r1, #222	; 0xde
 8014bee:	4865      	ldr	r0, [pc, #404]	; (8014d84 <__gethex+0x30c>)
 8014bf0:	f001 fe78 	bl	80168e4 <__assert_func>
 8014bf4:	3101      	adds	r1, #1
 8014bf6:	105b      	asrs	r3, r3, #1
 8014bf8:	e7ee      	b.n	8014bd8 <__gethex+0x160>
 8014bfa:	f100 0914 	add.w	r9, r0, #20
 8014bfe:	f04f 0b00 	mov.w	fp, #0
 8014c02:	f1ca 0301 	rsb	r3, sl, #1
 8014c06:	f8cd 9008 	str.w	r9, [sp, #8]
 8014c0a:	f8cd b000 	str.w	fp, [sp]
 8014c0e:	9306      	str	r3, [sp, #24]
 8014c10:	42b7      	cmp	r7, r6
 8014c12:	d340      	bcc.n	8014c96 <__gethex+0x21e>
 8014c14:	9802      	ldr	r0, [sp, #8]
 8014c16:	9b00      	ldr	r3, [sp, #0]
 8014c18:	f840 3b04 	str.w	r3, [r0], #4
 8014c1c:	eba0 0009 	sub.w	r0, r0, r9
 8014c20:	1080      	asrs	r0, r0, #2
 8014c22:	0146      	lsls	r6, r0, #5
 8014c24:	6120      	str	r0, [r4, #16]
 8014c26:	4618      	mov	r0, r3
 8014c28:	f000 fb66 	bl	80152f8 <__hi0bits>
 8014c2c:	1a30      	subs	r0, r6, r0
 8014c2e:	f8d8 6000 	ldr.w	r6, [r8]
 8014c32:	42b0      	cmp	r0, r6
 8014c34:	dd63      	ble.n	8014cfe <__gethex+0x286>
 8014c36:	1b87      	subs	r7, r0, r6
 8014c38:	4639      	mov	r1, r7
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	f000 ff00 	bl	8015a40 <__any_on>
 8014c40:	4682      	mov	sl, r0
 8014c42:	b1a8      	cbz	r0, 8014c70 <__gethex+0x1f8>
 8014c44:	1e7b      	subs	r3, r7, #1
 8014c46:	1159      	asrs	r1, r3, #5
 8014c48:	f003 021f 	and.w	r2, r3, #31
 8014c4c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014c50:	f04f 0a01 	mov.w	sl, #1
 8014c54:	fa0a f202 	lsl.w	r2, sl, r2
 8014c58:	420a      	tst	r2, r1
 8014c5a:	d009      	beq.n	8014c70 <__gethex+0x1f8>
 8014c5c:	4553      	cmp	r3, sl
 8014c5e:	dd05      	ble.n	8014c6c <__gethex+0x1f4>
 8014c60:	1eb9      	subs	r1, r7, #2
 8014c62:	4620      	mov	r0, r4
 8014c64:	f000 feec 	bl	8015a40 <__any_on>
 8014c68:	2800      	cmp	r0, #0
 8014c6a:	d145      	bne.n	8014cf8 <__gethex+0x280>
 8014c6c:	f04f 0a02 	mov.w	sl, #2
 8014c70:	4639      	mov	r1, r7
 8014c72:	4620      	mov	r0, r4
 8014c74:	f7ff fe99 	bl	80149aa <rshift>
 8014c78:	443d      	add	r5, r7
 8014c7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014c7e:	42ab      	cmp	r3, r5
 8014c80:	da4c      	bge.n	8014d1c <__gethex+0x2a4>
 8014c82:	ee18 0a10 	vmov	r0, s16
 8014c86:	4621      	mov	r1, r4
 8014c88:	f000 fa80 	bl	801518c <_Bfree>
 8014c8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014c8e:	2300      	movs	r3, #0
 8014c90:	6013      	str	r3, [r2, #0]
 8014c92:	27a3      	movs	r7, #163	; 0xa3
 8014c94:	e785      	b.n	8014ba2 <__gethex+0x12a>
 8014c96:	1e73      	subs	r3, r6, #1
 8014c98:	9a05      	ldr	r2, [sp, #20]
 8014c9a:	9303      	str	r3, [sp, #12]
 8014c9c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014ca0:	4293      	cmp	r3, r2
 8014ca2:	d019      	beq.n	8014cd8 <__gethex+0x260>
 8014ca4:	f1bb 0f20 	cmp.w	fp, #32
 8014ca8:	d107      	bne.n	8014cba <__gethex+0x242>
 8014caa:	9b02      	ldr	r3, [sp, #8]
 8014cac:	9a00      	ldr	r2, [sp, #0]
 8014cae:	f843 2b04 	str.w	r2, [r3], #4
 8014cb2:	9302      	str	r3, [sp, #8]
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	9300      	str	r3, [sp, #0]
 8014cb8:	469b      	mov	fp, r3
 8014cba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014cbe:	f7ff fec6 	bl	8014a4e <__hexdig_fun>
 8014cc2:	9b00      	ldr	r3, [sp, #0]
 8014cc4:	f000 000f 	and.w	r0, r0, #15
 8014cc8:	fa00 f00b 	lsl.w	r0, r0, fp
 8014ccc:	4303      	orrs	r3, r0
 8014cce:	9300      	str	r3, [sp, #0]
 8014cd0:	f10b 0b04 	add.w	fp, fp, #4
 8014cd4:	9b03      	ldr	r3, [sp, #12]
 8014cd6:	e00d      	b.n	8014cf4 <__gethex+0x27c>
 8014cd8:	9b03      	ldr	r3, [sp, #12]
 8014cda:	9a06      	ldr	r2, [sp, #24]
 8014cdc:	4413      	add	r3, r2
 8014cde:	42bb      	cmp	r3, r7
 8014ce0:	d3e0      	bcc.n	8014ca4 <__gethex+0x22c>
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	9901      	ldr	r1, [sp, #4]
 8014ce6:	9307      	str	r3, [sp, #28]
 8014ce8:	4652      	mov	r2, sl
 8014cea:	f001 fc63 	bl	80165b4 <strncmp>
 8014cee:	9b07      	ldr	r3, [sp, #28]
 8014cf0:	2800      	cmp	r0, #0
 8014cf2:	d1d7      	bne.n	8014ca4 <__gethex+0x22c>
 8014cf4:	461e      	mov	r6, r3
 8014cf6:	e78b      	b.n	8014c10 <__gethex+0x198>
 8014cf8:	f04f 0a03 	mov.w	sl, #3
 8014cfc:	e7b8      	b.n	8014c70 <__gethex+0x1f8>
 8014cfe:	da0a      	bge.n	8014d16 <__gethex+0x29e>
 8014d00:	1a37      	subs	r7, r6, r0
 8014d02:	4621      	mov	r1, r4
 8014d04:	ee18 0a10 	vmov	r0, s16
 8014d08:	463a      	mov	r2, r7
 8014d0a:	f000 fc5b 	bl	80155c4 <__lshift>
 8014d0e:	1bed      	subs	r5, r5, r7
 8014d10:	4604      	mov	r4, r0
 8014d12:	f100 0914 	add.w	r9, r0, #20
 8014d16:	f04f 0a00 	mov.w	sl, #0
 8014d1a:	e7ae      	b.n	8014c7a <__gethex+0x202>
 8014d1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014d20:	42a8      	cmp	r0, r5
 8014d22:	dd72      	ble.n	8014e0a <__gethex+0x392>
 8014d24:	1b45      	subs	r5, r0, r5
 8014d26:	42ae      	cmp	r6, r5
 8014d28:	dc36      	bgt.n	8014d98 <__gethex+0x320>
 8014d2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014d2e:	2b02      	cmp	r3, #2
 8014d30:	d02a      	beq.n	8014d88 <__gethex+0x310>
 8014d32:	2b03      	cmp	r3, #3
 8014d34:	d02c      	beq.n	8014d90 <__gethex+0x318>
 8014d36:	2b01      	cmp	r3, #1
 8014d38:	d115      	bne.n	8014d66 <__gethex+0x2ee>
 8014d3a:	42ae      	cmp	r6, r5
 8014d3c:	d113      	bne.n	8014d66 <__gethex+0x2ee>
 8014d3e:	2e01      	cmp	r6, #1
 8014d40:	d10b      	bne.n	8014d5a <__gethex+0x2e2>
 8014d42:	9a04      	ldr	r2, [sp, #16]
 8014d44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014d48:	6013      	str	r3, [r2, #0]
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	6123      	str	r3, [r4, #16]
 8014d4e:	f8c9 3000 	str.w	r3, [r9]
 8014d52:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014d54:	2762      	movs	r7, #98	; 0x62
 8014d56:	601c      	str	r4, [r3, #0]
 8014d58:	e723      	b.n	8014ba2 <__gethex+0x12a>
 8014d5a:	1e71      	subs	r1, r6, #1
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	f000 fe6f 	bl	8015a40 <__any_on>
 8014d62:	2800      	cmp	r0, #0
 8014d64:	d1ed      	bne.n	8014d42 <__gethex+0x2ca>
 8014d66:	ee18 0a10 	vmov	r0, s16
 8014d6a:	4621      	mov	r1, r4
 8014d6c:	f000 fa0e 	bl	801518c <_Bfree>
 8014d70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014d72:	2300      	movs	r3, #0
 8014d74:	6013      	str	r3, [r2, #0]
 8014d76:	2750      	movs	r7, #80	; 0x50
 8014d78:	e713      	b.n	8014ba2 <__gethex+0x12a>
 8014d7a:	bf00      	nop
 8014d7c:	080192a4 	.word	0x080192a4
 8014d80:	080191c4 	.word	0x080191c4
 8014d84:	08019238 	.word	0x08019238
 8014d88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d1eb      	bne.n	8014d66 <__gethex+0x2ee>
 8014d8e:	e7d8      	b.n	8014d42 <__gethex+0x2ca>
 8014d90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d1d5      	bne.n	8014d42 <__gethex+0x2ca>
 8014d96:	e7e6      	b.n	8014d66 <__gethex+0x2ee>
 8014d98:	1e6f      	subs	r7, r5, #1
 8014d9a:	f1ba 0f00 	cmp.w	sl, #0
 8014d9e:	d131      	bne.n	8014e04 <__gethex+0x38c>
 8014da0:	b127      	cbz	r7, 8014dac <__gethex+0x334>
 8014da2:	4639      	mov	r1, r7
 8014da4:	4620      	mov	r0, r4
 8014da6:	f000 fe4b 	bl	8015a40 <__any_on>
 8014daa:	4682      	mov	sl, r0
 8014dac:	117b      	asrs	r3, r7, #5
 8014dae:	2101      	movs	r1, #1
 8014db0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8014db4:	f007 071f 	and.w	r7, r7, #31
 8014db8:	fa01 f707 	lsl.w	r7, r1, r7
 8014dbc:	421f      	tst	r7, r3
 8014dbe:	4629      	mov	r1, r5
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	bf18      	it	ne
 8014dc4:	f04a 0a02 	orrne.w	sl, sl, #2
 8014dc8:	1b76      	subs	r6, r6, r5
 8014dca:	f7ff fdee 	bl	80149aa <rshift>
 8014dce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014dd2:	2702      	movs	r7, #2
 8014dd4:	f1ba 0f00 	cmp.w	sl, #0
 8014dd8:	d048      	beq.n	8014e6c <__gethex+0x3f4>
 8014dda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014dde:	2b02      	cmp	r3, #2
 8014de0:	d015      	beq.n	8014e0e <__gethex+0x396>
 8014de2:	2b03      	cmp	r3, #3
 8014de4:	d017      	beq.n	8014e16 <__gethex+0x39e>
 8014de6:	2b01      	cmp	r3, #1
 8014de8:	d109      	bne.n	8014dfe <__gethex+0x386>
 8014dea:	f01a 0f02 	tst.w	sl, #2
 8014dee:	d006      	beq.n	8014dfe <__gethex+0x386>
 8014df0:	f8d9 0000 	ldr.w	r0, [r9]
 8014df4:	ea4a 0a00 	orr.w	sl, sl, r0
 8014df8:	f01a 0f01 	tst.w	sl, #1
 8014dfc:	d10e      	bne.n	8014e1c <__gethex+0x3a4>
 8014dfe:	f047 0710 	orr.w	r7, r7, #16
 8014e02:	e033      	b.n	8014e6c <__gethex+0x3f4>
 8014e04:	f04f 0a01 	mov.w	sl, #1
 8014e08:	e7d0      	b.n	8014dac <__gethex+0x334>
 8014e0a:	2701      	movs	r7, #1
 8014e0c:	e7e2      	b.n	8014dd4 <__gethex+0x35c>
 8014e0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e10:	f1c3 0301 	rsb	r3, r3, #1
 8014e14:	9315      	str	r3, [sp, #84]	; 0x54
 8014e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d0f0      	beq.n	8014dfe <__gethex+0x386>
 8014e1c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014e20:	f104 0314 	add.w	r3, r4, #20
 8014e24:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014e28:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014e2c:	f04f 0c00 	mov.w	ip, #0
 8014e30:	4618      	mov	r0, r3
 8014e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e36:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014e3a:	d01c      	beq.n	8014e76 <__gethex+0x3fe>
 8014e3c:	3201      	adds	r2, #1
 8014e3e:	6002      	str	r2, [r0, #0]
 8014e40:	2f02      	cmp	r7, #2
 8014e42:	f104 0314 	add.w	r3, r4, #20
 8014e46:	d13f      	bne.n	8014ec8 <__gethex+0x450>
 8014e48:	f8d8 2000 	ldr.w	r2, [r8]
 8014e4c:	3a01      	subs	r2, #1
 8014e4e:	42b2      	cmp	r2, r6
 8014e50:	d10a      	bne.n	8014e68 <__gethex+0x3f0>
 8014e52:	1171      	asrs	r1, r6, #5
 8014e54:	2201      	movs	r2, #1
 8014e56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014e5a:	f006 061f 	and.w	r6, r6, #31
 8014e5e:	fa02 f606 	lsl.w	r6, r2, r6
 8014e62:	421e      	tst	r6, r3
 8014e64:	bf18      	it	ne
 8014e66:	4617      	movne	r7, r2
 8014e68:	f047 0720 	orr.w	r7, r7, #32
 8014e6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014e6e:	601c      	str	r4, [r3, #0]
 8014e70:	9b04      	ldr	r3, [sp, #16]
 8014e72:	601d      	str	r5, [r3, #0]
 8014e74:	e695      	b.n	8014ba2 <__gethex+0x12a>
 8014e76:	4299      	cmp	r1, r3
 8014e78:	f843 cc04 	str.w	ip, [r3, #-4]
 8014e7c:	d8d8      	bhi.n	8014e30 <__gethex+0x3b8>
 8014e7e:	68a3      	ldr	r3, [r4, #8]
 8014e80:	459b      	cmp	fp, r3
 8014e82:	db19      	blt.n	8014eb8 <__gethex+0x440>
 8014e84:	6861      	ldr	r1, [r4, #4]
 8014e86:	ee18 0a10 	vmov	r0, s16
 8014e8a:	3101      	adds	r1, #1
 8014e8c:	f000 f93e 	bl	801510c <_Balloc>
 8014e90:	4681      	mov	r9, r0
 8014e92:	b918      	cbnz	r0, 8014e9c <__gethex+0x424>
 8014e94:	4b1a      	ldr	r3, [pc, #104]	; (8014f00 <__gethex+0x488>)
 8014e96:	4602      	mov	r2, r0
 8014e98:	2184      	movs	r1, #132	; 0x84
 8014e9a:	e6a8      	b.n	8014bee <__gethex+0x176>
 8014e9c:	6922      	ldr	r2, [r4, #16]
 8014e9e:	3202      	adds	r2, #2
 8014ea0:	f104 010c 	add.w	r1, r4, #12
 8014ea4:	0092      	lsls	r2, r2, #2
 8014ea6:	300c      	adds	r0, #12
 8014ea8:	f000 f922 	bl	80150f0 <memcpy>
 8014eac:	4621      	mov	r1, r4
 8014eae:	ee18 0a10 	vmov	r0, s16
 8014eb2:	f000 f96b 	bl	801518c <_Bfree>
 8014eb6:	464c      	mov	r4, r9
 8014eb8:	6923      	ldr	r3, [r4, #16]
 8014eba:	1c5a      	adds	r2, r3, #1
 8014ebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014ec0:	6122      	str	r2, [r4, #16]
 8014ec2:	2201      	movs	r2, #1
 8014ec4:	615a      	str	r2, [r3, #20]
 8014ec6:	e7bb      	b.n	8014e40 <__gethex+0x3c8>
 8014ec8:	6922      	ldr	r2, [r4, #16]
 8014eca:	455a      	cmp	r2, fp
 8014ecc:	dd0b      	ble.n	8014ee6 <__gethex+0x46e>
 8014ece:	2101      	movs	r1, #1
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	f7ff fd6a 	bl	80149aa <rshift>
 8014ed6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014eda:	3501      	adds	r5, #1
 8014edc:	42ab      	cmp	r3, r5
 8014ede:	f6ff aed0 	blt.w	8014c82 <__gethex+0x20a>
 8014ee2:	2701      	movs	r7, #1
 8014ee4:	e7c0      	b.n	8014e68 <__gethex+0x3f0>
 8014ee6:	f016 061f 	ands.w	r6, r6, #31
 8014eea:	d0fa      	beq.n	8014ee2 <__gethex+0x46a>
 8014eec:	449a      	add	sl, r3
 8014eee:	f1c6 0620 	rsb	r6, r6, #32
 8014ef2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8014ef6:	f000 f9ff 	bl	80152f8 <__hi0bits>
 8014efa:	42b0      	cmp	r0, r6
 8014efc:	dbe7      	blt.n	8014ece <__gethex+0x456>
 8014efe:	e7f0      	b.n	8014ee2 <__gethex+0x46a>
 8014f00:	080191c4 	.word	0x080191c4

08014f04 <L_shift>:
 8014f04:	f1c2 0208 	rsb	r2, r2, #8
 8014f08:	0092      	lsls	r2, r2, #2
 8014f0a:	b570      	push	{r4, r5, r6, lr}
 8014f0c:	f1c2 0620 	rsb	r6, r2, #32
 8014f10:	6843      	ldr	r3, [r0, #4]
 8014f12:	6804      	ldr	r4, [r0, #0]
 8014f14:	fa03 f506 	lsl.w	r5, r3, r6
 8014f18:	432c      	orrs	r4, r5
 8014f1a:	40d3      	lsrs	r3, r2
 8014f1c:	6004      	str	r4, [r0, #0]
 8014f1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014f22:	4288      	cmp	r0, r1
 8014f24:	d3f4      	bcc.n	8014f10 <L_shift+0xc>
 8014f26:	bd70      	pop	{r4, r5, r6, pc}

08014f28 <__match>:
 8014f28:	b530      	push	{r4, r5, lr}
 8014f2a:	6803      	ldr	r3, [r0, #0]
 8014f2c:	3301      	adds	r3, #1
 8014f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014f32:	b914      	cbnz	r4, 8014f3a <__match+0x12>
 8014f34:	6003      	str	r3, [r0, #0]
 8014f36:	2001      	movs	r0, #1
 8014f38:	bd30      	pop	{r4, r5, pc}
 8014f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014f42:	2d19      	cmp	r5, #25
 8014f44:	bf98      	it	ls
 8014f46:	3220      	addls	r2, #32
 8014f48:	42a2      	cmp	r2, r4
 8014f4a:	d0f0      	beq.n	8014f2e <__match+0x6>
 8014f4c:	2000      	movs	r0, #0
 8014f4e:	e7f3      	b.n	8014f38 <__match+0x10>

08014f50 <__hexnan>:
 8014f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f54:	680b      	ldr	r3, [r1, #0]
 8014f56:	6801      	ldr	r1, [r0, #0]
 8014f58:	115e      	asrs	r6, r3, #5
 8014f5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014f5e:	f013 031f 	ands.w	r3, r3, #31
 8014f62:	b087      	sub	sp, #28
 8014f64:	bf18      	it	ne
 8014f66:	3604      	addne	r6, #4
 8014f68:	2500      	movs	r5, #0
 8014f6a:	1f37      	subs	r7, r6, #4
 8014f6c:	4682      	mov	sl, r0
 8014f6e:	4690      	mov	r8, r2
 8014f70:	9301      	str	r3, [sp, #4]
 8014f72:	f846 5c04 	str.w	r5, [r6, #-4]
 8014f76:	46b9      	mov	r9, r7
 8014f78:	463c      	mov	r4, r7
 8014f7a:	9502      	str	r5, [sp, #8]
 8014f7c:	46ab      	mov	fp, r5
 8014f7e:	784a      	ldrb	r2, [r1, #1]
 8014f80:	1c4b      	adds	r3, r1, #1
 8014f82:	9303      	str	r3, [sp, #12]
 8014f84:	b342      	cbz	r2, 8014fd8 <__hexnan+0x88>
 8014f86:	4610      	mov	r0, r2
 8014f88:	9105      	str	r1, [sp, #20]
 8014f8a:	9204      	str	r2, [sp, #16]
 8014f8c:	f7ff fd5f 	bl	8014a4e <__hexdig_fun>
 8014f90:	2800      	cmp	r0, #0
 8014f92:	d14f      	bne.n	8015034 <__hexnan+0xe4>
 8014f94:	9a04      	ldr	r2, [sp, #16]
 8014f96:	9905      	ldr	r1, [sp, #20]
 8014f98:	2a20      	cmp	r2, #32
 8014f9a:	d818      	bhi.n	8014fce <__hexnan+0x7e>
 8014f9c:	9b02      	ldr	r3, [sp, #8]
 8014f9e:	459b      	cmp	fp, r3
 8014fa0:	dd13      	ble.n	8014fca <__hexnan+0x7a>
 8014fa2:	454c      	cmp	r4, r9
 8014fa4:	d206      	bcs.n	8014fb4 <__hexnan+0x64>
 8014fa6:	2d07      	cmp	r5, #7
 8014fa8:	dc04      	bgt.n	8014fb4 <__hexnan+0x64>
 8014faa:	462a      	mov	r2, r5
 8014fac:	4649      	mov	r1, r9
 8014fae:	4620      	mov	r0, r4
 8014fb0:	f7ff ffa8 	bl	8014f04 <L_shift>
 8014fb4:	4544      	cmp	r4, r8
 8014fb6:	d950      	bls.n	801505a <__hexnan+0x10a>
 8014fb8:	2300      	movs	r3, #0
 8014fba:	f1a4 0904 	sub.w	r9, r4, #4
 8014fbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8014fc2:	f8cd b008 	str.w	fp, [sp, #8]
 8014fc6:	464c      	mov	r4, r9
 8014fc8:	461d      	mov	r5, r3
 8014fca:	9903      	ldr	r1, [sp, #12]
 8014fcc:	e7d7      	b.n	8014f7e <__hexnan+0x2e>
 8014fce:	2a29      	cmp	r2, #41	; 0x29
 8014fd0:	d156      	bne.n	8015080 <__hexnan+0x130>
 8014fd2:	3102      	adds	r1, #2
 8014fd4:	f8ca 1000 	str.w	r1, [sl]
 8014fd8:	f1bb 0f00 	cmp.w	fp, #0
 8014fdc:	d050      	beq.n	8015080 <__hexnan+0x130>
 8014fde:	454c      	cmp	r4, r9
 8014fe0:	d206      	bcs.n	8014ff0 <__hexnan+0xa0>
 8014fe2:	2d07      	cmp	r5, #7
 8014fe4:	dc04      	bgt.n	8014ff0 <__hexnan+0xa0>
 8014fe6:	462a      	mov	r2, r5
 8014fe8:	4649      	mov	r1, r9
 8014fea:	4620      	mov	r0, r4
 8014fec:	f7ff ff8a 	bl	8014f04 <L_shift>
 8014ff0:	4544      	cmp	r4, r8
 8014ff2:	d934      	bls.n	801505e <__hexnan+0x10e>
 8014ff4:	f1a8 0204 	sub.w	r2, r8, #4
 8014ff8:	4623      	mov	r3, r4
 8014ffa:	f853 1b04 	ldr.w	r1, [r3], #4
 8014ffe:	f842 1f04 	str.w	r1, [r2, #4]!
 8015002:	429f      	cmp	r7, r3
 8015004:	d2f9      	bcs.n	8014ffa <__hexnan+0xaa>
 8015006:	1b3b      	subs	r3, r7, r4
 8015008:	f023 0303 	bic.w	r3, r3, #3
 801500c:	3304      	adds	r3, #4
 801500e:	3401      	adds	r4, #1
 8015010:	3e03      	subs	r6, #3
 8015012:	42b4      	cmp	r4, r6
 8015014:	bf88      	it	hi
 8015016:	2304      	movhi	r3, #4
 8015018:	4443      	add	r3, r8
 801501a:	2200      	movs	r2, #0
 801501c:	f843 2b04 	str.w	r2, [r3], #4
 8015020:	429f      	cmp	r7, r3
 8015022:	d2fb      	bcs.n	801501c <__hexnan+0xcc>
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	b91b      	cbnz	r3, 8015030 <__hexnan+0xe0>
 8015028:	4547      	cmp	r7, r8
 801502a:	d127      	bne.n	801507c <__hexnan+0x12c>
 801502c:	2301      	movs	r3, #1
 801502e:	603b      	str	r3, [r7, #0]
 8015030:	2005      	movs	r0, #5
 8015032:	e026      	b.n	8015082 <__hexnan+0x132>
 8015034:	3501      	adds	r5, #1
 8015036:	2d08      	cmp	r5, #8
 8015038:	f10b 0b01 	add.w	fp, fp, #1
 801503c:	dd06      	ble.n	801504c <__hexnan+0xfc>
 801503e:	4544      	cmp	r4, r8
 8015040:	d9c3      	bls.n	8014fca <__hexnan+0x7a>
 8015042:	2300      	movs	r3, #0
 8015044:	f844 3c04 	str.w	r3, [r4, #-4]
 8015048:	2501      	movs	r5, #1
 801504a:	3c04      	subs	r4, #4
 801504c:	6822      	ldr	r2, [r4, #0]
 801504e:	f000 000f 	and.w	r0, r0, #15
 8015052:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015056:	6022      	str	r2, [r4, #0]
 8015058:	e7b7      	b.n	8014fca <__hexnan+0x7a>
 801505a:	2508      	movs	r5, #8
 801505c:	e7b5      	b.n	8014fca <__hexnan+0x7a>
 801505e:	9b01      	ldr	r3, [sp, #4]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d0df      	beq.n	8015024 <__hexnan+0xd4>
 8015064:	f04f 32ff 	mov.w	r2, #4294967295
 8015068:	f1c3 0320 	rsb	r3, r3, #32
 801506c:	fa22 f303 	lsr.w	r3, r2, r3
 8015070:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015074:	401a      	ands	r2, r3
 8015076:	f846 2c04 	str.w	r2, [r6, #-4]
 801507a:	e7d3      	b.n	8015024 <__hexnan+0xd4>
 801507c:	3f04      	subs	r7, #4
 801507e:	e7d1      	b.n	8015024 <__hexnan+0xd4>
 8015080:	2004      	movs	r0, #4
 8015082:	b007      	add	sp, #28
 8015084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015088 <_localeconv_r>:
 8015088:	4800      	ldr	r0, [pc, #0]	; (801508c <_localeconv_r+0x4>)
 801508a:	4770      	bx	lr
 801508c:	200002f4 	.word	0x200002f4

08015090 <__retarget_lock_init_recursive>:
 8015090:	4770      	bx	lr

08015092 <__retarget_lock_acquire_recursive>:
 8015092:	4770      	bx	lr

08015094 <__retarget_lock_release_recursive>:
 8015094:	4770      	bx	lr
	...

08015098 <_lseek_r>:
 8015098:	b538      	push	{r3, r4, r5, lr}
 801509a:	4d07      	ldr	r5, [pc, #28]	; (80150b8 <_lseek_r+0x20>)
 801509c:	4604      	mov	r4, r0
 801509e:	4608      	mov	r0, r1
 80150a0:	4611      	mov	r1, r2
 80150a2:	2200      	movs	r2, #0
 80150a4:	602a      	str	r2, [r5, #0]
 80150a6:	461a      	mov	r2, r3
 80150a8:	f7ed ffd2 	bl	8003050 <_lseek>
 80150ac:	1c43      	adds	r3, r0, #1
 80150ae:	d102      	bne.n	80150b6 <_lseek_r+0x1e>
 80150b0:	682b      	ldr	r3, [r5, #0]
 80150b2:	b103      	cbz	r3, 80150b6 <_lseek_r+0x1e>
 80150b4:	6023      	str	r3, [r4, #0]
 80150b6:	bd38      	pop	{r3, r4, r5, pc}
 80150b8:	20003314 	.word	0x20003314

080150bc <malloc>:
 80150bc:	4b02      	ldr	r3, [pc, #8]	; (80150c8 <malloc+0xc>)
 80150be:	4601      	mov	r1, r0
 80150c0:	6818      	ldr	r0, [r3, #0]
 80150c2:	f000 bd3d 	b.w	8015b40 <_malloc_r>
 80150c6:	bf00      	nop
 80150c8:	2000019c 	.word	0x2000019c

080150cc <__ascii_mbtowc>:
 80150cc:	b082      	sub	sp, #8
 80150ce:	b901      	cbnz	r1, 80150d2 <__ascii_mbtowc+0x6>
 80150d0:	a901      	add	r1, sp, #4
 80150d2:	b142      	cbz	r2, 80150e6 <__ascii_mbtowc+0x1a>
 80150d4:	b14b      	cbz	r3, 80150ea <__ascii_mbtowc+0x1e>
 80150d6:	7813      	ldrb	r3, [r2, #0]
 80150d8:	600b      	str	r3, [r1, #0]
 80150da:	7812      	ldrb	r2, [r2, #0]
 80150dc:	1e10      	subs	r0, r2, #0
 80150de:	bf18      	it	ne
 80150e0:	2001      	movne	r0, #1
 80150e2:	b002      	add	sp, #8
 80150e4:	4770      	bx	lr
 80150e6:	4610      	mov	r0, r2
 80150e8:	e7fb      	b.n	80150e2 <__ascii_mbtowc+0x16>
 80150ea:	f06f 0001 	mvn.w	r0, #1
 80150ee:	e7f8      	b.n	80150e2 <__ascii_mbtowc+0x16>

080150f0 <memcpy>:
 80150f0:	440a      	add	r2, r1
 80150f2:	4291      	cmp	r1, r2
 80150f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80150f8:	d100      	bne.n	80150fc <memcpy+0xc>
 80150fa:	4770      	bx	lr
 80150fc:	b510      	push	{r4, lr}
 80150fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015106:	4291      	cmp	r1, r2
 8015108:	d1f9      	bne.n	80150fe <memcpy+0xe>
 801510a:	bd10      	pop	{r4, pc}

0801510c <_Balloc>:
 801510c:	b570      	push	{r4, r5, r6, lr}
 801510e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015110:	4604      	mov	r4, r0
 8015112:	460d      	mov	r5, r1
 8015114:	b976      	cbnz	r6, 8015134 <_Balloc+0x28>
 8015116:	2010      	movs	r0, #16
 8015118:	f7ff ffd0 	bl	80150bc <malloc>
 801511c:	4602      	mov	r2, r0
 801511e:	6260      	str	r0, [r4, #36]	; 0x24
 8015120:	b920      	cbnz	r0, 801512c <_Balloc+0x20>
 8015122:	4b18      	ldr	r3, [pc, #96]	; (8015184 <_Balloc+0x78>)
 8015124:	4818      	ldr	r0, [pc, #96]	; (8015188 <_Balloc+0x7c>)
 8015126:	2166      	movs	r1, #102	; 0x66
 8015128:	f001 fbdc 	bl	80168e4 <__assert_func>
 801512c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015130:	6006      	str	r6, [r0, #0]
 8015132:	60c6      	str	r6, [r0, #12]
 8015134:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015136:	68f3      	ldr	r3, [r6, #12]
 8015138:	b183      	cbz	r3, 801515c <_Balloc+0x50>
 801513a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801513c:	68db      	ldr	r3, [r3, #12]
 801513e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015142:	b9b8      	cbnz	r0, 8015174 <_Balloc+0x68>
 8015144:	2101      	movs	r1, #1
 8015146:	fa01 f605 	lsl.w	r6, r1, r5
 801514a:	1d72      	adds	r2, r6, #5
 801514c:	0092      	lsls	r2, r2, #2
 801514e:	4620      	mov	r0, r4
 8015150:	f000 fc97 	bl	8015a82 <_calloc_r>
 8015154:	b160      	cbz	r0, 8015170 <_Balloc+0x64>
 8015156:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801515a:	e00e      	b.n	801517a <_Balloc+0x6e>
 801515c:	2221      	movs	r2, #33	; 0x21
 801515e:	2104      	movs	r1, #4
 8015160:	4620      	mov	r0, r4
 8015162:	f000 fc8e 	bl	8015a82 <_calloc_r>
 8015166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015168:	60f0      	str	r0, [r6, #12]
 801516a:	68db      	ldr	r3, [r3, #12]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d1e4      	bne.n	801513a <_Balloc+0x2e>
 8015170:	2000      	movs	r0, #0
 8015172:	bd70      	pop	{r4, r5, r6, pc}
 8015174:	6802      	ldr	r2, [r0, #0]
 8015176:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801517a:	2300      	movs	r3, #0
 801517c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015180:	e7f7      	b.n	8015172 <_Balloc+0x66>
 8015182:	bf00      	nop
 8015184:	0801914e 	.word	0x0801914e
 8015188:	080192b8 	.word	0x080192b8

0801518c <_Bfree>:
 801518c:	b570      	push	{r4, r5, r6, lr}
 801518e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015190:	4605      	mov	r5, r0
 8015192:	460c      	mov	r4, r1
 8015194:	b976      	cbnz	r6, 80151b4 <_Bfree+0x28>
 8015196:	2010      	movs	r0, #16
 8015198:	f7ff ff90 	bl	80150bc <malloc>
 801519c:	4602      	mov	r2, r0
 801519e:	6268      	str	r0, [r5, #36]	; 0x24
 80151a0:	b920      	cbnz	r0, 80151ac <_Bfree+0x20>
 80151a2:	4b09      	ldr	r3, [pc, #36]	; (80151c8 <_Bfree+0x3c>)
 80151a4:	4809      	ldr	r0, [pc, #36]	; (80151cc <_Bfree+0x40>)
 80151a6:	218a      	movs	r1, #138	; 0x8a
 80151a8:	f001 fb9c 	bl	80168e4 <__assert_func>
 80151ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80151b0:	6006      	str	r6, [r0, #0]
 80151b2:	60c6      	str	r6, [r0, #12]
 80151b4:	b13c      	cbz	r4, 80151c6 <_Bfree+0x3a>
 80151b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80151b8:	6862      	ldr	r2, [r4, #4]
 80151ba:	68db      	ldr	r3, [r3, #12]
 80151bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80151c0:	6021      	str	r1, [r4, #0]
 80151c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80151c6:	bd70      	pop	{r4, r5, r6, pc}
 80151c8:	0801914e 	.word	0x0801914e
 80151cc:	080192b8 	.word	0x080192b8

080151d0 <__multadd>:
 80151d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151d4:	690e      	ldr	r6, [r1, #16]
 80151d6:	4607      	mov	r7, r0
 80151d8:	4698      	mov	r8, r3
 80151da:	460c      	mov	r4, r1
 80151dc:	f101 0014 	add.w	r0, r1, #20
 80151e0:	2300      	movs	r3, #0
 80151e2:	6805      	ldr	r5, [r0, #0]
 80151e4:	b2a9      	uxth	r1, r5
 80151e6:	fb02 8101 	mla	r1, r2, r1, r8
 80151ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80151ee:	0c2d      	lsrs	r5, r5, #16
 80151f0:	fb02 c505 	mla	r5, r2, r5, ip
 80151f4:	b289      	uxth	r1, r1
 80151f6:	3301      	adds	r3, #1
 80151f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80151fc:	429e      	cmp	r6, r3
 80151fe:	f840 1b04 	str.w	r1, [r0], #4
 8015202:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8015206:	dcec      	bgt.n	80151e2 <__multadd+0x12>
 8015208:	f1b8 0f00 	cmp.w	r8, #0
 801520c:	d022      	beq.n	8015254 <__multadd+0x84>
 801520e:	68a3      	ldr	r3, [r4, #8]
 8015210:	42b3      	cmp	r3, r6
 8015212:	dc19      	bgt.n	8015248 <__multadd+0x78>
 8015214:	6861      	ldr	r1, [r4, #4]
 8015216:	4638      	mov	r0, r7
 8015218:	3101      	adds	r1, #1
 801521a:	f7ff ff77 	bl	801510c <_Balloc>
 801521e:	4605      	mov	r5, r0
 8015220:	b928      	cbnz	r0, 801522e <__multadd+0x5e>
 8015222:	4602      	mov	r2, r0
 8015224:	4b0d      	ldr	r3, [pc, #52]	; (801525c <__multadd+0x8c>)
 8015226:	480e      	ldr	r0, [pc, #56]	; (8015260 <__multadd+0x90>)
 8015228:	21b5      	movs	r1, #181	; 0xb5
 801522a:	f001 fb5b 	bl	80168e4 <__assert_func>
 801522e:	6922      	ldr	r2, [r4, #16]
 8015230:	3202      	adds	r2, #2
 8015232:	f104 010c 	add.w	r1, r4, #12
 8015236:	0092      	lsls	r2, r2, #2
 8015238:	300c      	adds	r0, #12
 801523a:	f7ff ff59 	bl	80150f0 <memcpy>
 801523e:	4621      	mov	r1, r4
 8015240:	4638      	mov	r0, r7
 8015242:	f7ff ffa3 	bl	801518c <_Bfree>
 8015246:	462c      	mov	r4, r5
 8015248:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801524c:	3601      	adds	r6, #1
 801524e:	f8c3 8014 	str.w	r8, [r3, #20]
 8015252:	6126      	str	r6, [r4, #16]
 8015254:	4620      	mov	r0, r4
 8015256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801525a:	bf00      	nop
 801525c:	080191c4 	.word	0x080191c4
 8015260:	080192b8 	.word	0x080192b8

08015264 <__s2b>:
 8015264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015268:	460c      	mov	r4, r1
 801526a:	4615      	mov	r5, r2
 801526c:	461f      	mov	r7, r3
 801526e:	2209      	movs	r2, #9
 8015270:	3308      	adds	r3, #8
 8015272:	4606      	mov	r6, r0
 8015274:	fb93 f3f2 	sdiv	r3, r3, r2
 8015278:	2100      	movs	r1, #0
 801527a:	2201      	movs	r2, #1
 801527c:	429a      	cmp	r2, r3
 801527e:	db09      	blt.n	8015294 <__s2b+0x30>
 8015280:	4630      	mov	r0, r6
 8015282:	f7ff ff43 	bl	801510c <_Balloc>
 8015286:	b940      	cbnz	r0, 801529a <__s2b+0x36>
 8015288:	4602      	mov	r2, r0
 801528a:	4b19      	ldr	r3, [pc, #100]	; (80152f0 <__s2b+0x8c>)
 801528c:	4819      	ldr	r0, [pc, #100]	; (80152f4 <__s2b+0x90>)
 801528e:	21ce      	movs	r1, #206	; 0xce
 8015290:	f001 fb28 	bl	80168e4 <__assert_func>
 8015294:	0052      	lsls	r2, r2, #1
 8015296:	3101      	adds	r1, #1
 8015298:	e7f0      	b.n	801527c <__s2b+0x18>
 801529a:	9b08      	ldr	r3, [sp, #32]
 801529c:	6143      	str	r3, [r0, #20]
 801529e:	2d09      	cmp	r5, #9
 80152a0:	f04f 0301 	mov.w	r3, #1
 80152a4:	6103      	str	r3, [r0, #16]
 80152a6:	dd16      	ble.n	80152d6 <__s2b+0x72>
 80152a8:	f104 0909 	add.w	r9, r4, #9
 80152ac:	46c8      	mov	r8, r9
 80152ae:	442c      	add	r4, r5
 80152b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80152b4:	4601      	mov	r1, r0
 80152b6:	3b30      	subs	r3, #48	; 0x30
 80152b8:	220a      	movs	r2, #10
 80152ba:	4630      	mov	r0, r6
 80152bc:	f7ff ff88 	bl	80151d0 <__multadd>
 80152c0:	45a0      	cmp	r8, r4
 80152c2:	d1f5      	bne.n	80152b0 <__s2b+0x4c>
 80152c4:	f1a5 0408 	sub.w	r4, r5, #8
 80152c8:	444c      	add	r4, r9
 80152ca:	1b2d      	subs	r5, r5, r4
 80152cc:	1963      	adds	r3, r4, r5
 80152ce:	42bb      	cmp	r3, r7
 80152d0:	db04      	blt.n	80152dc <__s2b+0x78>
 80152d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80152d6:	340a      	adds	r4, #10
 80152d8:	2509      	movs	r5, #9
 80152da:	e7f6      	b.n	80152ca <__s2b+0x66>
 80152dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80152e0:	4601      	mov	r1, r0
 80152e2:	3b30      	subs	r3, #48	; 0x30
 80152e4:	220a      	movs	r2, #10
 80152e6:	4630      	mov	r0, r6
 80152e8:	f7ff ff72 	bl	80151d0 <__multadd>
 80152ec:	e7ee      	b.n	80152cc <__s2b+0x68>
 80152ee:	bf00      	nop
 80152f0:	080191c4 	.word	0x080191c4
 80152f4:	080192b8 	.word	0x080192b8

080152f8 <__hi0bits>:
 80152f8:	0c03      	lsrs	r3, r0, #16
 80152fa:	041b      	lsls	r3, r3, #16
 80152fc:	b9d3      	cbnz	r3, 8015334 <__hi0bits+0x3c>
 80152fe:	0400      	lsls	r0, r0, #16
 8015300:	2310      	movs	r3, #16
 8015302:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015306:	bf04      	itt	eq
 8015308:	0200      	lsleq	r0, r0, #8
 801530a:	3308      	addeq	r3, #8
 801530c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015310:	bf04      	itt	eq
 8015312:	0100      	lsleq	r0, r0, #4
 8015314:	3304      	addeq	r3, #4
 8015316:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801531a:	bf04      	itt	eq
 801531c:	0080      	lsleq	r0, r0, #2
 801531e:	3302      	addeq	r3, #2
 8015320:	2800      	cmp	r0, #0
 8015322:	db05      	blt.n	8015330 <__hi0bits+0x38>
 8015324:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015328:	f103 0301 	add.w	r3, r3, #1
 801532c:	bf08      	it	eq
 801532e:	2320      	moveq	r3, #32
 8015330:	4618      	mov	r0, r3
 8015332:	4770      	bx	lr
 8015334:	2300      	movs	r3, #0
 8015336:	e7e4      	b.n	8015302 <__hi0bits+0xa>

08015338 <__lo0bits>:
 8015338:	6803      	ldr	r3, [r0, #0]
 801533a:	f013 0207 	ands.w	r2, r3, #7
 801533e:	4601      	mov	r1, r0
 8015340:	d00b      	beq.n	801535a <__lo0bits+0x22>
 8015342:	07da      	lsls	r2, r3, #31
 8015344:	d424      	bmi.n	8015390 <__lo0bits+0x58>
 8015346:	0798      	lsls	r0, r3, #30
 8015348:	bf49      	itett	mi
 801534a:	085b      	lsrmi	r3, r3, #1
 801534c:	089b      	lsrpl	r3, r3, #2
 801534e:	2001      	movmi	r0, #1
 8015350:	600b      	strmi	r3, [r1, #0]
 8015352:	bf5c      	itt	pl
 8015354:	600b      	strpl	r3, [r1, #0]
 8015356:	2002      	movpl	r0, #2
 8015358:	4770      	bx	lr
 801535a:	b298      	uxth	r0, r3
 801535c:	b9b0      	cbnz	r0, 801538c <__lo0bits+0x54>
 801535e:	0c1b      	lsrs	r3, r3, #16
 8015360:	2010      	movs	r0, #16
 8015362:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015366:	bf04      	itt	eq
 8015368:	0a1b      	lsreq	r3, r3, #8
 801536a:	3008      	addeq	r0, #8
 801536c:	071a      	lsls	r2, r3, #28
 801536e:	bf04      	itt	eq
 8015370:	091b      	lsreq	r3, r3, #4
 8015372:	3004      	addeq	r0, #4
 8015374:	079a      	lsls	r2, r3, #30
 8015376:	bf04      	itt	eq
 8015378:	089b      	lsreq	r3, r3, #2
 801537a:	3002      	addeq	r0, #2
 801537c:	07da      	lsls	r2, r3, #31
 801537e:	d403      	bmi.n	8015388 <__lo0bits+0x50>
 8015380:	085b      	lsrs	r3, r3, #1
 8015382:	f100 0001 	add.w	r0, r0, #1
 8015386:	d005      	beq.n	8015394 <__lo0bits+0x5c>
 8015388:	600b      	str	r3, [r1, #0]
 801538a:	4770      	bx	lr
 801538c:	4610      	mov	r0, r2
 801538e:	e7e8      	b.n	8015362 <__lo0bits+0x2a>
 8015390:	2000      	movs	r0, #0
 8015392:	4770      	bx	lr
 8015394:	2020      	movs	r0, #32
 8015396:	4770      	bx	lr

08015398 <__i2b>:
 8015398:	b510      	push	{r4, lr}
 801539a:	460c      	mov	r4, r1
 801539c:	2101      	movs	r1, #1
 801539e:	f7ff feb5 	bl	801510c <_Balloc>
 80153a2:	4602      	mov	r2, r0
 80153a4:	b928      	cbnz	r0, 80153b2 <__i2b+0x1a>
 80153a6:	4b05      	ldr	r3, [pc, #20]	; (80153bc <__i2b+0x24>)
 80153a8:	4805      	ldr	r0, [pc, #20]	; (80153c0 <__i2b+0x28>)
 80153aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80153ae:	f001 fa99 	bl	80168e4 <__assert_func>
 80153b2:	2301      	movs	r3, #1
 80153b4:	6144      	str	r4, [r0, #20]
 80153b6:	6103      	str	r3, [r0, #16]
 80153b8:	bd10      	pop	{r4, pc}
 80153ba:	bf00      	nop
 80153bc:	080191c4 	.word	0x080191c4
 80153c0:	080192b8 	.word	0x080192b8

080153c4 <__multiply>:
 80153c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153c8:	4614      	mov	r4, r2
 80153ca:	690a      	ldr	r2, [r1, #16]
 80153cc:	6923      	ldr	r3, [r4, #16]
 80153ce:	429a      	cmp	r2, r3
 80153d0:	bfb8      	it	lt
 80153d2:	460b      	movlt	r3, r1
 80153d4:	460d      	mov	r5, r1
 80153d6:	bfbc      	itt	lt
 80153d8:	4625      	movlt	r5, r4
 80153da:	461c      	movlt	r4, r3
 80153dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80153e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80153e4:	68ab      	ldr	r3, [r5, #8]
 80153e6:	6869      	ldr	r1, [r5, #4]
 80153e8:	eb0a 0709 	add.w	r7, sl, r9
 80153ec:	42bb      	cmp	r3, r7
 80153ee:	b085      	sub	sp, #20
 80153f0:	bfb8      	it	lt
 80153f2:	3101      	addlt	r1, #1
 80153f4:	f7ff fe8a 	bl	801510c <_Balloc>
 80153f8:	b930      	cbnz	r0, 8015408 <__multiply+0x44>
 80153fa:	4602      	mov	r2, r0
 80153fc:	4b42      	ldr	r3, [pc, #264]	; (8015508 <__multiply+0x144>)
 80153fe:	4843      	ldr	r0, [pc, #268]	; (801550c <__multiply+0x148>)
 8015400:	f240 115d 	movw	r1, #349	; 0x15d
 8015404:	f001 fa6e 	bl	80168e4 <__assert_func>
 8015408:	f100 0614 	add.w	r6, r0, #20
 801540c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015410:	4633      	mov	r3, r6
 8015412:	2200      	movs	r2, #0
 8015414:	4543      	cmp	r3, r8
 8015416:	d31e      	bcc.n	8015456 <__multiply+0x92>
 8015418:	f105 0c14 	add.w	ip, r5, #20
 801541c:	f104 0314 	add.w	r3, r4, #20
 8015420:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8015424:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015428:	9202      	str	r2, [sp, #8]
 801542a:	ebac 0205 	sub.w	r2, ip, r5
 801542e:	3a15      	subs	r2, #21
 8015430:	f022 0203 	bic.w	r2, r2, #3
 8015434:	3204      	adds	r2, #4
 8015436:	f105 0115 	add.w	r1, r5, #21
 801543a:	458c      	cmp	ip, r1
 801543c:	bf38      	it	cc
 801543e:	2204      	movcc	r2, #4
 8015440:	9201      	str	r2, [sp, #4]
 8015442:	9a02      	ldr	r2, [sp, #8]
 8015444:	9303      	str	r3, [sp, #12]
 8015446:	429a      	cmp	r2, r3
 8015448:	d808      	bhi.n	801545c <__multiply+0x98>
 801544a:	2f00      	cmp	r7, #0
 801544c:	dc55      	bgt.n	80154fa <__multiply+0x136>
 801544e:	6107      	str	r7, [r0, #16]
 8015450:	b005      	add	sp, #20
 8015452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015456:	f843 2b04 	str.w	r2, [r3], #4
 801545a:	e7db      	b.n	8015414 <__multiply+0x50>
 801545c:	f8b3 a000 	ldrh.w	sl, [r3]
 8015460:	f1ba 0f00 	cmp.w	sl, #0
 8015464:	d020      	beq.n	80154a8 <__multiply+0xe4>
 8015466:	f105 0e14 	add.w	lr, r5, #20
 801546a:	46b1      	mov	r9, r6
 801546c:	2200      	movs	r2, #0
 801546e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8015472:	f8d9 b000 	ldr.w	fp, [r9]
 8015476:	b2a1      	uxth	r1, r4
 8015478:	fa1f fb8b 	uxth.w	fp, fp
 801547c:	fb0a b101 	mla	r1, sl, r1, fp
 8015480:	4411      	add	r1, r2
 8015482:	f8d9 2000 	ldr.w	r2, [r9]
 8015486:	0c24      	lsrs	r4, r4, #16
 8015488:	0c12      	lsrs	r2, r2, #16
 801548a:	fb0a 2404 	mla	r4, sl, r4, r2
 801548e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015492:	b289      	uxth	r1, r1
 8015494:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015498:	45f4      	cmp	ip, lr
 801549a:	f849 1b04 	str.w	r1, [r9], #4
 801549e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80154a2:	d8e4      	bhi.n	801546e <__multiply+0xaa>
 80154a4:	9901      	ldr	r1, [sp, #4]
 80154a6:	5072      	str	r2, [r6, r1]
 80154a8:	9a03      	ldr	r2, [sp, #12]
 80154aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80154ae:	3304      	adds	r3, #4
 80154b0:	f1b9 0f00 	cmp.w	r9, #0
 80154b4:	d01f      	beq.n	80154f6 <__multiply+0x132>
 80154b6:	6834      	ldr	r4, [r6, #0]
 80154b8:	f105 0114 	add.w	r1, r5, #20
 80154bc:	46b6      	mov	lr, r6
 80154be:	f04f 0a00 	mov.w	sl, #0
 80154c2:	880a      	ldrh	r2, [r1, #0]
 80154c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80154c8:	fb09 b202 	mla	r2, r9, r2, fp
 80154cc:	4492      	add	sl, r2
 80154ce:	b2a4      	uxth	r4, r4
 80154d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80154d4:	f84e 4b04 	str.w	r4, [lr], #4
 80154d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80154dc:	f8be 2000 	ldrh.w	r2, [lr]
 80154e0:	0c24      	lsrs	r4, r4, #16
 80154e2:	fb09 2404 	mla	r4, r9, r4, r2
 80154e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80154ea:	458c      	cmp	ip, r1
 80154ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80154f0:	d8e7      	bhi.n	80154c2 <__multiply+0xfe>
 80154f2:	9a01      	ldr	r2, [sp, #4]
 80154f4:	50b4      	str	r4, [r6, r2]
 80154f6:	3604      	adds	r6, #4
 80154f8:	e7a3      	b.n	8015442 <__multiply+0x7e>
 80154fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d1a5      	bne.n	801544e <__multiply+0x8a>
 8015502:	3f01      	subs	r7, #1
 8015504:	e7a1      	b.n	801544a <__multiply+0x86>
 8015506:	bf00      	nop
 8015508:	080191c4 	.word	0x080191c4
 801550c:	080192b8 	.word	0x080192b8

08015510 <__pow5mult>:
 8015510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015514:	4615      	mov	r5, r2
 8015516:	f012 0203 	ands.w	r2, r2, #3
 801551a:	4606      	mov	r6, r0
 801551c:	460f      	mov	r7, r1
 801551e:	d007      	beq.n	8015530 <__pow5mult+0x20>
 8015520:	4c25      	ldr	r4, [pc, #148]	; (80155b8 <__pow5mult+0xa8>)
 8015522:	3a01      	subs	r2, #1
 8015524:	2300      	movs	r3, #0
 8015526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801552a:	f7ff fe51 	bl	80151d0 <__multadd>
 801552e:	4607      	mov	r7, r0
 8015530:	10ad      	asrs	r5, r5, #2
 8015532:	d03d      	beq.n	80155b0 <__pow5mult+0xa0>
 8015534:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015536:	b97c      	cbnz	r4, 8015558 <__pow5mult+0x48>
 8015538:	2010      	movs	r0, #16
 801553a:	f7ff fdbf 	bl	80150bc <malloc>
 801553e:	4602      	mov	r2, r0
 8015540:	6270      	str	r0, [r6, #36]	; 0x24
 8015542:	b928      	cbnz	r0, 8015550 <__pow5mult+0x40>
 8015544:	4b1d      	ldr	r3, [pc, #116]	; (80155bc <__pow5mult+0xac>)
 8015546:	481e      	ldr	r0, [pc, #120]	; (80155c0 <__pow5mult+0xb0>)
 8015548:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801554c:	f001 f9ca 	bl	80168e4 <__assert_func>
 8015550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015554:	6004      	str	r4, [r0, #0]
 8015556:	60c4      	str	r4, [r0, #12]
 8015558:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801555c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015560:	b94c      	cbnz	r4, 8015576 <__pow5mult+0x66>
 8015562:	f240 2171 	movw	r1, #625	; 0x271
 8015566:	4630      	mov	r0, r6
 8015568:	f7ff ff16 	bl	8015398 <__i2b>
 801556c:	2300      	movs	r3, #0
 801556e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015572:	4604      	mov	r4, r0
 8015574:	6003      	str	r3, [r0, #0]
 8015576:	f04f 0900 	mov.w	r9, #0
 801557a:	07eb      	lsls	r3, r5, #31
 801557c:	d50a      	bpl.n	8015594 <__pow5mult+0x84>
 801557e:	4639      	mov	r1, r7
 8015580:	4622      	mov	r2, r4
 8015582:	4630      	mov	r0, r6
 8015584:	f7ff ff1e 	bl	80153c4 <__multiply>
 8015588:	4639      	mov	r1, r7
 801558a:	4680      	mov	r8, r0
 801558c:	4630      	mov	r0, r6
 801558e:	f7ff fdfd 	bl	801518c <_Bfree>
 8015592:	4647      	mov	r7, r8
 8015594:	106d      	asrs	r5, r5, #1
 8015596:	d00b      	beq.n	80155b0 <__pow5mult+0xa0>
 8015598:	6820      	ldr	r0, [r4, #0]
 801559a:	b938      	cbnz	r0, 80155ac <__pow5mult+0x9c>
 801559c:	4622      	mov	r2, r4
 801559e:	4621      	mov	r1, r4
 80155a0:	4630      	mov	r0, r6
 80155a2:	f7ff ff0f 	bl	80153c4 <__multiply>
 80155a6:	6020      	str	r0, [r4, #0]
 80155a8:	f8c0 9000 	str.w	r9, [r0]
 80155ac:	4604      	mov	r4, r0
 80155ae:	e7e4      	b.n	801557a <__pow5mult+0x6a>
 80155b0:	4638      	mov	r0, r7
 80155b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155b6:	bf00      	nop
 80155b8:	08019408 	.word	0x08019408
 80155bc:	0801914e 	.word	0x0801914e
 80155c0:	080192b8 	.word	0x080192b8

080155c4 <__lshift>:
 80155c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155c8:	460c      	mov	r4, r1
 80155ca:	6849      	ldr	r1, [r1, #4]
 80155cc:	6923      	ldr	r3, [r4, #16]
 80155ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80155d2:	68a3      	ldr	r3, [r4, #8]
 80155d4:	4607      	mov	r7, r0
 80155d6:	4691      	mov	r9, r2
 80155d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80155dc:	f108 0601 	add.w	r6, r8, #1
 80155e0:	42b3      	cmp	r3, r6
 80155e2:	db0b      	blt.n	80155fc <__lshift+0x38>
 80155e4:	4638      	mov	r0, r7
 80155e6:	f7ff fd91 	bl	801510c <_Balloc>
 80155ea:	4605      	mov	r5, r0
 80155ec:	b948      	cbnz	r0, 8015602 <__lshift+0x3e>
 80155ee:	4602      	mov	r2, r0
 80155f0:	4b28      	ldr	r3, [pc, #160]	; (8015694 <__lshift+0xd0>)
 80155f2:	4829      	ldr	r0, [pc, #164]	; (8015698 <__lshift+0xd4>)
 80155f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80155f8:	f001 f974 	bl	80168e4 <__assert_func>
 80155fc:	3101      	adds	r1, #1
 80155fe:	005b      	lsls	r3, r3, #1
 8015600:	e7ee      	b.n	80155e0 <__lshift+0x1c>
 8015602:	2300      	movs	r3, #0
 8015604:	f100 0114 	add.w	r1, r0, #20
 8015608:	f100 0210 	add.w	r2, r0, #16
 801560c:	4618      	mov	r0, r3
 801560e:	4553      	cmp	r3, sl
 8015610:	db33      	blt.n	801567a <__lshift+0xb6>
 8015612:	6920      	ldr	r0, [r4, #16]
 8015614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015618:	f104 0314 	add.w	r3, r4, #20
 801561c:	f019 091f 	ands.w	r9, r9, #31
 8015620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015628:	d02b      	beq.n	8015682 <__lshift+0xbe>
 801562a:	f1c9 0e20 	rsb	lr, r9, #32
 801562e:	468a      	mov	sl, r1
 8015630:	2200      	movs	r2, #0
 8015632:	6818      	ldr	r0, [r3, #0]
 8015634:	fa00 f009 	lsl.w	r0, r0, r9
 8015638:	4302      	orrs	r2, r0
 801563a:	f84a 2b04 	str.w	r2, [sl], #4
 801563e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015642:	459c      	cmp	ip, r3
 8015644:	fa22 f20e 	lsr.w	r2, r2, lr
 8015648:	d8f3      	bhi.n	8015632 <__lshift+0x6e>
 801564a:	ebac 0304 	sub.w	r3, ip, r4
 801564e:	3b15      	subs	r3, #21
 8015650:	f023 0303 	bic.w	r3, r3, #3
 8015654:	3304      	adds	r3, #4
 8015656:	f104 0015 	add.w	r0, r4, #21
 801565a:	4584      	cmp	ip, r0
 801565c:	bf38      	it	cc
 801565e:	2304      	movcc	r3, #4
 8015660:	50ca      	str	r2, [r1, r3]
 8015662:	b10a      	cbz	r2, 8015668 <__lshift+0xa4>
 8015664:	f108 0602 	add.w	r6, r8, #2
 8015668:	3e01      	subs	r6, #1
 801566a:	4638      	mov	r0, r7
 801566c:	612e      	str	r6, [r5, #16]
 801566e:	4621      	mov	r1, r4
 8015670:	f7ff fd8c 	bl	801518c <_Bfree>
 8015674:	4628      	mov	r0, r5
 8015676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801567a:	f842 0f04 	str.w	r0, [r2, #4]!
 801567e:	3301      	adds	r3, #1
 8015680:	e7c5      	b.n	801560e <__lshift+0x4a>
 8015682:	3904      	subs	r1, #4
 8015684:	f853 2b04 	ldr.w	r2, [r3], #4
 8015688:	f841 2f04 	str.w	r2, [r1, #4]!
 801568c:	459c      	cmp	ip, r3
 801568e:	d8f9      	bhi.n	8015684 <__lshift+0xc0>
 8015690:	e7ea      	b.n	8015668 <__lshift+0xa4>
 8015692:	bf00      	nop
 8015694:	080191c4 	.word	0x080191c4
 8015698:	080192b8 	.word	0x080192b8

0801569c <__mcmp>:
 801569c:	b530      	push	{r4, r5, lr}
 801569e:	6902      	ldr	r2, [r0, #16]
 80156a0:	690c      	ldr	r4, [r1, #16]
 80156a2:	1b12      	subs	r2, r2, r4
 80156a4:	d10e      	bne.n	80156c4 <__mcmp+0x28>
 80156a6:	f100 0314 	add.w	r3, r0, #20
 80156aa:	3114      	adds	r1, #20
 80156ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80156b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80156b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80156b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80156bc:	42a5      	cmp	r5, r4
 80156be:	d003      	beq.n	80156c8 <__mcmp+0x2c>
 80156c0:	d305      	bcc.n	80156ce <__mcmp+0x32>
 80156c2:	2201      	movs	r2, #1
 80156c4:	4610      	mov	r0, r2
 80156c6:	bd30      	pop	{r4, r5, pc}
 80156c8:	4283      	cmp	r3, r0
 80156ca:	d3f3      	bcc.n	80156b4 <__mcmp+0x18>
 80156cc:	e7fa      	b.n	80156c4 <__mcmp+0x28>
 80156ce:	f04f 32ff 	mov.w	r2, #4294967295
 80156d2:	e7f7      	b.n	80156c4 <__mcmp+0x28>

080156d4 <__mdiff>:
 80156d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156d8:	460c      	mov	r4, r1
 80156da:	4606      	mov	r6, r0
 80156dc:	4611      	mov	r1, r2
 80156de:	4620      	mov	r0, r4
 80156e0:	4617      	mov	r7, r2
 80156e2:	f7ff ffdb 	bl	801569c <__mcmp>
 80156e6:	1e05      	subs	r5, r0, #0
 80156e8:	d110      	bne.n	801570c <__mdiff+0x38>
 80156ea:	4629      	mov	r1, r5
 80156ec:	4630      	mov	r0, r6
 80156ee:	f7ff fd0d 	bl	801510c <_Balloc>
 80156f2:	b930      	cbnz	r0, 8015702 <__mdiff+0x2e>
 80156f4:	4b39      	ldr	r3, [pc, #228]	; (80157dc <__mdiff+0x108>)
 80156f6:	4602      	mov	r2, r0
 80156f8:	f240 2132 	movw	r1, #562	; 0x232
 80156fc:	4838      	ldr	r0, [pc, #224]	; (80157e0 <__mdiff+0x10c>)
 80156fe:	f001 f8f1 	bl	80168e4 <__assert_func>
 8015702:	2301      	movs	r3, #1
 8015704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801570c:	bfa4      	itt	ge
 801570e:	463b      	movge	r3, r7
 8015710:	4627      	movge	r7, r4
 8015712:	4630      	mov	r0, r6
 8015714:	6879      	ldr	r1, [r7, #4]
 8015716:	bfa6      	itte	ge
 8015718:	461c      	movge	r4, r3
 801571a:	2500      	movge	r5, #0
 801571c:	2501      	movlt	r5, #1
 801571e:	f7ff fcf5 	bl	801510c <_Balloc>
 8015722:	b920      	cbnz	r0, 801572e <__mdiff+0x5a>
 8015724:	4b2d      	ldr	r3, [pc, #180]	; (80157dc <__mdiff+0x108>)
 8015726:	4602      	mov	r2, r0
 8015728:	f44f 7110 	mov.w	r1, #576	; 0x240
 801572c:	e7e6      	b.n	80156fc <__mdiff+0x28>
 801572e:	693e      	ldr	r6, [r7, #16]
 8015730:	60c5      	str	r5, [r0, #12]
 8015732:	6925      	ldr	r5, [r4, #16]
 8015734:	f107 0114 	add.w	r1, r7, #20
 8015738:	f104 0914 	add.w	r9, r4, #20
 801573c:	f100 0e14 	add.w	lr, r0, #20
 8015740:	f107 0210 	add.w	r2, r7, #16
 8015744:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015748:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801574c:	46f2      	mov	sl, lr
 801574e:	2700      	movs	r7, #0
 8015750:	f859 3b04 	ldr.w	r3, [r9], #4
 8015754:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015758:	fa1f f883 	uxth.w	r8, r3
 801575c:	fa17 f78b 	uxtah	r7, r7, fp
 8015760:	0c1b      	lsrs	r3, r3, #16
 8015762:	eba7 0808 	sub.w	r8, r7, r8
 8015766:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801576a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801576e:	fa1f f888 	uxth.w	r8, r8
 8015772:	141f      	asrs	r7, r3, #16
 8015774:	454d      	cmp	r5, r9
 8015776:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801577a:	f84a 3b04 	str.w	r3, [sl], #4
 801577e:	d8e7      	bhi.n	8015750 <__mdiff+0x7c>
 8015780:	1b2b      	subs	r3, r5, r4
 8015782:	3b15      	subs	r3, #21
 8015784:	f023 0303 	bic.w	r3, r3, #3
 8015788:	3304      	adds	r3, #4
 801578a:	3415      	adds	r4, #21
 801578c:	42a5      	cmp	r5, r4
 801578e:	bf38      	it	cc
 8015790:	2304      	movcc	r3, #4
 8015792:	4419      	add	r1, r3
 8015794:	4473      	add	r3, lr
 8015796:	469e      	mov	lr, r3
 8015798:	460d      	mov	r5, r1
 801579a:	4565      	cmp	r5, ip
 801579c:	d30e      	bcc.n	80157bc <__mdiff+0xe8>
 801579e:	f10c 0203 	add.w	r2, ip, #3
 80157a2:	1a52      	subs	r2, r2, r1
 80157a4:	f022 0203 	bic.w	r2, r2, #3
 80157a8:	3903      	subs	r1, #3
 80157aa:	458c      	cmp	ip, r1
 80157ac:	bf38      	it	cc
 80157ae:	2200      	movcc	r2, #0
 80157b0:	441a      	add	r2, r3
 80157b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80157b6:	b17b      	cbz	r3, 80157d8 <__mdiff+0x104>
 80157b8:	6106      	str	r6, [r0, #16]
 80157ba:	e7a5      	b.n	8015708 <__mdiff+0x34>
 80157bc:	f855 8b04 	ldr.w	r8, [r5], #4
 80157c0:	fa17 f488 	uxtah	r4, r7, r8
 80157c4:	1422      	asrs	r2, r4, #16
 80157c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80157ca:	b2a4      	uxth	r4, r4
 80157cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80157d0:	f84e 4b04 	str.w	r4, [lr], #4
 80157d4:	1417      	asrs	r7, r2, #16
 80157d6:	e7e0      	b.n	801579a <__mdiff+0xc6>
 80157d8:	3e01      	subs	r6, #1
 80157da:	e7ea      	b.n	80157b2 <__mdiff+0xde>
 80157dc:	080191c4 	.word	0x080191c4
 80157e0:	080192b8 	.word	0x080192b8

080157e4 <__ulp>:
 80157e4:	b082      	sub	sp, #8
 80157e6:	ed8d 0b00 	vstr	d0, [sp]
 80157ea:	9b01      	ldr	r3, [sp, #4]
 80157ec:	4912      	ldr	r1, [pc, #72]	; (8015838 <__ulp+0x54>)
 80157ee:	4019      	ands	r1, r3
 80157f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80157f4:	2900      	cmp	r1, #0
 80157f6:	dd05      	ble.n	8015804 <__ulp+0x20>
 80157f8:	2200      	movs	r2, #0
 80157fa:	460b      	mov	r3, r1
 80157fc:	ec43 2b10 	vmov	d0, r2, r3
 8015800:	b002      	add	sp, #8
 8015802:	4770      	bx	lr
 8015804:	4249      	negs	r1, r1
 8015806:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801580a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801580e:	f04f 0200 	mov.w	r2, #0
 8015812:	f04f 0300 	mov.w	r3, #0
 8015816:	da04      	bge.n	8015822 <__ulp+0x3e>
 8015818:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801581c:	fa41 f300 	asr.w	r3, r1, r0
 8015820:	e7ec      	b.n	80157fc <__ulp+0x18>
 8015822:	f1a0 0114 	sub.w	r1, r0, #20
 8015826:	291e      	cmp	r1, #30
 8015828:	bfda      	itte	le
 801582a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801582e:	fa20 f101 	lsrle.w	r1, r0, r1
 8015832:	2101      	movgt	r1, #1
 8015834:	460a      	mov	r2, r1
 8015836:	e7e1      	b.n	80157fc <__ulp+0x18>
 8015838:	7ff00000 	.word	0x7ff00000

0801583c <__b2d>:
 801583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801583e:	6905      	ldr	r5, [r0, #16]
 8015840:	f100 0714 	add.w	r7, r0, #20
 8015844:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015848:	1f2e      	subs	r6, r5, #4
 801584a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801584e:	4620      	mov	r0, r4
 8015850:	f7ff fd52 	bl	80152f8 <__hi0bits>
 8015854:	f1c0 0320 	rsb	r3, r0, #32
 8015858:	280a      	cmp	r0, #10
 801585a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80158d8 <__b2d+0x9c>
 801585e:	600b      	str	r3, [r1, #0]
 8015860:	dc14      	bgt.n	801588c <__b2d+0x50>
 8015862:	f1c0 0e0b 	rsb	lr, r0, #11
 8015866:	fa24 f10e 	lsr.w	r1, r4, lr
 801586a:	42b7      	cmp	r7, r6
 801586c:	ea41 030c 	orr.w	r3, r1, ip
 8015870:	bf34      	ite	cc
 8015872:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015876:	2100      	movcs	r1, #0
 8015878:	3015      	adds	r0, #21
 801587a:	fa04 f000 	lsl.w	r0, r4, r0
 801587e:	fa21 f10e 	lsr.w	r1, r1, lr
 8015882:	ea40 0201 	orr.w	r2, r0, r1
 8015886:	ec43 2b10 	vmov	d0, r2, r3
 801588a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801588c:	42b7      	cmp	r7, r6
 801588e:	bf3a      	itte	cc
 8015890:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015894:	f1a5 0608 	subcc.w	r6, r5, #8
 8015898:	2100      	movcs	r1, #0
 801589a:	380b      	subs	r0, #11
 801589c:	d017      	beq.n	80158ce <__b2d+0x92>
 801589e:	f1c0 0c20 	rsb	ip, r0, #32
 80158a2:	fa04 f500 	lsl.w	r5, r4, r0
 80158a6:	42be      	cmp	r6, r7
 80158a8:	fa21 f40c 	lsr.w	r4, r1, ip
 80158ac:	ea45 0504 	orr.w	r5, r5, r4
 80158b0:	bf8c      	ite	hi
 80158b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80158b6:	2400      	movls	r4, #0
 80158b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80158bc:	fa01 f000 	lsl.w	r0, r1, r0
 80158c0:	fa24 f40c 	lsr.w	r4, r4, ip
 80158c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80158c8:	ea40 0204 	orr.w	r2, r0, r4
 80158cc:	e7db      	b.n	8015886 <__b2d+0x4a>
 80158ce:	ea44 030c 	orr.w	r3, r4, ip
 80158d2:	460a      	mov	r2, r1
 80158d4:	e7d7      	b.n	8015886 <__b2d+0x4a>
 80158d6:	bf00      	nop
 80158d8:	3ff00000 	.word	0x3ff00000

080158dc <__d2b>:
 80158dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80158e0:	4689      	mov	r9, r1
 80158e2:	2101      	movs	r1, #1
 80158e4:	ec57 6b10 	vmov	r6, r7, d0
 80158e8:	4690      	mov	r8, r2
 80158ea:	f7ff fc0f 	bl	801510c <_Balloc>
 80158ee:	4604      	mov	r4, r0
 80158f0:	b930      	cbnz	r0, 8015900 <__d2b+0x24>
 80158f2:	4602      	mov	r2, r0
 80158f4:	4b25      	ldr	r3, [pc, #148]	; (801598c <__d2b+0xb0>)
 80158f6:	4826      	ldr	r0, [pc, #152]	; (8015990 <__d2b+0xb4>)
 80158f8:	f240 310a 	movw	r1, #778	; 0x30a
 80158fc:	f000 fff2 	bl	80168e4 <__assert_func>
 8015900:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015904:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015908:	bb35      	cbnz	r5, 8015958 <__d2b+0x7c>
 801590a:	2e00      	cmp	r6, #0
 801590c:	9301      	str	r3, [sp, #4]
 801590e:	d028      	beq.n	8015962 <__d2b+0x86>
 8015910:	4668      	mov	r0, sp
 8015912:	9600      	str	r6, [sp, #0]
 8015914:	f7ff fd10 	bl	8015338 <__lo0bits>
 8015918:	9900      	ldr	r1, [sp, #0]
 801591a:	b300      	cbz	r0, 801595e <__d2b+0x82>
 801591c:	9a01      	ldr	r2, [sp, #4]
 801591e:	f1c0 0320 	rsb	r3, r0, #32
 8015922:	fa02 f303 	lsl.w	r3, r2, r3
 8015926:	430b      	orrs	r3, r1
 8015928:	40c2      	lsrs	r2, r0
 801592a:	6163      	str	r3, [r4, #20]
 801592c:	9201      	str	r2, [sp, #4]
 801592e:	9b01      	ldr	r3, [sp, #4]
 8015930:	61a3      	str	r3, [r4, #24]
 8015932:	2b00      	cmp	r3, #0
 8015934:	bf14      	ite	ne
 8015936:	2202      	movne	r2, #2
 8015938:	2201      	moveq	r2, #1
 801593a:	6122      	str	r2, [r4, #16]
 801593c:	b1d5      	cbz	r5, 8015974 <__d2b+0x98>
 801593e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015942:	4405      	add	r5, r0
 8015944:	f8c9 5000 	str.w	r5, [r9]
 8015948:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801594c:	f8c8 0000 	str.w	r0, [r8]
 8015950:	4620      	mov	r0, r4
 8015952:	b003      	add	sp, #12
 8015954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801595c:	e7d5      	b.n	801590a <__d2b+0x2e>
 801595e:	6161      	str	r1, [r4, #20]
 8015960:	e7e5      	b.n	801592e <__d2b+0x52>
 8015962:	a801      	add	r0, sp, #4
 8015964:	f7ff fce8 	bl	8015338 <__lo0bits>
 8015968:	9b01      	ldr	r3, [sp, #4]
 801596a:	6163      	str	r3, [r4, #20]
 801596c:	2201      	movs	r2, #1
 801596e:	6122      	str	r2, [r4, #16]
 8015970:	3020      	adds	r0, #32
 8015972:	e7e3      	b.n	801593c <__d2b+0x60>
 8015974:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015978:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801597c:	f8c9 0000 	str.w	r0, [r9]
 8015980:	6918      	ldr	r0, [r3, #16]
 8015982:	f7ff fcb9 	bl	80152f8 <__hi0bits>
 8015986:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801598a:	e7df      	b.n	801594c <__d2b+0x70>
 801598c:	080191c4 	.word	0x080191c4
 8015990:	080192b8 	.word	0x080192b8

08015994 <__ratio>:
 8015994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015998:	4688      	mov	r8, r1
 801599a:	4669      	mov	r1, sp
 801599c:	4681      	mov	r9, r0
 801599e:	f7ff ff4d 	bl	801583c <__b2d>
 80159a2:	a901      	add	r1, sp, #4
 80159a4:	4640      	mov	r0, r8
 80159a6:	ec55 4b10 	vmov	r4, r5, d0
 80159aa:	f7ff ff47 	bl	801583c <__b2d>
 80159ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80159b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80159b6:	eba3 0c02 	sub.w	ip, r3, r2
 80159ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 80159be:	1a9b      	subs	r3, r3, r2
 80159c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80159c4:	ec51 0b10 	vmov	r0, r1, d0
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	bfd6      	itet	le
 80159cc:	460a      	movle	r2, r1
 80159ce:	462a      	movgt	r2, r5
 80159d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80159d4:	468b      	mov	fp, r1
 80159d6:	462f      	mov	r7, r5
 80159d8:	bfd4      	ite	le
 80159da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80159de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80159e2:	4620      	mov	r0, r4
 80159e4:	ee10 2a10 	vmov	r2, s0
 80159e8:	465b      	mov	r3, fp
 80159ea:	4639      	mov	r1, r7
 80159ec:	f7ea ff2e 	bl	800084c <__aeabi_ddiv>
 80159f0:	ec41 0b10 	vmov	d0, r0, r1
 80159f4:	b003      	add	sp, #12
 80159f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080159fa <__copybits>:
 80159fa:	3901      	subs	r1, #1
 80159fc:	b570      	push	{r4, r5, r6, lr}
 80159fe:	1149      	asrs	r1, r1, #5
 8015a00:	6914      	ldr	r4, [r2, #16]
 8015a02:	3101      	adds	r1, #1
 8015a04:	f102 0314 	add.w	r3, r2, #20
 8015a08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015a0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015a10:	1f05      	subs	r5, r0, #4
 8015a12:	42a3      	cmp	r3, r4
 8015a14:	d30c      	bcc.n	8015a30 <__copybits+0x36>
 8015a16:	1aa3      	subs	r3, r4, r2
 8015a18:	3b11      	subs	r3, #17
 8015a1a:	f023 0303 	bic.w	r3, r3, #3
 8015a1e:	3211      	adds	r2, #17
 8015a20:	42a2      	cmp	r2, r4
 8015a22:	bf88      	it	hi
 8015a24:	2300      	movhi	r3, #0
 8015a26:	4418      	add	r0, r3
 8015a28:	2300      	movs	r3, #0
 8015a2a:	4288      	cmp	r0, r1
 8015a2c:	d305      	bcc.n	8015a3a <__copybits+0x40>
 8015a2e:	bd70      	pop	{r4, r5, r6, pc}
 8015a30:	f853 6b04 	ldr.w	r6, [r3], #4
 8015a34:	f845 6f04 	str.w	r6, [r5, #4]!
 8015a38:	e7eb      	b.n	8015a12 <__copybits+0x18>
 8015a3a:	f840 3b04 	str.w	r3, [r0], #4
 8015a3e:	e7f4      	b.n	8015a2a <__copybits+0x30>

08015a40 <__any_on>:
 8015a40:	f100 0214 	add.w	r2, r0, #20
 8015a44:	6900      	ldr	r0, [r0, #16]
 8015a46:	114b      	asrs	r3, r1, #5
 8015a48:	4298      	cmp	r0, r3
 8015a4a:	b510      	push	{r4, lr}
 8015a4c:	db11      	blt.n	8015a72 <__any_on+0x32>
 8015a4e:	dd0a      	ble.n	8015a66 <__any_on+0x26>
 8015a50:	f011 011f 	ands.w	r1, r1, #31
 8015a54:	d007      	beq.n	8015a66 <__any_on+0x26>
 8015a56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015a5a:	fa24 f001 	lsr.w	r0, r4, r1
 8015a5e:	fa00 f101 	lsl.w	r1, r0, r1
 8015a62:	428c      	cmp	r4, r1
 8015a64:	d10b      	bne.n	8015a7e <__any_on+0x3e>
 8015a66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015a6a:	4293      	cmp	r3, r2
 8015a6c:	d803      	bhi.n	8015a76 <__any_on+0x36>
 8015a6e:	2000      	movs	r0, #0
 8015a70:	bd10      	pop	{r4, pc}
 8015a72:	4603      	mov	r3, r0
 8015a74:	e7f7      	b.n	8015a66 <__any_on+0x26>
 8015a76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015a7a:	2900      	cmp	r1, #0
 8015a7c:	d0f5      	beq.n	8015a6a <__any_on+0x2a>
 8015a7e:	2001      	movs	r0, #1
 8015a80:	e7f6      	b.n	8015a70 <__any_on+0x30>

08015a82 <_calloc_r>:
 8015a82:	b513      	push	{r0, r1, r4, lr}
 8015a84:	434a      	muls	r2, r1
 8015a86:	4611      	mov	r1, r2
 8015a88:	9201      	str	r2, [sp, #4]
 8015a8a:	f000 f859 	bl	8015b40 <_malloc_r>
 8015a8e:	4604      	mov	r4, r0
 8015a90:	b118      	cbz	r0, 8015a9a <_calloc_r+0x18>
 8015a92:	9a01      	ldr	r2, [sp, #4]
 8015a94:	2100      	movs	r1, #0
 8015a96:	f7fc fa09 	bl	8011eac <memset>
 8015a9a:	4620      	mov	r0, r4
 8015a9c:	b002      	add	sp, #8
 8015a9e:	bd10      	pop	{r4, pc}

08015aa0 <_free_r>:
 8015aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015aa2:	2900      	cmp	r1, #0
 8015aa4:	d048      	beq.n	8015b38 <_free_r+0x98>
 8015aa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015aaa:	9001      	str	r0, [sp, #4]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	f1a1 0404 	sub.w	r4, r1, #4
 8015ab2:	bfb8      	it	lt
 8015ab4:	18e4      	addlt	r4, r4, r3
 8015ab6:	f001 f885 	bl	8016bc4 <__malloc_lock>
 8015aba:	4a20      	ldr	r2, [pc, #128]	; (8015b3c <_free_r+0x9c>)
 8015abc:	9801      	ldr	r0, [sp, #4]
 8015abe:	6813      	ldr	r3, [r2, #0]
 8015ac0:	4615      	mov	r5, r2
 8015ac2:	b933      	cbnz	r3, 8015ad2 <_free_r+0x32>
 8015ac4:	6063      	str	r3, [r4, #4]
 8015ac6:	6014      	str	r4, [r2, #0]
 8015ac8:	b003      	add	sp, #12
 8015aca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ace:	f001 b87f 	b.w	8016bd0 <__malloc_unlock>
 8015ad2:	42a3      	cmp	r3, r4
 8015ad4:	d90b      	bls.n	8015aee <_free_r+0x4e>
 8015ad6:	6821      	ldr	r1, [r4, #0]
 8015ad8:	1862      	adds	r2, r4, r1
 8015ada:	4293      	cmp	r3, r2
 8015adc:	bf04      	itt	eq
 8015ade:	681a      	ldreq	r2, [r3, #0]
 8015ae0:	685b      	ldreq	r3, [r3, #4]
 8015ae2:	6063      	str	r3, [r4, #4]
 8015ae4:	bf04      	itt	eq
 8015ae6:	1852      	addeq	r2, r2, r1
 8015ae8:	6022      	streq	r2, [r4, #0]
 8015aea:	602c      	str	r4, [r5, #0]
 8015aec:	e7ec      	b.n	8015ac8 <_free_r+0x28>
 8015aee:	461a      	mov	r2, r3
 8015af0:	685b      	ldr	r3, [r3, #4]
 8015af2:	b10b      	cbz	r3, 8015af8 <_free_r+0x58>
 8015af4:	42a3      	cmp	r3, r4
 8015af6:	d9fa      	bls.n	8015aee <_free_r+0x4e>
 8015af8:	6811      	ldr	r1, [r2, #0]
 8015afa:	1855      	adds	r5, r2, r1
 8015afc:	42a5      	cmp	r5, r4
 8015afe:	d10b      	bne.n	8015b18 <_free_r+0x78>
 8015b00:	6824      	ldr	r4, [r4, #0]
 8015b02:	4421      	add	r1, r4
 8015b04:	1854      	adds	r4, r2, r1
 8015b06:	42a3      	cmp	r3, r4
 8015b08:	6011      	str	r1, [r2, #0]
 8015b0a:	d1dd      	bne.n	8015ac8 <_free_r+0x28>
 8015b0c:	681c      	ldr	r4, [r3, #0]
 8015b0e:	685b      	ldr	r3, [r3, #4]
 8015b10:	6053      	str	r3, [r2, #4]
 8015b12:	4421      	add	r1, r4
 8015b14:	6011      	str	r1, [r2, #0]
 8015b16:	e7d7      	b.n	8015ac8 <_free_r+0x28>
 8015b18:	d902      	bls.n	8015b20 <_free_r+0x80>
 8015b1a:	230c      	movs	r3, #12
 8015b1c:	6003      	str	r3, [r0, #0]
 8015b1e:	e7d3      	b.n	8015ac8 <_free_r+0x28>
 8015b20:	6825      	ldr	r5, [r4, #0]
 8015b22:	1961      	adds	r1, r4, r5
 8015b24:	428b      	cmp	r3, r1
 8015b26:	bf04      	itt	eq
 8015b28:	6819      	ldreq	r1, [r3, #0]
 8015b2a:	685b      	ldreq	r3, [r3, #4]
 8015b2c:	6063      	str	r3, [r4, #4]
 8015b2e:	bf04      	itt	eq
 8015b30:	1949      	addeq	r1, r1, r5
 8015b32:	6021      	streq	r1, [r4, #0]
 8015b34:	6054      	str	r4, [r2, #4]
 8015b36:	e7c7      	b.n	8015ac8 <_free_r+0x28>
 8015b38:	b003      	add	sp, #12
 8015b3a:	bd30      	pop	{r4, r5, pc}
 8015b3c:	200008a4 	.word	0x200008a4

08015b40 <_malloc_r>:
 8015b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b42:	1ccd      	adds	r5, r1, #3
 8015b44:	f025 0503 	bic.w	r5, r5, #3
 8015b48:	3508      	adds	r5, #8
 8015b4a:	2d0c      	cmp	r5, #12
 8015b4c:	bf38      	it	cc
 8015b4e:	250c      	movcc	r5, #12
 8015b50:	2d00      	cmp	r5, #0
 8015b52:	4606      	mov	r6, r0
 8015b54:	db01      	blt.n	8015b5a <_malloc_r+0x1a>
 8015b56:	42a9      	cmp	r1, r5
 8015b58:	d903      	bls.n	8015b62 <_malloc_r+0x22>
 8015b5a:	230c      	movs	r3, #12
 8015b5c:	6033      	str	r3, [r6, #0]
 8015b5e:	2000      	movs	r0, #0
 8015b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b62:	f001 f82f 	bl	8016bc4 <__malloc_lock>
 8015b66:	4921      	ldr	r1, [pc, #132]	; (8015bec <_malloc_r+0xac>)
 8015b68:	680a      	ldr	r2, [r1, #0]
 8015b6a:	4614      	mov	r4, r2
 8015b6c:	b99c      	cbnz	r4, 8015b96 <_malloc_r+0x56>
 8015b6e:	4f20      	ldr	r7, [pc, #128]	; (8015bf0 <_malloc_r+0xb0>)
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	b923      	cbnz	r3, 8015b7e <_malloc_r+0x3e>
 8015b74:	4621      	mov	r1, r4
 8015b76:	4630      	mov	r0, r6
 8015b78:	f000 fcd2 	bl	8016520 <_sbrk_r>
 8015b7c:	6038      	str	r0, [r7, #0]
 8015b7e:	4629      	mov	r1, r5
 8015b80:	4630      	mov	r0, r6
 8015b82:	f000 fccd 	bl	8016520 <_sbrk_r>
 8015b86:	1c43      	adds	r3, r0, #1
 8015b88:	d123      	bne.n	8015bd2 <_malloc_r+0x92>
 8015b8a:	230c      	movs	r3, #12
 8015b8c:	6033      	str	r3, [r6, #0]
 8015b8e:	4630      	mov	r0, r6
 8015b90:	f001 f81e 	bl	8016bd0 <__malloc_unlock>
 8015b94:	e7e3      	b.n	8015b5e <_malloc_r+0x1e>
 8015b96:	6823      	ldr	r3, [r4, #0]
 8015b98:	1b5b      	subs	r3, r3, r5
 8015b9a:	d417      	bmi.n	8015bcc <_malloc_r+0x8c>
 8015b9c:	2b0b      	cmp	r3, #11
 8015b9e:	d903      	bls.n	8015ba8 <_malloc_r+0x68>
 8015ba0:	6023      	str	r3, [r4, #0]
 8015ba2:	441c      	add	r4, r3
 8015ba4:	6025      	str	r5, [r4, #0]
 8015ba6:	e004      	b.n	8015bb2 <_malloc_r+0x72>
 8015ba8:	6863      	ldr	r3, [r4, #4]
 8015baa:	42a2      	cmp	r2, r4
 8015bac:	bf0c      	ite	eq
 8015bae:	600b      	streq	r3, [r1, #0]
 8015bb0:	6053      	strne	r3, [r2, #4]
 8015bb2:	4630      	mov	r0, r6
 8015bb4:	f001 f80c 	bl	8016bd0 <__malloc_unlock>
 8015bb8:	f104 000b 	add.w	r0, r4, #11
 8015bbc:	1d23      	adds	r3, r4, #4
 8015bbe:	f020 0007 	bic.w	r0, r0, #7
 8015bc2:	1ac2      	subs	r2, r0, r3
 8015bc4:	d0cc      	beq.n	8015b60 <_malloc_r+0x20>
 8015bc6:	1a1b      	subs	r3, r3, r0
 8015bc8:	50a3      	str	r3, [r4, r2]
 8015bca:	e7c9      	b.n	8015b60 <_malloc_r+0x20>
 8015bcc:	4622      	mov	r2, r4
 8015bce:	6864      	ldr	r4, [r4, #4]
 8015bd0:	e7cc      	b.n	8015b6c <_malloc_r+0x2c>
 8015bd2:	1cc4      	adds	r4, r0, #3
 8015bd4:	f024 0403 	bic.w	r4, r4, #3
 8015bd8:	42a0      	cmp	r0, r4
 8015bda:	d0e3      	beq.n	8015ba4 <_malloc_r+0x64>
 8015bdc:	1a21      	subs	r1, r4, r0
 8015bde:	4630      	mov	r0, r6
 8015be0:	f000 fc9e 	bl	8016520 <_sbrk_r>
 8015be4:	3001      	adds	r0, #1
 8015be6:	d1dd      	bne.n	8015ba4 <_malloc_r+0x64>
 8015be8:	e7cf      	b.n	8015b8a <_malloc_r+0x4a>
 8015bea:	bf00      	nop
 8015bec:	200008a4 	.word	0x200008a4
 8015bf0:	200008a8 	.word	0x200008a8

08015bf4 <__ssputs_r>:
 8015bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bf8:	688e      	ldr	r6, [r1, #8]
 8015bfa:	429e      	cmp	r6, r3
 8015bfc:	4682      	mov	sl, r0
 8015bfe:	460c      	mov	r4, r1
 8015c00:	4690      	mov	r8, r2
 8015c02:	461f      	mov	r7, r3
 8015c04:	d838      	bhi.n	8015c78 <__ssputs_r+0x84>
 8015c06:	898a      	ldrh	r2, [r1, #12]
 8015c08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015c0c:	d032      	beq.n	8015c74 <__ssputs_r+0x80>
 8015c0e:	6825      	ldr	r5, [r4, #0]
 8015c10:	6909      	ldr	r1, [r1, #16]
 8015c12:	eba5 0901 	sub.w	r9, r5, r1
 8015c16:	6965      	ldr	r5, [r4, #20]
 8015c18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015c1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015c20:	3301      	adds	r3, #1
 8015c22:	444b      	add	r3, r9
 8015c24:	106d      	asrs	r5, r5, #1
 8015c26:	429d      	cmp	r5, r3
 8015c28:	bf38      	it	cc
 8015c2a:	461d      	movcc	r5, r3
 8015c2c:	0553      	lsls	r3, r2, #21
 8015c2e:	d531      	bpl.n	8015c94 <__ssputs_r+0xa0>
 8015c30:	4629      	mov	r1, r5
 8015c32:	f7ff ff85 	bl	8015b40 <_malloc_r>
 8015c36:	4606      	mov	r6, r0
 8015c38:	b950      	cbnz	r0, 8015c50 <__ssputs_r+0x5c>
 8015c3a:	230c      	movs	r3, #12
 8015c3c:	f8ca 3000 	str.w	r3, [sl]
 8015c40:	89a3      	ldrh	r3, [r4, #12]
 8015c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c46:	81a3      	strh	r3, [r4, #12]
 8015c48:	f04f 30ff 	mov.w	r0, #4294967295
 8015c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c50:	6921      	ldr	r1, [r4, #16]
 8015c52:	464a      	mov	r2, r9
 8015c54:	f7ff fa4c 	bl	80150f0 <memcpy>
 8015c58:	89a3      	ldrh	r3, [r4, #12]
 8015c5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c62:	81a3      	strh	r3, [r4, #12]
 8015c64:	6126      	str	r6, [r4, #16]
 8015c66:	6165      	str	r5, [r4, #20]
 8015c68:	444e      	add	r6, r9
 8015c6a:	eba5 0509 	sub.w	r5, r5, r9
 8015c6e:	6026      	str	r6, [r4, #0]
 8015c70:	60a5      	str	r5, [r4, #8]
 8015c72:	463e      	mov	r6, r7
 8015c74:	42be      	cmp	r6, r7
 8015c76:	d900      	bls.n	8015c7a <__ssputs_r+0x86>
 8015c78:	463e      	mov	r6, r7
 8015c7a:	4632      	mov	r2, r6
 8015c7c:	6820      	ldr	r0, [r4, #0]
 8015c7e:	4641      	mov	r1, r8
 8015c80:	f000 ff86 	bl	8016b90 <memmove>
 8015c84:	68a3      	ldr	r3, [r4, #8]
 8015c86:	6822      	ldr	r2, [r4, #0]
 8015c88:	1b9b      	subs	r3, r3, r6
 8015c8a:	4432      	add	r2, r6
 8015c8c:	60a3      	str	r3, [r4, #8]
 8015c8e:	6022      	str	r2, [r4, #0]
 8015c90:	2000      	movs	r0, #0
 8015c92:	e7db      	b.n	8015c4c <__ssputs_r+0x58>
 8015c94:	462a      	mov	r2, r5
 8015c96:	f000 ffa1 	bl	8016bdc <_realloc_r>
 8015c9a:	4606      	mov	r6, r0
 8015c9c:	2800      	cmp	r0, #0
 8015c9e:	d1e1      	bne.n	8015c64 <__ssputs_r+0x70>
 8015ca0:	6921      	ldr	r1, [r4, #16]
 8015ca2:	4650      	mov	r0, sl
 8015ca4:	f7ff fefc 	bl	8015aa0 <_free_r>
 8015ca8:	e7c7      	b.n	8015c3a <__ssputs_r+0x46>
	...

08015cac <_svfiprintf_r>:
 8015cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cb0:	4698      	mov	r8, r3
 8015cb2:	898b      	ldrh	r3, [r1, #12]
 8015cb4:	061b      	lsls	r3, r3, #24
 8015cb6:	b09d      	sub	sp, #116	; 0x74
 8015cb8:	4607      	mov	r7, r0
 8015cba:	460d      	mov	r5, r1
 8015cbc:	4614      	mov	r4, r2
 8015cbe:	d50e      	bpl.n	8015cde <_svfiprintf_r+0x32>
 8015cc0:	690b      	ldr	r3, [r1, #16]
 8015cc2:	b963      	cbnz	r3, 8015cde <_svfiprintf_r+0x32>
 8015cc4:	2140      	movs	r1, #64	; 0x40
 8015cc6:	f7ff ff3b 	bl	8015b40 <_malloc_r>
 8015cca:	6028      	str	r0, [r5, #0]
 8015ccc:	6128      	str	r0, [r5, #16]
 8015cce:	b920      	cbnz	r0, 8015cda <_svfiprintf_r+0x2e>
 8015cd0:	230c      	movs	r3, #12
 8015cd2:	603b      	str	r3, [r7, #0]
 8015cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8015cd8:	e0d1      	b.n	8015e7e <_svfiprintf_r+0x1d2>
 8015cda:	2340      	movs	r3, #64	; 0x40
 8015cdc:	616b      	str	r3, [r5, #20]
 8015cde:	2300      	movs	r3, #0
 8015ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8015ce2:	2320      	movs	r3, #32
 8015ce4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ce8:	f8cd 800c 	str.w	r8, [sp, #12]
 8015cec:	2330      	movs	r3, #48	; 0x30
 8015cee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015e98 <_svfiprintf_r+0x1ec>
 8015cf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015cf6:	f04f 0901 	mov.w	r9, #1
 8015cfa:	4623      	mov	r3, r4
 8015cfc:	469a      	mov	sl, r3
 8015cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d02:	b10a      	cbz	r2, 8015d08 <_svfiprintf_r+0x5c>
 8015d04:	2a25      	cmp	r2, #37	; 0x25
 8015d06:	d1f9      	bne.n	8015cfc <_svfiprintf_r+0x50>
 8015d08:	ebba 0b04 	subs.w	fp, sl, r4
 8015d0c:	d00b      	beq.n	8015d26 <_svfiprintf_r+0x7a>
 8015d0e:	465b      	mov	r3, fp
 8015d10:	4622      	mov	r2, r4
 8015d12:	4629      	mov	r1, r5
 8015d14:	4638      	mov	r0, r7
 8015d16:	f7ff ff6d 	bl	8015bf4 <__ssputs_r>
 8015d1a:	3001      	adds	r0, #1
 8015d1c:	f000 80aa 	beq.w	8015e74 <_svfiprintf_r+0x1c8>
 8015d20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d22:	445a      	add	r2, fp
 8015d24:	9209      	str	r2, [sp, #36]	; 0x24
 8015d26:	f89a 3000 	ldrb.w	r3, [sl]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	f000 80a2 	beq.w	8015e74 <_svfiprintf_r+0x1c8>
 8015d30:	2300      	movs	r3, #0
 8015d32:	f04f 32ff 	mov.w	r2, #4294967295
 8015d36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015d3a:	f10a 0a01 	add.w	sl, sl, #1
 8015d3e:	9304      	str	r3, [sp, #16]
 8015d40:	9307      	str	r3, [sp, #28]
 8015d42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015d46:	931a      	str	r3, [sp, #104]	; 0x68
 8015d48:	4654      	mov	r4, sl
 8015d4a:	2205      	movs	r2, #5
 8015d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d50:	4851      	ldr	r0, [pc, #324]	; (8015e98 <_svfiprintf_r+0x1ec>)
 8015d52:	f7ea fa45 	bl	80001e0 <memchr>
 8015d56:	9a04      	ldr	r2, [sp, #16]
 8015d58:	b9d8      	cbnz	r0, 8015d92 <_svfiprintf_r+0xe6>
 8015d5a:	06d0      	lsls	r0, r2, #27
 8015d5c:	bf44      	itt	mi
 8015d5e:	2320      	movmi	r3, #32
 8015d60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d64:	0711      	lsls	r1, r2, #28
 8015d66:	bf44      	itt	mi
 8015d68:	232b      	movmi	r3, #43	; 0x2b
 8015d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8015d72:	2b2a      	cmp	r3, #42	; 0x2a
 8015d74:	d015      	beq.n	8015da2 <_svfiprintf_r+0xf6>
 8015d76:	9a07      	ldr	r2, [sp, #28]
 8015d78:	4654      	mov	r4, sl
 8015d7a:	2000      	movs	r0, #0
 8015d7c:	f04f 0c0a 	mov.w	ip, #10
 8015d80:	4621      	mov	r1, r4
 8015d82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015d86:	3b30      	subs	r3, #48	; 0x30
 8015d88:	2b09      	cmp	r3, #9
 8015d8a:	d94e      	bls.n	8015e2a <_svfiprintf_r+0x17e>
 8015d8c:	b1b0      	cbz	r0, 8015dbc <_svfiprintf_r+0x110>
 8015d8e:	9207      	str	r2, [sp, #28]
 8015d90:	e014      	b.n	8015dbc <_svfiprintf_r+0x110>
 8015d92:	eba0 0308 	sub.w	r3, r0, r8
 8015d96:	fa09 f303 	lsl.w	r3, r9, r3
 8015d9a:	4313      	orrs	r3, r2
 8015d9c:	9304      	str	r3, [sp, #16]
 8015d9e:	46a2      	mov	sl, r4
 8015da0:	e7d2      	b.n	8015d48 <_svfiprintf_r+0x9c>
 8015da2:	9b03      	ldr	r3, [sp, #12]
 8015da4:	1d19      	adds	r1, r3, #4
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	9103      	str	r1, [sp, #12]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	bfbb      	ittet	lt
 8015dae:	425b      	neglt	r3, r3
 8015db0:	f042 0202 	orrlt.w	r2, r2, #2
 8015db4:	9307      	strge	r3, [sp, #28]
 8015db6:	9307      	strlt	r3, [sp, #28]
 8015db8:	bfb8      	it	lt
 8015dba:	9204      	strlt	r2, [sp, #16]
 8015dbc:	7823      	ldrb	r3, [r4, #0]
 8015dbe:	2b2e      	cmp	r3, #46	; 0x2e
 8015dc0:	d10c      	bne.n	8015ddc <_svfiprintf_r+0x130>
 8015dc2:	7863      	ldrb	r3, [r4, #1]
 8015dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8015dc6:	d135      	bne.n	8015e34 <_svfiprintf_r+0x188>
 8015dc8:	9b03      	ldr	r3, [sp, #12]
 8015dca:	1d1a      	adds	r2, r3, #4
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	9203      	str	r2, [sp, #12]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	bfb8      	it	lt
 8015dd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8015dd8:	3402      	adds	r4, #2
 8015dda:	9305      	str	r3, [sp, #20]
 8015ddc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015ea8 <_svfiprintf_r+0x1fc>
 8015de0:	7821      	ldrb	r1, [r4, #0]
 8015de2:	2203      	movs	r2, #3
 8015de4:	4650      	mov	r0, sl
 8015de6:	f7ea f9fb 	bl	80001e0 <memchr>
 8015dea:	b140      	cbz	r0, 8015dfe <_svfiprintf_r+0x152>
 8015dec:	2340      	movs	r3, #64	; 0x40
 8015dee:	eba0 000a 	sub.w	r0, r0, sl
 8015df2:	fa03 f000 	lsl.w	r0, r3, r0
 8015df6:	9b04      	ldr	r3, [sp, #16]
 8015df8:	4303      	orrs	r3, r0
 8015dfa:	3401      	adds	r4, #1
 8015dfc:	9304      	str	r3, [sp, #16]
 8015dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e02:	4826      	ldr	r0, [pc, #152]	; (8015e9c <_svfiprintf_r+0x1f0>)
 8015e04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015e08:	2206      	movs	r2, #6
 8015e0a:	f7ea f9e9 	bl	80001e0 <memchr>
 8015e0e:	2800      	cmp	r0, #0
 8015e10:	d038      	beq.n	8015e84 <_svfiprintf_r+0x1d8>
 8015e12:	4b23      	ldr	r3, [pc, #140]	; (8015ea0 <_svfiprintf_r+0x1f4>)
 8015e14:	bb1b      	cbnz	r3, 8015e5e <_svfiprintf_r+0x1b2>
 8015e16:	9b03      	ldr	r3, [sp, #12]
 8015e18:	3307      	adds	r3, #7
 8015e1a:	f023 0307 	bic.w	r3, r3, #7
 8015e1e:	3308      	adds	r3, #8
 8015e20:	9303      	str	r3, [sp, #12]
 8015e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e24:	4433      	add	r3, r6
 8015e26:	9309      	str	r3, [sp, #36]	; 0x24
 8015e28:	e767      	b.n	8015cfa <_svfiprintf_r+0x4e>
 8015e2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8015e2e:	460c      	mov	r4, r1
 8015e30:	2001      	movs	r0, #1
 8015e32:	e7a5      	b.n	8015d80 <_svfiprintf_r+0xd4>
 8015e34:	2300      	movs	r3, #0
 8015e36:	3401      	adds	r4, #1
 8015e38:	9305      	str	r3, [sp, #20]
 8015e3a:	4619      	mov	r1, r3
 8015e3c:	f04f 0c0a 	mov.w	ip, #10
 8015e40:	4620      	mov	r0, r4
 8015e42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e46:	3a30      	subs	r2, #48	; 0x30
 8015e48:	2a09      	cmp	r2, #9
 8015e4a:	d903      	bls.n	8015e54 <_svfiprintf_r+0x1a8>
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d0c5      	beq.n	8015ddc <_svfiprintf_r+0x130>
 8015e50:	9105      	str	r1, [sp, #20]
 8015e52:	e7c3      	b.n	8015ddc <_svfiprintf_r+0x130>
 8015e54:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e58:	4604      	mov	r4, r0
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	e7f0      	b.n	8015e40 <_svfiprintf_r+0x194>
 8015e5e:	ab03      	add	r3, sp, #12
 8015e60:	9300      	str	r3, [sp, #0]
 8015e62:	462a      	mov	r2, r5
 8015e64:	4b0f      	ldr	r3, [pc, #60]	; (8015ea4 <_svfiprintf_r+0x1f8>)
 8015e66:	a904      	add	r1, sp, #16
 8015e68:	4638      	mov	r0, r7
 8015e6a:	f7fc f8c7 	bl	8011ffc <_printf_float>
 8015e6e:	1c42      	adds	r2, r0, #1
 8015e70:	4606      	mov	r6, r0
 8015e72:	d1d6      	bne.n	8015e22 <_svfiprintf_r+0x176>
 8015e74:	89ab      	ldrh	r3, [r5, #12]
 8015e76:	065b      	lsls	r3, r3, #25
 8015e78:	f53f af2c 	bmi.w	8015cd4 <_svfiprintf_r+0x28>
 8015e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e7e:	b01d      	add	sp, #116	; 0x74
 8015e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e84:	ab03      	add	r3, sp, #12
 8015e86:	9300      	str	r3, [sp, #0]
 8015e88:	462a      	mov	r2, r5
 8015e8a:	4b06      	ldr	r3, [pc, #24]	; (8015ea4 <_svfiprintf_r+0x1f8>)
 8015e8c:	a904      	add	r1, sp, #16
 8015e8e:	4638      	mov	r0, r7
 8015e90:	f7fc fb58 	bl	8012544 <_printf_i>
 8015e94:	e7eb      	b.n	8015e6e <_svfiprintf_r+0x1c2>
 8015e96:	bf00      	nop
 8015e98:	08019414 	.word	0x08019414
 8015e9c:	0801941e 	.word	0x0801941e
 8015ea0:	08011ffd 	.word	0x08011ffd
 8015ea4:	08015bf5 	.word	0x08015bf5
 8015ea8:	0801941a 	.word	0x0801941a

08015eac <_sungetc_r>:
 8015eac:	b538      	push	{r3, r4, r5, lr}
 8015eae:	1c4b      	adds	r3, r1, #1
 8015eb0:	4614      	mov	r4, r2
 8015eb2:	d103      	bne.n	8015ebc <_sungetc_r+0x10>
 8015eb4:	f04f 35ff 	mov.w	r5, #4294967295
 8015eb8:	4628      	mov	r0, r5
 8015eba:	bd38      	pop	{r3, r4, r5, pc}
 8015ebc:	8993      	ldrh	r3, [r2, #12]
 8015ebe:	f023 0320 	bic.w	r3, r3, #32
 8015ec2:	8193      	strh	r3, [r2, #12]
 8015ec4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015ec6:	6852      	ldr	r2, [r2, #4]
 8015ec8:	b2cd      	uxtb	r5, r1
 8015eca:	b18b      	cbz	r3, 8015ef0 <_sungetc_r+0x44>
 8015ecc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015ece:	4293      	cmp	r3, r2
 8015ed0:	dd08      	ble.n	8015ee4 <_sungetc_r+0x38>
 8015ed2:	6823      	ldr	r3, [r4, #0]
 8015ed4:	1e5a      	subs	r2, r3, #1
 8015ed6:	6022      	str	r2, [r4, #0]
 8015ed8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015edc:	6863      	ldr	r3, [r4, #4]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	6063      	str	r3, [r4, #4]
 8015ee2:	e7e9      	b.n	8015eb8 <_sungetc_r+0xc>
 8015ee4:	4621      	mov	r1, r4
 8015ee6:	f000 fbf5 	bl	80166d4 <__submore>
 8015eea:	2800      	cmp	r0, #0
 8015eec:	d0f1      	beq.n	8015ed2 <_sungetc_r+0x26>
 8015eee:	e7e1      	b.n	8015eb4 <_sungetc_r+0x8>
 8015ef0:	6921      	ldr	r1, [r4, #16]
 8015ef2:	6823      	ldr	r3, [r4, #0]
 8015ef4:	b151      	cbz	r1, 8015f0c <_sungetc_r+0x60>
 8015ef6:	4299      	cmp	r1, r3
 8015ef8:	d208      	bcs.n	8015f0c <_sungetc_r+0x60>
 8015efa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015efe:	42a9      	cmp	r1, r5
 8015f00:	d104      	bne.n	8015f0c <_sungetc_r+0x60>
 8015f02:	3b01      	subs	r3, #1
 8015f04:	3201      	adds	r2, #1
 8015f06:	6023      	str	r3, [r4, #0]
 8015f08:	6062      	str	r2, [r4, #4]
 8015f0a:	e7d5      	b.n	8015eb8 <_sungetc_r+0xc>
 8015f0c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015f10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f14:	6363      	str	r3, [r4, #52]	; 0x34
 8015f16:	2303      	movs	r3, #3
 8015f18:	63a3      	str	r3, [r4, #56]	; 0x38
 8015f1a:	4623      	mov	r3, r4
 8015f1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015f20:	6023      	str	r3, [r4, #0]
 8015f22:	2301      	movs	r3, #1
 8015f24:	e7dc      	b.n	8015ee0 <_sungetc_r+0x34>

08015f26 <__ssrefill_r>:
 8015f26:	b510      	push	{r4, lr}
 8015f28:	460c      	mov	r4, r1
 8015f2a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015f2c:	b169      	cbz	r1, 8015f4a <__ssrefill_r+0x24>
 8015f2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f32:	4299      	cmp	r1, r3
 8015f34:	d001      	beq.n	8015f3a <__ssrefill_r+0x14>
 8015f36:	f7ff fdb3 	bl	8015aa0 <_free_r>
 8015f3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015f3c:	6063      	str	r3, [r4, #4]
 8015f3e:	2000      	movs	r0, #0
 8015f40:	6360      	str	r0, [r4, #52]	; 0x34
 8015f42:	b113      	cbz	r3, 8015f4a <__ssrefill_r+0x24>
 8015f44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015f46:	6023      	str	r3, [r4, #0]
 8015f48:	bd10      	pop	{r4, pc}
 8015f4a:	6923      	ldr	r3, [r4, #16]
 8015f4c:	6023      	str	r3, [r4, #0]
 8015f4e:	2300      	movs	r3, #0
 8015f50:	6063      	str	r3, [r4, #4]
 8015f52:	89a3      	ldrh	r3, [r4, #12]
 8015f54:	f043 0320 	orr.w	r3, r3, #32
 8015f58:	81a3      	strh	r3, [r4, #12]
 8015f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f5e:	e7f3      	b.n	8015f48 <__ssrefill_r+0x22>

08015f60 <__ssvfiscanf_r>:
 8015f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f64:	460c      	mov	r4, r1
 8015f66:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8015f6a:	2100      	movs	r1, #0
 8015f6c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8015f70:	49b2      	ldr	r1, [pc, #712]	; (801623c <__ssvfiscanf_r+0x2dc>)
 8015f72:	91a0      	str	r1, [sp, #640]	; 0x280
 8015f74:	f10d 0804 	add.w	r8, sp, #4
 8015f78:	49b1      	ldr	r1, [pc, #708]	; (8016240 <__ssvfiscanf_r+0x2e0>)
 8015f7a:	4fb2      	ldr	r7, [pc, #712]	; (8016244 <__ssvfiscanf_r+0x2e4>)
 8015f7c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8016248 <__ssvfiscanf_r+0x2e8>
 8015f80:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015f84:	4606      	mov	r6, r0
 8015f86:	91a1      	str	r1, [sp, #644]	; 0x284
 8015f88:	9300      	str	r3, [sp, #0]
 8015f8a:	f892 a000 	ldrb.w	sl, [r2]
 8015f8e:	f1ba 0f00 	cmp.w	sl, #0
 8015f92:	f000 8151 	beq.w	8016238 <__ssvfiscanf_r+0x2d8>
 8015f96:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8015f9a:	f013 0308 	ands.w	r3, r3, #8
 8015f9e:	f102 0501 	add.w	r5, r2, #1
 8015fa2:	d019      	beq.n	8015fd8 <__ssvfiscanf_r+0x78>
 8015fa4:	6863      	ldr	r3, [r4, #4]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	dd0f      	ble.n	8015fca <__ssvfiscanf_r+0x6a>
 8015faa:	6823      	ldr	r3, [r4, #0]
 8015fac:	781a      	ldrb	r2, [r3, #0]
 8015fae:	5cba      	ldrb	r2, [r7, r2]
 8015fb0:	0712      	lsls	r2, r2, #28
 8015fb2:	d401      	bmi.n	8015fb8 <__ssvfiscanf_r+0x58>
 8015fb4:	462a      	mov	r2, r5
 8015fb6:	e7e8      	b.n	8015f8a <__ssvfiscanf_r+0x2a>
 8015fb8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015fba:	3201      	adds	r2, #1
 8015fbc:	9245      	str	r2, [sp, #276]	; 0x114
 8015fbe:	6862      	ldr	r2, [r4, #4]
 8015fc0:	3301      	adds	r3, #1
 8015fc2:	3a01      	subs	r2, #1
 8015fc4:	6062      	str	r2, [r4, #4]
 8015fc6:	6023      	str	r3, [r4, #0]
 8015fc8:	e7ec      	b.n	8015fa4 <__ssvfiscanf_r+0x44>
 8015fca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015fcc:	4621      	mov	r1, r4
 8015fce:	4630      	mov	r0, r6
 8015fd0:	4798      	blx	r3
 8015fd2:	2800      	cmp	r0, #0
 8015fd4:	d0e9      	beq.n	8015faa <__ssvfiscanf_r+0x4a>
 8015fd6:	e7ed      	b.n	8015fb4 <__ssvfiscanf_r+0x54>
 8015fd8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8015fdc:	f040 8083 	bne.w	80160e6 <__ssvfiscanf_r+0x186>
 8015fe0:	9341      	str	r3, [sp, #260]	; 0x104
 8015fe2:	9343      	str	r3, [sp, #268]	; 0x10c
 8015fe4:	7853      	ldrb	r3, [r2, #1]
 8015fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8015fe8:	bf02      	ittt	eq
 8015fea:	2310      	moveq	r3, #16
 8015fec:	1c95      	addeq	r5, r2, #2
 8015fee:	9341      	streq	r3, [sp, #260]	; 0x104
 8015ff0:	220a      	movs	r2, #10
 8015ff2:	46ab      	mov	fp, r5
 8015ff4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8015ff8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8015ffc:	2b09      	cmp	r3, #9
 8015ffe:	d91d      	bls.n	801603c <__ssvfiscanf_r+0xdc>
 8016000:	4891      	ldr	r0, [pc, #580]	; (8016248 <__ssvfiscanf_r+0x2e8>)
 8016002:	2203      	movs	r2, #3
 8016004:	f7ea f8ec 	bl	80001e0 <memchr>
 8016008:	b140      	cbz	r0, 801601c <__ssvfiscanf_r+0xbc>
 801600a:	2301      	movs	r3, #1
 801600c:	eba0 0009 	sub.w	r0, r0, r9
 8016010:	fa03 f000 	lsl.w	r0, r3, r0
 8016014:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016016:	4318      	orrs	r0, r3
 8016018:	9041      	str	r0, [sp, #260]	; 0x104
 801601a:	465d      	mov	r5, fp
 801601c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016020:	2b78      	cmp	r3, #120	; 0x78
 8016022:	d806      	bhi.n	8016032 <__ssvfiscanf_r+0xd2>
 8016024:	2b57      	cmp	r3, #87	; 0x57
 8016026:	d810      	bhi.n	801604a <__ssvfiscanf_r+0xea>
 8016028:	2b25      	cmp	r3, #37	; 0x25
 801602a:	d05c      	beq.n	80160e6 <__ssvfiscanf_r+0x186>
 801602c:	d856      	bhi.n	80160dc <__ssvfiscanf_r+0x17c>
 801602e:	2b00      	cmp	r3, #0
 8016030:	d074      	beq.n	801611c <__ssvfiscanf_r+0x1bc>
 8016032:	2303      	movs	r3, #3
 8016034:	9347      	str	r3, [sp, #284]	; 0x11c
 8016036:	230a      	movs	r3, #10
 8016038:	9342      	str	r3, [sp, #264]	; 0x108
 801603a:	e081      	b.n	8016140 <__ssvfiscanf_r+0x1e0>
 801603c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801603e:	fb02 1303 	mla	r3, r2, r3, r1
 8016042:	3b30      	subs	r3, #48	; 0x30
 8016044:	9343      	str	r3, [sp, #268]	; 0x10c
 8016046:	465d      	mov	r5, fp
 8016048:	e7d3      	b.n	8015ff2 <__ssvfiscanf_r+0x92>
 801604a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801604e:	2a20      	cmp	r2, #32
 8016050:	d8ef      	bhi.n	8016032 <__ssvfiscanf_r+0xd2>
 8016052:	a101      	add	r1, pc, #4	; (adr r1, 8016058 <__ssvfiscanf_r+0xf8>)
 8016054:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016058:	0801612b 	.word	0x0801612b
 801605c:	08016033 	.word	0x08016033
 8016060:	08016033 	.word	0x08016033
 8016064:	08016189 	.word	0x08016189
 8016068:	08016033 	.word	0x08016033
 801606c:	08016033 	.word	0x08016033
 8016070:	08016033 	.word	0x08016033
 8016074:	08016033 	.word	0x08016033
 8016078:	08016033 	.word	0x08016033
 801607c:	08016033 	.word	0x08016033
 8016080:	08016033 	.word	0x08016033
 8016084:	0801619f 	.word	0x0801619f
 8016088:	08016175 	.word	0x08016175
 801608c:	080160e3 	.word	0x080160e3
 8016090:	080160e3 	.word	0x080160e3
 8016094:	080160e3 	.word	0x080160e3
 8016098:	08016033 	.word	0x08016033
 801609c:	08016179 	.word	0x08016179
 80160a0:	08016033 	.word	0x08016033
 80160a4:	08016033 	.word	0x08016033
 80160a8:	08016033 	.word	0x08016033
 80160ac:	08016033 	.word	0x08016033
 80160b0:	080161af 	.word	0x080161af
 80160b4:	08016181 	.word	0x08016181
 80160b8:	08016123 	.word	0x08016123
 80160bc:	08016033 	.word	0x08016033
 80160c0:	08016033 	.word	0x08016033
 80160c4:	080161ab 	.word	0x080161ab
 80160c8:	08016033 	.word	0x08016033
 80160cc:	08016175 	.word	0x08016175
 80160d0:	08016033 	.word	0x08016033
 80160d4:	08016033 	.word	0x08016033
 80160d8:	0801612b 	.word	0x0801612b
 80160dc:	3b45      	subs	r3, #69	; 0x45
 80160de:	2b02      	cmp	r3, #2
 80160e0:	d8a7      	bhi.n	8016032 <__ssvfiscanf_r+0xd2>
 80160e2:	2305      	movs	r3, #5
 80160e4:	e02b      	b.n	801613e <__ssvfiscanf_r+0x1de>
 80160e6:	6863      	ldr	r3, [r4, #4]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	dd0d      	ble.n	8016108 <__ssvfiscanf_r+0x1a8>
 80160ec:	6823      	ldr	r3, [r4, #0]
 80160ee:	781a      	ldrb	r2, [r3, #0]
 80160f0:	4552      	cmp	r2, sl
 80160f2:	f040 80a1 	bne.w	8016238 <__ssvfiscanf_r+0x2d8>
 80160f6:	3301      	adds	r3, #1
 80160f8:	6862      	ldr	r2, [r4, #4]
 80160fa:	6023      	str	r3, [r4, #0]
 80160fc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80160fe:	3a01      	subs	r2, #1
 8016100:	3301      	adds	r3, #1
 8016102:	6062      	str	r2, [r4, #4]
 8016104:	9345      	str	r3, [sp, #276]	; 0x114
 8016106:	e755      	b.n	8015fb4 <__ssvfiscanf_r+0x54>
 8016108:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801610a:	4621      	mov	r1, r4
 801610c:	4630      	mov	r0, r6
 801610e:	4798      	blx	r3
 8016110:	2800      	cmp	r0, #0
 8016112:	d0eb      	beq.n	80160ec <__ssvfiscanf_r+0x18c>
 8016114:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016116:	2800      	cmp	r0, #0
 8016118:	f040 8084 	bne.w	8016224 <__ssvfiscanf_r+0x2c4>
 801611c:	f04f 30ff 	mov.w	r0, #4294967295
 8016120:	e086      	b.n	8016230 <__ssvfiscanf_r+0x2d0>
 8016122:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016124:	f042 0220 	orr.w	r2, r2, #32
 8016128:	9241      	str	r2, [sp, #260]	; 0x104
 801612a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801612c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016130:	9241      	str	r2, [sp, #260]	; 0x104
 8016132:	2210      	movs	r2, #16
 8016134:	2b6f      	cmp	r3, #111	; 0x6f
 8016136:	9242      	str	r2, [sp, #264]	; 0x108
 8016138:	bf34      	ite	cc
 801613a:	2303      	movcc	r3, #3
 801613c:	2304      	movcs	r3, #4
 801613e:	9347      	str	r3, [sp, #284]	; 0x11c
 8016140:	6863      	ldr	r3, [r4, #4]
 8016142:	2b00      	cmp	r3, #0
 8016144:	dd41      	ble.n	80161ca <__ssvfiscanf_r+0x26a>
 8016146:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016148:	0659      	lsls	r1, r3, #25
 801614a:	d404      	bmi.n	8016156 <__ssvfiscanf_r+0x1f6>
 801614c:	6823      	ldr	r3, [r4, #0]
 801614e:	781a      	ldrb	r2, [r3, #0]
 8016150:	5cba      	ldrb	r2, [r7, r2]
 8016152:	0712      	lsls	r2, r2, #28
 8016154:	d440      	bmi.n	80161d8 <__ssvfiscanf_r+0x278>
 8016156:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016158:	2b02      	cmp	r3, #2
 801615a:	dc4f      	bgt.n	80161fc <__ssvfiscanf_r+0x29c>
 801615c:	466b      	mov	r3, sp
 801615e:	4622      	mov	r2, r4
 8016160:	a941      	add	r1, sp, #260	; 0x104
 8016162:	4630      	mov	r0, r6
 8016164:	f000 f874 	bl	8016250 <_scanf_chars>
 8016168:	2801      	cmp	r0, #1
 801616a:	d065      	beq.n	8016238 <__ssvfiscanf_r+0x2d8>
 801616c:	2802      	cmp	r0, #2
 801616e:	f47f af21 	bne.w	8015fb4 <__ssvfiscanf_r+0x54>
 8016172:	e7cf      	b.n	8016114 <__ssvfiscanf_r+0x1b4>
 8016174:	220a      	movs	r2, #10
 8016176:	e7dd      	b.n	8016134 <__ssvfiscanf_r+0x1d4>
 8016178:	2300      	movs	r3, #0
 801617a:	9342      	str	r3, [sp, #264]	; 0x108
 801617c:	2303      	movs	r3, #3
 801617e:	e7de      	b.n	801613e <__ssvfiscanf_r+0x1de>
 8016180:	2308      	movs	r3, #8
 8016182:	9342      	str	r3, [sp, #264]	; 0x108
 8016184:	2304      	movs	r3, #4
 8016186:	e7da      	b.n	801613e <__ssvfiscanf_r+0x1de>
 8016188:	4629      	mov	r1, r5
 801618a:	4640      	mov	r0, r8
 801618c:	f000 f9d8 	bl	8016540 <__sccl>
 8016190:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016196:	9341      	str	r3, [sp, #260]	; 0x104
 8016198:	4605      	mov	r5, r0
 801619a:	2301      	movs	r3, #1
 801619c:	e7cf      	b.n	801613e <__ssvfiscanf_r+0x1de>
 801619e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80161a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161a4:	9341      	str	r3, [sp, #260]	; 0x104
 80161a6:	2300      	movs	r3, #0
 80161a8:	e7c9      	b.n	801613e <__ssvfiscanf_r+0x1de>
 80161aa:	2302      	movs	r3, #2
 80161ac:	e7c7      	b.n	801613e <__ssvfiscanf_r+0x1de>
 80161ae:	9841      	ldr	r0, [sp, #260]	; 0x104
 80161b0:	06c3      	lsls	r3, r0, #27
 80161b2:	f53f aeff 	bmi.w	8015fb4 <__ssvfiscanf_r+0x54>
 80161b6:	9b00      	ldr	r3, [sp, #0]
 80161b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80161ba:	1d19      	adds	r1, r3, #4
 80161bc:	9100      	str	r1, [sp, #0]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	07c0      	lsls	r0, r0, #31
 80161c2:	bf4c      	ite	mi
 80161c4:	801a      	strhmi	r2, [r3, #0]
 80161c6:	601a      	strpl	r2, [r3, #0]
 80161c8:	e6f4      	b.n	8015fb4 <__ssvfiscanf_r+0x54>
 80161ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80161cc:	4621      	mov	r1, r4
 80161ce:	4630      	mov	r0, r6
 80161d0:	4798      	blx	r3
 80161d2:	2800      	cmp	r0, #0
 80161d4:	d0b7      	beq.n	8016146 <__ssvfiscanf_r+0x1e6>
 80161d6:	e79d      	b.n	8016114 <__ssvfiscanf_r+0x1b4>
 80161d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80161da:	3201      	adds	r2, #1
 80161dc:	9245      	str	r2, [sp, #276]	; 0x114
 80161de:	6862      	ldr	r2, [r4, #4]
 80161e0:	3a01      	subs	r2, #1
 80161e2:	2a00      	cmp	r2, #0
 80161e4:	6062      	str	r2, [r4, #4]
 80161e6:	dd02      	ble.n	80161ee <__ssvfiscanf_r+0x28e>
 80161e8:	3301      	adds	r3, #1
 80161ea:	6023      	str	r3, [r4, #0]
 80161ec:	e7ae      	b.n	801614c <__ssvfiscanf_r+0x1ec>
 80161ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80161f0:	4621      	mov	r1, r4
 80161f2:	4630      	mov	r0, r6
 80161f4:	4798      	blx	r3
 80161f6:	2800      	cmp	r0, #0
 80161f8:	d0a8      	beq.n	801614c <__ssvfiscanf_r+0x1ec>
 80161fa:	e78b      	b.n	8016114 <__ssvfiscanf_r+0x1b4>
 80161fc:	2b04      	cmp	r3, #4
 80161fe:	dc06      	bgt.n	801620e <__ssvfiscanf_r+0x2ae>
 8016200:	466b      	mov	r3, sp
 8016202:	4622      	mov	r2, r4
 8016204:	a941      	add	r1, sp, #260	; 0x104
 8016206:	4630      	mov	r0, r6
 8016208:	f000 f87a 	bl	8016300 <_scanf_i>
 801620c:	e7ac      	b.n	8016168 <__ssvfiscanf_r+0x208>
 801620e:	4b0f      	ldr	r3, [pc, #60]	; (801624c <__ssvfiscanf_r+0x2ec>)
 8016210:	2b00      	cmp	r3, #0
 8016212:	f43f aecf 	beq.w	8015fb4 <__ssvfiscanf_r+0x54>
 8016216:	466b      	mov	r3, sp
 8016218:	4622      	mov	r2, r4
 801621a:	a941      	add	r1, sp, #260	; 0x104
 801621c:	4630      	mov	r0, r6
 801621e:	f7fc fab7 	bl	8012790 <_scanf_float>
 8016222:	e7a1      	b.n	8016168 <__ssvfiscanf_r+0x208>
 8016224:	89a3      	ldrh	r3, [r4, #12]
 8016226:	f013 0f40 	tst.w	r3, #64	; 0x40
 801622a:	bf18      	it	ne
 801622c:	f04f 30ff 	movne.w	r0, #4294967295
 8016230:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8016234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016238:	9844      	ldr	r0, [sp, #272]	; 0x110
 801623a:	e7f9      	b.n	8016230 <__ssvfiscanf_r+0x2d0>
 801623c:	08015ead 	.word	0x08015ead
 8016240:	08015f27 	.word	0x08015f27
 8016244:	08019041 	.word	0x08019041
 8016248:	0801941a 	.word	0x0801941a
 801624c:	08012791 	.word	0x08012791

08016250 <_scanf_chars>:
 8016250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016254:	4615      	mov	r5, r2
 8016256:	688a      	ldr	r2, [r1, #8]
 8016258:	4680      	mov	r8, r0
 801625a:	460c      	mov	r4, r1
 801625c:	b932      	cbnz	r2, 801626c <_scanf_chars+0x1c>
 801625e:	698a      	ldr	r2, [r1, #24]
 8016260:	2a00      	cmp	r2, #0
 8016262:	bf0c      	ite	eq
 8016264:	2201      	moveq	r2, #1
 8016266:	f04f 32ff 	movne.w	r2, #4294967295
 801626a:	608a      	str	r2, [r1, #8]
 801626c:	6822      	ldr	r2, [r4, #0]
 801626e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80162fc <_scanf_chars+0xac>
 8016272:	06d1      	lsls	r1, r2, #27
 8016274:	bf5f      	itttt	pl
 8016276:	681a      	ldrpl	r2, [r3, #0]
 8016278:	1d11      	addpl	r1, r2, #4
 801627a:	6019      	strpl	r1, [r3, #0]
 801627c:	6816      	ldrpl	r6, [r2, #0]
 801627e:	2700      	movs	r7, #0
 8016280:	69a0      	ldr	r0, [r4, #24]
 8016282:	b188      	cbz	r0, 80162a8 <_scanf_chars+0x58>
 8016284:	2801      	cmp	r0, #1
 8016286:	d107      	bne.n	8016298 <_scanf_chars+0x48>
 8016288:	682b      	ldr	r3, [r5, #0]
 801628a:	781a      	ldrb	r2, [r3, #0]
 801628c:	6963      	ldr	r3, [r4, #20]
 801628e:	5c9b      	ldrb	r3, [r3, r2]
 8016290:	b953      	cbnz	r3, 80162a8 <_scanf_chars+0x58>
 8016292:	bb27      	cbnz	r7, 80162de <_scanf_chars+0x8e>
 8016294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016298:	2802      	cmp	r0, #2
 801629a:	d120      	bne.n	80162de <_scanf_chars+0x8e>
 801629c:	682b      	ldr	r3, [r5, #0]
 801629e:	781b      	ldrb	r3, [r3, #0]
 80162a0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80162a4:	071b      	lsls	r3, r3, #28
 80162a6:	d41a      	bmi.n	80162de <_scanf_chars+0x8e>
 80162a8:	6823      	ldr	r3, [r4, #0]
 80162aa:	06da      	lsls	r2, r3, #27
 80162ac:	bf5e      	ittt	pl
 80162ae:	682b      	ldrpl	r3, [r5, #0]
 80162b0:	781b      	ldrbpl	r3, [r3, #0]
 80162b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80162b6:	682a      	ldr	r2, [r5, #0]
 80162b8:	686b      	ldr	r3, [r5, #4]
 80162ba:	3201      	adds	r2, #1
 80162bc:	602a      	str	r2, [r5, #0]
 80162be:	68a2      	ldr	r2, [r4, #8]
 80162c0:	3b01      	subs	r3, #1
 80162c2:	3a01      	subs	r2, #1
 80162c4:	606b      	str	r3, [r5, #4]
 80162c6:	3701      	adds	r7, #1
 80162c8:	60a2      	str	r2, [r4, #8]
 80162ca:	b142      	cbz	r2, 80162de <_scanf_chars+0x8e>
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	dcd7      	bgt.n	8016280 <_scanf_chars+0x30>
 80162d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80162d4:	4629      	mov	r1, r5
 80162d6:	4640      	mov	r0, r8
 80162d8:	4798      	blx	r3
 80162da:	2800      	cmp	r0, #0
 80162dc:	d0d0      	beq.n	8016280 <_scanf_chars+0x30>
 80162de:	6823      	ldr	r3, [r4, #0]
 80162e0:	f013 0310 	ands.w	r3, r3, #16
 80162e4:	d105      	bne.n	80162f2 <_scanf_chars+0xa2>
 80162e6:	68e2      	ldr	r2, [r4, #12]
 80162e8:	3201      	adds	r2, #1
 80162ea:	60e2      	str	r2, [r4, #12]
 80162ec:	69a2      	ldr	r2, [r4, #24]
 80162ee:	b102      	cbz	r2, 80162f2 <_scanf_chars+0xa2>
 80162f0:	7033      	strb	r3, [r6, #0]
 80162f2:	6923      	ldr	r3, [r4, #16]
 80162f4:	441f      	add	r7, r3
 80162f6:	6127      	str	r7, [r4, #16]
 80162f8:	2000      	movs	r0, #0
 80162fa:	e7cb      	b.n	8016294 <_scanf_chars+0x44>
 80162fc:	08019041 	.word	0x08019041

08016300 <_scanf_i>:
 8016300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016304:	4698      	mov	r8, r3
 8016306:	4b74      	ldr	r3, [pc, #464]	; (80164d8 <_scanf_i+0x1d8>)
 8016308:	460c      	mov	r4, r1
 801630a:	4682      	mov	sl, r0
 801630c:	4616      	mov	r6, r2
 801630e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016312:	b087      	sub	sp, #28
 8016314:	ab03      	add	r3, sp, #12
 8016316:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801631a:	4b70      	ldr	r3, [pc, #448]	; (80164dc <_scanf_i+0x1dc>)
 801631c:	69a1      	ldr	r1, [r4, #24]
 801631e:	4a70      	ldr	r2, [pc, #448]	; (80164e0 <_scanf_i+0x1e0>)
 8016320:	2903      	cmp	r1, #3
 8016322:	bf18      	it	ne
 8016324:	461a      	movne	r2, r3
 8016326:	68a3      	ldr	r3, [r4, #8]
 8016328:	9201      	str	r2, [sp, #4]
 801632a:	1e5a      	subs	r2, r3, #1
 801632c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016330:	bf88      	it	hi
 8016332:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016336:	4627      	mov	r7, r4
 8016338:	bf82      	ittt	hi
 801633a:	eb03 0905 	addhi.w	r9, r3, r5
 801633e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016342:	60a3      	strhi	r3, [r4, #8]
 8016344:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016348:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801634c:	bf98      	it	ls
 801634e:	f04f 0900 	movls.w	r9, #0
 8016352:	6023      	str	r3, [r4, #0]
 8016354:	463d      	mov	r5, r7
 8016356:	f04f 0b00 	mov.w	fp, #0
 801635a:	6831      	ldr	r1, [r6, #0]
 801635c:	ab03      	add	r3, sp, #12
 801635e:	7809      	ldrb	r1, [r1, #0]
 8016360:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016364:	2202      	movs	r2, #2
 8016366:	f7e9 ff3b 	bl	80001e0 <memchr>
 801636a:	b328      	cbz	r0, 80163b8 <_scanf_i+0xb8>
 801636c:	f1bb 0f01 	cmp.w	fp, #1
 8016370:	d159      	bne.n	8016426 <_scanf_i+0x126>
 8016372:	6862      	ldr	r2, [r4, #4]
 8016374:	b92a      	cbnz	r2, 8016382 <_scanf_i+0x82>
 8016376:	6822      	ldr	r2, [r4, #0]
 8016378:	2308      	movs	r3, #8
 801637a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801637e:	6063      	str	r3, [r4, #4]
 8016380:	6022      	str	r2, [r4, #0]
 8016382:	6822      	ldr	r2, [r4, #0]
 8016384:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016388:	6022      	str	r2, [r4, #0]
 801638a:	68a2      	ldr	r2, [r4, #8]
 801638c:	1e51      	subs	r1, r2, #1
 801638e:	60a1      	str	r1, [r4, #8]
 8016390:	b192      	cbz	r2, 80163b8 <_scanf_i+0xb8>
 8016392:	6832      	ldr	r2, [r6, #0]
 8016394:	1c51      	adds	r1, r2, #1
 8016396:	6031      	str	r1, [r6, #0]
 8016398:	7812      	ldrb	r2, [r2, #0]
 801639a:	f805 2b01 	strb.w	r2, [r5], #1
 801639e:	6872      	ldr	r2, [r6, #4]
 80163a0:	3a01      	subs	r2, #1
 80163a2:	2a00      	cmp	r2, #0
 80163a4:	6072      	str	r2, [r6, #4]
 80163a6:	dc07      	bgt.n	80163b8 <_scanf_i+0xb8>
 80163a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80163ac:	4631      	mov	r1, r6
 80163ae:	4650      	mov	r0, sl
 80163b0:	4790      	blx	r2
 80163b2:	2800      	cmp	r0, #0
 80163b4:	f040 8085 	bne.w	80164c2 <_scanf_i+0x1c2>
 80163b8:	f10b 0b01 	add.w	fp, fp, #1
 80163bc:	f1bb 0f03 	cmp.w	fp, #3
 80163c0:	d1cb      	bne.n	801635a <_scanf_i+0x5a>
 80163c2:	6863      	ldr	r3, [r4, #4]
 80163c4:	b90b      	cbnz	r3, 80163ca <_scanf_i+0xca>
 80163c6:	230a      	movs	r3, #10
 80163c8:	6063      	str	r3, [r4, #4]
 80163ca:	6863      	ldr	r3, [r4, #4]
 80163cc:	4945      	ldr	r1, [pc, #276]	; (80164e4 <_scanf_i+0x1e4>)
 80163ce:	6960      	ldr	r0, [r4, #20]
 80163d0:	1ac9      	subs	r1, r1, r3
 80163d2:	f000 f8b5 	bl	8016540 <__sccl>
 80163d6:	f04f 0b00 	mov.w	fp, #0
 80163da:	68a3      	ldr	r3, [r4, #8]
 80163dc:	6822      	ldr	r2, [r4, #0]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d03d      	beq.n	801645e <_scanf_i+0x15e>
 80163e2:	6831      	ldr	r1, [r6, #0]
 80163e4:	6960      	ldr	r0, [r4, #20]
 80163e6:	f891 c000 	ldrb.w	ip, [r1]
 80163ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 80163ee:	2800      	cmp	r0, #0
 80163f0:	d035      	beq.n	801645e <_scanf_i+0x15e>
 80163f2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80163f6:	d124      	bne.n	8016442 <_scanf_i+0x142>
 80163f8:	0510      	lsls	r0, r2, #20
 80163fa:	d522      	bpl.n	8016442 <_scanf_i+0x142>
 80163fc:	f10b 0b01 	add.w	fp, fp, #1
 8016400:	f1b9 0f00 	cmp.w	r9, #0
 8016404:	d003      	beq.n	801640e <_scanf_i+0x10e>
 8016406:	3301      	adds	r3, #1
 8016408:	f109 39ff 	add.w	r9, r9, #4294967295
 801640c:	60a3      	str	r3, [r4, #8]
 801640e:	6873      	ldr	r3, [r6, #4]
 8016410:	3b01      	subs	r3, #1
 8016412:	2b00      	cmp	r3, #0
 8016414:	6073      	str	r3, [r6, #4]
 8016416:	dd1b      	ble.n	8016450 <_scanf_i+0x150>
 8016418:	6833      	ldr	r3, [r6, #0]
 801641a:	3301      	adds	r3, #1
 801641c:	6033      	str	r3, [r6, #0]
 801641e:	68a3      	ldr	r3, [r4, #8]
 8016420:	3b01      	subs	r3, #1
 8016422:	60a3      	str	r3, [r4, #8]
 8016424:	e7d9      	b.n	80163da <_scanf_i+0xda>
 8016426:	f1bb 0f02 	cmp.w	fp, #2
 801642a:	d1ae      	bne.n	801638a <_scanf_i+0x8a>
 801642c:	6822      	ldr	r2, [r4, #0]
 801642e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016432:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016436:	d1bf      	bne.n	80163b8 <_scanf_i+0xb8>
 8016438:	2310      	movs	r3, #16
 801643a:	6063      	str	r3, [r4, #4]
 801643c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016440:	e7a2      	b.n	8016388 <_scanf_i+0x88>
 8016442:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016446:	6022      	str	r2, [r4, #0]
 8016448:	780b      	ldrb	r3, [r1, #0]
 801644a:	f805 3b01 	strb.w	r3, [r5], #1
 801644e:	e7de      	b.n	801640e <_scanf_i+0x10e>
 8016450:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016454:	4631      	mov	r1, r6
 8016456:	4650      	mov	r0, sl
 8016458:	4798      	blx	r3
 801645a:	2800      	cmp	r0, #0
 801645c:	d0df      	beq.n	801641e <_scanf_i+0x11e>
 801645e:	6823      	ldr	r3, [r4, #0]
 8016460:	05d9      	lsls	r1, r3, #23
 8016462:	d50d      	bpl.n	8016480 <_scanf_i+0x180>
 8016464:	42bd      	cmp	r5, r7
 8016466:	d909      	bls.n	801647c <_scanf_i+0x17c>
 8016468:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801646c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016470:	4632      	mov	r2, r6
 8016472:	4650      	mov	r0, sl
 8016474:	4798      	blx	r3
 8016476:	f105 39ff 	add.w	r9, r5, #4294967295
 801647a:	464d      	mov	r5, r9
 801647c:	42bd      	cmp	r5, r7
 801647e:	d028      	beq.n	80164d2 <_scanf_i+0x1d2>
 8016480:	6822      	ldr	r2, [r4, #0]
 8016482:	f012 0210 	ands.w	r2, r2, #16
 8016486:	d113      	bne.n	80164b0 <_scanf_i+0x1b0>
 8016488:	702a      	strb	r2, [r5, #0]
 801648a:	6863      	ldr	r3, [r4, #4]
 801648c:	9e01      	ldr	r6, [sp, #4]
 801648e:	4639      	mov	r1, r7
 8016490:	4650      	mov	r0, sl
 8016492:	47b0      	blx	r6
 8016494:	f8d8 3000 	ldr.w	r3, [r8]
 8016498:	6821      	ldr	r1, [r4, #0]
 801649a:	1d1a      	adds	r2, r3, #4
 801649c:	f8c8 2000 	str.w	r2, [r8]
 80164a0:	f011 0f20 	tst.w	r1, #32
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	d00f      	beq.n	80164c8 <_scanf_i+0x1c8>
 80164a8:	6018      	str	r0, [r3, #0]
 80164aa:	68e3      	ldr	r3, [r4, #12]
 80164ac:	3301      	adds	r3, #1
 80164ae:	60e3      	str	r3, [r4, #12]
 80164b0:	1bed      	subs	r5, r5, r7
 80164b2:	44ab      	add	fp, r5
 80164b4:	6925      	ldr	r5, [r4, #16]
 80164b6:	445d      	add	r5, fp
 80164b8:	6125      	str	r5, [r4, #16]
 80164ba:	2000      	movs	r0, #0
 80164bc:	b007      	add	sp, #28
 80164be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164c2:	f04f 0b00 	mov.w	fp, #0
 80164c6:	e7ca      	b.n	801645e <_scanf_i+0x15e>
 80164c8:	07ca      	lsls	r2, r1, #31
 80164ca:	bf4c      	ite	mi
 80164cc:	8018      	strhmi	r0, [r3, #0]
 80164ce:	6018      	strpl	r0, [r3, #0]
 80164d0:	e7eb      	b.n	80164aa <_scanf_i+0x1aa>
 80164d2:	2001      	movs	r0, #1
 80164d4:	e7f2      	b.n	80164bc <_scanf_i+0x1bc>
 80164d6:	bf00      	nop
 80164d8:	080175e4 	.word	0x080175e4
 80164dc:	080166d1 	.word	0x080166d1
 80164e0:	08013a89 	.word	0x08013a89
 80164e4:	0801943e 	.word	0x0801943e

080164e8 <_read_r>:
 80164e8:	b538      	push	{r3, r4, r5, lr}
 80164ea:	4d07      	ldr	r5, [pc, #28]	; (8016508 <_read_r+0x20>)
 80164ec:	4604      	mov	r4, r0
 80164ee:	4608      	mov	r0, r1
 80164f0:	4611      	mov	r1, r2
 80164f2:	2200      	movs	r2, #0
 80164f4:	602a      	str	r2, [r5, #0]
 80164f6:	461a      	mov	r2, r3
 80164f8:	f7ec fd4a 	bl	8002f90 <_read>
 80164fc:	1c43      	adds	r3, r0, #1
 80164fe:	d102      	bne.n	8016506 <_read_r+0x1e>
 8016500:	682b      	ldr	r3, [r5, #0]
 8016502:	b103      	cbz	r3, 8016506 <_read_r+0x1e>
 8016504:	6023      	str	r3, [r4, #0]
 8016506:	bd38      	pop	{r3, r4, r5, pc}
 8016508:	20003314 	.word	0x20003314
 801650c:	00000000 	.word	0x00000000

08016510 <nan>:
 8016510:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016518 <nan+0x8>
 8016514:	4770      	bx	lr
 8016516:	bf00      	nop
 8016518:	00000000 	.word	0x00000000
 801651c:	7ff80000 	.word	0x7ff80000

08016520 <_sbrk_r>:
 8016520:	b538      	push	{r3, r4, r5, lr}
 8016522:	4d06      	ldr	r5, [pc, #24]	; (801653c <_sbrk_r+0x1c>)
 8016524:	2300      	movs	r3, #0
 8016526:	4604      	mov	r4, r0
 8016528:	4608      	mov	r0, r1
 801652a:	602b      	str	r3, [r5, #0]
 801652c:	f7ec fd9e 	bl	800306c <_sbrk>
 8016530:	1c43      	adds	r3, r0, #1
 8016532:	d102      	bne.n	801653a <_sbrk_r+0x1a>
 8016534:	682b      	ldr	r3, [r5, #0]
 8016536:	b103      	cbz	r3, 801653a <_sbrk_r+0x1a>
 8016538:	6023      	str	r3, [r4, #0]
 801653a:	bd38      	pop	{r3, r4, r5, pc}
 801653c:	20003314 	.word	0x20003314

08016540 <__sccl>:
 8016540:	b570      	push	{r4, r5, r6, lr}
 8016542:	780b      	ldrb	r3, [r1, #0]
 8016544:	4604      	mov	r4, r0
 8016546:	2b5e      	cmp	r3, #94	; 0x5e
 8016548:	bf0b      	itete	eq
 801654a:	784b      	ldrbeq	r3, [r1, #1]
 801654c:	1c48      	addne	r0, r1, #1
 801654e:	1c88      	addeq	r0, r1, #2
 8016550:	2200      	movne	r2, #0
 8016552:	bf08      	it	eq
 8016554:	2201      	moveq	r2, #1
 8016556:	1e61      	subs	r1, r4, #1
 8016558:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801655c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016560:	42a9      	cmp	r1, r5
 8016562:	d1fb      	bne.n	801655c <__sccl+0x1c>
 8016564:	b90b      	cbnz	r3, 801656a <__sccl+0x2a>
 8016566:	3801      	subs	r0, #1
 8016568:	bd70      	pop	{r4, r5, r6, pc}
 801656a:	f082 0101 	eor.w	r1, r2, #1
 801656e:	54e1      	strb	r1, [r4, r3]
 8016570:	1c42      	adds	r2, r0, #1
 8016572:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8016576:	2d2d      	cmp	r5, #45	; 0x2d
 8016578:	f102 36ff 	add.w	r6, r2, #4294967295
 801657c:	4610      	mov	r0, r2
 801657e:	d006      	beq.n	801658e <__sccl+0x4e>
 8016580:	2d5d      	cmp	r5, #93	; 0x5d
 8016582:	d0f1      	beq.n	8016568 <__sccl+0x28>
 8016584:	b90d      	cbnz	r5, 801658a <__sccl+0x4a>
 8016586:	4630      	mov	r0, r6
 8016588:	e7ee      	b.n	8016568 <__sccl+0x28>
 801658a:	462b      	mov	r3, r5
 801658c:	e7ef      	b.n	801656e <__sccl+0x2e>
 801658e:	7816      	ldrb	r6, [r2, #0]
 8016590:	2e5d      	cmp	r6, #93	; 0x5d
 8016592:	d0fa      	beq.n	801658a <__sccl+0x4a>
 8016594:	42b3      	cmp	r3, r6
 8016596:	dcf8      	bgt.n	801658a <__sccl+0x4a>
 8016598:	4618      	mov	r0, r3
 801659a:	3001      	adds	r0, #1
 801659c:	4286      	cmp	r6, r0
 801659e:	5421      	strb	r1, [r4, r0]
 80165a0:	dcfb      	bgt.n	801659a <__sccl+0x5a>
 80165a2:	43d8      	mvns	r0, r3
 80165a4:	4430      	add	r0, r6
 80165a6:	1c5d      	adds	r5, r3, #1
 80165a8:	42b3      	cmp	r3, r6
 80165aa:	bfa8      	it	ge
 80165ac:	2000      	movge	r0, #0
 80165ae:	182b      	adds	r3, r5, r0
 80165b0:	3202      	adds	r2, #2
 80165b2:	e7de      	b.n	8016572 <__sccl+0x32>

080165b4 <strncmp>:
 80165b4:	b510      	push	{r4, lr}
 80165b6:	b16a      	cbz	r2, 80165d4 <strncmp+0x20>
 80165b8:	3901      	subs	r1, #1
 80165ba:	1884      	adds	r4, r0, r2
 80165bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80165c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80165c4:	4293      	cmp	r3, r2
 80165c6:	d103      	bne.n	80165d0 <strncmp+0x1c>
 80165c8:	42a0      	cmp	r0, r4
 80165ca:	d001      	beq.n	80165d0 <strncmp+0x1c>
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d1f5      	bne.n	80165bc <strncmp+0x8>
 80165d0:	1a98      	subs	r0, r3, r2
 80165d2:	bd10      	pop	{r4, pc}
 80165d4:	4610      	mov	r0, r2
 80165d6:	e7fc      	b.n	80165d2 <strncmp+0x1e>

080165d8 <_strtoul_l.isra.0>:
 80165d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165dc:	4e3b      	ldr	r6, [pc, #236]	; (80166cc <_strtoul_l.isra.0+0xf4>)
 80165de:	4686      	mov	lr, r0
 80165e0:	468c      	mov	ip, r1
 80165e2:	4660      	mov	r0, ip
 80165e4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80165e8:	5da5      	ldrb	r5, [r4, r6]
 80165ea:	f015 0508 	ands.w	r5, r5, #8
 80165ee:	d1f8      	bne.n	80165e2 <_strtoul_l.isra.0+0xa>
 80165f0:	2c2d      	cmp	r4, #45	; 0x2d
 80165f2:	d134      	bne.n	801665e <_strtoul_l.isra.0+0x86>
 80165f4:	f89c 4000 	ldrb.w	r4, [ip]
 80165f8:	f04f 0801 	mov.w	r8, #1
 80165fc:	f100 0c02 	add.w	ip, r0, #2
 8016600:	2b00      	cmp	r3, #0
 8016602:	d05e      	beq.n	80166c2 <_strtoul_l.isra.0+0xea>
 8016604:	2b10      	cmp	r3, #16
 8016606:	d10c      	bne.n	8016622 <_strtoul_l.isra.0+0x4a>
 8016608:	2c30      	cmp	r4, #48	; 0x30
 801660a:	d10a      	bne.n	8016622 <_strtoul_l.isra.0+0x4a>
 801660c:	f89c 0000 	ldrb.w	r0, [ip]
 8016610:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8016614:	2858      	cmp	r0, #88	; 0x58
 8016616:	d14f      	bne.n	80166b8 <_strtoul_l.isra.0+0xe0>
 8016618:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801661c:	2310      	movs	r3, #16
 801661e:	f10c 0c02 	add.w	ip, ip, #2
 8016622:	f04f 37ff 	mov.w	r7, #4294967295
 8016626:	2500      	movs	r5, #0
 8016628:	fbb7 f7f3 	udiv	r7, r7, r3
 801662c:	fb03 f907 	mul.w	r9, r3, r7
 8016630:	ea6f 0909 	mvn.w	r9, r9
 8016634:	4628      	mov	r0, r5
 8016636:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801663a:	2e09      	cmp	r6, #9
 801663c:	d818      	bhi.n	8016670 <_strtoul_l.isra.0+0x98>
 801663e:	4634      	mov	r4, r6
 8016640:	42a3      	cmp	r3, r4
 8016642:	dd24      	ble.n	801668e <_strtoul_l.isra.0+0xb6>
 8016644:	2d00      	cmp	r5, #0
 8016646:	db1f      	blt.n	8016688 <_strtoul_l.isra.0+0xb0>
 8016648:	4287      	cmp	r7, r0
 801664a:	d31d      	bcc.n	8016688 <_strtoul_l.isra.0+0xb0>
 801664c:	d101      	bne.n	8016652 <_strtoul_l.isra.0+0x7a>
 801664e:	45a1      	cmp	r9, r4
 8016650:	db1a      	blt.n	8016688 <_strtoul_l.isra.0+0xb0>
 8016652:	fb00 4003 	mla	r0, r0, r3, r4
 8016656:	2501      	movs	r5, #1
 8016658:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801665c:	e7eb      	b.n	8016636 <_strtoul_l.isra.0+0x5e>
 801665e:	2c2b      	cmp	r4, #43	; 0x2b
 8016660:	bf08      	it	eq
 8016662:	f89c 4000 	ldrbeq.w	r4, [ip]
 8016666:	46a8      	mov	r8, r5
 8016668:	bf08      	it	eq
 801666a:	f100 0c02 	addeq.w	ip, r0, #2
 801666e:	e7c7      	b.n	8016600 <_strtoul_l.isra.0+0x28>
 8016670:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8016674:	2e19      	cmp	r6, #25
 8016676:	d801      	bhi.n	801667c <_strtoul_l.isra.0+0xa4>
 8016678:	3c37      	subs	r4, #55	; 0x37
 801667a:	e7e1      	b.n	8016640 <_strtoul_l.isra.0+0x68>
 801667c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8016680:	2e19      	cmp	r6, #25
 8016682:	d804      	bhi.n	801668e <_strtoul_l.isra.0+0xb6>
 8016684:	3c57      	subs	r4, #87	; 0x57
 8016686:	e7db      	b.n	8016640 <_strtoul_l.isra.0+0x68>
 8016688:	f04f 35ff 	mov.w	r5, #4294967295
 801668c:	e7e4      	b.n	8016658 <_strtoul_l.isra.0+0x80>
 801668e:	2d00      	cmp	r5, #0
 8016690:	da07      	bge.n	80166a2 <_strtoul_l.isra.0+0xca>
 8016692:	2322      	movs	r3, #34	; 0x22
 8016694:	f8ce 3000 	str.w	r3, [lr]
 8016698:	f04f 30ff 	mov.w	r0, #4294967295
 801669c:	b942      	cbnz	r2, 80166b0 <_strtoul_l.isra.0+0xd8>
 801669e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166a2:	f1b8 0f00 	cmp.w	r8, #0
 80166a6:	d000      	beq.n	80166aa <_strtoul_l.isra.0+0xd2>
 80166a8:	4240      	negs	r0, r0
 80166aa:	2a00      	cmp	r2, #0
 80166ac:	d0f7      	beq.n	801669e <_strtoul_l.isra.0+0xc6>
 80166ae:	b10d      	cbz	r5, 80166b4 <_strtoul_l.isra.0+0xdc>
 80166b0:	f10c 31ff 	add.w	r1, ip, #4294967295
 80166b4:	6011      	str	r1, [r2, #0]
 80166b6:	e7f2      	b.n	801669e <_strtoul_l.isra.0+0xc6>
 80166b8:	2430      	movs	r4, #48	; 0x30
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d1b1      	bne.n	8016622 <_strtoul_l.isra.0+0x4a>
 80166be:	2308      	movs	r3, #8
 80166c0:	e7af      	b.n	8016622 <_strtoul_l.isra.0+0x4a>
 80166c2:	2c30      	cmp	r4, #48	; 0x30
 80166c4:	d0a2      	beq.n	801660c <_strtoul_l.isra.0+0x34>
 80166c6:	230a      	movs	r3, #10
 80166c8:	e7ab      	b.n	8016622 <_strtoul_l.isra.0+0x4a>
 80166ca:	bf00      	nop
 80166cc:	08019041 	.word	0x08019041

080166d0 <_strtoul_r>:
 80166d0:	f7ff bf82 	b.w	80165d8 <_strtoul_l.isra.0>

080166d4 <__submore>:
 80166d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166d8:	460c      	mov	r4, r1
 80166da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80166dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166e0:	4299      	cmp	r1, r3
 80166e2:	d11d      	bne.n	8016720 <__submore+0x4c>
 80166e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80166e8:	f7ff fa2a 	bl	8015b40 <_malloc_r>
 80166ec:	b918      	cbnz	r0, 80166f6 <__submore+0x22>
 80166ee:	f04f 30ff 	mov.w	r0, #4294967295
 80166f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80166fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80166fc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016700:	6360      	str	r0, [r4, #52]	; 0x34
 8016702:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016706:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801670a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801670e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016712:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016716:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801671a:	6020      	str	r0, [r4, #0]
 801671c:	2000      	movs	r0, #0
 801671e:	e7e8      	b.n	80166f2 <__submore+0x1e>
 8016720:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016722:	0077      	lsls	r7, r6, #1
 8016724:	463a      	mov	r2, r7
 8016726:	f000 fa59 	bl	8016bdc <_realloc_r>
 801672a:	4605      	mov	r5, r0
 801672c:	2800      	cmp	r0, #0
 801672e:	d0de      	beq.n	80166ee <__submore+0x1a>
 8016730:	eb00 0806 	add.w	r8, r0, r6
 8016734:	4601      	mov	r1, r0
 8016736:	4632      	mov	r2, r6
 8016738:	4640      	mov	r0, r8
 801673a:	f7fe fcd9 	bl	80150f0 <memcpy>
 801673e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016742:	f8c4 8000 	str.w	r8, [r4]
 8016746:	e7e9      	b.n	801671c <__submore+0x48>

08016748 <__swbuf_r>:
 8016748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801674a:	460e      	mov	r6, r1
 801674c:	4614      	mov	r4, r2
 801674e:	4605      	mov	r5, r0
 8016750:	b118      	cbz	r0, 801675a <__swbuf_r+0x12>
 8016752:	6983      	ldr	r3, [r0, #24]
 8016754:	b90b      	cbnz	r3, 801675a <__swbuf_r+0x12>
 8016756:	f7fe f88b 	bl	8014870 <__sinit>
 801675a:	4b21      	ldr	r3, [pc, #132]	; (80167e0 <__swbuf_r+0x98>)
 801675c:	429c      	cmp	r4, r3
 801675e:	d12b      	bne.n	80167b8 <__swbuf_r+0x70>
 8016760:	686c      	ldr	r4, [r5, #4]
 8016762:	69a3      	ldr	r3, [r4, #24]
 8016764:	60a3      	str	r3, [r4, #8]
 8016766:	89a3      	ldrh	r3, [r4, #12]
 8016768:	071a      	lsls	r2, r3, #28
 801676a:	d52f      	bpl.n	80167cc <__swbuf_r+0x84>
 801676c:	6923      	ldr	r3, [r4, #16]
 801676e:	b36b      	cbz	r3, 80167cc <__swbuf_r+0x84>
 8016770:	6923      	ldr	r3, [r4, #16]
 8016772:	6820      	ldr	r0, [r4, #0]
 8016774:	1ac0      	subs	r0, r0, r3
 8016776:	6963      	ldr	r3, [r4, #20]
 8016778:	b2f6      	uxtb	r6, r6
 801677a:	4283      	cmp	r3, r0
 801677c:	4637      	mov	r7, r6
 801677e:	dc04      	bgt.n	801678a <__swbuf_r+0x42>
 8016780:	4621      	mov	r1, r4
 8016782:	4628      	mov	r0, r5
 8016784:	f000 f952 	bl	8016a2c <_fflush_r>
 8016788:	bb30      	cbnz	r0, 80167d8 <__swbuf_r+0x90>
 801678a:	68a3      	ldr	r3, [r4, #8]
 801678c:	3b01      	subs	r3, #1
 801678e:	60a3      	str	r3, [r4, #8]
 8016790:	6823      	ldr	r3, [r4, #0]
 8016792:	1c5a      	adds	r2, r3, #1
 8016794:	6022      	str	r2, [r4, #0]
 8016796:	701e      	strb	r6, [r3, #0]
 8016798:	6963      	ldr	r3, [r4, #20]
 801679a:	3001      	adds	r0, #1
 801679c:	4283      	cmp	r3, r0
 801679e:	d004      	beq.n	80167aa <__swbuf_r+0x62>
 80167a0:	89a3      	ldrh	r3, [r4, #12]
 80167a2:	07db      	lsls	r3, r3, #31
 80167a4:	d506      	bpl.n	80167b4 <__swbuf_r+0x6c>
 80167a6:	2e0a      	cmp	r6, #10
 80167a8:	d104      	bne.n	80167b4 <__swbuf_r+0x6c>
 80167aa:	4621      	mov	r1, r4
 80167ac:	4628      	mov	r0, r5
 80167ae:	f000 f93d 	bl	8016a2c <_fflush_r>
 80167b2:	b988      	cbnz	r0, 80167d8 <__swbuf_r+0x90>
 80167b4:	4638      	mov	r0, r7
 80167b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167b8:	4b0a      	ldr	r3, [pc, #40]	; (80167e4 <__swbuf_r+0x9c>)
 80167ba:	429c      	cmp	r4, r3
 80167bc:	d101      	bne.n	80167c2 <__swbuf_r+0x7a>
 80167be:	68ac      	ldr	r4, [r5, #8]
 80167c0:	e7cf      	b.n	8016762 <__swbuf_r+0x1a>
 80167c2:	4b09      	ldr	r3, [pc, #36]	; (80167e8 <__swbuf_r+0xa0>)
 80167c4:	429c      	cmp	r4, r3
 80167c6:	bf08      	it	eq
 80167c8:	68ec      	ldreq	r4, [r5, #12]
 80167ca:	e7ca      	b.n	8016762 <__swbuf_r+0x1a>
 80167cc:	4621      	mov	r1, r4
 80167ce:	4628      	mov	r0, r5
 80167d0:	f000 f81a 	bl	8016808 <__swsetup_r>
 80167d4:	2800      	cmp	r0, #0
 80167d6:	d0cb      	beq.n	8016770 <__swbuf_r+0x28>
 80167d8:	f04f 37ff 	mov.w	r7, #4294967295
 80167dc:	e7ea      	b.n	80167b4 <__swbuf_r+0x6c>
 80167de:	bf00      	nop
 80167e0:	080191f8 	.word	0x080191f8
 80167e4:	08019218 	.word	0x08019218
 80167e8:	080191d8 	.word	0x080191d8

080167ec <__ascii_wctomb>:
 80167ec:	b149      	cbz	r1, 8016802 <__ascii_wctomb+0x16>
 80167ee:	2aff      	cmp	r2, #255	; 0xff
 80167f0:	bf85      	ittet	hi
 80167f2:	238a      	movhi	r3, #138	; 0x8a
 80167f4:	6003      	strhi	r3, [r0, #0]
 80167f6:	700a      	strbls	r2, [r1, #0]
 80167f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80167fc:	bf98      	it	ls
 80167fe:	2001      	movls	r0, #1
 8016800:	4770      	bx	lr
 8016802:	4608      	mov	r0, r1
 8016804:	4770      	bx	lr
	...

08016808 <__swsetup_r>:
 8016808:	4b32      	ldr	r3, [pc, #200]	; (80168d4 <__swsetup_r+0xcc>)
 801680a:	b570      	push	{r4, r5, r6, lr}
 801680c:	681d      	ldr	r5, [r3, #0]
 801680e:	4606      	mov	r6, r0
 8016810:	460c      	mov	r4, r1
 8016812:	b125      	cbz	r5, 801681e <__swsetup_r+0x16>
 8016814:	69ab      	ldr	r3, [r5, #24]
 8016816:	b913      	cbnz	r3, 801681e <__swsetup_r+0x16>
 8016818:	4628      	mov	r0, r5
 801681a:	f7fe f829 	bl	8014870 <__sinit>
 801681e:	4b2e      	ldr	r3, [pc, #184]	; (80168d8 <__swsetup_r+0xd0>)
 8016820:	429c      	cmp	r4, r3
 8016822:	d10f      	bne.n	8016844 <__swsetup_r+0x3c>
 8016824:	686c      	ldr	r4, [r5, #4]
 8016826:	89a3      	ldrh	r3, [r4, #12]
 8016828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801682c:	0719      	lsls	r1, r3, #28
 801682e:	d42c      	bmi.n	801688a <__swsetup_r+0x82>
 8016830:	06dd      	lsls	r5, r3, #27
 8016832:	d411      	bmi.n	8016858 <__swsetup_r+0x50>
 8016834:	2309      	movs	r3, #9
 8016836:	6033      	str	r3, [r6, #0]
 8016838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801683c:	81a3      	strh	r3, [r4, #12]
 801683e:	f04f 30ff 	mov.w	r0, #4294967295
 8016842:	e03e      	b.n	80168c2 <__swsetup_r+0xba>
 8016844:	4b25      	ldr	r3, [pc, #148]	; (80168dc <__swsetup_r+0xd4>)
 8016846:	429c      	cmp	r4, r3
 8016848:	d101      	bne.n	801684e <__swsetup_r+0x46>
 801684a:	68ac      	ldr	r4, [r5, #8]
 801684c:	e7eb      	b.n	8016826 <__swsetup_r+0x1e>
 801684e:	4b24      	ldr	r3, [pc, #144]	; (80168e0 <__swsetup_r+0xd8>)
 8016850:	429c      	cmp	r4, r3
 8016852:	bf08      	it	eq
 8016854:	68ec      	ldreq	r4, [r5, #12]
 8016856:	e7e6      	b.n	8016826 <__swsetup_r+0x1e>
 8016858:	0758      	lsls	r0, r3, #29
 801685a:	d512      	bpl.n	8016882 <__swsetup_r+0x7a>
 801685c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801685e:	b141      	cbz	r1, 8016872 <__swsetup_r+0x6a>
 8016860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016864:	4299      	cmp	r1, r3
 8016866:	d002      	beq.n	801686e <__swsetup_r+0x66>
 8016868:	4630      	mov	r0, r6
 801686a:	f7ff f919 	bl	8015aa0 <_free_r>
 801686e:	2300      	movs	r3, #0
 8016870:	6363      	str	r3, [r4, #52]	; 0x34
 8016872:	89a3      	ldrh	r3, [r4, #12]
 8016874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016878:	81a3      	strh	r3, [r4, #12]
 801687a:	2300      	movs	r3, #0
 801687c:	6063      	str	r3, [r4, #4]
 801687e:	6923      	ldr	r3, [r4, #16]
 8016880:	6023      	str	r3, [r4, #0]
 8016882:	89a3      	ldrh	r3, [r4, #12]
 8016884:	f043 0308 	orr.w	r3, r3, #8
 8016888:	81a3      	strh	r3, [r4, #12]
 801688a:	6923      	ldr	r3, [r4, #16]
 801688c:	b94b      	cbnz	r3, 80168a2 <__swsetup_r+0x9a>
 801688e:	89a3      	ldrh	r3, [r4, #12]
 8016890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016898:	d003      	beq.n	80168a2 <__swsetup_r+0x9a>
 801689a:	4621      	mov	r1, r4
 801689c:	4630      	mov	r0, r6
 801689e:	f000 f937 	bl	8016b10 <__smakebuf_r>
 80168a2:	89a0      	ldrh	r0, [r4, #12]
 80168a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80168a8:	f010 0301 	ands.w	r3, r0, #1
 80168ac:	d00a      	beq.n	80168c4 <__swsetup_r+0xbc>
 80168ae:	2300      	movs	r3, #0
 80168b0:	60a3      	str	r3, [r4, #8]
 80168b2:	6963      	ldr	r3, [r4, #20]
 80168b4:	425b      	negs	r3, r3
 80168b6:	61a3      	str	r3, [r4, #24]
 80168b8:	6923      	ldr	r3, [r4, #16]
 80168ba:	b943      	cbnz	r3, 80168ce <__swsetup_r+0xc6>
 80168bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80168c0:	d1ba      	bne.n	8016838 <__swsetup_r+0x30>
 80168c2:	bd70      	pop	{r4, r5, r6, pc}
 80168c4:	0781      	lsls	r1, r0, #30
 80168c6:	bf58      	it	pl
 80168c8:	6963      	ldrpl	r3, [r4, #20]
 80168ca:	60a3      	str	r3, [r4, #8]
 80168cc:	e7f4      	b.n	80168b8 <__swsetup_r+0xb0>
 80168ce:	2000      	movs	r0, #0
 80168d0:	e7f7      	b.n	80168c2 <__swsetup_r+0xba>
 80168d2:	bf00      	nop
 80168d4:	2000019c 	.word	0x2000019c
 80168d8:	080191f8 	.word	0x080191f8
 80168dc:	08019218 	.word	0x08019218
 80168e0:	080191d8 	.word	0x080191d8

080168e4 <__assert_func>:
 80168e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80168e6:	4614      	mov	r4, r2
 80168e8:	461a      	mov	r2, r3
 80168ea:	4b09      	ldr	r3, [pc, #36]	; (8016910 <__assert_func+0x2c>)
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	4605      	mov	r5, r0
 80168f0:	68d8      	ldr	r0, [r3, #12]
 80168f2:	b14c      	cbz	r4, 8016908 <__assert_func+0x24>
 80168f4:	4b07      	ldr	r3, [pc, #28]	; (8016914 <__assert_func+0x30>)
 80168f6:	9100      	str	r1, [sp, #0]
 80168f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80168fc:	4906      	ldr	r1, [pc, #24]	; (8016918 <__assert_func+0x34>)
 80168fe:	462b      	mov	r3, r5
 8016900:	f000 f8d0 	bl	8016aa4 <fiprintf>
 8016904:	f000 faea 	bl	8016edc <abort>
 8016908:	4b04      	ldr	r3, [pc, #16]	; (801691c <__assert_func+0x38>)
 801690a:	461c      	mov	r4, r3
 801690c:	e7f3      	b.n	80168f6 <__assert_func+0x12>
 801690e:	bf00      	nop
 8016910:	2000019c 	.word	0x2000019c
 8016914:	08019440 	.word	0x08019440
 8016918:	0801944d 	.word	0x0801944d
 801691c:	0801947b 	.word	0x0801947b

08016920 <__sflush_r>:
 8016920:	898a      	ldrh	r2, [r1, #12]
 8016922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016926:	4605      	mov	r5, r0
 8016928:	0710      	lsls	r0, r2, #28
 801692a:	460c      	mov	r4, r1
 801692c:	d458      	bmi.n	80169e0 <__sflush_r+0xc0>
 801692e:	684b      	ldr	r3, [r1, #4]
 8016930:	2b00      	cmp	r3, #0
 8016932:	dc05      	bgt.n	8016940 <__sflush_r+0x20>
 8016934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016936:	2b00      	cmp	r3, #0
 8016938:	dc02      	bgt.n	8016940 <__sflush_r+0x20>
 801693a:	2000      	movs	r0, #0
 801693c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016942:	2e00      	cmp	r6, #0
 8016944:	d0f9      	beq.n	801693a <__sflush_r+0x1a>
 8016946:	2300      	movs	r3, #0
 8016948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801694c:	682f      	ldr	r7, [r5, #0]
 801694e:	602b      	str	r3, [r5, #0]
 8016950:	d032      	beq.n	80169b8 <__sflush_r+0x98>
 8016952:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016954:	89a3      	ldrh	r3, [r4, #12]
 8016956:	075a      	lsls	r2, r3, #29
 8016958:	d505      	bpl.n	8016966 <__sflush_r+0x46>
 801695a:	6863      	ldr	r3, [r4, #4]
 801695c:	1ac0      	subs	r0, r0, r3
 801695e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016960:	b10b      	cbz	r3, 8016966 <__sflush_r+0x46>
 8016962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016964:	1ac0      	subs	r0, r0, r3
 8016966:	2300      	movs	r3, #0
 8016968:	4602      	mov	r2, r0
 801696a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801696c:	6a21      	ldr	r1, [r4, #32]
 801696e:	4628      	mov	r0, r5
 8016970:	47b0      	blx	r6
 8016972:	1c43      	adds	r3, r0, #1
 8016974:	89a3      	ldrh	r3, [r4, #12]
 8016976:	d106      	bne.n	8016986 <__sflush_r+0x66>
 8016978:	6829      	ldr	r1, [r5, #0]
 801697a:	291d      	cmp	r1, #29
 801697c:	d82c      	bhi.n	80169d8 <__sflush_r+0xb8>
 801697e:	4a2a      	ldr	r2, [pc, #168]	; (8016a28 <__sflush_r+0x108>)
 8016980:	40ca      	lsrs	r2, r1
 8016982:	07d6      	lsls	r6, r2, #31
 8016984:	d528      	bpl.n	80169d8 <__sflush_r+0xb8>
 8016986:	2200      	movs	r2, #0
 8016988:	6062      	str	r2, [r4, #4]
 801698a:	04d9      	lsls	r1, r3, #19
 801698c:	6922      	ldr	r2, [r4, #16]
 801698e:	6022      	str	r2, [r4, #0]
 8016990:	d504      	bpl.n	801699c <__sflush_r+0x7c>
 8016992:	1c42      	adds	r2, r0, #1
 8016994:	d101      	bne.n	801699a <__sflush_r+0x7a>
 8016996:	682b      	ldr	r3, [r5, #0]
 8016998:	b903      	cbnz	r3, 801699c <__sflush_r+0x7c>
 801699a:	6560      	str	r0, [r4, #84]	; 0x54
 801699c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801699e:	602f      	str	r7, [r5, #0]
 80169a0:	2900      	cmp	r1, #0
 80169a2:	d0ca      	beq.n	801693a <__sflush_r+0x1a>
 80169a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80169a8:	4299      	cmp	r1, r3
 80169aa:	d002      	beq.n	80169b2 <__sflush_r+0x92>
 80169ac:	4628      	mov	r0, r5
 80169ae:	f7ff f877 	bl	8015aa0 <_free_r>
 80169b2:	2000      	movs	r0, #0
 80169b4:	6360      	str	r0, [r4, #52]	; 0x34
 80169b6:	e7c1      	b.n	801693c <__sflush_r+0x1c>
 80169b8:	6a21      	ldr	r1, [r4, #32]
 80169ba:	2301      	movs	r3, #1
 80169bc:	4628      	mov	r0, r5
 80169be:	47b0      	blx	r6
 80169c0:	1c41      	adds	r1, r0, #1
 80169c2:	d1c7      	bne.n	8016954 <__sflush_r+0x34>
 80169c4:	682b      	ldr	r3, [r5, #0]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d0c4      	beq.n	8016954 <__sflush_r+0x34>
 80169ca:	2b1d      	cmp	r3, #29
 80169cc:	d001      	beq.n	80169d2 <__sflush_r+0xb2>
 80169ce:	2b16      	cmp	r3, #22
 80169d0:	d101      	bne.n	80169d6 <__sflush_r+0xb6>
 80169d2:	602f      	str	r7, [r5, #0]
 80169d4:	e7b1      	b.n	801693a <__sflush_r+0x1a>
 80169d6:	89a3      	ldrh	r3, [r4, #12]
 80169d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169dc:	81a3      	strh	r3, [r4, #12]
 80169de:	e7ad      	b.n	801693c <__sflush_r+0x1c>
 80169e0:	690f      	ldr	r7, [r1, #16]
 80169e2:	2f00      	cmp	r7, #0
 80169e4:	d0a9      	beq.n	801693a <__sflush_r+0x1a>
 80169e6:	0793      	lsls	r3, r2, #30
 80169e8:	680e      	ldr	r6, [r1, #0]
 80169ea:	bf08      	it	eq
 80169ec:	694b      	ldreq	r3, [r1, #20]
 80169ee:	600f      	str	r7, [r1, #0]
 80169f0:	bf18      	it	ne
 80169f2:	2300      	movne	r3, #0
 80169f4:	eba6 0807 	sub.w	r8, r6, r7
 80169f8:	608b      	str	r3, [r1, #8]
 80169fa:	f1b8 0f00 	cmp.w	r8, #0
 80169fe:	dd9c      	ble.n	801693a <__sflush_r+0x1a>
 8016a00:	6a21      	ldr	r1, [r4, #32]
 8016a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016a04:	4643      	mov	r3, r8
 8016a06:	463a      	mov	r2, r7
 8016a08:	4628      	mov	r0, r5
 8016a0a:	47b0      	blx	r6
 8016a0c:	2800      	cmp	r0, #0
 8016a0e:	dc06      	bgt.n	8016a1e <__sflush_r+0xfe>
 8016a10:	89a3      	ldrh	r3, [r4, #12]
 8016a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a16:	81a3      	strh	r3, [r4, #12]
 8016a18:	f04f 30ff 	mov.w	r0, #4294967295
 8016a1c:	e78e      	b.n	801693c <__sflush_r+0x1c>
 8016a1e:	4407      	add	r7, r0
 8016a20:	eba8 0800 	sub.w	r8, r8, r0
 8016a24:	e7e9      	b.n	80169fa <__sflush_r+0xda>
 8016a26:	bf00      	nop
 8016a28:	20400001 	.word	0x20400001

08016a2c <_fflush_r>:
 8016a2c:	b538      	push	{r3, r4, r5, lr}
 8016a2e:	690b      	ldr	r3, [r1, #16]
 8016a30:	4605      	mov	r5, r0
 8016a32:	460c      	mov	r4, r1
 8016a34:	b913      	cbnz	r3, 8016a3c <_fflush_r+0x10>
 8016a36:	2500      	movs	r5, #0
 8016a38:	4628      	mov	r0, r5
 8016a3a:	bd38      	pop	{r3, r4, r5, pc}
 8016a3c:	b118      	cbz	r0, 8016a46 <_fflush_r+0x1a>
 8016a3e:	6983      	ldr	r3, [r0, #24]
 8016a40:	b90b      	cbnz	r3, 8016a46 <_fflush_r+0x1a>
 8016a42:	f7fd ff15 	bl	8014870 <__sinit>
 8016a46:	4b14      	ldr	r3, [pc, #80]	; (8016a98 <_fflush_r+0x6c>)
 8016a48:	429c      	cmp	r4, r3
 8016a4a:	d11b      	bne.n	8016a84 <_fflush_r+0x58>
 8016a4c:	686c      	ldr	r4, [r5, #4]
 8016a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d0ef      	beq.n	8016a36 <_fflush_r+0xa>
 8016a56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016a58:	07d0      	lsls	r0, r2, #31
 8016a5a:	d404      	bmi.n	8016a66 <_fflush_r+0x3a>
 8016a5c:	0599      	lsls	r1, r3, #22
 8016a5e:	d402      	bmi.n	8016a66 <_fflush_r+0x3a>
 8016a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a62:	f7fe fb16 	bl	8015092 <__retarget_lock_acquire_recursive>
 8016a66:	4628      	mov	r0, r5
 8016a68:	4621      	mov	r1, r4
 8016a6a:	f7ff ff59 	bl	8016920 <__sflush_r>
 8016a6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016a70:	07da      	lsls	r2, r3, #31
 8016a72:	4605      	mov	r5, r0
 8016a74:	d4e0      	bmi.n	8016a38 <_fflush_r+0xc>
 8016a76:	89a3      	ldrh	r3, [r4, #12]
 8016a78:	059b      	lsls	r3, r3, #22
 8016a7a:	d4dd      	bmi.n	8016a38 <_fflush_r+0xc>
 8016a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a7e:	f7fe fb09 	bl	8015094 <__retarget_lock_release_recursive>
 8016a82:	e7d9      	b.n	8016a38 <_fflush_r+0xc>
 8016a84:	4b05      	ldr	r3, [pc, #20]	; (8016a9c <_fflush_r+0x70>)
 8016a86:	429c      	cmp	r4, r3
 8016a88:	d101      	bne.n	8016a8e <_fflush_r+0x62>
 8016a8a:	68ac      	ldr	r4, [r5, #8]
 8016a8c:	e7df      	b.n	8016a4e <_fflush_r+0x22>
 8016a8e:	4b04      	ldr	r3, [pc, #16]	; (8016aa0 <_fflush_r+0x74>)
 8016a90:	429c      	cmp	r4, r3
 8016a92:	bf08      	it	eq
 8016a94:	68ec      	ldreq	r4, [r5, #12]
 8016a96:	e7da      	b.n	8016a4e <_fflush_r+0x22>
 8016a98:	080191f8 	.word	0x080191f8
 8016a9c:	08019218 	.word	0x08019218
 8016aa0:	080191d8 	.word	0x080191d8

08016aa4 <fiprintf>:
 8016aa4:	b40e      	push	{r1, r2, r3}
 8016aa6:	b503      	push	{r0, r1, lr}
 8016aa8:	4601      	mov	r1, r0
 8016aaa:	ab03      	add	r3, sp, #12
 8016aac:	4805      	ldr	r0, [pc, #20]	; (8016ac4 <fiprintf+0x20>)
 8016aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ab2:	6800      	ldr	r0, [r0, #0]
 8016ab4:	9301      	str	r3, [sp, #4]
 8016ab6:	f000 f8e1 	bl	8016c7c <_vfiprintf_r>
 8016aba:	b002      	add	sp, #8
 8016abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ac0:	b003      	add	sp, #12
 8016ac2:	4770      	bx	lr
 8016ac4:	2000019c 	.word	0x2000019c

08016ac8 <__swhatbuf_r>:
 8016ac8:	b570      	push	{r4, r5, r6, lr}
 8016aca:	460e      	mov	r6, r1
 8016acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ad0:	2900      	cmp	r1, #0
 8016ad2:	b096      	sub	sp, #88	; 0x58
 8016ad4:	4614      	mov	r4, r2
 8016ad6:	461d      	mov	r5, r3
 8016ad8:	da07      	bge.n	8016aea <__swhatbuf_r+0x22>
 8016ada:	2300      	movs	r3, #0
 8016adc:	602b      	str	r3, [r5, #0]
 8016ade:	89b3      	ldrh	r3, [r6, #12]
 8016ae0:	061a      	lsls	r2, r3, #24
 8016ae2:	d410      	bmi.n	8016b06 <__swhatbuf_r+0x3e>
 8016ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016ae8:	e00e      	b.n	8016b08 <__swhatbuf_r+0x40>
 8016aea:	466a      	mov	r2, sp
 8016aec:	f000 f9fe 	bl	8016eec <_fstat_r>
 8016af0:	2800      	cmp	r0, #0
 8016af2:	dbf2      	blt.n	8016ada <__swhatbuf_r+0x12>
 8016af4:	9a01      	ldr	r2, [sp, #4]
 8016af6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016afa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016afe:	425a      	negs	r2, r3
 8016b00:	415a      	adcs	r2, r3
 8016b02:	602a      	str	r2, [r5, #0]
 8016b04:	e7ee      	b.n	8016ae4 <__swhatbuf_r+0x1c>
 8016b06:	2340      	movs	r3, #64	; 0x40
 8016b08:	2000      	movs	r0, #0
 8016b0a:	6023      	str	r3, [r4, #0]
 8016b0c:	b016      	add	sp, #88	; 0x58
 8016b0e:	bd70      	pop	{r4, r5, r6, pc}

08016b10 <__smakebuf_r>:
 8016b10:	898b      	ldrh	r3, [r1, #12]
 8016b12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b14:	079d      	lsls	r5, r3, #30
 8016b16:	4606      	mov	r6, r0
 8016b18:	460c      	mov	r4, r1
 8016b1a:	d507      	bpl.n	8016b2c <__smakebuf_r+0x1c>
 8016b1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b20:	6023      	str	r3, [r4, #0]
 8016b22:	6123      	str	r3, [r4, #16]
 8016b24:	2301      	movs	r3, #1
 8016b26:	6163      	str	r3, [r4, #20]
 8016b28:	b002      	add	sp, #8
 8016b2a:	bd70      	pop	{r4, r5, r6, pc}
 8016b2c:	ab01      	add	r3, sp, #4
 8016b2e:	466a      	mov	r2, sp
 8016b30:	f7ff ffca 	bl	8016ac8 <__swhatbuf_r>
 8016b34:	9900      	ldr	r1, [sp, #0]
 8016b36:	4605      	mov	r5, r0
 8016b38:	4630      	mov	r0, r6
 8016b3a:	f7ff f801 	bl	8015b40 <_malloc_r>
 8016b3e:	b948      	cbnz	r0, 8016b54 <__smakebuf_r+0x44>
 8016b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b44:	059a      	lsls	r2, r3, #22
 8016b46:	d4ef      	bmi.n	8016b28 <__smakebuf_r+0x18>
 8016b48:	f023 0303 	bic.w	r3, r3, #3
 8016b4c:	f043 0302 	orr.w	r3, r3, #2
 8016b50:	81a3      	strh	r3, [r4, #12]
 8016b52:	e7e3      	b.n	8016b1c <__smakebuf_r+0xc>
 8016b54:	4b0d      	ldr	r3, [pc, #52]	; (8016b8c <__smakebuf_r+0x7c>)
 8016b56:	62b3      	str	r3, [r6, #40]	; 0x28
 8016b58:	89a3      	ldrh	r3, [r4, #12]
 8016b5a:	6020      	str	r0, [r4, #0]
 8016b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b60:	81a3      	strh	r3, [r4, #12]
 8016b62:	9b00      	ldr	r3, [sp, #0]
 8016b64:	6163      	str	r3, [r4, #20]
 8016b66:	9b01      	ldr	r3, [sp, #4]
 8016b68:	6120      	str	r0, [r4, #16]
 8016b6a:	b15b      	cbz	r3, 8016b84 <__smakebuf_r+0x74>
 8016b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b70:	4630      	mov	r0, r6
 8016b72:	f000 f9cd 	bl	8016f10 <_isatty_r>
 8016b76:	b128      	cbz	r0, 8016b84 <__smakebuf_r+0x74>
 8016b78:	89a3      	ldrh	r3, [r4, #12]
 8016b7a:	f023 0303 	bic.w	r3, r3, #3
 8016b7e:	f043 0301 	orr.w	r3, r3, #1
 8016b82:	81a3      	strh	r3, [r4, #12]
 8016b84:	89a0      	ldrh	r0, [r4, #12]
 8016b86:	4305      	orrs	r5, r0
 8016b88:	81a5      	strh	r5, [r4, #12]
 8016b8a:	e7cd      	b.n	8016b28 <__smakebuf_r+0x18>
 8016b8c:	08014809 	.word	0x08014809

08016b90 <memmove>:
 8016b90:	4288      	cmp	r0, r1
 8016b92:	b510      	push	{r4, lr}
 8016b94:	eb01 0402 	add.w	r4, r1, r2
 8016b98:	d902      	bls.n	8016ba0 <memmove+0x10>
 8016b9a:	4284      	cmp	r4, r0
 8016b9c:	4623      	mov	r3, r4
 8016b9e:	d807      	bhi.n	8016bb0 <memmove+0x20>
 8016ba0:	1e43      	subs	r3, r0, #1
 8016ba2:	42a1      	cmp	r1, r4
 8016ba4:	d008      	beq.n	8016bb8 <memmove+0x28>
 8016ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016baa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016bae:	e7f8      	b.n	8016ba2 <memmove+0x12>
 8016bb0:	4402      	add	r2, r0
 8016bb2:	4601      	mov	r1, r0
 8016bb4:	428a      	cmp	r2, r1
 8016bb6:	d100      	bne.n	8016bba <memmove+0x2a>
 8016bb8:	bd10      	pop	{r4, pc}
 8016bba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016bbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016bc2:	e7f7      	b.n	8016bb4 <memmove+0x24>

08016bc4 <__malloc_lock>:
 8016bc4:	4801      	ldr	r0, [pc, #4]	; (8016bcc <__malloc_lock+0x8>)
 8016bc6:	f7fe ba64 	b.w	8015092 <__retarget_lock_acquire_recursive>
 8016bca:	bf00      	nop
 8016bcc:	20003308 	.word	0x20003308

08016bd0 <__malloc_unlock>:
 8016bd0:	4801      	ldr	r0, [pc, #4]	; (8016bd8 <__malloc_unlock+0x8>)
 8016bd2:	f7fe ba5f 	b.w	8015094 <__retarget_lock_release_recursive>
 8016bd6:	bf00      	nop
 8016bd8:	20003308 	.word	0x20003308

08016bdc <_realloc_r>:
 8016bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bde:	4607      	mov	r7, r0
 8016be0:	4614      	mov	r4, r2
 8016be2:	460e      	mov	r6, r1
 8016be4:	b921      	cbnz	r1, 8016bf0 <_realloc_r+0x14>
 8016be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016bea:	4611      	mov	r1, r2
 8016bec:	f7fe bfa8 	b.w	8015b40 <_malloc_r>
 8016bf0:	b922      	cbnz	r2, 8016bfc <_realloc_r+0x20>
 8016bf2:	f7fe ff55 	bl	8015aa0 <_free_r>
 8016bf6:	4625      	mov	r5, r4
 8016bf8:	4628      	mov	r0, r5
 8016bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bfc:	f000 f998 	bl	8016f30 <_malloc_usable_size_r>
 8016c00:	42a0      	cmp	r0, r4
 8016c02:	d20f      	bcs.n	8016c24 <_realloc_r+0x48>
 8016c04:	4621      	mov	r1, r4
 8016c06:	4638      	mov	r0, r7
 8016c08:	f7fe ff9a 	bl	8015b40 <_malloc_r>
 8016c0c:	4605      	mov	r5, r0
 8016c0e:	2800      	cmp	r0, #0
 8016c10:	d0f2      	beq.n	8016bf8 <_realloc_r+0x1c>
 8016c12:	4631      	mov	r1, r6
 8016c14:	4622      	mov	r2, r4
 8016c16:	f7fe fa6b 	bl	80150f0 <memcpy>
 8016c1a:	4631      	mov	r1, r6
 8016c1c:	4638      	mov	r0, r7
 8016c1e:	f7fe ff3f 	bl	8015aa0 <_free_r>
 8016c22:	e7e9      	b.n	8016bf8 <_realloc_r+0x1c>
 8016c24:	4635      	mov	r5, r6
 8016c26:	e7e7      	b.n	8016bf8 <_realloc_r+0x1c>

08016c28 <__sfputc_r>:
 8016c28:	6893      	ldr	r3, [r2, #8]
 8016c2a:	3b01      	subs	r3, #1
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	b410      	push	{r4}
 8016c30:	6093      	str	r3, [r2, #8]
 8016c32:	da08      	bge.n	8016c46 <__sfputc_r+0x1e>
 8016c34:	6994      	ldr	r4, [r2, #24]
 8016c36:	42a3      	cmp	r3, r4
 8016c38:	db01      	blt.n	8016c3e <__sfputc_r+0x16>
 8016c3a:	290a      	cmp	r1, #10
 8016c3c:	d103      	bne.n	8016c46 <__sfputc_r+0x1e>
 8016c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c42:	f7ff bd81 	b.w	8016748 <__swbuf_r>
 8016c46:	6813      	ldr	r3, [r2, #0]
 8016c48:	1c58      	adds	r0, r3, #1
 8016c4a:	6010      	str	r0, [r2, #0]
 8016c4c:	7019      	strb	r1, [r3, #0]
 8016c4e:	4608      	mov	r0, r1
 8016c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c54:	4770      	bx	lr

08016c56 <__sfputs_r>:
 8016c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c58:	4606      	mov	r6, r0
 8016c5a:	460f      	mov	r7, r1
 8016c5c:	4614      	mov	r4, r2
 8016c5e:	18d5      	adds	r5, r2, r3
 8016c60:	42ac      	cmp	r4, r5
 8016c62:	d101      	bne.n	8016c68 <__sfputs_r+0x12>
 8016c64:	2000      	movs	r0, #0
 8016c66:	e007      	b.n	8016c78 <__sfputs_r+0x22>
 8016c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c6c:	463a      	mov	r2, r7
 8016c6e:	4630      	mov	r0, r6
 8016c70:	f7ff ffda 	bl	8016c28 <__sfputc_r>
 8016c74:	1c43      	adds	r3, r0, #1
 8016c76:	d1f3      	bne.n	8016c60 <__sfputs_r+0xa>
 8016c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016c7c <_vfiprintf_r>:
 8016c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c80:	460d      	mov	r5, r1
 8016c82:	b09d      	sub	sp, #116	; 0x74
 8016c84:	4614      	mov	r4, r2
 8016c86:	4698      	mov	r8, r3
 8016c88:	4606      	mov	r6, r0
 8016c8a:	b118      	cbz	r0, 8016c94 <_vfiprintf_r+0x18>
 8016c8c:	6983      	ldr	r3, [r0, #24]
 8016c8e:	b90b      	cbnz	r3, 8016c94 <_vfiprintf_r+0x18>
 8016c90:	f7fd fdee 	bl	8014870 <__sinit>
 8016c94:	4b89      	ldr	r3, [pc, #548]	; (8016ebc <_vfiprintf_r+0x240>)
 8016c96:	429d      	cmp	r5, r3
 8016c98:	d11b      	bne.n	8016cd2 <_vfiprintf_r+0x56>
 8016c9a:	6875      	ldr	r5, [r6, #4]
 8016c9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c9e:	07d9      	lsls	r1, r3, #31
 8016ca0:	d405      	bmi.n	8016cae <_vfiprintf_r+0x32>
 8016ca2:	89ab      	ldrh	r3, [r5, #12]
 8016ca4:	059a      	lsls	r2, r3, #22
 8016ca6:	d402      	bmi.n	8016cae <_vfiprintf_r+0x32>
 8016ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016caa:	f7fe f9f2 	bl	8015092 <__retarget_lock_acquire_recursive>
 8016cae:	89ab      	ldrh	r3, [r5, #12]
 8016cb0:	071b      	lsls	r3, r3, #28
 8016cb2:	d501      	bpl.n	8016cb8 <_vfiprintf_r+0x3c>
 8016cb4:	692b      	ldr	r3, [r5, #16]
 8016cb6:	b9eb      	cbnz	r3, 8016cf4 <_vfiprintf_r+0x78>
 8016cb8:	4629      	mov	r1, r5
 8016cba:	4630      	mov	r0, r6
 8016cbc:	f7ff fda4 	bl	8016808 <__swsetup_r>
 8016cc0:	b1c0      	cbz	r0, 8016cf4 <_vfiprintf_r+0x78>
 8016cc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016cc4:	07dc      	lsls	r4, r3, #31
 8016cc6:	d50e      	bpl.n	8016ce6 <_vfiprintf_r+0x6a>
 8016cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8016ccc:	b01d      	add	sp, #116	; 0x74
 8016cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cd2:	4b7b      	ldr	r3, [pc, #492]	; (8016ec0 <_vfiprintf_r+0x244>)
 8016cd4:	429d      	cmp	r5, r3
 8016cd6:	d101      	bne.n	8016cdc <_vfiprintf_r+0x60>
 8016cd8:	68b5      	ldr	r5, [r6, #8]
 8016cda:	e7df      	b.n	8016c9c <_vfiprintf_r+0x20>
 8016cdc:	4b79      	ldr	r3, [pc, #484]	; (8016ec4 <_vfiprintf_r+0x248>)
 8016cde:	429d      	cmp	r5, r3
 8016ce0:	bf08      	it	eq
 8016ce2:	68f5      	ldreq	r5, [r6, #12]
 8016ce4:	e7da      	b.n	8016c9c <_vfiprintf_r+0x20>
 8016ce6:	89ab      	ldrh	r3, [r5, #12]
 8016ce8:	0598      	lsls	r0, r3, #22
 8016cea:	d4ed      	bmi.n	8016cc8 <_vfiprintf_r+0x4c>
 8016cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016cee:	f7fe f9d1 	bl	8015094 <__retarget_lock_release_recursive>
 8016cf2:	e7e9      	b.n	8016cc8 <_vfiprintf_r+0x4c>
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8016cf8:	2320      	movs	r3, #32
 8016cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8016d02:	2330      	movs	r3, #48	; 0x30
 8016d04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016ec8 <_vfiprintf_r+0x24c>
 8016d08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016d0c:	f04f 0901 	mov.w	r9, #1
 8016d10:	4623      	mov	r3, r4
 8016d12:	469a      	mov	sl, r3
 8016d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d18:	b10a      	cbz	r2, 8016d1e <_vfiprintf_r+0xa2>
 8016d1a:	2a25      	cmp	r2, #37	; 0x25
 8016d1c:	d1f9      	bne.n	8016d12 <_vfiprintf_r+0x96>
 8016d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8016d22:	d00b      	beq.n	8016d3c <_vfiprintf_r+0xc0>
 8016d24:	465b      	mov	r3, fp
 8016d26:	4622      	mov	r2, r4
 8016d28:	4629      	mov	r1, r5
 8016d2a:	4630      	mov	r0, r6
 8016d2c:	f7ff ff93 	bl	8016c56 <__sfputs_r>
 8016d30:	3001      	adds	r0, #1
 8016d32:	f000 80aa 	beq.w	8016e8a <_vfiprintf_r+0x20e>
 8016d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d38:	445a      	add	r2, fp
 8016d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8016d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	f000 80a2 	beq.w	8016e8a <_vfiprintf_r+0x20e>
 8016d46:	2300      	movs	r3, #0
 8016d48:	f04f 32ff 	mov.w	r2, #4294967295
 8016d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d50:	f10a 0a01 	add.w	sl, sl, #1
 8016d54:	9304      	str	r3, [sp, #16]
 8016d56:	9307      	str	r3, [sp, #28]
 8016d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8016d5e:	4654      	mov	r4, sl
 8016d60:	2205      	movs	r2, #5
 8016d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d66:	4858      	ldr	r0, [pc, #352]	; (8016ec8 <_vfiprintf_r+0x24c>)
 8016d68:	f7e9 fa3a 	bl	80001e0 <memchr>
 8016d6c:	9a04      	ldr	r2, [sp, #16]
 8016d6e:	b9d8      	cbnz	r0, 8016da8 <_vfiprintf_r+0x12c>
 8016d70:	06d1      	lsls	r1, r2, #27
 8016d72:	bf44      	itt	mi
 8016d74:	2320      	movmi	r3, #32
 8016d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d7a:	0713      	lsls	r3, r2, #28
 8016d7c:	bf44      	itt	mi
 8016d7e:	232b      	movmi	r3, #43	; 0x2b
 8016d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d84:	f89a 3000 	ldrb.w	r3, [sl]
 8016d88:	2b2a      	cmp	r3, #42	; 0x2a
 8016d8a:	d015      	beq.n	8016db8 <_vfiprintf_r+0x13c>
 8016d8c:	9a07      	ldr	r2, [sp, #28]
 8016d8e:	4654      	mov	r4, sl
 8016d90:	2000      	movs	r0, #0
 8016d92:	f04f 0c0a 	mov.w	ip, #10
 8016d96:	4621      	mov	r1, r4
 8016d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d9c:	3b30      	subs	r3, #48	; 0x30
 8016d9e:	2b09      	cmp	r3, #9
 8016da0:	d94e      	bls.n	8016e40 <_vfiprintf_r+0x1c4>
 8016da2:	b1b0      	cbz	r0, 8016dd2 <_vfiprintf_r+0x156>
 8016da4:	9207      	str	r2, [sp, #28]
 8016da6:	e014      	b.n	8016dd2 <_vfiprintf_r+0x156>
 8016da8:	eba0 0308 	sub.w	r3, r0, r8
 8016dac:	fa09 f303 	lsl.w	r3, r9, r3
 8016db0:	4313      	orrs	r3, r2
 8016db2:	9304      	str	r3, [sp, #16]
 8016db4:	46a2      	mov	sl, r4
 8016db6:	e7d2      	b.n	8016d5e <_vfiprintf_r+0xe2>
 8016db8:	9b03      	ldr	r3, [sp, #12]
 8016dba:	1d19      	adds	r1, r3, #4
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	9103      	str	r1, [sp, #12]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	bfbb      	ittet	lt
 8016dc4:	425b      	neglt	r3, r3
 8016dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8016dca:	9307      	strge	r3, [sp, #28]
 8016dcc:	9307      	strlt	r3, [sp, #28]
 8016dce:	bfb8      	it	lt
 8016dd0:	9204      	strlt	r2, [sp, #16]
 8016dd2:	7823      	ldrb	r3, [r4, #0]
 8016dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8016dd6:	d10c      	bne.n	8016df2 <_vfiprintf_r+0x176>
 8016dd8:	7863      	ldrb	r3, [r4, #1]
 8016dda:	2b2a      	cmp	r3, #42	; 0x2a
 8016ddc:	d135      	bne.n	8016e4a <_vfiprintf_r+0x1ce>
 8016dde:	9b03      	ldr	r3, [sp, #12]
 8016de0:	1d1a      	adds	r2, r3, #4
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	9203      	str	r2, [sp, #12]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	bfb8      	it	lt
 8016dea:	f04f 33ff 	movlt.w	r3, #4294967295
 8016dee:	3402      	adds	r4, #2
 8016df0:	9305      	str	r3, [sp, #20]
 8016df2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016ed8 <_vfiprintf_r+0x25c>
 8016df6:	7821      	ldrb	r1, [r4, #0]
 8016df8:	2203      	movs	r2, #3
 8016dfa:	4650      	mov	r0, sl
 8016dfc:	f7e9 f9f0 	bl	80001e0 <memchr>
 8016e00:	b140      	cbz	r0, 8016e14 <_vfiprintf_r+0x198>
 8016e02:	2340      	movs	r3, #64	; 0x40
 8016e04:	eba0 000a 	sub.w	r0, r0, sl
 8016e08:	fa03 f000 	lsl.w	r0, r3, r0
 8016e0c:	9b04      	ldr	r3, [sp, #16]
 8016e0e:	4303      	orrs	r3, r0
 8016e10:	3401      	adds	r4, #1
 8016e12:	9304      	str	r3, [sp, #16]
 8016e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e18:	482c      	ldr	r0, [pc, #176]	; (8016ecc <_vfiprintf_r+0x250>)
 8016e1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016e1e:	2206      	movs	r2, #6
 8016e20:	f7e9 f9de 	bl	80001e0 <memchr>
 8016e24:	2800      	cmp	r0, #0
 8016e26:	d03f      	beq.n	8016ea8 <_vfiprintf_r+0x22c>
 8016e28:	4b29      	ldr	r3, [pc, #164]	; (8016ed0 <_vfiprintf_r+0x254>)
 8016e2a:	bb1b      	cbnz	r3, 8016e74 <_vfiprintf_r+0x1f8>
 8016e2c:	9b03      	ldr	r3, [sp, #12]
 8016e2e:	3307      	adds	r3, #7
 8016e30:	f023 0307 	bic.w	r3, r3, #7
 8016e34:	3308      	adds	r3, #8
 8016e36:	9303      	str	r3, [sp, #12]
 8016e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e3a:	443b      	add	r3, r7
 8016e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e3e:	e767      	b.n	8016d10 <_vfiprintf_r+0x94>
 8016e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8016e44:	460c      	mov	r4, r1
 8016e46:	2001      	movs	r0, #1
 8016e48:	e7a5      	b.n	8016d96 <_vfiprintf_r+0x11a>
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	3401      	adds	r4, #1
 8016e4e:	9305      	str	r3, [sp, #20]
 8016e50:	4619      	mov	r1, r3
 8016e52:	f04f 0c0a 	mov.w	ip, #10
 8016e56:	4620      	mov	r0, r4
 8016e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e5c:	3a30      	subs	r2, #48	; 0x30
 8016e5e:	2a09      	cmp	r2, #9
 8016e60:	d903      	bls.n	8016e6a <_vfiprintf_r+0x1ee>
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d0c5      	beq.n	8016df2 <_vfiprintf_r+0x176>
 8016e66:	9105      	str	r1, [sp, #20]
 8016e68:	e7c3      	b.n	8016df2 <_vfiprintf_r+0x176>
 8016e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e6e:	4604      	mov	r4, r0
 8016e70:	2301      	movs	r3, #1
 8016e72:	e7f0      	b.n	8016e56 <_vfiprintf_r+0x1da>
 8016e74:	ab03      	add	r3, sp, #12
 8016e76:	9300      	str	r3, [sp, #0]
 8016e78:	462a      	mov	r2, r5
 8016e7a:	4b16      	ldr	r3, [pc, #88]	; (8016ed4 <_vfiprintf_r+0x258>)
 8016e7c:	a904      	add	r1, sp, #16
 8016e7e:	4630      	mov	r0, r6
 8016e80:	f7fb f8bc 	bl	8011ffc <_printf_float>
 8016e84:	4607      	mov	r7, r0
 8016e86:	1c78      	adds	r0, r7, #1
 8016e88:	d1d6      	bne.n	8016e38 <_vfiprintf_r+0x1bc>
 8016e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e8c:	07d9      	lsls	r1, r3, #31
 8016e8e:	d405      	bmi.n	8016e9c <_vfiprintf_r+0x220>
 8016e90:	89ab      	ldrh	r3, [r5, #12]
 8016e92:	059a      	lsls	r2, r3, #22
 8016e94:	d402      	bmi.n	8016e9c <_vfiprintf_r+0x220>
 8016e96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e98:	f7fe f8fc 	bl	8015094 <__retarget_lock_release_recursive>
 8016e9c:	89ab      	ldrh	r3, [r5, #12]
 8016e9e:	065b      	lsls	r3, r3, #25
 8016ea0:	f53f af12 	bmi.w	8016cc8 <_vfiprintf_r+0x4c>
 8016ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ea6:	e711      	b.n	8016ccc <_vfiprintf_r+0x50>
 8016ea8:	ab03      	add	r3, sp, #12
 8016eaa:	9300      	str	r3, [sp, #0]
 8016eac:	462a      	mov	r2, r5
 8016eae:	4b09      	ldr	r3, [pc, #36]	; (8016ed4 <_vfiprintf_r+0x258>)
 8016eb0:	a904      	add	r1, sp, #16
 8016eb2:	4630      	mov	r0, r6
 8016eb4:	f7fb fb46 	bl	8012544 <_printf_i>
 8016eb8:	e7e4      	b.n	8016e84 <_vfiprintf_r+0x208>
 8016eba:	bf00      	nop
 8016ebc:	080191f8 	.word	0x080191f8
 8016ec0:	08019218 	.word	0x08019218
 8016ec4:	080191d8 	.word	0x080191d8
 8016ec8:	08019414 	.word	0x08019414
 8016ecc:	0801941e 	.word	0x0801941e
 8016ed0:	08011ffd 	.word	0x08011ffd
 8016ed4:	08016c57 	.word	0x08016c57
 8016ed8:	0801941a 	.word	0x0801941a

08016edc <abort>:
 8016edc:	b508      	push	{r3, lr}
 8016ede:	2006      	movs	r0, #6
 8016ee0:	f000 f856 	bl	8016f90 <raise>
 8016ee4:	2001      	movs	r0, #1
 8016ee6:	f7ec f849 	bl	8002f7c <_exit>
	...

08016eec <_fstat_r>:
 8016eec:	b538      	push	{r3, r4, r5, lr}
 8016eee:	4d07      	ldr	r5, [pc, #28]	; (8016f0c <_fstat_r+0x20>)
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	4604      	mov	r4, r0
 8016ef4:	4608      	mov	r0, r1
 8016ef6:	4611      	mov	r1, r2
 8016ef8:	602b      	str	r3, [r5, #0]
 8016efa:	f7ec f88e 	bl	800301a <_fstat>
 8016efe:	1c43      	adds	r3, r0, #1
 8016f00:	d102      	bne.n	8016f08 <_fstat_r+0x1c>
 8016f02:	682b      	ldr	r3, [r5, #0]
 8016f04:	b103      	cbz	r3, 8016f08 <_fstat_r+0x1c>
 8016f06:	6023      	str	r3, [r4, #0]
 8016f08:	bd38      	pop	{r3, r4, r5, pc}
 8016f0a:	bf00      	nop
 8016f0c:	20003314 	.word	0x20003314

08016f10 <_isatty_r>:
 8016f10:	b538      	push	{r3, r4, r5, lr}
 8016f12:	4d06      	ldr	r5, [pc, #24]	; (8016f2c <_isatty_r+0x1c>)
 8016f14:	2300      	movs	r3, #0
 8016f16:	4604      	mov	r4, r0
 8016f18:	4608      	mov	r0, r1
 8016f1a:	602b      	str	r3, [r5, #0]
 8016f1c:	f7ec f88d 	bl	800303a <_isatty>
 8016f20:	1c43      	adds	r3, r0, #1
 8016f22:	d102      	bne.n	8016f2a <_isatty_r+0x1a>
 8016f24:	682b      	ldr	r3, [r5, #0]
 8016f26:	b103      	cbz	r3, 8016f2a <_isatty_r+0x1a>
 8016f28:	6023      	str	r3, [r4, #0]
 8016f2a:	bd38      	pop	{r3, r4, r5, pc}
 8016f2c:	20003314 	.word	0x20003314

08016f30 <_malloc_usable_size_r>:
 8016f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f34:	1f18      	subs	r0, r3, #4
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	bfbc      	itt	lt
 8016f3a:	580b      	ldrlt	r3, [r1, r0]
 8016f3c:	18c0      	addlt	r0, r0, r3
 8016f3e:	4770      	bx	lr

08016f40 <_raise_r>:
 8016f40:	291f      	cmp	r1, #31
 8016f42:	b538      	push	{r3, r4, r5, lr}
 8016f44:	4604      	mov	r4, r0
 8016f46:	460d      	mov	r5, r1
 8016f48:	d904      	bls.n	8016f54 <_raise_r+0x14>
 8016f4a:	2316      	movs	r3, #22
 8016f4c:	6003      	str	r3, [r0, #0]
 8016f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8016f52:	bd38      	pop	{r3, r4, r5, pc}
 8016f54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016f56:	b112      	cbz	r2, 8016f5e <_raise_r+0x1e>
 8016f58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016f5c:	b94b      	cbnz	r3, 8016f72 <_raise_r+0x32>
 8016f5e:	4620      	mov	r0, r4
 8016f60:	f000 f830 	bl	8016fc4 <_getpid_r>
 8016f64:	462a      	mov	r2, r5
 8016f66:	4601      	mov	r1, r0
 8016f68:	4620      	mov	r0, r4
 8016f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f6e:	f000 b817 	b.w	8016fa0 <_kill_r>
 8016f72:	2b01      	cmp	r3, #1
 8016f74:	d00a      	beq.n	8016f8c <_raise_r+0x4c>
 8016f76:	1c59      	adds	r1, r3, #1
 8016f78:	d103      	bne.n	8016f82 <_raise_r+0x42>
 8016f7a:	2316      	movs	r3, #22
 8016f7c:	6003      	str	r3, [r0, #0]
 8016f7e:	2001      	movs	r0, #1
 8016f80:	e7e7      	b.n	8016f52 <_raise_r+0x12>
 8016f82:	2400      	movs	r4, #0
 8016f84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016f88:	4628      	mov	r0, r5
 8016f8a:	4798      	blx	r3
 8016f8c:	2000      	movs	r0, #0
 8016f8e:	e7e0      	b.n	8016f52 <_raise_r+0x12>

08016f90 <raise>:
 8016f90:	4b02      	ldr	r3, [pc, #8]	; (8016f9c <raise+0xc>)
 8016f92:	4601      	mov	r1, r0
 8016f94:	6818      	ldr	r0, [r3, #0]
 8016f96:	f7ff bfd3 	b.w	8016f40 <_raise_r>
 8016f9a:	bf00      	nop
 8016f9c:	2000019c 	.word	0x2000019c

08016fa0 <_kill_r>:
 8016fa0:	b538      	push	{r3, r4, r5, lr}
 8016fa2:	4d07      	ldr	r5, [pc, #28]	; (8016fc0 <_kill_r+0x20>)
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	4604      	mov	r4, r0
 8016fa8:	4608      	mov	r0, r1
 8016faa:	4611      	mov	r1, r2
 8016fac:	602b      	str	r3, [r5, #0]
 8016fae:	f7eb ffd5 	bl	8002f5c <_kill>
 8016fb2:	1c43      	adds	r3, r0, #1
 8016fb4:	d102      	bne.n	8016fbc <_kill_r+0x1c>
 8016fb6:	682b      	ldr	r3, [r5, #0]
 8016fb8:	b103      	cbz	r3, 8016fbc <_kill_r+0x1c>
 8016fba:	6023      	str	r3, [r4, #0]
 8016fbc:	bd38      	pop	{r3, r4, r5, pc}
 8016fbe:	bf00      	nop
 8016fc0:	20003314 	.word	0x20003314

08016fc4 <_getpid_r>:
 8016fc4:	f7eb bfc2 	b.w	8002f4c <_getpid>

08016fc8 <round>:
 8016fc8:	ec51 0b10 	vmov	r0, r1, d0
 8016fcc:	b570      	push	{r4, r5, r6, lr}
 8016fce:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8016fd2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8016fd6:	2c13      	cmp	r4, #19
 8016fd8:	ee10 2a10 	vmov	r2, s0
 8016fdc:	460b      	mov	r3, r1
 8016fde:	dc19      	bgt.n	8017014 <round+0x4c>
 8016fe0:	2c00      	cmp	r4, #0
 8016fe2:	da09      	bge.n	8016ff8 <round+0x30>
 8016fe4:	3401      	adds	r4, #1
 8016fe6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8016fea:	d103      	bne.n	8016ff4 <round+0x2c>
 8016fec:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016ff0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016ff4:	2100      	movs	r1, #0
 8016ff6:	e028      	b.n	801704a <round+0x82>
 8016ff8:	4d15      	ldr	r5, [pc, #84]	; (8017050 <round+0x88>)
 8016ffa:	4125      	asrs	r5, r4
 8016ffc:	ea01 0605 	and.w	r6, r1, r5
 8017000:	4332      	orrs	r2, r6
 8017002:	d00e      	beq.n	8017022 <round+0x5a>
 8017004:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017008:	fa42 f404 	asr.w	r4, r2, r4
 801700c:	4423      	add	r3, r4
 801700e:	ea23 0305 	bic.w	r3, r3, r5
 8017012:	e7ef      	b.n	8016ff4 <round+0x2c>
 8017014:	2c33      	cmp	r4, #51	; 0x33
 8017016:	dd07      	ble.n	8017028 <round+0x60>
 8017018:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801701c:	d101      	bne.n	8017022 <round+0x5a>
 801701e:	f7e9 f935 	bl	800028c <__adddf3>
 8017022:	ec41 0b10 	vmov	d0, r0, r1
 8017026:	bd70      	pop	{r4, r5, r6, pc}
 8017028:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801702c:	f04f 35ff 	mov.w	r5, #4294967295
 8017030:	40f5      	lsrs	r5, r6
 8017032:	4228      	tst	r0, r5
 8017034:	d0f5      	beq.n	8017022 <round+0x5a>
 8017036:	2101      	movs	r1, #1
 8017038:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801703c:	fa01 f404 	lsl.w	r4, r1, r4
 8017040:	1912      	adds	r2, r2, r4
 8017042:	bf28      	it	cs
 8017044:	185b      	addcs	r3, r3, r1
 8017046:	ea22 0105 	bic.w	r1, r2, r5
 801704a:	4608      	mov	r0, r1
 801704c:	4619      	mov	r1, r3
 801704e:	e7e8      	b.n	8017022 <round+0x5a>
 8017050:	000fffff 	.word	0x000fffff

08017054 <fmod>:
 8017054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017056:	ed2d 8b02 	vpush	{d8}
 801705a:	ec57 6b10 	vmov	r6, r7, d0
 801705e:	ec55 4b11 	vmov	r4, r5, d1
 8017062:	f000 f833 	bl	80170cc <__ieee754_fmod>
 8017066:	4b18      	ldr	r3, [pc, #96]	; (80170c8 <fmod+0x74>)
 8017068:	eeb0 8a40 	vmov.f32	s16, s0
 801706c:	eef0 8a60 	vmov.f32	s17, s1
 8017070:	f993 3000 	ldrsb.w	r3, [r3]
 8017074:	3301      	adds	r3, #1
 8017076:	d020      	beq.n	80170ba <fmod+0x66>
 8017078:	4622      	mov	r2, r4
 801707a:	462b      	mov	r3, r5
 801707c:	4620      	mov	r0, r4
 801707e:	4629      	mov	r1, r5
 8017080:	f7e9 fd54 	bl	8000b2c <__aeabi_dcmpun>
 8017084:	b9c8      	cbnz	r0, 80170ba <fmod+0x66>
 8017086:	4632      	mov	r2, r6
 8017088:	463b      	mov	r3, r7
 801708a:	4630      	mov	r0, r6
 801708c:	4639      	mov	r1, r7
 801708e:	f7e9 fd4d 	bl	8000b2c <__aeabi_dcmpun>
 8017092:	b990      	cbnz	r0, 80170ba <fmod+0x66>
 8017094:	2200      	movs	r2, #0
 8017096:	2300      	movs	r3, #0
 8017098:	4620      	mov	r0, r4
 801709a:	4629      	mov	r1, r5
 801709c:	f7e9 fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 80170a0:	b158      	cbz	r0, 80170ba <fmod+0x66>
 80170a2:	f7fa fed9 	bl	8011e58 <__errno>
 80170a6:	2321      	movs	r3, #33	; 0x21
 80170a8:	6003      	str	r3, [r0, #0]
 80170aa:	2200      	movs	r2, #0
 80170ac:	2300      	movs	r3, #0
 80170ae:	4610      	mov	r0, r2
 80170b0:	4619      	mov	r1, r3
 80170b2:	f7e9 fbcb 	bl	800084c <__aeabi_ddiv>
 80170b6:	ec41 0b18 	vmov	d8, r0, r1
 80170ba:	eeb0 0a48 	vmov.f32	s0, s16
 80170be:	eef0 0a68 	vmov.f32	s1, s17
 80170c2:	ecbd 8b02 	vpop	{d8}
 80170c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170c8:	20000370 	.word	0x20000370

080170cc <__ieee754_fmod>:
 80170cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170d0:	ec53 2b11 	vmov	r2, r3, d1
 80170d4:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 80170d8:	ea5e 0402 	orrs.w	r4, lr, r2
 80170dc:	ec51 0b10 	vmov	r0, r1, d0
 80170e0:	ee11 7a10 	vmov	r7, s2
 80170e4:	ee11 ca10 	vmov	ip, s2
 80170e8:	461e      	mov	r6, r3
 80170ea:	d00d      	beq.n	8017108 <__ieee754_fmod+0x3c>
 80170ec:	4c7a      	ldr	r4, [pc, #488]	; (80172d8 <__ieee754_fmod+0x20c>)
 80170ee:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80170f2:	45a0      	cmp	r8, r4
 80170f4:	4689      	mov	r9, r1
 80170f6:	dc07      	bgt.n	8017108 <__ieee754_fmod+0x3c>
 80170f8:	4254      	negs	r4, r2
 80170fa:	4d78      	ldr	r5, [pc, #480]	; (80172dc <__ieee754_fmod+0x210>)
 80170fc:	4314      	orrs	r4, r2
 80170fe:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8017102:	42ac      	cmp	r4, r5
 8017104:	46ab      	mov	fp, r5
 8017106:	d909      	bls.n	801711c <__ieee754_fmod+0x50>
 8017108:	f7e9 fa76 	bl	80005f8 <__aeabi_dmul>
 801710c:	4602      	mov	r2, r0
 801710e:	460b      	mov	r3, r1
 8017110:	f7e9 fb9c 	bl	800084c <__aeabi_ddiv>
 8017114:	ec41 0b10 	vmov	d0, r0, r1
 8017118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801711c:	45f0      	cmp	r8, lr
 801711e:	ee10 aa10 	vmov	sl, s0
 8017122:	ee10 4a10 	vmov	r4, s0
 8017126:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801712a:	dc0a      	bgt.n	8017142 <__ieee754_fmod+0x76>
 801712c:	dbf2      	blt.n	8017114 <__ieee754_fmod+0x48>
 801712e:	4290      	cmp	r0, r2
 8017130:	d3f0      	bcc.n	8017114 <__ieee754_fmod+0x48>
 8017132:	d106      	bne.n	8017142 <__ieee754_fmod+0x76>
 8017134:	4a6a      	ldr	r2, [pc, #424]	; (80172e0 <__ieee754_fmod+0x214>)
 8017136:	0fed      	lsrs	r5, r5, #31
 8017138:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801713c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017140:	e7e8      	b.n	8017114 <__ieee754_fmod+0x48>
 8017142:	ea19 0f0b 	tst.w	r9, fp
 8017146:	d14a      	bne.n	80171de <__ieee754_fmod+0x112>
 8017148:	f1b8 0f00 	cmp.w	r8, #0
 801714c:	d13f      	bne.n	80171ce <__ieee754_fmod+0x102>
 801714e:	4965      	ldr	r1, [pc, #404]	; (80172e4 <__ieee754_fmod+0x218>)
 8017150:	4653      	mov	r3, sl
 8017152:	2b00      	cmp	r3, #0
 8017154:	dc38      	bgt.n	80171c8 <__ieee754_fmod+0xfc>
 8017156:	4b61      	ldr	r3, [pc, #388]	; (80172dc <__ieee754_fmod+0x210>)
 8017158:	4033      	ands	r3, r6
 801715a:	2b00      	cmp	r3, #0
 801715c:	d14f      	bne.n	80171fe <__ieee754_fmod+0x132>
 801715e:	f1be 0f00 	cmp.w	lr, #0
 8017162:	d144      	bne.n	80171ee <__ieee754_fmod+0x122>
 8017164:	4a5f      	ldr	r2, [pc, #380]	; (80172e4 <__ieee754_fmod+0x218>)
 8017166:	463b      	mov	r3, r7
 8017168:	2b00      	cmp	r3, #0
 801716a:	dc3d      	bgt.n	80171e8 <__ieee754_fmod+0x11c>
 801716c:	4b5e      	ldr	r3, [pc, #376]	; (80172e8 <__ieee754_fmod+0x21c>)
 801716e:	4299      	cmp	r1, r3
 8017170:	db4a      	blt.n	8017208 <__ieee754_fmod+0x13c>
 8017172:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801717a:	485b      	ldr	r0, [pc, #364]	; (80172e8 <__ieee754_fmod+0x21c>)
 801717c:	4282      	cmp	r2, r0
 801717e:	db57      	blt.n	8017230 <__ieee754_fmod+0x164>
 8017180:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8017184:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8017188:	1a89      	subs	r1, r1, r2
 801718a:	1b98      	subs	r0, r3, r6
 801718c:	eba4 070c 	sub.w	r7, r4, ip
 8017190:	2900      	cmp	r1, #0
 8017192:	d164      	bne.n	801725e <__ieee754_fmod+0x192>
 8017194:	4564      	cmp	r4, ip
 8017196:	bf38      	it	cc
 8017198:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801719c:	2800      	cmp	r0, #0
 801719e:	bfa4      	itt	ge
 80171a0:	463c      	movge	r4, r7
 80171a2:	4603      	movge	r3, r0
 80171a4:	ea53 0104 	orrs.w	r1, r3, r4
 80171a8:	d0c4      	beq.n	8017134 <__ieee754_fmod+0x68>
 80171aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80171ae:	db6b      	blt.n	8017288 <__ieee754_fmod+0x1bc>
 80171b0:	494d      	ldr	r1, [pc, #308]	; (80172e8 <__ieee754_fmod+0x21c>)
 80171b2:	428a      	cmp	r2, r1
 80171b4:	db6e      	blt.n	8017294 <__ieee754_fmod+0x1c8>
 80171b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80171ba:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80171be:	431d      	orrs	r5, r3
 80171c0:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 80171c4:	4620      	mov	r0, r4
 80171c6:	e7a5      	b.n	8017114 <__ieee754_fmod+0x48>
 80171c8:	3901      	subs	r1, #1
 80171ca:	005b      	lsls	r3, r3, #1
 80171cc:	e7c1      	b.n	8017152 <__ieee754_fmod+0x86>
 80171ce:	4946      	ldr	r1, [pc, #280]	; (80172e8 <__ieee754_fmod+0x21c>)
 80171d0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	ddbe      	ble.n	8017156 <__ieee754_fmod+0x8a>
 80171d8:	3901      	subs	r1, #1
 80171da:	005b      	lsls	r3, r3, #1
 80171dc:	e7fa      	b.n	80171d4 <__ieee754_fmod+0x108>
 80171de:	ea4f 5128 	mov.w	r1, r8, asr #20
 80171e2:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80171e6:	e7b6      	b.n	8017156 <__ieee754_fmod+0x8a>
 80171e8:	3a01      	subs	r2, #1
 80171ea:	005b      	lsls	r3, r3, #1
 80171ec:	e7bc      	b.n	8017168 <__ieee754_fmod+0x9c>
 80171ee:	4a3e      	ldr	r2, [pc, #248]	; (80172e8 <__ieee754_fmod+0x21c>)
 80171f0:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	ddb9      	ble.n	801716c <__ieee754_fmod+0xa0>
 80171f8:	3a01      	subs	r2, #1
 80171fa:	005b      	lsls	r3, r3, #1
 80171fc:	e7fa      	b.n	80171f4 <__ieee754_fmod+0x128>
 80171fe:	ea4f 522e 	mov.w	r2, lr, asr #20
 8017202:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8017206:	e7b1      	b.n	801716c <__ieee754_fmod+0xa0>
 8017208:	1a5c      	subs	r4, r3, r1
 801720a:	2c1f      	cmp	r4, #31
 801720c:	dc0a      	bgt.n	8017224 <__ieee754_fmod+0x158>
 801720e:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8017212:	fa08 f804 	lsl.w	r8, r8, r4
 8017216:	fa2a f303 	lsr.w	r3, sl, r3
 801721a:	ea43 0308 	orr.w	r3, r3, r8
 801721e:	fa0a f404 	lsl.w	r4, sl, r4
 8017222:	e7aa      	b.n	801717a <__ieee754_fmod+0xae>
 8017224:	4b31      	ldr	r3, [pc, #196]	; (80172ec <__ieee754_fmod+0x220>)
 8017226:	1a5b      	subs	r3, r3, r1
 8017228:	fa0a f303 	lsl.w	r3, sl, r3
 801722c:	2400      	movs	r4, #0
 801722e:	e7a4      	b.n	801717a <__ieee754_fmod+0xae>
 8017230:	eba0 0c02 	sub.w	ip, r0, r2
 8017234:	f1bc 0f1f 	cmp.w	ip, #31
 8017238:	dc0a      	bgt.n	8017250 <__ieee754_fmod+0x184>
 801723a:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 801723e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8017242:	fa27 f606 	lsr.w	r6, r7, r6
 8017246:	ea46 060e 	orr.w	r6, r6, lr
 801724a:	fa07 fc0c 	lsl.w	ip, r7, ip
 801724e:	e79b      	b.n	8017188 <__ieee754_fmod+0xbc>
 8017250:	4e26      	ldr	r6, [pc, #152]	; (80172ec <__ieee754_fmod+0x220>)
 8017252:	1ab6      	subs	r6, r6, r2
 8017254:	fa07 f606 	lsl.w	r6, r7, r6
 8017258:	f04f 0c00 	mov.w	ip, #0
 801725c:	e794      	b.n	8017188 <__ieee754_fmod+0xbc>
 801725e:	4564      	cmp	r4, ip
 8017260:	bf38      	it	cc
 8017262:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8017266:	2800      	cmp	r0, #0
 8017268:	da05      	bge.n	8017276 <__ieee754_fmod+0x1aa>
 801726a:	0fe0      	lsrs	r0, r4, #31
 801726c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8017270:	0064      	lsls	r4, r4, #1
 8017272:	3901      	subs	r1, #1
 8017274:	e789      	b.n	801718a <__ieee754_fmod+0xbe>
 8017276:	ea50 0307 	orrs.w	r3, r0, r7
 801727a:	f43f af5b 	beq.w	8017134 <__ieee754_fmod+0x68>
 801727e:	0ffb      	lsrs	r3, r7, #31
 8017280:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8017284:	007c      	lsls	r4, r7, #1
 8017286:	e7f4      	b.n	8017272 <__ieee754_fmod+0x1a6>
 8017288:	0fe1      	lsrs	r1, r4, #31
 801728a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801728e:	0064      	lsls	r4, r4, #1
 8017290:	3a01      	subs	r2, #1
 8017292:	e78a      	b.n	80171aa <__ieee754_fmod+0xde>
 8017294:	1a89      	subs	r1, r1, r2
 8017296:	2914      	cmp	r1, #20
 8017298:	dc0a      	bgt.n	80172b0 <__ieee754_fmod+0x1e4>
 801729a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801729e:	fa03 f202 	lsl.w	r2, r3, r2
 80172a2:	40cc      	lsrs	r4, r1
 80172a4:	4322      	orrs	r2, r4
 80172a6:	410b      	asrs	r3, r1
 80172a8:	ea43 0105 	orr.w	r1, r3, r5
 80172ac:	4610      	mov	r0, r2
 80172ae:	e731      	b.n	8017114 <__ieee754_fmod+0x48>
 80172b0:	291f      	cmp	r1, #31
 80172b2:	dc07      	bgt.n	80172c4 <__ieee754_fmod+0x1f8>
 80172b4:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 80172b8:	40cc      	lsrs	r4, r1
 80172ba:	fa03 f202 	lsl.w	r2, r3, r2
 80172be:	4322      	orrs	r2, r4
 80172c0:	462b      	mov	r3, r5
 80172c2:	e7f1      	b.n	80172a8 <__ieee754_fmod+0x1dc>
 80172c4:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 80172c8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80172cc:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 80172d0:	32e2      	adds	r2, #226	; 0xe2
 80172d2:	fa43 f202 	asr.w	r2, r3, r2
 80172d6:	e7f3      	b.n	80172c0 <__ieee754_fmod+0x1f4>
 80172d8:	7fefffff 	.word	0x7fefffff
 80172dc:	7ff00000 	.word	0x7ff00000
 80172e0:	08019480 	.word	0x08019480
 80172e4:	fffffbed 	.word	0xfffffbed
 80172e8:	fffffc02 	.word	0xfffffc02
 80172ec:	fffffbe2 	.word	0xfffffbe2

080172f0 <_init>:
 80172f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172f2:	bf00      	nop
 80172f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80172f6:	bc08      	pop	{r3}
 80172f8:	469e      	mov	lr, r3
 80172fa:	4770      	bx	lr

080172fc <_fini>:
 80172fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172fe:	bf00      	nop
 8017300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017302:	bc08      	pop	{r3}
 8017304:	469e      	mov	lr, r3
 8017306:	4770      	bx	lr
