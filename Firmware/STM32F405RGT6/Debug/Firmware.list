
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018638  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002228  080187c8  080187c8  000287c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a9f0  0801a9f0  00030374  2**0
                  CONTENTS
  4 .ARM          00000008  0801a9f0  0801a9f0  0002a9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a9f8  0801a9f8  00030374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a9f8  0801a9f8  0002a9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a9fc  0801a9fc  0002a9fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000374  20000000  0801aa00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003008  20000378  0801ad74  00030378  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003380  0801ad74  00033380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030374  2**0
                  CONTENTS, READONLY
 12 .debug_info   0009580f  00000000  00000000  000303a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000855c  00000000  00000000  000c5bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003b70  00000000  00000000  000ce110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000037f0  00000000  00000000  000d1c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2e7  00000000  00000000  000d5470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000393dd  00000000  00000000  00100757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaa0b  00000000  00000000  00139b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022453f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011700  00000000  00000000  00224594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000378 	.word	0x20000378
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080187b0 	.word	0x080187b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	080187b0 	.word	0x080187b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <convertDegMinToDecDeg>:
#include <math.h>

GPS_t GPS;
//##################################################################################################################
double convertDegMinToDecDeg (float degMin)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	ed87 0a01 	vstr	s0, [r7, #4]
  double min = 0.0;
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double decDeg = 0.0;
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 
  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fa98 	bl	8000548 <__aeabi_f2d>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001088 <convertDegMinToDecDeg+0x98>
 8001020:	ec43 2b10 	vmov	d0, r2, r3
 8001024:	f017 f8ee 	bl	8018204 <fmod>
 8001028:	ed87 0b04 	vstr	d0, [r7, #16]
 
  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 800102c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001030:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001090 <convertDegMinToDecDeg+0xa0>
 8001034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001040:	edc7 7a01 	vstr	s15, [r7, #4]
  decDeg = degMin + ( min / 60 );
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff fa7f 	bl	8000548 <__aeabi_f2d>
 800104a:	4604      	mov	r4, r0
 800104c:	460d      	mov	r5, r1
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <convertDegMinToDecDeg+0xa4>)
 8001054:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001058:	f7ff fbf8 	bl	800084c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4620      	mov	r0, r4
 8001062:	4629      	mov	r1, r5
 8001064:	f7ff f912 	bl	800028c <__adddf3>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 
  return decDeg;
 8001070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001074:	ec43 2b17 	vmov	d7, r2, r3
}
 8001078:	eeb0 0a47 	vmov.f32	s0, s14
 800107c:	eef0 0a67 	vmov.f32	s1, s15
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bdb0      	pop	{r4, r5, r7, pc}
 8001086:	bf00      	nop
 8001088:	00000000 	.word	0x00000000
 800108c:	40590000 	.word	0x40590000
 8001090:	42c80000 	.word	0x42c80000
 8001094:	404e0000 	.word	0x404e0000

08001098 <GPS_Init>:
//##################################################################################################################
void	GPS_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	// Note: GPS_NRST sets the GPS LED, not the reset apparently
	memset(&GPS.GPGGA,0,sizeof(GPS.GPGGA));  // resets GPGGA to 0
 800109c:	2268      	movs	r2, #104	; 0x68
 800109e:	2100      	movs	r1, #0
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <GPS_Init+0x24>)
 80010a2:	f011 ff7b 	bl	8012f9c <memset>
	GPS.rxIndex=0;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <GPS_Init+0x28>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);	
 80010ae:	2201      	movs	r2, #1
 80010b0:	4904      	ldr	r1, [pc, #16]	; (80010c4 <GPS_Init+0x2c>)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <GPS_Init+0x30>)
 80010b4:	f00a fafb 	bl	800b6ae <HAL_UART_Receive_IT>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000cb8 	.word	0x20000cb8
 80010c0:	200008b0 	.word	0x200008b0
 80010c4:	20000cb2 	.word	0x20000cb2
 80010c8:	200015e0 	.word	0x200015e0

080010cc <GPS_CallBack>:
//##################################################################################################################
void	GPS_CallBack(void) /* Receiving GPS UART buffer byte by byte until it starts repeating */
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	4915      	ldr	r1, [pc, #84]	; (8001128 <GPS_CallBack+0x5c>)
 80010d4:	4815      	ldr	r0, [pc, #84]	; (800112c <GPS_CallBack+0x60>)
 80010d6:	f00a faea 	bl	800b6ae <HAL_UART_Receive_IT>

	/* We expect 14 NMEA sentences separated by a $ symbol */
	GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <GPS_CallBack+0x64>)
 80010dc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <GPS_CallBack+0x64>)
 80010e4:	f893 1402 	ldrb.w	r1, [r3, #1026]	; 0x402
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <GPS_CallBack+0x64>)
 80010ea:	5499      	strb	r1, [r3, r2]
	if (GPS.rxTmp == 36) GPS.nmeaCounter++; // 36 is '$' in UTF8
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <GPS_CallBack+0x64>)
 80010ee:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80010f2:	2b24      	cmp	r3, #36	; 0x24
 80010f4:	d107      	bne.n	8001106 <GPS_CallBack+0x3a>
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <GPS_CallBack+0x64>)
 80010f8:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 80010fc:	3301      	adds	r3, #1
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <GPS_CallBack+0x64>)
 8001102:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	GPS.rxIndex++;
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <GPS_CallBack+0x64>)
 8001108:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800110c:	3301      	adds	r3, #1
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <GPS_CallBack+0x64>)
 8001112:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	if (GPS.nmeaCounter >= 13) GPS_Process();
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <GPS_CallBack+0x64>)
 8001118:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800111c:	2b0c      	cmp	r3, #12
 800111e:	d901      	bls.n	8001124 <GPS_CallBack+0x58>
 8001120:	f000 f808 	bl	8001134 <GPS_Process>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000cb2 	.word	0x20000cb2
 800112c:	200015e0 	.word	0x200015e0
 8001130:	200008b0 	.word	0x200008b0

08001134 <GPS_Process>:
//##################################################################################################################
void	GPS_Process(void)
{
 8001134:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001138:	b090      	sub	sp, #64	; 0x40
 800113a:	af08      	add	r7, sp, #32
	char	*str2;
	char	*str3;
	#if (_GPS_DEBUG==1)
	printf("%s",GPS.rxBuffer);
	#endif
	GPS.GPGGA.Buffer_Size = strlen(GPS.rxBuffer);
 800113c:	48bb      	ldr	r0, [pc, #748]	; (800142c <GPS_Process+0x2f8>)
 800113e:	f7ff f847 	bl	80001d0 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	b29a      	uxth	r2, r3
 8001146:	4bb9      	ldr	r3, [pc, #740]	; (800142c <GPS_Process+0x2f8>)
 8001148:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
	str=strstr((char*)GPS.rxBuffer,"GNGGA,");
 800114c:	49b8      	ldr	r1, [pc, #736]	; (8001430 <GPS_Process+0x2fc>)
 800114e:	48b7      	ldr	r0, [pc, #732]	; (800142c <GPS_Process+0x2f8>)
 8001150:	f012 fe4c 	bl	8013dec <strstr>
 8001154:	61f8      	str	r0, [r7, #28]
	if(str!=NULL)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 81a5 	beq.w	80014a8 <GPS_Process+0x374>
	{
		memset(&GPS.GPGGA,0,sizeof(GPS.GPGGA));  // resets GPGGA to 0
 800115e:	2268      	movs	r2, #104	; 0x68
 8001160:	2100      	movs	r1, #0
 8001162:	48b4      	ldr	r0, [pc, #720]	; (8001434 <GPS_Process+0x300>)
 8001164:	f011 ff1a 	bl	8012f9c <memset>
		// GNGGA for where the position is in the buffer
		sscanf(str,"GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f",&GPS.GPGGA.HHMMSS,&GPS.GPGGA.Latitude,&GPS.GPGGA.NS_Indicator,&GPS.GPGGA.Longitude,&GPS.GPGGA.EW_Indicator,&GPS.GPGGA.PositionFixIndicator,&GPS.GPGGA.SatellitesUsed,&GPS.GPGGA.HDOP,&GPS.GPGGA.MSL_Altitude);  // GNGGA instead of GPGGA
 8001168:	4bb3      	ldr	r3, [pc, #716]	; (8001438 <GPS_Process+0x304>)
 800116a:	9306      	str	r3, [sp, #24]
 800116c:	4bb3      	ldr	r3, [pc, #716]	; (800143c <GPS_Process+0x308>)
 800116e:	9305      	str	r3, [sp, #20]
 8001170:	4bb3      	ldr	r3, [pc, #716]	; (8001440 <GPS_Process+0x30c>)
 8001172:	9304      	str	r3, [sp, #16]
 8001174:	4bb3      	ldr	r3, [pc, #716]	; (8001444 <GPS_Process+0x310>)
 8001176:	9303      	str	r3, [sp, #12]
 8001178:	4bb3      	ldr	r3, [pc, #716]	; (8001448 <GPS_Process+0x314>)
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	4bb3      	ldr	r3, [pc, #716]	; (800144c <GPS_Process+0x318>)
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	4bb3      	ldr	r3, [pc, #716]	; (8001450 <GPS_Process+0x31c>)
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	4bb3      	ldr	r3, [pc, #716]	; (8001454 <GPS_Process+0x320>)
 8001186:	4ab4      	ldr	r2, [pc, #720]	; (8001458 <GPS_Process+0x324>)
 8001188:	49b4      	ldr	r1, [pc, #720]	; (800145c <GPS_Process+0x328>)
 800118a:	69f8      	ldr	r0, [r7, #28]
 800118c:	f012 fdae 	bl	8013cec <siscanf>
		if(GPS.GPGGA.PositionFixIndicator>0)
 8001190:	4ba6      	ldr	r3, [pc, #664]	; (800142c <GPS_Process+0x2f8>)
 8001192:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd03      	ble.n	80011a2 <GPS_Process+0x6e>
			GPS.GPGGA.PositionFixIndicator=1;
 800119a:	4ba4      	ldr	r3, [pc, #656]	; (800142c <GPS_Process+0x2f8>)
 800119c:	2201      	movs	r2, #1
 800119e:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
		if(GPS.GPGGA.NS_Indicator==0)
 80011a2:	4ba2      	ldr	r3, [pc, #648]	; (800142c <GPS_Process+0x2f8>)
 80011a4:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d103      	bne.n	80011b4 <GPS_Process+0x80>
			GPS.GPGGA.NS_Indicator='-';
 80011ac:	4b9f      	ldr	r3, [pc, #636]	; (800142c <GPS_Process+0x2f8>)
 80011ae:	222d      	movs	r2, #45	; 0x2d
 80011b0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
		if(GPS.GPGGA.EW_Indicator==0)
 80011b4:	4b9d      	ldr	r3, [pc, #628]	; (800142c <GPS_Process+0x2f8>)
 80011b6:	f893 3430 	ldrb.w	r3, [r3, #1072]	; 0x430
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d103      	bne.n	80011c6 <GPS_Process+0x92>
			GPS.GPGGA.EW_Indicator='-';
 80011be:	4b9b      	ldr	r3, [pc, #620]	; (800142c <GPS_Process+0x2f8>)
 80011c0:	222d      	movs	r2, #45	; 0x2d
 80011c2:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
		if(GPS.GPGGA.Geoid_Units==0)
 80011c6:	4b99      	ldr	r3, [pc, #612]	; (800142c <GPS_Process+0x2f8>)
 80011c8:	f893 344c 	ldrb.w	r3, [r3, #1100]	; 0x44c
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d103      	bne.n	80011d8 <GPS_Process+0xa4>
			GPS.GPGGA.Geoid_Units='-';
 80011d0:	4b96      	ldr	r3, [pc, #600]	; (800142c <GPS_Process+0x2f8>)
 80011d2:	222d      	movs	r2, #45	; 0x2d
 80011d4:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
		if(GPS.GPGGA.MSL_Units==0)
 80011d8:	4b94      	ldr	r3, [pc, #592]	; (800142c <GPS_Process+0x2f8>)
 80011da:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d103      	bne.n	80011ea <GPS_Process+0xb6>
			GPS.GPGGA.MSL_Units='-';
 80011e2:	4b92      	ldr	r3, [pc, #584]	; (800142c <GPS_Process+0x2f8>)
 80011e4:	222d      	movs	r2, #45	; 0x2d
 80011e6:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
		if (GPS.GPGGA.Latitude == 0.0f || GPS.GPGGA.Longitude == 0.0f) {
 80011ea:	4b90      	ldr	r3, [pc, #576]	; (800142c <GPS_Process+0x2f8>)
 80011ec:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d009      	beq.n	8001212 <GPS_Process+0xde>
 80011fe:	4b8b      	ldr	r3, [pc, #556]	; (800142c <GPS_Process+0x2f8>)
 8001200:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	eef5 7a40 	vcmp.f32	s15, #0.0
 800120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001210:	d112      	bne.n	8001238 <GPS_Process+0x104>
			GPS.GPGGA.LatitudeDecimal = 0.0f;
 8001212:	4b86      	ldr	r3, [pc, #536]	; (800142c <GPS_Process+0x2f8>)
 8001214:	f503 6183 	add.w	r1, r3, #1048	; 0x418
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	e9c1 2300 	strd	r2, r3, [r1]
			GPS.GPGGA.LongitudeDecimal = 0.0f;
 8001224:	4b81      	ldr	r3, [pc, #516]	; (800142c <GPS_Process+0x2f8>)
 8001226:	f503 6185 	add.w	r1, r3, #1064	; 0x428
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	e9c1 2300 	strd	r2, r3, [r1]
 8001236:	e047      	b.n	80012c8 <GPS_Process+0x194>
		} else {
			GPS.GPGGA.LatitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Latitude);
 8001238:	4b7c      	ldr	r3, [pc, #496]	; (800142c <GPS_Process+0x2f8>)
 800123a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	eeb0 0a67 	vmov.f32	s0, s15
 8001246:	f7ff fed3 	bl	8000ff0 <convertDegMinToDecDeg>
 800124a:	eeb0 7a40 	vmov.f32	s14, s0
 800124e:	eef0 7a60 	vmov.f32	s15, s1
 8001252:	4b76      	ldr	r3, [pc, #472]	; (800142c <GPS_Process+0x2f8>)
 8001254:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8001258:	ed83 7b00 	vstr	d7, [r3]
			if (GPS.GPGGA.NS_Indicator!=78) { // 78 equals "N"
 800125c:	4b73      	ldr	r3, [pc, #460]	; (800142c <GPS_Process+0x2f8>)
 800125e:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8001262:	2b4e      	cmp	r3, #78	; 0x4e
 8001264:	d00c      	beq.n	8001280 <GPS_Process+0x14c>
				GPS.GPGGA.LatitudeDecimal *= -1;
 8001266:	4b71      	ldr	r3, [pc, #452]	; (800142c <GPS_Process+0x2f8>)
 8001268:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	4690      	mov	r8, r2
 8001272:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001276:	4b6d      	ldr	r3, [pc, #436]	; (800142c <GPS_Process+0x2f8>)
 8001278:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800127c:	e9c3 8900 	strd	r8, r9, [r3]
			}
			GPS.GPGGA.LongitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Longitude);
 8001280:	4b6a      	ldr	r3, [pc, #424]	; (800142c <GPS_Process+0x2f8>)
 8001282:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	eeb0 0a67 	vmov.f32	s0, s15
 800128e:	f7ff feaf 	bl	8000ff0 <convertDegMinToDecDeg>
 8001292:	eeb0 7a40 	vmov.f32	s14, s0
 8001296:	eef0 7a60 	vmov.f32	s15, s1
 800129a:	4b64      	ldr	r3, [pc, #400]	; (800142c <GPS_Process+0x2f8>)
 800129c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80012a0:	ed83 7b00 	vstr	d7, [r3]
			if (GPS.GPGGA.EW_Indicator!=69) { // 69 equals "E"
 80012a4:	4b61      	ldr	r3, [pc, #388]	; (800142c <GPS_Process+0x2f8>)
 80012a6:	f893 3430 	ldrb.w	r3, [r3, #1072]	; 0x430
 80012aa:	2b45      	cmp	r3, #69	; 0x45
 80012ac:	d00c      	beq.n	80012c8 <GPS_Process+0x194>
				GPS.GPGGA.LongitudeDecimal *= -1;
 80012ae:	4b5f      	ldr	r3, [pc, #380]	; (800142c <GPS_Process+0x2f8>)
 80012b0:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	4614      	mov	r4, r2
 80012ba:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012be:	4b5b      	ldr	r3, [pc, #364]	; (800142c <GPS_Process+0x2f8>)
 80012c0:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80012c4:	e9c3 4500 	strd	r4, r5, [r3]
			}
		}
		str2=strstr((char*)GPS.rxBuffer,"GNZDA,"); // GNZDA for where the date is in the buffer
 80012c8:	4965      	ldr	r1, [pc, #404]	; (8001460 <GPS_Process+0x32c>)
 80012ca:	4858      	ldr	r0, [pc, #352]	; (800142c <GPS_Process+0x2f8>)
 80012cc:	f012 fd8e 	bl	8013dec <strstr>
 80012d0:	61b8      	str	r0, [r7, #24]
		if(str2!=NULL) {
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d078      	beq.n	80013ca <GPS_Process+0x296>
			// format: GNZDA,181815.000,03,02,2021
			sscanf(str2,"GNZDA,%f,%d,%d,%d",&GPS.GPGGA.HHMMSS,&GPS.GPGGA.UTC_Day,&GPS.GPGGA.UTC_Month,&GPS.GPGGA.UTC_Year);
 80012d8:	4b62      	ldr	r3, [pc, #392]	; (8001464 <GPS_Process+0x330>)
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	4b62      	ldr	r3, [pc, #392]	; (8001468 <GPS_Process+0x334>)
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4b62      	ldr	r3, [pc, #392]	; (800146c <GPS_Process+0x338>)
 80012e2:	4a5d      	ldr	r2, [pc, #372]	; (8001458 <GPS_Process+0x324>)
 80012e4:	4962      	ldr	r1, [pc, #392]	; (8001470 <GPS_Process+0x33c>)
 80012e6:	69b8      	ldr	r0, [r7, #24]
 80012e8:	f012 fd00 	bl	8013cec <siscanf>
			GPS.GPGGA.UTC_Hour = (int)(GPS.GPGGA.HHMMSS/10000.f);
 80012ec:	4b4f      	ldr	r3, [pc, #316]	; (800142c <GPS_Process+0x2f8>)
 80012ee:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80012f2:	ed93 7a00 	vldr	s14, [r3]
 80012f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001474 <GPS_Process+0x340>
 80012fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	edc7 7a01 	vstr	s15, [r7, #4]
 8001306:	793a      	ldrb	r2, [r7, #4]
 8001308:	4b48      	ldr	r3, [pc, #288]	; (800142c <GPS_Process+0x2f8>)
 800130a:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			GPS.GPGGA.UTC_Min = (int)GPS.GPGGA.HHMMSS%10000/100.f;
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <GPS_Process+0x2f8>)
 8001310:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131c:	ee17 2a90 	vmov	r2, s15
 8001320:	4b55      	ldr	r3, [pc, #340]	; (8001478 <GPS_Process+0x344>)
 8001322:	fb83 1302 	smull	r1, r3, r3, r2
 8001326:	1319      	asrs	r1, r3, #12
 8001328:	17d3      	asrs	r3, r2, #31
 800132a:	1acb      	subs	r3, r1, r3
 800132c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001330:	fb01 f303 	mul.w	r3, r1, r3
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800147c <GPS_Process+0x348>
 8001342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134a:	edc7 7a01 	vstr	s15, [r7, #4]
 800134e:	793b      	ldrb	r3, [r7, #4]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <GPS_Process+0x2f8>)
 8001354:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			GPS.GPGGA.UTC_Sec = (int)GPS.GPGGA.HHMMSS%100;
 8001358:	4b34      	ldr	r3, [pc, #208]	; (800142c <GPS_Process+0x2f8>)
 800135a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001366:	ee17 2a90 	vmov	r2, s15
 800136a:	4b45      	ldr	r3, [pc, #276]	; (8001480 <GPS_Process+0x34c>)
 800136c:	fb83 1302 	smull	r1, r3, r3, r2
 8001370:	1159      	asrs	r1, r3, #5
 8001372:	17d3      	asrs	r3, r2, #31
 8001374:	1acb      	subs	r3, r1, r3
 8001376:	2164      	movs	r1, #100	; 0x64
 8001378:	fb01 f303 	mul.w	r3, r1, r3
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b2a      	ldr	r3, [pc, #168]	; (800142c <GPS_Process+0x2f8>)
 8001382:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
			GPS.GPGGA.YYYYMMDD = 10000*GPS.GPGGA.UTC_Year+100*GPS.GPGGA.UTC_Month+GPS.GPGGA.UTC_Day;
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <GPS_Process+0x2f8>)
 8001388:	f8b3 3466 	ldrh.w	r3, [r3, #1126]	; 0x466
 800138c:	461a      	mov	r2, r3
 800138e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001392:	fb03 f202 	mul.w	r2, r3, r2
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <GPS_Process+0x2f8>)
 8001398:	f893 3465 	ldrb.w	r3, [r3, #1125]	; 0x465
 800139c:	4619      	mov	r1, r3
 800139e:	2364      	movs	r3, #100	; 0x64
 80013a0:	fb03 f301 	mul.w	r3, r3, r1
 80013a4:	4413      	add	r3, r2
 80013a6:	4a21      	ldr	r2, [pc, #132]	; (800142c <GPS_Process+0x2f8>)
 80013a8:	f892 2464 	ldrb.w	r2, [r2, #1124]	; 0x464
 80013ac:	4413      	add	r3, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <GPS_Process+0x2f8>)
 80013b2:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
			if (GPS.GPGGA.YYYYMMDD < 19700000) GPS.GPGGA.YYYYMMDD = 0;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <GPS_Process+0x2f8>)
 80013b8:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 80013bc:	4a31      	ldr	r2, [pc, #196]	; (8001484 <GPS_Process+0x350>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d803      	bhi.n	80013ca <GPS_Process+0x296>
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <GPS_Process+0x2f8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
		}
		str3=strstr((char*)GPS.rxBuffer,"GNRMC,"); // GNRMC for where the speed is in the buffer
 80013ca:	492f      	ldr	r1, [pc, #188]	; (8001488 <GPS_Process+0x354>)
 80013cc:	4817      	ldr	r0, [pc, #92]	; (800142c <GPS_Process+0x2f8>)
 80013ce:	f012 fd0d 	bl	8013dec <strstr>
 80013d2:	6178      	str	r0, [r7, #20]
		if(str3!=NULL) {
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d066      	beq.n	80014a8 <GPS_Process+0x374>
			uint8_t speed[5];
			if (sscanf(str3,"GNRMC,%*f,%*c,%*f,%*c,%*f,%*c,%4s,",&speed) > 0) {
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	461a      	mov	r2, r3
 80013e0:	492a      	ldr	r1, [pc, #168]	; (800148c <GPS_Process+0x358>)
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f012 fc82 	bl	8013cec <siscanf>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dd52      	ble.n	8001494 <GPS_Process+0x360>
				GPS.GPGGA.Speed_KTS = atof(speed);
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4618      	mov	r0, r3
 80013f4:	f011 fda4 	bl	8012f40 <atof>
 80013f8:	ec53 2b10 	vmov	r2, r3, d0
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fbf2 	bl	8000be8 <__aeabi_d2f>
 8001404:	4602      	mov	r2, r0
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <GPS_Process+0x2f8>)
 8001408:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800140c:	601a      	str	r2, [r3, #0]
				GPS.GPGGA.Speed_KMH = 1.852f * GPS.GPGGA.Speed_KTS; // conversion from knots to km/h
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <GPS_Process+0x2f8>)
 8001410:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001490 <GPS_Process+0x35c>
 800141c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <GPS_Process+0x2f8>)
 8001422:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8001426:	edc3 7a00 	vstr	s15, [r3]
 800142a:	e03d      	b.n	80014a8 <GPS_Process+0x374>
 800142c:	200008b0 	.word	0x200008b0
 8001430:	080187c8 	.word	0x080187c8
 8001434:	20000cb8 	.word	0x20000cb8
 8001438:	20000cf0 	.word	0x20000cf0
 800143c:	20000cec 	.word	0x20000cec
 8001440:	20000ce8 	.word	0x20000ce8
 8001444:	20000ce4 	.word	0x20000ce4
 8001448:	20000ce0 	.word	0x20000ce0
 800144c:	20000cd4 	.word	0x20000cd4
 8001450:	20000cd0 	.word	0x20000cd0
 8001454:	20000cc0 	.word	0x20000cc0
 8001458:	20000d10 	.word	0x20000d10
 800145c:	080187d0 	.word	0x080187d0
 8001460:	080187f4 	.word	0x080187f4
 8001464:	20000d16 	.word	0x20000d16
 8001468:	20000d15 	.word	0x20000d15
 800146c:	20000d14 	.word	0x20000d14
 8001470:	080187fc 	.word	0x080187fc
 8001474:	461c4000 	.word	0x461c4000
 8001478:	68db8bad 	.word	0x68db8bad
 800147c:	42c80000 	.word	0x42c80000
 8001480:	51eb851f 	.word	0x51eb851f
 8001484:	012c991f 	.word	0x012c991f
 8001488:	08018810 	.word	0x08018810
 800148c:	08018818 	.word	0x08018818
 8001490:	3fed0e56 	.word	0x3fed0e56
			}
			else {
				GPS.GPGGA.Speed_KTS = -1;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <GPS_Process+0x3a8>)
 8001496:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <GPS_Process+0x3ac>)
 800149c:	601a      	str	r2, [r3, #0]
				GPS.GPGGA.Speed_KMH = -1;
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <GPS_Process+0x3a8>)
 80014a0:	f203 4354 	addw	r3, r3, #1108	; 0x454
 80014a4:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <GPS_Process+0x3ac>)
 80014a6:	601a      	str	r2, [r3, #0]
			}
		}
	}
	memset(GPS.rxBuffer,0,sizeof(GPS.rxBuffer)); // resets rxBuffer
 80014a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ac:	2100      	movs	r1, #0
 80014ae:	480b      	ldr	r0, [pc, #44]	; (80014dc <GPS_Process+0x3a8>)
 80014b0:	f011 fd74 	bl	8012f9c <memset>
	GPS.rxIndex=0;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <GPS_Process+0x3a8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	GPS.nmeaCounter=0;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <GPS_Process+0x3a8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	GPS.LastTime=HAL_GetTick();
 80014c4:	f004 fe5a 	bl	800617c <HAL_GetTick>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <GPS_Process+0x3a8>)
 80014cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014da:	bf00      	nop
 80014dc:	200008b0 	.word	0x200008b0
 80014e0:	bf800000 	.word	0xbf800000

080014e4 <CalcCrc>:

SPS30_t SPS30;

//##################################################################################################################
// Calculating checksum. Function provided in SPS30 datasheet
uint8_t CalcCrc(uint8_t data[2]) {
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	uint8_t crc = 0xFF;
 80014ec:	23ff      	movs	r3, #255	; 0xff
 80014ee:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 2; i++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	e020      	b.n	8001538 <CalcCrc+0x54>
	crc ^= data[i];
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	781a      	ldrb	r2, [r3, #0]
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	4053      	eors	r3, r2
 8001502:	75fb      	strb	r3, [r7, #23]
	for(uint8_t bit = 8; bit > 0; --bit) {
 8001504:	2308      	movs	r3, #8
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	e010      	b.n	800152c <CalcCrc+0x48>
	  if(crc & 0x80) {
 800150a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800150e:	2b00      	cmp	r3, #0
 8001510:	da06      	bge.n	8001520 <CalcCrc+0x3c>
	  crc = (crc << 1) ^ 0x31u;
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800151c:	75fb      	strb	r3, [r7, #23]
 800151e:	e002      	b.n	8001526 <CalcCrc+0x42>
	  } else {
		crc = (crc << 1);
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	75fb      	strb	r3, [r7, #23]
	for(uint8_t bit = 8; bit > 0; --bit) {
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	3b01      	subs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1eb      	bne.n	800150a <CalcCrc+0x26>
	for(int i = 0; i < 2; i++) {
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	3301      	adds	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b01      	cmp	r3, #1
 800153c:	dddb      	ble.n	80014f6 <CalcCrc+0x12>
	   }
	 }
	}
	return crc;
 800153e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001540:	4618      	mov	r0, r3
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <SPS30_start_measurement>:

//##################################################################################################################
void SPS30_start_measurement(void){
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af02      	add	r7, sp, #8
	uint8_t arg[2] = {0x03, 0x00};
 8001552:	2303      	movs	r3, #3
 8001554:	81bb      	strh	r3, [r7, #12]
	uint8_t txBuf[5] = {0x00, 0x10, 0x03, 0x00, CalcCrc(arg)};
 8001556:	2300      	movs	r3, #0
 8001558:	713b      	strb	r3, [r7, #4]
 800155a:	2310      	movs	r3, #16
 800155c:	717b      	strb	r3, [r7, #5]
 800155e:	2303      	movs	r3, #3
 8001560:	71bb      	strb	r3, [r7, #6]
 8001562:	2300      	movs	r3, #0
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ffba 	bl	80014e4 <CalcCrc>
 8001570:	4603      	mov	r3, r0
 8001572:	723b      	strb	r3, [r7, #8]
	memset(&SPS30.spsData,0,sizeof(SPS30.spsData));
 8001574:	2228      	movs	r2, #40	; 0x28
 8001576:	2100      	movs	r1, #0
 8001578:	4808      	ldr	r0, [pc, #32]	; (800159c <SPS30_start_measurement+0x50>)
 800157a:	f011 fd0f 	bl	8012f9c <memset>
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 5, HAL_MAX_DELAY);
 800157e:	1d3a      	adds	r2, r7, #4
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2305      	movs	r3, #5
 8001588:	21d2      	movs	r1, #210	; 0xd2
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <SPS30_start_measurement+0x54>)
 800158c:	f006 fa00 	bl	8007990 <HAL_I2C_Master_Transmit>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]

}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000d20 	.word	0x20000d20
 80015a0:	20000db0 	.word	0x20000db0

080015a4 <SPS30_read_data>:
	uint8_t txBuf[2] = {0x01, 0x04};
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);
}

//##################################################################################################################
uint8_t SPS30_read_data(){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b096      	sub	sp, #88	; 0x58
 80015a8:	af02      	add	r7, sp, #8
	uint8_t txBuf[2] = {0x03, 0x00};
 80015aa:	2303      	movs	r3, #3
 80015ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	uint8_t rxBuf[60];
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);
 80015b0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2302      	movs	r3, #2
 80015bc:	21d2      	movs	r1, #210	; 0xd2
 80015be:	483c      	ldr	r0, [pc, #240]	; (80016b0 <SPS30_read_data+0x10c>)
 80015c0:	f006 f9e6 	bl	8007990 <HAL_I2C_Master_Transmit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	status = HAL_I2C_Master_Receive(&_SPS30_I2C, (_SPS30_addr<<1), &rxBuf, sizeof(rxBuf), HAL_MAX_DELAY);
 80015ca:	f107 0208 	add.w	r2, r7, #8
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	233c      	movs	r3, #60	; 0x3c
 80015d6:	21d2      	movs	r1, #210	; 0xd2
 80015d8:	4835      	ldr	r0, [pc, #212]	; (80016b0 <SPS30_read_data+0x10c>)
 80015da:	f006 fad7 	bl	8007b8c <HAL_I2C_Master_Receive>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for (int i=0; i<10; i++) { // 60 register buffer with 6 registers per float value
 80015e4:	2300      	movs	r3, #0
 80015e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015e8:	e04b      	b.n	8001682 <SPS30_read_data+0xde>
		uint8_t b1 = rxBuf[i*6];
 80015ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80015f8:	4413      	add	r3, r2
 80015fa:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80015fe:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		uint8_t b2 = rxBuf[i*6+1]; // rxBuf[i*6+2] is checksum byte
 8001602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	3301      	adds	r3, #1
 800160e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001612:	4413      	add	r3, r2
 8001614:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001618:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		uint8_t b3 = rxBuf[i*6+3];
 800161c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	3303      	adds	r3, #3
 8001628:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800162c:	4413      	add	r3, r2
 800162e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001632:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		uint8_t b4 = rxBuf[i*6+4]; // rxBuf[i*6+5] is checksum byte
 8001636:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	3304      	adds	r3, #4
 8001642:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001646:	4413      	add	r3, r2
 8001648:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800164c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		uint32_t value = (b1<<24)|(b2<<16)|(b3<<8)|(b4<<0); // merge bytes in correct order
 8001650:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001654:	061a      	lsls	r2, r3, #24
 8001656:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800165a:	041b      	lsls	r3, r3, #16
 800165c:	431a      	orrs	r2, r3
 800165e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	431a      	orrs	r2, r3
 8001666:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800166a:	4313      	orrs	r3, r2
 800166c:	607b      	str	r3, [r7, #4]
		SPS30.spsData[i] = *(float*)&value; // convert to float
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4910      	ldr	r1, [pc, #64]	; (80016b4 <SPS30_read_data+0x110>)
 8001674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	601a      	str	r2, [r3, #0]
	for (int i=0; i<10; i++) { // 60 register buffer with 6 registers per float value
 800167c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800167e:	3301      	adds	r3, #1
 8001680:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001684:	2b09      	cmp	r3, #9
 8001686:	ddb0      	ble.n	80015ea <SPS30_read_data+0x46>
	}
	if (status == HAL_OK && SPS30.spsData[1] > 0.0f) return 1;
 8001688:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <SPS30_read_data+0x100>
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <SPS30_read_data+0x110>)
 8001692:	edd3 7a01 	vldr	s15, [r3, #4]
 8001696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169e:	dd01      	ble.n	80016a4 <SPS30_read_data+0x100>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <SPS30_read_data+0x102>
	return 0;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3750      	adds	r7, #80	; 0x50
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000db0 	.word	0x20000db0
 80016b4:	20000d20 	.word	0x20000d20

080016b8 <SPS30_clean_fan>:
	status = HAL_I2C_Master_Receive(&_SPS30_I2C, (_SPS30_addr<<1), &rxBuf, sizeof(rxBuf), HAL_MAX_DELAY);
	return rxBuf[1]; // 0x01 if data is ready, 0x00 if not
 }

//##################################################################################################################
void SPS30_clean_fan(void){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af02      	add	r7, sp, #8
	uint8_t txBuf[2] = {0x56, 0x07};
 80016be:	f240 7356 	movw	r3, #1878	; 0x756
 80016c2:	80bb      	strh	r3, [r7, #4]
 	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);
 80016c4:	1d3a      	adds	r2, r7, #4
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2302      	movs	r3, #2
 80016ce:	21d2      	movs	r1, #210	; 0xd2
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <SPS30_clean_fan+0x2c>)
 80016d2:	f006 f95d 	bl	8007990 <HAL_I2C_Master_Transmit>
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000db0 	.word	0x20000db0

080016e8 <SPS30_read_serialnumber>:
 	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);

}

//##################################################################################################################
void SPS30_read_serialnumber(void){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b092      	sub	sp, #72	; 0x48
 80016ec:	af02      	add	r7, sp, #8
	uint8_t txBuf[2] = {0xD0, 0x33};
 80016ee:	f243 33d0 	movw	r3, #13264	; 0x33d0
 80016f2:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t rxBuf[48];
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);
 80016f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2302      	movs	r3, #2
 8001700:	21d2      	movs	r1, #210	; 0xd2
 8001702:	4833      	ldr	r0, [pc, #204]	; (80017d0 <SPS30_read_serialnumber+0xe8>)
 8001704:	f006 f944 	bl	8007990 <HAL_I2C_Master_Transmit>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	status = HAL_I2C_Master_Receive(&_SPS30_I2C, (_SPS30_addr<<1), &rxBuf, sizeof(rxBuf), HAL_MAX_DELAY);
 800170e:	1d3a      	adds	r2, r7, #4
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2330      	movs	r3, #48	; 0x30
 8001718:	21d2      	movs	r1, #210	; 0xd2
 800171a:	482d      	ldr	r0, [pc, #180]	; (80017d0 <SPS30_read_serialnumber+0xe8>)
 800171c:	f006 fa36 	bl	8007b8c <HAL_I2C_Master_Receive>
 8001720:	4603      	mov	r3, r0
 8001722:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (status == HAL_ERROR) {
 8001726:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800172a:	2b01      	cmp	r3, #1
 800172c:	d104      	bne.n	8001738 <SPS30_read_serialnumber+0x50>
		sprintf(SPS30.serial, "AQ-SENSOR");
 800172e:	4929      	ldr	r1, [pc, #164]	; (80017d4 <SPS30_read_serialnumber+0xec>)
 8001730:	4829      	ldr	r0, [pc, #164]	; (80017d8 <SPS30_read_serialnumber+0xf0>)
 8001732:	f012 fabb 	bl	8013cac <siprintf>
		return;
 8001736:	e047      	b.n	80017c8 <SPS30_read_serialnumber+0xe0>
	}
	uint8_t k=0;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for (int i=0; i<sizeof(rxBuf); i++) { // every 3 bytes there is a checksum
 800173e:	2300      	movs	r3, #0
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
 8001742:	e03e      	b.n	80017c2 <SPS30_read_serialnumber+0xda>
		if (i%3==0) {
 8001744:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001746:	4b25      	ldr	r3, [pc, #148]	; (80017dc <SPS30_read_serialnumber+0xf4>)
 8001748:	fb83 3201 	smull	r3, r2, r3, r1
 800174c:	17cb      	asrs	r3, r1, #31
 800174e:	1ad2      	subs	r2, r2, r3
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	1aca      	subs	r2, r1, r3
 8001758:	2a00      	cmp	r2, #0
 800175a:	d11c      	bne.n	8001796 <SPS30_read_serialnumber+0xae>
			uint8_t arg[2] = {rxBuf[i],rxBuf[i+1]};
 800175c:	1d3a      	adds	r2, r7, #4
 800175e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	703b      	strb	r3, [r7, #0]
 8001766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001768:	3301      	adds	r3, #1
 800176a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800176e:	4413      	add	r3, r2
 8001770:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001774:	707b      	strb	r3, [r7, #1]
			if (CalcCrc(arg) != rxBuf[i+2])
 8001776:	463b      	mov	r3, r7
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff feb3 	bl	80014e4 <CalcCrc>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001784:	3302      	adds	r3, #2
 8001786:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800178a:	440b      	add	r3, r1
 800178c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001790:	429a      	cmp	r2, r3
 8001792:	d013      	beq.n	80017bc <SPS30_read_serialnumber+0xd4>
				return 0;
 8001794:	e018      	b.n	80017c8 <SPS30_read_serialnumber+0xe0>
		} else {
		SPS30.serial[k] = rxBuf[i-1];
 8001796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001798:	1e5a      	subs	r2, r3, #1
 800179a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800179e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80017a2:	440a      	add	r2, r1
 80017a4:	f812 1c3c 	ldrb.w	r1, [r2, #-60]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <SPS30_read_serialnumber+0xf8>)
 80017aa:	4413      	add	r3, r2
 80017ac:	460a      	mov	r2, r1
 80017ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		k++;
 80017b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017b6:	3301      	adds	r3, #1
 80017b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for (int i=0; i<sizeof(rxBuf); i++) { // every 3 bytes there is a checksum
 80017bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017be:	3301      	adds	r3, #1
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80017c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c4:	2b2f      	cmp	r3, #47	; 0x2f
 80017c6:	d9bd      	bls.n	8001744 <SPS30_read_serialnumber+0x5c>
		}
	}
 }
 80017c8:	3740      	adds	r7, #64	; 0x40
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000db0 	.word	0x20000db0
 80017d4:	0801883c 	.word	0x0801883c
 80017d8:	20000d48 	.word	0x20000d48
 80017dc:	55555556 	.word	0x55555556
 80017e0:	20000d20 	.word	0x20000d20

080017e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ea:	463b      	mov	r3, r7
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <MX_ADC1_Init+0x98>)
 80017f8:	4a21      	ldr	r2, [pc, #132]	; (8001880 <MX_ADC1_Init+0x9c>)
 80017fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_ADC1_Init+0x98>)
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <MX_ADC1_Init+0x98>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001808:	4b1c      	ldr	r3, [pc, #112]	; (800187c <MX_ADC1_Init+0x98>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <MX_ADC1_Init+0x98>)
 8001810:	2200      	movs	r2, #0
 8001812:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_ADC1_Init+0x98>)
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_ADC1_Init+0x98>)
 800181e:	2200      	movs	r2, #0
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_ADC1_Init+0x98>)
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <MX_ADC1_Init+0xa0>)
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_ADC1_Init+0x98>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_ADC1_Init+0x98>)
 8001830:	2201      	movs	r2, #1
 8001832:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_ADC1_Init+0x98>)
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_ADC1_Init+0x98>)
 800183e:	2201      	movs	r2, #1
 8001840:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <MX_ADC1_Init+0x98>)
 8001844:	f004 fcca 	bl	80061dc <HAL_ADC_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800184e:	f001 fc15 	bl	800307c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001856:	2301      	movs	r3, #1
 8001858:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800185e:	463b      	mov	r3, r7
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	; (800187c <MX_ADC1_Init+0x98>)
 8001864:	f004 fe68 	bl	8006538 <HAL_ADC_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800186e:	f001 fc05 	bl	800307c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000d68 	.word	0x20000d68
 8001880:	40012000 	.word	0x40012000
 8001884:	0f000001 	.word	0x0f000001

08001888 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_ADC_MspInit+0x7c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d127      	bne.n	80018fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a15      	ldr	r2, [pc, #84]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80018e2:	2313      	movs	r3, #19
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e6:	2303      	movs	r3, #3
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_ADC_MspInit+0x84>)
 80018f6:	f005 fd51 	bl	800739c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40012000 	.word	0x40012000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000

08001910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_DMA_Init+0x3c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <MX_DMA_Init+0x3c>)
 8001920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_DMA_Init+0x3c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	203a      	movs	r0, #58	; 0x3a
 8001938:	f005 f8f7 	bl	8006b2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800193c:	203a      	movs	r0, #58	; 0x3a
 800193e:	f005 f910 	bl	8006b62 <HAL_NVIC_EnableIRQ>

}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800

08001950 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <MX_GPIO_Init+0x138>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a46      	ldr	r2, [pc, #280]	; (8001a88 <MX_GPIO_Init+0x138>)
 8001970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <MX_GPIO_Init+0x138>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <MX_GPIO_Init+0x138>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a3f      	ldr	r2, [pc, #252]	; (8001a88 <MX_GPIO_Init+0x138>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <MX_GPIO_Init+0x138>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <MX_GPIO_Init+0x138>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <MX_GPIO_Init+0x138>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <MX_GPIO_Init+0x138>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b32      	ldr	r3, [pc, #200]	; (8001a88 <MX_GPIO_Init+0x138>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <MX_GPIO_Init+0x138>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <MX_GPIO_Init+0x138>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_NRST_GPIO_Port, GPS_NRST_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2120      	movs	r1, #32
 80019da:	482c      	ldr	r0, [pc, #176]	; (8001a8c <MX_GPIO_Init+0x13c>)
 80019dc:	f005 fe7a 	bl	80076d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NCS_GPIO_Port, SPI2_NCS_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e6:	482a      	ldr	r0, [pc, #168]	; (8001a90 <MX_GPIO_Init+0x140>)
 80019e8:	f005 fe74 	bl	80076d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BT_RESET_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80019f2:	4828      	ldr	r0, [pc, #160]	; (8001a94 <MX_GPIO_Init+0x144>)
 80019f4:	f005 fe6e 	bl	80076d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 80019f8:	2304      	movs	r3, #4
 80019fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <MX_GPIO_Init+0x148>)
 80019fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4820      	ldr	r0, [pc, #128]	; (8001a8c <MX_GPIO_Init+0x13c>)
 8001a0c:	f005 fcc6 	bl	800739c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8001a10:	2310      	movs	r3, #16
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	481a      	ldr	r0, [pc, #104]	; (8001a8c <MX_GPIO_Init+0x13c>)
 8001a24:	f005 fcba 	bl	800739c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_NRST_Pin;
 8001a28:	2320      	movs	r3, #32
 8001a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_NRST_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4813      	ldr	r0, [pc, #76]	; (8001a8c <MX_GPIO_Init+0x13c>)
 8001a40:	f005 fcac 	bl	800739c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NCS_Pin;
 8001a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NCS_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_GPIO_Init+0x140>)
 8001a5e:	f005 fc9d 	bl	800739c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BT_RESET_Pin|SD_CS_Pin;
 8001a62:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4806      	ldr	r0, [pc, #24]	; (8001a94 <MX_GPIO_Init+0x144>)
 8001a7c:	f005 fc8e 	bl	800739c <HAL_GPIO_Init>

}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020000 	.word	0x40020000
 8001a98:	10110000 	.word	0x10110000

08001a9c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <MX_I2C1_Init+0x54>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <MX_I2C1_Init+0x58>)
 8001aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001abe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ada:	f005 fe15 	bl	8007708 <HAL_I2C_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ae4:	f001 faca 	bl	800307c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000e04 	.word	0x20000e04
 8001af0:	40005400 	.word	0x40005400
 8001af4:	000186a0 	.word	0x000186a0

08001af8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001afe:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <MX_I2C2_Init+0x54>)
 8001b00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b04:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <MX_I2C2_Init+0x58>)
 8001b06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b34:	4804      	ldr	r0, [pc, #16]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b36:	f005 fde7 	bl	8007708 <HAL_I2C_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b40:	f001 fa9c 	bl	800307c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000db0 	.word	0x20000db0
 8001b4c:	40005800 	.word	0x40005800
 8001b50:	000186a0 	.word	0x000186a0

08001b54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	; 0x30
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a32      	ldr	r2, [pc, #200]	; (8001c3c <HAL_I2C_MspInit+0xe8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12c      	bne.n	8001bd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a30      	ldr	r2, [pc, #192]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b92:	23c0      	movs	r3, #192	; 0xc0
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b96:	2312      	movs	r3, #18
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4825      	ldr	r0, [pc, #148]	; (8001c44 <HAL_I2C_MspInit+0xf0>)
 8001bae:	f005 fbf5 	bl	800739c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001bce:	e031      	b.n	8001c34 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <HAL_I2C_MspInit+0xf4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12c      	bne.n	8001c34 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bf6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfc:	2312      	movs	r3, #18
 8001bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	4619      	mov	r1, r3
 8001c12:	480c      	ldr	r0, [pc, #48]	; (8001c44 <HAL_I2C_MspInit+0xf0>)
 8001c14:	f005 fbc2 	bl	800739c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001c22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	bf00      	nop
 8001c36:	3730      	adds	r7, #48	; 0x30
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40005400 	.word	0x40005400
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40005800 	.word	0x40005800

08001c4c <HAL_UART_RxCpltCallback>:
extern uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr);

static u8g2_t u8g2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	GPS_CallBack();
 8001c54:	f7ff fa3a 	bl	80010cc <GPS_CallBack>
//	HAL_UART_Receive_DMA(&huart1, readBuf, 8);
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <screen_format>:

char * screen_format(int val) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	if (val < 99 && val >= -9) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b62      	cmp	r3, #98	; 0x62
 8001c6c:	dc12      	bgt.n	8001c94 <screen_format+0x34>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f113 0f09 	cmn.w	r3, #9
 8001c74:	db0e      	blt.n	8001c94 <screen_format+0x34>
		if (val <= 9) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	dc05      	bgt.n	8001c88 <screen_format+0x28>
			sprintf(screen_str, " %d", val);
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	490a      	ldr	r1, [pc, #40]	; (8001ca8 <screen_format+0x48>)
 8001c80:	480a      	ldr	r0, [pc, #40]	; (8001cac <screen_format+0x4c>)
 8001c82:	f012 f813 	bl	8013cac <siprintf>
		if (val <= 9) {
 8001c86:	e00a      	b.n	8001c9e <screen_format+0x3e>
		} else {
			sprintf(screen_str, "%d", val);
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4909      	ldr	r1, [pc, #36]	; (8001cb0 <screen_format+0x50>)
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <screen_format+0x4c>)
 8001c8e:	f012 f80d 	bl	8013cac <siprintf>
		if (val <= 9) {
 8001c92:	e004      	b.n	8001c9e <screen_format+0x3e>
		}

	} else {
		sprintf(screen_str, "%d", 99);
 8001c94:	2263      	movs	r2, #99	; 0x63
 8001c96:	4906      	ldr	r1, [pc, #24]	; (8001cb0 <screen_format+0x50>)
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <screen_format+0x4c>)
 8001c9a:	f012 f807 	bl	8013cac <siprintf>
	}

	return screen_str;
 8001c9e:	4b03      	ldr	r3, [pc, #12]	; (8001cac <screen_format+0x4c>)
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	08018848 	.word	0x08018848
 8001cac:	200013a0 	.word	0x200013a0
 8001cb0:	0801884c 	.word	0x0801884c

08001cb4 <Linear>:

int Linear(int AQIhigh, int AQIlow, float Conchigh, float Conclow, float Conc) {
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6178      	str	r0, [r7, #20]
 8001cbc:	6139      	str	r1, [r7, #16]
 8001cbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cc6:	ed87 1a01 	vstr	s2, [r7, #4]
	return ((Conc-Conclow)/(Conchigh-Conclow))*(AQIhigh-AQIlow)+AQIlow;
 8001cca:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cce:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d0a:	ee17 3a90 	vmov	r3, s15
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	0000      	movs	r0, r0
 8001d1c:	0000      	movs	r0, r0
	...

08001d20 <AQIPM25>:


int AQIPM25(float c) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	ed87 0a01 	vstr	s0, [r7, #4]

	if (c>=0 && c<12.1)
 8001d2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	db16      	blt.n	8001d66 <AQIPM25+0x46>
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7fe fc05 	bl	8000548 <__aeabi_f2d>
 8001d3e:	a35a      	add	r3, pc, #360	; (adr r3, 8001ea8 <AQIPM25+0x188>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe feca 	bl	8000adc <__aeabi_dcmplt>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <AQIPM25+0x46>
	{
		return(Linear(50,0,12,0,c));
 8001d4e:	ed97 1a01 	vldr	s2, [r7, #4]
 8001d52:	eddf 0a57 	vldr	s1, [pc, #348]	; 8001eb0 <AQIPM25+0x190>
 8001d56:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2032      	movs	r0, #50	; 0x32
 8001d5e:	f7ff ffa9 	bl	8001cb4 <Linear>
 8001d62:	4603      	mov	r3, r0
 8001d64:	e09c      	b.n	8001ea0 <AQIPM25+0x180>
	}
	else if (c>=12.1 && c<35.5)
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe fbee 	bl	8000548 <__aeabi_f2d>
 8001d6c:	a34e      	add	r3, pc, #312	; (adr r3, 8001ea8 <AQIPM25+0x188>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fec7 	bl	8000b04 <__aeabi_dcmpge>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d014      	beq.n	8001da6 <AQIPM25+0x86>
 8001d7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d80:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001eb4 <AQIPM25+0x194>
 8001d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8c:	d50b      	bpl.n	8001da6 <AQIPM25+0x86>
	{
		return(Linear(100,51,35.4,12.1,c));
 8001d8e:	ed97 1a01 	vldr	s2, [r7, #4]
 8001d92:	eddf 0a49 	vldr	s1, [pc, #292]	; 8001eb8 <AQIPM25+0x198>
 8001d96:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8001ebc <AQIPM25+0x19c>
 8001d9a:	2133      	movs	r1, #51	; 0x33
 8001d9c:	2064      	movs	r0, #100	; 0x64
 8001d9e:	f7ff ff89 	bl	8001cb4 <Linear>
 8001da2:	4603      	mov	r3, r0
 8001da4:	e07c      	b.n	8001ea0 <AQIPM25+0x180>
	}
	else if (c>=35.5 && c<55.5)
 8001da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001daa:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001eb4 <AQIPM25+0x194>
 8001dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db6:	db14      	blt.n	8001de2 <AQIPM25+0xc2>
 8001db8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dbc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001ec0 <AQIPM25+0x1a0>
 8001dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	d50b      	bpl.n	8001de2 <AQIPM25+0xc2>
	{
		return(Linear(150,101,55.4,35.5,c));
 8001dca:	ed97 1a01 	vldr	s2, [r7, #4]
 8001dce:	eddf 0a39 	vldr	s1, [pc, #228]	; 8001eb4 <AQIPM25+0x194>
 8001dd2:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001ec4 <AQIPM25+0x1a4>
 8001dd6:	2165      	movs	r1, #101	; 0x65
 8001dd8:	2096      	movs	r0, #150	; 0x96
 8001dda:	f7ff ff6b 	bl	8001cb4 <Linear>
 8001dde:	4603      	mov	r3, r0
 8001de0:	e05e      	b.n	8001ea0 <AQIPM25+0x180>
	}
	else if (c>=55.5 && c<150.5)
 8001de2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001ec0 <AQIPM25+0x1a0>
 8001dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	db14      	blt.n	8001e1e <AQIPM25+0xfe>
 8001df4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001ec8 <AQIPM25+0x1a8>
 8001dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	d50b      	bpl.n	8001e1e <AQIPM25+0xfe>
	{
		return(Linear(200,151,150.4,55.5,c));
 8001e06:	ed97 1a01 	vldr	s2, [r7, #4]
 8001e0a:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8001ec0 <AQIPM25+0x1a0>
 8001e0e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8001ecc <AQIPM25+0x1ac>
 8001e12:	2197      	movs	r1, #151	; 0x97
 8001e14:	20c8      	movs	r0, #200	; 0xc8
 8001e16:	f7ff ff4d 	bl	8001cb4 <Linear>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	e040      	b.n	8001ea0 <AQIPM25+0x180>
	}
	else if (c>=150.5 && c<250.5)
 8001e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e22:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001ec8 <AQIPM25+0x1a8>
 8001e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	db15      	blt.n	8001e5c <AQIPM25+0x13c>
 8001e30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e34:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001ed0 <AQIPM25+0x1b0>
 8001e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e40:	d50c      	bpl.n	8001e5c <AQIPM25+0x13c>
	{
		return(Linear(300,201,250.4,150.5,c));
 8001e42:	ed97 1a01 	vldr	s2, [r7, #4]
 8001e46:	eddf 0a20 	vldr	s1, [pc, #128]	; 8001ec8 <AQIPM25+0x1a8>
 8001e4a:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001ed4 <AQIPM25+0x1b4>
 8001e4e:	21c9      	movs	r1, #201	; 0xc9
 8001e50:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e54:	f7ff ff2e 	bl	8001cb4 <Linear>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	e021      	b.n	8001ea0 <AQIPM25+0x180>
	}
	else if (c>=250.5 && c<500)
 8001e5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e60:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001ed0 <AQIPM25+0x1b0>
 8001e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6c:	db16      	blt.n	8001e9c <AQIPM25+0x17c>
 8001e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e72:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001ed8 <AQIPM25+0x1b8>
 8001e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	d50d      	bpl.n	8001e9c <AQIPM25+0x17c>
	{
		return(Linear(500,301,500.4,250.5,c));
 8001e80:	ed97 1a01 	vldr	s2, [r7, #4]
 8001e84:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001ed0 <AQIPM25+0x1b0>
 8001e88:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001edc <AQIPM25+0x1bc>
 8001e8c:	f240 112d 	movw	r1, #301	; 0x12d
 8001e90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e94:	f7ff ff0e 	bl	8001cb4 <Linear>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	e001      	b.n	8001ea0 <AQIPM25+0x180>
	}
	else return 500;
 8001e9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	33333333 	.word	0x33333333
 8001eac:	40283333 	.word	0x40283333
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	420e0000 	.word	0x420e0000
 8001eb8:	4141999a 	.word	0x4141999a
 8001ebc:	420d999a 	.word	0x420d999a
 8001ec0:	425e0000 	.word	0x425e0000
 8001ec4:	425d999a 	.word	0x425d999a
 8001ec8:	43168000 	.word	0x43168000
 8001ecc:	43166666 	.word	0x43166666
 8001ed0:	437a8000 	.word	0x437a8000
 8001ed4:	437a6666 	.word	0x437a6666
 8001ed8:	43fa0000 	.word	0x43fa0000
 8001edc:	43fa3333 	.word	0x43fa3333

08001ee0 <gps_dots>:

void gps_dots(int gps_satellites, int fix) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
	if (gps_satellites > 0) u8g2_DrawRBox(&u8g2, 126, 11, 2, 2, 1); // any fix = 1 bar
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	dd09      	ble.n	8001f04 <gps_dots+0x24>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2302      	movs	r3, #2
 8001efa:	220b      	movs	r2, #11
 8001efc:	217e      	movs	r1, #126	; 0x7e
 8001efe:	4817      	ldr	r0, [pc, #92]	; (8001f5c <gps_dots+0x7c>)
 8001f00:	f001 fefa 	bl	8003cf8 <u8g2_DrawRBox>
	if (gps_satellites > 3) u8g2_DrawRBox(&u8g2, 123, 11, 2, 4, 1); // indoors I typically have 4-5 sats
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	dd09      	ble.n	8001f1e <gps_dots+0x3e>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	2304      	movs	r3, #4
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2302      	movs	r3, #2
 8001f14:	220b      	movs	r2, #11
 8001f16:	217b      	movs	r1, #123	; 0x7b
 8001f18:	4810      	ldr	r0, [pc, #64]	; (8001f5c <gps_dots+0x7c>)
 8001f1a:	f001 feed 	bl	8003cf8 <u8g2_DrawRBox>
	if (gps_satellites > 4) u8g2_DrawRBox(&u8g2, 120, 11, 2, 6, 1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	dd09      	ble.n	8001f38 <gps_dots+0x58>
 8001f24:	2301      	movs	r3, #1
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	2306      	movs	r3, #6
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	220b      	movs	r2, #11
 8001f30:	2178      	movs	r1, #120	; 0x78
 8001f32:	480a      	ldr	r0, [pc, #40]	; (8001f5c <gps_dots+0x7c>)
 8001f34:	f001 fee0 	bl	8003cf8 <u8g2_DrawRBox>
	if (gps_satellites > 5) u8g2_DrawRBox(&u8g2, 117, 11, 2, 8, 1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	dd09      	ble.n	8001f52 <gps_dots+0x72>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	2308      	movs	r3, #8
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2302      	movs	r3, #2
 8001f48:	220b      	movs	r2, #11
 8001f4a:	2175      	movs	r1, #117	; 0x75
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <gps_dots+0x7c>)
 8001f4e:	f001 fed3 	bl	8003cf8 <u8g2_DrawRBox>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000039c 	.word	0x2000039c

08001f60 <battery_dots_vert>:

void battery_dots_vert(float voltage) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage < 3.2) // then battery has ~30min remaining
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe faec 	bl	8000548 <__aeabi_f2d>
 8001f70:	a349      	add	r3, pc, #292	; (adr r3, 8002098 <battery_dots_vert+0x138>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fdb1 	bl	8000adc <__aeabi_dcmplt>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <battery_dots_vert+0x2e>
		if (counter%2 == 0) return;
 8001f80:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <battery_dots_vert+0x160>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d07d      	beq.n	800208a <battery_dots_vert+0x12a>
    u8g2_DrawRFrame(&u8g2, 117-0, 0, 11, 8, 1);
 8001f8e:	2301      	movs	r3, #1
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	2308      	movs	r3, #8
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	230b      	movs	r3, #11
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2175      	movs	r1, #117	; 0x75
 8001f9c:	4849      	ldr	r0, [pc, #292]	; (80020c4 <battery_dots_vert+0x164>)
 8001f9e:	f001 ff5b 	bl	8003e58 <u8g2_DrawRFrame>
    u8g2_DrawRBox(&u8g2, 116-0, 3, 2, 2, 1);
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2302      	movs	r3, #2
 8001fac:	2203      	movs	r2, #3
 8001fae:	2174      	movs	r1, #116	; 0x74
 8001fb0:	4844      	ldr	r0, [pc, #272]	; (80020c4 <battery_dots_vert+0x164>)
 8001fb2:	f001 fea1 	bl	8003cf8 <u8g2_DrawRBox>
	if (voltage > 3.2) u8g2_DrawRBox(&u8g2, 127-0, 2, 2, 4, 1); // -62
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7fe fac6 	bl	8000548 <__aeabi_f2d>
 8001fbc:	a336      	add	r3, pc, #216	; (adr r3, 8002098 <battery_dots_vert+0x138>)
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	f7fe fda9 	bl	8000b18 <__aeabi_dcmpgt>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d009      	beq.n	8001fe0 <battery_dots_vert+0x80>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	217f      	movs	r1, #127	; 0x7f
 8001fda:	483a      	ldr	r0, [pc, #232]	; (80020c4 <battery_dots_vert+0x164>)
 8001fdc:	f001 fe8c 	bl	8003cf8 <u8g2_DrawRBox>
	if (voltage > 3.35) u8g2_DrawRBox(&u8g2, 125-0, 2, 2, 4, 1);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7fe fab1 	bl	8000548 <__aeabi_f2d>
 8001fe6:	a32e      	add	r3, pc, #184	; (adr r3, 80020a0 <battery_dots_vert+0x140>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fd94 	bl	8000b18 <__aeabi_dcmpgt>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <battery_dots_vert+0xaa>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2302      	movs	r3, #2
 8002000:	2202      	movs	r2, #2
 8002002:	217d      	movs	r1, #125	; 0x7d
 8002004:	482f      	ldr	r0, [pc, #188]	; (80020c4 <battery_dots_vert+0x164>)
 8002006:	f001 fe77 	bl	8003cf8 <u8g2_DrawRBox>
	if (voltage > 3.45) u8g2_DrawRBox(&u8g2, 123-0, 2, 2, 4, 1);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fa9c 	bl	8000548 <__aeabi_f2d>
 8002010:	a325      	add	r3, pc, #148	; (adr r3, 80020a8 <battery_dots_vert+0x148>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe fd7f 	bl	8000b18 <__aeabi_dcmpgt>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <battery_dots_vert+0xd4>
 8002020:	2301      	movs	r3, #1
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2304      	movs	r3, #4
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2302      	movs	r3, #2
 800202a:	2202      	movs	r2, #2
 800202c:	217b      	movs	r1, #123	; 0x7b
 800202e:	4825      	ldr	r0, [pc, #148]	; (80020c4 <battery_dots_vert+0x164>)
 8002030:	f001 fe62 	bl	8003cf8 <u8g2_DrawRBox>
	if (voltage > 3.55) u8g2_DrawRBox(&u8g2, 121-0, 2, 2, 4, 1);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7fe fa87 	bl	8000548 <__aeabi_f2d>
 800203a:	a31d      	add	r3, pc, #116	; (adr r3, 80020b0 <battery_dots_vert+0x150>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fd6a 	bl	8000b18 <__aeabi_dcmpgt>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <battery_dots_vert+0xfe>
 800204a:	2301      	movs	r3, #1
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	2304      	movs	r3, #4
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2302      	movs	r3, #2
 8002054:	2202      	movs	r2, #2
 8002056:	2179      	movs	r1, #121	; 0x79
 8002058:	481a      	ldr	r0, [pc, #104]	; (80020c4 <battery_dots_vert+0x164>)
 800205a:	f001 fe4d 	bl	8003cf8 <u8g2_DrawRBox>
	if (voltage > 3.65) u8g2_DrawRBox(&u8g2, 119-0, 2, 2, 4, 1);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe fa72 	bl	8000548 <__aeabi_f2d>
 8002064:	a314      	add	r3, pc, #80	; (adr r3, 80020b8 <battery_dots_vert+0x158>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	f7fe fd55 	bl	8000b18 <__aeabi_dcmpgt>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00b      	beq.n	800208c <battery_dots_vert+0x12c>
 8002074:	2301      	movs	r3, #1
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	2304      	movs	r3, #4
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	2302      	movs	r3, #2
 800207e:	2202      	movs	r2, #2
 8002080:	2177      	movs	r1, #119	; 0x77
 8002082:	4810      	ldr	r0, [pc, #64]	; (80020c4 <battery_dots_vert+0x164>)
 8002084:	f001 fe38 	bl	8003cf8 <u8g2_DrawRBox>
 8002088:	e000      	b.n	800208c <battery_dots_vert+0x12c>
		if (counter%2 == 0) return;
 800208a:	bf00      	nop
}
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	f3af 8000 	nop.w
 8002098:	9999999a 	.word	0x9999999a
 800209c:	40099999 	.word	0x40099999
 80020a0:	cccccccd 	.word	0xcccccccd
 80020a4:	400acccc 	.word	0x400acccc
 80020a8:	9999999a 	.word	0x9999999a
 80020ac:	400b9999 	.word	0x400b9999
 80020b0:	66666666 	.word	0x66666666
 80020b4:	400c6666 	.word	0x400c6666
 80020b8:	33333333 	.word	0x33333333
 80020bc:	400d3333 	.word	0x400d3333
 80020c0:	20000394 	.word	0x20000394
 80020c4:	2000039c 	.word	0x2000039c

080020c8 <initDisplay>:

void initDisplay() {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0

	  /* I2C Interface */
	  u8g2_Setup_ssd1306_i2c_128x32_univision_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_i2c, u8x8_stm32_gpio_and_delay);
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <initDisplay+0x2c>)
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <initDisplay+0x30>)
 80020d0:	490a      	ldr	r1, [pc, #40]	; (80020fc <initDisplay+0x34>)
 80020d2:	480b      	ldr	r0, [pc, #44]	; (8002100 <initDisplay+0x38>)
 80020d4:	f002 fa92 	bl	80045fc <u8g2_Setup_ssd1306_i2c_128x32_univision_f>
//	  u8g2_setBusClock

	  /* Initialize Display */
	  u8g2_InitDisplay(&u8g2);
 80020d8:	4809      	ldr	r0, [pc, #36]	; (8002100 <initDisplay+0x38>)
 80020da:	f003 ff1d 	bl	8005f18 <u8x8_InitDisplay>
	  u8g2_SetPowerSave(&u8g2, 0);
 80020de:	2100      	movs	r1, #0
 80020e0:	4807      	ldr	r0, [pc, #28]	; (8002100 <initDisplay+0x38>)
 80020e2:	f003 ff28 	bl	8005f36 <u8x8_SetPowerSave>
	  u8g2_SetFontDirection(&u8g2, 2);
 80020e6:	2102      	movs	r1, #2
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <initDisplay+0x38>)
 80020ea:	f003 f837 	bl	800515c <u8g2_SetFontDirection>

}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	08003979 	.word	0x08003979
 80020f8:	080039ad 	.word	0x080039ad
 80020fc:	0801a3e0 	.word	0x0801a3e0
 8002100:	2000039c 	.word	0x2000039c

08002104 <updateDisplay>:

void updateDisplay() {
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	; 0x30
 8002108:	af02      	add	r7, sp, #8

	  float pm25 = SPS30.spsData[1];
 800210a:	4b88      	ldr	r3, [pc, #544]	; (800232c <updateDisplay+0x228>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
	  char screen_str[16];

	  float aqi = AQIPM25(pm25);
 8002110:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002114:	f7ff fe04 	bl	8001d20 <AQIPM25>
 8002118:	ee07 0a90 	vmov	s15, r0
 800211c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002120:	edc7 7a08 	vstr	s15, [r7, #32]
	  int barwidth = (128-55);
 8002124:	2349      	movs	r3, #73	; 0x49
 8002126:	61fb      	str	r3, [r7, #28]
	  int aqi_width = barwidth*aqi/500. +2;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002132:	edd7 7a08 	vldr	s15, [r7, #32]
 8002136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213a:	ee17 0a90 	vmov	r0, s15
 800213e:	f7fe fa03 	bl	8000548 <__aeabi_f2d>
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	4b7a      	ldr	r3, [pc, #488]	; (8002330 <updateDisplay+0x22c>)
 8002148:	f7fe fb80 	bl	800084c <__aeabi_ddiv>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800215c:	f7fe f896 	bl	800028c <__adddf3>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fcf6 	bl	8000b58 <__aeabi_d2iz>
 800216c:	4603      	mov	r3, r0
 800216e:	61bb      	str	r3, [r7, #24]

	  int gps_satellites = GPS.GPGGA.SatellitesUsed;
 8002170:	4b70      	ldr	r3, [pc, #448]	; (8002334 <updateDisplay+0x230>)
 8002172:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8002176:	617b      	str	r3, [r7, #20]

	  float vbat = batteryVoltage;
 8002178:	4b6f      	ldr	r3, [pc, #444]	; (8002338 <updateDisplay+0x234>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	613b      	str	r3, [r7, #16]

	  u8g2_FirstPage(&u8g2);
 800217e:	486f      	ldr	r0, [pc, #444]	; (800233c <updateDisplay+0x238>)
 8002180:	f001 ffaa 	bl	80040d8 <u8g2_FirstPage>
	  		do
	  		{
	  			u8g2_ClearBuffer(&u8g2);
 8002184:	486d      	ldr	r0, [pc, #436]	; (800233c <updateDisplay+0x238>)
 8002186:	f001 ff1c 	bl	8003fc2 <u8g2_ClearBuffer>

	  			// numbers
	  	  u8g2_SetFont(&u8g2, u8g2_font_logisoso30_tn);
 800218a:	496d      	ldr	r1, [pc, #436]	; (8002340 <updateDisplay+0x23c>)
 800218c:	486b      	ldr	r0, [pc, #428]	; (800233c <updateDisplay+0x238>)
 800218e:	f002 ffcb 	bl	8005128 <u8g2_SetFont>
          u8g2_DrawStr(&u8g2, 50, 0, screen_format((int)pm25));
 8002192:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800219a:	ee17 0a90 	vmov	r0, s15
 800219e:	f7ff fd5f 	bl	8001c60 <screen_format>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2200      	movs	r2, #0
 80021a6:	2132      	movs	r1, #50	; 0x32
 80021a8:	4864      	ldr	r0, [pc, #400]	; (800233c <updateDisplay+0x238>)
 80021aa:	f002 ff1b 	bl	8004fe4 <u8g2_DrawStr>
          u8g2_SetFont(&u8g2, u8g2_font_logisoso16_tn);
 80021ae:	4965      	ldr	r1, [pc, #404]	; (8002344 <updateDisplay+0x240>)
 80021b0:	4862      	ldr	r0, [pc, #392]	; (800233c <updateDisplay+0x238>)
 80021b2:	f002 ffb9 	bl	8005128 <u8g2_SetFont>
          if (pm25<100) sprintf(screen_str, ".%d", (int)(pm25*10)%10);
 80021b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021ba:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002348 <updateDisplay+0x244>
 80021be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	d51a      	bpl.n	80021fe <updateDisplay+0xfa>
 80021c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021d8:	ee17 1a90 	vmov	r1, s15
 80021dc:	4b5b      	ldr	r3, [pc, #364]	; (800234c <updateDisplay+0x248>)
 80021de:	fb83 2301 	smull	r2, r3, r3, r1
 80021e2:	109a      	asrs	r2, r3, #2
 80021e4:	17cb      	asrs	r3, r1, #31
 80021e6:	1ad2      	subs	r2, r2, r3
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	1aca      	subs	r2, r1, r3
 80021f2:	463b      	mov	r3, r7
 80021f4:	4956      	ldr	r1, [pc, #344]	; (8002350 <updateDisplay+0x24c>)
 80021f6:	4618      	mov	r0, r3
 80021f8:	f011 fd58 	bl	8013cac <siprintf>
 80021fc:	e005      	b.n	800220a <updateDisplay+0x106>
          else sprintf(screen_str, ".%d", 9);
 80021fe:	463b      	mov	r3, r7
 8002200:	2209      	movs	r2, #9
 8002202:	4953      	ldr	r1, [pc, #332]	; (8002350 <updateDisplay+0x24c>)
 8002204:	4618      	mov	r0, r3
 8002206:	f011 fd51 	bl	8013cac <siprintf>
          u8g2_DrawStr(&u8g2, 14, 14, screen_str);
 800220a:	463b      	mov	r3, r7
 800220c:	220e      	movs	r2, #14
 800220e:	210e      	movs	r1, #14
 8002210:	484a      	ldr	r0, [pc, #296]	; (800233c <updateDisplay+0x238>)
 8002212:	f002 fee7 	bl	8004fe4 <u8g2_DrawStr>
          if (noSD == 1) {
 8002216:	4b4f      	ldr	r3, [pc, #316]	; (8002354 <updateDisplay+0x250>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d111      	bne.n	8002242 <updateDisplay+0x13e>
        	  u8g2_SetFont(&u8g2, u8g2_font_profont17_tf);
 800221e:	494e      	ldr	r1, [pc, #312]	; (8002358 <updateDisplay+0x254>)
 8002220:	4846      	ldr	r0, [pc, #280]	; (800233c <updateDisplay+0x238>)
 8002222:	f002 ff81 	bl	8005128 <u8g2_SetFont>
        	  if (counter%2 == 0) u8g2_DrawStr(&u8g2, 128-24+0, 0, "No SD");
 8002226:	4b4d      	ldr	r3, [pc, #308]	; (800235c <updateDisplay+0x258>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d140      	bne.n	80022b6 <updateDisplay+0x1b2>
 8002234:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <updateDisplay+0x25c>)
 8002236:	2200      	movs	r2, #0
 8002238:	2168      	movs	r1, #104	; 0x68
 800223a:	4840      	ldr	r0, [pc, #256]	; (800233c <updateDisplay+0x238>)
 800223c:	f002 fed2 	bl	8004fe4 <u8g2_DrawStr>
 8002240:	e039      	b.n	80022b6 <updateDisplay+0x1b2>
          }
          else { /* we compensate for the board temperature heating by offsetting the shown value by -4C */
              u8g2_SetFont(&u8g2, u8g2_font_logisoso18_tn);
 8002242:	4948      	ldr	r1, [pc, #288]	; (8002364 <updateDisplay+0x260>)
 8002244:	483d      	ldr	r0, [pc, #244]	; (800233c <updateDisplay+0x238>)
 8002246:	f002 ff6f 	bl	8005128 <u8g2_SetFont>
        	  u8g2_DrawStr(&u8g2, 128-50+0, 0, screen_format(round(comp_rh))); // GPS.GPGGA.UTC_Min
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <updateDisplay+0x264>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f97a 	bl	8000548 <__aeabi_f2d>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	ec43 2b10 	vmov	d0, r2, r3
 800225c:	f015 ff3c 	bl	80180d8 <round>
 8002260:	ec53 2b10 	vmov	r2, r3, d0
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f7fe fc76 	bl	8000b58 <__aeabi_d2iz>
 800226c:	4603      	mov	r3, r0
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fcf6 	bl	8001c60 <screen_format>
 8002274:	4603      	mov	r3, r0
 8002276:	2200      	movs	r2, #0
 8002278:	214e      	movs	r1, #78	; 0x4e
 800227a:	4830      	ldr	r0, [pc, #192]	; (800233c <updateDisplay+0x238>)
 800227c:	f002 feb2 	bl	8004fe4 <u8g2_DrawStr>
        	  u8g2_DrawStr(&u8g2, 128-20+0, 0, screen_format(round(comp_t))); // GPS.GPGGA.UTC_Hour
 8002280:	4b3a      	ldr	r3, [pc, #232]	; (800236c <updateDisplay+0x268>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f95f 	bl	8000548 <__aeabi_f2d>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	ec43 2b10 	vmov	d0, r2, r3
 8002292:	f015 ff21 	bl	80180d8 <round>
 8002296:	ec53 2b10 	vmov	r2, r3, d0
 800229a:	4610      	mov	r0, r2
 800229c:	4619      	mov	r1, r3
 800229e:	f7fe fc5b 	bl	8000b58 <__aeabi_d2iz>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fcdb 	bl	8001c60 <screen_format>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2200      	movs	r2, #0
 80022ae:	216c      	movs	r1, #108	; 0x6c
 80022b0:	4822      	ldr	r0, [pc, #136]	; (800233c <updateDisplay+0x238>)
 80022b2:	f002 fe97 	bl	8004fe4 <u8g2_DrawStr>
          }
          u8g2_SetFont(&u8g2, u8g2_font_profont10_tf);
 80022b6:	492e      	ldr	r1, [pc, #184]	; (8002370 <updateDisplay+0x26c>)
 80022b8:	4820      	ldr	r0, [pc, #128]	; (800233c <updateDisplay+0x238>)
 80022ba:	f002 ff35 	bl	8005128 <u8g2_SetFont>

          // gps
          gps_dots(gps_satellites, GPS.GPGGA.PositionFixIndicator);
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <updateDisplay+0x230>)
 80022c0:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 80022c4:	4619      	mov	r1, r3
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f7ff fe0a 	bl	8001ee0 <gps_dots>

          // battery
          battery_dots_vert(vbat);
 80022cc:	ed97 0a04 	vldr	s0, [r7, #16]
 80022d0:	f7ff fe46 	bl	8001f60 <battery_dots_vert>

          // air quality indicator
          u8g2_DrawRFrame(&u8g2, 128-barwidth, 27, barwidth, 7, 1);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	b2d9      	uxtb	r1, r3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2201      	movs	r2, #1
 80022e6:	9201      	str	r2, [sp, #4]
 80022e8:	2207      	movs	r2, #7
 80022ea:	9200      	str	r2, [sp, #0]
 80022ec:	221b      	movs	r2, #27
 80022ee:	4813      	ldr	r0, [pc, #76]	; (800233c <updateDisplay+0x238>)
 80022f0:	f001 fdb2 	bl	8003e58 <u8g2_DrawRFrame>
          u8g2_DrawRBox(&u8g2, 128-aqi_width, 27, aqi_width, 5, 1);
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	b2d9      	uxtb	r1, r3
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2201      	movs	r2, #1
 8002306:	9201      	str	r2, [sp, #4]
 8002308:	2205      	movs	r2, #5
 800230a:	9200      	str	r2, [sp, #0]
 800230c:	221b      	movs	r2, #27
 800230e:	480b      	ldr	r0, [pc, #44]	; (800233c <updateDisplay+0x238>)
 8002310:	f001 fcf2 	bl	8003cf8 <u8g2_DrawRBox>

	  		} while (u8g2_NextPage(&u8g2));
 8002314:	4809      	ldr	r0, [pc, #36]	; (800233c <updateDisplay+0x238>)
 8002316:	f001 fef3 	bl	8004100 <u8g2_NextPage>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	f47f af31 	bne.w	8002184 <updateDisplay+0x80>
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	3728      	adds	r7, #40	; 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000d20 	.word	0x20000d20
 8002330:	407f4000 	.word	0x407f4000
 8002334:	200008b0 	.word	0x200008b0
 8002338:	200012e0 	.word	0x200012e0
 800233c:	2000039c 	.word	0x2000039c
 8002340:	0801a200 	.word	0x0801a200
 8002344:	08019f90 	.word	0x08019f90
 8002348:	42c80000 	.word	0x42c80000
 800234c:	66666667 	.word	0x66666667
 8002350:	08018850 	.word	0x08018850
 8002354:	20000000 	.word	0x20000000
 8002358:	08019308 	.word	0x08019308
 800235c:	20000394 	.word	0x20000394
 8002360:	08018854 	.word	0x08018854
 8002364:	0801a0b0 	.word	0x0801a0b0
 8002368:	200012d0 	.word	0x200012d0
 800236c:	20000e5c 	.word	0x20000e5c
 8002370:	08018b30 	.word	0x08018b30

08002374 <welcomeDisplay>:

void welcomeDisplay() {
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0

	u8g2_FirstPage(&u8g2);
 8002378:	4811      	ldr	r0, [pc, #68]	; (80023c0 <welcomeDisplay+0x4c>)
 800237a:	f001 fead 	bl	80040d8 <u8g2_FirstPage>
	do
	{
		u8g2_ClearBuffer(&u8g2);
 800237e:	4810      	ldr	r0, [pc, #64]	; (80023c0 <welcomeDisplay+0x4c>)
 8002380:	f001 fe1f 	bl	8003fc2 <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_profont17_tf);
 8002384:	490f      	ldr	r1, [pc, #60]	; (80023c4 <welcomeDisplay+0x50>)
 8002386:	480e      	ldr	r0, [pc, #56]	; (80023c0 <welcomeDisplay+0x4c>)
 8002388:	f002 fece 	bl	8005128 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 127, 20, "open-seneca");
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <welcomeDisplay+0x54>)
 800238e:	2214      	movs	r2, #20
 8002390:	217f      	movs	r1, #127	; 0x7f
 8002392:	480b      	ldr	r0, [pc, #44]	; (80023c0 <welcomeDisplay+0x4c>)
 8002394:	f002 fe26 	bl	8004fe4 <u8g2_DrawStr>
		u8g2_SetFont(&u8g2, u8g2_font_profont10_tf);
 8002398:	490c      	ldr	r1, [pc, #48]	; (80023cc <welcomeDisplay+0x58>)
 800239a:	4809      	ldr	r0, [pc, #36]	; (80023c0 <welcomeDisplay+0x4c>)
 800239c:	f002 fec4 	bl	8005128 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 127, 4, "air quality sensor ...");
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <welcomeDisplay+0x5c>)
 80023a2:	2204      	movs	r2, #4
 80023a4:	217f      	movs	r1, #127	; 0x7f
 80023a6:	4806      	ldr	r0, [pc, #24]	; (80023c0 <welcomeDisplay+0x4c>)
 80023a8:	f002 fe1c 	bl	8004fe4 <u8g2_DrawStr>
	} while (u8g2_NextPage(&u8g2));
 80023ac:	4804      	ldr	r0, [pc, #16]	; (80023c0 <welcomeDisplay+0x4c>)
 80023ae:	f001 fea7 	bl	8004100 <u8g2_NextPage>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e2      	bne.n	800237e <welcomeDisplay+0xa>

}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000039c 	.word	0x2000039c
 80023c4:	08019308 	.word	0x08019308
 80023c8:	0801885c 	.word	0x0801885c
 80023cc:	08018b30 	.word	0x08018b30
 80023d0:	08018868 	.word	0x08018868

080023d4 <dataTransferDisplay>:
	u8g2_NextPage(&u8g2);
	HAL_Delay(1000);

}

void dataTransferDisplay() {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0

	char screen_str[32] = "File: ";
 80023da:	4a1e      	ldr	r2, [pc, #120]	; (8002454 <dataTransferDisplay+0x80>)
 80023dc:	463b      	mov	r3, r7
 80023de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023e2:	6018      	str	r0, [r3, #0]
 80023e4:	3304      	adds	r3, #4
 80023e6:	8019      	strh	r1, [r3, #0]
 80023e8:	3302      	adds	r3, #2
 80023ea:	0c0a      	lsrs	r2, r1, #16
 80023ec:	701a      	strb	r2, [r3, #0]
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
 80023fc:	615a      	str	r2, [r3, #20]
 80023fe:	761a      	strb	r2, [r3, #24]
	u8g2_FirstPage(&u8g2);
 8002400:	4815      	ldr	r0, [pc, #84]	; (8002458 <dataTransferDisplay+0x84>)
 8002402:	f001 fe69 	bl	80040d8 <u8g2_FirstPage>
		do
		{
			u8g2_ClearBuffer(&u8g2);
 8002406:	4814      	ldr	r0, [pc, #80]	; (8002458 <dataTransferDisplay+0x84>)
 8002408:	f001 fddb 	bl	8003fc2 <u8g2_ClearBuffer>
			u8g2_SetFont(&u8g2, u8g2_font_profont17_tf);
 800240c:	4913      	ldr	r1, [pc, #76]	; (800245c <dataTransferDisplay+0x88>)
 800240e:	4812      	ldr	r0, [pc, #72]	; (8002458 <dataTransferDisplay+0x84>)
 8002410:	f002 fe8a 	bl	8005128 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 127, 20, "BT transmit...");
 8002414:	4b12      	ldr	r3, [pc, #72]	; (8002460 <dataTransferDisplay+0x8c>)
 8002416:	2214      	movs	r2, #20
 8002418:	217f      	movs	r1, #127	; 0x7f
 800241a:	480f      	ldr	r0, [pc, #60]	; (8002458 <dataTransferDisplay+0x84>)
 800241c:	f002 fde2 	bl	8004fe4 <u8g2_DrawStr>
			u8g2_SetFont(&u8g2, u8g2_font_profont10_tf);
 8002420:	4910      	ldr	r1, [pc, #64]	; (8002464 <dataTransferDisplay+0x90>)
 8002422:	480d      	ldr	r0, [pc, #52]	; (8002458 <dataTransferDisplay+0x84>)
 8002424:	f002 fe80 	bl	8005128 <u8g2_SetFont>
			strcat(screen_str, filename);
 8002428:	463b      	mov	r3, r7
 800242a:	490f      	ldr	r1, [pc, #60]	; (8002468 <dataTransferDisplay+0x94>)
 800242c:	4618      	mov	r0, r3
 800242e:	f011 fcce 	bl	8013dce <strcat>
			u8g2_DrawStr(&u8g2, 127, 4, screen_str);
 8002432:	463b      	mov	r3, r7
 8002434:	2204      	movs	r2, #4
 8002436:	217f      	movs	r1, #127	; 0x7f
 8002438:	4807      	ldr	r0, [pc, #28]	; (8002458 <dataTransferDisplay+0x84>)
 800243a:	f002 fdd3 	bl	8004fe4 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 800243e:	4806      	ldr	r0, [pc, #24]	; (8002458 <dataTransferDisplay+0x84>)
 8002440:	f001 fe5e 	bl	8004100 <u8g2_NextPage>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1dd      	bne.n	8002406 <dataTransferDisplay+0x32>

}
 800244a:	bf00      	nop
 800244c:	bf00      	nop
 800244e:	3720      	adds	r7, #32
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	08018890 	.word	0x08018890
 8002458:	2000039c 	.word	0x2000039c
 800245c:	08019308 	.word	0x08019308
 8002460:	08018880 	.word	0x08018880
 8002464:	08018b30 	.word	0x08018b30
 8002468:	200012d4 	.word	0x200012d4

0800246c <SHTC3_read_data>:

int SHTC3_read_data() { // for sht21
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af02      	add	r7, sp, #8

	  /* Clock stretching enabled, read T first */
	  uint8_t txBuf[2] = {0x7C, 0xA2};
 8002472:	f24a 237c 	movw	r3, #41596	; 0xa27c
 8002476:	813b      	strh	r3, [r7, #8]
	  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, (0x70<<1), &txBuf, 2, HAL_MAX_DELAY);
 8002478:	f107 0208 	add.w	r2, r7, #8
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2302      	movs	r3, #2
 8002484:	21e0      	movs	r1, #224	; 0xe0
 8002486:	482c      	ldr	r0, [pc, #176]	; (8002538 <SHTC3_read_data+0xcc>)
 8002488:	f005 fa82 	bl	8007990 <HAL_I2C_Master_Transmit>
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]


	  if (status != HAL_OK) {
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <SHTC3_read_data+0x30>
		  return -1;
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	e049      	b.n	8002530 <SHTC3_read_data+0xc4>
	  }

	  /* Read both t and rh */
	  uint8_t rxBuf[6];

	  status = HAL_I2C_Master_Receive(&hi2c1, (0x70 << 1), (uint8_t *) rxBuf, 6, HAL_MAX_DELAY);
 800249c:	463a      	mov	r2, r7
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2306      	movs	r3, #6
 80024a6:	21e0      	movs	r1, #224	; 0xe0
 80024a8:	4823      	ldr	r0, [pc, #140]	; (8002538 <SHTC3_read_data+0xcc>)
 80024aa:	f005 fb6f 	bl	8007b8c <HAL_I2C_Master_Receive>
 80024ae:	4603      	mov	r3, r0
 80024b0:	73fb      	strb	r3, [r7, #15]

	  if (status != HAL_OK) {
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <SHTC3_read_data+0x52>
		  return -1;
 80024b8:	f04f 33ff 	mov.w	r3, #4294967295
 80024bc:	e038      	b.n	8002530 <SHTC3_read_data+0xc4>
	  }

	  /* Test checksum with first 2 bytes */
	  if (CalcCrc(rxBuf) != rxBuf[2]) return -1;
 80024be:	463b      	mov	r3, r7
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff f80f 	bl	80014e4 <CalcCrc>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	78bb      	ldrb	r3, [r7, #2]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d002      	beq.n	80024d6 <SHTC3_read_data+0x6a>
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
 80024d4:	e02c      	b.n	8002530 <SHTC3_read_data+0xc4>

	  uint16_t val = (int16_t) ((rxBuf[0] << 8) | rxBuf[1]);
 80024d6:	783b      	ldrb	r3, [r7, #0]
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	b21a      	sxth	r2, r3
 80024dc:	787b      	ldrb	r3, [r7, #1]
 80024de:	b21b      	sxth	r3, r3
 80024e0:	4313      	orrs	r3, r2
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	81bb      	strh	r3, [r7, #12]
	  temp = 0.00267028808f * val - 45.0f;
 80024e6:	89bb      	ldrh	r3, [r7, #12]
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800253c <SHTC3_read_data+0xd0>
 80024f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002540 <SHTC3_read_data+0xd4>
 80024fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <SHTC3_read_data+0xd8>)
 8002502:	edc3 7a00 	vstr	s15, [r3]

	  val = (int16_t) ((rxBuf[3] << 8) | rxBuf[4]);
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	b21a      	sxth	r2, r3
 800250c:	793b      	ldrb	r3, [r7, #4]
 800250e:	b21b      	sxth	r3, r3
 8002510:	4313      	orrs	r3, r2
 8002512:	b21b      	sxth	r3, r3
 8002514:	81bb      	strh	r3, [r7, #12]

	  rh = 0.0015258789f * val;
 8002516:	89bb      	ldrh	r3, [r7, #12]
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002520:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002548 <SHTC3_read_data+0xdc>
 8002524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <SHTC3_read_data+0xe0>)
 800252a:	edc3 7a00 	vstr	s15, [r3]

	  return 1;
 800252e:	2301      	movs	r3, #1

}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000e04 	.word	0x20000e04
 800253c:	3b2f0000 	.word	0x3b2f0000
 8002540:	42340000 	.word	0x42340000
 8002544:	20000e58 	.word	0x20000e58
 8002548:	3ac80000 	.word	0x3ac80000
 800254c:	200013b0 	.word	0x200013b0

08002550 <compensateRH>:

float compensateRH(float RH_sensor, float T_sensor, float dT) {
 8002550:	b5b0      	push	{r4, r5, r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	ed87 0a03 	vstr	s0, [r7, #12]
 800255a:	edc7 0a02 	vstr	s1, [r7, #8]
 800255e:	ed87 1a01 	vstr	s2, [r7, #4]
	float c1 = 17.62;
 8002562:	4b35      	ldr	r3, [pc, #212]	; (8002638 <compensateRH+0xe8>)
 8002564:	61fb      	str	r3, [r7, #28]
	float c2 = 243.12;
 8002566:	4b35      	ldr	r3, [pc, #212]	; (800263c <compensateRH+0xec>)
 8002568:	61bb      	str	r3, [r7, #24]
	float c3 = 275.15;
 800256a:	4b35      	ldr	r3, [pc, #212]	; (8002640 <compensateRH+0xf0>)
 800256c:	617b      	str	r3, [r7, #20]

	float T_real = T_sensor + dT;
 800256e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002572:	edd7 7a01 	vldr	s15, [r7, #4]
 8002576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257a:	edc7 7a04 	vstr	s15, [r7, #16]

	return ((c3 + T_real) * RH_sensor * exp( c1 * ((T_sensor/(c2 + T_sensor)) - (T_real/(c2 + T_real))) )) / (c3 + T_sensor);
 800257e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002582:	edd7 7a04 	vldr	s15, [r7, #16]
 8002586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800258a:	edd7 7a03 	vldr	s15, [r7, #12]
 800258e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002592:	ee17 0a90 	vmov	r0, s15
 8002596:	f7fd ffd7 	bl	8000548 <__aeabi_f2d>
 800259a:	4604      	mov	r4, r0
 800259c:	460d      	mov	r5, r1
 800259e:	ed97 7a06 	vldr	s14, [r7, #24]
 80025a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025aa:	edd7 6a02 	vldr	s13, [r7, #8]
 80025ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b2:	edd7 6a06 	vldr	s13, [r7, #24]
 80025b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80025ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025be:	ed97 6a04 	vldr	s12, [r7, #16]
 80025c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80025c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80025ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d2:	ee17 0a90 	vmov	r0, s15
 80025d6:	f7fd ffb7 	bl	8000548 <__aeabi_f2d>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	ec43 2b10 	vmov	d0, r2, r3
 80025e2:	f015 fdc1 	bl	8018168 <exp>
 80025e6:	ec53 2b10 	vmov	r2, r3, d0
 80025ea:	4620      	mov	r0, r4
 80025ec:	4629      	mov	r1, r5
 80025ee:	f7fe f803 	bl	80005f8 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4614      	mov	r4, r2
 80025f8:	461d      	mov	r5, r3
 80025fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80025fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002606:	ee17 0a90 	vmov	r0, s15
 800260a:	f7fd ff9d 	bl	8000548 <__aeabi_f2d>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4620      	mov	r0, r4
 8002614:	4629      	mov	r1, r5
 8002616:	f7fe f919 	bl	800084c <__aeabi_ddiv>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fe fae1 	bl	8000be8 <__aeabi_d2f>
 8002626:	4603      	mov	r3, r0
 8002628:	ee07 3a90 	vmov	s15, r3
}
 800262c:	eeb0 0a67 	vmov.f32	s0, s15
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bdb0      	pop	{r4, r5, r7, pc}
 8002636:	bf00      	nop
 8002638:	418cf5c3 	.word	0x418cf5c3
 800263c:	43731eb8 	.word	0x43731eb8
 8002640:	43899333 	.word	0x43899333

08002644 <compensateT>:

float compensateT(float T_sensor, float dT) {
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	ed87 0a01 	vstr	s0, [r7, #4]
 800264e:	edc7 0a00 	vstr	s1, [r7]
	return T_sensor+dT;
 8002652:	ed97 7a01 	vldr	s14, [r7, #4]
 8002656:	edd7 7a00 	vldr	s15, [r7]
 800265a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800265e:	eeb0 0a67 	vmov.f32	s0, s15
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <initRGBLED>:

	status = HAL_I2C_Mem_Read(&hi2c1, (addr << 1), TSPP, 2, &rxBuf, 8, HAL_MAX_DELAY);
	status = HAL_I2C_Mem_Read(&hi2c1, (addr << 1), 0x00, 2, &rxBuf, 8, HAL_MAX_DELAY);
}

void initRGBLED() {
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002670:	2100      	movs	r1, #0
 8002672:	4811      	ldr	r0, [pc, #68]	; (80026b8 <initRGBLED+0x4c>)
 8002674:	f008 f966 	bl	800a944 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002678:	2100      	movs	r1, #0
 800267a:	4810      	ldr	r0, [pc, #64]	; (80026bc <initRGBLED+0x50>)
 800267c:	f008 f962 	bl	800a944 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002680:	2104      	movs	r1, #4
 8002682:	480e      	ldr	r0, [pc, #56]	; (80026bc <initRGBLED+0x50>)
 8002684:	f008 f95e 	bl	800a944 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002688:	2108      	movs	r1, #8
 800268a:	480c      	ldr	r0, [pc, #48]	; (80026bc <initRGBLED+0x50>)
 800268c:	f008 f95a 	bl	800a944 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002690:	210c      	movs	r1, #12
 8002692:	480a      	ldr	r0, [pc, #40]	; (80026bc <initRGBLED+0x50>)
 8002694:	f008 f956 	bl	800a944 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002698:	2108      	movs	r1, #8
 800269a:	4809      	ldr	r0, [pc, #36]	; (80026c0 <initRGBLED+0x54>)
 800269c:	f008 f952 	bl	800a944 <HAL_TIM_PWM_Start>

	setAirLED(100, 100, 100);
 80026a0:	2264      	movs	r2, #100	; 0x64
 80026a2:	2164      	movs	r1, #100	; 0x64
 80026a4:	2064      	movs	r0, #100	; 0x64
 80026a6:	f000 f841 	bl	800272c <setAirLED>
	setStatLED(100, 100, 100);
 80026aa:	2264      	movs	r2, #100	; 0x64
 80026ac:	2164      	movs	r1, #100	; 0x64
 80026ae:	2064      	movs	r0, #100	; 0x64
 80026b0:	f000 f808 	bl	80026c4 <setStatLED>

}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	200014ac 	.word	0x200014ac
 80026bc:	200014f4 	.word	0x200014f4
 80026c0:	20001464 	.word	0x20001464

080026c4 <setStatLED>:

void setStatLED(int r, int g, int b) { // values 0-100
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]

	htim2.Instance->CCR1 = r;
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <setStatLED+0x30>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR1 = g;
 80026d8:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <setStatLED+0x34>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = b;
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <setStatLED+0x34>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	639a      	str	r2, [r3, #56]	; 0x38

}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	200014ac 	.word	0x200014ac
 80026f8:	200014f4 	.word	0x200014f4

080026fc <flashStatLED>:


void flashStatLED(int r, int g, int b) { // values 0-100
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]

	setStatLED(r, g, b);
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f7ff ffd9 	bl	80026c4 <setStatLED>
	HAL_Delay(200);
 8002712:	20c8      	movs	r0, #200	; 0xc8
 8002714:	f003 fd3e 	bl	8006194 <HAL_Delay>
	setStatLED(100, 100, 100);
 8002718:	2264      	movs	r2, #100	; 0x64
 800271a:	2164      	movs	r1, #100	; 0x64
 800271c:	2064      	movs	r0, #100	; 0x64
 800271e:	f7ff ffd1 	bl	80026c4 <setStatLED>

}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <setAirLED>:

void setAirLED(int r, int g, int b) { // values 0-100
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]

	htim3.Instance->CCR3 = r;
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <setAirLED+0x30>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = g;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <setAirLED+0x30>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
	htim4.Instance->CCR3 = b;
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <setAirLED+0x34>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	200014f4 	.word	0x200014f4
 8002760:	20001464 	.word	0x20001464

08002764 <AirLED_on>:

void AirLED_on() {
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	if (SPS30.spsData[1] > 30) setAirLED(0, 100, 100); // red
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <AirLED_on+0x54>)
 800276a:	edd3 7a01 	vldr	s15, [r3, #4]
 800276e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002772:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277a:	dd05      	ble.n	8002788 <AirLED_on+0x24>
 800277c:	2264      	movs	r2, #100	; 0x64
 800277e:	2164      	movs	r1, #100	; 0x64
 8002780:	2000      	movs	r0, #0
 8002782:	f7ff ffd3 	bl	800272c <setAirLED>
	else if (SPS30.spsData[1] > 10) setAirLED(0, 0, 100); // yellow
	else setAirLED(100, 0, 100); // green
}
 8002786:	e014      	b.n	80027b2 <AirLED_on+0x4e>
	else if (SPS30.spsData[1] > 10) setAirLED(0, 0, 100); // yellow
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <AirLED_on+0x54>)
 800278a:	edd3 7a01 	vldr	s15, [r3, #4]
 800278e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279a:	dd05      	ble.n	80027a8 <AirLED_on+0x44>
 800279c:	2264      	movs	r2, #100	; 0x64
 800279e:	2100      	movs	r1, #0
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7ff ffc3 	bl	800272c <setAirLED>
}
 80027a6:	e004      	b.n	80027b2 <AirLED_on+0x4e>
	else setAirLED(100, 0, 100); // green
 80027a8:	2264      	movs	r2, #100	; 0x64
 80027aa:	2100      	movs	r1, #0
 80027ac:	2064      	movs	r0, #100	; 0x64
 80027ae:	f7ff ffbd 	bl	800272c <setAirLED>
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000d20 	.word	0x20000d20

080027bc <AirLED_off>:

void AirLED_off() {
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
	setAirLED(100, 100, 100);
 80027c0:	2264      	movs	r2, #100	; 0x64
 80027c2:	2164      	movs	r1, #100	; 0x64
 80027c4:	2064      	movs	r0, #100	; 0x64
 80027c6:	f7ff ffb1 	bl	800272c <setAirLED>
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <renameBT>:
//	HAL_UART_Receive_IT(&huart1,&readBuf,1);
//	if (strcmp(readBuf_old, readBuf) != 0)
//		count++;
//}

void renameBT() {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af02      	add	r7, sp, #8

	/* max length of hm11 name is 12, BT05-A module requires \r\n at the end of every command */
	sprintf(btname, "%s%c%c%c", "OPEN-SENE", SPS30.serial[13], SPS30.serial[14], SPS30.serial[15]);
 80027d6:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <renameBT+0x80>)
 80027d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027dc:	4619      	mov	r1, r3
 80027de:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <renameBT+0x80>)
 80027e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <renameBT+0x80>)
 80027e8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	9200      	str	r2, [sp, #0]
 80027f0:	460b      	mov	r3, r1
 80027f2:	4a18      	ldr	r2, [pc, #96]	; (8002854 <renameBT+0x84>)
 80027f4:	4918      	ldr	r1, [pc, #96]	; (8002858 <renameBT+0x88>)
 80027f6:	4819      	ldr	r0, [pc, #100]	; (800285c <renameBT+0x8c>)
 80027f8:	f011 fa58 	bl	8013cac <siprintf>
	uint8_t btcmd[32];
	uint8_t btlen = sprintf(btcmd, "%s%s%s", "AT+NAME", btname, "\r\n");
 80027fc:	1d38      	adds	r0, r7, #4
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <renameBT+0x90>)
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	4b16      	ldr	r3, [pc, #88]	; (800285c <renameBT+0x8c>)
 8002804:	4a17      	ldr	r2, [pc, #92]	; (8002864 <renameBT+0x94>)
 8002806:	4918      	ldr	r1, [pc, #96]	; (8002868 <renameBT+0x98>)
 8002808:	f011 fa50 	bl	8013cac <siprintf>
 800280c:	4603      	mov	r3, r0
 800280e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_UART_Transmit(&huart1, btcmd, btlen, HAL_MAX_DELAY);
 8002812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002816:	b29a      	uxth	r2, r3
 8002818:	1d39      	adds	r1, r7, #4
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	4813      	ldr	r0, [pc, #76]	; (800286c <renameBT+0x9c>)
 8002820:	f008 feb3 	bl	800b58a <HAL_UART_Transmit>
	// reboot module with set changes
	HAL_Delay(50);
 8002824:	2032      	movs	r0, #50	; 0x32
 8002826:	f003 fcb5 	bl	8006194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, BT_RESET_Pin, GPIO_PIN_RESET);
 800282a:	2200      	movs	r2, #0
 800282c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002830:	480f      	ldr	r0, [pc, #60]	; (8002870 <renameBT+0xa0>)
 8002832:	f004 ff4f 	bl	80076d4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002836:	2032      	movs	r0, #50	; 0x32
 8002838:	f003 fcac 	bl	8006194 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, BT_RESET_Pin, GPIO_PIN_SET);
 800283c:	2201      	movs	r2, #1
 800283e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002842:	480b      	ldr	r0, [pc, #44]	; (8002870 <renameBT+0xa0>)
 8002844:	f004 ff46 	bl	80076d4 <HAL_GPIO_WritePin>

}
 8002848:	bf00      	nop
 800284a:	3728      	adds	r7, #40	; 0x28
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000d20 	.word	0x20000d20
 8002854:	080188b0 	.word	0x080188b0
 8002858:	080188bc 	.word	0x080188bc
 800285c:	20000e60 	.word	0x20000e60
 8002860:	080188d8 	.word	0x080188d8
 8002864:	080188c8 	.word	0x080188c8
 8002868:	080188d0 	.word	0x080188d0
 800286c:	2000159c 	.word	0x2000159c
 8002870:	40020000 	.word	0x40020000

08002874 <checkBTconn>:

void checkBTconn() {
 8002874:	b580      	push	{r7, lr}
 8002876:	b08e      	sub	sp, #56	; 0x38
 8002878:	af00      	add	r7, sp, #0
	uint8_t btcmd[32];
	uint8_t btresp[16];
	uint8_t btlen = sprintf(btcmd, "%s", "AT+DISC\r\n");
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <checkBTconn+0x54>)
 8002880:	4912      	ldr	r1, [pc, #72]	; (80028cc <checkBTconn+0x58>)
 8002882:	4618      	mov	r0, r3
 8002884:	f011 fa12 	bl	8013cac <siprintf>
 8002888:	4603      	mov	r3, r0
 800288a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_Delay(50);
 800288e:	2032      	movs	r0, #50	; 0x32
 8002890:	f003 fc80 	bl	8006194 <HAL_Delay>
	HAL_UART_Transmit(&huart1, btcmd, btlen, HAL_MAX_DELAY);
 8002894:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002898:	b29a      	uxth	r2, r3
 800289a:	f107 0114 	add.w	r1, r7, #20
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	480b      	ldr	r0, [pc, #44]	; (80028d0 <checkBTconn+0x5c>)
 80028a4:	f008 fe71 	bl	800b58a <HAL_UART_Transmit>
	HAL_Delay(50);
 80028a8:	2032      	movs	r0, #50	; 0x32
 80028aa:	f003 fc73 	bl	8006194 <HAL_Delay>
	HAL_UART_Receive_DMA(&huart1, btresp, 16);
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	2210      	movs	r2, #16
 80028b2:	4619      	mov	r1, r3
 80028b4:	4806      	ldr	r0, [pc, #24]	; (80028d0 <checkBTconn+0x5c>)
 80028b6:	f008 ff2a 	bl	800b70e <HAL_UART_Receive_DMA>
	HAL_Delay(50);
 80028ba:	2032      	movs	r0, #50	; 0x32
 80028bc:	f003 fc6a 	bl	8006194 <HAL_Delay>
}
 80028c0:	bf00      	nop
 80028c2:	3738      	adds	r7, #56	; 0x38
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	080188dc 	.word	0x080188dc
 80028cc:	080188e8 	.word	0x080188e8
 80028d0:	2000159c 	.word	0x2000159c

080028d4 <saveToSD>:
		f_close(&fil);
		filenumber++;
	}
}

int saveToSD(uint8_t *dBuf, uint8_t dBufLen) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	70fb      	strb	r3, [r7, #3]

	//Open a file for writing
	if (f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND) != FR_OK) return -1;
 80028e0:	2232      	movs	r2, #50	; 0x32
 80028e2:	4912      	ldr	r1, [pc, #72]	; (800292c <saveToSD+0x58>)
 80028e4:	4812      	ldr	r0, [pc, #72]	; (8002930 <saveToSD+0x5c>)
 80028e6:	f00f f85d 	bl	80119a4 <f_open>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <saveToSD+0x22>
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295
 80028f4:	e016      	b.n	8002924 <saveToSD+0x50>

	UINT bytesWrote;//Number of bytes written
	if (f_write(&fil, dBuf, dBufLen, &bytesWrote) != FR_OK) return -1;
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	f107 030c 	add.w	r3, r7, #12
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	480c      	ldr	r0, [pc, #48]	; (8002930 <saveToSD+0x5c>)
 8002900:	f00f fb4d 	bl	8011f9e <f_write>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <saveToSD+0x3c>
 800290a:	f04f 33ff 	mov.w	r3, #4294967295
 800290e:	e009      	b.n	8002924 <saveToSD+0x50>

	//Close the file after writing
	if (f_close(&fil) != FR_OK) return -1;
 8002910:	4807      	ldr	r0, [pc, #28]	; (8002930 <saveToSD+0x5c>)
 8002912:	f00f fd37 	bl	8012384 <f_close>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <saveToSD+0x4e>
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
 8002920:	e000      	b.n	8002924 <saveToSD+0x50>

//	//De-mount the drive
//	if (f_mount(NULL, "", 0) != FR_OK) return -1;

	return bytesWrote;
 8002922:	68fb      	ldr	r3, [r7, #12]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	200012d4 	.word	0x200012d4
 8002930:	20000e6c 	.word	0x20000e6c

08002934 <transmitSDcardData>:
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
	free_sectors = free_clusters * getFreeFs->csize;

}

void transmitSDcardData() {
 8002934:	b580      	push	{r7, lr}
 8002936:	b0c4      	sub	sp, #272	; 0x110
 8002938:	af02      	add	r7, sp, #8

	uint8_t filenumber = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	FRESULT res;
	BYTE readBuf[255];
	/* first 3 digits from SPS SN, then 4 digit file counter */
	while (res == FR_OK) {
 8002940:	e050      	b.n	80029e4 <transmitSDcardData+0xb0>
		sprintf(filename, "%c%c%c%04d.csv", SPS30.serial[13], SPS30.serial[14], SPS30.serial[15], filenumber);
 8002942:	4b2d      	ldr	r3, [pc, #180]	; (80029f8 <transmitSDcardData+0xc4>)
 8002944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002948:	4619      	mov	r1, r3
 800294a:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <transmitSDcardData+0xc4>)
 800294c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002950:	4618      	mov	r0, r3
 8002952:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <transmitSDcardData+0xc4>)
 8002954:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002958:	461a      	mov	r2, r3
 800295a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800295e:	9301      	str	r3, [sp, #4]
 8002960:	9200      	str	r2, [sp, #0]
 8002962:	4603      	mov	r3, r0
 8002964:	460a      	mov	r2, r1
 8002966:	4925      	ldr	r1, [pc, #148]	; (80029fc <transmitSDcardData+0xc8>)
 8002968:	4825      	ldr	r0, [pc, #148]	; (8002a00 <transmitSDcardData+0xcc>)
 800296a:	f011 f99f 	bl	8013cac <siprintf>
		dataTransferDisplay();
 800296e:	f7ff fd31 	bl	80023d4 <dataTransferDisplay>
		res = f_open(&fil, filename, FA_READ);
 8002972:	2201      	movs	r2, #1
 8002974:	4922      	ldr	r1, [pc, #136]	; (8002a00 <transmitSDcardData+0xcc>)
 8002976:	4823      	ldr	r0, [pc, #140]	; (8002a04 <transmitSDcardData+0xd0>)
 8002978:	f00f f814 	bl	80119a4 <f_open>
 800297c:	4603      	mov	r3, r0
 800297e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

		// if the file exists, dump its content to the BT module
		if (res == FR_OK) {
 8002982:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8002986:	2b00      	cmp	r3, #0
 8002988:	d124      	bne.n	80029d4 <transmitSDcardData+0xa0>
			//We can either use f_read OR f_gets to get data out of files
			//f_gets is a wrapper on f_read that does some string formatting for us
			TCHAR* rres = f_gets((TCHAR*)readBuf, 255, &fil);
 800298a:	463b      	mov	r3, r7
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <transmitSDcardData+0xd0>)
 800298e:	21ff      	movs	r1, #255	; 0xff
 8002990:	4618      	mov	r0, r3
 8002992:	f00f fd21 	bl	80123d8 <f_gets>
 8002996:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
			while (rres != 0) {
 800299a:	e017      	b.n	80029cc <transmitSDcardData+0x98>
				AirLED_off();
 800299c:	f7ff ff0e 	bl	80027bc <AirLED_off>
//				CDC_Transmit_FS(readBuf, strlen(readBuf)); // required for COM port
				HAL_UART_Transmit(&huart1, readBuf, strlen(readBuf), HAL_MAX_DELAY);
 80029a0:	463b      	mov	r3, r7
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fd fc14 	bl	80001d0 <strlen>
 80029a8:	4603      	mov	r3, r0
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	4639      	mov	r1, r7
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
 80029b2:	4815      	ldr	r0, [pc, #84]	; (8002a08 <transmitSDcardData+0xd4>)
 80029b4:	f008 fde9 	bl	800b58a <HAL_UART_Transmit>
				AirLED_on();
 80029b8:	f7ff fed4 	bl	8002764 <AirLED_on>
				rres = f_gets((TCHAR*)readBuf, 255, &fil);
 80029bc:	463b      	mov	r3, r7
 80029be:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <transmitSDcardData+0xd0>)
 80029c0:	21ff      	movs	r1, #255	; 0xff
 80029c2:	4618      	mov	r0, r3
 80029c4:	f00f fd08 	bl	80123d8 <f_gets>
 80029c8:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
			while (rres != 0) {
 80029cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e3      	bne.n	800299c <transmitSDcardData+0x68>
			}
		}

		f_close(&fil);
 80029d4:	480b      	ldr	r0, [pc, #44]	; (8002a04 <transmitSDcardData+0xd0>)
 80029d6:	f00f fcd5 	bl	8012384 <f_close>
		filenumber++;
 80029da:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80029de:	3301      	adds	r3, #1
 80029e0:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	while (res == FR_OK) {
 80029e4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0aa      	beq.n	8002942 <transmitSDcardData+0xe>
	}
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000d20 	.word	0x20000d20
 80029fc:	080188ec 	.word	0x080188ec
 8002a00:	200012d4 	.word	0x200012d4
 8002a04:	20000e6c 	.word	0x20000e6c
 8002a08:	2000159c 	.word	0x2000159c

08002a0c <writeFileHeader>:


int writeFileHeader() {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0be      	sub	sp, #248	; 0xf8
 8002a10:	af00      	add	r7, sp, #0

	//Open a file for writing
	if (f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND) != FR_OK) return -1;
 8002a12:	2232      	movs	r2, #50	; 0x32
 8002a14:	4922      	ldr	r1, [pc, #136]	; (8002aa0 <writeFileHeader+0x94>)
 8002a16:	4823      	ldr	r0, [pc, #140]	; (8002aa4 <writeFileHeader+0x98>)
 8002a18:	f00e ffc4 	bl	80119a4 <f_open>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <writeFileHeader+0x1c>
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	e037      	b.n	8002a98 <writeFileHeader+0x8c>

	UINT bytesWrote;//Number of bytes written
	uint8_t details[39];
	uint8_t length = sprintf(details, "STM32_v0.2,,,SPS30_SN:%s\n", SPS30.serial);
 8002a28:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a2c:	4a1e      	ldr	r2, [pc, #120]	; (8002aa8 <writeFileHeader+0x9c>)
 8002a2e:	491f      	ldr	r1, [pc, #124]	; (8002aac <writeFileHeader+0xa0>)
 8002a30:	4618      	mov	r0, r3
 8002a32:	f011 f93b 	bl	8013cac <siprintf>
 8002a36:	4603      	mov	r3, r0
 8002a38:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	if (f_write(&fil, details, length, &bytesWrote) != FR_OK) return -1;
 8002a3c:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8002a40:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a44:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002a48:	4816      	ldr	r0, [pc, #88]	; (8002aa4 <writeFileHeader+0x98>)
 8002a4a:	f00f faa8 	bl	8011f9e <f_write>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <writeFileHeader+0x4e>
 8002a54:	f04f 33ff 	mov.w	r3, #4294967295
 8002a58:	e01e      	b.n	8002a98 <writeFileHeader+0x8c>

	uint8_t header[195];
	length = sprintf(header, "Counter,Latitude,Longitude,gpsUpdated,Speed,Altitude,Satellites,Date,Time,Millis,PM1.0,PM2.5,PM4.0,PM10,Temperature,Humidity,NC0.5,NC1.0,NC2.5,NC4.0,NC10,TypicalParticleSize,TVOC,eCO2,BatteryVIN,compensatedT,compensatedRH,UID\n");
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	4914      	ldr	r1, [pc, #80]	; (8002ab0 <writeFileHeader+0xa4>)
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f011 f924 	bl	8013cac <siprintf>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	if (f_write(&fil, header, length, &bytesWrote) != FR_OK) return -1;
 8002a6a:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8002a6e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a72:	1d39      	adds	r1, r7, #4
 8002a74:	480b      	ldr	r0, [pc, #44]	; (8002aa4 <writeFileHeader+0x98>)
 8002a76:	f00f fa92 	bl	8011f9e <f_write>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <writeFileHeader+0x7a>
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	e008      	b.n	8002a98 <writeFileHeader+0x8c>

	//Close the file after writing
	if (f_close(&fil) != FR_OK) return -1;
 8002a86:	4807      	ldr	r0, [pc, #28]	; (8002aa4 <writeFileHeader+0x98>)
 8002a88:	f00f fc7c 	bl	8012384 <f_close>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <writeFileHeader+0x8c>
 8002a92:	f04f 33ff 	mov.w	r3, #4294967295
 8002a96:	e7ff      	b.n	8002a98 <writeFileHeader+0x8c>

}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	37f8      	adds	r7, #248	; 0xf8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	200012d4 	.word	0x200012d4
 8002aa4:	20000e6c 	.word	0x20000e6c
 8002aa8:	20000d48 	.word	0x20000d48
 8002aac:	08018900 	.word	0x08018900
 8002ab0:	0801891c 	.word	0x0801891c

08002ab4 <updateADC>:

void updateADC() {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0

	  HAL_ADC_Start(&hadc1);
 8002ab8:	480e      	ldr	r0, [pc, #56]	; (8002af4 <updateADC+0x40>)
 8002aba:	f003 fbd3 	bl	8006264 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002abe:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac2:	480c      	ldr	r0, [pc, #48]	; (8002af4 <updateADC+0x40>)
 8002ac4:	f003 fca0 	bl	8006408 <HAL_ADC_PollForConversion>
	  adcData[0] = HAL_ADC_GetValue(&hadc1);
 8002ac8:	480a      	ldr	r0, [pc, #40]	; (8002af4 <updateADC+0x40>)
 8002aca:	f003 fd28 	bl	800651e <HAL_ADC_GetValue>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <updateADC+0x44>)
 8002ad4:	801a      	strh	r2, [r3, #0]
	  batteryVoltage = adcData[0] * 0.00112556008f;
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <updateADC+0x44>)
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002afc <updateADC+0x48>
 8002ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <updateADC+0x4c>)
 8002aec:	edc3 7a00 	vstr	s15, [r3]

}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20000d68 	.word	0x20000d68
 8002af8:	2000109c 	.word	0x2000109c
 8002afc:	3a938787 	.word	0x3a938787
 8002b00:	200012e0 	.word	0x200012e0
 8002b04:	00000000 	.word	0x00000000

08002b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b0c:	ed2d 8b04 	vpush	{d8-d9}
 8002b10:	b0d9      	sub	sp, #356	; 0x164
 8002b12:	af34      	add	r7, sp, #208	; 0xd0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b14:	f003 facc 	bl	80060b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b18:	f000 fa48 	bl	8002fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b1c:	f7fe ff18 	bl	8001950 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b20:	f7fe fef6 	bl	8001910 <MX_DMA_Init>
  MX_I2C1_Init();
 8002b24:	f7fe ffba 	bl	8001a9c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002b28:	f7fe ffe6 	bl	8001af8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002b2c:	f000 ffa4 	bl	8003a78 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002b30:	f7fe fe58 	bl	80017e4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002b34:	f000 fcdc 	bl	80034f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b38:	f000 fd32 	bl	80035a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b3c:	f000 fdaa 	bl	8003694 <MX_TIM4_Init>
  MX_SPI1_Init();
 8002b40:	f000 faa2 	bl	8003088 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002b44:	f000 fad6 	bl	80030f4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002b48:	f000 ffc0 	bl	8003acc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8002b4c:	f00f fcde 	bl	801250c <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 8002b50:	f00a ffc0 	bl	800dad4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(50);
 8002b54:	2032      	movs	r0, #50	; 0x32
 8002b56:	f003 fb1d 	bl	8006194 <HAL_Delay>
  updateADC(); // if battery voltage is too low, prevent boot
 8002b5a:	f7ff ffab 	bl	8002ab4 <updateADC>
  HAL_Delay(50);
 8002b5e:	2032      	movs	r0, #50	; 0x32
 8002b60:	f003 fb18 	bl	8006194 <HAL_Delay>
  initDisplay();
 8002b64:	f7ff fab0 	bl	80020c8 <initDisplay>
//  if (batteryVoltage < 2.75f) while(1) lowBatteryDisplay();
  welcomeDisplay();
 8002b68:	f7ff fc04 	bl	8002374 <welcomeDisplay>

  HAL_GPIO_WritePin(GPIOA, BT_RESET_Pin, GPIO_PIN_SET);
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b72:	4817      	ldr	r0, [pc, #92]	; (8002bd0 <main+0xc8>)
 8002b74:	f004 fdae 	bl	80076d4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8002b78:	2032      	movs	r0, #50	; 0x32
 8002b7a:	f003 fb0b 	bl	8006194 <HAL_Delay>
  GPS_Init();
 8002b7e:	f7fe fa8b 	bl	8001098 <GPS_Init>
  HAL_Delay(50);
 8002b82:	2032      	movs	r0, #50	; 0x32
 8002b84:	f003 fb06 	bl	8006194 <HAL_Delay>
  initRGBLED();
 8002b88:	f7ff fd70 	bl	800266c <initRGBLED>
  HAL_Delay(50);
 8002b8c:	2032      	movs	r0, #50	; 0x32
 8002b8e:	f003 fb01 	bl	8006194 <HAL_Delay>
  MX_I2C2_Init(); // reset i2c2 again (needed for it to work!)
 8002b92:	f7fe ffb1 	bl	8001af8 <MX_I2C2_Init>
  HAL_Delay(50);
 8002b96:	2032      	movs	r0, #50	; 0x32
 8002b98:	f003 fafc 	bl	8006194 <HAL_Delay>
  SPS30_start_measurement();
 8002b9c:	f7fe fcd6 	bl	800154c <SPS30_start_measurement>
  HAL_Delay(50);
 8002ba0:	2032      	movs	r0, #50	; 0x32
 8002ba2:	f003 faf7 	bl	8006194 <HAL_Delay>
  SPS30_read_serialnumber();
 8002ba6:	f7fe fd9f 	bl	80016e8 <SPS30_read_serialnumber>
  HAL_Delay(50);
 8002baa:	2032      	movs	r0, #50	; 0x32
 8002bac:	f003 faf2 	bl	8006194 <HAL_Delay>
  renameBT();
 8002bb0:	f7ff fe0e 	bl	80027d0 <renameBT>
  checkBTconn();
 8002bb4:	f7ff fe5e 	bl	8002874 <checkBTconn>
  SPS30_clean_fan();
 8002bb8:	f7fe fd7e 	bl	80016b8 <SPS30_clean_fan>

  //Mount the file system
  f_mount(&FatFs, "", 1);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4905      	ldr	r1, [pc, #20]	; (8002bd4 <main+0xcc>)
 8002bc0:	4805      	ldr	r0, [pc, #20]	; (8002bd8 <main+0xd0>)
 8002bc2:	f00e fea9 	bl	8011918 <f_mount>

  // beta feature: send all SD card data at boot, replaces generateFilename()
  transmitSDcardData();
 8002bc6:	f7ff feb5 	bl	8002934 <transmitSDcardData>
//  generateFilename();

  // write header for new file
  writeFileHeader();
 8002bca:	f7ff ff1f 	bl	8002a0c <writeFileHeader>
//		}
//		if (readBuf) HAL_UART_Transmit(&huart1, "AT+CONNL", 8, HAL_MAX_DELAY); // for HM11 module
// if lost restart module

	  /* Show boot screen until values first become none-zero */
	  while (SPS30_read_data() != 1) {
 8002bce:	e00d      	b.n	8002bec <main+0xe4>
 8002bd0:	40020000 	.word	0x40020000
 8002bd4:	080188fc 	.word	0x080188fc
 8002bd8:	200010a0 	.word	0x200010a0
		  setStatLED(100, 0, 50); // SPS error: cyan LED
 8002bdc:	2232      	movs	r2, #50	; 0x32
 8002bde:	2100      	movs	r1, #0
 8002be0:	2064      	movs	r0, #100	; 0x64
 8002be2:	f7ff fd6f 	bl	80026c4 <setStatLED>
		  HAL_Delay(100);
 8002be6:	2064      	movs	r0, #100	; 0x64
 8002be8:	f003 fad4 	bl	8006194 <HAL_Delay>
	  while (SPS30_read_data() != 1) {
 8002bec:	f7fe fcda 	bl	80015a4 <SPS30_read_data>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d1f2      	bne.n	8002bdc <main+0xd4>
	  }
	  setStatLED(100, 100, 100);
 8002bf6:	2264      	movs	r2, #100	; 0x64
 8002bf8:	2164      	movs	r1, #100	; 0x64
 8002bfa:	2064      	movs	r0, #100	; 0x64
 8002bfc:	f7ff fd62 	bl	80026c4 <setStatLED>
	  HAL_Delay(50);
 8002c00:	2032      	movs	r0, #50	; 0x32
 8002c02:	f003 fac7 	bl	8006194 <HAL_Delay>
	  SHTC3_read_data();
 8002c06:	f7ff fc31 	bl	800246c <SHTC3_read_data>
	  comp_t = compensateT(temp, -4);
 8002c0a:	4bae      	ldr	r3, [pc, #696]	; (8002ec4 <main+0x3bc>)
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
 8002c10:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 8002c14:	eeb0 0a67 	vmov.f32	s0, s15
 8002c18:	f7ff fd14 	bl	8002644 <compensateT>
 8002c1c:	eef0 7a40 	vmov.f32	s15, s0
 8002c20:	4ba9      	ldr	r3, [pc, #676]	; (8002ec8 <main+0x3c0>)
 8002c22:	edc3 7a00 	vstr	s15, [r3]
	  comp_rh = compensateRH(rh, temp, -4);
 8002c26:	4ba9      	ldr	r3, [pc, #676]	; (8002ecc <main+0x3c4>)
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	4ba5      	ldr	r3, [pc, #660]	; (8002ec4 <main+0x3bc>)
 8002c2e:	ed93 7a00 	vldr	s14, [r3]
 8002c32:	eeb9 1a00 	vmov.f32	s2, #144	; 0xc0800000 -4.0
 8002c36:	eef0 0a47 	vmov.f32	s1, s14
 8002c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c3e:	f7ff fc87 	bl	8002550 <compensateRH>
 8002c42:	eef0 7a40 	vmov.f32	s15, s0
 8002c46:	4ba2      	ldr	r3, [pc, #648]	; (8002ed0 <main+0x3c8>)
 8002c48:	edc3 7a00 	vstr	s15, [r3]
	  updateADC();
 8002c4c:	f7ff ff32 	bl	8002ab4 <updateADC>
	  millis = HAL_GetTick();
 8002c50:	f003 fa94 	bl	800617c <HAL_GetTick>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4a9f      	ldr	r2, [pc, #636]	; (8002ed4 <main+0x3cc>)
 8002c58:	6013      	str	r3, [r2, #0]

	  /* Format output data string */
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002c5a:	4b9f      	ldr	r3, [pc, #636]	; (8002ed8 <main+0x3d0>)
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c62:	4b9e      	ldr	r3, [pc, #632]	; (8002edc <main+0x3d4>)
 8002c64:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8002c68:	ed93 8b00 	vldr	d8, [r3]
 8002c6c:	4b9b      	ldr	r3, [pc, #620]	; (8002edc <main+0x3d4>)
 8002c6e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8002c72:	ed93 9b00 	vldr	d9, [r3]
 8002c76:	4b99      	ldr	r3, [pc, #612]	; (8002edc <main+0x3d4>)
 8002c78:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8002c7c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
			  "%.1f,%.1f,%d,%d,%06.0f,%d," // speed, alt, sat, date, time, millis
			  "%.2f,%.2f,%.2f,%.2f,%.1f,%.1f," // pm1, pm25, pm4, pm10, t, rh
			  "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%d,%d,%.2f,%.1f,%.1f,%c%c%c\n", // nc0.5, nc1.0, nc2.5, nc4.0, nc10, psize, tvoc, eco2, vbat
			  counter, GPS.GPGGA.LatitudeDecimal, GPS.GPGGA.LongitudeDecimal, GPS.GPGGA.PositionFixIndicator,
			  GPS.GPGGA.Speed_KMH, GPS.GPGGA.MSL_Altitude, GPS.GPGGA.SatellitesUsed, GPS.GPGGA.YYYYMMDD, GPS.GPGGA.HHMMSS, millis,
 8002c80:	4b96      	ldr	r3, [pc, #600]	; (8002edc <main+0x3d4>)
 8002c82:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8002c86:	681b      	ldr	r3, [r3, #0]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fc5d 	bl	8000548 <__aeabi_f2d>
 8002c8e:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
			  GPS.GPGGA.Speed_KMH, GPS.GPGGA.MSL_Altitude, GPS.GPGGA.SatellitesUsed, GPS.GPGGA.YYYYMMDD, GPS.GPGGA.HHMMSS, millis,
 8002c92:	4b92      	ldr	r3, [pc, #584]	; (8002edc <main+0x3d4>)
 8002c94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c98:	681b      	ldr	r3, [r3, #0]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fc54 	bl	8000548 <__aeabi_f2d>
 8002ca0:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
			  GPS.GPGGA.Speed_KMH, GPS.GPGGA.MSL_Altitude, GPS.GPGGA.SatellitesUsed, GPS.GPGGA.YYYYMMDD, GPS.GPGGA.HHMMSS, millis,
 8002ca4:	4b8d      	ldr	r3, [pc, #564]	; (8002edc <main+0x3d4>)
 8002ca6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002caa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cac:	4b8b      	ldr	r3, [pc, #556]	; (8002edc <main+0x3d4>)
 8002cae:	f8d3 4468 	ldr.w	r4, [r3, #1128]	; 0x468
 8002cb2:	66bc      	str	r4, [r7, #104]	; 0x68
			  GPS.GPGGA.Speed_KMH, GPS.GPGGA.MSL_Altitude, GPS.GPGGA.SatellitesUsed, GPS.GPGGA.YYYYMMDD, GPS.GPGGA.HHMMSS, millis,
 8002cb4:	4b89      	ldr	r3, [pc, #548]	; (8002edc <main+0x3d4>)
 8002cb6:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8002cba:	681b      	ldr	r3, [r3, #0]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fc43 	bl	8000548 <__aeabi_f2d>
 8002cc2:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 8002cc6:	4b83      	ldr	r3, [pc, #524]	; (8002ed4 <main+0x3cc>)
 8002cc8:	681d      	ldr	r5, [r3, #0]
 8002cca:	65fd      	str	r5, [r7, #92]	; 0x5c
			  SPS30.spsData[0], SPS30.spsData[1], SPS30.spsData[2], SPS30.spsData[3], temp, rh,
 8002ccc:	4b84      	ldr	r3, [pc, #528]	; (8002ee0 <main+0x3d8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fc39 	bl	8000548 <__aeabi_f2d>
 8002cd6:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
			  SPS30.spsData[0], SPS30.spsData[1], SPS30.spsData[2], SPS30.spsData[3], temp, rh,
 8002cda:	4b81      	ldr	r3, [pc, #516]	; (8002ee0 <main+0x3d8>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fc32 	bl	8000548 <__aeabi_f2d>
 8002ce4:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			  SPS30.spsData[0], SPS30.spsData[1], SPS30.spsData[2], SPS30.spsData[3], temp, rh,
 8002ce8:	4b7d      	ldr	r3, [pc, #500]	; (8002ee0 <main+0x3d8>)
 8002cea:	689b      	ldr	r3, [r3, #8]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd fc2b 	bl	8000548 <__aeabi_f2d>
 8002cf2:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
			  SPS30.spsData[0], SPS30.spsData[1], SPS30.spsData[2], SPS30.spsData[3], temp, rh,
 8002cf6:	4b7a      	ldr	r3, [pc, #488]	; (8002ee0 <main+0x3d8>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd fc24 	bl	8000548 <__aeabi_f2d>
 8002d00:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8002d04:	4b6f      	ldr	r3, [pc, #444]	; (8002ec4 <main+0x3bc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fc1d 	bl	8000548 <__aeabi_f2d>
 8002d0e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8002d12:	4b6e      	ldr	r3, [pc, #440]	; (8002ecc <main+0x3c4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fc16 	bl	8000548 <__aeabi_f2d>
 8002d1c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002d20:	4b6f      	ldr	r3, [pc, #444]	; (8002ee0 <main+0x3d8>)
 8002d22:	691b      	ldr	r3, [r3, #16]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fd fc0f 	bl	8000548 <__aeabi_f2d>
 8002d2a:	e9c7 0108 	strd	r0, r1, [r7, #32]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002d2e:	4b6c      	ldr	r3, [pc, #432]	; (8002ee0 <main+0x3d8>)
 8002d30:	695b      	ldr	r3, [r3, #20]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fc08 	bl	8000548 <__aeabi_f2d>
 8002d38:	e9c7 0106 	strd	r0, r1, [r7, #24]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002d3c:	4b68      	ldr	r3, [pc, #416]	; (8002ee0 <main+0x3d8>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fc01 	bl	8000548 <__aeabi_f2d>
 8002d46:	e9c7 0104 	strd	r0, r1, [r7, #16]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002d4a:	4b65      	ldr	r3, [pc, #404]	; (8002ee0 <main+0x3d8>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fbfa 	bl	8000548 <__aeabi_f2d>
 8002d54:	e9c7 0102 	strd	r0, r1, [r7, #8]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002d58:	4b61      	ldr	r3, [pc, #388]	; (8002ee0 <main+0x3d8>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fbf3 	bl	8000548 <__aeabi_f2d>
 8002d62:	e9c7 0100 	strd	r0, r1, [r7]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002d66:	4b5e      	ldr	r3, [pc, #376]	; (8002ee0 <main+0x3d8>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fbec 	bl	8000548 <__aeabi_f2d>
 8002d70:	4682      	mov	sl, r0
 8002d72:	468b      	mov	fp, r1
 8002d74:	4b5b      	ldr	r3, [pc, #364]	; (8002ee4 <main+0x3dc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd fbe5 	bl	8000548 <__aeabi_f2d>
 8002d7e:	4680      	mov	r8, r0
 8002d80:	4689      	mov	r9, r1
 8002d82:	4b51      	ldr	r3, [pc, #324]	; (8002ec8 <main+0x3c0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fd fbde 	bl	8000548 <__aeabi_f2d>
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	460d      	mov	r5, r1
 8002d90:	4b4f      	ldr	r3, [pc, #316]	; (8002ed0 <main+0x3c8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fbd7 	bl	8000548 <__aeabi_f2d>
			  0, 0, batteryVoltage, comp_t, comp_rh, SPS30.serial[13], SPS30.serial[14], SPS30.serial[15]);
 8002d9a:	4b51      	ldr	r3, [pc, #324]	; (8002ee0 <main+0x3d8>)
 8002d9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002da0:	461e      	mov	r6, r3
			  0, 0, batteryVoltage, comp_t, comp_rh, SPS30.serial[13], SPS30.serial[14], SPS30.serial[15]);
 8002da2:	4b4f      	ldr	r3, [pc, #316]	; (8002ee0 <main+0x3d8>)
 8002da4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002da8:	461a      	mov	r2, r3
			  0, 0, batteryVoltage, comp_t, comp_rh, SPS30.serial[13], SPS30.serial[14], SPS30.serial[15]);
 8002daa:	4b4d      	ldr	r3, [pc, #308]	; (8002ee0 <main+0x3d8>)
 8002dac:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002db0:	9332      	str	r3, [sp, #200]	; 0xc8
 8002db2:	9231      	str	r2, [sp, #196]	; 0xc4
 8002db4:	9630      	str	r6, [sp, #192]	; 0xc0
 8002db6:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
 8002dba:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8002dbe:	e9cd 892a 	strd	r8, r9, [sp, #168]	; 0xa8
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	9329      	str	r3, [sp, #164]	; 0xa4
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	9328      	str	r3, [sp, #160]	; 0xa0
 8002dca:	e9cd ab26 	strd	sl, fp, [sp, #152]	; 0x98
 8002dce:	ed97 7b00 	vldr	d7, [r7]
 8002dd2:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8002dd6:	ed97 7b02 	vldr	d7, [r7, #8]
 8002dda:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8002dde:	ed97 7b04 	vldr	d7, [r7, #16]
 8002de2:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8002de6:	ed97 7b06 	vldr	d7, [r7, #24]
 8002dea:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8002dee:	ed97 7b08 	vldr	d7, [r7, #32]
 8002df2:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8002df6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002dfa:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8002dfe:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002e02:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8002e06:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002e0a:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8002e0e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002e12:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002e16:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002e1a:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002e1e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002e22:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002e26:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8002e28:	950e      	str	r5, [sp, #56]	; 0x38
 8002e2a:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002e2e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002e32:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8002e34:	940b      	str	r4, [sp, #44]	; 0x2c
 8002e36:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8002e38:	940a      	str	r4, [sp, #40]	; 0x28
 8002e3a:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002e3e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002e42:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002e46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002e4a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002e4e:	9104      	str	r1, [sp, #16]
 8002e50:	ed8d 9b02 	vstr	d9, [sp, #8]
 8002e54:	ed8d 8b00 	vstr	d8, [sp]
 8002e58:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002e5c:	4922      	ldr	r1, [pc, #136]	; (8002ee8 <main+0x3e0>)
 8002e5e:	4823      	ldr	r0, [pc, #140]	; (8002eec <main+0x3e4>)
 8002e60:	f010 ff24 	bl	8013cac <siprintf>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f


	  /* Send data via BT and COM, save to SD */
	  AirLED_on();
 8002e6a:	f7ff fc7b 	bl	8002764 <AirLED_on>
	  CDC_Transmit_FS(data, length); // required for COM port
 8002e6e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002e72:	4619      	mov	r1, r3
 8002e74:	481d      	ldr	r0, [pc, #116]	; (8002eec <main+0x3e4>)
 8002e76:	f00f fc07 	bl	8012688 <CDC_Transmit_FS>
	  HAL_UART_Transmit(&huart1, data, length, HAL_MAX_DELAY);
 8002e7a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
 8002e84:	4919      	ldr	r1, [pc, #100]	; (8002eec <main+0x3e4>)
 8002e86:	481a      	ldr	r0, [pc, #104]	; (8002ef0 <main+0x3e8>)
 8002e88:	f008 fb7f 	bl	800b58a <HAL_UART_Transmit>
	  if (saveToSD(&data, length) == -1) noSD = 1;
 8002e8c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002e90:	4619      	mov	r1, r3
 8002e92:	4816      	ldr	r0, [pc, #88]	; (8002eec <main+0x3e4>)
 8002e94:	f7ff fd1e 	bl	80028d4 <saveToSD>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d103      	bne.n	8002ea8 <main+0x3a0>
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <main+0x3ec>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e002      	b.n	8002eae <main+0x3a6>
	  else noSD = 0;
 8002ea8:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <main+0x3ec>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
	  AirLED_off();
 8002eae:	f7ff fc85 	bl	80027bc <AirLED_off>

	  /* Update the display */
	  updateDisplay();
 8002eb2:	f7ff f927 	bl	8002104 <updateDisplay>

	  /* Increase counter and wait */
	  counter++;
 8002eb6:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <main+0x3d0>)
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <main+0x3d0>)
 8002ec0:	801a      	strh	r2, [r3, #0]
	  while (HAL_GetTick()-millis < 1000) {
 8002ec2:	e01c      	b.n	8002efe <main+0x3f6>
 8002ec4:	20000e58 	.word	0x20000e58
 8002ec8:	20000e5c 	.word	0x20000e5c
 8002ecc:	200013b0 	.word	0x200013b0
 8002ed0:	200012d0 	.word	0x200012d0
 8002ed4:	20000398 	.word	0x20000398
 8002ed8:	20000394 	.word	0x20000394
 8002edc:	200008b0 	.word	0x200008b0
 8002ee0:	20000d20 	.word	0x20000d20
 8002ee4:	200012e0 	.word	0x200012e0
 8002ee8:	08018a00 	.word	0x08018a00
 8002eec:	200012e8 	.word	0x200012e8
 8002ef0:	2000159c 	.word	0x2000159c
 8002ef4:	20000000 	.word	0x20000000
		  HAL_Delay(10); // does increasing this delay save power?
 8002ef8:	200a      	movs	r0, #10
 8002efa:	f003 f94b 	bl	8006194 <HAL_Delay>
	  while (HAL_GetTick()-millis < 1000) {
 8002efe:	f003 f93d 	bl	800617c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <main+0x490>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f0e:	d3f3      	bcc.n	8002ef8 <main+0x3f0>
	  }

	  /* Set debug LED */
	  if (rh > 100 || rh < 0) flashStatLED(100, 100, 0); // SHT errors: blue LED
 8002f10:	4b22      	ldr	r3, [pc, #136]	; (8002f9c <main+0x494>)
 8002f12:	edd3 7a00 	vldr	s15, [r3]
 8002f16:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002fa0 <main+0x498>
 8002f1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f22:	dc07      	bgt.n	8002f34 <main+0x42c>
 8002f24:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <main+0x494>)
 8002f26:	edd3 7a00 	vldr	s15, [r3]
 8002f2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f32:	d504      	bpl.n	8002f3e <main+0x436>
 8002f34:	2200      	movs	r2, #0
 8002f36:	2164      	movs	r1, #100	; 0x64
 8002f38:	2064      	movs	r0, #100	; 0x64
 8002f3a:	f7ff fbdf 	bl	80026fc <flashStatLED>
	  if (noSD == 1) flashStatLED(0, 100, 0); // SD errors: purple LED
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <main+0x49c>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d104      	bne.n	8002f50 <main+0x448>
 8002f46:	2200      	movs	r2, #0
 8002f48:	2164      	movs	r1, #100	; 0x64
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f7ff fbd6 	bl	80026fc <flashStatLED>
	  if (batteryVoltage < 2.6 || batteryVoltage > 5) flashStatLED(0, 100, 100); // Battery errors: red LED
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <main+0x4a0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd faf7 	bl	8000548 <__aeabi_f2d>
 8002f5a:	a30d      	add	r3, pc, #52	; (adr r3, 8002f90 <main+0x488>)
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f7fd fdbc 	bl	8000adc <__aeabi_dcmplt>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <main+0x476>
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <main+0x4a0>)
 8002f6c:	edd3 7a00 	vldr	s15, [r3]
 8002f70:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	dd04      	ble.n	8002f88 <main+0x480>
 8002f7e:	2264      	movs	r2, #100	; 0x64
 8002f80:	2164      	movs	r1, #100	; 0x64
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7ff fbba 	bl	80026fc <flashStatLED>
  {
 8002f88:	e621      	b.n	8002bce <main+0xc6>
 8002f8a:	bf00      	nop
 8002f8c:	f3af 8000 	nop.w
 8002f90:	cccccccd 	.word	0xcccccccd
 8002f94:	4004cccc 	.word	0x4004cccc
 8002f98:	20000398 	.word	0x20000398
 8002f9c:	200013b0 	.word	0x200013b0
 8002fa0:	42c80000 	.word	0x42c80000
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	200012e0 	.word	0x200012e0

08002fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b094      	sub	sp, #80	; 0x50
 8002fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fb2:	f107 0320 	add.w	r3, r7, #32
 8002fb6:	2230      	movs	r2, #48	; 0x30
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f00f ffee 	bl	8012f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fc0:	f107 030c 	add.w	r3, r7, #12
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	4b27      	ldr	r3, [pc, #156]	; (8003074 <SystemClock_Config+0xc8>)
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	4a26      	ldr	r2, [pc, #152]	; (8003074 <SystemClock_Config+0xc8>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fde:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe0:	4b24      	ldr	r3, [pc, #144]	; (8003074 <SystemClock_Config+0xc8>)
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fec:	2300      	movs	r3, #0
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	4b21      	ldr	r3, [pc, #132]	; (8003078 <SystemClock_Config+0xcc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a20      	ldr	r2, [pc, #128]	; (8003078 <SystemClock_Config+0xcc>)
 8002ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <SystemClock_Config+0xcc>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003004:	607b      	str	r3, [r7, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003008:	2301      	movs	r3, #1
 800300a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800300c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003012:	2302      	movs	r3, #2
 8003014:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800301a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800301c:	2308      	movs	r3, #8
 800301e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003020:	2348      	movs	r3, #72	; 0x48
 8003022:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003024:	2302      	movs	r3, #2
 8003026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003028:	2303      	movs	r3, #3
 800302a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800302c:	f107 0320 	add.w	r3, r7, #32
 8003030:	4618      	mov	r0, r3
 8003032:	f006 fc81 	bl	8009938 <HAL_RCC_OscConfig>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800303c:	f000 f81e 	bl	800307c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003040:	230f      	movs	r3, #15
 8003042:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003044:	2302      	movs	r3, #2
 8003046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800304c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003050:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003052:	2300      	movs	r3, #0
 8003054:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003056:	f107 030c 	add.w	r3, r7, #12
 800305a:	2102      	movs	r1, #2
 800305c:	4618      	mov	r0, r3
 800305e:	f006 fee3 	bl	8009e28 <HAL_RCC_ClockConfig>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003068:	f000 f808 	bl	800307c <Error_Handler>
  }
}
 800306c:	bf00      	nop
 800306e:	3750      	adds	r7, #80	; 0x50
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40023800 	.word	0x40023800
 8003078:	40007000 	.word	0x40007000

0800307c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003080:	b672      	cpsid	i
}
 8003082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003084:	e7fe      	b.n	8003084 <Error_Handler+0x8>
	...

08003088 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800308c:	4b17      	ldr	r3, [pc, #92]	; (80030ec <MX_SPI1_Init+0x64>)
 800308e:	4a18      	ldr	r2, [pc, #96]	; (80030f0 <MX_SPI1_Init+0x68>)
 8003090:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003092:	4b16      	ldr	r3, [pc, #88]	; (80030ec <MX_SPI1_Init+0x64>)
 8003094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003098:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <MX_SPI1_Init+0x64>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030a0:	4b12      	ldr	r3, [pc, #72]	; (80030ec <MX_SPI1_Init+0x64>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030a6:	4b11      	ldr	r3, [pc, #68]	; (80030ec <MX_SPI1_Init+0x64>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <MX_SPI1_Init+0x64>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <MX_SPI1_Init+0x64>)
 80030b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80030ba:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <MX_SPI1_Init+0x64>)
 80030bc:	2230      	movs	r2, #48	; 0x30
 80030be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030c0:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <MX_SPI1_Init+0x64>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <MX_SPI1_Init+0x64>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030cc:	4b07      	ldr	r3, [pc, #28]	; (80030ec <MX_SPI1_Init+0x64>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030d2:	4b06      	ldr	r3, [pc, #24]	; (80030ec <MX_SPI1_Init+0x64>)
 80030d4:	220a      	movs	r2, #10
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030d8:	4804      	ldr	r0, [pc, #16]	; (80030ec <MX_SPI1_Init+0x64>)
 80030da:	f007 f89f 	bl	800a21c <HAL_SPI_Init>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030e4:	f7ff ffca 	bl	800307c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	2000140c 	.word	0x2000140c
 80030f0:	40013000 	.word	0x40013000

080030f4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80030f8:	4b17      	ldr	r3, [pc, #92]	; (8003158 <MX_SPI2_Init+0x64>)
 80030fa:	4a18      	ldr	r2, [pc, #96]	; (800315c <MX_SPI2_Init+0x68>)
 80030fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80030fe:	4b16      	ldr	r3, [pc, #88]	; (8003158 <MX_SPI2_Init+0x64>)
 8003100:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003104:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003106:	4b14      	ldr	r3, [pc, #80]	; (8003158 <MX_SPI2_Init+0x64>)
 8003108:	2200      	movs	r2, #0
 800310a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <MX_SPI2_Init+0x64>)
 800310e:	2200      	movs	r2, #0
 8003110:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003112:	4b11      	ldr	r3, [pc, #68]	; (8003158 <MX_SPI2_Init+0x64>)
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <MX_SPI2_Init+0x64>)
 800311a:	2200      	movs	r2, #0
 800311c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <MX_SPI2_Init+0x64>)
 8003120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003124:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <MX_SPI2_Init+0x64>)
 8003128:	2230      	movs	r2, #48	; 0x30
 800312a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <MX_SPI2_Init+0x64>)
 800312e:	2200      	movs	r2, #0
 8003130:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <MX_SPI2_Init+0x64>)
 8003134:	2200      	movs	r2, #0
 8003136:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003138:	4b07      	ldr	r3, [pc, #28]	; (8003158 <MX_SPI2_Init+0x64>)
 800313a:	2200      	movs	r2, #0
 800313c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800313e:	4b06      	ldr	r3, [pc, #24]	; (8003158 <MX_SPI2_Init+0x64>)
 8003140:	220a      	movs	r2, #10
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003144:	4804      	ldr	r0, [pc, #16]	; (8003158 <MX_SPI2_Init+0x64>)
 8003146:	f007 f869 	bl	800a21c <HAL_SPI_Init>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003150:	f7ff ff94 	bl	800307c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}
 8003158:	200013b4 	.word	0x200013b4
 800315c:	40003800 	.word	0x40003800

08003160 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08c      	sub	sp, #48	; 0x30
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003168:	f107 031c 	add.w	r3, r7, #28
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a32      	ldr	r2, [pc, #200]	; (8003248 <HAL_SPI_MspInit+0xe8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d12c      	bne.n	80031dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_SPI_MspInit+0xec>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4a30      	ldr	r2, [pc, #192]	; (800324c <HAL_SPI_MspInit+0xec>)
 800318c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003190:	6453      	str	r3, [r2, #68]	; 0x44
 8003192:	4b2e      	ldr	r3, [pc, #184]	; (800324c <HAL_SPI_MspInit+0xec>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	4b2a      	ldr	r3, [pc, #168]	; (800324c <HAL_SPI_MspInit+0xec>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	4a29      	ldr	r2, [pc, #164]	; (800324c <HAL_SPI_MspInit+0xec>)
 80031a8:	f043 0302 	orr.w	r3, r3, #2
 80031ac:	6313      	str	r3, [r2, #48]	; 0x30
 80031ae:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_SPI_MspInit+0xec>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80031ba:	2338      	movs	r3, #56	; 0x38
 80031bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031be:	2302      	movs	r3, #2
 80031c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c6:	2303      	movs	r3, #3
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031ca:	2305      	movs	r3, #5
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ce:	f107 031c 	add.w	r3, r7, #28
 80031d2:	4619      	mov	r1, r3
 80031d4:	481e      	ldr	r0, [pc, #120]	; (8003250 <HAL_SPI_MspInit+0xf0>)
 80031d6:	f004 f8e1 	bl	800739c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80031da:	e031      	b.n	8003240 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <HAL_SPI_MspInit+0xf4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d12c      	bne.n	8003240 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_SPI_MspInit+0xec>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <HAL_SPI_MspInit+0xec>)
 80031f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f4:	6413      	str	r3, [r2, #64]	; 0x40
 80031f6:	4b15      	ldr	r3, [pc, #84]	; (800324c <HAL_SPI_MspInit+0xec>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003202:	2300      	movs	r3, #0
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	4b11      	ldr	r3, [pc, #68]	; (800324c <HAL_SPI_MspInit+0xec>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a10      	ldr	r2, [pc, #64]	; (800324c <HAL_SPI_MspInit+0xec>)
 800320c:	f043 0302 	orr.w	r3, r3, #2
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_SPI_MspInit+0xec>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800321e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322c:	2303      	movs	r3, #3
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003230:	2305      	movs	r3, #5
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003234:	f107 031c 	add.w	r3, r7, #28
 8003238:	4619      	mov	r1, r3
 800323a:	4805      	ldr	r0, [pc, #20]	; (8003250 <HAL_SPI_MspInit+0xf0>)
 800323c:	f004 f8ae 	bl	800739c <HAL_GPIO_Init>
}
 8003240:	bf00      	nop
 8003242:	3730      	adds	r7, #48	; 0x30
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40013000 	.word	0x40013000
 800324c:	40023800 	.word	0x40023800
 8003250:	40020400 	.word	0x40020400
 8003254:	40003800 	.word	0x40003800

08003258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <HAL_MspInit+0x4c>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	4a0f      	ldr	r2, [pc, #60]	; (80032a4 <HAL_MspInit+0x4c>)
 8003268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800326c:	6453      	str	r3, [r2, #68]	; 0x44
 800326e:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <HAL_MspInit+0x4c>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_MspInit+0x4c>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <HAL_MspInit+0x4c>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003288:	6413      	str	r3, [r2, #64]	; 0x40
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_MspInit+0x4c>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800

080032a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032ac:	e7fe      	b.n	80032ac <NMI_Handler+0x4>

080032ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032b2:	e7fe      	b.n	80032b2 <HardFault_Handler+0x4>

080032b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b8:	e7fe      	b.n	80032b8 <MemManage_Handler+0x4>

080032ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032be:	e7fe      	b.n	80032be <BusFault_Handler+0x4>

080032c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c4:	e7fe      	b.n	80032c4 <UsageFault_Handler+0x4>

080032c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f4:	f002 ff2e 	bl	8006154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}

080032fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <USART2_IRQHandler+0x10>)
 8003302:	f008 fa35 	bl	800b770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	200015e0 	.word	0x200015e0

08003310 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003314:	4802      	ldr	r0, [pc, #8]	; (8003320 <DMA2_Stream2_IRQHandler+0x10>)
 8003316:	f003 fdd7 	bl	8006ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	2000153c 	.word	0x2000153c

08003324 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003328:	4802      	ldr	r0, [pc, #8]	; (8003334 <OTG_FS_IRQHandler+0x10>)
 800332a:	f005 fad2 	bl	80088d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20002f68 	.word	0x20002f68

08003338 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
	return 1;
 800333c:	2301      	movs	r3, #1
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <_kill>:

int _kill(int pid, int sig)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003352:	f00f fdf9 	bl	8012f48 <__errno>
 8003356:	4603      	mov	r3, r0
 8003358:	2216      	movs	r2, #22
 800335a:	601a      	str	r2, [r3, #0]
	return -1;
 800335c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <_exit>:

void _exit (int status)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003370:	f04f 31ff 	mov.w	r1, #4294967295
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ffe7 	bl	8003348 <_kill>
	while (1) {}		/* Make sure we hang here */
 800337a:	e7fe      	b.n	800337a <_exit+0x12>

0800337c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e00a      	b.n	80033a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800338e:	f3af 8000 	nop.w
 8003392:	4601      	mov	r1, r0
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	60ba      	str	r2, [r7, #8]
 800339a:	b2ca      	uxtb	r2, r1
 800339c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	3301      	adds	r3, #1
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	dbf0      	blt.n	800338e <_read+0x12>
	}

return len;
 80033ac:	687b      	ldr	r3, [r7, #4]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b086      	sub	sp, #24
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e009      	b.n	80033dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	60ba      	str	r2, [r7, #8]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	3301      	adds	r3, #1
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	dbf1      	blt.n	80033c8 <_write+0x12>
	}
	return len;
 80033e4:	687b      	ldr	r3, [r7, #4]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <_close>:

int _close(int file)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
	return -1;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003416:	605a      	str	r2, [r3, #4]
	return 0;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <_isatty>:

int _isatty(int file)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
	return 1;
 800342e:	2301      	movs	r3, #1
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
	return 0;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <_sbrk+0x5c>)
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <_sbrk+0x60>)
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800346c:	4b13      	ldr	r3, [pc, #76]	; (80034bc <_sbrk+0x64>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d102      	bne.n	800347a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <_sbrk+0x64>)
 8003476:	4a12      	ldr	r2, [pc, #72]	; (80034c0 <_sbrk+0x68>)
 8003478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <_sbrk+0x64>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	429a      	cmp	r2, r3
 8003486:	d207      	bcs.n	8003498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003488:	f00f fd5e 	bl	8012f48 <__errno>
 800348c:	4603      	mov	r3, r0
 800348e:	220c      	movs	r2, #12
 8003490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003492:	f04f 33ff 	mov.w	r3, #4294967295
 8003496:	e009      	b.n	80034ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003498:	4b08      	ldr	r3, [pc, #32]	; (80034bc <_sbrk+0x64>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <_sbrk+0x64>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	4a05      	ldr	r2, [pc, #20]	; (80034bc <_sbrk+0x64>)
 80034a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034aa:	68fb      	ldr	r3, [r7, #12]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20020000 	.word	0x20020000
 80034b8:	00000400 	.word	0x00000400
 80034bc:	20000424 	.word	0x20000424
 80034c0:	20003380 	.word	0x20003380

080034c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <SystemInit+0x28>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	4a07      	ldr	r2, [pc, #28]	; (80034ec <SystemInit+0x28>)
 80034d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <SystemInit+0x28>)
 80034da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034de:	609a      	str	r2, [r3, #8]
#endif
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b08a      	sub	sp, #40	; 0x28
 80034f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034f6:	f107 0320 	add.w	r3, r7, #32
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	60da      	str	r2, [r3, #12]
 800350c:	611a      	str	r2, [r3, #16]
 800350e:	615a      	str	r2, [r3, #20]
 8003510:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003512:	4b22      	ldr	r3, [pc, #136]	; (800359c <MX_TIM2_Init+0xac>)
 8003514:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003518:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200-1;
 800351a:	4b20      	ldr	r3, [pc, #128]	; (800359c <MX_TIM2_Init+0xac>)
 800351c:	f640 427f 	movw	r2, #3199	; 0xc7f
 8003520:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003522:	4b1e      	ldr	r3, [pc, #120]	; (800359c <MX_TIM2_Init+0xac>)
 8003524:	2200      	movs	r2, #0
 8003526:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003528:	4b1c      	ldr	r3, [pc, #112]	; (800359c <MX_TIM2_Init+0xac>)
 800352a:	2263      	movs	r2, #99	; 0x63
 800352c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800352e:	4b1b      	ldr	r3, [pc, #108]	; (800359c <MX_TIM2_Init+0xac>)
 8003530:	2200      	movs	r2, #0
 8003532:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003534:	4b19      	ldr	r3, [pc, #100]	; (800359c <MX_TIM2_Init+0xac>)
 8003536:	2200      	movs	r2, #0
 8003538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800353a:	4818      	ldr	r0, [pc, #96]	; (800359c <MX_TIM2_Init+0xac>)
 800353c:	f007 f9b3 	bl	800a8a6 <HAL_TIM_PWM_Init>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003546:	f7ff fd99 	bl	800307c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003552:	f107 0320 	add.w	r3, r7, #32
 8003556:	4619      	mov	r1, r3
 8003558:	4810      	ldr	r0, [pc, #64]	; (800359c <MX_TIM2_Init+0xac>)
 800355a:	f007 ff4d 	bl	800b3f8 <HAL_TIMEx_MasterConfigSynchronization>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003564:	f7ff fd8a 	bl	800307c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003568:	2360      	movs	r3, #96	; 0x60
 800356a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	2200      	movs	r2, #0
 800357c:	4619      	mov	r1, r3
 800357e:	4807      	ldr	r0, [pc, #28]	; (800359c <MX_TIM2_Init+0xac>)
 8003580:	f007 faa8 	bl	800aad4 <HAL_TIM_PWM_ConfigChannel>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800358a:	f7ff fd77 	bl	800307c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800358e:	4803      	ldr	r0, [pc, #12]	; (800359c <MX_TIM2_Init+0xac>)
 8003590:	f000 f94e 	bl	8003830 <HAL_TIM_MspPostInit>

}
 8003594:	bf00      	nop
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	200014ac 	.word	0x200014ac

080035a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035a6:	f107 0320 	add.w	r3, r7, #32
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035b0:	1d3b      	adds	r3, r7, #4
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	605a      	str	r2, [r3, #4]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	60da      	str	r2, [r3, #12]
 80035bc:	611a      	str	r2, [r3, #16]
 80035be:	615a      	str	r2, [r3, #20]
 80035c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035c2:	4b32      	ldr	r3, [pc, #200]	; (800368c <MX_TIM3_Init+0xec>)
 80035c4:	4a32      	ldr	r2, [pc, #200]	; (8003690 <MX_TIM3_Init+0xf0>)
 80035c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3200-1;
 80035c8:	4b30      	ldr	r3, [pc, #192]	; (800368c <MX_TIM3_Init+0xec>)
 80035ca:	f640 427f 	movw	r2, #3199	; 0xc7f
 80035ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d0:	4b2e      	ldr	r3, [pc, #184]	; (800368c <MX_TIM3_Init+0xec>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80035d6:	4b2d      	ldr	r3, [pc, #180]	; (800368c <MX_TIM3_Init+0xec>)
 80035d8:	2263      	movs	r2, #99	; 0x63
 80035da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035dc:	4b2b      	ldr	r3, [pc, #172]	; (800368c <MX_TIM3_Init+0xec>)
 80035de:	2200      	movs	r2, #0
 80035e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e2:	4b2a      	ldr	r3, [pc, #168]	; (800368c <MX_TIM3_Init+0xec>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035e8:	4828      	ldr	r0, [pc, #160]	; (800368c <MX_TIM3_Init+0xec>)
 80035ea:	f007 f95c 	bl	800a8a6 <HAL_TIM_PWM_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80035f4:	f7ff fd42 	bl	800307c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f8:	2300      	movs	r3, #0
 80035fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003600:	f107 0320 	add.w	r3, r7, #32
 8003604:	4619      	mov	r1, r3
 8003606:	4821      	ldr	r0, [pc, #132]	; (800368c <MX_TIM3_Init+0xec>)
 8003608:	f007 fef6 	bl	800b3f8 <HAL_TIMEx_MasterConfigSynchronization>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003612:	f7ff fd33 	bl	800307c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003616:	2360      	movs	r3, #96	; 0x60
 8003618:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	2200      	movs	r2, #0
 800362a:	4619      	mov	r1, r3
 800362c:	4817      	ldr	r0, [pc, #92]	; (800368c <MX_TIM3_Init+0xec>)
 800362e:	f007 fa51 	bl	800aad4 <HAL_TIM_PWM_ConfigChannel>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003638:	f7ff fd20 	bl	800307c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	2204      	movs	r2, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4812      	ldr	r0, [pc, #72]	; (800368c <MX_TIM3_Init+0xec>)
 8003644:	f007 fa46 	bl	800aad4 <HAL_TIM_PWM_ConfigChannel>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800364e:	f7ff fd15 	bl	800307c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003652:	1d3b      	adds	r3, r7, #4
 8003654:	2208      	movs	r2, #8
 8003656:	4619      	mov	r1, r3
 8003658:	480c      	ldr	r0, [pc, #48]	; (800368c <MX_TIM3_Init+0xec>)
 800365a:	f007 fa3b 	bl	800aad4 <HAL_TIM_PWM_ConfigChannel>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8003664:	f7ff fd0a 	bl	800307c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003668:	1d3b      	adds	r3, r7, #4
 800366a:	220c      	movs	r2, #12
 800366c:	4619      	mov	r1, r3
 800366e:	4807      	ldr	r0, [pc, #28]	; (800368c <MX_TIM3_Init+0xec>)
 8003670:	f007 fa30 	bl	800aad4 <HAL_TIM_PWM_ConfigChannel>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800367a:	f7ff fcff 	bl	800307c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800367e:	4803      	ldr	r0, [pc, #12]	; (800368c <MX_TIM3_Init+0xec>)
 8003680:	f000 f8d6 	bl	8003830 <HAL_TIM_MspPostInit>

}
 8003684:	bf00      	nop
 8003686:	3728      	adds	r7, #40	; 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200014f4 	.word	0x200014f4
 8003690:	40000400 	.word	0x40000400

08003694 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08e      	sub	sp, #56	; 0x38
 8003698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800369a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	609a      	str	r2, [r3, #8]
 80036a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036a8:	f107 0320 	add.w	r3, r7, #32
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036b2:	1d3b      	adds	r3, r7, #4
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
 80036c0:	615a      	str	r2, [r3, #20]
 80036c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80036c4:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <MX_TIM4_Init+0xe4>)
 80036c6:	4a2d      	ldr	r2, [pc, #180]	; (800377c <MX_TIM4_Init+0xe8>)
 80036c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 80036ca:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <MX_TIM4_Init+0xe4>)
 80036cc:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80036d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d2:	4b29      	ldr	r3, [pc, #164]	; (8003778 <MX_TIM4_Init+0xe4>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 80036d8:	4b27      	ldr	r3, [pc, #156]	; (8003778 <MX_TIM4_Init+0xe4>)
 80036da:	2209      	movs	r2, #9
 80036dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036de:	4b26      	ldr	r3, [pc, #152]	; (8003778 <MX_TIM4_Init+0xe4>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e4:	4b24      	ldr	r3, [pc, #144]	; (8003778 <MX_TIM4_Init+0xe4>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80036ea:	4823      	ldr	r0, [pc, #140]	; (8003778 <MX_TIM4_Init+0xe4>)
 80036ec:	f007 f88c 	bl	800a808 <HAL_TIM_Base_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80036f6:	f7ff fcc1 	bl	800307c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003704:	4619      	mov	r1, r3
 8003706:	481c      	ldr	r0, [pc, #112]	; (8003778 <MX_TIM4_Init+0xe4>)
 8003708:	f007 faa2 	bl	800ac50 <HAL_TIM_ConfigClockSource>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003712:	f7ff fcb3 	bl	800307c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003716:	4818      	ldr	r0, [pc, #96]	; (8003778 <MX_TIM4_Init+0xe4>)
 8003718:	f007 f8c5 	bl	800a8a6 <HAL_TIM_PWM_Init>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003722:	f7ff fcab 	bl	800307c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003726:	2320      	movs	r3, #32
 8003728:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800372a:	2300      	movs	r3, #0
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800372e:	f107 0320 	add.w	r3, r7, #32
 8003732:	4619      	mov	r1, r3
 8003734:	4810      	ldr	r0, [pc, #64]	; (8003778 <MX_TIM4_Init+0xe4>)
 8003736:	f007 fe5f 	bl	800b3f8 <HAL_TIMEx_MasterConfigSynchronization>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003740:	f7ff fc9c 	bl	800307c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003744:	2360      	movs	r3, #96	; 0x60
 8003746:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003754:	1d3b      	adds	r3, r7, #4
 8003756:	2208      	movs	r2, #8
 8003758:	4619      	mov	r1, r3
 800375a:	4807      	ldr	r0, [pc, #28]	; (8003778 <MX_TIM4_Init+0xe4>)
 800375c:	f007 f9ba 	bl	800aad4 <HAL_TIM_PWM_ConfigChannel>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003766:	f7ff fc89 	bl	800307c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800376a:	4803      	ldr	r0, [pc, #12]	; (8003778 <MX_TIM4_Init+0xe4>)
 800376c:	f000 f860 	bl	8003830 <HAL_TIM_MspPostInit>

}
 8003770:	bf00      	nop
 8003772:	3738      	adds	r7, #56	; 0x38
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20001464 	.word	0x20001464
 800377c:	40000800 	.word	0x40000800

08003780 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003790:	d10e      	bne.n	80037b0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <HAL_TIM_PWM_MspInit+0x64>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	4a12      	ldr	r2, [pc, #72]	; (80037e4 <HAL_TIM_PWM_MspInit+0x64>)
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	6413      	str	r3, [r2, #64]	; 0x40
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <HAL_TIM_PWM_MspInit+0x64>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80037ae:	e012      	b.n	80037d6 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0c      	ldr	r2, [pc, #48]	; (80037e8 <HAL_TIM_PWM_MspInit+0x68>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10d      	bne.n	80037d6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_TIM_PWM_MspInit+0x64>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a08      	ldr	r2, [pc, #32]	; (80037e4 <HAL_TIM_PWM_MspInit+0x64>)
 80037c4:	f043 0302 	orr.w	r3, r3, #2
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_TIM_PWM_MspInit+0x64>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
}
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40000400 	.word	0x40000400

080037ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <HAL_TIM_Base_MspInit+0x3c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10d      	bne.n	800381a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_TIM_Base_MspInit+0x40>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_TIM_Base_MspInit+0x40>)
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <HAL_TIM_Base_MspInit+0x40>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40000800 	.word	0x40000800
 800382c:	40023800 	.word	0x40023800

08003830 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08c      	sub	sp, #48	; 0x30
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003838:	f107 031c 	add.w	r3, r7, #28
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d11e      	bne.n	8003890 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	4b43      	ldr	r3, [pc, #268]	; (8003964 <HAL_TIM_MspPostInit+0x134>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a42      	ldr	r2, [pc, #264]	; (8003964 <HAL_TIM_MspPostInit+0x134>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b40      	ldr	r3, [pc, #256]	; (8003964 <HAL_TIM_MspPostInit+0x134>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	61bb      	str	r3, [r7, #24]
 800386c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800386e:	2320      	movs	r3, #32
 8003870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003872:	2302      	movs	r3, #2
 8003874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387a:	2300      	movs	r3, #0
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800387e:	2301      	movs	r3, #1
 8003880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003882:	f107 031c 	add.w	r3, r7, #28
 8003886:	4619      	mov	r1, r3
 8003888:	4837      	ldr	r0, [pc, #220]	; (8003968 <HAL_TIM_MspPostInit+0x138>)
 800388a:	f003 fd87 	bl	800739c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800388e:	e065      	b.n	800395c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM3)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a35      	ldr	r2, [pc, #212]	; (800396c <HAL_TIM_MspPostInit+0x13c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d13c      	bne.n	8003914 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	4b31      	ldr	r3, [pc, #196]	; (8003964 <HAL_TIM_MspPostInit+0x134>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4a30      	ldr	r2, [pc, #192]	; (8003964 <HAL_TIM_MspPostInit+0x134>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6313      	str	r3, [r2, #48]	; 0x30
 80038aa:	4b2e      	ldr	r3, [pc, #184]	; (8003964 <HAL_TIM_MspPostInit+0x134>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <HAL_TIM_MspPostInit+0x134>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	4a29      	ldr	r2, [pc, #164]	; (8003964 <HAL_TIM_MspPostInit+0x134>)
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	6313      	str	r3, [r2, #48]	; 0x30
 80038c6:	4b27      	ldr	r3, [pc, #156]	; (8003964 <HAL_TIM_MspPostInit+0x134>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038d2:	23c0      	movs	r3, #192	; 0xc0
 80038d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d6:	2302      	movs	r3, #2
 80038d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038de:	2300      	movs	r3, #0
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038e2:	2302      	movs	r3, #2
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e6:	f107 031c 	add.w	r3, r7, #28
 80038ea:	4619      	mov	r1, r3
 80038ec:	481e      	ldr	r0, [pc, #120]	; (8003968 <HAL_TIM_MspPostInit+0x138>)
 80038ee:	f003 fd55 	bl	800739c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038f2:	2303      	movs	r3, #3
 80038f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fe:	2300      	movs	r3, #0
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003902:	2302      	movs	r3, #2
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003906:	f107 031c 	add.w	r3, r7, #28
 800390a:	4619      	mov	r1, r3
 800390c:	4818      	ldr	r0, [pc, #96]	; (8003970 <HAL_TIM_MspPostInit+0x140>)
 800390e:	f003 fd45 	bl	800739c <HAL_GPIO_Init>
}
 8003912:	e023      	b.n	800395c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a16      	ldr	r2, [pc, #88]	; (8003974 <HAL_TIM_MspPostInit+0x144>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d11e      	bne.n	800395c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <HAL_TIM_MspPostInit+0x134>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a0f      	ldr	r2, [pc, #60]	; (8003964 <HAL_TIM_MspPostInit+0x134>)
 8003928:	f043 0302 	orr.w	r3, r3, #2
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <HAL_TIM_MspPostInit+0x134>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800393a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800393e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003940:	2302      	movs	r3, #2
 8003942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003948:	2300      	movs	r3, #0
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800394c:	2302      	movs	r3, #2
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003950:	f107 031c 	add.w	r3, r7, #28
 8003954:	4619      	mov	r1, r3
 8003956:	4806      	ldr	r0, [pc, #24]	; (8003970 <HAL_TIM_MspPostInit+0x140>)
 8003958:	f003 fd20 	bl	800739c <HAL_GPIO_Init>
}
 800395c:	bf00      	nop
 800395e:	3730      	adds	r7, #48	; 0x30
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40023800 	.word	0x40023800
 8003968:	40020000 	.word	0x40020000
 800396c:	40000400 	.word	0x40000400
 8003970:	40020400 	.word	0x40020400
 8003974:	40000800 	.word	0x40000800

08003978 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern I2C_HandleTypeDef hi2c2;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	460b      	mov	r3, r1
 8003984:	72fb      	strb	r3, [r7, #11]
 8003986:	4613      	mov	r3, r2
 8003988:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 800398a:	7afb      	ldrb	r3, [r7, #11]
 800398c:	2b28      	cmp	r3, #40	; 0x28
 800398e:	d006      	beq.n	800399e <u8x8_stm32_gpio_and_delay+0x26>
 8003990:	2b29      	cmp	r3, #41	; 0x29
 8003992:	d105      	bne.n	80039a0 <u8x8_stm32_gpio_and_delay+0x28>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8003994:	7abb      	ldrb	r3, [r7, #10]
 8003996:	4618      	mov	r0, r3
 8003998:	f002 fbfc 	bl	8006194 <HAL_Delay>
		break;
 800399c:	e000      	b.n	80039a0 <u8x8_stm32_gpio_and_delay+0x28>
		break;
 800399e:	bf00      	nop
	}
	return 1;
 80039a0:	2301      	movs	r3, #1
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <u8x8_byte_stm32_hw_i2c>:


uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	460b      	mov	r3, r1
 80039b8:	72fb      	strb	r3, [r7, #11]
 80039ba:	4613      	mov	r3, r2
 80039bc:	72bb      	strb	r3, [r7, #10]
	/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch(msg)
 80039be:	7afb      	ldrb	r3, [r7, #11]
 80039c0:	3b14      	subs	r3, #20
 80039c2:	2b0c      	cmp	r3, #12
 80039c4:	d847      	bhi.n	8003a56 <u8x8_byte_stm32_hw_i2c+0xaa>
 80039c6:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <u8x8_byte_stm32_hw_i2c+0x20>)
 80039c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039cc:	08003a5b 	.word	0x08003a5b
 80039d0:	08003a57 	.word	0x08003a57
 80039d4:	08003a57 	.word	0x08003a57
 80039d8:	08003a01 	.word	0x08003a01
 80039dc:	08003a31 	.word	0x08003a31
 80039e0:	08003a39 	.word	0x08003a39
 80039e4:	08003a57 	.word	0x08003a57
 80039e8:	08003a57 	.word	0x08003a57
 80039ec:	08003a57 	.word	0x08003a57
 80039f0:	08003a57 	.word	0x08003a57
 80039f4:	08003a57 	.word	0x08003a57
 80039f8:	08003a57 	.word	0x08003a57
 80039fc:	08003a5b 	.word	0x08003a5b
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	617b      	str	r3, [r7, #20]
		while( arg_int > 0 )
 8003a04:	e010      	b.n	8003a28 <u8x8_byte_stm32_hw_i2c+0x7c>
		{
			buffer[buf_idx++] = *data;
 8003a06:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <u8x8_byte_stm32_hw_i2c+0xc0>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	b2d1      	uxtb	r1, r2
 8003a0e:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <u8x8_byte_stm32_hw_i2c+0xc0>)
 8003a10:	7011      	strb	r1, [r2, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	7819      	ldrb	r1, [r3, #0]
 8003a18:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <u8x8_byte_stm32_hw_i2c+0xc4>)
 8003a1a:	5499      	strb	r1, [r3, r2]
			data++;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
			arg_int--;
 8003a22:	7abb      	ldrb	r3, [r7, #10]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	72bb      	strb	r3, [r7, #10]
		while( arg_int > 0 )
 8003a28:	7abb      	ldrb	r3, [r7, #10]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1eb      	bne.n	8003a06 <u8x8_byte_stm32_hw_i2c+0x5a>
		}
		break;
 8003a2e:	e017      	b.n	8003a60 <u8x8_byte_stm32_hw_i2c+0xb4>
		/* add your custom code to init i2c subsystem */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <u8x8_byte_stm32_hw_i2c+0xc0>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	701a      	strb	r2, [r3, #0]
		break;
 8003a36:	e013      	b.n	8003a60 <u8x8_byte_stm32_hw_i2c+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		if(HAL_I2C_Master_Transmit(&hi2c2, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <u8x8_byte_stm32_hw_i2c+0xc0>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2264      	movs	r2, #100	; 0x64
 8003a40:	9200      	str	r2, [sp, #0]
 8003a42:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <u8x8_byte_stm32_hw_i2c+0xc4>)
 8003a44:	2178      	movs	r1, #120	; 0x78
 8003a46:	480b      	ldr	r0, [pc, #44]	; (8003a74 <u8x8_byte_stm32_hw_i2c+0xc8>)
 8003a48:	f003 ffa2 	bl	8007990 <HAL_I2C_Master_Transmit>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <u8x8_byte_stm32_hw_i2c+0xb2>
 8003a52:	2300      	movs	r3, #0
 8003a54:	e005      	b.n	8003a62 <u8x8_byte_stm32_hw_i2c+0xb6>
		break;
	default:
		return 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e003      	b.n	8003a62 <u8x8_byte_stm32_hw_i2c+0xb6>
		break;
 8003a5a:	bf00      	nop
 8003a5c:	e000      	b.n	8003a60 <u8x8_byte_stm32_hw_i2c+0xb4>
		break;
 8003a5e:	bf00      	nop
	}
	return 1;
 8003a60:	2301      	movs	r3, #1
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000428 	.word	0x20000428
 8003a70:	2000042c 	.word	0x2000042c
 8003a74:	20000db0 	.word	0x20000db0

08003a78 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <MX_USART1_UART_Init+0x4c>)
 8003a7e:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <MX_USART1_UART_Init+0x50>)
 8003a80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <MX_USART1_UART_Init+0x4c>)
 8003a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <MX_USART1_UART_Init+0x4c>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <MX_USART1_UART_Init+0x4c>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <MX_USART1_UART_Init+0x4c>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a9c:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <MX_USART1_UART_Init+0x4c>)
 8003a9e:	220c      	movs	r2, #12
 8003aa0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <MX_USART1_UART_Init+0x4c>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <MX_USART1_UART_Init+0x4c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003aae:	4805      	ldr	r0, [pc, #20]	; (8003ac4 <MX_USART1_UART_Init+0x4c>)
 8003ab0:	f007 fd1e 	bl	800b4f0 <HAL_UART_Init>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003aba:	f7ff fadf 	bl	800307c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003abe:	bf00      	nop
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	2000159c 	.word	0x2000159c
 8003ac8:	40011000 	.word	0x40011000

08003acc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ad0:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003ad2:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <MX_USART2_UART_Init+0x50>)
 8003ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003ad8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ade:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003af0:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003af2:	220c      	movs	r2, #12
 8003af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003af6:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b02:	4805      	ldr	r0, [pc, #20]	; (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003b04:	f007 fcf4 	bl	800b4f0 <HAL_UART_Init>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b0e:	f7ff fab5 	bl	800307c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200015e0 	.word	0x200015e0
 8003b1c:	40004400 	.word	0x40004400

08003b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	; 0x30
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 031c 	add.w	r3, r7, #28
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a4d      	ldr	r2, [pc, #308]	; (8003c74 <HAL_UART_MspInit+0x154>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d15b      	bne.n	8003bfa <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	4b4c      	ldr	r3, [pc, #304]	; (8003c78 <HAL_UART_MspInit+0x158>)
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	4a4b      	ldr	r2, [pc, #300]	; (8003c78 <HAL_UART_MspInit+0x158>)
 8003b4c:	f043 0310 	orr.w	r3, r3, #16
 8003b50:	6453      	str	r3, [r2, #68]	; 0x44
 8003b52:	4b49      	ldr	r3, [pc, #292]	; (8003c78 <HAL_UART_MspInit+0x158>)
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	61bb      	str	r3, [r7, #24]
 8003b5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	4b45      	ldr	r3, [pc, #276]	; (8003c78 <HAL_UART_MspInit+0x158>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	4a44      	ldr	r2, [pc, #272]	; (8003c78 <HAL_UART_MspInit+0x158>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6e:	4b42      	ldr	r3, [pc, #264]	; (8003c78 <HAL_UART_MspInit+0x158>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b80:	2302      	movs	r3, #2
 8003b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b8c:	2307      	movs	r3, #7
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b90:	f107 031c 	add.w	r3, r7, #28
 8003b94:	4619      	mov	r1, r3
 8003b96:	4839      	ldr	r0, [pc, #228]	; (8003c7c <HAL_UART_MspInit+0x15c>)
 8003b98:	f003 fc00 	bl	800739c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003b9c:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003b9e:	4a39      	ldr	r2, [pc, #228]	; (8003c84 <HAL_UART_MspInit+0x164>)
 8003ba0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003ba2:	4b37      	ldr	r3, [pc, #220]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003ba4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ba8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003baa:	4b35      	ldr	r3, [pc, #212]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bb0:	4b33      	ldr	r3, [pc, #204]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bb6:	4b32      	ldr	r3, [pc, #200]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003bb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bbc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bbe:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bc4:	4b2e      	ldr	r3, [pc, #184]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003bca:	4b2d      	ldr	r3, [pc, #180]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003bd0:	4b2b      	ldr	r3, [pc, #172]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bd6:	4b2a      	ldr	r3, [pc, #168]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003bdc:	4828      	ldr	r0, [pc, #160]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003bde:	f002 ffdb 	bl	8006b98 <HAL_DMA_Init>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003be8:	f7ff fa48 	bl	800307c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a24      	ldr	r2, [pc, #144]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003bf0:	639a      	str	r2, [r3, #56]	; 0x38
 8003bf2:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <HAL_UART_MspInit+0x160>)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003bf8:	e038      	b.n	8003c6c <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART2)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a22      	ldr	r2, [pc, #136]	; (8003c88 <HAL_UART_MspInit+0x168>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d133      	bne.n	8003c6c <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c04:	2300      	movs	r3, #0
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <HAL_UART_MspInit+0x158>)
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	4a1a      	ldr	r2, [pc, #104]	; (8003c78 <HAL_UART_MspInit+0x158>)
 8003c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c12:	6413      	str	r3, [r2, #64]	; 0x40
 8003c14:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <HAL_UART_MspInit+0x158>)
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <HAL_UART_MspInit+0x158>)
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	4a13      	ldr	r2, [pc, #76]	; (8003c78 <HAL_UART_MspInit+0x158>)
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c30:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <HAL_UART_MspInit+0x158>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c3c:	230c      	movs	r3, #12
 8003c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c40:	2302      	movs	r3, #2
 8003c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c4c:	2307      	movs	r3, #7
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c50:	f107 031c 	add.w	r3, r7, #28
 8003c54:	4619      	mov	r1, r3
 8003c56:	4809      	ldr	r0, [pc, #36]	; (8003c7c <HAL_UART_MspInit+0x15c>)
 8003c58:	f003 fba0 	bl	800739c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	2100      	movs	r1, #0
 8003c60:	2026      	movs	r0, #38	; 0x26
 8003c62:	f002 ff62 	bl	8006b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c66:	2026      	movs	r0, #38	; 0x26
 8003c68:	f002 ff7b 	bl	8006b62 <HAL_NVIC_EnableIRQ>
}
 8003c6c:	bf00      	nop
 8003c6e:	3730      	adds	r7, #48	; 0x30
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40011000 	.word	0x40011000
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	40020000 	.word	0x40020000
 8003c80:	2000153c 	.word	0x2000153c
 8003c84:	40026440 	.word	0x40026440
 8003c88:	40004400 	.word	0x40004400

08003c8c <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	4608      	mov	r0, r1
 8003c96:	4611      	mov	r1, r2
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	70fb      	strb	r3, [r7, #3]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	70bb      	strb	r3, [r7, #2]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	787b      	ldrb	r3, [r7, #1]
 8003caa:	4413      	add	r3, r2
 8003cac:	b2d8      	uxtb	r0, r3
 8003cae:	78ba      	ldrb	r2, [r7, #2]
 8003cb0:	7c3b      	ldrb	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	78ba      	ldrb	r2, [r7, #2]
 8003cb8:	78f9      	ldrb	r1, [r7, #3]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f001 fbe6 	bl	8005490 <u8g2_IsIntersection>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d012      	beq.n	8003cf0 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8003cca:	e00d      	b.n	8003ce8 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8003ccc:	787b      	ldrb	r3, [r7, #1]
 8003cce:	78ba      	ldrb	r2, [r7, #2]
 8003cd0:	78f9      	ldrb	r1, [r7, #3]
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	9000      	str	r0, [sp, #0]
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f001 fabf 	bl	800525a <u8g2_DrawHVLine>
    y++;    
 8003cdc:	78bb      	ldrb	r3, [r7, #2]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	70bb      	strb	r3, [r7, #2]
    h--;
 8003ce2:	7c3b      	ldrb	r3, [r7, #16]
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8003ce8:	7c3b      	ldrb	r3, [r7, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1ee      	bne.n	8003ccc <u8g2_DrawBox+0x40>
 8003cee:	e000      	b.n	8003cf2 <u8g2_DrawBox+0x66>
    return;
 8003cf0:	bf00      	nop
  }
}
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	4608      	mov	r0, r1
 8003d02:	4611      	mov	r1, r2
 8003d04:	461a      	mov	r2, r3
 8003d06:	4603      	mov	r3, r0
 8003d08:	70fb      	strb	r3, [r7, #3]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	70bb      	strb	r3, [r7, #2]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003d12:	78fa      	ldrb	r2, [r7, #3]
 8003d14:	787b      	ldrb	r3, [r7, #1]
 8003d16:	4413      	add	r3, r2
 8003d18:	b2d8      	uxtb	r0, r3
 8003d1a:	78ba      	ldrb	r2, [r7, #2]
 8003d1c:	7e3b      	ldrb	r3, [r7, #24]
 8003d1e:	4413      	add	r3, r2
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	78ba      	ldrb	r2, [r7, #2]
 8003d24:	78f9      	ldrb	r1, [r7, #3]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	4603      	mov	r3, r0
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f001 fbb0 	bl	8005490 <u8g2_IsIntersection>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 808c 	beq.w	8003e50 <u8g2_DrawRBox+0x158>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	73fb      	strb	r3, [r7, #15]
  xl += r;
 8003d3c:	7bfa      	ldrb	r2, [r7, #15]
 8003d3e:	7f3b      	ldrb	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8003d44:	78bb      	ldrb	r3, [r7, #2]
 8003d46:	73bb      	strb	r3, [r7, #14]
  yu += r;
 8003d48:	7bba      	ldrb	r2, [r7, #14]
 8003d4a:	7f3b      	ldrb	r3, [r7, #28]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	73bb      	strb	r3, [r7, #14]
 
  xr = x;
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	737b      	strb	r3, [r7, #13]
  xr += w;
 8003d54:	7b7a      	ldrb	r2, [r7, #13]
 8003d56:	787b      	ldrb	r3, [r7, #1]
 8003d58:	4413      	add	r3, r2
 8003d5a:	737b      	strb	r3, [r7, #13]
  xr -= r;
 8003d5c:	7b7a      	ldrb	r2, [r7, #13]
 8003d5e:	7f3b      	ldrb	r3, [r7, #28]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	737b      	strb	r3, [r7, #13]
  xr -= 1;
 8003d64:	7b7b      	ldrb	r3, [r7, #13]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	737b      	strb	r3, [r7, #13]
  
  yl = y;
 8003d6a:	78bb      	ldrb	r3, [r7, #2]
 8003d6c:	733b      	strb	r3, [r7, #12]
  yl += h;
 8003d6e:	7b3a      	ldrb	r2, [r7, #12]
 8003d70:	7e3b      	ldrb	r3, [r7, #24]
 8003d72:	4413      	add	r3, r2
 8003d74:	733b      	strb	r3, [r7, #12]
  yl -= r; 
 8003d76:	7b3a      	ldrb	r2, [r7, #12]
 8003d78:	7f3b      	ldrb	r3, [r7, #28]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	733b      	strb	r3, [r7, #12]
  yl -= 1;
 8003d7e:	7b3b      	ldrb	r3, [r7, #12]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	733b      	strb	r3, [r7, #12]

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8003d84:	7f3b      	ldrb	r3, [r7, #28]
 8003d86:	7bba      	ldrb	r2, [r7, #14]
 8003d88:	7bf9      	ldrb	r1, [r7, #15]
 8003d8a:	2002      	movs	r0, #2
 8003d8c:	9000      	str	r0, [sp, #0]
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fbec 	bl	800456c <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8003d94:	7f3b      	ldrb	r3, [r7, #28]
 8003d96:	7bba      	ldrb	r2, [r7, #14]
 8003d98:	7b79      	ldrb	r1, [r7, #13]
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	9000      	str	r0, [sp, #0]
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fbe4 	bl	800456c <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8003da4:	7f3b      	ldrb	r3, [r7, #28]
 8003da6:	7b3a      	ldrb	r2, [r7, #12]
 8003da8:	7bf9      	ldrb	r1, [r7, #15]
 8003daa:	2004      	movs	r0, #4
 8003dac:	9000      	str	r0, [sp, #0]
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fbdc 	bl	800456c <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8003db4:	7f3b      	ldrb	r3, [r7, #28]
 8003db6:	7b3a      	ldrb	r2, [r7, #12]
 8003db8:	7b79      	ldrb	r1, [r7, #13]
 8003dba:	2008      	movs	r0, #8
 8003dbc:	9000      	str	r0, [sp, #0]
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fbd4 	bl	800456c <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8003dc4:	787b      	ldrb	r3, [r7, #1]
 8003dc6:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003dc8:	7afa      	ldrb	r2, [r7, #11]
 8003dca:	7f3b      	ldrb	r3, [r7, #28]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003dd0:	7afa      	ldrb	r2, [r7, #11]
 8003dd2:	7f3b      	ldrb	r3, [r7, #28]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	72fb      	strb	r3, [r7, #11]
    xl++;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	73fb      	strb	r3, [r7, #15]
    yu++;
 8003dde:	7bbb      	ldrb	r3, [r7, #14]
 8003de0:	3301      	adds	r3, #1
 8003de2:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 8003de4:	7afb      	ldrb	r3, [r7, #11]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d918      	bls.n	8003e1c <u8g2_DrawRBox+0x124>
    {
      ww -= 2;
 8003dea:	7afb      	ldrb	r3, [r7, #11]
 8003dec:	3b02      	subs	r3, #2
 8003dee:	72fb      	strb	r3, [r7, #11]
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 8003df0:	7f3b      	ldrb	r3, [r7, #28]
 8003df2:	3301      	adds	r3, #1
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	7af8      	ldrb	r0, [r7, #11]
 8003df8:	78ba      	ldrb	r2, [r7, #2]
 8003dfa:	7bf9      	ldrb	r1, [r7, #15]
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	4603      	mov	r3, r0
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ff43 	bl	8003c8c <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
 8003e06:	7f3b      	ldrb	r3, [r7, #28]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	7af8      	ldrb	r0, [r7, #11]
 8003e0e:	7b3a      	ldrb	r2, [r7, #12]
 8003e10:	7bf9      	ldrb	r1, [r7, #15]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	4603      	mov	r3, r0
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ff38 	bl	8003c8c <u8g2_DrawBox>
    }
    
    hh = h;
 8003e1c:	7e3b      	ldrb	r3, [r7, #24]
 8003e1e:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003e20:	7aba      	ldrb	r2, [r7, #10]
 8003e22:	7f3b      	ldrb	r3, [r7, #28]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003e28:	7aba      	ldrb	r2, [r7, #10]
 8003e2a:	7f3b      	ldrb	r3, [r7, #28]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	72bb      	strb	r3, [r7, #10]
    //h--;
    if ( hh >= 3 )
 8003e30:	7abb      	ldrb	r3, [r7, #10]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d90d      	bls.n	8003e52 <u8g2_DrawRBox+0x15a>
    {
      hh -= 2;
 8003e36:	7abb      	ldrb	r3, [r7, #10]
 8003e38:	3b02      	subs	r3, #2
 8003e3a:	72bb      	strb	r3, [r7, #10]
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 8003e3c:	7878      	ldrb	r0, [r7, #1]
 8003e3e:	7bba      	ldrb	r2, [r7, #14]
 8003e40:	78f9      	ldrb	r1, [r7, #3]
 8003e42:	7abb      	ldrb	r3, [r7, #10]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	4603      	mov	r3, r0
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff1f 	bl	8003c8c <u8g2_DrawBox>
 8003e4e:	e000      	b.n	8003e52 <u8g2_DrawRBox+0x15a>
    return;
 8003e50:	bf00      	nop
    }
  }
}
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	4608      	mov	r0, r1
 8003e62:	4611      	mov	r1, r2
 8003e64:	461a      	mov	r2, r3
 8003e66:	4603      	mov	r3, r0
 8003e68:	70fb      	strb	r3, [r7, #3]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	70bb      	strb	r3, [r7, #2]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	787b      	ldrb	r3, [r7, #1]
 8003e76:	4413      	add	r3, r2
 8003e78:	b2d8      	uxtb	r0, r3
 8003e7a:	78ba      	ldrb	r2, [r7, #2]
 8003e7c:	7e3b      	ldrb	r3, [r7, #24]
 8003e7e:	4413      	add	r3, r2
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	78ba      	ldrb	r2, [r7, #2]
 8003e84:	78f9      	ldrb	r1, [r7, #3]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	4603      	mov	r3, r0
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f001 fb00 	bl	8005490 <u8g2_IsIntersection>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8091 	beq.w	8003fba <u8g2_DrawRFrame+0x162>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	73fb      	strb	r3, [r7, #15]
  xl += r;
 8003e9c:	7bfa      	ldrb	r2, [r7, #15]
 8003e9e:	7f3b      	ldrb	r3, [r7, #28]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8003ea4:	78bb      	ldrb	r3, [r7, #2]
 8003ea6:	73bb      	strb	r3, [r7, #14]
  yu += r;
 8003ea8:	7bba      	ldrb	r2, [r7, #14]
 8003eaa:	7f3b      	ldrb	r3, [r7, #28]
 8003eac:	4413      	add	r3, r2
 8003eae:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	737b      	strb	r3, [r7, #13]
    xr += w;
 8003eb4:	7b7a      	ldrb	r2, [r7, #13]
 8003eb6:	787b      	ldrb	r3, [r7, #1]
 8003eb8:	4413      	add	r3, r2
 8003eba:	737b      	strb	r3, [r7, #13]
    xr -= r;
 8003ebc:	7b7a      	ldrb	r2, [r7, #13]
 8003ebe:	7f3b      	ldrb	r3, [r7, #28]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8003ec4:	7b7b      	ldrb	r3, [r7, #13]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 8003eca:	78bb      	ldrb	r3, [r7, #2]
 8003ecc:	733b      	strb	r3, [r7, #12]
    yl += h;
 8003ece:	7b3a      	ldrb	r2, [r7, #12]
 8003ed0:	7e3b      	ldrb	r3, [r7, #24]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 8003ed6:	7b3a      	ldrb	r2, [r7, #12]
 8003ed8:	7f3b      	ldrb	r3, [r7, #28]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 8003ede:	7b3b      	ldrb	r3, [r7, #12]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8003ee4:	7f3b      	ldrb	r3, [r7, #28]
 8003ee6:	7bba      	ldrb	r2, [r7, #14]
 8003ee8:	7bf9      	ldrb	r1, [r7, #15]
 8003eea:	2002      	movs	r0, #2
 8003eec:	9000      	str	r0, [sp, #0]
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa1a 	bl	8004328 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8003ef4:	7f3b      	ldrb	r3, [r7, #28]
 8003ef6:	7bba      	ldrb	r2, [r7, #14]
 8003ef8:	7b79      	ldrb	r1, [r7, #13]
 8003efa:	2001      	movs	r0, #1
 8003efc:	9000      	str	r0, [sp, #0]
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fa12 	bl	8004328 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8003f04:	7f3b      	ldrb	r3, [r7, #28]
 8003f06:	7b3a      	ldrb	r2, [r7, #12]
 8003f08:	7bf9      	ldrb	r1, [r7, #15]
 8003f0a:	2004      	movs	r0, #4
 8003f0c:	9000      	str	r0, [sp, #0]
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa0a 	bl	8004328 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8003f14:	7f3b      	ldrb	r3, [r7, #28]
 8003f16:	7b3a      	ldrb	r2, [r7, #12]
 8003f18:	7b79      	ldrb	r1, [r7, #13]
 8003f1a:	2008      	movs	r0, #8
 8003f1c:	9000      	str	r0, [sp, #0]
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa02 	bl	8004328 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8003f24:	787b      	ldrb	r3, [r7, #1]
 8003f26:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003f28:	7afa      	ldrb	r2, [r7, #11]
 8003f2a:	7f3b      	ldrb	r3, [r7, #28]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003f30:	7afa      	ldrb	r2, [r7, #11]
 8003f32:	7f3b      	ldrb	r3, [r7, #28]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	72fb      	strb	r3, [r7, #11]
    hh = h;
 8003f38:	7e3b      	ldrb	r3, [r7, #24]
 8003f3a:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003f3c:	7aba      	ldrb	r2, [r7, #10]
 8003f3e:	7f3b      	ldrb	r3, [r7, #28]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003f44:	7aba      	ldrb	r2, [r7, #10]
 8003f46:	7f3b      	ldrb	r3, [r7, #28]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
    yu++;
 8003f52:	7bbb      	ldrb	r3, [r7, #14]
 8003f54:	3301      	adds	r3, #1
 8003f56:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 8003f58:	7afb      	ldrb	r3, [r7, #11]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d914      	bls.n	8003f88 <u8g2_DrawRFrame+0x130>
    {
      ww -= 2;
 8003f5e:	7afb      	ldrb	r3, [r7, #11]
 8003f60:	3b02      	subs	r3, #2
 8003f62:	72fb      	strb	r3, [r7, #11]
      h--;
 8003f64:	7e3b      	ldrb	r3, [r7, #24]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 8003f6a:	7afb      	ldrb	r3, [r7, #11]
 8003f6c:	78ba      	ldrb	r2, [r7, #2]
 8003f6e:	7bf9      	ldrb	r1, [r7, #15]
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f001 f9f5 	bl	8005360 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 8003f76:	78ba      	ldrb	r2, [r7, #2]
 8003f78:	7e3b      	ldrb	r3, [r7, #24]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	7afb      	ldrb	r3, [r7, #11]
 8003f80:	7bf9      	ldrb	r1, [r7, #15]
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f001 f9ec 	bl	8005360 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8003f88:	7abb      	ldrb	r3, [r7, #10]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d916      	bls.n	8003fbc <u8g2_DrawRFrame+0x164>
    {
      hh -= 2;
 8003f8e:	7abb      	ldrb	r3, [r7, #10]
 8003f90:	3b02      	subs	r3, #2
 8003f92:	72bb      	strb	r3, [r7, #10]
      w--;
 8003f94:	787b      	ldrb	r3, [r7, #1]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8003f9a:	7abb      	ldrb	r3, [r7, #10]
 8003f9c:	7bba      	ldrb	r2, [r7, #14]
 8003f9e:	78f9      	ldrb	r1, [r7, #3]
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f001 f9f6 	bl	8005392 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8003fa6:	78fa      	ldrb	r2, [r7, #3]
 8003fa8:	787b      	ldrb	r3, [r7, #1]
 8003faa:	4413      	add	r3, r2
 8003fac:	b2d9      	uxtb	r1, r3
 8003fae:	7abb      	ldrb	r3, [r7, #10]
 8003fb0:	7bba      	ldrb	r2, [r7, #14]
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f001 f9ed 	bl	8005392 <u8g2_DrawVLine>
 8003fb8:	e000      	b.n	8003fbc <u8g2_DrawRFrame+0x164>
    return;
 8003fba:	bf00      	nop
    }
  }
}
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	7c1b      	ldrb	r3, [r3, #16]
 8003fd0:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	fb02 f303 	mul.w	r3, r2, r3
 8003fe0:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f00e ffd3 	bl	8012f9c <memset>
}
 8003ff6:	bf00      	nop
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af02      	add	r7, sp, #8
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	460b      	mov	r3, r1
 8004008:	70fb      	strb	r3, [r7, #3]
 800400a:	4613      	mov	r3, r2
 800400c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	7c1b      	ldrb	r3, [r3, #16]
 8004014:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	b29b      	uxth	r3, r3
 8004024:	89ba      	ldrh	r2, [r7, #12]
 8004026:	fb12 f303 	smulbb	r3, r2, r3
 800402a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800402c:	89bb      	ldrh	r3, [r7, #12]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8004032:	89bb      	ldrh	r3, [r7, #12]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	4413      	add	r3, r2
 8004038:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800403a:	7bf9      	ldrb	r1, [r7, #15]
 800403c:	78ba      	ldrb	r2, [r7, #2]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	460b      	mov	r3, r1
 8004044:	2100      	movs	r1, #0
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f001 ff35 	bl	8005eb6 <u8x8_DrawTile>
}
 800404c:	bf00      	nop
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004066:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	7c5b      	ldrb	r3, [r3, #17]
 8004076:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8004078:	7bba      	ldrb	r2, [r7, #14]
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff ffbd 	bl	8003ffe <u8g2_send_tile_row>
    src_row++;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	3301      	adds	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800408a:	7bbb      	ldrb	r3, [r7, #14]
 800408c:	3301      	adds	r3, #1
 800408e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8004090:	7bfa      	ldrb	r2, [r7, #15]
 8004092:	7b7b      	ldrb	r3, [r7, #13]
 8004094:	429a      	cmp	r2, r3
 8004096:	d203      	bcs.n	80040a0 <u8g2_send_buffer+0x4c>
 8004098:	7bba      	ldrb	r2, [r7, #14]
 800409a:	7b3b      	ldrb	r3, [r7, #12]
 800409c:	429a      	cmp	r2, r3
 800409e:	d3eb      	bcc.n	8004078 <u8g2_send_buffer+0x24>
}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff ff69 	bl	8003fc2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80040f0:	2100      	movs	r1, #0
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff ffd8 	bl	80040a8 <u8g2_SetBufferCurrTileRow>
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff ffa3 	bl	8004054 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004114:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800411c:	7bfb      	ldrb	r3, [r7, #15]
 800411e:	4413      	add	r3, r2
 8004120:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	7c5b      	ldrb	r3, [r3, #17]
 8004128:	7bfa      	ldrb	r2, [r7, #15]
 800412a:	429a      	cmp	r2, r3
 800412c:	d304      	bcc.n	8004138 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f001 ff12 	bl	8005f58 <u8x8_RefreshDisplay>
    return 0;
 8004134:	2300      	movs	r3, #0
 8004136:	e00d      	b.n	8004154 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff ff3d 	bl	8003fc2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff ffab 	bl	80040a8 <u8g2_SetBufferCurrTileRow>
  return 1;
 8004152:	2301      	movs	r3, #1
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	4608      	mov	r0, r1
 8004166:	4611      	mov	r1, r2
 8004168:	461a      	mov	r2, r3
 800416a:	4603      	mov	r3, r0
 800416c:	70fb      	strb	r3, [r7, #3]
 800416e:	460b      	mov	r3, r1
 8004170:	70bb      	strb	r3, [r7, #2]
 8004172:	4613      	mov	r3, r2
 8004174:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8004176:	7d3b      	ldrb	r3, [r7, #20]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d017      	beq.n	80041b0 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8004180:	787a      	ldrb	r2, [r7, #1]
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	4413      	add	r3, r2
 8004186:	b2d9      	uxtb	r1, r3
 8004188:	7c3a      	ldrb	r2, [r7, #16]
 800418a:	78bb      	ldrb	r3, [r7, #2]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f001 f916 	bl	80053c4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8004198:	787a      	ldrb	r2, [r7, #1]
 800419a:	78bb      	ldrb	r3, [r7, #2]
 800419c:	4413      	add	r3, r2
 800419e:	b2d9      	uxtb	r1, r3
 80041a0:	7c3a      	ldrb	r2, [r7, #16]
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f001 f90a 	bl	80053c4 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 80041b0:	7d3b      	ldrb	r3, [r7, #20]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d017      	beq.n	80041ea <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 80041ba:	787a      	ldrb	r2, [r7, #1]
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	b2d9      	uxtb	r1, r3
 80041c2:	7c3a      	ldrb	r2, [r7, #16]
 80041c4:	78bb      	ldrb	r3, [r7, #2]
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f001 f8f9 	bl	80053c4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 80041d2:	787a      	ldrb	r2, [r7, #1]
 80041d4:	78bb      	ldrb	r3, [r7, #2]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	b2d9      	uxtb	r1, r3
 80041da:	7c3a      	ldrb	r2, [r7, #16]
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f001 f8ed 	bl	80053c4 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80041ea:	7d3b      	ldrb	r3, [r7, #20]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d017      	beq.n	8004224 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 80041f4:	787a      	ldrb	r2, [r7, #1]
 80041f6:	78fb      	ldrb	r3, [r7, #3]
 80041f8:	4413      	add	r3, r2
 80041fa:	b2d9      	uxtb	r1, r3
 80041fc:	7c3a      	ldrb	r2, [r7, #16]
 80041fe:	78bb      	ldrb	r3, [r7, #2]
 8004200:	4413      	add	r3, r2
 8004202:	b2db      	uxtb	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f001 f8dc 	bl	80053c4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 800420c:	787a      	ldrb	r2, [r7, #1]
 800420e:	78bb      	ldrb	r3, [r7, #2]
 8004210:	4413      	add	r3, r2
 8004212:	b2d9      	uxtb	r1, r3
 8004214:	7c3a      	ldrb	r2, [r7, #16]
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	4413      	add	r3, r2
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f001 f8d0 	bl	80053c4 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8004224:	7d3b      	ldrb	r3, [r7, #20]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d017      	beq.n	800425e <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 800422e:	787a      	ldrb	r2, [r7, #1]
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	b2d9      	uxtb	r1, r3
 8004236:	7c3a      	ldrb	r2, [r7, #16]
 8004238:	78bb      	ldrb	r3, [r7, #2]
 800423a:	4413      	add	r3, r2
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f001 f8bf 	bl	80053c4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8004246:	787a      	ldrb	r2, [r7, #1]
 8004248:	78bb      	ldrb	r3, [r7, #2]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	b2d9      	uxtb	r1, r3
 800424e:	7c3a      	ldrb	r2, [r7, #16]
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	4413      	add	r3, r2
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f001 f8b3 	bl	80053c4 <u8g2_DrawPixel>
    }
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b086      	sub	sp, #24
 800426a:	af02      	add	r7, sp, #8
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	4608      	mov	r0, r1
 8004270:	4611      	mov	r1, r2
 8004272:	461a      	mov	r2, r3
 8004274:	4603      	mov	r3, r0
 8004276:	70fb      	strb	r3, [r7, #3]
 8004278:	460b      	mov	r3, r1
 800427a:	70bb      	strb	r3, [r7, #2]
 800427c:	4613      	mov	r3, r2
 800427e:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	787b      	ldrb	r3, [r7, #1]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 800428e:	2301      	movs	r3, #1
 8004290:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8004292:	2300      	movs	r3, #0
 8004294:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8004296:	7b7a      	ldrb	r2, [r7, #13]
 8004298:	787b      	ldrb	r3, [r7, #1]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	b2db      	uxtb	r3, r3
 800429e:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 80042a0:	7b7b      	ldrb	r3, [r7, #13]
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	737b      	strb	r3, [r7, #13]
    x = 0;
 80042a8:	2300      	movs	r3, #0
 80042aa:	733b      	strb	r3, [r7, #12]
    y = rad;
 80042ac:	787b      	ldrb	r3, [r7, #1]
 80042ae:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 80042b0:	78f8      	ldrb	r0, [r7, #3]
 80042b2:	7afa      	ldrb	r2, [r7, #11]
 80042b4:	7b39      	ldrb	r1, [r7, #12]
 80042b6:	7e3b      	ldrb	r3, [r7, #24]
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	78bb      	ldrb	r3, [r7, #2]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	4603      	mov	r3, r0
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff ff4b 	bl	800415c <u8g2_draw_circle_section>
    
    while ( x < y )
 80042c6:	e026      	b.n	8004316 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 80042c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	db0b      	blt.n	80042e8 <u8g2_draw_circle+0x82>
      {
        y--;
 80042d0:	7afb      	ldrb	r3, [r7, #11]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 80042d6:	7b7b      	ldrb	r3, [r7, #13]
 80042d8:	3302      	adds	r3, #2
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	7b7b      	ldrb	r3, [r7, #13]
 80042e2:	4413      	add	r3, r2
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 80042e8:	7b3b      	ldrb	r3, [r7, #12]
 80042ea:	3301      	adds	r3, #1
 80042ec:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 80042ee:	7bbb      	ldrb	r3, [r7, #14]
 80042f0:	3302      	adds	r3, #2
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	7bbb      	ldrb	r3, [r7, #14]
 80042fa:	4413      	add	r3, r2
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8004300:	78f8      	ldrb	r0, [r7, #3]
 8004302:	7afa      	ldrb	r2, [r7, #11]
 8004304:	7b39      	ldrb	r1, [r7, #12]
 8004306:	7e3b      	ldrb	r3, [r7, #24]
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	78bb      	ldrb	r3, [r7, #2]
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	4603      	mov	r3, r0
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff ff23 	bl	800415c <u8g2_draw_circle_section>
    while ( x < y )
 8004316:	7b3a      	ldrb	r2, [r7, #12]
 8004318:	7afb      	ldrb	r3, [r7, #11]
 800431a:	429a      	cmp	r2, r3
 800431c:	d3d4      	bcc.n	80042c8 <u8g2_draw_circle+0x62>
    }
}
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b085      	sub	sp, #20
 800432c:	af02      	add	r7, sp, #8
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	4608      	mov	r0, r1
 8004332:	4611      	mov	r1, r2
 8004334:	461a      	mov	r2, r3
 8004336:	4603      	mov	r3, r0
 8004338:	70fb      	strb	r3, [r7, #3]
 800433a:	460b      	mov	r3, r1
 800433c:	70bb      	strb	r3, [r7, #2]
 800433e:	4613      	mov	r3, r2
 8004340:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	787b      	ldrb	r3, [r7, #1]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	b2d9      	uxtb	r1, r3
 800434a:	78ba      	ldrb	r2, [r7, #2]
 800434c:	787b      	ldrb	r3, [r7, #1]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	b2d8      	uxtb	r0, r3
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	787b      	ldrb	r3, [r7, #1]
 8004356:	4413      	add	r3, r2
 8004358:	b2db      	uxtb	r3, r3
 800435a:	3301      	adds	r3, #1
 800435c:	b2dc      	uxtb	r4, r3
 800435e:	78ba      	ldrb	r2, [r7, #2]
 8004360:	787b      	ldrb	r3, [r7, #1]
 8004362:	4413      	add	r3, r2
 8004364:	b2db      	uxtb	r3, r3
 8004366:	3301      	adds	r3, #1
 8004368:	b2db      	uxtb	r3, r3
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	4623      	mov	r3, r4
 800436e:	4602      	mov	r2, r0
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f001 f88d 	bl	8005490 <u8g2_IsIntersection>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d009      	beq.n	8004390 <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 800437c:	7878      	ldrb	r0, [r7, #1]
 800437e:	78ba      	ldrb	r2, [r7, #2]
 8004380:	78f9      	ldrb	r1, [r7, #3]
 8004382:	7e3b      	ldrb	r3, [r7, #24]
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	4603      	mov	r3, r0
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff ff6c 	bl	8004266 <u8g2_draw_circle>
 800438e:	e000      	b.n	8004392 <u8g2_DrawCircle+0x6a>
      return;
 8004390:	bf00      	nop
}
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bd90      	pop	{r4, r7, pc}

08004398 <u8g2_draw_disc_section>:
/* Disk */

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	4608      	mov	r0, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	461a      	mov	r2, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	70fb      	strb	r3, [r7, #3]
 80043aa:	460b      	mov	r3, r1
 80043ac:	70bb      	strb	r3, [r7, #2]
 80043ae:	4613      	mov	r3, r2
 80043b0:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 80043b2:	7d3b      	ldrb	r3, [r7, #20]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01b      	beq.n	80043f4 <u8g2_draw_disc_section+0x5c>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 80043bc:	787a      	ldrb	r2, [r7, #1]
 80043be:	78fb      	ldrb	r3, [r7, #3]
 80043c0:	4413      	add	r3, r2
 80043c2:	b2d9      	uxtb	r1, r3
 80043c4:	7c3a      	ldrb	r2, [r7, #16]
 80043c6:	78bb      	ldrb	r3, [r7, #2]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	78bb      	ldrb	r3, [r7, #2]
 80043ce:	3301      	adds	r3, #1
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 ffdd 	bl	8005392 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 80043d8:	787a      	ldrb	r2, [r7, #1]
 80043da:	78bb      	ldrb	r3, [r7, #2]
 80043dc:	4413      	add	r3, r2
 80043de:	b2d9      	uxtb	r1, r3
 80043e0:	7c3a      	ldrb	r2, [r7, #16]
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	3301      	adds	r3, #1
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 ffcf 	bl	8005392 <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 80043f4:	7d3b      	ldrb	r3, [r7, #20]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01b      	beq.n	8004436 <u8g2_draw_disc_section+0x9e>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 80043fe:	787a      	ldrb	r2, [r7, #1]
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	b2d9      	uxtb	r1, r3
 8004406:	7c3a      	ldrb	r2, [r7, #16]
 8004408:	78bb      	ldrb	r3, [r7, #2]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	b2da      	uxtb	r2, r3
 800440e:	78bb      	ldrb	r3, [r7, #2]
 8004410:	3301      	adds	r3, #1
 8004412:	b2db      	uxtb	r3, r3
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 ffbc 	bl	8005392 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 800441a:	787a      	ldrb	r2, [r7, #1]
 800441c:	78bb      	ldrb	r3, [r7, #2]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	b2d9      	uxtb	r1, r3
 8004422:	7c3a      	ldrb	r2, [r7, #16]
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	b2da      	uxtb	r2, r3
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	3301      	adds	r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 ffae 	bl	8005392 <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8004436:	7d3b      	ldrb	r3, [r7, #20]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d015      	beq.n	800446c <u8g2_draw_disc_section+0xd4>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 8004440:	787a      	ldrb	r2, [r7, #1]
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	4413      	add	r3, r2
 8004446:	b2d9      	uxtb	r1, r3
 8004448:	78bb      	ldrb	r3, [r7, #2]
 800444a:	3301      	adds	r3, #1
 800444c:	b2db      	uxtb	r3, r3
 800444e:	7c3a      	ldrb	r2, [r7, #16]
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 ff9e 	bl	8005392 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 8004456:	787a      	ldrb	r2, [r7, #1]
 8004458:	78bb      	ldrb	r3, [r7, #2]
 800445a:	4413      	add	r3, r2
 800445c:	b2d9      	uxtb	r1, r3
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	3301      	adds	r3, #1
 8004462:	b2db      	uxtb	r3, r3
 8004464:	7c3a      	ldrb	r2, [r7, #16]
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 ff93 	bl	8005392 <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 800446c:	7d3b      	ldrb	r3, [r7, #20]
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	d015      	beq.n	80044a2 <u8g2_draw_disc_section+0x10a>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 8004476:	787a      	ldrb	r2, [r7, #1]
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	b2d9      	uxtb	r1, r3
 800447e:	78bb      	ldrb	r3, [r7, #2]
 8004480:	3301      	adds	r3, #1
 8004482:	b2db      	uxtb	r3, r3
 8004484:	7c3a      	ldrb	r2, [r7, #16]
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 ff83 	bl	8005392 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 800448c:	787a      	ldrb	r2, [r7, #1]
 800448e:	78bb      	ldrb	r3, [r7, #2]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	b2d9      	uxtb	r1, r3
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	3301      	adds	r3, #1
 8004498:	b2db      	uxtb	r3, r3
 800449a:	7c3a      	ldrb	r2, [r7, #16]
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 ff78 	bl	8005392 <u8g2_DrawVLine>
    }
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <u8g2_draw_disc>:

static void u8g2_draw_disc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b086      	sub	sp, #24
 80044ae:	af02      	add	r7, sp, #8
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	4608      	mov	r0, r1
 80044b4:	4611      	mov	r1, r2
 80044b6:	461a      	mov	r2, r3
 80044b8:	4603      	mov	r3, r0
 80044ba:	70fb      	strb	r3, [r7, #3]
 80044bc:	460b      	mov	r3, r1
 80044be:	70bb      	strb	r3, [r7, #2]
 80044c0:	4613      	mov	r3, r2
 80044c2:	707b      	strb	r3, [r7, #1]
  u8g2_int_t ddF_x;
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
  f -= rad;
 80044c8:	7bfa      	ldrb	r2, [r7, #15]
 80044ca:	787b      	ldrb	r3, [r7, #1]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	73fb      	strb	r3, [r7, #15]
  ddF_x = 1;
 80044d2:	2301      	movs	r3, #1
 80044d4:	73bb      	strb	r3, [r7, #14]
  ddF_y = 0;
 80044d6:	2300      	movs	r3, #0
 80044d8:	737b      	strb	r3, [r7, #13]
  ddF_y -= rad;
 80044da:	7b7a      	ldrb	r2, [r7, #13]
 80044dc:	787b      	ldrb	r3, [r7, #1]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	737b      	strb	r3, [r7, #13]
  ddF_y *= 2;
 80044e4:	7b7b      	ldrb	r3, [r7, #13]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	737b      	strb	r3, [r7, #13]
  x = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	733b      	strb	r3, [r7, #12]
  y = rad;
 80044f0:	787b      	ldrb	r3, [r7, #1]
 80044f2:	72fb      	strb	r3, [r7, #11]

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 80044f4:	78f8      	ldrb	r0, [r7, #3]
 80044f6:	7afa      	ldrb	r2, [r7, #11]
 80044f8:	7b39      	ldrb	r1, [r7, #12]
 80044fa:	7e3b      	ldrb	r3, [r7, #24]
 80044fc:	9301      	str	r3, [sp, #4]
 80044fe:	78bb      	ldrb	r3, [r7, #2]
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	4603      	mov	r3, r0
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff ff47 	bl	8004398 <u8g2_draw_disc_section>
  
  while ( x < y )
 800450a:	e026      	b.n	800455a <u8g2_draw_disc+0xb0>
  {
    if (f >= 0) 
 800450c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004510:	2b00      	cmp	r3, #0
 8004512:	db0b      	blt.n	800452c <u8g2_draw_disc+0x82>
    {
      y--;
 8004514:	7afb      	ldrb	r3, [r7, #11]
 8004516:	3b01      	subs	r3, #1
 8004518:	72fb      	strb	r3, [r7, #11]
      ddF_y += 2;
 800451a:	7b7b      	ldrb	r3, [r7, #13]
 800451c:	3302      	adds	r3, #2
 800451e:	b2db      	uxtb	r3, r3
 8004520:	737b      	strb	r3, [r7, #13]
      f += ddF_y;
 8004522:	7bfa      	ldrb	r2, [r7, #15]
 8004524:	7b7b      	ldrb	r3, [r7, #13]
 8004526:	4413      	add	r3, r2
 8004528:	b2db      	uxtb	r3, r3
 800452a:	73fb      	strb	r3, [r7, #15]
    }
    x++;
 800452c:	7b3b      	ldrb	r3, [r7, #12]
 800452e:	3301      	adds	r3, #1
 8004530:	733b      	strb	r3, [r7, #12]
    ddF_x += 2;
 8004532:	7bbb      	ldrb	r3, [r7, #14]
 8004534:	3302      	adds	r3, #2
 8004536:	b2db      	uxtb	r3, r3
 8004538:	73bb      	strb	r3, [r7, #14]
    f += ddF_x;
 800453a:	7bfa      	ldrb	r2, [r7, #15]
 800453c:	7bbb      	ldrb	r3, [r7, #14]
 800453e:	4413      	add	r3, r2
 8004540:	b2db      	uxtb	r3, r3
 8004542:	73fb      	strb	r3, [r7, #15]

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 8004544:	78f8      	ldrb	r0, [r7, #3]
 8004546:	7afa      	ldrb	r2, [r7, #11]
 8004548:	7b39      	ldrb	r1, [r7, #12]
 800454a:	7e3b      	ldrb	r3, [r7, #24]
 800454c:	9301      	str	r3, [sp, #4]
 800454e:	78bb      	ldrb	r3, [r7, #2]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	4603      	mov	r3, r0
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff ff1f 	bl	8004398 <u8g2_draw_disc_section>
  while ( x < y )
 800455a:	7b3a      	ldrb	r2, [r7, #12]
 800455c:	7afb      	ldrb	r3, [r7, #11]
 800455e:	429a      	cmp	r2, r3
 8004560:	d3d4      	bcc.n	800450c <u8g2_draw_disc+0x62>
  }
}
 8004562:	bf00      	nop
 8004564:	bf00      	nop
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <u8g2_DrawDisc>:

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 800456c:	b590      	push	{r4, r7, lr}
 800456e:	b085      	sub	sp, #20
 8004570:	af02      	add	r7, sp, #8
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	4608      	mov	r0, r1
 8004576:	4611      	mov	r1, r2
 8004578:	461a      	mov	r2, r3
 800457a:	4603      	mov	r3, r0
 800457c:	70fb      	strb	r3, [r7, #3]
 800457e:	460b      	mov	r3, r1
 8004580:	70bb      	strb	r3, [r7, #2]
 8004582:	4613      	mov	r3, r2
 8004584:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8004586:	78fa      	ldrb	r2, [r7, #3]
 8004588:	787b      	ldrb	r3, [r7, #1]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	b2d9      	uxtb	r1, r3
 800458e:	78ba      	ldrb	r2, [r7, #2]
 8004590:	787b      	ldrb	r3, [r7, #1]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	b2d8      	uxtb	r0, r3
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	787b      	ldrb	r3, [r7, #1]
 800459a:	4413      	add	r3, r2
 800459c:	b2db      	uxtb	r3, r3
 800459e:	3301      	adds	r3, #1
 80045a0:	b2dc      	uxtb	r4, r3
 80045a2:	78ba      	ldrb	r2, [r7, #2]
 80045a4:	787b      	ldrb	r3, [r7, #1]
 80045a6:	4413      	add	r3, r2
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	3301      	adds	r3, #1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	4623      	mov	r3, r4
 80045b2:	4602      	mov	r2, r0
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 ff6b 	bl	8005490 <u8g2_IsIntersection>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d009      	beq.n	80045d4 <u8g2_DrawDisc+0x68>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
 80045c0:	7878      	ldrb	r0, [r7, #1]
 80045c2:	78ba      	ldrb	r2, [r7, #2]
 80045c4:	78f9      	ldrb	r1, [r7, #3]
 80045c6:	7e3b      	ldrb	r3, [r7, #24]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	4603      	mov	r3, r0
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff ff6c 	bl	80044aa <u8g2_draw_disc>
 80045d2:	e000      	b.n	80045d6 <u8g2_DrawDisc+0x6a>
      return;
 80045d4:	bf00      	nop
}
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd90      	pop	{r4, r7, pc}

080045dc <u8g2_m_16_4_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  static uint8_t buf[512];
  *page_cnt = 4;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2204      	movs	r2, #4
 80045e8:	701a      	strb	r2, [r3, #0]
  return buf;
 80045ea:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <u8g2_m_16_4_f+0x1c>)
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	2000044c 	.word	0x2000044c

080045fc <u8g2_Setup_ssd1306_i2c_128x32_univision_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x32_univision_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a0b      	ldr	r2, [pc, #44]	; (8004640 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x44>)
 8004612:	490c      	ldr	r1, [pc, #48]	; (8004644 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x48>)
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f001 fd03 	bl	8006020 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 800461a:	f107 0313 	add.w	r3, r7, #19
 800461e:	4618      	mov	r0, r3
 8004620:	f7ff ffdc 	bl	80045dc <u8g2_m_16_4_f>
 8004624:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8004626:	7cfa      	ldrb	r2, [r7, #19]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x4c>)
 800462e:	6979      	ldr	r1, [r7, #20]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f001 f816 	bl	8005662 <u8g2_SetupBuffer>
}
 8004636:	bf00      	nop
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	08005b69 	.word	0x08005b69
 8004644:	08005dd5 	.word	0x08005dd5
 8004648:	080054e7 	.word	0x080054e7

0800464c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4413      	add	r3, r2
 800465e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	781b      	ldrb	r3, [r3, #0]
}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	4413      	add	r3, r2
 8004682:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	81fb      	strh	r3, [r7, #14]
    font++;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3301      	adds	r3, #1
 800468e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8004690:	89fb      	ldrh	r3, [r7, #14]
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b29a      	uxth	r2, r3
 800469c:	89fb      	ldrh	r3, [r7, #14]
 800469e:	4413      	add	r3, r2
 80046a0:	81fb      	strh	r3, [r7, #14]
    return pos;
 80046a2:	89fb      	ldrh	r3, [r7, #14]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80046ba:	2100      	movs	r1, #0
 80046bc:	6838      	ldr	r0, [r7, #0]
 80046be:	f7ff ffc5 	bl	800464c <u8g2_font_get_byte>
 80046c2:	4603      	mov	r3, r0
 80046c4:	461a      	mov	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80046ca:	2101      	movs	r1, #1
 80046cc:	6838      	ldr	r0, [r7, #0]
 80046ce:	f7ff ffbd 	bl	800464c <u8g2_font_get_byte>
 80046d2:	4603      	mov	r3, r0
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80046da:	2102      	movs	r1, #2
 80046dc:	6838      	ldr	r0, [r7, #0]
 80046de:	f7ff ffb5 	bl	800464c <u8g2_font_get_byte>
 80046e2:	4603      	mov	r3, r0
 80046e4:	461a      	mov	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80046ea:	2103      	movs	r1, #3
 80046ec:	6838      	ldr	r0, [r7, #0]
 80046ee:	f7ff ffad 	bl	800464c <u8g2_font_get_byte>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80046fa:	2104      	movs	r1, #4
 80046fc:	6838      	ldr	r0, [r7, #0]
 80046fe:	f7ff ffa5 	bl	800464c <u8g2_font_get_byte>
 8004702:	4603      	mov	r3, r0
 8004704:	461a      	mov	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800470a:	2105      	movs	r1, #5
 800470c:	6838      	ldr	r0, [r7, #0]
 800470e:	f7ff ff9d 	bl	800464c <u8g2_font_get_byte>
 8004712:	4603      	mov	r3, r0
 8004714:	461a      	mov	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800471a:	2106      	movs	r1, #6
 800471c:	6838      	ldr	r0, [r7, #0]
 800471e:	f7ff ff95 	bl	800464c <u8g2_font_get_byte>
 8004722:	4603      	mov	r3, r0
 8004724:	461a      	mov	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800472a:	2107      	movs	r1, #7
 800472c:	6838      	ldr	r0, [r7, #0]
 800472e:	f7ff ff8d 	bl	800464c <u8g2_font_get_byte>
 8004732:	4603      	mov	r3, r0
 8004734:	461a      	mov	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800473a:	2108      	movs	r1, #8
 800473c:	6838      	ldr	r0, [r7, #0]
 800473e:	f7ff ff85 	bl	800464c <u8g2_font_get_byte>
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800474a:	2109      	movs	r1, #9
 800474c:	6838      	ldr	r0, [r7, #0]
 800474e:	f7ff ff7d 	bl	800464c <u8g2_font_get_byte>
 8004752:	4603      	mov	r3, r0
 8004754:	b25a      	sxtb	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800475a:	210a      	movs	r1, #10
 800475c:	6838      	ldr	r0, [r7, #0]
 800475e:	f7ff ff75 	bl	800464c <u8g2_font_get_byte>
 8004762:	4603      	mov	r3, r0
 8004764:	b25a      	sxtb	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800476a:	210b      	movs	r1, #11
 800476c:	6838      	ldr	r0, [r7, #0]
 800476e:	f7ff ff6d 	bl	800464c <u8g2_font_get_byte>
 8004772:	4603      	mov	r3, r0
 8004774:	b25a      	sxtb	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800477a:	210c      	movs	r1, #12
 800477c:	6838      	ldr	r0, [r7, #0]
 800477e:	f7ff ff65 	bl	800464c <u8g2_font_get_byte>
 8004782:	4603      	mov	r3, r0
 8004784:	b25a      	sxtb	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800478a:	210d      	movs	r1, #13
 800478c:	6838      	ldr	r0, [r7, #0]
 800478e:	f7ff ff5d 	bl	800464c <u8g2_font_get_byte>
 8004792:	4603      	mov	r3, r0
 8004794:	b25a      	sxtb	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800479a:	210e      	movs	r1, #14
 800479c:	6838      	ldr	r0, [r7, #0]
 800479e:	f7ff ff55 	bl	800464c <u8g2_font_get_byte>
 80047a2:	4603      	mov	r3, r0
 80047a4:	b25a      	sxtb	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80047aa:	210f      	movs	r1, #15
 80047ac:	6838      	ldr	r0, [r7, #0]
 80047ae:	f7ff ff4d 	bl	800464c <u8g2_font_get_byte>
 80047b2:	4603      	mov	r3, r0
 80047b4:	b25a      	sxtb	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80047ba:	2110      	movs	r1, #16
 80047bc:	6838      	ldr	r0, [r7, #0]
 80047be:	f7ff ff45 	bl	800464c <u8g2_font_get_byte>
 80047c2:	4603      	mov	r3, r0
 80047c4:	b25a      	sxtb	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80047ca:	2111      	movs	r1, #17
 80047cc:	6838      	ldr	r0, [r7, #0]
 80047ce:	f7ff ff4f 	bl	8004670 <u8g2_font_get_word>
 80047d2:	4603      	mov	r3, r0
 80047d4:	461a      	mov	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80047da:	2113      	movs	r1, #19
 80047dc:	6838      	ldr	r0, [r7, #0]
 80047de:	f7ff ff47 	bl	8004670 <u8g2_font_get_word>
 80047e2:	4603      	mov	r3, r0
 80047e4:	461a      	mov	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80047ea:	2115      	movs	r1, #21
 80047ec:	6838      	ldr	r0, [r7, #0]
 80047ee:	f7ff ff3f 	bl	8004670 <u8g2_font_get_word>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461a      	mov	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	82da      	strh	r2, [r3, #22]
#endif
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	460b      	mov	r3, r1
 800480c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	7a9b      	ldrb	r3, [r3, #10]
 8004812:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800481c:	7bfa      	ldrb	r2, [r7, #15]
 800481e:	7b7b      	ldrb	r3, [r7, #13]
 8004820:	fa42 f303 	asr.w	r3, r2, r3
 8004824:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8004826:	7b7b      	ldrb	r3, [r7, #13]
 8004828:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800482a:	7bba      	ldrb	r2, [r7, #14]
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	4413      	add	r3, r2
 8004830:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8004832:	7bbb      	ldrb	r3, [r7, #14]
 8004834:	2b07      	cmp	r3, #7
 8004836:	d91a      	bls.n	800486e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8004838:	2308      	movs	r3, #8
 800483a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800483c:	7b3a      	ldrb	r2, [r7, #12]
 800483e:	7b7b      	ldrb	r3, [r7, #13]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	7b3b      	ldrb	r3, [r7, #12]
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	b25a      	sxtb	r2, r3
 800485e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004862:	4313      	orrs	r3, r2
 8004864:	b25b      	sxtb	r3, r3
 8004866:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8004868:	7bbb      	ldrb	r3, [r7, #14]
 800486a:	3b08      	subs	r3, #8
 800486c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800486e:	78fb      	ldrb	r3, [r7, #3]
 8004870:	f04f 32ff 	mov.w	r2, #4294967295
 8004874:	fa02 f303 	lsl.w	r3, r2, r3
 8004878:	b2db      	uxtb	r3, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	b2da      	uxtb	r2, r3
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	4013      	ands	r3, r2
 8004882:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	7bba      	ldrb	r2, [r7, #14]
 8004888:	729a      	strb	r2, [r3, #10]
  return val;
 800488a:	7bfb      	ldrb	r3, [r7, #15]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	460b      	mov	r3, r1
 80048a2:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff ffaa 	bl	8004802 <u8g2_font_decode_get_unsigned_bits>
 80048ae:	4603      	mov	r3, r0
 80048b0:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80048b2:	2301      	movs	r3, #1
 80048b4:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80048bc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80048c8:	7bfa      	ldrb	r2, [r7, #15]
 80048ca:	7bbb      	ldrb	r3, [r7, #14]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	73fb      	strb	r3, [r7, #15]
  return v;
 80048d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80048de:	b490      	push	{r4, r7}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	4604      	mov	r4, r0
 80048e6:	4608      	mov	r0, r1
 80048e8:	4611      	mov	r1, r2
 80048ea:	461a      	mov	r2, r3
 80048ec:	4623      	mov	r3, r4
 80048ee:	71fb      	strb	r3, [r7, #7]
 80048f0:	4603      	mov	r3, r0
 80048f2:	71bb      	strb	r3, [r7, #6]
 80048f4:	460b      	mov	r3, r1
 80048f6:	717b      	strb	r3, [r7, #5]
 80048f8:	4613      	mov	r3, r2
 80048fa:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80048fc:	793b      	ldrb	r3, [r7, #4]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d010      	beq.n	8004924 <u8g2_add_vector_y+0x46>
 8004902:	2b02      	cmp	r3, #2
 8004904:	dc13      	bgt.n	800492e <u8g2_add_vector_y+0x50>
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <u8g2_add_vector_y+0x32>
 800490a:	2b01      	cmp	r3, #1
 800490c:	d005      	beq.n	800491a <u8g2_add_vector_y+0x3c>
 800490e:	e00e      	b.n	800492e <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 8004910:	797a      	ldrb	r2, [r7, #5]
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	4413      	add	r3, r2
 8004916:	71fb      	strb	r3, [r7, #7]
      break;
 8004918:	e00e      	b.n	8004938 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 800491a:	79ba      	ldrb	r2, [r7, #6]
 800491c:	79fb      	ldrb	r3, [r7, #7]
 800491e:	4413      	add	r3, r2
 8004920:	71fb      	strb	r3, [r7, #7]
      break;
 8004922:	e009      	b.n	8004938 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 8004924:	797b      	ldrb	r3, [r7, #5]
 8004926:	79fa      	ldrb	r2, [r7, #7]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	71fb      	strb	r3, [r7, #7]
      break;
 800492c:	e004      	b.n	8004938 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 800492e:	79bb      	ldrb	r3, [r7, #6]
 8004930:	79fa      	ldrb	r2, [r7, #7]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	71fb      	strb	r3, [r7, #7]
      break;      
 8004936:	bf00      	nop
  }
  return dy;
 8004938:	79fb      	ldrb	r3, [r7, #7]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bc90      	pop	{r4, r7}
 8004942:	4770      	bx	lr

08004944 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8004944:	b490      	push	{r4, r7}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	4604      	mov	r4, r0
 800494c:	4608      	mov	r0, r1
 800494e:	4611      	mov	r1, r2
 8004950:	461a      	mov	r2, r3
 8004952:	4623      	mov	r3, r4
 8004954:	71fb      	strb	r3, [r7, #7]
 8004956:	4603      	mov	r3, r0
 8004958:	71bb      	strb	r3, [r7, #6]
 800495a:	460b      	mov	r3, r1
 800495c:	717b      	strb	r3, [r7, #5]
 800495e:	4613      	mov	r3, r2
 8004960:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8004962:	793b      	ldrb	r3, [r7, #4]
 8004964:	2b02      	cmp	r3, #2
 8004966:	d010      	beq.n	800498a <u8g2_add_vector_x+0x46>
 8004968:	2b02      	cmp	r3, #2
 800496a:	dc13      	bgt.n	8004994 <u8g2_add_vector_x+0x50>
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <u8g2_add_vector_x+0x32>
 8004970:	2b01      	cmp	r3, #1
 8004972:	d005      	beq.n	8004980 <u8g2_add_vector_x+0x3c>
 8004974:	e00e      	b.n	8004994 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8004976:	79ba      	ldrb	r2, [r7, #6]
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	4413      	add	r3, r2
 800497c:	71fb      	strb	r3, [r7, #7]
      break;
 800497e:	e00e      	b.n	800499e <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8004980:	797b      	ldrb	r3, [r7, #5]
 8004982:	79fa      	ldrb	r2, [r7, #7]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	71fb      	strb	r3, [r7, #7]
      break;
 8004988:	e009      	b.n	800499e <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 800498a:	79bb      	ldrb	r3, [r7, #6]
 800498c:	79fa      	ldrb	r2, [r7, #7]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	71fb      	strb	r3, [r7, #7]
      break;
 8004992:	e004      	b.n	800499e <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8004994:	797a      	ldrb	r2, [r7, #5]
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	4413      	add	r3, r2
 800499a:	71fb      	strb	r3, [r7, #7]
      break;      
 800499c:	bf00      	nop
  }
  return dx;
 800499e:	79fb      	ldrb	r3, [r7, #7]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc90      	pop	{r4, r7}
 80049a8:	4770      	bx	lr

080049aa <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b088      	sub	sp, #32
 80049ae:	af02      	add	r7, sp, #8
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	460b      	mov	r3, r1
 80049b4:	70fb      	strb	r3, [r7, #3]
 80049b6:	4613      	mov	r3, r2
 80049b8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3358      	adds	r3, #88	; 0x58
 80049be:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80049ca:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80049d2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80049da:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80049dc:	7bfa      	ldrb	r2, [r7, #15]
 80049de:	7d7b      	ldrb	r3, [r7, #21]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80049e8:	7dfa      	ldrb	r2, [r7, #23]
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d201      	bcs.n	80049f4 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
 80049f2:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	791b      	ldrb	r3, [r3, #4]
 80049f8:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	795b      	ldrb	r3, [r3, #5]
 80049fe:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8004a00:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004a04:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	7b9b      	ldrb	r3, [r3, #14]
 8004a0c:	7bb8      	ldrb	r0, [r7, #14]
 8004a0e:	f7ff ff99 	bl	8004944 <u8g2_add_vector_x>
 8004a12:	4603      	mov	r3, r0
 8004a14:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8004a16:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004a1a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	7b9b      	ldrb	r3, [r3, #14]
 8004a22:	7b78      	ldrb	r0, [r7, #13]
 8004a24:	f7ff ff5b 	bl	80048de <u8g2_add_vector_y>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8004a2c:	78bb      	ldrb	r3, [r7, #2]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00f      	beq.n	8004a52 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	7b1a      	ldrb	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	7b9b      	ldrb	r3, [r3, #14]
 8004a40:	7db8      	ldrb	r0, [r7, #22]
 8004a42:	7b7a      	ldrb	r2, [r7, #13]
 8004a44:	7bb9      	ldrb	r1, [r7, #14]
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	4603      	mov	r3, r0
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fc05 	bl	800525a <u8g2_DrawHVLine>
 8004a50:	e012      	b.n	8004a78 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	7adb      	ldrb	r3, [r3, #11]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10e      	bne.n	8004a78 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	7b5a      	ldrb	r2, [r3, #13]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	7b9b      	ldrb	r3, [r3, #14]
 8004a68:	7db8      	ldrb	r0, [r7, #22]
 8004a6a:	7b7a      	ldrb	r2, [r7, #13]
 8004a6c:	7bb9      	ldrb	r1, [r7, #14]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	4603      	mov	r3, r0
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fbf1 	bl	800525a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8004a78:	7dfa      	ldrb	r2, [r7, #23]
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d309      	bcc.n	8004a94 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8004a80:	7dfa      	ldrb	r2, [r7, #23]
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	757b      	strb	r3, [r7, #21]
    ly++;
 8004a8c:	7d3b      	ldrb	r3, [r7, #20]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8004a92:	e79f      	b.n	80049d4 <u8g2_font_decode_len+0x2a>
      break;
 8004a94:	bf00      	nop
  }
  lx += cnt;
 8004a96:	7d7a      	ldrb	r2, [r7, #21]
 8004a98:	7dfb      	ldrb	r3, [r7, #23]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8004a9e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8004aa6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	71da      	strb	r2, [r3, #7]
  
}
 8004aae:	bf00      	nop
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3358      	adds	r3, #88	; 0x58
 8004ac4:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004ad8:	4619      	mov	r1, r3
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7ff fe91 	bl	8004802 <u8g2_font_decode_get_unsigned_bits>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	b25a      	sxtb	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8004aee:	4619      	mov	r1, r3
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f7ff fe86 	bl	8004802 <u8g2_font_decode_get_unsigned_bits>
 8004af6:	4603      	mov	r3, r0
 8004af8:	b25a      	sxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	7b1b      	ldrb	r3, [r3, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	735a      	strb	r2, [r3, #13]
}
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af02      	add	r7, sp, #8
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3358      	adds	r3, #88	; 0x58
 8004b32:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8004b34:	6839      	ldr	r1, [r7, #0]
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff ffbd 	bl	8004ab6 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004b42:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6938      	ldr	r0, [r7, #16]
 8004b4e:	f7ff fea3 	bl	8004898 <u8g2_font_decode_get_signed_bits>
 8004b52:	4603      	mov	r3, r0
 8004b54:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6938      	ldr	r0, [r7, #16]
 8004b60:	f7ff fe9a 	bl	8004898 <u8g2_font_decode_get_signed_bits>
 8004b64:	4603      	mov	r3, r0
 8004b66:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6938      	ldr	r0, [r7, #16]
 8004b72:	f7ff fe91 	bl	8004898 <u8g2_font_decode_get_signed_bits>
 8004b76:	4603      	mov	r3, r0
 8004b78:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f340 80cf 	ble.w	8004d24 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	7918      	ldrb	r0, [r3, #4]
 8004b8a:	7bfa      	ldrb	r2, [r7, #15]
 8004b8c:	7b7b      	ldrb	r3, [r7, #13]
 8004b8e:	4413      	add	r3, r2
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	425b      	negs	r3, r3
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	b25a      	sxtb	r2, r3
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	7b9b      	ldrb	r3, [r3, #14]
 8004b9c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004ba0:	f7ff fed0 	bl	8004944 <u8g2_add_vector_x>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	7958      	ldrb	r0, [r3, #5]
 8004bb0:	7bfa      	ldrb	r2, [r7, #15]
 8004bb2:	7b7b      	ldrb	r3, [r7, #13]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	425b      	negs	r3, r3
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	b25a      	sxtb	r2, r3
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	7b9b      	ldrb	r3, [r3, #14]
 8004bc2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004bc6:	f7ff fe8a 	bl	80048de <u8g2_add_vector_y>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	791b      	ldrb	r3, [r3, #4]
 8004bd6:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	795b      	ldrb	r3, [r3, #5]
 8004bdc:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8004be2:	7d7b      	ldrb	r3, [r7, #21]
 8004be4:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	7b9b      	ldrb	r3, [r3, #14]
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d852      	bhi.n	8004c94 <u8g2_font_decode_glyph+0x170>
 8004bee:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <u8g2_font_decode_glyph+0xd0>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c05 	.word	0x08004c05
 8004bf8:	08004c1d 	.word	0x08004c1d
 8004bfc:	08004c41 	.word	0x08004c41
 8004c00:	08004c71 	.word	0x08004c71
      {
	case 0:
	    x1 += decode->glyph_width;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	7dbb      	ldrb	r3, [r7, #22]
 8004c0e:	4413      	add	r3, r2
 8004c10:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8004c12:	7bfa      	ldrb	r2, [r7, #15]
 8004c14:	7d3b      	ldrb	r3, [r7, #20]
 8004c16:	4413      	add	r3, r2
 8004c18:	753b      	strb	r3, [r7, #20]
	    break;
 8004c1a:	e03b      	b.n	8004c94 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	7dfa      	ldrb	r2, [r7, #23]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	3301      	adds	r3, #1
 8004c28:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8004c2a:	7dbb      	ldrb	r3, [r7, #22]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	7d3b      	ldrb	r3, [r7, #20]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	753b      	strb	r3, [r7, #20]
	    break;
 8004c3e:	e029      	b.n	8004c94 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	7dfa      	ldrb	r2, [r7, #23]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	3301      	adds	r3, #1
 8004c52:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8004c54:	7dbb      	ldrb	r3, [r7, #22]
 8004c56:	3301      	adds	r3, #1
 8004c58:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	7d7a      	ldrb	r2, [r7, #21]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004c62:	7d7b      	ldrb	r3, [r7, #21]
 8004c64:	3301      	adds	r3, #1
 8004c66:	757b      	strb	r3, [r7, #21]
	    y1++;
 8004c68:	7d3b      	ldrb	r3, [r7, #20]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8004c6e:	e011      	b.n	8004c94 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8004c70:	7bfa      	ldrb	r2, [r7, #15]
 8004c72:	7dbb      	ldrb	r3, [r7, #22]
 8004c74:	4413      	add	r3, r2
 8004c76:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	7d7a      	ldrb	r2, [r7, #21]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004c86:	7d7b      	ldrb	r3, [r7, #21]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	757b      	strb	r3, [r7, #21]
	    y1++;
 8004c8c:	7d3b      	ldrb	r3, [r7, #20]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	753b      	strb	r3, [r7, #20]
	    break;	  
 8004c92:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004c94:	7db8      	ldrb	r0, [r7, #22]
 8004c96:	7d7a      	ldrb	r2, [r7, #21]
 8004c98:	7df9      	ldrb	r1, [r7, #23]
 8004c9a:	7d3b      	ldrb	r3, [r7, #20]
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fbf5 	bl	8005490 <u8g2_IsIntersection>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d102      	bne.n	8004cb2 <u8g2_font_decode_glyph+0x18e>
	return d;
 8004cac:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8004cb0:	e03a      	b.n	8004d28 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	6938      	ldr	r0, [r7, #16]
 8004cc8:	f7ff fd9b 	bl	8004802 <u8g2_font_decode_get_unsigned_bits>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6938      	ldr	r0, [r7, #16]
 8004cda:	f7ff fd92 	bl	8004802 <u8g2_font_decode_get_unsigned_bits>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8004ce2:	7afb      	ldrb	r3, [r7, #11]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff fe5e 	bl	80049aa <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8004cee:	7abb      	ldrb	r3, [r7, #10]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff fe58 	bl	80049aa <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	6938      	ldr	r0, [r7, #16]
 8004cfe:	f7ff fd80 	bl	8004802 <u8g2_font_decode_get_unsigned_bits>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1ec      	bne.n	8004ce2 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8004d0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	dd00      	ble.n	8004d18 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004d16:	e7d2      	b.n	8004cbe <u8g2_font_decode_glyph+0x19a>
	break;
 8004d18:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	7b1a      	ldrb	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8004d24:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d40:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	3317      	adds	r3, #23
 8004d46:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8004d48:	887b      	ldrh	r3, [r7, #2]
 8004d4a:	2bff      	cmp	r3, #255	; 0xff
 8004d4c:	d82a      	bhi.n	8004da4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8004d4e:	887b      	ldrh	r3, [r7, #2]
 8004d50:	2b60      	cmp	r3, #96	; 0x60
 8004d52:	d907      	bls.n	8004d64 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	4413      	add	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
 8004d62:	e009      	b.n	8004d78 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8004d64:	887b      	ldrh	r3, [r7, #2]
 8004d66:	2b40      	cmp	r3, #64	; 0x40
 8004d68:	d906      	bls.n	8004d78 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8004d70:	461a      	mov	r2, r3
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	4413      	add	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d04e      	beq.n	8004e20 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	887a      	ldrh	r2, [r7, #2]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d102      	bne.n	8004d94 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	3302      	adds	r3, #2
 8004d92:	e049      	b.n	8004e28 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	3301      	adds	r3, #1
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004da2:	e7e9      	b.n	8004d78 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8004daa:	461a      	mov	r2, r3
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	4413      	add	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8004db6:	2100      	movs	r1, #0
 8004db8:	6938      	ldr	r0, [r7, #16]
 8004dba:	f7ff fc59 	bl	8004670 <u8g2_font_get_word>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8004dc8:	2102      	movs	r1, #2
 8004dca:	6938      	ldr	r0, [r7, #16]
 8004dcc:	f7ff fc50 	bl	8004670 <u8g2_font_get_word>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8004dda:	89fa      	ldrh	r2, [r7, #14]
 8004ddc:	887b      	ldrh	r3, [r7, #2]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d3e9      	bcc.n	8004db6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8004de8:	89fb      	ldrh	r3, [r7, #14]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	3301      	adds	r3, #1
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	89fb      	ldrh	r3, [r7, #14]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8004dfc:	89fb      	ldrh	r3, [r7, #14]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d010      	beq.n	8004e24 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8004e02:	89fa      	ldrh	r2, [r7, #14]
 8004e04:	887b      	ldrh	r3, [r7, #2]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d102      	bne.n	8004e10 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3303      	adds	r3, #3
 8004e0e:	e00b      	b.n	8004e28 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	3302      	adds	r3, #2
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8004e1e:	e7e0      	b.n	8004de2 <u8g2_font_get_glyph_data+0xb2>
	break;
 8004e20:	bf00      	nop
 8004e22:	e000      	b.n	8004e26 <u8g2_font_get_glyph_data+0xf6>
	break;
 8004e24:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	4608      	mov	r0, r1
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4603      	mov	r3, r0
 8004e40:	70fb      	strb	r3, [r7, #3]
 8004e42:	460b      	mov	r3, r1
 8004e44:	70bb      	strb	r3, [r7, #2]
 8004e46:	4613      	mov	r3, r2
 8004e48:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	78fa      	ldrb	r2, [r7, #3]
 8004e52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	78ba      	ldrb	r2, [r7, #2]
 8004e5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004e5e:	883b      	ldrh	r3, [r7, #0]
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff ff64 	bl	8004d30 <u8g2_font_get_glyph_data>
 8004e68:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7ff fe56 	bl	8004b24 <u8g2_font_decode_glyph>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	4608      	mov	r0, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	461a      	mov	r2, r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	70fb      	strb	r3, [r7, #3]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	70bb      	strb	r3, [r7, #2]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d833      	bhi.n	8004f14 <u8g2_DrawGlyph+0x8c>
 8004eac:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <u8g2_DrawGlyph+0x2c>)
 8004eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb2:	bf00      	nop
 8004eb4:	08004ec5 	.word	0x08004ec5
 8004eb8:	08004ed9 	.word	0x08004ed9
 8004ebc:	08004eed 	.word	0x08004eed
 8004ec0:	08004f01 	.word	0x08004f01
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	4798      	blx	r3
 8004ecc:	4603      	mov	r3, r0
 8004ece:	461a      	mov	r2, r3
 8004ed0:	78bb      	ldrb	r3, [r7, #2]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	70bb      	strb	r3, [r7, #2]
      break;
 8004ed6:	e01d      	b.n	8004f14 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	4798      	blx	r3
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	70fb      	strb	r3, [r7, #3]
      break;
 8004eea:	e013      	b.n	8004f14 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4798      	blx	r3
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	78bb      	ldrb	r3, [r7, #2]
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	70bb      	strb	r3, [r7, #2]
      break;
 8004efe:	e009      	b.n	8004f14 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
 8004f08:	4603      	mov	r3, r0
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	78fb      	ldrb	r3, [r7, #3]
 8004f0e:	4413      	add	r3, r2
 8004f10:	70fb      	strb	r3, [r7, #3]
      break;
 8004f12:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8004f14:	883b      	ldrh	r3, [r7, #0]
 8004f16:	78ba      	ldrb	r2, [r7, #2]
 8004f18:	78f9      	ldrb	r1, [r7, #3]
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff ff88 	bl	8004e30 <u8g2_font_draw_glyph>
 8004f20:	4603      	mov	r3, r0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop

08004f2c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	607b      	str	r3, [r7, #4]
 8004f36:	460b      	mov	r3, r1
 8004f38:	72fb      	strb	r3, [r7, #11]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f000 fce3 	bl	800590a <u8x8_utf8_init>
  sum = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	7812      	ldrb	r2, [r2, #0]
 8004f50:	4611      	mov	r1, r2
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	4798      	blx	r3
 8004f56:	4603      	mov	r3, r0
 8004f58:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8004f5a:	8abb      	ldrh	r3, [r7, #20]
 8004f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d038      	beq.n	8004fd6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3301      	adds	r3, #1
 8004f68:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8004f6a:	8abb      	ldrh	r3, [r7, #20]
 8004f6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d0e9      	beq.n	8004f48 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8004f74:	8abb      	ldrh	r3, [r7, #20]
 8004f76:	7aba      	ldrb	r2, [r7, #10]
 8004f78:	7af9      	ldrb	r1, [r7, #11]
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff ff84 	bl	8004e88 <u8g2_DrawGlyph>
 8004f80:	4603      	mov	r3, r0
 8004f82:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004f8a:	2b03      	cmp	r3, #3
 8004f8c:	d81e      	bhi.n	8004fcc <u8g2_draw_string+0xa0>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <u8g2_draw_string+0x68>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08004faf 	.word	0x08004faf
 8004f9c:	08004fb9 	.word	0x08004fb9
 8004fa0:	08004fc3 	.word	0x08004fc3
      {
	case 0:
	  x += delta;
 8004fa4:	7afa      	ldrb	r2, [r7, #11]
 8004fa6:	7cfb      	ldrb	r3, [r7, #19]
 8004fa8:	4413      	add	r3, r2
 8004faa:	72fb      	strb	r3, [r7, #11]
	  break;
 8004fac:	e00e      	b.n	8004fcc <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8004fae:	7aba      	ldrb	r2, [r7, #10]
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	72bb      	strb	r3, [r7, #10]
	  break;
 8004fb6:	e009      	b.n	8004fcc <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8004fb8:	7afa      	ldrb	r2, [r7, #11]
 8004fba:	7cfb      	ldrb	r3, [r7, #19]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	72fb      	strb	r3, [r7, #11]
	  break;
 8004fc0:	e004      	b.n	8004fcc <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8004fc2:	7aba      	ldrb	r2, [r7, #10]
 8004fc4:	7cfb      	ldrb	r3, [r7, #19]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	72bb      	strb	r3, [r7, #10]
	  break;
 8004fca:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8004fcc:	7dfa      	ldrb	r2, [r7, #23]
 8004fce:	7cfb      	ldrb	r3, [r7, #19]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004fd4:	e7b8      	b.n	8004f48 <u8g2_draw_string+0x1c>
      break;
 8004fd6:	bf00      	nop
    }
  }
  return sum;
 8004fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop

08004fe4 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	72fb      	strb	r3, [r7, #11]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4a06      	ldr	r2, [pc, #24]	; (8005014 <u8g2_DrawStr+0x30>)
 8004ffa:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8004ffc:	7aba      	ldrb	r2, [r7, #10]
 8004ffe:	7af9      	ldrb	r1, [r7, #11]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7ff ff92 	bl	8004f2c <u8g2_draw_string>
 8005008:	4603      	mov	r3, r0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	08005927 	.word	0x08005927

08005018 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005024:	2b00      	cmp	r3, #0
 8005026:	d05d      	beq.n	80050e4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005046:	2b00      	cmp	r3, #0
 8005048:	d04d      	beq.n	80050e6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005050:	2b01      	cmp	r3, #1
 8005052:	d11c      	bne.n	800508e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 8005060:	429a      	cmp	r2, r3
 8005062:	da05      	bge.n	8005070 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 800507c:	429a      	cmp	r2, r3
 800507e:	dd32      	ble.n	80050e6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800508c:	e02b      	b.n	80050e6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8005094:	461a      	mov	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800509c:	4619      	mov	r1, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80050a4:	440b      	add	r3, r1
 80050a6:	429a      	cmp	r2, r3
 80050a8:	da0d      	bge.n	80050c6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	4413      	add	r3, r2
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	b25a      	sxtb	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80050d2:	429a      	cmp	r2, r3
 80050d4:	dd07      	ble.n	80050e6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80050e2:	e000      	b.n	80050e6 <u8g2_UpdateRefHeight+0xce>
    return;
 80050e4:	bf00      	nop
  }  
}
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  return 0;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a04      	ldr	r2, [pc, #16]	; (8005124 <u8g2_SetFontPosBaseline+0x1c>)
 8005114:	655a      	str	r2, [r3, #84]	; 0x54
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	080050f1 	.word	0x080050f1

08005128 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d00b      	beq.n	8005154 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3368      	adds	r3, #104	; 0x68
 8005146:	6839      	ldr	r1, [r7, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff fab1 	bl	80046b0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff ff62 	bl	8005018 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <u8g2_SetFontDirection>:
}



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	4611      	mov	r1, r2
 8005188:	461a      	mov	r2, r3
 800518a:	460b      	mov	r3, r1
 800518c:	71fb      	strb	r3, [r7, #7]
 800518e:	4613      	mov	r3, r2
 8005190:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	781a      	ldrb	r2, [r3, #0]
 80051a0:	7dbb      	ldrb	r3, [r7, #22]
 80051a2:	4413      	add	r3, r2
 80051a4:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80051a6:	7dfa      	ldrb	r2, [r7, #23]
 80051a8:	7dbb      	ldrb	r3, [r7, #22]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d90b      	bls.n	80051c6 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80051ae:	7dfa      	ldrb	r2, [r7, #23]
 80051b0:	79bb      	ldrb	r3, [r7, #6]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d205      	bcs.n	80051c2 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80051b6:	79bb      	ldrb	r3, [r7, #6]
 80051b8:	75bb      	strb	r3, [r7, #22]
      b--;
 80051ba:	7dbb      	ldrb	r3, [r7, #22]
 80051bc:	3b01      	subs	r3, #1
 80051be:	75bb      	strb	r3, [r7, #22]
 80051c0:	e001      	b.n	80051c6 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80051c6:	7dfa      	ldrb	r2, [r7, #23]
 80051c8:	79bb      	ldrb	r3, [r7, #6]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d301      	bcc.n	80051d2 <u8g2_clip_intersection2+0x56>
    return 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e01c      	b.n	800520c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80051d2:	7dba      	ldrb	r2, [r7, #22]
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d801      	bhi.n	80051de <u8g2_clip_intersection2+0x62>
    return 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	e016      	b.n	800520c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80051de:	7dfa      	ldrb	r2, [r7, #23]
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d201      	bcs.n	80051ea <u8g2_clip_intersection2+0x6e>
    a = c;
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 80051ea:	7dba      	ldrb	r2, [r7, #22]
 80051ec:	79bb      	ldrb	r3, [r7, #6]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d901      	bls.n	80051f6 <u8g2_clip_intersection2+0x7a>
    b = d;
 80051f2:	79bb      	ldrb	r3, [r7, #6]
 80051f4:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	7dfa      	ldrb	r2, [r7, #23]
 80051fa:	701a      	strb	r2, [r3, #0]
  b -= a;
 80051fc:	7dba      	ldrb	r2, [r7, #22]
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	7dba      	ldrb	r2, [r7, #22]
 8005208:	701a      	strb	r2, [r3, #0]
  return 1;
 800520a:	2301      	movs	r3, #1
}
 800520c:	4618      	mov	r0, r3
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005218:	b590      	push	{r4, r7, lr}
 800521a:	b085      	sub	sp, #20
 800521c:	af02      	add	r7, sp, #8
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	4608      	mov	r0, r1
 8005222:	4611      	mov	r1, r2
 8005224:	461a      	mov	r2, r3
 8005226:	4603      	mov	r3, r0
 8005228:	70fb      	strb	r3, [r7, #3]
 800522a:	460b      	mov	r3, r1
 800522c:	70bb      	strb	r3, [r7, #2]
 800522e:	4613      	mov	r3, r2
 8005230:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005238:	78ba      	ldrb	r2, [r7, #2]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005242:	7878      	ldrb	r0, [r7, #1]
 8005244:	78ba      	ldrb	r2, [r7, #2]
 8005246:	78f9      	ldrb	r1, [r7, #3]
 8005248:	7e3b      	ldrb	r3, [r7, #24]
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	4603      	mov	r3, r0
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	47a0      	blx	r4
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	bd90      	pop	{r4, r7, pc}

0800525a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800525a:	b590      	push	{r4, r7, lr}
 800525c:	b085      	sub	sp, #20
 800525e:	af02      	add	r7, sp, #8
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	4608      	mov	r0, r1
 8005264:	4611      	mov	r1, r2
 8005266:	461a      	mov	r2, r3
 8005268:	4603      	mov	r3, r0
 800526a:	70fb      	strb	r3, [r7, #3]
 800526c:	460b      	mov	r3, r1
 800526e:	70bb      	strb	r3, [r7, #2]
 8005270:	4613      	mov	r3, r2
 8005272:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800527a:	2b00      	cmp	r3, #0
 800527c:	d06d      	beq.n	800535a <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800527e:	787b      	ldrb	r3, [r7, #1]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d06a      	beq.n	800535a <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8005284:	787b      	ldrb	r3, [r7, #1]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d918      	bls.n	80052bc <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800528a:	7e3b      	ldrb	r3, [r7, #24]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d109      	bne.n	80052a4 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8005290:	78fa      	ldrb	r2, [r7, #3]
 8005292:	787b      	ldrb	r3, [r7, #1]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	b2db      	uxtb	r3, r3
 8005298:	70fb      	strb	r3, [r7, #3]
	  x++;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	3301      	adds	r3, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	70fb      	strb	r3, [r7, #3]
 80052a2:	e00b      	b.n	80052bc <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80052a4:	7e3b      	ldrb	r3, [r7, #24]
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d108      	bne.n	80052bc <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80052aa:	78ba      	ldrb	r2, [r7, #2]
 80052ac:	787b      	ldrb	r3, [r7, #1]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	70bb      	strb	r3, [r7, #2]
	  y++;
 80052b4:	78bb      	ldrb	r3, [r7, #2]
 80052b6:	3301      	adds	r3, #1
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80052bc:	7e3b      	ldrb	r3, [r7, #24]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80052c4:	7e3b      	ldrb	r3, [r7, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d119      	bne.n	80052fe <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80052d0:	78bb      	ldrb	r3, [r7, #2]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d838      	bhi.n	8005348 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80052dc:	78bb      	ldrb	r3, [r7, #2]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d934      	bls.n	800534c <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80052ee:	1c79      	adds	r1, r7, #1
 80052f0:	1cf8      	adds	r0, r7, #3
 80052f2:	f7ff ff43 	bl	800517c <u8g2_clip_intersection2>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d119      	bne.n	8005330 <u8g2_DrawHVLine+0xd6>
	  return;
 80052fc:	e02d      	b.n	800535a <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	429a      	cmp	r2, r3
 8005308:	d822      	bhi.n	8005350 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	429a      	cmp	r2, r3
 8005314:	d91e      	bls.n	8005354 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005322:	1c79      	adds	r1, r7, #1
 8005324:	1cb8      	adds	r0, r7, #2
 8005326:	f7ff ff29 	bl	800517c <u8g2_clip_intersection2>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d013      	beq.n	8005358 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005334:	689c      	ldr	r4, [r3, #8]
 8005336:	78f9      	ldrb	r1, [r7, #3]
 8005338:	78ba      	ldrb	r2, [r7, #2]
 800533a:	7878      	ldrb	r0, [r7, #1]
 800533c:	7e3b      	ldrb	r3, [r7, #24]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	4603      	mov	r3, r0
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	47a0      	blx	r4
 8005346:	e008      	b.n	800535a <u8g2_DrawHVLine+0x100>
	  return;
 8005348:	bf00      	nop
 800534a:	e006      	b.n	800535a <u8g2_DrawHVLine+0x100>
	  return;
 800534c:	bf00      	nop
 800534e:	e004      	b.n	800535a <u8g2_DrawHVLine+0x100>
	  return;
 8005350:	bf00      	nop
 8005352:	e002      	b.n	800535a <u8g2_DrawHVLine+0x100>
	  return;
 8005354:	bf00      	nop
 8005356:	e000      	b.n	800535a <u8g2_DrawHVLine+0x100>
	  return;
 8005358:	bf00      	nop
    }
}
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	bd90      	pop	{r4, r7, pc}

08005360 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af02      	add	r7, sp, #8
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	4608      	mov	r0, r1
 800536a:	4611      	mov	r1, r2
 800536c:	461a      	mov	r2, r3
 800536e:	4603      	mov	r3, r0
 8005370:	70fb      	strb	r3, [r7, #3]
 8005372:	460b      	mov	r3, r1
 8005374:	70bb      	strb	r3, [r7, #2]
 8005376:	4613      	mov	r3, r2
 8005378:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800537a:	787b      	ldrb	r3, [r7, #1]
 800537c:	78ba      	ldrb	r2, [r7, #2]
 800537e:	78f9      	ldrb	r1, [r7, #3]
 8005380:	2000      	movs	r0, #0
 8005382:	9000      	str	r0, [sp, #0]
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff ff68 	bl	800525a <u8g2_DrawHVLine>
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af02      	add	r7, sp, #8
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	4608      	mov	r0, r1
 800539c:	4611      	mov	r1, r2
 800539e:	461a      	mov	r2, r3
 80053a0:	4603      	mov	r3, r0
 80053a2:	70fb      	strb	r3, [r7, #3]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70bb      	strb	r3, [r7, #2]
 80053a8:	4613      	mov	r3, r2
 80053aa:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80053ac:	787b      	ldrb	r3, [r7, #1]
 80053ae:	78ba      	ldrb	r2, [r7, #2]
 80053b0:	78f9      	ldrb	r1, [r7, #3]
 80053b2:	2001      	movs	r0, #1
 80053b4:	9000      	str	r0, [sp, #0]
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff ff4f 	bl	800525a <u8g2_DrawHVLine>
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
 80053d0:	4613      	mov	r3, r2
 80053d2:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80053da:	78ba      	ldrb	r2, [r7, #2]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d31a      	bcc.n	8005416 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80053e6:	78ba      	ldrb	r2, [r7, #2]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d216      	bcs.n	800541a <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f2:	78fa      	ldrb	r2, [r7, #3]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d312      	bcc.n	800541e <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	429a      	cmp	r2, r3
 8005402:	d20e      	bcs.n	8005422 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8005404:	78ba      	ldrb	r2, [r7, #2]
 8005406:	78f9      	ldrb	r1, [r7, #3]
 8005408:	2300      	movs	r3, #0
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	2301      	movs	r3, #1
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff ff23 	bl	800525a <u8g2_DrawHVLine>
 8005414:	e006      	b.n	8005424 <u8g2_DrawPixel+0x60>
    return;
 8005416:	bf00      	nop
 8005418:	e004      	b.n	8005424 <u8g2_DrawPixel+0x60>
    return;
 800541a:	bf00      	nop
 800541c:	e002      	b.n	8005424 <u8g2_DrawPixel+0x60>
    return;
 800541e:	bf00      	nop
 8005420:	e000      	b.n	8005424 <u8g2_DrawPixel+0x60>
    return;
 8005422:	bf00      	nop
}
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800542a:	b490      	push	{r4, r7}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	4604      	mov	r4, r0
 8005432:	4608      	mov	r0, r1
 8005434:	4611      	mov	r1, r2
 8005436:	461a      	mov	r2, r3
 8005438:	4623      	mov	r3, r4
 800543a:	71fb      	strb	r3, [r7, #7]
 800543c:	4603      	mov	r3, r0
 800543e:	71bb      	strb	r3, [r7, #6]
 8005440:	460b      	mov	r3, r1
 8005442:	717b      	strb	r3, [r7, #5]
 8005444:	4613      	mov	r3, r2
 8005446:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8005448:	797a      	ldrb	r2, [r7, #5]
 800544a:	79bb      	ldrb	r3, [r7, #6]
 800544c:	429a      	cmp	r2, r3
 800544e:	d20d      	bcs.n	800546c <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8005450:	793a      	ldrb	r2, [r7, #4]
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	429a      	cmp	r2, r3
 8005456:	d901      	bls.n	800545c <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8005458:	2301      	movs	r3, #1
 800545a:	e014      	b.n	8005486 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800545c:	797a      	ldrb	r2, [r7, #5]
 800545e:	793b      	ldrb	r3, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d901      	bls.n	8005468 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8005464:	2301      	movs	r3, #1
 8005466:	e00e      	b.n	8005486 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8005468:	2300      	movs	r3, #0
 800546a:	e00c      	b.n	8005486 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800546c:	793a      	ldrb	r2, [r7, #4]
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	429a      	cmp	r2, r3
 8005472:	d907      	bls.n	8005484 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8005474:	797a      	ldrb	r2, [r7, #5]
 8005476:	793b      	ldrb	r3, [r7, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	d901      	bls.n	8005480 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800547c:	2301      	movs	r3, #1
 800547e:	e002      	b.n	8005486 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8005480:	2300      	movs	r3, #0
 8005482:	e000      	b.n	8005486 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8005484:	2300      	movs	r3, #0
    }
  }
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bc90      	pop	{r4, r7}
 800548e:	4770      	bx	lr

08005490 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	4608      	mov	r0, r1
 800549a:	4611      	mov	r1, r2
 800549c:	461a      	mov	r2, r3
 800549e:	4603      	mov	r3, r0
 80054a0:	70fb      	strb	r3, [r7, #3]
 80054a2:	460b      	mov	r3, r1
 80054a4:	70bb      	strb	r3, [r7, #2]
 80054a6:	4613      	mov	r3, r2
 80054a8:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80054b6:	7c3b      	ldrb	r3, [r7, #16]
 80054b8:	78ba      	ldrb	r2, [r7, #2]
 80054ba:	f7ff ffb6 	bl	800542a <u8g2_is_intersection_decision_tree>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <u8g2_IsIntersection+0x38>
    return 0; 
 80054c4:	2300      	movs	r3, #0
 80054c6:	e00a      	b.n	80054de <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 80054d4:	787b      	ldrb	r3, [r7, #1]
 80054d6:	78fa      	ldrb	r2, [r7, #3]
 80054d8:	f7ff ffa7 	bl	800542a <u8g2_is_intersection_decision_tree>
 80054dc:	4603      	mov	r3, r0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b087      	sub	sp, #28
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	4608      	mov	r0, r1
 80054f0:	4611      	mov	r1, r2
 80054f2:	461a      	mov	r2, r3
 80054f4:	4603      	mov	r3, r0
 80054f6:	70fb      	strb	r3, [r7, #3]
 80054f8:	460b      	mov	r3, r1
 80054fa:	70bb      	strb	r3, [r7, #2]
 80054fc:	4613      	mov	r3, r2
 80054fe:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8005500:	78bb      	ldrb	r3, [r7, #2]
 8005502:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005504:	7cfb      	ldrb	r3, [r7, #19]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800550c:	2301      	movs	r3, #1
 800550e:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8005510:	7c3a      	ldrb	r2, [r7, #16]
 8005512:	7cfb      	ldrb	r3, [r7, #19]
 8005514:	fa02 f303 	lsl.w	r3, r2, r3
 8005518:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005528:	2b01      	cmp	r3, #1
 800552a:	d801      	bhi.n	8005530 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800552c:	7c3b      	ldrb	r3, [r7, #16]
 800552e:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005536:	2b01      	cmp	r3, #1
 8005538:	d001      	beq.n	800553e <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800553a:	7c3b      	ldrb	r3, [r7, #16]
 800553c:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800553e:	78bb      	ldrb	r3, [r7, #2]
 8005540:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8005542:	89fb      	ldrh	r3, [r7, #14]
 8005544:	f023 0307 	bic.w	r3, r3, #7
 8005548:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	7c1b      	ldrb	r3, [r3, #16]
 8005550:	b29b      	uxth	r3, r3
 8005552:	89fa      	ldrh	r2, [r7, #14]
 8005554:	fb12 f303 	smulbb	r3, r2, r3
 8005558:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8005560:	89fb      	ldrh	r3, [r7, #14]
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4413      	add	r3, r2
 8005566:	617b      	str	r3, [r7, #20]
  ptr += x;
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4413      	add	r3, r2
 800556e:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8005570:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d117      	bne.n	80055a8 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	781a      	ldrb	r2, [r3, #0]
 800557c:	7cbb      	ldrb	r3, [r7, #18]
 800557e:	4313      	orrs	r3, r2
 8005580:	b2da      	uxtb	r2, r3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	781a      	ldrb	r2, [r3, #0]
 800558a:	7c7b      	ldrb	r3, [r7, #17]
 800558c:	4053      	eors	r3, r2
 800558e:	b2da      	uxtb	r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	701a      	strb	r2, [r3, #0]
	ptr++;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	3301      	adds	r3, #1
 8005598:	617b      	str	r3, [r7, #20]
	len--;
 800559a:	787b      	ldrb	r3, [r7, #1]
 800559c:	3b01      	subs	r3, #1
 800559e:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 80055a0:	787b      	ldrb	r3, [r7, #1]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e8      	bne.n	8005578 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80055a6:	e039      	b.n	800561c <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	781a      	ldrb	r2, [r3, #0]
 80055ac:	7cbb      	ldrb	r3, [r7, #18]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	781a      	ldrb	r2, [r3, #0]
 80055ba:	7c7b      	ldrb	r3, [r7, #17]
 80055bc:	4053      	eors	r3, r2
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80055c4:	7cfb      	ldrb	r3, [r7, #19]
 80055c6:	3301      	adds	r3, #1
 80055c8:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80055ca:	7cfb      	ldrb	r3, [r7, #19]
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	74fb      	strb	r3, [r7, #19]
      len--;
 80055d2:	787b      	ldrb	r3, [r7, #1]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d115      	bne.n	800560a <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055e4:	461a      	mov	r2, r3
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	4413      	add	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d801      	bhi.n	80055fa <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80055f6:	2301      	movs	r3, #1
 80055f8:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005600:	2b01      	cmp	r3, #1
 8005602:	d008      	beq.n	8005616 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8005604:	2301      	movs	r3, #1
 8005606:	747b      	strb	r3, [r7, #17]
 8005608:	e005      	b.n	8005616 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800560a:	7cbb      	ldrb	r3, [r7, #18]
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8005610:	7c7b      	ldrb	r3, [r7, #17]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8005616:	787b      	ldrb	r3, [r7, #1]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1c5      	bne.n	80055a8 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800561c:	bf00      	nop
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	22ff      	movs	r2, #255	; 0xff
 8005644:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	22ff      	movs	r2, #255	; 0xff
 800564c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	4613      	mov	r3, r2
 8005670:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	79fa      	ldrb	r2, [r7, #7]
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7ff ffaf 	bl	8005628 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f7ff fd1c 	bl	8005108 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 80056d8:	bf00      	nop
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	7bfa      	ldrb	r2, [r7, #15]
 8005700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	7c1b      	ldrb	r3, [r3, #16]
 8005708:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	2b1f      	cmp	r3, #31
 800570e:	d901      	bls.n	8005714 <u8g2_update_dimension_common+0x34>
    t = 31;
 8005710:	231f      	movs	r3, #31
 8005712:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	7bfa      	ldrb	r2, [r7, #15]
 800571e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005728:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	7bfa      	ldrb	r2, [r7, #15]
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573e:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8005748:	4413      	add	r3, r2
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	7c52      	ldrb	r2, [r2, #17]
 800574e:	4293      	cmp	r3, r2
 8005750:	dd06      	ble.n	8005760 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	7c5a      	ldrb	r2, [r3, #17]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	4413      	add	r3, r2
 8005788:	b2da      	uxtb	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	22f0      	movs	r2, #240	; 0xf0
 8005794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	8a9b      	ldrh	r3, [r3, #20]
 800579c:	2bf0      	cmp	r3, #240	; 0xf0
 800579e:	d805      	bhi.n	80057ac <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	8a9b      	ldrh	r3, [r3, #20]
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	8adb      	ldrh	r3, [r3, #22]
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 80057b8:	bf00      	nop
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	4603      	mov	r3, r0
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff fe51 	bl	8005490 <u8g2_IsIntersection>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d104      	bne.n	80057fe <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80057fc:	e03b      	b.n	8005876 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005812:	429a      	cmp	r2, r3
 8005814:	d205      	bcs.n	8005822 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800582e:	429a      	cmp	r2, r3
 8005830:	d905      	bls.n	800583e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800584a:	429a      	cmp	r2, r3
 800584c:	d205      	bcs.n	800585a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005866:	429a      	cmp	r2, r3
 8005868:	d905      	bls.n	8005876 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff ff2a 	bl	80056e0 <u8g2_update_dimension_common>
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff ff7b 	bl	80057c4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80058ce:	bf00      	nop
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b084      	sub	sp, #16
 80058da:	af02      	add	r7, sp, #8
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	4608      	mov	r0, r1
 80058e0:	4611      	mov	r1, r2
 80058e2:	461a      	mov	r2, r3
 80058e4:	4603      	mov	r3, r0
 80058e6:	70fb      	strb	r3, [r7, #3]
 80058e8:	460b      	mov	r3, r1
 80058ea:	70bb      	strb	r3, [r7, #2]
 80058ec:	4613      	mov	r3, r2
 80058ee:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80058f0:	7878      	ldrb	r0, [r7, #1]
 80058f2:	78ba      	ldrb	r2, [r7, #2]
 80058f4:	78f9      	ldrb	r1, [r7, #3]
 80058f6:	7c3b      	ldrb	r3, [r7, #16]
 80058f8:	9300      	str	r3, [sp, #0]
 80058fa:	4603      	mov	r3, r0
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff fc8b 	bl	8005218 <u8g2_draw_hv_line_2dir>
}
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	460b      	mov	r3, r1
 8005930:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8005932:	78fb      	ldrb	r3, [r7, #3]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <u8x8_ascii_next+0x18>
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	2b0a      	cmp	r3, #10
 800593c:	d102      	bne.n	8005944 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800593e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005942:	e001      	b.n	8005948 <u8x8_ascii_next+0x22>
  return b;
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	b29b      	uxth	r3, r3
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005954:	b590      	push	{r4, r7, lr}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	460b      	mov	r3, r1
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	691c      	ldr	r4, [r3, #16]
 8005966:	7afa      	ldrb	r2, [r7, #11]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2117      	movs	r1, #23
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	47a0      	blx	r4
 8005970:	4603      	mov	r3, r0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	bd90      	pop	{r4, r7, pc}

0800597a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8005986:	1cfb      	adds	r3, r7, #3
 8005988:	461a      	mov	r2, r3
 800598a:	2101      	movs	r1, #1
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff ffe1 	bl	8005954 <u8x8_byte_SendBytes>
 8005992:	4603      	mov	r3, r0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800599c:	b590      	push	{r4, r7, lr}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691c      	ldr	r4, [r3, #16]
 80059a8:	2300      	movs	r3, #0
 80059aa:	2200      	movs	r2, #0
 80059ac:	2118      	movs	r1, #24
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	47a0      	blx	r4
 80059b2:	4603      	mov	r3, r0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd90      	pop	{r4, r7, pc}

080059bc <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 80059bc:	b590      	push	{r4, r7, lr}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691c      	ldr	r4, [r3, #16]
 80059c8:	2300      	movs	r3, #0
 80059ca:	2200      	movs	r2, #0
 80059cc:	2119      	movs	r1, #25
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	47a0      	blx	r4
 80059d2:	4603      	mov	r3, r0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd90      	pop	{r4, r7, pc}

080059dc <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68dc      	ldr	r4, [r3, #12]
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	2300      	movs	r3, #0
 80059f0:	2115      	movs	r1, #21
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	47a0      	blx	r4
 80059f6:	4603      	mov	r3, r0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd90      	pop	{r4, r7, pc}

08005a00 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8005a00:	b590      	push	{r4, r7, lr}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68dc      	ldr	r4, [r3, #12]
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	2300      	movs	r3, #0
 8005a14:	2116      	movs	r1, #22
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	47a0      	blx	r4
 8005a1a:	4603      	mov	r3, r0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd90      	pop	{r4, r7, pc}

08005a24 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005a24:	b590      	push	{r4, r7, lr}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	68dc      	ldr	r4, [r3, #12]
 8005a36:	7afa      	ldrb	r2, [r7, #11]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2117      	movs	r1, #23
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	47a0      	blx	r4
 8005a40:	4603      	mov	r3, r0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd90      	pop	{r4, r7, pc}

08005a4a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8005a4a:	b590      	push	{r4, r7, lr}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68dc      	ldr	r4, [r3, #12]
 8005a56:	2300      	movs	r3, #0
 8005a58:	2200      	movs	r2, #0
 8005a5a:	2118      	movs	r1, #24
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	47a0      	blx	r4
 8005a60:	4603      	mov	r3, r0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd90      	pop	{r4, r7, pc}

08005a6a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8005a6a:	b590      	push	{r4, r7, lr}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68dc      	ldr	r4, [r3, #12]
 8005a76:	2300      	movs	r3, #0
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2119      	movs	r1, #25
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	47a0      	blx	r4
 8005a80:	4603      	mov	r3, r0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd90      	pop	{r4, r7, pc}

08005a8a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8005a8a:	b590      	push	{r4, r7, lr}
 8005a8c:	b085      	sub	sp, #20
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	73fb      	strb	r3, [r7, #15]
    data++;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	2bfe      	cmp	r3, #254	; 0xfe
 8005aa4:	d031      	beq.n	8005b0a <u8x8_cad_SendSequence+0x80>
 8005aa6:	2bfe      	cmp	r3, #254	; 0xfe
 8005aa8:	dc3d      	bgt.n	8005b26 <u8x8_cad_SendSequence+0x9c>
 8005aaa:	2b19      	cmp	r3, #25
 8005aac:	dc3b      	bgt.n	8005b26 <u8x8_cad_SendSequence+0x9c>
 8005aae:	2b18      	cmp	r3, #24
 8005ab0:	da23      	bge.n	8005afa <u8x8_cad_SendSequence+0x70>
 8005ab2:	2b16      	cmp	r3, #22
 8005ab4:	dc02      	bgt.n	8005abc <u8x8_cad_SendSequence+0x32>
 8005ab6:	2b15      	cmp	r3, #21
 8005ab8:	da03      	bge.n	8005ac2 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8005aba:	e034      	b.n	8005b26 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8005abc:	2b17      	cmp	r3, #23
 8005abe:	d00e      	beq.n	8005ade <u8x8_cad_SendSequence+0x54>
	return;
 8005ac0:	e031      	b.n	8005b26 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68dc      	ldr	r4, [r3, #12]
 8005acc:	7bba      	ldrb	r2, [r7, #14]
 8005ace:	7bf9      	ldrb	r1, [r7, #15]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	47a0      	blx	r4
	  data++;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	603b      	str	r3, [r7, #0]
	  break;
 8005adc:	e022      	b.n	8005b24 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8005ae4:	f107 030e 	add.w	r3, r7, #14
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2101      	movs	r1, #1
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff ff99 	bl	8005a24 <u8x8_cad_SendData>
	  data++;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	3301      	adds	r3, #1
 8005af6:	603b      	str	r3, [r7, #0]
	  break;
 8005af8:	e014      	b.n	8005b24 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68dc      	ldr	r4, [r3, #12]
 8005afe:	7bf9      	ldrb	r1, [r7, #15]
 8005b00:	2300      	movs	r3, #0
 8005b02:	2200      	movs	r2, #0
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	47a0      	blx	r4
	  break;
 8005b08:	e00c      	b.n	8005b24 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8005b10:	7bbb      	ldrb	r3, [r7, #14]
 8005b12:	461a      	mov	r2, r3
 8005b14:	2129      	movs	r1, #41	; 0x29
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fa2d 	bl	8005f76 <u8x8_gpio_call>
	  data++;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	603b      	str	r3, [r7, #0]
	  break;
 8005b22:	bf00      	nop
    cmd = *data;
 8005b24:	e7b6      	b.n	8005a94 <u8x8_cad_SendSequence+0xa>
	return;
 8005b26:	bf00      	nop
    }
  }
}
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd90      	pop	{r4, r7, pc}

08005b2e <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8005b2e:	b590      	push	{r4, r7, lr}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	60f8      	str	r0, [r7, #12]
 8005b36:	460b      	mov	r3, r1
 8005b38:	607a      	str	r2, [r7, #4]
 8005b3a:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f7ff ff2d 	bl	800599c <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8005b42:	2140      	movs	r1, #64	; 0x40
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7ff ff18 	bl	800597a <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	691c      	ldr	r4, [r3, #16]
 8005b4e:	7afa      	ldrb	r2, [r7, #11]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2117      	movs	r1, #23
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff ff2f 	bl	80059bc <u8x8_byte_EndTransfer>
}
 8005b5e:	bf00      	nop
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd90      	pop	{r4, r7, pc}
	...

08005b68 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005b68:	b590      	push	{r4, r7, lr}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	607b      	str	r3, [r7, #4]
 8005b72:	460b      	mov	r3, r1
 8005b74:	72fb      	strb	r3, [r7, #11]
 8005b76:	4613      	mov	r3, r2
 8005b78:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8005b7a:	7afb      	ldrb	r3, [r7, #11]
 8005b7c:	3b14      	subs	r3, #20
 8005b7e:	2b05      	cmp	r3, #5
 8005b80:	d86e      	bhi.n	8005c60 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8005b82:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8005b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b88:	08005c1f 	.word	0x08005c1f
 8005b8c:	08005ba1 	.word	0x08005ba1
 8005b90:	08005bcf 	.word	0x08005bcf
 8005b94:	08005bdb 	.word	0x08005bdb
 8005b98:	08005c43 	.word	0x08005c43
 8005b9c:	08005c4b 	.word	0x08005c4b
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8005ba0:	4b33      	ldr	r3, [pc, #204]	; (8005c70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f7ff ff07 	bl	80059bc <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff fef4 	bl	800599c <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff fedf 	bl	800597a <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005bbc:	7abb      	ldrb	r3, [r7, #10]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f7ff feda 	bl	800597a <u8x8_byte_SendByte>
      in_transfer = 1;
 8005bc6:	4b2a      	ldr	r3, [pc, #168]	; (8005c70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005bc8:	2201      	movs	r2, #1
 8005bca:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8005bcc:	e04a      	b.n	8005c64 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8005bce:	7abb      	ldrb	r3, [r7, #10]
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f7ff fed1 	bl	800597a <u8x8_byte_SendByte>
      break;      
 8005bd8:	e044      	b.n	8005c64 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8005bda:	4b25      	ldr	r3, [pc, #148]	; (8005c70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff feea 	bl	80059bc <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8005bec:	e00a      	b.n	8005c04 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	2118      	movs	r1, #24
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f7ff ff9b 	bl	8005b2e <u8x8_i2c_data_transfer>
	arg_int-=24;
 8005bf8:	7abb      	ldrb	r3, [r7, #10]
 8005bfa:	3b18      	subs	r3, #24
 8005bfc:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	3318      	adds	r3, #24
 8005c02:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8005c04:	7abb      	ldrb	r3, [r7, #10]
 8005c06:	2b18      	cmp	r3, #24
 8005c08:	d8f1      	bhi.n	8005bee <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8005c0a:	7abb      	ldrb	r3, [r7, #10]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f7ff ff8c 	bl	8005b2e <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8005c16:	4b16      	ldr	r3, [pc, #88]	; (8005c70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]
      break;
 8005c1c:	e022      	b.n	8005c64 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c24:	2bff      	cmp	r3, #255	; 0xff
 8005c26:	d103      	bne.n	8005c30 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2278      	movs	r2, #120	; 0x78
 8005c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	691c      	ldr	r4, [r3, #16]
 8005c34:	7aba      	ldrb	r2, [r7, #10]
 8005c36:	7af9      	ldrb	r1, [r7, #11]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	47a0      	blx	r4
 8005c3e:	4603      	mov	r3, r0
 8005c40:	e011      	b.n	8005c66 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8005c42:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	701a      	strb	r2, [r3, #0]
      break;
 8005c48:	e00c      	b.n	8005c64 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8005c4a:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f7ff feb2 	bl	80059bc <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	701a      	strb	r2, [r3, #0]
      break;
 8005c5e:	e001      	b.n	8005c64 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e000      	b.n	8005c66 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8005c64:	2301      	movs	r3, #1
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd90      	pop	{r4, r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	2000064c 	.word	0x2000064c

08005c74 <u8x8_d_ssd1306_128x32_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	607b      	str	r3, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	72fb      	strb	r3, [r7, #11]
 8005c82:	4613      	mov	r3, r2
 8005c84:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8005c86:	7afb      	ldrb	r3, [r7, #11]
 8005c88:	3b0a      	subs	r3, #10
 8005c8a:	2b05      	cmp	r3, #5
 8005c8c:	f200 8090 	bhi.w	8005db0 <u8x8_d_ssd1306_128x32_generic+0x13c>
 8005c90:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <u8x8_d_ssd1306_128x32_generic+0x24>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005cb1 	.word	0x08005cb1
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005db1 	.word	0x08005db1
 8005ca4:	08005cdb 	.word	0x08005cdb
 8005ca8:	08005d0d 	.word	0x08005d0d
 8005cac:	08005d2d 	.word	0x08005d2d
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f8c3 	bl	8005e3c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
 8005cb6:	4942      	ldr	r1, [pc, #264]	; (8005dc0 <u8x8_d_ssd1306_128x32_generic+0x14c>)
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f7ff fee6 	bl	8005a8a <u8x8_cad_SendSequence>
      break;
 8005cbe:	e079      	b.n	8005db4 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8005cc0:	7abb      	ldrb	r3, [r7, #10]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d104      	bne.n	8005cd0 <u8x8_d_ssd1306_128x32_generic+0x5c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
 8005cc6:	493f      	ldr	r1, [pc, #252]	; (8005dc4 <u8x8_d_ssd1306_128x32_generic+0x150>)
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff fede 	bl	8005a8a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
      break;
 8005cce:	e071      	b.n	8005db4 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 8005cd0:	493d      	ldr	r1, [pc, #244]	; (8005dc8 <u8x8_d_ssd1306_128x32_generic+0x154>)
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff fed9 	bl	8005a8a <u8x8_cad_SendSequence>
      break;
 8005cd8:	e06c      	b.n	8005db4 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8005cda:	7abb      	ldrb	r3, [r7, #10]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <u8x8_d_ssd1306_128x32_generic+0x82>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
 8005ce0:	493a      	ldr	r1, [pc, #232]	; (8005dcc <u8x8_d_ssd1306_128x32_generic+0x158>)
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f7ff fed1 	bl	8005a8a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	7c9a      	ldrb	r2, [r3, #18]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8005cf4:	e05e      	b.n	8005db4 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
 8005cf6:	4936      	ldr	r1, [pc, #216]	; (8005dd0 <u8x8_d_ssd1306_128x32_generic+0x15c>)
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7ff fec6 	bl	8005a8a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	7cda      	ldrb	r2, [r3, #19]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8005d0a:	e053      	b.n	8005db4 <u8x8_d_ssd1306_128x32_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f7ff fe9c 	bl	8005a4a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8005d12:	2181      	movs	r1, #129	; 0x81
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f7ff fe61 	bl	80059dc <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8005d1a:	7abb      	ldrb	r3, [r7, #10]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff fe6e 	bl	8005a00 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff fea0 	bl	8005a6a <u8x8_cad_EndTransfer>
      break;
 8005d2a:	e043      	b.n	8005db4 <u8x8_d_ssd1306_128x32_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f7ff fe8c 	bl	8005a4a <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	795b      	ldrb	r3, [r3, #5]
 8005d36:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	4413      	add	r3, r2
 8005d48:	75fb      	strb	r3, [r7, #23]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
 8005d4c:	091b      	lsrs	r3, r3, #4
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	f043 0310 	orr.w	r3, r3, #16
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	4619      	mov	r1, r3
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f7ff fe3f 	bl	80059dc <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	4619      	mov	r1, r3
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f7ff fe37 	bl	80059dc <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	799b      	ldrb	r3, [r3, #6]
 8005d72:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	4619      	mov	r1, r3
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f7ff fe2e 	bl	80059dc <u8x8_cad_SendCmd>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	791b      	ldrb	r3, [r3, #4]
 8005d84:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8005d8c:	7dbb      	ldrb	r3, [r7, #22]
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4619      	mov	r1, r3
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f7ff fe44 	bl	8005a24 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8005d9c:	7abb      	ldrb	r3, [r7, #10]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8005da2:	7abb      	ldrb	r3, [r7, #10]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1eb      	bne.n	8005d80 <u8x8_d_ssd1306_128x32_generic+0x10c>
      
      u8x8_cad_EndTransfer(u8x8);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7ff fe5e 	bl	8005a6a <u8x8_cad_EndTransfer>
      break;
 8005dae:	e001      	b.n	8005db4 <u8x8_d_ssd1306_128x32_generic+0x140>
    default:
      return 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	e000      	b.n	8005db6 <u8x8_d_ssd1306_128x32_generic+0x142>
  }
  return 1;
 8005db4:	2301      	movs	r3, #1
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3718      	adds	r7, #24
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	0801a3ec 	.word	0x0801a3ec
 8005dc4:	0801a424 	.word	0x0801a424
 8005dc8:	0801a42c 	.word	0x0801a42c
 8005dcc:	0801a434 	.word	0x0801a434
 8005dd0:	0801a43c 	.word	0x0801a43c

08005dd4 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	607b      	str	r3, [r7, #4]
 8005dde:	460b      	mov	r3, r1
 8005de0:	72fb      	strb	r3, [r7, #11]
 8005de2:	4613      	mov	r3, r2
 8005de4:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 8005de6:	7afb      	ldrb	r3, [r7, #11]
 8005de8:	2b09      	cmp	r3, #9
 8005dea:	d105      	bne.n	8005df8 <u8x8_d_ssd1306_128x32_univision+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
 8005dec:	4908      	ldr	r1, [pc, #32]	; (8005e10 <u8x8_d_ssd1306_128x32_univision+0x3c>)
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 f810 	bl	8005e14 <u8x8_d_helper_display_setup_memory>
      return 1;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e006      	b.n	8005e06 <u8x8_d_ssd1306_128x32_univision+0x32>
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
 8005df8:	7aba      	ldrb	r2, [r7, #10]
 8005dfa:	7af9      	ldrb	r1, [r7, #11]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f7ff ff38 	bl	8005c74 <u8x8_d_ssd1306_128x32_generic>
 8005e04:	4603      	mov	r3, r0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	0801a444 	.word	0x0801a444

08005e14 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	7c9a      	ldrb	r2, [r3, #18]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8005e3c:	b590      	push	{r4, r7, lr}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695c      	ldr	r4, [r3, #20]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2128      	movs	r1, #40	; 0x28
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68dc      	ldr	r4, [r3, #12]
 8005e56:	2300      	movs	r3, #0
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2114      	movs	r1, #20
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8005e60:	2201      	movs	r2, #1
 8005e62:	214b      	movs	r1, #75	; 0x4b
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f886 	bl	8005f76 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	791b      	ldrb	r3, [r3, #4]
 8005e70:	461a      	mov	r2, r3
 8005e72:	2129      	movs	r1, #41	; 0x29
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f87e 	bl	8005f76 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	214b      	movs	r1, #75	; 0x4b
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f879 	bl	8005f76 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	791b      	ldrb	r3, [r3, #4]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	2129      	movs	r1, #41	; 0x29
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f871 	bl	8005f76 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8005e94:	2201      	movs	r2, #1
 8005e96:	214b      	movs	r1, #75	; 0x4b
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f86c 	bl	8005f76 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	795b      	ldrb	r3, [r3, #5]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	2129      	movs	r1, #41	; 0x29
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f864 	bl	8005f76 <u8x8_gpio_call>
}    
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd90      	pop	{r4, r7, pc}

08005eb6 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8005eb6:	b590      	push	{r4, r7, lr}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	4608      	mov	r0, r1
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	70fb      	strb	r3, [r7, #3]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	70bb      	strb	r3, [r7, #2]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8005ed4:	78bb      	ldrb	r3, [r7, #2]
 8005ed6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8005ed8:	787b      	ldrb	r3, [r7, #1]
 8005eda:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689c      	ldr	r4, [r3, #8]
 8005ee4:	f107 0308 	add.w	r3, r7, #8
 8005ee8:	2201      	movs	r2, #1
 8005eea:	210f      	movs	r1, #15
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	47a0      	blx	r4
 8005ef0:	4603      	mov	r3, r0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd90      	pop	{r4, r7, pc}

08005efa <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8005efa:	b590      	push	{r4, r7, lr}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689c      	ldr	r4, [r3, #8]
 8005f06:	2300      	movs	r3, #0
 8005f08:	2200      	movs	r2, #0
 8005f0a:	2109      	movs	r1, #9
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	47a0      	blx	r4
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd90      	pop	{r4, r7, pc}

08005f18 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8005f18:	b590      	push	{r4, r7, lr}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689c      	ldr	r4, [r3, #8]
 8005f24:	2300      	movs	r3, #0
 8005f26:	2200      	movs	r2, #0
 8005f28:	210a      	movs	r1, #10
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	47a0      	blx	r4
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd90      	pop	{r4, r7, pc}

08005f36 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8005f36:	b590      	push	{r4, r7, lr}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689c      	ldr	r4, [r3, #8]
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	2300      	movs	r3, #0
 8005f4a:	210b      	movs	r1, #11
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	47a0      	blx	r4
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd90      	pop	{r4, r7, pc}

08005f58 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8005f58:	b590      	push	{r4, r7, lr}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689c      	ldr	r4, [r3, #8]
 8005f64:	2300      	movs	r3, #0
 8005f66:	2200      	movs	r2, #0
 8005f68:	2110      	movs	r1, #16
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	47a0      	blx	r4
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd90      	pop	{r4, r7, pc}

08005f76 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8005f76:	b590      	push	{r4, r7, lr}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	70fb      	strb	r3, [r7, #3]
 8005f82:	4613      	mov	r3, r2
 8005f84:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	695c      	ldr	r4, [r3, #20]
 8005f8a:	78ba      	ldrb	r2, [r7, #2]
 8005f8c:	78f9      	ldrb	r1, [r7, #3]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	47a0      	blx	r4
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd90      	pop	{r4, r7, pc}

08005f9c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	72fb      	strb	r3, [r7, #11]
 8005faa:	4613      	mov	r3, r2
 8005fac:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a13      	ldr	r2, [pc, #76]	; (800601c <u8x8_SetupDefaults+0x60>)
 8005fce:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a12      	ldr	r2, [pc, #72]	; (800601c <u8x8_SetupDefaults+0x60>)
 8005fd4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a10      	ldr	r2, [pc, #64]	; (800601c <u8x8_SetupDefaults+0x60>)
 8005fda:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a0f      	ldr	r2, [pc, #60]	; (800601c <u8x8_SetupDefaults+0x60>)
 8005fe0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	22ff      	movs	r2, #255	; 0xff
 8006004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	22ff      	movs	r2, #255	; 0xff
 800600c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	08005f9d 	.word	0x08005f9d

08006020 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f7ff ffc4 	bl	8005fbc <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff ff54 	bl	8005efa <u8x8_SetupMemory>
}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800605c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006094 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006060:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006062:	e003      	b.n	800606c <LoopCopyDataInit>

08006064 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006064:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006066:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006068:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800606a:	3104      	adds	r1, #4

0800606c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800606c:	480b      	ldr	r0, [pc, #44]	; (800609c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800606e:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006070:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006072:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006074:	d3f6      	bcc.n	8006064 <CopyDataInit>
  ldr  r2, =_sbss
 8006076:	4a0b      	ldr	r2, [pc, #44]	; (80060a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006078:	e002      	b.n	8006080 <LoopFillZerobss>

0800607a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800607a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800607c:	f842 3b04 	str.w	r3, [r2], #4

08006080 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006080:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006082:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006084:	d3f9      	bcc.n	800607a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006086:	f7fd fa1d 	bl	80034c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800608a:	f00c ff63 	bl	8012f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800608e:	f7fc fd3b 	bl	8002b08 <main>
  bx  lr    
 8006092:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006094:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006098:	0801aa00 	.word	0x0801aa00
  ldr  r0, =_sdata
 800609c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80060a0:	20000374 	.word	0x20000374
  ldr  r2, =_sbss
 80060a4:	20000378 	.word	0x20000378
  ldr  r3, = _ebss
 80060a8:	20003380 	.word	0x20003380

080060ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80060ac:	e7fe      	b.n	80060ac <ADC_IRQHandler>
	...

080060b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80060b4:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <HAL_Init+0x40>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a0d      	ldr	r2, [pc, #52]	; (80060f0 <HAL_Init+0x40>)
 80060ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <HAL_Init+0x40>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a0a      	ldr	r2, [pc, #40]	; (80060f0 <HAL_Init+0x40>)
 80060c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060cc:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <HAL_Init+0x40>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a07      	ldr	r2, [pc, #28]	; (80060f0 <HAL_Init+0x40>)
 80060d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060d8:	2003      	movs	r0, #3
 80060da:	f000 fd1b 	bl	8006b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060de:	2000      	movs	r0, #0
 80060e0:	f000 f808 	bl	80060f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060e4:	f7fd f8b8 	bl	8003258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40023c00 	.word	0x40023c00

080060f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060fc:	4b12      	ldr	r3, [pc, #72]	; (8006148 <HAL_InitTick+0x54>)
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	4b12      	ldr	r3, [pc, #72]	; (800614c <HAL_InitTick+0x58>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	4619      	mov	r1, r3
 8006106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800610a:	fbb3 f3f1 	udiv	r3, r3, r1
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fd33 	bl	8006b7e <HAL_SYSTICK_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e00e      	b.n	8006140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b0f      	cmp	r3, #15
 8006126:	d80a      	bhi.n	800613e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006128:	2200      	movs	r2, #0
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	f04f 30ff 	mov.w	r0, #4294967295
 8006130:	f000 fcfb 	bl	8006b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006134:	4a06      	ldr	r2, [pc, #24]	; (8006150 <HAL_InitTick+0x5c>)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e000      	b.n	8006140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20000004 	.word	0x20000004
 800614c:	2000000c 	.word	0x2000000c
 8006150:	20000008 	.word	0x20000008

08006154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006158:	4b06      	ldr	r3, [pc, #24]	; (8006174 <HAL_IncTick+0x20>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	4b06      	ldr	r3, [pc, #24]	; (8006178 <HAL_IncTick+0x24>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4413      	add	r3, r2
 8006164:	4a04      	ldr	r2, [pc, #16]	; (8006178 <HAL_IncTick+0x24>)
 8006166:	6013      	str	r3, [r2, #0]
}
 8006168:	bf00      	nop
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	2000000c 	.word	0x2000000c
 8006178:	20001624 	.word	0x20001624

0800617c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
  return uwTick;
 8006180:	4b03      	ldr	r3, [pc, #12]	; (8006190 <HAL_GetTick+0x14>)
 8006182:	681b      	ldr	r3, [r3, #0]
}
 8006184:	4618      	mov	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20001624 	.word	0x20001624

08006194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800619c:	f7ff ffee 	bl	800617c <HAL_GetTick>
 80061a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ac:	d005      	beq.n	80061ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80061ae:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <HAL_Delay+0x44>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	461a      	mov	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80061ba:	bf00      	nop
 80061bc:	f7ff ffde 	bl	800617c <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d8f7      	bhi.n	80061bc <HAL_Delay+0x28>
  {
  }
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	2000000c 	.word	0x2000000c

080061dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e033      	b.n	800625a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d109      	bne.n	800620e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fb fb44 	bl	8001888 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f003 0310 	and.w	r3, r3, #16
 8006216:	2b00      	cmp	r3, #0
 8006218:	d118      	bne.n	800624c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006222:	f023 0302 	bic.w	r3, r3, #2
 8006226:	f043 0202 	orr.w	r2, r3, #2
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 faa4 	bl	800677c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	f023 0303 	bic.w	r3, r3, #3
 8006242:	f043 0201 	orr.w	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
 800624a:	e001      	b.n	8006250 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006258:	7bfb      	ldrb	r3, [r7, #15]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_ADC_Start+0x1a>
 800627a:	2302      	movs	r3, #2
 800627c:	e0b2      	b.n	80063e4 <HAL_ADC_Start+0x180>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b01      	cmp	r3, #1
 8006292:	d018      	beq.n	80062c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0201 	orr.w	r2, r2, #1
 80062a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80062a4:	4b52      	ldr	r3, [pc, #328]	; (80063f0 <HAL_ADC_Start+0x18c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a52      	ldr	r2, [pc, #328]	; (80063f4 <HAL_ADC_Start+0x190>)
 80062aa:	fba2 2303 	umull	r2, r3, r2, r3
 80062ae:	0c9a      	lsrs	r2, r3, #18
 80062b0:	4613      	mov	r3, r2
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	4413      	add	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80062b8:	e002      	b.n	80062c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	3b01      	subs	r3, #1
 80062be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f9      	bne.n	80062ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d17a      	bne.n	80063ca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80062dc:	f023 0301 	bic.w	r3, r3, #1
 80062e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80062fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800630e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006312:	d106      	bne.n	8006322 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006318:	f023 0206 	bic.w	r2, r3, #6
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	645a      	str	r2, [r3, #68]	; 0x44
 8006320:	e002      	b.n	8006328 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006330:	4b31      	ldr	r3, [pc, #196]	; (80063f8 <HAL_ADC_Start+0x194>)
 8006332:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800633c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f003 031f 	and.w	r3, r3, #31
 8006346:	2b00      	cmp	r3, #0
 8006348:	d12a      	bne.n	80063a0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a2b      	ldr	r2, [pc, #172]	; (80063fc <HAL_ADC_Start+0x198>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d015      	beq.n	8006380 <HAL_ADC_Start+0x11c>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a29      	ldr	r2, [pc, #164]	; (8006400 <HAL_ADC_Start+0x19c>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d105      	bne.n	800636a <HAL_ADC_Start+0x106>
 800635e:	4b26      	ldr	r3, [pc, #152]	; (80063f8 <HAL_ADC_Start+0x194>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a25      	ldr	r2, [pc, #148]	; (8006404 <HAL_ADC_Start+0x1a0>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d136      	bne.n	80063e2 <HAL_ADC_Start+0x17e>
 8006374:	4b20      	ldr	r3, [pc, #128]	; (80063f8 <HAL_ADC_Start+0x194>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b00      	cmp	r3, #0
 800637e:	d130      	bne.n	80063e2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d129      	bne.n	80063e2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800639c:	609a      	str	r2, [r3, #8]
 800639e:	e020      	b.n	80063e2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a15      	ldr	r2, [pc, #84]	; (80063fc <HAL_ADC_Start+0x198>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d11b      	bne.n	80063e2 <HAL_ADC_Start+0x17e>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d114      	bne.n	80063e2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80063c6:	609a      	str	r2, [r3, #8]
 80063c8:	e00b      	b.n	80063e2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	f043 0210 	orr.w	r2, r3, #16
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063da:	f043 0201 	orr.w	r2, r3, #1
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	20000004 	.word	0x20000004
 80063f4:	431bde83 	.word	0x431bde83
 80063f8:	40012300 	.word	0x40012300
 80063fc:	40012000 	.word	0x40012000
 8006400:	40012100 	.word	0x40012100
 8006404:	40012200 	.word	0x40012200

08006408 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006424:	d113      	bne.n	800644e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006434:	d10b      	bne.n	800644e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	f043 0220 	orr.w	r2, r3, #32
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e063      	b.n	8006516 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800644e:	f7ff fe95 	bl	800617c <HAL_GetTick>
 8006452:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006454:	e021      	b.n	800649a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645c:	d01d      	beq.n	800649a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <HAL_ADC_PollForConversion+0x6c>
 8006464:	f7ff fe8a 	bl	800617c <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d212      	bcs.n	800649a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b02      	cmp	r3, #2
 8006480:	d00b      	beq.n	800649a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	f043 0204 	orr.w	r2, r3, #4
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e03d      	b.n	8006516 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d1d6      	bne.n	8006456 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0212 	mvn.w	r2, #18
 80064b0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d123      	bne.n	8006514 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d11f      	bne.n	8006514 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d006      	beq.n	80064f0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d111      	bne.n	8006514 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d105      	bne.n	8006514 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	f043 0201 	orr.w	r2, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_ADC_ConfigChannel+0x1c>
 8006550:	2302      	movs	r3, #2
 8006552:	e105      	b.n	8006760 <HAL_ADC_ConfigChannel+0x228>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2b09      	cmp	r3, #9
 8006562:	d925      	bls.n	80065b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68d9      	ldr	r1, [r3, #12]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	4613      	mov	r3, r2
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	4413      	add	r3, r2
 8006578:	3b1e      	subs	r3, #30
 800657a:	2207      	movs	r2, #7
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	43da      	mvns	r2, r3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	400a      	ands	r2, r1
 8006588:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68d9      	ldr	r1, [r3, #12]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	b29b      	uxth	r3, r3
 800659a:	4618      	mov	r0, r3
 800659c:	4603      	mov	r3, r0
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	4403      	add	r3, r0
 80065a2:	3b1e      	subs	r3, #30
 80065a4:	409a      	lsls	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	60da      	str	r2, [r3, #12]
 80065ae:	e022      	b.n	80065f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6919      	ldr	r1, [r3, #16]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	4613      	mov	r3, r2
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	4413      	add	r3, r2
 80065c4:	2207      	movs	r2, #7
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	43da      	mvns	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	400a      	ands	r2, r1
 80065d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6919      	ldr	r1, [r3, #16]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	689a      	ldr	r2, [r3, #8]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	4618      	mov	r0, r3
 80065e6:	4603      	mov	r3, r0
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	4403      	add	r3, r0
 80065ec:	409a      	lsls	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b06      	cmp	r3, #6
 80065fc:	d824      	bhi.n	8006648 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	4613      	mov	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	3b05      	subs	r3, #5
 8006610:	221f      	movs	r2, #31
 8006612:	fa02 f303 	lsl.w	r3, r2, r3
 8006616:	43da      	mvns	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	400a      	ands	r2, r1
 800661e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	b29b      	uxth	r3, r3
 800662c:	4618      	mov	r0, r3
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	3b05      	subs	r3, #5
 800663a:	fa00 f203 	lsl.w	r2, r0, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	635a      	str	r2, [r3, #52]	; 0x34
 8006646:	e04c      	b.n	80066e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b0c      	cmp	r3, #12
 800664e:	d824      	bhi.n	800669a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	3b23      	subs	r3, #35	; 0x23
 8006662:	221f      	movs	r2, #31
 8006664:	fa02 f303 	lsl.w	r3, r2, r3
 8006668:	43da      	mvns	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	400a      	ands	r2, r1
 8006670:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	4618      	mov	r0, r3
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	3b23      	subs	r3, #35	; 0x23
 800668c:	fa00 f203 	lsl.w	r2, r0, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
 8006698:	e023      	b.n	80066e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	3b41      	subs	r3, #65	; 0x41
 80066ac:	221f      	movs	r2, #31
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	43da      	mvns	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	400a      	ands	r2, r1
 80066ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	4618      	mov	r0, r3
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	3b41      	subs	r3, #65	; 0x41
 80066d6:	fa00 f203 	lsl.w	r2, r0, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80066e2:	4b22      	ldr	r3, [pc, #136]	; (800676c <HAL_ADC_ConfigChannel+0x234>)
 80066e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a21      	ldr	r2, [pc, #132]	; (8006770 <HAL_ADC_ConfigChannel+0x238>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d109      	bne.n	8006704 <HAL_ADC_ConfigChannel+0x1cc>
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b12      	cmp	r3, #18
 80066f6:	d105      	bne.n	8006704 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a19      	ldr	r2, [pc, #100]	; (8006770 <HAL_ADC_ConfigChannel+0x238>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d123      	bne.n	8006756 <HAL_ADC_ConfigChannel+0x21e>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b10      	cmp	r3, #16
 8006714:	d003      	beq.n	800671e <HAL_ADC_ConfigChannel+0x1e6>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b11      	cmp	r3, #17
 800671c:	d11b      	bne.n	8006756 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b10      	cmp	r3, #16
 8006730:	d111      	bne.n	8006756 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006732:	4b10      	ldr	r3, [pc, #64]	; (8006774 <HAL_ADC_ConfigChannel+0x23c>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a10      	ldr	r2, [pc, #64]	; (8006778 <HAL_ADC_ConfigChannel+0x240>)
 8006738:	fba2 2303 	umull	r2, r3, r2, r3
 800673c:	0c9a      	lsrs	r2, r3, #18
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006748:	e002      	b.n	8006750 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	3b01      	subs	r3, #1
 800674e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f9      	bne.n	800674a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40012300 	.word	0x40012300
 8006770:	40012000 	.word	0x40012000
 8006774:	20000004 	.word	0x20000004
 8006778:	431bde83 	.word	0x431bde83

0800677c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006784:	4b79      	ldr	r3, [pc, #484]	; (800696c <ADC_Init+0x1f0>)
 8006786:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	431a      	orrs	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6859      	ldr	r1, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	021a      	lsls	r2, r3, #8
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80067d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6859      	ldr	r1, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689a      	ldr	r2, [r3, #8]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6899      	ldr	r1, [r3, #8]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680e:	4a58      	ldr	r2, [pc, #352]	; (8006970 <ADC_Init+0x1f4>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d022      	beq.n	800685a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006822:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6899      	ldr	r1, [r3, #8]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	430a      	orrs	r2, r1
 8006834:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6899      	ldr	r1, [r3, #8]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	609a      	str	r2, [r3, #8]
 8006858:	e00f      	b.n	800687a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006868:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006878:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0202 	bic.w	r2, r2, #2
 8006888:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6899      	ldr	r1, [r3, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	7e1b      	ldrb	r3, [r3, #24]
 8006894:	005a      	lsls	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d01b      	beq.n	80068e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80068c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6859      	ldr	r1, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	3b01      	subs	r3, #1
 80068d4:	035a      	lsls	r2, r3, #13
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]
 80068de:	e007      	b.n	80068f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80068fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	3b01      	subs	r3, #1
 800690c:	051a      	lsls	r2, r3, #20
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006924:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6899      	ldr	r1, [r3, #8]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006932:	025a      	lsls	r2, r3, #9
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	430a      	orrs	r2, r1
 800693a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800694a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6899      	ldr	r1, [r3, #8]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	029a      	lsls	r2, r3, #10
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	609a      	str	r2, [r3, #8]
}
 8006960:	bf00      	nop
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	40012300 	.word	0x40012300
 8006970:	0f000001 	.word	0x0f000001

08006974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006990:	4013      	ands	r3, r2
 8006992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800699c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069a6:	4a04      	ldr	r2, [pc, #16]	; (80069b8 <__NVIC_SetPriorityGrouping+0x44>)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	60d3      	str	r3, [r2, #12]
}
 80069ac:	bf00      	nop
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	e000ed00 	.word	0xe000ed00

080069bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069c0:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <__NVIC_GetPriorityGrouping+0x18>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	0a1b      	lsrs	r3, r3, #8
 80069c6:	f003 0307 	and.w	r3, r3, #7
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	e000ed00 	.word	0xe000ed00

080069d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	db0b      	blt.n	8006a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069ea:	79fb      	ldrb	r3, [r7, #7]
 80069ec:	f003 021f 	and.w	r2, r3, #31
 80069f0:	4907      	ldr	r1, [pc, #28]	; (8006a10 <__NVIC_EnableIRQ+0x38>)
 80069f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	2001      	movs	r0, #1
 80069fa:	fa00 f202 	lsl.w	r2, r0, r2
 80069fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	e000e100 	.word	0xe000e100

08006a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	6039      	str	r1, [r7, #0]
 8006a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	db0a      	blt.n	8006a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	490c      	ldr	r1, [pc, #48]	; (8006a60 <__NVIC_SetPriority+0x4c>)
 8006a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a32:	0112      	lsls	r2, r2, #4
 8006a34:	b2d2      	uxtb	r2, r2
 8006a36:	440b      	add	r3, r1
 8006a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a3c:	e00a      	b.n	8006a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	4908      	ldr	r1, [pc, #32]	; (8006a64 <__NVIC_SetPriority+0x50>)
 8006a44:	79fb      	ldrb	r3, [r7, #7]
 8006a46:	f003 030f 	and.w	r3, r3, #15
 8006a4a:	3b04      	subs	r3, #4
 8006a4c:	0112      	lsls	r2, r2, #4
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	440b      	add	r3, r1
 8006a52:	761a      	strb	r2, [r3, #24]
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	e000e100 	.word	0xe000e100
 8006a64:	e000ed00 	.word	0xe000ed00

08006a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b089      	sub	sp, #36	; 0x24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	f1c3 0307 	rsb	r3, r3, #7
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	bf28      	it	cs
 8006a86:	2304      	movcs	r3, #4
 8006a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	3304      	adds	r3, #4
 8006a8e:	2b06      	cmp	r3, #6
 8006a90:	d902      	bls.n	8006a98 <NVIC_EncodePriority+0x30>
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	3b03      	subs	r3, #3
 8006a96:	e000      	b.n	8006a9a <NVIC_EncodePriority+0x32>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	43da      	mvns	r2, r3
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	401a      	ands	r2, r3
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aba:	43d9      	mvns	r1, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ac0:	4313      	orrs	r3, r2
         );
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3724      	adds	r7, #36	; 0x24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
	...

08006ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ae0:	d301      	bcc.n	8006ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e00f      	b.n	8006b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ae6:	4a0a      	ldr	r2, [pc, #40]	; (8006b10 <SysTick_Config+0x40>)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006aee:	210f      	movs	r1, #15
 8006af0:	f04f 30ff 	mov.w	r0, #4294967295
 8006af4:	f7ff ff8e 	bl	8006a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006af8:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <SysTick_Config+0x40>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006afe:	4b04      	ldr	r3, [pc, #16]	; (8006b10 <SysTick_Config+0x40>)
 8006b00:	2207      	movs	r2, #7
 8006b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	e000e010 	.word	0xe000e010

08006b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff ff29 	bl	8006974 <__NVIC_SetPriorityGrouping>
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	4603      	mov	r3, r0
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	607a      	str	r2, [r7, #4]
 8006b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b3c:	f7ff ff3e 	bl	80069bc <__NVIC_GetPriorityGrouping>
 8006b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	6978      	ldr	r0, [r7, #20]
 8006b48:	f7ff ff8e 	bl	8006a68 <NVIC_EncodePriority>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b52:	4611      	mov	r1, r2
 8006b54:	4618      	mov	r0, r3
 8006b56:	f7ff ff5d 	bl	8006a14 <__NVIC_SetPriority>
}
 8006b5a:	bf00      	nop
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b082      	sub	sp, #8
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	4603      	mov	r3, r0
 8006b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7ff ff31 	bl	80069d8 <__NVIC_EnableIRQ>
}
 8006b76:	bf00      	nop
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff ffa2 	bl	8006ad0 <SysTick_Config>
 8006b8c:	4603      	mov	r3, r0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006ba4:	f7ff faea 	bl	800617c <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d101      	bne.n	8006bb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e099      	b.n	8006ce8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 0201 	bic.w	r2, r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bd4:	e00f      	b.n	8006bf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bd6:	f7ff fad1 	bl	800617c <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b05      	cmp	r3, #5
 8006be2:	d908      	bls.n	8006bf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2203      	movs	r2, #3
 8006bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e078      	b.n	8006ce8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e8      	bne.n	8006bd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4b38      	ldr	r3, [pc, #224]	; (8006cf0 <HAL_DMA_Init+0x158>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d107      	bne.n	8006c60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f023 0307 	bic.w	r3, r3, #7
 8006c76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d117      	bne.n	8006cba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00e      	beq.n	8006cba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fb01 	bl	80072a4 <DMA_CheckFifoParam>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d008      	beq.n	8006cba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2240      	movs	r2, #64	; 0x40
 8006cac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e016      	b.n	8006ce8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fab8 	bl	8007238 <DMA_CalcBaseAndBitshift>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd0:	223f      	movs	r2, #63	; 0x3f
 8006cd2:	409a      	lsls	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	f010803f 	.word	0xf010803f

08006cf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d101      	bne.n	8006d1a <HAL_DMA_Start_IT+0x26>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e040      	b.n	8006d9c <HAL_DMA_Start_IT+0xa8>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d12f      	bne.n	8006d8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2202      	movs	r2, #2
 8006d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	68b9      	ldr	r1, [r7, #8]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fa4a 	bl	80071dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4c:	223f      	movs	r2, #63	; 0x3f
 8006d4e:	409a      	lsls	r2, r3
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0216 	orr.w	r2, r2, #22
 8006d62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d007      	beq.n	8006d7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0208 	orr.w	r2, r2, #8
 8006d7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e005      	b.n	8006d9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006d96:	2302      	movs	r3, #2
 8006d98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006db2:	f7ff f9e3 	bl	800617c <HAL_GetTick>
 8006db6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d008      	beq.n	8006dd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2280      	movs	r2, #128	; 0x80
 8006dc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e052      	b.n	8006e7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0216 	bic.w	r2, r2, #22
 8006de4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	695a      	ldr	r2, [r3, #20]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006df4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d103      	bne.n	8006e06 <HAL_DMA_Abort+0x62>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0208 	bic.w	r2, r2, #8
 8006e14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0201 	bic.w	r2, r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e26:	e013      	b.n	8006e50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e28:	f7ff f9a8 	bl	800617c <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b05      	cmp	r3, #5
 8006e34:	d90c      	bls.n	8006e50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2220      	movs	r2, #32
 8006e3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2203      	movs	r2, #3
 8006e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e015      	b.n	8006e7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1e4      	bne.n	8006e28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e62:	223f      	movs	r2, #63	; 0x3f
 8006e64:	409a      	lsls	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d004      	beq.n	8006ea2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2280      	movs	r2, #128	; 0x80
 8006e9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e00c      	b.n	8006ebc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2205      	movs	r2, #5
 8006ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0201 	bic.w	r2, r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ed4:	4b92      	ldr	r3, [pc, #584]	; (8007120 <HAL_DMA_IRQHandler+0x258>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a92      	ldr	r2, [pc, #584]	; (8007124 <HAL_DMA_IRQHandler+0x25c>)
 8006eda:	fba2 2303 	umull	r2, r3, r2, r3
 8006ede:	0a9b      	lsrs	r3, r3, #10
 8006ee0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef2:	2208      	movs	r2, #8
 8006ef4:	409a      	lsls	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d01a      	beq.n	8006f34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0304 	and.w	r3, r3, #4
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d013      	beq.n	8006f34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0204 	bic.w	r2, r2, #4
 8006f1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f20:	2208      	movs	r2, #8
 8006f22:	409a      	lsls	r2, r3
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2c:	f043 0201 	orr.w	r2, r3, #1
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f38:	2201      	movs	r2, #1
 8006f3a:	409a      	lsls	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d012      	beq.n	8006f6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00b      	beq.n	8006f6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f56:	2201      	movs	r2, #1
 8006f58:	409a      	lsls	r2, r3
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f62:	f043 0202 	orr.w	r2, r3, #2
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6e:	2204      	movs	r2, #4
 8006f70:	409a      	lsls	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4013      	ands	r3, r2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d012      	beq.n	8006fa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00b      	beq.n	8006fa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f8c:	2204      	movs	r2, #4
 8006f8e:	409a      	lsls	r2, r3
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f98:	f043 0204 	orr.w	r2, r3, #4
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa4:	2210      	movs	r2, #16
 8006fa6:	409a      	lsls	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4013      	ands	r3, r2
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d043      	beq.n	8007038 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d03c      	beq.n	8007038 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc2:	2210      	movs	r2, #16
 8006fc4:	409a      	lsls	r2, r3
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d018      	beq.n	800700a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d108      	bne.n	8006ff8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d024      	beq.n	8007038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4798      	blx	r3
 8006ff6:	e01f      	b.n	8007038 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01b      	beq.n	8007038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	4798      	blx	r3
 8007008:	e016      	b.n	8007038 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007014:	2b00      	cmp	r3, #0
 8007016:	d107      	bne.n	8007028 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 0208 	bic.w	r2, r2, #8
 8007026:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800703c:	2220      	movs	r2, #32
 800703e:	409a      	lsls	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4013      	ands	r3, r2
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 808e 	beq.w	8007166 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0310 	and.w	r3, r3, #16
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 8086 	beq.w	8007166 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800705e:	2220      	movs	r2, #32
 8007060:	409a      	lsls	r2, r3
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b05      	cmp	r3, #5
 8007070:	d136      	bne.n	80070e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0216 	bic.w	r2, r2, #22
 8007080:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695a      	ldr	r2, [r3, #20]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007090:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <HAL_DMA_IRQHandler+0x1da>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d007      	beq.n	80070b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0208 	bic.w	r2, r2, #8
 80070b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b6:	223f      	movs	r2, #63	; 0x3f
 80070b8:	409a      	lsls	r2, r3
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d07d      	beq.n	80071d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	4798      	blx	r3
        }
        return;
 80070de:	e078      	b.n	80071d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d01c      	beq.n	8007128 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d108      	bne.n	800710e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007100:	2b00      	cmp	r3, #0
 8007102:	d030      	beq.n	8007166 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	4798      	blx	r3
 800710c:	e02b      	b.n	8007166 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d027      	beq.n	8007166 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
 800711e:	e022      	b.n	8007166 <HAL_DMA_IRQHandler+0x29e>
 8007120:	20000004 	.word	0x20000004
 8007124:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10f      	bne.n	8007156 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0210 	bic.w	r2, r2, #16
 8007144:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2201      	movs	r2, #1
 8007152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800716a:	2b00      	cmp	r3, #0
 800716c:	d032      	beq.n	80071d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d022      	beq.n	80071c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2205      	movs	r2, #5
 800717e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0201 	bic.w	r2, r2, #1
 8007190:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	3301      	adds	r3, #1
 8007196:	60bb      	str	r3, [r7, #8]
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	429a      	cmp	r2, r3
 800719c:	d307      	bcc.n	80071ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1f2      	bne.n	8007192 <HAL_DMA_IRQHandler+0x2ca>
 80071ac:	e000      	b.n	80071b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80071ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	4798      	blx	r3
 80071d0:	e000      	b.n	80071d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80071d2:	bf00      	nop
    }
  }
}
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop

080071dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	2b40      	cmp	r3, #64	; 0x40
 8007208:	d108      	bne.n	800721c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800721a:	e007      	b.n	800722c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	60da      	str	r2, [r3, #12]
}
 800722c:	bf00      	nop
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	3b10      	subs	r3, #16
 8007248:	4a14      	ldr	r2, [pc, #80]	; (800729c <DMA_CalcBaseAndBitshift+0x64>)
 800724a:	fba2 2303 	umull	r2, r3, r2, r3
 800724e:	091b      	lsrs	r3, r3, #4
 8007250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007252:	4a13      	ldr	r2, [pc, #76]	; (80072a0 <DMA_CalcBaseAndBitshift+0x68>)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4413      	add	r3, r2
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b03      	cmp	r3, #3
 8007264:	d909      	bls.n	800727a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800726e:	f023 0303 	bic.w	r3, r3, #3
 8007272:	1d1a      	adds	r2, r3, #4
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	659a      	str	r2, [r3, #88]	; 0x58
 8007278:	e007      	b.n	800728a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007282:	f023 0303 	bic.w	r3, r3, #3
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	aaaaaaab 	.word	0xaaaaaaab
 80072a0:	0801a45c 	.word	0x0801a45c

080072a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d11f      	bne.n	80072fe <DMA_CheckFifoParam+0x5a>
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d856      	bhi.n	8007372 <DMA_CheckFifoParam+0xce>
 80072c4:	a201      	add	r2, pc, #4	; (adr r2, 80072cc <DMA_CheckFifoParam+0x28>)
 80072c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ca:	bf00      	nop
 80072cc:	080072dd 	.word	0x080072dd
 80072d0:	080072ef 	.word	0x080072ef
 80072d4:	080072dd 	.word	0x080072dd
 80072d8:	08007373 	.word	0x08007373
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d046      	beq.n	8007376 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072ec:	e043      	b.n	8007376 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072f6:	d140      	bne.n	800737a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072fc:	e03d      	b.n	800737a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007306:	d121      	bne.n	800734c <DMA_CheckFifoParam+0xa8>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b03      	cmp	r3, #3
 800730c:	d837      	bhi.n	800737e <DMA_CheckFifoParam+0xda>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <DMA_CheckFifoParam+0x70>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007325 	.word	0x08007325
 8007318:	0800732b 	.word	0x0800732b
 800731c:	08007325 	.word	0x08007325
 8007320:	0800733d 	.word	0x0800733d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	73fb      	strb	r3, [r7, #15]
      break;
 8007328:	e030      	b.n	800738c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d025      	beq.n	8007382 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800733a:	e022      	b.n	8007382 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007344:	d11f      	bne.n	8007386 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800734a:	e01c      	b.n	8007386 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d903      	bls.n	800735a <DMA_CheckFifoParam+0xb6>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b03      	cmp	r3, #3
 8007356:	d003      	beq.n	8007360 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007358:	e018      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	73fb      	strb	r3, [r7, #15]
      break;
 800735e:	e015      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00e      	beq.n	800738a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	73fb      	strb	r3, [r7, #15]
      break;
 8007370:	e00b      	b.n	800738a <DMA_CheckFifoParam+0xe6>
      break;
 8007372:	bf00      	nop
 8007374:	e00a      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      break;
 8007376:	bf00      	nop
 8007378:	e008      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      break;
 800737a:	bf00      	nop
 800737c:	e006      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      break;
 800737e:	bf00      	nop
 8007380:	e004      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      break;
 8007382:	bf00      	nop
 8007384:	e002      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      break;   
 8007386:	bf00      	nop
 8007388:	e000      	b.n	800738c <DMA_CheckFifoParam+0xe8>
      break;
 800738a:	bf00      	nop
    }
  } 
  
  return status; 
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop

0800739c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800739c:	b480      	push	{r7}
 800739e:	b089      	sub	sp, #36	; 0x24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80073ae:	2300      	movs	r3, #0
 80073b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80073b2:	2300      	movs	r3, #0
 80073b4:	61fb      	str	r3, [r7, #28]
 80073b6:	e16b      	b.n	8007690 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80073b8:	2201      	movs	r2, #1
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	fa02 f303 	lsl.w	r3, r2, r3
 80073c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4013      	ands	r3, r2
 80073ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	f040 815a 	bne.w	800768a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d005      	beq.n	80073ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d130      	bne.n	8007450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	2203      	movs	r2, #3
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	43db      	mvns	r3, r3
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	4013      	ands	r3, r2
 8007404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	fa02 f303 	lsl.w	r3, r2, r3
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	4313      	orrs	r3, r2
 8007416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007424:	2201      	movs	r2, #1
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	fa02 f303 	lsl.w	r3, r2, r3
 800742c:	43db      	mvns	r3, r3
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	4013      	ands	r3, r2
 8007432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	091b      	lsrs	r3, r3, #4
 800743a:	f003 0201 	and.w	r2, r3, #1
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	fa02 f303 	lsl.w	r3, r2, r3
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	4313      	orrs	r3, r2
 8007448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f003 0303 	and.w	r3, r3, #3
 8007458:	2b03      	cmp	r3, #3
 800745a:	d017      	beq.n	800748c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	2203      	movs	r2, #3
 8007468:	fa02 f303 	lsl.w	r3, r2, r3
 800746c:	43db      	mvns	r3, r3
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	4013      	ands	r3, r2
 8007472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	4313      	orrs	r3, r2
 8007484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f003 0303 	and.w	r3, r3, #3
 8007494:	2b02      	cmp	r3, #2
 8007496:	d123      	bne.n	80074e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	08da      	lsrs	r2, r3, #3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3208      	adds	r2, #8
 80074a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	220f      	movs	r2, #15
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	43db      	mvns	r3, r3
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	4013      	ands	r3, r2
 80074ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	691a      	ldr	r2, [r3, #16]
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	fa02 f303 	lsl.w	r3, r2, r3
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	08da      	lsrs	r2, r3, #3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3208      	adds	r2, #8
 80074da:	69b9      	ldr	r1, [r7, #24]
 80074dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	2203      	movs	r2, #3
 80074ec:	fa02 f303 	lsl.w	r3, r2, r3
 80074f0:	43db      	mvns	r3, r3
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	4013      	ands	r3, r2
 80074f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	f003 0203 	and.w	r2, r3, #3
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	4313      	orrs	r3, r2
 800750c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 80b4 	beq.w	800768a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	4b60      	ldr	r3, [pc, #384]	; (80076a8 <HAL_GPIO_Init+0x30c>)
 8007528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752a:	4a5f      	ldr	r2, [pc, #380]	; (80076a8 <HAL_GPIO_Init+0x30c>)
 800752c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007530:	6453      	str	r3, [r2, #68]	; 0x44
 8007532:	4b5d      	ldr	r3, [pc, #372]	; (80076a8 <HAL_GPIO_Init+0x30c>)
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800753e:	4a5b      	ldr	r2, [pc, #364]	; (80076ac <HAL_GPIO_Init+0x310>)
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	089b      	lsrs	r3, r3, #2
 8007544:	3302      	adds	r3, #2
 8007546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800754a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	220f      	movs	r2, #15
 8007556:	fa02 f303 	lsl.w	r3, r2, r3
 800755a:	43db      	mvns	r3, r3
 800755c:	69ba      	ldr	r2, [r7, #24]
 800755e:	4013      	ands	r3, r2
 8007560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a52      	ldr	r2, [pc, #328]	; (80076b0 <HAL_GPIO_Init+0x314>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d02b      	beq.n	80075c2 <HAL_GPIO_Init+0x226>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a51      	ldr	r2, [pc, #324]	; (80076b4 <HAL_GPIO_Init+0x318>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d025      	beq.n	80075be <HAL_GPIO_Init+0x222>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a50      	ldr	r2, [pc, #320]	; (80076b8 <HAL_GPIO_Init+0x31c>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d01f      	beq.n	80075ba <HAL_GPIO_Init+0x21e>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a4f      	ldr	r2, [pc, #316]	; (80076bc <HAL_GPIO_Init+0x320>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d019      	beq.n	80075b6 <HAL_GPIO_Init+0x21a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a4e      	ldr	r2, [pc, #312]	; (80076c0 <HAL_GPIO_Init+0x324>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d013      	beq.n	80075b2 <HAL_GPIO_Init+0x216>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a4d      	ldr	r2, [pc, #308]	; (80076c4 <HAL_GPIO_Init+0x328>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00d      	beq.n	80075ae <HAL_GPIO_Init+0x212>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a4c      	ldr	r2, [pc, #304]	; (80076c8 <HAL_GPIO_Init+0x32c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d007      	beq.n	80075aa <HAL_GPIO_Init+0x20e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a4b      	ldr	r2, [pc, #300]	; (80076cc <HAL_GPIO_Init+0x330>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d101      	bne.n	80075a6 <HAL_GPIO_Init+0x20a>
 80075a2:	2307      	movs	r3, #7
 80075a4:	e00e      	b.n	80075c4 <HAL_GPIO_Init+0x228>
 80075a6:	2308      	movs	r3, #8
 80075a8:	e00c      	b.n	80075c4 <HAL_GPIO_Init+0x228>
 80075aa:	2306      	movs	r3, #6
 80075ac:	e00a      	b.n	80075c4 <HAL_GPIO_Init+0x228>
 80075ae:	2305      	movs	r3, #5
 80075b0:	e008      	b.n	80075c4 <HAL_GPIO_Init+0x228>
 80075b2:	2304      	movs	r3, #4
 80075b4:	e006      	b.n	80075c4 <HAL_GPIO_Init+0x228>
 80075b6:	2303      	movs	r3, #3
 80075b8:	e004      	b.n	80075c4 <HAL_GPIO_Init+0x228>
 80075ba:	2302      	movs	r3, #2
 80075bc:	e002      	b.n	80075c4 <HAL_GPIO_Init+0x228>
 80075be:	2301      	movs	r3, #1
 80075c0:	e000      	b.n	80075c4 <HAL_GPIO_Init+0x228>
 80075c2:	2300      	movs	r3, #0
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	f002 0203 	and.w	r2, r2, #3
 80075ca:	0092      	lsls	r2, r2, #2
 80075cc:	4093      	lsls	r3, r2
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075d4:	4935      	ldr	r1, [pc, #212]	; (80076ac <HAL_GPIO_Init+0x310>)
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	089b      	lsrs	r3, r3, #2
 80075da:	3302      	adds	r3, #2
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80075e2:	4b3b      	ldr	r3, [pc, #236]	; (80076d0 <HAL_GPIO_Init+0x334>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	43db      	mvns	r3, r3
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	4013      	ands	r3, r2
 80075f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007606:	4a32      	ldr	r2, [pc, #200]	; (80076d0 <HAL_GPIO_Init+0x334>)
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800760c:	4b30      	ldr	r3, [pc, #192]	; (80076d0 <HAL_GPIO_Init+0x334>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	43db      	mvns	r3, r3
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	4013      	ands	r3, r2
 800761a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	4313      	orrs	r3, r2
 800762e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007630:	4a27      	ldr	r2, [pc, #156]	; (80076d0 <HAL_GPIO_Init+0x334>)
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007636:	4b26      	ldr	r3, [pc, #152]	; (80076d0 <HAL_GPIO_Init+0x334>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	43db      	mvns	r3, r3
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	4013      	ands	r3, r2
 8007644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	4313      	orrs	r3, r2
 8007658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800765a:	4a1d      	ldr	r2, [pc, #116]	; (80076d0 <HAL_GPIO_Init+0x334>)
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007660:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <HAL_GPIO_Init+0x334>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	43db      	mvns	r3, r3
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	4013      	ands	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007684:	4a12      	ldr	r2, [pc, #72]	; (80076d0 <HAL_GPIO_Init+0x334>)
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	3301      	adds	r3, #1
 800768e:	61fb      	str	r3, [r7, #28]
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	2b0f      	cmp	r3, #15
 8007694:	f67f ae90 	bls.w	80073b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	3724      	adds	r7, #36	; 0x24
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	40023800 	.word	0x40023800
 80076ac:	40013800 	.word	0x40013800
 80076b0:	40020000 	.word	0x40020000
 80076b4:	40020400 	.word	0x40020400
 80076b8:	40020800 	.word	0x40020800
 80076bc:	40020c00 	.word	0x40020c00
 80076c0:	40021000 	.word	0x40021000
 80076c4:	40021400 	.word	0x40021400
 80076c8:	40021800 	.word	0x40021800
 80076cc:	40021c00 	.word	0x40021c00
 80076d0:	40013c00 	.word	0x40013c00

080076d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	807b      	strh	r3, [r7, #2]
 80076e0:	4613      	mov	r3, r2
 80076e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80076e4:	787b      	ldrb	r3, [r7, #1]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076ea:	887a      	ldrh	r2, [r7, #2]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80076f0:	e003      	b.n	80076fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80076f2:	887b      	ldrh	r3, [r7, #2]
 80076f4:	041a      	lsls	r2, r3, #16
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	619a      	str	r2, [r3, #24]
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e12b      	b.n	8007972 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d106      	bne.n	8007734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fa fa10 	bl	8001b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2224      	movs	r2, #36	; 0x24
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0201 	bic.w	r2, r2, #1
 800774a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800775a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800776a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800776c:	f002 fd2e 	bl	800a1cc <HAL_RCC_GetPCLK1Freq>
 8007770:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	4a81      	ldr	r2, [pc, #516]	; (800797c <HAL_I2C_Init+0x274>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d807      	bhi.n	800778c <HAL_I2C_Init+0x84>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4a80      	ldr	r2, [pc, #512]	; (8007980 <HAL_I2C_Init+0x278>)
 8007780:	4293      	cmp	r3, r2
 8007782:	bf94      	ite	ls
 8007784:	2301      	movls	r3, #1
 8007786:	2300      	movhi	r3, #0
 8007788:	b2db      	uxtb	r3, r3
 800778a:	e006      	b.n	800779a <HAL_I2C_Init+0x92>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4a7d      	ldr	r2, [pc, #500]	; (8007984 <HAL_I2C_Init+0x27c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	bf94      	ite	ls
 8007794:	2301      	movls	r3, #1
 8007796:	2300      	movhi	r3, #0
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e0e7      	b.n	8007972 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	4a78      	ldr	r2, [pc, #480]	; (8007988 <HAL_I2C_Init+0x280>)
 80077a6:	fba2 2303 	umull	r2, r3, r2, r3
 80077aa:	0c9b      	lsrs	r3, r3, #18
 80077ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	430a      	orrs	r2, r1
 80077c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6a1b      	ldr	r3, [r3, #32]
 80077c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	4a6a      	ldr	r2, [pc, #424]	; (800797c <HAL_I2C_Init+0x274>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d802      	bhi.n	80077dc <HAL_I2C_Init+0xd4>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	3301      	adds	r3, #1
 80077da:	e009      	b.n	80077f0 <HAL_I2C_Init+0xe8>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80077e2:	fb02 f303 	mul.w	r3, r2, r3
 80077e6:	4a69      	ldr	r2, [pc, #420]	; (800798c <HAL_I2C_Init+0x284>)
 80077e8:	fba2 2303 	umull	r2, r3, r2, r3
 80077ec:	099b      	lsrs	r3, r3, #6
 80077ee:	3301      	adds	r3, #1
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6812      	ldr	r2, [r2, #0]
 80077f4:	430b      	orrs	r3, r1
 80077f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69db      	ldr	r3, [r3, #28]
 80077fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007802:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	495c      	ldr	r1, [pc, #368]	; (800797c <HAL_I2C_Init+0x274>)
 800780c:	428b      	cmp	r3, r1
 800780e:	d819      	bhi.n	8007844 <HAL_I2C_Init+0x13c>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	1e59      	subs	r1, r3, #1
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	fbb1 f3f3 	udiv	r3, r1, r3
 800781e:	1c59      	adds	r1, r3, #1
 8007820:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007824:	400b      	ands	r3, r1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00a      	beq.n	8007840 <HAL_I2C_Init+0x138>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	1e59      	subs	r1, r3, #1
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	fbb1 f3f3 	udiv	r3, r1, r3
 8007838:	3301      	adds	r3, #1
 800783a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800783e:	e051      	b.n	80078e4 <HAL_I2C_Init+0x1dc>
 8007840:	2304      	movs	r3, #4
 8007842:	e04f      	b.n	80078e4 <HAL_I2C_Init+0x1dc>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d111      	bne.n	8007870 <HAL_I2C_Init+0x168>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	1e58      	subs	r0, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6859      	ldr	r1, [r3, #4]
 8007854:	460b      	mov	r3, r1
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	440b      	add	r3, r1
 800785a:	fbb0 f3f3 	udiv	r3, r0, r3
 800785e:	3301      	adds	r3, #1
 8007860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007864:	2b00      	cmp	r3, #0
 8007866:	bf0c      	ite	eq
 8007868:	2301      	moveq	r3, #1
 800786a:	2300      	movne	r3, #0
 800786c:	b2db      	uxtb	r3, r3
 800786e:	e012      	b.n	8007896 <HAL_I2C_Init+0x18e>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	1e58      	subs	r0, r3, #1
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6859      	ldr	r1, [r3, #4]
 8007878:	460b      	mov	r3, r1
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	440b      	add	r3, r1
 800787e:	0099      	lsls	r1, r3, #2
 8007880:	440b      	add	r3, r1
 8007882:	fbb0 f3f3 	udiv	r3, r0, r3
 8007886:	3301      	adds	r3, #1
 8007888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800788c:	2b00      	cmp	r3, #0
 800788e:	bf0c      	ite	eq
 8007890:	2301      	moveq	r3, #1
 8007892:	2300      	movne	r3, #0
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d001      	beq.n	800789e <HAL_I2C_Init+0x196>
 800789a:	2301      	movs	r3, #1
 800789c:	e022      	b.n	80078e4 <HAL_I2C_Init+0x1dc>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10e      	bne.n	80078c4 <HAL_I2C_Init+0x1bc>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	1e58      	subs	r0, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6859      	ldr	r1, [r3, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	440b      	add	r3, r1
 80078b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80078b8:	3301      	adds	r3, #1
 80078ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c2:	e00f      	b.n	80078e4 <HAL_I2C_Init+0x1dc>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	1e58      	subs	r0, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6859      	ldr	r1, [r3, #4]
 80078cc:	460b      	mov	r3, r1
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	440b      	add	r3, r1
 80078d2:	0099      	lsls	r1, r3, #2
 80078d4:	440b      	add	r3, r1
 80078d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80078da:	3301      	adds	r3, #1
 80078dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	6809      	ldr	r1, [r1, #0]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	69da      	ldr	r2, [r3, #28]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	430a      	orrs	r2, r1
 8007906:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007912:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6911      	ldr	r1, [r2, #16]
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	68d2      	ldr	r2, [r2, #12]
 800791e:	4311      	orrs	r1, r2
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6812      	ldr	r2, [r2, #0]
 8007924:	430b      	orrs	r3, r1
 8007926:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695a      	ldr	r2, [r3, #20]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0201 	orr.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2220      	movs	r2, #32
 800795e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	000186a0 	.word	0x000186a0
 8007980:	001e847f 	.word	0x001e847f
 8007984:	003d08ff 	.word	0x003d08ff
 8007988:	431bde83 	.word	0x431bde83
 800798c:	10624dd3 	.word	0x10624dd3

08007990 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af02      	add	r7, sp, #8
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	607a      	str	r2, [r7, #4]
 800799a:	461a      	mov	r2, r3
 800799c:	460b      	mov	r3, r1
 800799e:	817b      	strh	r3, [r7, #10]
 80079a0:	4613      	mov	r3, r2
 80079a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079a4:	f7fe fbea 	bl	800617c <HAL_GetTick>
 80079a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b20      	cmp	r3, #32
 80079b4:	f040 80e0 	bne.w	8007b78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	2319      	movs	r3, #25
 80079be:	2201      	movs	r2, #1
 80079c0:	4970      	ldr	r1, [pc, #448]	; (8007b84 <HAL_I2C_Master_Transmit+0x1f4>)
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 fc58 	bl	8008278 <I2C_WaitOnFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80079ce:	2302      	movs	r3, #2
 80079d0:	e0d3      	b.n	8007b7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d101      	bne.n	80079e0 <HAL_I2C_Master_Transmit+0x50>
 80079dc:	2302      	movs	r3, #2
 80079de:	e0cc      	b.n	8007b7a <HAL_I2C_Master_Transmit+0x1ea>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d007      	beq.n	8007a06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0201 	orr.w	r2, r2, #1
 8007a04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2221      	movs	r2, #33	; 0x21
 8007a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2210      	movs	r2, #16
 8007a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	893a      	ldrh	r2, [r7, #8]
 8007a36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4a50      	ldr	r2, [pc, #320]	; (8007b88 <HAL_I2C_Master_Transmit+0x1f8>)
 8007a46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007a48:	8979      	ldrh	r1, [r7, #10]
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	6a3a      	ldr	r2, [r7, #32]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 fac2 	bl	8007fd8 <I2C_MasterRequestWrite>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e08d      	b.n	8007b7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a5e:	2300      	movs	r3, #0
 8007a60:	613b      	str	r3, [r7, #16]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	613b      	str	r3, [r7, #16]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007a74:	e066      	b.n	8007b44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	6a39      	ldr	r1, [r7, #32]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fcd2 	bl	8008424 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00d      	beq.n	8007aa2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d107      	bne.n	8007a9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e06b      	b.n	8007b7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	781a      	ldrb	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	f003 0304 	and.w	r3, r3, #4
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	d11b      	bne.n	8007b18 <HAL_I2C_Master_Transmit+0x188>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d017      	beq.n	8007b18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aec:	781a      	ldrb	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b10:	3b01      	subs	r3, #1
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	6a39      	ldr	r1, [r7, #32]
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 fcc2 	bl	80084a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00d      	beq.n	8007b44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d107      	bne.n	8007b40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e01a      	b.n	8007b7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d194      	bne.n	8007a76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	e000      	b.n	8007b7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007b78:	2302      	movs	r3, #2
  }
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3718      	adds	r7, #24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	00100002 	.word	0x00100002
 8007b88:	ffff0000 	.word	0xffff0000

08007b8c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08c      	sub	sp, #48	; 0x30
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	607a      	str	r2, [r7, #4]
 8007b96:	461a      	mov	r2, r3
 8007b98:	460b      	mov	r3, r1
 8007b9a:	817b      	strh	r3, [r7, #10]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ba0:	f7fe faec 	bl	800617c <HAL_GetTick>
 8007ba4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	f040 820b 	bne.w	8007fca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	2319      	movs	r3, #25
 8007bba:	2201      	movs	r2, #1
 8007bbc:	497c      	ldr	r1, [pc, #496]	; (8007db0 <HAL_I2C_Master_Receive+0x224>)
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 fb5a 	bl	8008278 <I2C_WaitOnFlagUntilTimeout>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e1fe      	b.n	8007fcc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d101      	bne.n	8007bdc <HAL_I2C_Master_Receive+0x50>
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e1f7      	b.n	8007fcc <HAL_I2C_Master_Receive+0x440>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d007      	beq.n	8007c02 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f042 0201 	orr.w	r2, r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2222      	movs	r2, #34	; 0x22
 8007c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2210      	movs	r2, #16
 8007c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	893a      	ldrh	r2, [r7, #8]
 8007c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4a5c      	ldr	r2, [pc, #368]	; (8007db4 <HAL_I2C_Master_Receive+0x228>)
 8007c42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007c44:	8979      	ldrh	r1, [r7, #10]
 8007c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 fa46 	bl	80080dc <I2C_MasterRequestRead>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e1b8      	b.n	8007fcc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d113      	bne.n	8007c8a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c62:	2300      	movs	r3, #0
 8007c64:	623b      	str	r3, [r7, #32]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	623b      	str	r3, [r7, #32]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	623b      	str	r3, [r7, #32]
 8007c76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	e18c      	b.n	8007fa4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d11b      	bne.n	8007cca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ca0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	61fb      	str	r3, [r7, #28]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	61fb      	str	r3, [r7, #28]
 8007cb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	e16c      	b.n	8007fa4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d11b      	bne.n	8007d0a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ce0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61bb      	str	r3, [r7, #24]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	61bb      	str	r3, [r7, #24]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	61bb      	str	r3, [r7, #24]
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	e14c      	b.n	8007fa4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	617b      	str	r3, [r7, #20]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	617b      	str	r3, [r7, #20]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007d30:	e138      	b.n	8007fa4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	f200 80f1 	bhi.w	8007f1e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d123      	bne.n	8007d8c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 fbed 	bl	8008528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e139      	b.n	8007fcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691a      	ldr	r2, [r3, #16]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	b2d2      	uxtb	r2, r2
 8007d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d74:	3b01      	subs	r3, #1
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d8a:	e10b      	b.n	8007fa4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d14e      	bne.n	8007e32 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	4906      	ldr	r1, [pc, #24]	; (8007db8 <HAL_I2C_Master_Receive+0x22c>)
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 fa6a 	bl	8008278 <I2C_WaitOnFlagUntilTimeout>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d008      	beq.n	8007dbc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e10e      	b.n	8007fcc <HAL_I2C_Master_Receive+0x440>
 8007dae:	bf00      	nop
 8007db0:	00100002 	.word	0x00100002
 8007db4:	ffff0000 	.word	0xffff0000
 8007db8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	b2d2      	uxtb	r2, r2
 8007dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de8:	3b01      	subs	r3, #1
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3b01      	subs	r3, #1
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	691a      	ldr	r2, [r3, #16]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	b2d2      	uxtb	r2, r2
 8007e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e30:	e0b8      	b.n	8007fa4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	2200      	movs	r2, #0
 8007e3a:	4966      	ldr	r1, [pc, #408]	; (8007fd4 <HAL_I2C_Master_Receive+0x448>)
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fa1b 	bl	8008278 <I2C_WaitOnFlagUntilTimeout>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e0bf      	b.n	8007fcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	b2d2      	uxtb	r2, r2
 8007e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e94:	2200      	movs	r2, #0
 8007e96:	494f      	ldr	r1, [pc, #316]	; (8007fd4 <HAL_I2C_Master_Receive+0x448>)
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 f9ed 	bl	8008278 <I2C_WaitOnFlagUntilTimeout>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e091      	b.n	8007fcc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	691a      	ldr	r2, [r3, #16]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691a      	ldr	r2, [r3, #16]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	b2d2      	uxtb	r2, r2
 8007ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f1c:	e042      	b.n	8007fa4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 fb00 	bl	8008528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e04c      	b.n	8007fcc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	691a      	ldr	r2, [r3, #16]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3c:	b2d2      	uxtb	r2, r2
 8007f3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	1c5a      	adds	r2, r3, #1
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	f003 0304 	and.w	r3, r3, #4
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d118      	bne.n	8007fa4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	691a      	ldr	r2, [r3, #16]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	b2d2      	uxtb	r2, r2
 8007f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f47f aec2 	bne.w	8007d32 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e000      	b.n	8007fcc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007fca:	2302      	movs	r3, #2
  }
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3728      	adds	r7, #40	; 0x28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	00010004 	.word	0x00010004

08007fd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	607a      	str	r2, [r7, #4]
 8007fe2:	603b      	str	r3, [r7, #0]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b08      	cmp	r3, #8
 8007ff2:	d006      	beq.n	8008002 <I2C_MasterRequestWrite+0x2a>
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d003      	beq.n	8008002 <I2C_MasterRequestWrite+0x2a>
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008000:	d108      	bne.n	8008014 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	e00b      	b.n	800802c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008018:	2b12      	cmp	r3, #18
 800801a:	d107      	bne.n	800802c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800802a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 f91d 	bl	8008278 <I2C_WaitOnFlagUntilTimeout>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00d      	beq.n	8008060 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008052:	d103      	bne.n	800805c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800805a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e035      	b.n	80080cc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008068:	d108      	bne.n	800807c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800806a:	897b      	ldrh	r3, [r7, #10]
 800806c:	b2db      	uxtb	r3, r3
 800806e:	461a      	mov	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008078:	611a      	str	r2, [r3, #16]
 800807a:	e01b      	b.n	80080b4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800807c:	897b      	ldrh	r3, [r7, #10]
 800807e:	11db      	asrs	r3, r3, #7
 8008080:	b2db      	uxtb	r3, r3
 8008082:	f003 0306 	and.w	r3, r3, #6
 8008086:	b2db      	uxtb	r3, r3
 8008088:	f063 030f 	orn	r3, r3, #15
 800808c:	b2da      	uxtb	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	490e      	ldr	r1, [pc, #56]	; (80080d4 <I2C_MasterRequestWrite+0xfc>)
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 f943 	bl	8008326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e010      	b.n	80080cc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80080aa:	897b      	ldrh	r3, [r7, #10]
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	4907      	ldr	r1, [pc, #28]	; (80080d8 <I2C_MasterRequestWrite+0x100>)
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 f933 	bl	8008326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	00010008 	.word	0x00010008
 80080d8:	00010002 	.word	0x00010002

080080dc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	603b      	str	r3, [r7, #0]
 80080e8:	460b      	mov	r3, r1
 80080ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008100:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b08      	cmp	r3, #8
 8008106:	d006      	beq.n	8008116 <I2C_MasterRequestRead+0x3a>
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d003      	beq.n	8008116 <I2C_MasterRequestRead+0x3a>
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008114:	d108      	bne.n	8008128 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	e00b      	b.n	8008140 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812c:	2b11      	cmp	r3, #17
 800812e:	d107      	bne.n	8008140 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800813e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 f893 	bl	8008278 <I2C_WaitOnFlagUntilTimeout>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00d      	beq.n	8008174 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008166:	d103      	bne.n	8008170 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800816e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e079      	b.n	8008268 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800817c:	d108      	bne.n	8008190 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800817e:	897b      	ldrh	r3, [r7, #10]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	f043 0301 	orr.w	r3, r3, #1
 8008186:	b2da      	uxtb	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	611a      	str	r2, [r3, #16]
 800818e:	e05f      	b.n	8008250 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008190:	897b      	ldrh	r3, [r7, #10]
 8008192:	11db      	asrs	r3, r3, #7
 8008194:	b2db      	uxtb	r3, r3
 8008196:	f003 0306 	and.w	r3, r3, #6
 800819a:	b2db      	uxtb	r3, r3
 800819c:	f063 030f 	orn	r3, r3, #15
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	4930      	ldr	r1, [pc, #192]	; (8008270 <I2C_MasterRequestRead+0x194>)
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f8b9 	bl	8008326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e054      	b.n	8008268 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80081be:	897b      	ldrh	r3, [r7, #10]
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	4929      	ldr	r1, [pc, #164]	; (8008274 <I2C_MasterRequestRead+0x198>)
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 f8a9 	bl	8008326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e044      	b.n	8008268 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081de:	2300      	movs	r3, #0
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	613b      	str	r3, [r7, #16]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	613b      	str	r3, [r7, #16]
 80081f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008202:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 f831 	bl	8008278 <I2C_WaitOnFlagUntilTimeout>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00d      	beq.n	8008238 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800822a:	d103      	bne.n	8008234 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008232:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	e017      	b.n	8008268 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008238:	897b      	ldrh	r3, [r7, #10]
 800823a:	11db      	asrs	r3, r3, #7
 800823c:	b2db      	uxtb	r3, r3
 800823e:	f003 0306 	and.w	r3, r3, #6
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f063 030e 	orn	r3, r3, #14
 8008248:	b2da      	uxtb	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	4907      	ldr	r1, [pc, #28]	; (8008274 <I2C_MasterRequestRead+0x198>)
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 f865 	bl	8008326 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d001      	beq.n	8008266 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e000      	b.n	8008268 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	00010008 	.word	0x00010008
 8008274:	00010002 	.word	0x00010002

08008278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	4613      	mov	r3, r2
 8008286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008288:	e025      	b.n	80082d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008290:	d021      	beq.n	80082d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008292:	f7fd ff73 	bl	800617c <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d302      	bcc.n	80082a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d116      	bne.n	80082d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c2:	f043 0220 	orr.w	r2, r3, #32
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e023      	b.n	800831e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	0c1b      	lsrs	r3, r3, #16
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d10d      	bne.n	80082fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	695b      	ldr	r3, [r3, #20]
 80082e6:	43da      	mvns	r2, r3
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4013      	ands	r3, r2
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bf0c      	ite	eq
 80082f2:	2301      	moveq	r3, #1
 80082f4:	2300      	movne	r3, #0
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	e00c      	b.n	8008316 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	43da      	mvns	r2, r3
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	4013      	ands	r3, r2
 8008308:	b29b      	uxth	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	bf0c      	ite	eq
 800830e:	2301      	moveq	r3, #1
 8008310:	2300      	movne	r3, #0
 8008312:	b2db      	uxtb	r3, r3
 8008314:	461a      	mov	r2, r3
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	429a      	cmp	r2, r3
 800831a:	d0b6      	beq.n	800828a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	607a      	str	r2, [r7, #4]
 8008332:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008334:	e051      	b.n	80083da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	695b      	ldr	r3, [r3, #20]
 800833c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008344:	d123      	bne.n	800838e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008354:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800835e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2220      	movs	r2, #32
 800836a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	f043 0204 	orr.w	r2, r3, #4
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e046      	b.n	800841c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008394:	d021      	beq.n	80083da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008396:	f7fd fef1 	bl	800617c <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d302      	bcc.n	80083ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d116      	bne.n	80083da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2220      	movs	r2, #32
 80083b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c6:	f043 0220 	orr.w	r2, r3, #32
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e020      	b.n	800841c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	0c1b      	lsrs	r3, r3, #16
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d10c      	bne.n	80083fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	43da      	mvns	r2, r3
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	4013      	ands	r3, r2
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	bf14      	ite	ne
 80083f6:	2301      	movne	r3, #1
 80083f8:	2300      	moveq	r3, #0
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	e00b      	b.n	8008416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	43da      	mvns	r2, r3
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	4013      	ands	r3, r2
 800840a:	b29b      	uxth	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	bf14      	ite	ne
 8008410:	2301      	movne	r3, #1
 8008412:	2300      	moveq	r3, #0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d18d      	bne.n	8008336 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008430:	e02d      	b.n	800848e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 f8ce 	bl	80085d4 <I2C_IsAcknowledgeFailed>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e02d      	b.n	800849e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008448:	d021      	beq.n	800848e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800844a:	f7fd fe97 	bl	800617c <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	429a      	cmp	r2, r3
 8008458:	d302      	bcc.n	8008460 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d116      	bne.n	800848e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2220      	movs	r2, #32
 800846a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	f043 0220 	orr.w	r2, r3, #32
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e007      	b.n	800849e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008498:	2b80      	cmp	r3, #128	; 0x80
 800849a:	d1ca      	bne.n	8008432 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084b2:	e02d      	b.n	8008510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 f88d 	bl	80085d4 <I2C_IsAcknowledgeFailed>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e02d      	b.n	8008520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ca:	d021      	beq.n	8008510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084cc:	f7fd fe56 	bl	800617c <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d302      	bcc.n	80084e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d116      	bne.n	8008510 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fc:	f043 0220 	orr.w	r2, r3, #32
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e007      	b.n	8008520 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	f003 0304 	and.w	r3, r3, #4
 800851a:	2b04      	cmp	r3, #4
 800851c:	d1ca      	bne.n	80084b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008534:	e042      	b.n	80085bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	f003 0310 	and.w	r3, r3, #16
 8008540:	2b10      	cmp	r3, #16
 8008542:	d119      	bne.n	8008578 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f06f 0210 	mvn.w	r2, #16
 800854c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2220      	movs	r2, #32
 8008558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e029      	b.n	80085cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008578:	f7fd fe00 	bl	800617c <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	429a      	cmp	r2, r3
 8008586:	d302      	bcc.n	800858e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d116      	bne.n	80085bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2220      	movs	r2, #32
 8008598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a8:	f043 0220 	orr.w	r2, r3, #32
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e007      	b.n	80085cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c6:	2b40      	cmp	r3, #64	; 0x40
 80085c8:	d1b5      	bne.n	8008536 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ea:	d11b      	bne.n	8008624 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80085f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008610:	f043 0204 	orr.w	r2, r3, #4
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e000      	b.n	8008626 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008634:	b08f      	sub	sp, #60	; 0x3c
 8008636:	af0a      	add	r7, sp, #40	; 0x28
 8008638:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e10f      	b.n	8008864 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d106      	bne.n	8008664 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f00a f95a 	bl	8012918 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2203      	movs	r2, #3
 8008668:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4618      	mov	r0, r3
 8008684:	f004 f815 	bl	800c6b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	603b      	str	r3, [r7, #0]
 800868e:	687e      	ldr	r6, [r7, #4]
 8008690:	466d      	mov	r5, sp
 8008692:	f106 0410 	add.w	r4, r6, #16
 8008696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800869a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800869c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800869e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80086a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80086a6:	1d33      	adds	r3, r6, #4
 80086a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086aa:	6838      	ldr	r0, [r7, #0]
 80086ac:	f003 feec 	bl	800c488 <USB_CoreInit>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d005      	beq.n	80086c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2202      	movs	r2, #2
 80086ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e0d0      	b.n	8008864 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2100      	movs	r1, #0
 80086c8:	4618      	mov	r0, r3
 80086ca:	f004 f803 	bl	800c6d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086ce:	2300      	movs	r3, #0
 80086d0:	73fb      	strb	r3, [r7, #15]
 80086d2:	e04a      	b.n	800876a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80086d4:	7bfa      	ldrb	r2, [r7, #15]
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	4613      	mov	r3, r2
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	1a9b      	subs	r3, r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	333d      	adds	r3, #61	; 0x3d
 80086e4:	2201      	movs	r2, #1
 80086e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80086e8:	7bfa      	ldrb	r2, [r7, #15]
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	4613      	mov	r3, r2
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	1a9b      	subs	r3, r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	440b      	add	r3, r1
 80086f6:	333c      	adds	r3, #60	; 0x3c
 80086f8:	7bfa      	ldrb	r2, [r7, #15]
 80086fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80086fc:	7bfa      	ldrb	r2, [r7, #15]
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	b298      	uxth	r0, r3
 8008702:	6879      	ldr	r1, [r7, #4]
 8008704:	4613      	mov	r3, r2
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	1a9b      	subs	r3, r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	440b      	add	r3, r1
 800870e:	3342      	adds	r3, #66	; 0x42
 8008710:	4602      	mov	r2, r0
 8008712:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008714:	7bfa      	ldrb	r2, [r7, #15]
 8008716:	6879      	ldr	r1, [r7, #4]
 8008718:	4613      	mov	r3, r2
 800871a:	00db      	lsls	r3, r3, #3
 800871c:	1a9b      	subs	r3, r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	440b      	add	r3, r1
 8008722:	333f      	adds	r3, #63	; 0x3f
 8008724:	2200      	movs	r2, #0
 8008726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008728:	7bfa      	ldrb	r2, [r7, #15]
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	4613      	mov	r3, r2
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	1a9b      	subs	r3, r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	440b      	add	r3, r1
 8008736:	3344      	adds	r3, #68	; 0x44
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800873c:	7bfa      	ldrb	r2, [r7, #15]
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	4613      	mov	r3, r2
 8008742:	00db      	lsls	r3, r3, #3
 8008744:	1a9b      	subs	r3, r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	440b      	add	r3, r1
 800874a:	3348      	adds	r3, #72	; 0x48
 800874c:	2200      	movs	r2, #0
 800874e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008750:	7bfa      	ldrb	r2, [r7, #15]
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	4613      	mov	r3, r2
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	1a9b      	subs	r3, r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	440b      	add	r3, r1
 800875e:	3350      	adds	r3, #80	; 0x50
 8008760:	2200      	movs	r2, #0
 8008762:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	3301      	adds	r3, #1
 8008768:	73fb      	strb	r3, [r7, #15]
 800876a:	7bfa      	ldrb	r2, [r7, #15]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	429a      	cmp	r2, r3
 8008772:	d3af      	bcc.n	80086d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008774:	2300      	movs	r3, #0
 8008776:	73fb      	strb	r3, [r7, #15]
 8008778:	e044      	b.n	8008804 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800877a:	7bfa      	ldrb	r2, [r7, #15]
 800877c:	6879      	ldr	r1, [r7, #4]
 800877e:	4613      	mov	r3, r2
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	440b      	add	r3, r1
 8008788:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800878c:	2200      	movs	r2, #0
 800878e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008790:	7bfa      	ldrb	r2, [r7, #15]
 8008792:	6879      	ldr	r1, [r7, #4]
 8008794:	4613      	mov	r3, r2
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	1a9b      	subs	r3, r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	440b      	add	r3, r1
 800879e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80087a2:	7bfa      	ldrb	r2, [r7, #15]
 80087a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80087a6:	7bfa      	ldrb	r2, [r7, #15]
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	4613      	mov	r3, r2
 80087ac:	00db      	lsls	r3, r3, #3
 80087ae:	1a9b      	subs	r3, r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	440b      	add	r3, r1
 80087b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80087b8:	2200      	movs	r2, #0
 80087ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80087bc:	7bfa      	ldrb	r2, [r7, #15]
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	4613      	mov	r3, r2
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	1a9b      	subs	r3, r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	440b      	add	r3, r1
 80087ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80087ce:	2200      	movs	r2, #0
 80087d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80087d2:	7bfa      	ldrb	r2, [r7, #15]
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	4613      	mov	r3, r2
 80087d8:	00db      	lsls	r3, r3, #3
 80087da:	1a9b      	subs	r3, r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	440b      	add	r3, r1
 80087e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80087e8:	7bfa      	ldrb	r2, [r7, #15]
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	4613      	mov	r3, r2
 80087ee:	00db      	lsls	r3, r3, #3
 80087f0:	1a9b      	subs	r3, r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
 8008800:	3301      	adds	r3, #1
 8008802:	73fb      	strb	r3, [r7, #15]
 8008804:	7bfa      	ldrb	r2, [r7, #15]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	429a      	cmp	r2, r3
 800880c:	d3b5      	bcc.n	800877a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	603b      	str	r3, [r7, #0]
 8008814:	687e      	ldr	r6, [r7, #4]
 8008816:	466d      	mov	r5, sp
 8008818:	f106 0410 	add.w	r4, r6, #16
 800881c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800881e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008828:	e885 0003 	stmia.w	r5, {r0, r1}
 800882c:	1d33      	adds	r3, r6, #4
 800882e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008830:	6838      	ldr	r0, [r7, #0]
 8008832:	f003 ff79 	bl	800c728 <USB_DevInit>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e00d      	b.n	8008864 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4618      	mov	r0, r3
 800885e:	f004 ffc1 	bl	800d7e4 <USB_DevDisconnect>

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800886c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008880:	2b01      	cmp	r3, #1
 8008882:	d101      	bne.n	8008888 <HAL_PCD_Start+0x1c>
 8008884:	2302      	movs	r3, #2
 8008886:	e020      	b.n	80088ca <HAL_PCD_Start+0x5e>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008894:	2b01      	cmp	r3, #1
 8008896:	d109      	bne.n	80088ac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800889c:	2b01      	cmp	r3, #1
 800889e:	d005      	beq.n	80088ac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f003 feed 	bl	800c690 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f004 ff71 	bl	800d7a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80088d2:	b590      	push	{r4, r7, lr}
 80088d4:	b08d      	sub	sp, #52	; 0x34
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f005 f82f 	bl	800d94c <USB_GetMode>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f040 839d 	bne.w	8009030 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f004 ff93 	bl	800d826 <USB_ReadInterrupts>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	f000 8393 	beq.w	800902e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f004 ff8a 	bl	800d826 <USB_ReadInterrupts>
 8008912:	4603      	mov	r3, r0
 8008914:	f003 0302 	and.w	r3, r3, #2
 8008918:	2b02      	cmp	r3, #2
 800891a:	d107      	bne.n	800892c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	695a      	ldr	r2, [r3, #20]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f002 0202 	and.w	r2, r2, #2
 800892a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4618      	mov	r0, r3
 8008932:	f004 ff78 	bl	800d826 <USB_ReadInterrupts>
 8008936:	4603      	mov	r3, r0
 8008938:	f003 0310 	and.w	r3, r3, #16
 800893c:	2b10      	cmp	r3, #16
 800893e:	d161      	bne.n	8008a04 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	699a      	ldr	r2, [r3, #24]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0210 	bic.w	r2, r2, #16
 800894e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	f003 020f 	and.w	r2, r3, #15
 800895c:	4613      	mov	r3, r2
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	1a9b      	subs	r3, r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	4413      	add	r3, r2
 800896c:	3304      	adds	r3, #4
 800896e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	0c5b      	lsrs	r3, r3, #17
 8008974:	f003 030f 	and.w	r3, r3, #15
 8008978:	2b02      	cmp	r3, #2
 800897a:	d124      	bne.n	80089c6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008982:	4013      	ands	r3, r2
 8008984:	2b00      	cmp	r3, #0
 8008986:	d035      	beq.n	80089f4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	091b      	lsrs	r3, r3, #4
 8008990:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008996:	b29b      	uxth	r3, r3
 8008998:	461a      	mov	r2, r3
 800899a:	6a38      	ldr	r0, [r7, #32]
 800899c:	f004 fdde 	bl	800d55c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	68da      	ldr	r2, [r3, #12]
 80089a4:	69bb      	ldr	r3, [r7, #24]
 80089a6:	091b      	lsrs	r3, r3, #4
 80089a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089ac:	441a      	add	r2, r3
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	699a      	ldr	r2, [r3, #24]
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	091b      	lsrs	r3, r3, #4
 80089ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089be:	441a      	add	r2, r3
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	619a      	str	r2, [r3, #24]
 80089c4:	e016      	b.n	80089f4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	0c5b      	lsrs	r3, r3, #17
 80089ca:	f003 030f 	and.w	r3, r3, #15
 80089ce:	2b06      	cmp	r3, #6
 80089d0:	d110      	bne.n	80089f4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80089d8:	2208      	movs	r2, #8
 80089da:	4619      	mov	r1, r3
 80089dc:	6a38      	ldr	r0, [r7, #32]
 80089de:	f004 fdbd 	bl	800d55c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	699a      	ldr	r2, [r3, #24]
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	091b      	lsrs	r3, r3, #4
 80089ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089ee:	441a      	add	r2, r3
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	699a      	ldr	r2, [r3, #24]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0210 	orr.w	r2, r2, #16
 8008a02:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f004 ff0c 	bl	800d826 <USB_ReadInterrupts>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a18:	d16e      	bne.n	8008af8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f004 ff12 	bl	800d84c <USB_ReadDevAllOutEpInterrupt>
 8008a28:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008a2a:	e062      	b.n	8008af2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d057      	beq.n	8008ae6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a3c:	b2d2      	uxtb	r2, r2
 8008a3e:	4611      	mov	r1, r2
 8008a40:	4618      	mov	r0, r3
 8008a42:	f004 ff37 	bl	800d8b4 <USB_ReadDevOutEPInterrupt>
 8008a46:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00c      	beq.n	8008a6c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5e:	461a      	mov	r2, r3
 8008a60:	2301      	movs	r3, #1
 8008a62:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fdb0 	bl	80095cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	f003 0308 	and.w	r3, r3, #8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00c      	beq.n	8008a90 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	015a      	lsls	r2, r3, #5
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a82:	461a      	mov	r2, r3
 8008a84:	2308      	movs	r3, #8
 8008a86:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 feaa 	bl	80097e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f003 0310 	and.w	r3, r3, #16
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d008      	beq.n	8008aac <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	2310      	movs	r3, #16
 8008aaa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f003 0320 	and.w	r3, r3, #32
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d008      	beq.n	8008ac8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	2320      	movs	r3, #32
 8008ac6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d009      	beq.n	8008ae6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ae4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	3301      	adds	r3, #1
 8008aea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aee:	085b      	lsrs	r3, r3, #1
 8008af0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d199      	bne.n	8008a2c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f004 fe92 	bl	800d826 <USB_ReadInterrupts>
 8008b02:	4603      	mov	r3, r0
 8008b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b0c:	f040 80c0 	bne.w	8008c90 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4618      	mov	r0, r3
 8008b16:	f004 feb3 	bl	800d880 <USB_ReadDevAllInEpInterrupt>
 8008b1a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008b20:	e0b2      	b.n	8008c88 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 80a7 	beq.w	8008c7c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b34:	b2d2      	uxtb	r2, r2
 8008b36:	4611      	mov	r1, r2
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f004 fed9 	bl	800d8f0 <USB_ReadDevInEPInterrupt>
 8008b3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d057      	beq.n	8008bfa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	f003 030f 	and.w	r3, r3, #15
 8008b50:	2201      	movs	r2, #1
 8008b52:	fa02 f303 	lsl.w	r3, r2, r3
 8008b56:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	43db      	mvns	r3, r3
 8008b64:	69f9      	ldr	r1, [r7, #28]
 8008b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d132      	bne.n	8008bee <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	440b      	add	r3, r1
 8008b96:	3348      	adds	r3, #72	; 0x48
 8008b98:	6819      	ldr	r1, [r3, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	00db      	lsls	r3, r3, #3
 8008ba2:	1a9b      	subs	r3, r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4403      	add	r3, r0
 8008ba8:	3344      	adds	r3, #68	; 0x44
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4419      	add	r1, r3
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	00db      	lsls	r3, r3, #3
 8008bb6:	1a9b      	subs	r3, r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4403      	add	r3, r0
 8008bbc:	3348      	adds	r3, #72	; 0x48
 8008bbe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d113      	bne.n	8008bee <HAL_PCD_IRQHandler+0x31c>
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bca:	4613      	mov	r3, r2
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	1a9b      	subs	r3, r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	440b      	add	r3, r1
 8008bd4:	3350      	adds	r3, #80	; 0x50
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d108      	bne.n	8008bee <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6818      	ldr	r0, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008be6:	461a      	mov	r2, r3
 8008be8:	2101      	movs	r1, #1
 8008bea:	f004 fee1 	bl	800d9b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f009 ff10 	bl	8012a1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f003 0308 	and.w	r3, r3, #8
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d008      	beq.n	8008c16 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c10:	461a      	mov	r2, r3
 8008c12:	2308      	movs	r3, #8
 8008c14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d008      	beq.n	8008c32 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	015a      	lsls	r2, r3, #5
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	4413      	add	r3, r2
 8008c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	2310      	movs	r3, #16
 8008c30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d008      	beq.n	8008c4e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	015a      	lsls	r2, r3, #5
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	4413      	add	r3, r2
 8008c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c48:	461a      	mov	r2, r3
 8008c4a:	2340      	movs	r3, #64	; 0x40
 8008c4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d008      	beq.n	8008c6a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	015a      	lsls	r2, r3, #5
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	4413      	add	r3, r2
 8008c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c64:	461a      	mov	r2, r3
 8008c66:	2302      	movs	r3, #2
 8008c68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008c74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fc1b 	bl	80094b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	3301      	adds	r3, #1
 8008c80:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	085b      	lsrs	r3, r3, #1
 8008c86:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f47f af49 	bne.w	8008b22 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f004 fdc6 	bl	800d826 <USB_ReadInterrupts>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ca4:	d122      	bne.n	8008cec <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	69fa      	ldr	r2, [r7, #28]
 8008cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cb4:	f023 0301 	bic.w	r3, r3, #1
 8008cb8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d108      	bne.n	8008cd6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008ccc:	2100      	movs	r1, #0
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fe26 	bl	8009920 <HAL_PCDEx_LPM_Callback>
 8008cd4:	e002      	b.n	8008cdc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f009 ff16 	bl	8012b08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	695a      	ldr	r2, [r3, #20]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008cea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f004 fd98 	bl	800d826 <USB_ReadInterrupts>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d00:	d112      	bne.n	8008d28 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d102      	bne.n	8008d18 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f009 fed2 	bl	8012abc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	695a      	ldr	r2, [r3, #20]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008d26:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f004 fd7a 	bl	800d826 <USB_ReadInterrupts>
 8008d32:	4603      	mov	r3, r0
 8008d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d3c:	f040 80c7 	bne.w	8008ece <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d4e:	f023 0301 	bic.w	r3, r3, #1
 8008d52:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2110      	movs	r1, #16
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f003 fe48 	bl	800c9f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d60:	2300      	movs	r3, #0
 8008d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d64:	e056      	b.n	8008e14 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d72:	461a      	mov	r2, r3
 8008d74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d78:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7c:	015a      	lsls	r2, r3, #5
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d8a:	0151      	lsls	r1, r2, #5
 8008d8c:	69fa      	ldr	r2, [r7, #28]
 8008d8e:	440a      	add	r2, r1
 8008d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d98:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008daa:	0151      	lsls	r1, r2, #5
 8008dac:	69fa      	ldr	r2, [r7, #28]
 8008dae:	440a      	add	r2, r1
 8008db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008db4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008db8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbc:	015a      	lsls	r2, r3, #5
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008dcc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd0:	015a      	lsls	r2, r3, #5
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dde:	0151      	lsls	r1, r2, #5
 8008de0:	69fa      	ldr	r2, [r7, #28]
 8008de2:	440a      	add	r2, r1
 8008de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008de8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dfe:	0151      	lsls	r1, r2, #5
 8008e00:	69fa      	ldr	r2, [r7, #28]
 8008e02:	440a      	add	r2, r1
 8008e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e0c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	3301      	adds	r3, #1
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d3a3      	bcc.n	8008d66 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e2c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008e30:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d016      	beq.n	8008e68 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e44:	69fa      	ldr	r2, [r7, #28]
 8008e46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e4a:	f043 030b 	orr.w	r3, r3, #11
 8008e4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5a:	69fa      	ldr	r2, [r7, #28]
 8008e5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e60:	f043 030b 	orr.w	r3, r3, #11
 8008e64:	6453      	str	r3, [r2, #68]	; 0x44
 8008e66:	e015      	b.n	8008e94 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e6e:	695b      	ldr	r3, [r3, #20]
 8008e70:	69fa      	ldr	r2, [r7, #28]
 8008e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008e7a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008e7e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	69fa      	ldr	r2, [r7, #28]
 8008e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e8e:	f043 030b 	orr.w	r3, r3, #11
 8008e92:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	69fa      	ldr	r2, [r7, #28]
 8008e9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ea2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008ea6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6818      	ldr	r0, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f004 fd79 	bl	800d9b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	695a      	ldr	r2, [r3, #20]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008ecc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f004 fca7 	bl	800d826 <USB_ReadInterrupts>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ee2:	d124      	bne.n	8008f2e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f004 fd3d 	bl	800d968 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f003 fddd 	bl	800cab2 <USB_GetDevSpeed>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	461a      	mov	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681c      	ldr	r4, [r3, #0]
 8008f04:	f001 f956 	bl	800a1b4 <HAL_RCC_GetHCLKFreq>
 8008f08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	461a      	mov	r2, r3
 8008f12:	4620      	mov	r0, r4
 8008f14:	f003 fb1a 	bl	800c54c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f009 fda6 	bl	8012a6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	695a      	ldr	r2, [r3, #20]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f004 fc77 	bl	800d826 <USB_ReadInterrupts>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	f003 0308 	and.w	r3, r3, #8
 8008f3e:	2b08      	cmp	r3, #8
 8008f40:	d10a      	bne.n	8008f58 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f009 fd83 	bl	8012a4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	695a      	ldr	r2, [r3, #20]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f002 0208 	and.w	r2, r2, #8
 8008f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f004 fc62 	bl	800d826 <USB_ReadInterrupts>
 8008f62:	4603      	mov	r3, r0
 8008f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f6c:	d10f      	bne.n	8008f8e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f009 fde5 	bl	8012b48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	695a      	ldr	r2, [r3, #20]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008f8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f004 fc47 	bl	800d826 <USB_ReadInterrupts>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fa2:	d10f      	bne.n	8008fc4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f009 fdb8 	bl	8012b24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	695a      	ldr	r2, [r3, #20]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f004 fc2c 	bl	800d826 <USB_ReadInterrupts>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fd8:	d10a      	bne.n	8008ff0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f009 fdc6 	bl	8012b6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	695a      	ldr	r2, [r3, #20]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f004 fc16 	bl	800d826 <USB_ReadInterrupts>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	2b04      	cmp	r3, #4
 8009002:	d115      	bne.n	8009030 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	f003 0304 	and.w	r3, r3, #4
 8009012:	2b00      	cmp	r3, #0
 8009014:	d002      	beq.n	800901c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f009 fdb6 	bl	8012b88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6859      	ldr	r1, [r3, #4]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	430a      	orrs	r2, r1
 800902a:	605a      	str	r2, [r3, #4]
 800902c:	e000      	b.n	8009030 <HAL_PCD_IRQHandler+0x75e>
      return;
 800902e:	bf00      	nop
    }
  }
}
 8009030:	3734      	adds	r7, #52	; 0x34
 8009032:	46bd      	mov	sp, r7
 8009034:	bd90      	pop	{r4, r7, pc}

08009036 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b082      	sub	sp, #8
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
 800903e:	460b      	mov	r3, r1
 8009040:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009048:	2b01      	cmp	r3, #1
 800904a:	d101      	bne.n	8009050 <HAL_PCD_SetAddress+0x1a>
 800904c:	2302      	movs	r3, #2
 800904e:	e013      	b.n	8009078 <HAL_PCD_SetAddress+0x42>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	78fa      	ldrb	r2, [r7, #3]
 800905c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	78fa      	ldrb	r2, [r7, #3]
 8009066:	4611      	mov	r1, r2
 8009068:	4618      	mov	r0, r3
 800906a:	f004 fb74 	bl	800d756 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	4608      	mov	r0, r1
 800908a:	4611      	mov	r1, r2
 800908c:	461a      	mov	r2, r3
 800908e:	4603      	mov	r3, r0
 8009090:	70fb      	strb	r3, [r7, #3]
 8009092:	460b      	mov	r3, r1
 8009094:	803b      	strh	r3, [r7, #0]
 8009096:	4613      	mov	r3, r2
 8009098:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800909e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	da0f      	bge.n	80090c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090a6:	78fb      	ldrb	r3, [r7, #3]
 80090a8:	f003 020f 	and.w	r2, r3, #15
 80090ac:	4613      	mov	r3, r2
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	1a9b      	subs	r3, r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	3338      	adds	r3, #56	; 0x38
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	4413      	add	r3, r2
 80090ba:	3304      	adds	r3, #4
 80090bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2201      	movs	r2, #1
 80090c2:	705a      	strb	r2, [r3, #1]
 80090c4:	e00f      	b.n	80090e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090c6:	78fb      	ldrb	r3, [r7, #3]
 80090c8:	f003 020f 	and.w	r2, r3, #15
 80090cc:	4613      	mov	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	1a9b      	subs	r3, r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	4413      	add	r3, r2
 80090dc:	3304      	adds	r3, #4
 80090de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80090e6:	78fb      	ldrb	r3, [r7, #3]
 80090e8:	f003 030f 	and.w	r3, r3, #15
 80090ec:	b2da      	uxtb	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80090f2:	883a      	ldrh	r2, [r7, #0]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	78ba      	ldrb	r2, [r7, #2]
 80090fc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	785b      	ldrb	r3, [r3, #1]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d004      	beq.n	8009110 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	b29a      	uxth	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009110:	78bb      	ldrb	r3, [r7, #2]
 8009112:	2b02      	cmp	r3, #2
 8009114:	d102      	bne.n	800911c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009122:	2b01      	cmp	r3, #1
 8009124:	d101      	bne.n	800912a <HAL_PCD_EP_Open+0xaa>
 8009126:	2302      	movs	r3, #2
 8009128:	e00e      	b.n	8009148 <HAL_PCD_EP_Open+0xc8>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68f9      	ldr	r1, [r7, #12]
 8009138:	4618      	mov	r0, r3
 800913a:	f003 fcdf 	bl	800cafc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009146:	7afb      	ldrb	r3, [r7, #11]
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800915c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009160:	2b00      	cmp	r3, #0
 8009162:	da0f      	bge.n	8009184 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	f003 020f 	and.w	r2, r3, #15
 800916a:	4613      	mov	r3, r2
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	1a9b      	subs	r3, r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	3338      	adds	r3, #56	; 0x38
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	4413      	add	r3, r2
 8009178:	3304      	adds	r3, #4
 800917a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2201      	movs	r2, #1
 8009180:	705a      	strb	r2, [r3, #1]
 8009182:	e00f      	b.n	80091a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009184:	78fb      	ldrb	r3, [r7, #3]
 8009186:	f003 020f 	and.w	r2, r3, #15
 800918a:	4613      	mov	r3, r2
 800918c:	00db      	lsls	r3, r3, #3
 800918e:	1a9b      	subs	r3, r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	4413      	add	r3, r2
 800919a:	3304      	adds	r3, #4
 800919c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	f003 030f 	and.w	r3, r3, #15
 80091aa:	b2da      	uxtb	r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d101      	bne.n	80091be <HAL_PCD_EP_Close+0x6e>
 80091ba:	2302      	movs	r3, #2
 80091bc:	e00e      	b.n	80091dc <HAL_PCD_EP_Close+0x8c>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68f9      	ldr	r1, [r7, #12]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f003 fd1d 	bl	800cc0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	607a      	str	r2, [r7, #4]
 80091ee:	603b      	str	r3, [r7, #0]
 80091f0:	460b      	mov	r3, r1
 80091f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091f4:	7afb      	ldrb	r3, [r7, #11]
 80091f6:	f003 020f 	and.w	r2, r3, #15
 80091fa:	4613      	mov	r3, r2
 80091fc:	00db      	lsls	r3, r3, #3
 80091fe:	1a9b      	subs	r3, r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	4413      	add	r3, r2
 800920a:	3304      	adds	r3, #4
 800920c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2200      	movs	r2, #0
 800921e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2200      	movs	r2, #0
 8009224:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009226:	7afb      	ldrb	r3, [r7, #11]
 8009228:	f003 030f 	and.w	r3, r3, #15
 800922c:	b2da      	uxtb	r2, r3
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d102      	bne.n	8009240 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009240:	7afb      	ldrb	r3, [r7, #11]
 8009242:	f003 030f 	and.w	r3, r3, #15
 8009246:	2b00      	cmp	r3, #0
 8009248:	d109      	bne.n	800925e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6818      	ldr	r0, [r3, #0]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	b2db      	uxtb	r3, r3
 8009254:	461a      	mov	r2, r3
 8009256:	6979      	ldr	r1, [r7, #20]
 8009258:	f003 fff8 	bl	800d24c <USB_EP0StartXfer>
 800925c:	e008      	b.n	8009270 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	b2db      	uxtb	r3, r3
 8009268:	461a      	mov	r2, r3
 800926a:	6979      	ldr	r1, [r7, #20]
 800926c:	f003 fdaa 	bl	800cdc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800927a:	b480      	push	{r7}
 800927c:	b083      	sub	sp, #12
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	460b      	mov	r3, r1
 8009284:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009286:	78fb      	ldrb	r3, [r7, #3]
 8009288:	f003 020f 	and.w	r2, r3, #15
 800928c:	6879      	ldr	r1, [r7, #4]
 800928e:	4613      	mov	r3, r2
 8009290:	00db      	lsls	r3, r3, #3
 8009292:	1a9b      	subs	r3, r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	440b      	add	r3, r1
 8009298:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800929c:	681b      	ldr	r3, [r3, #0]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b086      	sub	sp, #24
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	60f8      	str	r0, [r7, #12]
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	603b      	str	r3, [r7, #0]
 80092b6:	460b      	mov	r3, r1
 80092b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092ba:	7afb      	ldrb	r3, [r7, #11]
 80092bc:	f003 020f 	and.w	r2, r3, #15
 80092c0:	4613      	mov	r3, r2
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	1a9b      	subs	r3, r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	3338      	adds	r3, #56	; 0x38
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	4413      	add	r3, r2
 80092ce:	3304      	adds	r3, #4
 80092d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	2200      	movs	r2, #0
 80092e2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	2201      	movs	r2, #1
 80092e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092ea:	7afb      	ldrb	r3, [r7, #11]
 80092ec:	f003 030f 	and.w	r3, r3, #15
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d102      	bne.n	8009304 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009304:	7afb      	ldrb	r3, [r7, #11]
 8009306:	f003 030f 	and.w	r3, r3, #15
 800930a:	2b00      	cmp	r3, #0
 800930c:	d109      	bne.n	8009322 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6818      	ldr	r0, [r3, #0]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	b2db      	uxtb	r3, r3
 8009318:	461a      	mov	r2, r3
 800931a:	6979      	ldr	r1, [r7, #20]
 800931c:	f003 ff96 	bl	800d24c <USB_EP0StartXfer>
 8009320:	e008      	b.n	8009334 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6818      	ldr	r0, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	b2db      	uxtb	r3, r3
 800932c:	461a      	mov	r2, r3
 800932e:	6979      	ldr	r1, [r7, #20]
 8009330:	f003 fd48 	bl	800cdc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	460b      	mov	r3, r1
 8009348:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800934a:	78fb      	ldrb	r3, [r7, #3]
 800934c:	f003 020f 	and.w	r2, r3, #15
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	429a      	cmp	r2, r3
 8009356:	d901      	bls.n	800935c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e050      	b.n	80093fe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800935c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009360:	2b00      	cmp	r3, #0
 8009362:	da0f      	bge.n	8009384 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	f003 020f 	and.w	r2, r3, #15
 800936a:	4613      	mov	r3, r2
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	1a9b      	subs	r3, r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	3338      	adds	r3, #56	; 0x38
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	4413      	add	r3, r2
 8009378:	3304      	adds	r3, #4
 800937a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	705a      	strb	r2, [r3, #1]
 8009382:	e00d      	b.n	80093a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009384:	78fa      	ldrb	r2, [r7, #3]
 8009386:	4613      	mov	r3, r2
 8009388:	00db      	lsls	r3, r3, #3
 800938a:	1a9b      	subs	r3, r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	4413      	add	r3, r2
 8009396:	3304      	adds	r3, #4
 8009398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2201      	movs	r2, #1
 80093a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80093a6:	78fb      	ldrb	r3, [r7, #3]
 80093a8:	f003 030f 	and.w	r3, r3, #15
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d101      	bne.n	80093c0 <HAL_PCD_EP_SetStall+0x82>
 80093bc:	2302      	movs	r3, #2
 80093be:	e01e      	b.n	80093fe <HAL_PCD_EP_SetStall+0xc0>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68f9      	ldr	r1, [r7, #12]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f004 f8ed 	bl	800d5ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	f003 030f 	and.w	r3, r3, #15
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10a      	bne.n	80093f4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	b2d9      	uxtb	r1, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80093ee:	461a      	mov	r2, r3
 80093f0:	f004 fade 	bl	800d9b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b084      	sub	sp, #16
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	460b      	mov	r3, r1
 8009410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009412:	78fb      	ldrb	r3, [r7, #3]
 8009414:	f003 020f 	and.w	r2, r3, #15
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	429a      	cmp	r2, r3
 800941e:	d901      	bls.n	8009424 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e042      	b.n	80094aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009428:	2b00      	cmp	r3, #0
 800942a:	da0f      	bge.n	800944c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800942c:	78fb      	ldrb	r3, [r7, #3]
 800942e:	f003 020f 	and.w	r2, r3, #15
 8009432:	4613      	mov	r3, r2
 8009434:	00db      	lsls	r3, r3, #3
 8009436:	1a9b      	subs	r3, r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	3338      	adds	r3, #56	; 0x38
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	4413      	add	r3, r2
 8009440:	3304      	adds	r3, #4
 8009442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2201      	movs	r2, #1
 8009448:	705a      	strb	r2, [r3, #1]
 800944a:	e00f      	b.n	800946c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	f003 020f 	and.w	r2, r3, #15
 8009452:	4613      	mov	r3, r2
 8009454:	00db      	lsls	r3, r3, #3
 8009456:	1a9b      	subs	r3, r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	4413      	add	r3, r2
 8009462:	3304      	adds	r3, #4
 8009464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009472:	78fb      	ldrb	r3, [r7, #3]
 8009474:	f003 030f 	and.w	r3, r3, #15
 8009478:	b2da      	uxtb	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009484:	2b01      	cmp	r3, #1
 8009486:	d101      	bne.n	800948c <HAL_PCD_EP_ClrStall+0x86>
 8009488:	2302      	movs	r3, #2
 800948a:	e00e      	b.n	80094aa <HAL_PCD_EP_ClrStall+0xa4>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68f9      	ldr	r1, [r7, #12]
 800949a:	4618      	mov	r0, r3
 800949c:	f004 f8f5 	bl	800d68a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b08a      	sub	sp, #40	; 0x28
 80094b6:	af02      	add	r7, sp, #8
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	4613      	mov	r3, r2
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	1a9b      	subs	r3, r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	3338      	adds	r3, #56	; 0x38
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	4413      	add	r3, r2
 80094d6:	3304      	adds	r3, #4
 80094d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	699a      	ldr	r2, [r3, #24]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d901      	bls.n	80094ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e06c      	b.n	80095c4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	695a      	ldr	r2, [r3, #20]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	69fa      	ldr	r2, [r7, #28]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d902      	bls.n	8009506 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	3303      	adds	r3, #3
 800950a:	089b      	lsrs	r3, r3, #2
 800950c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800950e:	e02b      	b.n	8009568 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	695a      	ldr	r2, [r3, #20]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	69fa      	ldr	r2, [r7, #28]
 8009522:	429a      	cmp	r2, r3
 8009524:	d902      	bls.n	800952c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	3303      	adds	r3, #3
 8009530:	089b      	lsrs	r3, r3, #2
 8009532:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	68d9      	ldr	r1, [r3, #12]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	b2da      	uxtb	r2, r3
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009544:	b2db      	uxtb	r3, r3
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	4603      	mov	r3, r0
 800954a:	6978      	ldr	r0, [r7, #20]
 800954c:	f003 ffd1 	bl	800d4f2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	68da      	ldr	r2, [r3, #12]
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	441a      	add	r2, r3
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	699a      	ldr	r2, [r3, #24]
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	441a      	add	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	b29b      	uxth	r3, r3
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	429a      	cmp	r2, r3
 800957c:	d809      	bhi.n	8009592 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	699a      	ldr	r2, [r3, #24]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009586:	429a      	cmp	r2, r3
 8009588:	d203      	bcs.n	8009592 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1be      	bne.n	8009510 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	695a      	ldr	r2, [r3, #20]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	429a      	cmp	r2, r3
 800959c:	d811      	bhi.n	80095c2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	f003 030f 	and.w	r3, r3, #15
 80095a4:	2201      	movs	r2, #1
 80095a6:	fa02 f303 	lsl.w	r3, r2, r3
 80095aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	43db      	mvns	r3, r3
 80095b8:	6939      	ldr	r1, [r7, #16]
 80095ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095be:	4013      	ands	r3, r2
 80095c0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3720      	adds	r7, #32
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	333c      	adds	r3, #60	; 0x3c
 80095e4:	3304      	adds	r3, #4
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	f040 80a0 	bne.w	8009744 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	f003 0308 	and.w	r3, r3, #8
 800960a:	2b00      	cmp	r3, #0
 800960c:	d015      	beq.n	800963a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4a72      	ldr	r2, [pc, #456]	; (80097dc <PCD_EP_OutXfrComplete_int+0x210>)
 8009612:	4293      	cmp	r3, r2
 8009614:	f240 80dd 	bls.w	80097d2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 80d7 	beq.w	80097d2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009630:	461a      	mov	r2, r3
 8009632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009636:	6093      	str	r3, [r2, #8]
 8009638:	e0cb      	b.n	80097d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f003 0320 	and.w	r3, r3, #32
 8009640:	2b00      	cmp	r3, #0
 8009642:	d009      	beq.n	8009658 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	015a      	lsls	r2, r3, #5
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	4413      	add	r3, r2
 800964c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009650:	461a      	mov	r2, r3
 8009652:	2320      	movs	r3, #32
 8009654:	6093      	str	r3, [r2, #8]
 8009656:	e0bc      	b.n	80097d2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800965e:	2b00      	cmp	r3, #0
 8009660:	f040 80b7 	bne.w	80097d2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4a5d      	ldr	r2, [pc, #372]	; (80097dc <PCD_EP_OutXfrComplete_int+0x210>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d90f      	bls.n	800968c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00a      	beq.n	800968c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	4413      	add	r3, r2
 800967e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009682:	461a      	mov	r2, r3
 8009684:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009688:	6093      	str	r3, [r2, #8]
 800968a:	e0a2      	b.n	80097d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	4613      	mov	r3, r2
 8009692:	00db      	lsls	r3, r3, #3
 8009694:	1a9b      	subs	r3, r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	440b      	add	r3, r1
 800969a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800969e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	0159      	lsls	r1, r3, #5
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	440b      	add	r3, r1
 80096a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80096b2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	4613      	mov	r3, r2
 80096ba:	00db      	lsls	r3, r3, #3
 80096bc:	1a9b      	subs	r3, r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4403      	add	r3, r0
 80096c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80096c6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80096c8:	6879      	ldr	r1, [r7, #4]
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	4613      	mov	r3, r2
 80096ce:	00db      	lsls	r3, r3, #3
 80096d0:	1a9b      	subs	r3, r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	440b      	add	r3, r1
 80096d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80096da:	6819      	ldr	r1, [r3, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	4613      	mov	r3, r2
 80096e2:	00db      	lsls	r3, r3, #3
 80096e4:	1a9b      	subs	r3, r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4403      	add	r3, r0
 80096ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4419      	add	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	683a      	ldr	r2, [r7, #0]
 80096f6:	4613      	mov	r3, r2
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	1a9b      	subs	r3, r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	4403      	add	r3, r0
 8009700:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009704:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d114      	bne.n	8009736 <PCD_EP_OutXfrComplete_int+0x16a>
 800970c:	6879      	ldr	r1, [r7, #4]
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	4613      	mov	r3, r2
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	1a9b      	subs	r3, r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	440b      	add	r3, r1
 800971a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d108      	bne.n	8009736 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6818      	ldr	r0, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800972e:	461a      	mov	r2, r3
 8009730:	2101      	movs	r1, #1
 8009732:	f004 f93d 	bl	800d9b0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	b2db      	uxtb	r3, r3
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f009 f951 	bl	80129e4 <HAL_PCD_DataOutStageCallback>
 8009742:	e046      	b.n	80097d2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4a26      	ldr	r2, [pc, #152]	; (80097e0 <PCD_EP_OutXfrComplete_int+0x214>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d124      	bne.n	8009796 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00a      	beq.n	800976c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009762:	461a      	mov	r2, r3
 8009764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009768:	6093      	str	r3, [r2, #8]
 800976a:	e032      	b.n	80097d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	f003 0320 	and.w	r3, r3, #32
 8009772:	2b00      	cmp	r3, #0
 8009774:	d008      	beq.n	8009788 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	4413      	add	r3, r2
 800977e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009782:	461a      	mov	r2, r3
 8009784:	2320      	movs	r3, #32
 8009786:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	b2db      	uxtb	r3, r3
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f009 f928 	bl	80129e4 <HAL_PCD_DataOutStageCallback>
 8009794:	e01d      	b.n	80097d2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d114      	bne.n	80097c6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	4613      	mov	r3, r2
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	1a9b      	subs	r3, r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	440b      	add	r3, r1
 80097aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d108      	bne.n	80097c6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6818      	ldr	r0, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80097be:	461a      	mov	r2, r3
 80097c0:	2100      	movs	r1, #0
 80097c2:	f004 f8f5 	bl	800d9b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f009 f909 	bl	80129e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	4f54300a 	.word	0x4f54300a
 80097e0:	4f54310a 	.word	0x4f54310a

080097e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	333c      	adds	r3, #60	; 0x3c
 80097fc:	3304      	adds	r3, #4
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	4a15      	ldr	r2, [pc, #84]	; (800986c <PCD_EP_OutSetupPacket_int+0x88>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d90e      	bls.n	8009838 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009820:	2b00      	cmp	r3, #0
 8009822:	d009      	beq.n	8009838 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	015a      	lsls	r2, r3, #5
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	4413      	add	r3, r2
 800982c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009830:	461a      	mov	r2, r3
 8009832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009836:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f009 f8c1 	bl	80129c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	4a0a      	ldr	r2, [pc, #40]	; (800986c <PCD_EP_OutSetupPacket_int+0x88>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d90c      	bls.n	8009860 <PCD_EP_OutSetupPacket_int+0x7c>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d108      	bne.n	8009860 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6818      	ldr	r0, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009858:	461a      	mov	r2, r3
 800985a:	2101      	movs	r1, #1
 800985c:	f004 f8a8 	bl	800d9b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	4f54300a 	.word	0x4f54300a

08009870 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
 800987c:	4613      	mov	r3, r2
 800987e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009886:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009888:	78fb      	ldrb	r3, [r7, #3]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d107      	bne.n	800989e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800988e:	883b      	ldrh	r3, [r7, #0]
 8009890:	0419      	lsls	r1, r3, #16
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	430a      	orrs	r2, r1
 800989a:	629a      	str	r2, [r3, #40]	; 0x28
 800989c:	e028      	b.n	80098f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a4:	0c1b      	lsrs	r3, r3, #16
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	4413      	add	r3, r2
 80098aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80098ac:	2300      	movs	r3, #0
 80098ae:	73fb      	strb	r3, [r7, #15]
 80098b0:	e00d      	b.n	80098ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	7bfb      	ldrb	r3, [r7, #15]
 80098b8:	3340      	adds	r3, #64	; 0x40
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	0c1b      	lsrs	r3, r3, #16
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	4413      	add	r3, r2
 80098c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	3301      	adds	r3, #1
 80098cc:	73fb      	strb	r3, [r7, #15]
 80098ce:	7bfa      	ldrb	r2, [r7, #15]
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	3b01      	subs	r3, #1
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d3ec      	bcc.n	80098b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80098d8:	883b      	ldrh	r3, [r7, #0]
 80098da:	0418      	lsls	r0, r3, #16
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6819      	ldr	r1, [r3, #0]
 80098e0:	78fb      	ldrb	r3, [r7, #3]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	4302      	orrs	r2, r0
 80098e8:	3340      	adds	r3, #64	; 0x40
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	440b      	add	r3, r1
 80098ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3714      	adds	r7, #20
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr

080098fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80098fe:	b480      	push	{r7}
 8009900:	b083      	sub	sp, #12
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	460b      	mov	r3, r1
 8009908:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	887a      	ldrh	r2, [r7, #2]
 8009910:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b086      	sub	sp, #24
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e264      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0301 	and.w	r3, r3, #1
 8009952:	2b00      	cmp	r3, #0
 8009954:	d075      	beq.n	8009a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009956:	4ba3      	ldr	r3, [pc, #652]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f003 030c 	and.w	r3, r3, #12
 800995e:	2b04      	cmp	r3, #4
 8009960:	d00c      	beq.n	800997c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009962:	4ba0      	ldr	r3, [pc, #640]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800996a:	2b08      	cmp	r3, #8
 800996c:	d112      	bne.n	8009994 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800996e:	4b9d      	ldr	r3, [pc, #628]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800997a:	d10b      	bne.n	8009994 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800997c:	4b99      	ldr	r3, [pc, #612]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009984:	2b00      	cmp	r3, #0
 8009986:	d05b      	beq.n	8009a40 <HAL_RCC_OscConfig+0x108>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d157      	bne.n	8009a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	e23f      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800999c:	d106      	bne.n	80099ac <HAL_RCC_OscConfig+0x74>
 800999e:	4b91      	ldr	r3, [pc, #580]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a90      	ldr	r2, [pc, #576]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 80099a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099a8:	6013      	str	r3, [r2, #0]
 80099aa:	e01d      	b.n	80099e8 <HAL_RCC_OscConfig+0xb0>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099b4:	d10c      	bne.n	80099d0 <HAL_RCC_OscConfig+0x98>
 80099b6:	4b8b      	ldr	r3, [pc, #556]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a8a      	ldr	r2, [pc, #552]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 80099bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099c0:	6013      	str	r3, [r2, #0]
 80099c2:	4b88      	ldr	r3, [pc, #544]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a87      	ldr	r2, [pc, #540]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 80099c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	e00b      	b.n	80099e8 <HAL_RCC_OscConfig+0xb0>
 80099d0:	4b84      	ldr	r3, [pc, #528]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a83      	ldr	r2, [pc, #524]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 80099d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	4b81      	ldr	r3, [pc, #516]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a80      	ldr	r2, [pc, #512]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 80099e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d013      	beq.n	8009a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099f0:	f7fc fbc4 	bl	800617c <HAL_GetTick>
 80099f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099f6:	e008      	b.n	8009a0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099f8:	f7fc fbc0 	bl	800617c <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	2b64      	cmp	r3, #100	; 0x64
 8009a04:	d901      	bls.n	8009a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e204      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a0a:	4b76      	ldr	r3, [pc, #472]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0f0      	beq.n	80099f8 <HAL_RCC_OscConfig+0xc0>
 8009a16:	e014      	b.n	8009a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a18:	f7fc fbb0 	bl	800617c <HAL_GetTick>
 8009a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a1e:	e008      	b.n	8009a32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a20:	f7fc fbac 	bl	800617c <HAL_GetTick>
 8009a24:	4602      	mov	r2, r0
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	2b64      	cmp	r3, #100	; 0x64
 8009a2c:	d901      	bls.n	8009a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e1f0      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a32:	4b6c      	ldr	r3, [pc, #432]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1f0      	bne.n	8009a20 <HAL_RCC_OscConfig+0xe8>
 8009a3e:	e000      	b.n	8009a42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0302 	and.w	r3, r3, #2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d063      	beq.n	8009b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a4e:	4b65      	ldr	r3, [pc, #404]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f003 030c 	and.w	r3, r3, #12
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00b      	beq.n	8009a72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a5a:	4b62      	ldr	r3, [pc, #392]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a62:	2b08      	cmp	r3, #8
 8009a64:	d11c      	bne.n	8009aa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a66:	4b5f      	ldr	r3, [pc, #380]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d116      	bne.n	8009aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a72:	4b5c      	ldr	r3, [pc, #368]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 0302 	and.w	r3, r3, #2
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d005      	beq.n	8009a8a <HAL_RCC_OscConfig+0x152>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d001      	beq.n	8009a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e1c4      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a8a:	4b56      	ldr	r3, [pc, #344]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	00db      	lsls	r3, r3, #3
 8009a98:	4952      	ldr	r1, [pc, #328]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a9e:	e03a      	b.n	8009b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d020      	beq.n	8009aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009aa8:	4b4f      	ldr	r3, [pc, #316]	; (8009be8 <HAL_RCC_OscConfig+0x2b0>)
 8009aaa:	2201      	movs	r2, #1
 8009aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aae:	f7fc fb65 	bl	800617c <HAL_GetTick>
 8009ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ab4:	e008      	b.n	8009ac8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ab6:	f7fc fb61 	bl	800617c <HAL_GetTick>
 8009aba:	4602      	mov	r2, r0
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d901      	bls.n	8009ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e1a5      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ac8:	4b46      	ldr	r3, [pc, #280]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 0302 	and.w	r3, r3, #2
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d0f0      	beq.n	8009ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ad4:	4b43      	ldr	r3, [pc, #268]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	4940      	ldr	r1, [pc, #256]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	600b      	str	r3, [r1, #0]
 8009ae8:	e015      	b.n	8009b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009aea:	4b3f      	ldr	r3, [pc, #252]	; (8009be8 <HAL_RCC_OscConfig+0x2b0>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009af0:	f7fc fb44 	bl	800617c <HAL_GetTick>
 8009af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009af6:	e008      	b.n	8009b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009af8:	f7fc fb40 	bl	800617c <HAL_GetTick>
 8009afc:	4602      	mov	r2, r0
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	2b02      	cmp	r3, #2
 8009b04:	d901      	bls.n	8009b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e184      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b0a:	4b36      	ldr	r3, [pc, #216]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1f0      	bne.n	8009af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 0308 	and.w	r3, r3, #8
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d030      	beq.n	8009b84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d016      	beq.n	8009b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b2a:	4b30      	ldr	r3, [pc, #192]	; (8009bec <HAL_RCC_OscConfig+0x2b4>)
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b30:	f7fc fb24 	bl	800617c <HAL_GetTick>
 8009b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b36:	e008      	b.n	8009b4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b38:	f7fc fb20 	bl	800617c <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d901      	bls.n	8009b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e164      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b4a:	4b26      	ldr	r3, [pc, #152]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b4e:	f003 0302 	and.w	r3, r3, #2
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d0f0      	beq.n	8009b38 <HAL_RCC_OscConfig+0x200>
 8009b56:	e015      	b.n	8009b84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b58:	4b24      	ldr	r3, [pc, #144]	; (8009bec <HAL_RCC_OscConfig+0x2b4>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b5e:	f7fc fb0d 	bl	800617c <HAL_GetTick>
 8009b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b64:	e008      	b.n	8009b78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b66:	f7fc fb09 	bl	800617c <HAL_GetTick>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d901      	bls.n	8009b78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e14d      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b78:	4b1a      	ldr	r3, [pc, #104]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b7c:	f003 0302 	and.w	r3, r3, #2
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1f0      	bne.n	8009b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0304 	and.w	r3, r3, #4
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 80a0 	beq.w	8009cd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b92:	2300      	movs	r3, #0
 8009b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b96:	4b13      	ldr	r3, [pc, #76]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10f      	bne.n	8009bc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60bb      	str	r3, [r7, #8]
 8009ba6:	4b0f      	ldr	r3, [pc, #60]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009baa:	4a0e      	ldr	r2, [pc, #56]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8009bb2:	4b0c      	ldr	r3, [pc, #48]	; (8009be4 <HAL_RCC_OscConfig+0x2ac>)
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bba:	60bb      	str	r3, [r7, #8]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bc2:	4b0b      	ldr	r3, [pc, #44]	; (8009bf0 <HAL_RCC_OscConfig+0x2b8>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d121      	bne.n	8009c12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009bce:	4b08      	ldr	r3, [pc, #32]	; (8009bf0 <HAL_RCC_OscConfig+0x2b8>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a07      	ldr	r2, [pc, #28]	; (8009bf0 <HAL_RCC_OscConfig+0x2b8>)
 8009bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bda:	f7fc facf 	bl	800617c <HAL_GetTick>
 8009bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009be0:	e011      	b.n	8009c06 <HAL_RCC_OscConfig+0x2ce>
 8009be2:	bf00      	nop
 8009be4:	40023800 	.word	0x40023800
 8009be8:	42470000 	.word	0x42470000
 8009bec:	42470e80 	.word	0x42470e80
 8009bf0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bf4:	f7fc fac2 	bl	800617c <HAL_GetTick>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d901      	bls.n	8009c06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009c02:	2303      	movs	r3, #3
 8009c04:	e106      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c06:	4b85      	ldr	r3, [pc, #532]	; (8009e1c <HAL_RCC_OscConfig+0x4e4>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d0f0      	beq.n	8009bf4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d106      	bne.n	8009c28 <HAL_RCC_OscConfig+0x2f0>
 8009c1a:	4b81      	ldr	r3, [pc, #516]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c1e:	4a80      	ldr	r2, [pc, #512]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009c20:	f043 0301 	orr.w	r3, r3, #1
 8009c24:	6713      	str	r3, [r2, #112]	; 0x70
 8009c26:	e01c      	b.n	8009c62 <HAL_RCC_OscConfig+0x32a>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	2b05      	cmp	r3, #5
 8009c2e:	d10c      	bne.n	8009c4a <HAL_RCC_OscConfig+0x312>
 8009c30:	4b7b      	ldr	r3, [pc, #492]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c34:	4a7a      	ldr	r2, [pc, #488]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009c36:	f043 0304 	orr.w	r3, r3, #4
 8009c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c3c:	4b78      	ldr	r3, [pc, #480]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c40:	4a77      	ldr	r2, [pc, #476]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009c42:	f043 0301 	orr.w	r3, r3, #1
 8009c46:	6713      	str	r3, [r2, #112]	; 0x70
 8009c48:	e00b      	b.n	8009c62 <HAL_RCC_OscConfig+0x32a>
 8009c4a:	4b75      	ldr	r3, [pc, #468]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4e:	4a74      	ldr	r2, [pc, #464]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009c50:	f023 0301 	bic.w	r3, r3, #1
 8009c54:	6713      	str	r3, [r2, #112]	; 0x70
 8009c56:	4b72      	ldr	r3, [pc, #456]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c5a:	4a71      	ldr	r2, [pc, #452]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009c5c:	f023 0304 	bic.w	r3, r3, #4
 8009c60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d015      	beq.n	8009c96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c6a:	f7fc fa87 	bl	800617c <HAL_GetTick>
 8009c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c70:	e00a      	b.n	8009c88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c72:	f7fc fa83 	bl	800617c <HAL_GetTick>
 8009c76:	4602      	mov	r2, r0
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d901      	bls.n	8009c88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009c84:	2303      	movs	r3, #3
 8009c86:	e0c5      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c88:	4b65      	ldr	r3, [pc, #404]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c8c:	f003 0302 	and.w	r3, r3, #2
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d0ee      	beq.n	8009c72 <HAL_RCC_OscConfig+0x33a>
 8009c94:	e014      	b.n	8009cc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c96:	f7fc fa71 	bl	800617c <HAL_GetTick>
 8009c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c9c:	e00a      	b.n	8009cb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c9e:	f7fc fa6d 	bl	800617c <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d901      	bls.n	8009cb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	e0af      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009cb4:	4b5a      	ldr	r3, [pc, #360]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb8:	f003 0302 	and.w	r3, r3, #2
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1ee      	bne.n	8009c9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009cc0:	7dfb      	ldrb	r3, [r7, #23]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d105      	bne.n	8009cd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cc6:	4b56      	ldr	r3, [pc, #344]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cca:	4a55      	ldr	r2, [pc, #340]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 809b 	beq.w	8009e12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009cdc:	4b50      	ldr	r3, [pc, #320]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f003 030c 	and.w	r3, r3, #12
 8009ce4:	2b08      	cmp	r3, #8
 8009ce6:	d05c      	beq.n	8009da2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d141      	bne.n	8009d74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cf0:	4b4c      	ldr	r3, [pc, #304]	; (8009e24 <HAL_RCC_OscConfig+0x4ec>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cf6:	f7fc fa41 	bl	800617c <HAL_GetTick>
 8009cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cfc:	e008      	b.n	8009d10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cfe:	f7fc fa3d 	bl	800617c <HAL_GetTick>
 8009d02:	4602      	mov	r2, r0
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d901      	bls.n	8009d10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e081      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d10:	4b43      	ldr	r3, [pc, #268]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1f0      	bne.n	8009cfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	69da      	ldr	r2, [r3, #28]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a1b      	ldr	r3, [r3, #32]
 8009d24:	431a      	orrs	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2a:	019b      	lsls	r3, r3, #6
 8009d2c:	431a      	orrs	r2, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d32:	085b      	lsrs	r3, r3, #1
 8009d34:	3b01      	subs	r3, #1
 8009d36:	041b      	lsls	r3, r3, #16
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3e:	061b      	lsls	r3, r3, #24
 8009d40:	4937      	ldr	r1, [pc, #220]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d46:	4b37      	ldr	r3, [pc, #220]	; (8009e24 <HAL_RCC_OscConfig+0x4ec>)
 8009d48:	2201      	movs	r2, #1
 8009d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d4c:	f7fc fa16 	bl	800617c <HAL_GetTick>
 8009d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d52:	e008      	b.n	8009d66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d54:	f7fc fa12 	bl	800617c <HAL_GetTick>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d901      	bls.n	8009d66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009d62:	2303      	movs	r3, #3
 8009d64:	e056      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d66:	4b2e      	ldr	r3, [pc, #184]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d0f0      	beq.n	8009d54 <HAL_RCC_OscConfig+0x41c>
 8009d72:	e04e      	b.n	8009e12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d74:	4b2b      	ldr	r3, [pc, #172]	; (8009e24 <HAL_RCC_OscConfig+0x4ec>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d7a:	f7fc f9ff 	bl	800617c <HAL_GetTick>
 8009d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d80:	e008      	b.n	8009d94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d82:	f7fc f9fb 	bl	800617c <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d901      	bls.n	8009d94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e03f      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d94:	4b22      	ldr	r3, [pc, #136]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1f0      	bne.n	8009d82 <HAL_RCC_OscConfig+0x44a>
 8009da0:	e037      	b.n	8009e12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d101      	bne.n	8009dae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e032      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009dae:	4b1c      	ldr	r3, [pc, #112]	; (8009e20 <HAL_RCC_OscConfig+0x4e8>)
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	699b      	ldr	r3, [r3, #24]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d028      	beq.n	8009e0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d121      	bne.n	8009e0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d11a      	bne.n	8009e0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009dde:	4013      	ands	r3, r2
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009de4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d111      	bne.n	8009e0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df4:	085b      	lsrs	r3, r3, #1
 8009df6:	3b01      	subs	r3, #1
 8009df8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d107      	bne.n	8009e0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d001      	beq.n	8009e12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e000      	b.n	8009e14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	40007000 	.word	0x40007000
 8009e20:	40023800 	.word	0x40023800
 8009e24:	42470060 	.word	0x42470060

08009e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d101      	bne.n	8009e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e0cc      	b.n	8009fd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e3c:	4b68      	ldr	r3, [pc, #416]	; (8009fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 0307 	and.w	r3, r3, #7
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d90c      	bls.n	8009e64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e4a:	4b65      	ldr	r3, [pc, #404]	; (8009fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e4c:	683a      	ldr	r2, [r7, #0]
 8009e4e:	b2d2      	uxtb	r2, r2
 8009e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e52:	4b63      	ldr	r3, [pc, #396]	; (8009fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 0307 	and.w	r3, r3, #7
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d001      	beq.n	8009e64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	e0b8      	b.n	8009fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 0302 	and.w	r3, r3, #2
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d020      	beq.n	8009eb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 0304 	and.w	r3, r3, #4
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d005      	beq.n	8009e88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e7c:	4b59      	ldr	r3, [pc, #356]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	4a58      	ldr	r2, [pc, #352]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009e86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0308 	and.w	r3, r3, #8
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d005      	beq.n	8009ea0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009e94:	4b53      	ldr	r3, [pc, #332]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	4a52      	ldr	r2, [pc, #328]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009e9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ea0:	4b50      	ldr	r3, [pc, #320]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	494d      	ldr	r1, [pc, #308]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d044      	beq.n	8009f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d107      	bne.n	8009ed6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ec6:	4b47      	ldr	r3, [pc, #284]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d119      	bne.n	8009f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e07f      	b.n	8009fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	d003      	beq.n	8009ee6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d107      	bne.n	8009ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ee6:	4b3f      	ldr	r3, [pc, #252]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d109      	bne.n	8009f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e06f      	b.n	8009fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ef6:	4b3b      	ldr	r3, [pc, #236]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e067      	b.n	8009fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f06:	4b37      	ldr	r3, [pc, #220]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f023 0203 	bic.w	r2, r3, #3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	4934      	ldr	r1, [pc, #208]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f14:	4313      	orrs	r3, r2
 8009f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009f18:	f7fc f930 	bl	800617c <HAL_GetTick>
 8009f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f1e:	e00a      	b.n	8009f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f20:	f7fc f92c 	bl	800617c <HAL_GetTick>
 8009f24:	4602      	mov	r2, r0
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d901      	bls.n	8009f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e04f      	b.n	8009fd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f36:	4b2b      	ldr	r3, [pc, #172]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f003 020c 	and.w	r2, r3, #12
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d1eb      	bne.n	8009f20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f48:	4b25      	ldr	r3, [pc, #148]	; (8009fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0307 	and.w	r3, r3, #7
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d20c      	bcs.n	8009f70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f56:	4b22      	ldr	r3, [pc, #136]	; (8009fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f58:	683a      	ldr	r2, [r7, #0]
 8009f5a:	b2d2      	uxtb	r2, r2
 8009f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f5e:	4b20      	ldr	r3, [pc, #128]	; (8009fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 0307 	and.w	r3, r3, #7
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d001      	beq.n	8009f70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e032      	b.n	8009fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 0304 	and.w	r3, r3, #4
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d008      	beq.n	8009f8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f7c:	4b19      	ldr	r3, [pc, #100]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	4916      	ldr	r1, [pc, #88]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0308 	and.w	r3, r3, #8
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d009      	beq.n	8009fae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f9a:	4b12      	ldr	r3, [pc, #72]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	00db      	lsls	r3, r3, #3
 8009fa8:	490e      	ldr	r1, [pc, #56]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009fae:	f000 f821 	bl	8009ff4 <HAL_RCC_GetSysClockFreq>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	091b      	lsrs	r3, r3, #4
 8009fba:	f003 030f 	and.w	r3, r3, #15
 8009fbe:	490a      	ldr	r1, [pc, #40]	; (8009fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8009fc0:	5ccb      	ldrb	r3, [r1, r3]
 8009fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fc6:	4a09      	ldr	r2, [pc, #36]	; (8009fec <HAL_RCC_ClockConfig+0x1c4>)
 8009fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009fca:	4b09      	ldr	r3, [pc, #36]	; (8009ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fc f890 	bl	80060f4 <HAL_InitTick>

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	40023c00 	.word	0x40023c00
 8009fe4:	40023800 	.word	0x40023800
 8009fe8:	08018b18 	.word	0x08018b18
 8009fec:	20000004 	.word	0x20000004
 8009ff0:	20000008 	.word	0x20000008

08009ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ff4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009ff8:	b084      	sub	sp, #16
 8009ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	607b      	str	r3, [r7, #4]
 800a000:	2300      	movs	r3, #0
 800a002:	60fb      	str	r3, [r7, #12]
 800a004:	2300      	movs	r3, #0
 800a006:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a008:	2300      	movs	r3, #0
 800a00a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a00c:	4b67      	ldr	r3, [pc, #412]	; (800a1ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	f003 030c 	and.w	r3, r3, #12
 800a014:	2b08      	cmp	r3, #8
 800a016:	d00d      	beq.n	800a034 <HAL_RCC_GetSysClockFreq+0x40>
 800a018:	2b08      	cmp	r3, #8
 800a01a:	f200 80bd 	bhi.w	800a198 <HAL_RCC_GetSysClockFreq+0x1a4>
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <HAL_RCC_GetSysClockFreq+0x34>
 800a022:	2b04      	cmp	r3, #4
 800a024:	d003      	beq.n	800a02e <HAL_RCC_GetSysClockFreq+0x3a>
 800a026:	e0b7      	b.n	800a198 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a028:	4b61      	ldr	r3, [pc, #388]	; (800a1b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a02a:	60bb      	str	r3, [r7, #8]
       break;
 800a02c:	e0b7      	b.n	800a19e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a02e:	4b60      	ldr	r3, [pc, #384]	; (800a1b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a030:	60bb      	str	r3, [r7, #8]
      break;
 800a032:	e0b4      	b.n	800a19e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a034:	4b5d      	ldr	r3, [pc, #372]	; (800a1ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a03c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a03e:	4b5b      	ldr	r3, [pc, #364]	; (800a1ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a046:	2b00      	cmp	r3, #0
 800a048:	d04d      	beq.n	800a0e6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a04a:	4b58      	ldr	r3, [pc, #352]	; (800a1ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	099b      	lsrs	r3, r3, #6
 800a050:	461a      	mov	r2, r3
 800a052:	f04f 0300 	mov.w	r3, #0
 800a056:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a05a:	f04f 0100 	mov.w	r1, #0
 800a05e:	ea02 0800 	and.w	r8, r2, r0
 800a062:	ea03 0901 	and.w	r9, r3, r1
 800a066:	4640      	mov	r0, r8
 800a068:	4649      	mov	r1, r9
 800a06a:	f04f 0200 	mov.w	r2, #0
 800a06e:	f04f 0300 	mov.w	r3, #0
 800a072:	014b      	lsls	r3, r1, #5
 800a074:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a078:	0142      	lsls	r2, r0, #5
 800a07a:	4610      	mov	r0, r2
 800a07c:	4619      	mov	r1, r3
 800a07e:	ebb0 0008 	subs.w	r0, r0, r8
 800a082:	eb61 0109 	sbc.w	r1, r1, r9
 800a086:	f04f 0200 	mov.w	r2, #0
 800a08a:	f04f 0300 	mov.w	r3, #0
 800a08e:	018b      	lsls	r3, r1, #6
 800a090:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a094:	0182      	lsls	r2, r0, #6
 800a096:	1a12      	subs	r2, r2, r0
 800a098:	eb63 0301 	sbc.w	r3, r3, r1
 800a09c:	f04f 0000 	mov.w	r0, #0
 800a0a0:	f04f 0100 	mov.w	r1, #0
 800a0a4:	00d9      	lsls	r1, r3, #3
 800a0a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a0aa:	00d0      	lsls	r0, r2, #3
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	eb12 0208 	adds.w	r2, r2, r8
 800a0b4:	eb43 0309 	adc.w	r3, r3, r9
 800a0b8:	f04f 0000 	mov.w	r0, #0
 800a0bc:	f04f 0100 	mov.w	r1, #0
 800a0c0:	0299      	lsls	r1, r3, #10
 800a0c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a0c6:	0290      	lsls	r0, r2, #10
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4610      	mov	r0, r2
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	f04f 0300 	mov.w	r3, #0
 800a0d8:	f7f6 fdd6 	bl	8000c88 <__aeabi_uldivmod>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]
 800a0e4:	e04a      	b.n	800a17c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0e6:	4b31      	ldr	r3, [pc, #196]	; (800a1ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	099b      	lsrs	r3, r3, #6
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	f04f 0300 	mov.w	r3, #0
 800a0f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a0f6:	f04f 0100 	mov.w	r1, #0
 800a0fa:	ea02 0400 	and.w	r4, r2, r0
 800a0fe:	ea03 0501 	and.w	r5, r3, r1
 800a102:	4620      	mov	r0, r4
 800a104:	4629      	mov	r1, r5
 800a106:	f04f 0200 	mov.w	r2, #0
 800a10a:	f04f 0300 	mov.w	r3, #0
 800a10e:	014b      	lsls	r3, r1, #5
 800a110:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a114:	0142      	lsls	r2, r0, #5
 800a116:	4610      	mov	r0, r2
 800a118:	4619      	mov	r1, r3
 800a11a:	1b00      	subs	r0, r0, r4
 800a11c:	eb61 0105 	sbc.w	r1, r1, r5
 800a120:	f04f 0200 	mov.w	r2, #0
 800a124:	f04f 0300 	mov.w	r3, #0
 800a128:	018b      	lsls	r3, r1, #6
 800a12a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a12e:	0182      	lsls	r2, r0, #6
 800a130:	1a12      	subs	r2, r2, r0
 800a132:	eb63 0301 	sbc.w	r3, r3, r1
 800a136:	f04f 0000 	mov.w	r0, #0
 800a13a:	f04f 0100 	mov.w	r1, #0
 800a13e:	00d9      	lsls	r1, r3, #3
 800a140:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a144:	00d0      	lsls	r0, r2, #3
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	1912      	adds	r2, r2, r4
 800a14c:	eb45 0303 	adc.w	r3, r5, r3
 800a150:	f04f 0000 	mov.w	r0, #0
 800a154:	f04f 0100 	mov.w	r1, #0
 800a158:	0299      	lsls	r1, r3, #10
 800a15a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a15e:	0290      	lsls	r0, r2, #10
 800a160:	4602      	mov	r2, r0
 800a162:	460b      	mov	r3, r1
 800a164:	4610      	mov	r0, r2
 800a166:	4619      	mov	r1, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	461a      	mov	r2, r3
 800a16c:	f04f 0300 	mov.w	r3, #0
 800a170:	f7f6 fd8a 	bl	8000c88 <__aeabi_uldivmod>
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	4613      	mov	r3, r2
 800a17a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a17c:	4b0b      	ldr	r3, [pc, #44]	; (800a1ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	0c1b      	lsrs	r3, r3, #16
 800a182:	f003 0303 	and.w	r3, r3, #3
 800a186:	3301      	adds	r3, #1
 800a188:	005b      	lsls	r3, r3, #1
 800a18a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	fbb2 f3f3 	udiv	r3, r2, r3
 800a194:	60bb      	str	r3, [r7, #8]
      break;
 800a196:	e002      	b.n	800a19e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a198:	4b05      	ldr	r3, [pc, #20]	; (800a1b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a19a:	60bb      	str	r3, [r7, #8]
      break;
 800a19c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a19e:	68bb      	ldr	r3, [r7, #8]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a1aa:	bf00      	nop
 800a1ac:	40023800 	.word	0x40023800
 800a1b0:	00f42400 	.word	0x00f42400

0800a1b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1b8:	4b03      	ldr	r3, [pc, #12]	; (800a1c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	20000004 	.word	0x20000004

0800a1cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a1d0:	f7ff fff0 	bl	800a1b4 <HAL_RCC_GetHCLKFreq>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	4b05      	ldr	r3, [pc, #20]	; (800a1ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	0a9b      	lsrs	r3, r3, #10
 800a1dc:	f003 0307 	and.w	r3, r3, #7
 800a1e0:	4903      	ldr	r1, [pc, #12]	; (800a1f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1e2:	5ccb      	ldrb	r3, [r1, r3]
 800a1e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	40023800 	.word	0x40023800
 800a1f0:	08018b28 	.word	0x08018b28

0800a1f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a1f8:	f7ff ffdc 	bl	800a1b4 <HAL_RCC_GetHCLKFreq>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	4b05      	ldr	r3, [pc, #20]	; (800a214 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	0b5b      	lsrs	r3, r3, #13
 800a204:	f003 0307 	and.w	r3, r3, #7
 800a208:	4903      	ldr	r1, [pc, #12]	; (800a218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a20a:	5ccb      	ldrb	r3, [r1, r3]
 800a20c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a210:	4618      	mov	r0, r3
 800a212:	bd80      	pop	{r7, pc}
 800a214:	40023800 	.word	0x40023800
 800a218:	08018b28 	.word	0x08018b28

0800a21c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d101      	bne.n	800a22e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	e07b      	b.n	800a326 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a232:	2b00      	cmp	r3, #0
 800a234:	d108      	bne.n	800a248 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a23e:	d009      	beq.n	800a254 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	61da      	str	r2, [r3, #28]
 800a246:	e005      	b.n	800a254 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b00      	cmp	r3, #0
 800a264:	d106      	bne.n	800a274 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7f8 ff76 	bl	8003160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2202      	movs	r2, #2
 800a278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a28a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a29c:	431a      	orrs	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2a6:	431a      	orrs	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	f003 0302 	and.w	r3, r3, #2
 800a2b0:	431a      	orrs	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2c4:	431a      	orrs	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	69db      	ldr	r3, [r3, #28]
 800a2ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2ce:	431a      	orrs	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a1b      	ldr	r3, [r3, #32]
 800a2d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2d8:	ea42 0103 	orr.w	r1, r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	0c1b      	lsrs	r3, r3, #16
 800a2f2:	f003 0104 	and.w	r1, r3, #4
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fa:	f003 0210 	and.w	r2, r3, #16
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	69da      	ldr	r2, [r3, #28]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a314:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b08c      	sub	sp, #48	; 0x30
 800a332:	af00      	add	r7, sp, #0
 800a334:	60f8      	str	r0, [r7, #12]
 800a336:	60b9      	str	r1, [r7, #8]
 800a338:	607a      	str	r2, [r7, #4]
 800a33a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a33c:	2301      	movs	r3, #1
 800a33e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d101      	bne.n	800a354 <HAL_SPI_TransmitReceive+0x26>
 800a350:	2302      	movs	r3, #2
 800a352:	e18a      	b.n	800a66a <HAL_SPI_TransmitReceive+0x33c>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a35c:	f7fb ff0e 	bl	800617c <HAL_GetTick>
 800a360:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a372:	887b      	ldrh	r3, [r7, #2]
 800a374:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d00f      	beq.n	800a39e <HAL_SPI_TransmitReceive+0x70>
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a384:	d107      	bne.n	800a396 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d103      	bne.n	800a396 <HAL_SPI_TransmitReceive+0x68>
 800a38e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a392:	2b04      	cmp	r3, #4
 800a394:	d003      	beq.n	800a39e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a396:	2302      	movs	r3, #2
 800a398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a39c:	e15b      	b.n	800a656 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d005      	beq.n	800a3b0 <HAL_SPI_TransmitReceive+0x82>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d002      	beq.n	800a3b0 <HAL_SPI_TransmitReceive+0x82>
 800a3aa:	887b      	ldrh	r3, [r7, #2]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d103      	bne.n	800a3b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a3b6:	e14e      	b.n	800a656 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	2b04      	cmp	r3, #4
 800a3c2:	d003      	beq.n	800a3cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2205      	movs	r2, #5
 800a3c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	887a      	ldrh	r2, [r7, #2]
 800a3dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	887a      	ldrh	r2, [r7, #2]
 800a3e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	68ba      	ldr	r2, [r7, #8]
 800a3e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	887a      	ldrh	r2, [r7, #2]
 800a3ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	887a      	ldrh	r2, [r7, #2]
 800a3f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a40c:	2b40      	cmp	r3, #64	; 0x40
 800a40e:	d007      	beq.n	800a420 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a41e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a428:	d178      	bne.n	800a51c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d002      	beq.n	800a438 <HAL_SPI_TransmitReceive+0x10a>
 800a432:	8b7b      	ldrh	r3, [r7, #26]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d166      	bne.n	800a506 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43c:	881a      	ldrh	r2, [r3, #0]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a448:	1c9a      	adds	r2, r3, #2
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a452:	b29b      	uxth	r3, r3
 800a454:	3b01      	subs	r3, #1
 800a456:	b29a      	uxth	r2, r3
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a45c:	e053      	b.n	800a506 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	f003 0302 	and.w	r3, r3, #2
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d11b      	bne.n	800a4a4 <HAL_SPI_TransmitReceive+0x176>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a470:	b29b      	uxth	r3, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d016      	beq.n	800a4a4 <HAL_SPI_TransmitReceive+0x176>
 800a476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d113      	bne.n	800a4a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a480:	881a      	ldrh	r2, [r3, #0]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48c:	1c9a      	adds	r2, r3, #2
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a496:	b29b      	uxth	r3, r3
 800a498:	3b01      	subs	r3, #1
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f003 0301 	and.w	r3, r3, #1
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d119      	bne.n	800a4e6 <HAL_SPI_TransmitReceive+0x1b8>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d014      	beq.n	800a4e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68da      	ldr	r2, [r3, #12]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c6:	b292      	uxth	r2, r2
 800a4c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ce:	1c9a      	adds	r2, r3, #2
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a4e6:	f7fb fe49 	bl	800617c <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d807      	bhi.n	800a506 <HAL_SPI_TransmitReceive+0x1d8>
 800a4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4fc:	d003      	beq.n	800a506 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a4fe:	2303      	movs	r3, #3
 800a500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a504:	e0a7      	b.n	800a656 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1a6      	bne.n	800a45e <HAL_SPI_TransmitReceive+0x130>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a514:	b29b      	uxth	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1a1      	bne.n	800a45e <HAL_SPI_TransmitReceive+0x130>
 800a51a:	e07c      	b.n	800a616 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <HAL_SPI_TransmitReceive+0x1fc>
 800a524:	8b7b      	ldrh	r3, [r7, #26]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d16b      	bne.n	800a602 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	330c      	adds	r3, #12
 800a534:	7812      	ldrb	r2, [r2, #0]
 800a536:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53c:	1c5a      	adds	r2, r3, #1
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a546:	b29b      	uxth	r3, r3
 800a548:	3b01      	subs	r3, #1
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a550:	e057      	b.n	800a602 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	f003 0302 	and.w	r3, r3, #2
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d11c      	bne.n	800a59a <HAL_SPI_TransmitReceive+0x26c>
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a564:	b29b      	uxth	r3, r3
 800a566:	2b00      	cmp	r3, #0
 800a568:	d017      	beq.n	800a59a <HAL_SPI_TransmitReceive+0x26c>
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d114      	bne.n	800a59a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	330c      	adds	r3, #12
 800a57a:	7812      	ldrb	r2, [r2, #0]
 800a57c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	3b01      	subs	r3, #1
 800a590:	b29a      	uxth	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a596:	2300      	movs	r3, #0
 800a598:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	f003 0301 	and.w	r3, r3, #1
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d119      	bne.n	800a5dc <HAL_SPI_TransmitReceive+0x2ae>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d014      	beq.n	800a5dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68da      	ldr	r2, [r3, #12]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5bc:	b2d2      	uxtb	r2, r2
 800a5be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c4:	1c5a      	adds	r2, r3, #1
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a5dc:	f7fb fdce 	bl	800617c <HAL_GetTick>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d803      	bhi.n	800a5f4 <HAL_SPI_TransmitReceive+0x2c6>
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f2:	d102      	bne.n	800a5fa <HAL_SPI_TransmitReceive+0x2cc>
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d103      	bne.n	800a602 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a5fa:	2303      	movs	r3, #3
 800a5fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a600:	e029      	b.n	800a656 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a606:	b29b      	uxth	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1a2      	bne.n	800a552 <HAL_SPI_TransmitReceive+0x224>
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a610:	b29b      	uxth	r3, r3
 800a612:	2b00      	cmp	r3, #0
 800a614:	d19d      	bne.n	800a552 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a618:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 f8b2 	bl	800a784 <SPI_EndRxTxTransaction>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d006      	beq.n	800a634 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2220      	movs	r2, #32
 800a630:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a632:	e010      	b.n	800a656 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10b      	bne.n	800a654 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a63c:	2300      	movs	r3, #0
 800a63e:	617b      	str	r3, [r7, #20]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	617b      	str	r3, [r7, #20]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	617b      	str	r3, [r7, #20]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	e000      	b.n	800a656 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a654:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a666:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3730      	adds	r7, #48	; 0x30
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	603b      	str	r3, [r7, #0]
 800a680:	4613      	mov	r3, r2
 800a682:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a684:	f7fb fd7a 	bl	800617c <HAL_GetTick>
 800a688:	4602      	mov	r2, r0
 800a68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68c:	1a9b      	subs	r3, r3, r2
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	4413      	add	r3, r2
 800a692:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a694:	f7fb fd72 	bl	800617c <HAL_GetTick>
 800a698:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a69a:	4b39      	ldr	r3, [pc, #228]	; (800a780 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	015b      	lsls	r3, r3, #5
 800a6a0:	0d1b      	lsrs	r3, r3, #20
 800a6a2:	69fa      	ldr	r2, [r7, #28]
 800a6a4:	fb02 f303 	mul.w	r3, r2, r3
 800a6a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a6aa:	e054      	b.n	800a756 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b2:	d050      	beq.n	800a756 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a6b4:	f7fb fd62 	bl	800617c <HAL_GetTick>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	69fa      	ldr	r2, [r7, #28]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d902      	bls.n	800a6ca <SPI_WaitFlagStateUntilTimeout+0x56>
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d13d      	bne.n	800a746 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a6d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6e2:	d111      	bne.n	800a708 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6ec:	d004      	beq.n	800a6f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6f6:	d107      	bne.n	800a708 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a706:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a70c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a710:	d10f      	bne.n	800a732 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a730:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2201      	movs	r2, #1
 800a736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a742:	2303      	movs	r3, #3
 800a744:	e017      	b.n	800a776 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d101      	bne.n	800a750 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a74c:	2300      	movs	r3, #0
 800a74e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	3b01      	subs	r3, #1
 800a754:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	689a      	ldr	r2, [r3, #8]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	4013      	ands	r3, r2
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	429a      	cmp	r2, r3
 800a764:	bf0c      	ite	eq
 800a766:	2301      	moveq	r3, #1
 800a768:	2300      	movne	r3, #0
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	461a      	mov	r2, r3
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	429a      	cmp	r2, r3
 800a772:	d19b      	bne.n	800a6ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3720      	adds	r7, #32
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	20000004 	.word	0x20000004

0800a784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b088      	sub	sp, #32
 800a788:	af02      	add	r7, sp, #8
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a790:	4b1b      	ldr	r3, [pc, #108]	; (800a800 <SPI_EndRxTxTransaction+0x7c>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a1b      	ldr	r2, [pc, #108]	; (800a804 <SPI_EndRxTxTransaction+0x80>)
 800a796:	fba2 2303 	umull	r2, r3, r2, r3
 800a79a:	0d5b      	lsrs	r3, r3, #21
 800a79c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7a0:	fb02 f303 	mul.w	r3, r2, r3
 800a7a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7ae:	d112      	bne.n	800a7d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2180      	movs	r1, #128	; 0x80
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	f7ff ff5a 	bl	800a674 <SPI_WaitFlagStateUntilTimeout>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d016      	beq.n	800a7f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7ca:	f043 0220 	orr.w	r2, r3, #32
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e00f      	b.n	800a7f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00a      	beq.n	800a7f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ec:	2b80      	cmp	r3, #128	; 0x80
 800a7ee:	d0f2      	beq.n	800a7d6 <SPI_EndRxTxTransaction+0x52>
 800a7f0:	e000      	b.n	800a7f4 <SPI_EndRxTxTransaction+0x70>
        break;
 800a7f2:	bf00      	nop
  }

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3718      	adds	r7, #24
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	20000004 	.word	0x20000004
 800a804:	165e9f81 	.word	0x165e9f81

0800a808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e041      	b.n	800a89e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b00      	cmp	r3, #0
 800a824:	d106      	bne.n	800a834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7f8 ffdc 	bl	80037ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2202      	movs	r2, #2
 800a838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3304      	adds	r3, #4
 800a844:	4619      	mov	r1, r3
 800a846:	4610      	mov	r0, r2
 800a848:	f000 fac6 	bl	800add8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e041      	b.n	800a93c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d106      	bne.n	800a8d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7f8 ff57 	bl	8003780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2202      	movs	r2, #2
 800a8d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	f000 fa77 	bl	800add8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2201      	movs	r2, #1
 800a90e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2201      	movs	r2, #1
 800a926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d109      	bne.n	800a968 <HAL_TIM_PWM_Start+0x24>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	bf14      	ite	ne
 800a960:	2301      	movne	r3, #1
 800a962:	2300      	moveq	r3, #0
 800a964:	b2db      	uxtb	r3, r3
 800a966:	e022      	b.n	800a9ae <HAL_TIM_PWM_Start+0x6a>
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2b04      	cmp	r3, #4
 800a96c:	d109      	bne.n	800a982 <HAL_TIM_PWM_Start+0x3e>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b01      	cmp	r3, #1
 800a978:	bf14      	ite	ne
 800a97a:	2301      	movne	r3, #1
 800a97c:	2300      	moveq	r3, #0
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	e015      	b.n	800a9ae <HAL_TIM_PWM_Start+0x6a>
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	2b08      	cmp	r3, #8
 800a986:	d109      	bne.n	800a99c <HAL_TIM_PWM_Start+0x58>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b01      	cmp	r3, #1
 800a992:	bf14      	ite	ne
 800a994:	2301      	movne	r3, #1
 800a996:	2300      	moveq	r3, #0
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	e008      	b.n	800a9ae <HAL_TIM_PWM_Start+0x6a>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	bf14      	ite	ne
 800a9a8:	2301      	movne	r3, #1
 800a9aa:	2300      	moveq	r3, #0
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e07c      	b.n	800aab0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d104      	bne.n	800a9c6 <HAL_TIM_PWM_Start+0x82>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9c4:	e013      	b.n	800a9ee <HAL_TIM_PWM_Start+0xaa>
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d104      	bne.n	800a9d6 <HAL_TIM_PWM_Start+0x92>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9d4:	e00b      	b.n	800a9ee <HAL_TIM_PWM_Start+0xaa>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d104      	bne.n	800a9e6 <HAL_TIM_PWM_Start+0xa2>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9e4:	e003      	b.n	800a9ee <HAL_TIM_PWM_Start+0xaa>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2202      	movs	r2, #2
 800a9ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	6839      	ldr	r1, [r7, #0]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fcd8 	bl	800b3ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a2d      	ldr	r2, [pc, #180]	; (800aab8 <HAL_TIM_PWM_Start+0x174>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d004      	beq.n	800aa10 <HAL_TIM_PWM_Start+0xcc>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a2c      	ldr	r2, [pc, #176]	; (800aabc <HAL_TIM_PWM_Start+0x178>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d101      	bne.n	800aa14 <HAL_TIM_PWM_Start+0xd0>
 800aa10:	2301      	movs	r3, #1
 800aa12:	e000      	b.n	800aa16 <HAL_TIM_PWM_Start+0xd2>
 800aa14:	2300      	movs	r3, #0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d007      	beq.n	800aa2a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a22      	ldr	r2, [pc, #136]	; (800aab8 <HAL_TIM_PWM_Start+0x174>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d022      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x136>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa3c:	d01d      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x136>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a1f      	ldr	r2, [pc, #124]	; (800aac0 <HAL_TIM_PWM_Start+0x17c>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d018      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x136>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a1d      	ldr	r2, [pc, #116]	; (800aac4 <HAL_TIM_PWM_Start+0x180>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d013      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x136>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a1c      	ldr	r2, [pc, #112]	; (800aac8 <HAL_TIM_PWM_Start+0x184>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d00e      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x136>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a16      	ldr	r2, [pc, #88]	; (800aabc <HAL_TIM_PWM_Start+0x178>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d009      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x136>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a18      	ldr	r2, [pc, #96]	; (800aacc <HAL_TIM_PWM_Start+0x188>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d004      	beq.n	800aa7a <HAL_TIM_PWM_Start+0x136>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a16      	ldr	r2, [pc, #88]	; (800aad0 <HAL_TIM_PWM_Start+0x18c>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d111      	bne.n	800aa9e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f003 0307 	and.w	r3, r3, #7
 800aa84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b06      	cmp	r3, #6
 800aa8a:	d010      	beq.n	800aaae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f042 0201 	orr.w	r2, r2, #1
 800aa9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa9c:	e007      	b.n	800aaae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f042 0201 	orr.w	r2, r2, #1
 800aaac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	40010000 	.word	0x40010000
 800aabc:	40010400 	.word	0x40010400
 800aac0:	40000400 	.word	0x40000400
 800aac4:	40000800 	.word	0x40000800
 800aac8:	40000c00 	.word	0x40000c00
 800aacc:	40014000 	.word	0x40014000
 800aad0:	40001800 	.word	0x40001800

0800aad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d101      	bne.n	800aaee <HAL_TIM_PWM_ConfigChannel+0x1a>
 800aaea:	2302      	movs	r3, #2
 800aaec:	e0ac      	b.n	800ac48 <HAL_TIM_PWM_ConfigChannel+0x174>
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b0c      	cmp	r3, #12
 800aafa:	f200 809f 	bhi.w	800ac3c <HAL_TIM_PWM_ConfigChannel+0x168>
 800aafe:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ab00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab04:	0800ab39 	.word	0x0800ab39
 800ab08:	0800ac3d 	.word	0x0800ac3d
 800ab0c:	0800ac3d 	.word	0x0800ac3d
 800ab10:	0800ac3d 	.word	0x0800ac3d
 800ab14:	0800ab79 	.word	0x0800ab79
 800ab18:	0800ac3d 	.word	0x0800ac3d
 800ab1c:	0800ac3d 	.word	0x0800ac3d
 800ab20:	0800ac3d 	.word	0x0800ac3d
 800ab24:	0800abbb 	.word	0x0800abbb
 800ab28:	0800ac3d 	.word	0x0800ac3d
 800ab2c:	0800ac3d 	.word	0x0800ac3d
 800ab30:	0800ac3d 	.word	0x0800ac3d
 800ab34:	0800abfb 	.word	0x0800abfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	68b9      	ldr	r1, [r7, #8]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 f9ea 	bl	800af18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	699a      	ldr	r2, [r3, #24]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f042 0208 	orr.w	r2, r2, #8
 800ab52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	699a      	ldr	r2, [r3, #24]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f022 0204 	bic.w	r2, r2, #4
 800ab62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6999      	ldr	r1, [r3, #24]
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	691a      	ldr	r2, [r3, #16]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	430a      	orrs	r2, r1
 800ab74:	619a      	str	r2, [r3, #24]
      break;
 800ab76:	e062      	b.n	800ac3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	68b9      	ldr	r1, [r7, #8]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 fa3a 	bl	800aff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	699a      	ldr	r2, [r3, #24]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	699a      	ldr	r2, [r3, #24]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6999      	ldr	r1, [r3, #24]
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	021a      	lsls	r2, r3, #8
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	430a      	orrs	r2, r1
 800abb6:	619a      	str	r2, [r3, #24]
      break;
 800abb8:	e041      	b.n	800ac3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68b9      	ldr	r1, [r7, #8]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 fa8f 	bl	800b0e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	69da      	ldr	r2, [r3, #28]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f042 0208 	orr.w	r2, r2, #8
 800abd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	69da      	ldr	r2, [r3, #28]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f022 0204 	bic.w	r2, r2, #4
 800abe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	69d9      	ldr	r1, [r3, #28]
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	691a      	ldr	r2, [r3, #16]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	430a      	orrs	r2, r1
 800abf6:	61da      	str	r2, [r3, #28]
      break;
 800abf8:	e021      	b.n	800ac3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	68b9      	ldr	r1, [r7, #8]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 fae3 	bl	800b1cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	69da      	ldr	r2, [r3, #28]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	69da      	ldr	r2, [r3, #28]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	69d9      	ldr	r1, [r3, #28]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	021a      	lsls	r2, r3, #8
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	430a      	orrs	r2, r1
 800ac38:	61da      	str	r2, [r3, #28]
      break;
 800ac3a:	e000      	b.n	800ac3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800ac3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d101      	bne.n	800ac68 <HAL_TIM_ConfigClockSource+0x18>
 800ac64:	2302      	movs	r3, #2
 800ac66:	e0b3      	b.n	800add0 <HAL_TIM_ConfigClockSource+0x180>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aca0:	d03e      	beq.n	800ad20 <HAL_TIM_ConfigClockSource+0xd0>
 800aca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aca6:	f200 8087 	bhi.w	800adb8 <HAL_TIM_ConfigClockSource+0x168>
 800acaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acae:	f000 8085 	beq.w	800adbc <HAL_TIM_ConfigClockSource+0x16c>
 800acb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acb6:	d87f      	bhi.n	800adb8 <HAL_TIM_ConfigClockSource+0x168>
 800acb8:	2b70      	cmp	r3, #112	; 0x70
 800acba:	d01a      	beq.n	800acf2 <HAL_TIM_ConfigClockSource+0xa2>
 800acbc:	2b70      	cmp	r3, #112	; 0x70
 800acbe:	d87b      	bhi.n	800adb8 <HAL_TIM_ConfigClockSource+0x168>
 800acc0:	2b60      	cmp	r3, #96	; 0x60
 800acc2:	d050      	beq.n	800ad66 <HAL_TIM_ConfigClockSource+0x116>
 800acc4:	2b60      	cmp	r3, #96	; 0x60
 800acc6:	d877      	bhi.n	800adb8 <HAL_TIM_ConfigClockSource+0x168>
 800acc8:	2b50      	cmp	r3, #80	; 0x50
 800acca:	d03c      	beq.n	800ad46 <HAL_TIM_ConfigClockSource+0xf6>
 800accc:	2b50      	cmp	r3, #80	; 0x50
 800acce:	d873      	bhi.n	800adb8 <HAL_TIM_ConfigClockSource+0x168>
 800acd0:	2b40      	cmp	r3, #64	; 0x40
 800acd2:	d058      	beq.n	800ad86 <HAL_TIM_ConfigClockSource+0x136>
 800acd4:	2b40      	cmp	r3, #64	; 0x40
 800acd6:	d86f      	bhi.n	800adb8 <HAL_TIM_ConfigClockSource+0x168>
 800acd8:	2b30      	cmp	r3, #48	; 0x30
 800acda:	d064      	beq.n	800ada6 <HAL_TIM_ConfigClockSource+0x156>
 800acdc:	2b30      	cmp	r3, #48	; 0x30
 800acde:	d86b      	bhi.n	800adb8 <HAL_TIM_ConfigClockSource+0x168>
 800ace0:	2b20      	cmp	r3, #32
 800ace2:	d060      	beq.n	800ada6 <HAL_TIM_ConfigClockSource+0x156>
 800ace4:	2b20      	cmp	r3, #32
 800ace6:	d867      	bhi.n	800adb8 <HAL_TIM_ConfigClockSource+0x168>
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d05c      	beq.n	800ada6 <HAL_TIM_ConfigClockSource+0x156>
 800acec:	2b10      	cmp	r3, #16
 800acee:	d05a      	beq.n	800ada6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800acf0:	e062      	b.n	800adb8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6818      	ldr	r0, [r3, #0]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	6899      	ldr	r1, [r3, #8]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	f000 fb33 	bl	800b36c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	609a      	str	r2, [r3, #8]
      break;
 800ad1e:	e04e      	b.n	800adbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	6899      	ldr	r1, [r3, #8]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	f000 fb1c 	bl	800b36c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	689a      	ldr	r2, [r3, #8]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad42:	609a      	str	r2, [r3, #8]
      break;
 800ad44:	e03b      	b.n	800adbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6818      	ldr	r0, [r3, #0]
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	6859      	ldr	r1, [r3, #4]
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	461a      	mov	r2, r3
 800ad54:	f000 fa90 	bl	800b278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2150      	movs	r1, #80	; 0x50
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 fae9 	bl	800b336 <TIM_ITRx_SetConfig>
      break;
 800ad64:	e02b      	b.n	800adbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6818      	ldr	r0, [r3, #0]
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	6859      	ldr	r1, [r3, #4]
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	461a      	mov	r2, r3
 800ad74:	f000 faaf 	bl	800b2d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2160      	movs	r1, #96	; 0x60
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 fad9 	bl	800b336 <TIM_ITRx_SetConfig>
      break;
 800ad84:	e01b      	b.n	800adbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6818      	ldr	r0, [r3, #0]
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	6859      	ldr	r1, [r3, #4]
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	461a      	mov	r2, r3
 800ad94:	f000 fa70 	bl	800b278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2140      	movs	r1, #64	; 0x40
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 fac9 	bl	800b336 <TIM_ITRx_SetConfig>
      break;
 800ada4:	e00b      	b.n	800adbe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4619      	mov	r1, r3
 800adb0:	4610      	mov	r0, r2
 800adb2:	f000 fac0 	bl	800b336 <TIM_ITRx_SetConfig>
        break;
 800adb6:	e002      	b.n	800adbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800adb8:	bf00      	nop
 800adba:	e000      	b.n	800adbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800adbc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800adce:	2300      	movs	r3, #0
}
 800add0:	4618      	mov	r0, r3
 800add2:	3710      	adds	r7, #16
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a40      	ldr	r2, [pc, #256]	; (800aeec <TIM_Base_SetConfig+0x114>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d013      	beq.n	800ae18 <TIM_Base_SetConfig+0x40>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adf6:	d00f      	beq.n	800ae18 <TIM_Base_SetConfig+0x40>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a3d      	ldr	r2, [pc, #244]	; (800aef0 <TIM_Base_SetConfig+0x118>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d00b      	beq.n	800ae18 <TIM_Base_SetConfig+0x40>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a3c      	ldr	r2, [pc, #240]	; (800aef4 <TIM_Base_SetConfig+0x11c>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d007      	beq.n	800ae18 <TIM_Base_SetConfig+0x40>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a3b      	ldr	r2, [pc, #236]	; (800aef8 <TIM_Base_SetConfig+0x120>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d003      	beq.n	800ae18 <TIM_Base_SetConfig+0x40>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a3a      	ldr	r2, [pc, #232]	; (800aefc <TIM_Base_SetConfig+0x124>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d108      	bne.n	800ae2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a2f      	ldr	r2, [pc, #188]	; (800aeec <TIM_Base_SetConfig+0x114>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d02b      	beq.n	800ae8a <TIM_Base_SetConfig+0xb2>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae38:	d027      	beq.n	800ae8a <TIM_Base_SetConfig+0xb2>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4a2c      	ldr	r2, [pc, #176]	; (800aef0 <TIM_Base_SetConfig+0x118>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d023      	beq.n	800ae8a <TIM_Base_SetConfig+0xb2>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4a2b      	ldr	r2, [pc, #172]	; (800aef4 <TIM_Base_SetConfig+0x11c>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d01f      	beq.n	800ae8a <TIM_Base_SetConfig+0xb2>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4a2a      	ldr	r2, [pc, #168]	; (800aef8 <TIM_Base_SetConfig+0x120>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d01b      	beq.n	800ae8a <TIM_Base_SetConfig+0xb2>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a29      	ldr	r2, [pc, #164]	; (800aefc <TIM_Base_SetConfig+0x124>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d017      	beq.n	800ae8a <TIM_Base_SetConfig+0xb2>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a28      	ldr	r2, [pc, #160]	; (800af00 <TIM_Base_SetConfig+0x128>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d013      	beq.n	800ae8a <TIM_Base_SetConfig+0xb2>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a27      	ldr	r2, [pc, #156]	; (800af04 <TIM_Base_SetConfig+0x12c>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d00f      	beq.n	800ae8a <TIM_Base_SetConfig+0xb2>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a26      	ldr	r2, [pc, #152]	; (800af08 <TIM_Base_SetConfig+0x130>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d00b      	beq.n	800ae8a <TIM_Base_SetConfig+0xb2>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a25      	ldr	r2, [pc, #148]	; (800af0c <TIM_Base_SetConfig+0x134>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d007      	beq.n	800ae8a <TIM_Base_SetConfig+0xb2>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a24      	ldr	r2, [pc, #144]	; (800af10 <TIM_Base_SetConfig+0x138>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d003      	beq.n	800ae8a <TIM_Base_SetConfig+0xb2>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a23      	ldr	r2, [pc, #140]	; (800af14 <TIM_Base_SetConfig+0x13c>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d108      	bne.n	800ae9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	695b      	ldr	r3, [r3, #20]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	689a      	ldr	r2, [r3, #8]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	681a      	ldr	r2, [r3, #0]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a0a      	ldr	r2, [pc, #40]	; (800aeec <TIM_Base_SetConfig+0x114>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d003      	beq.n	800aed0 <TIM_Base_SetConfig+0xf8>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a0c      	ldr	r2, [pc, #48]	; (800aefc <TIM_Base_SetConfig+0x124>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d103      	bne.n	800aed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	691a      	ldr	r2, [r3, #16]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	615a      	str	r2, [r3, #20]
}
 800aede:	bf00      	nop
 800aee0:	3714      	adds	r7, #20
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	40010000 	.word	0x40010000
 800aef0:	40000400 	.word	0x40000400
 800aef4:	40000800 	.word	0x40000800
 800aef8:	40000c00 	.word	0x40000c00
 800aefc:	40010400 	.word	0x40010400
 800af00:	40014000 	.word	0x40014000
 800af04:	40014400 	.word	0x40014400
 800af08:	40014800 	.word	0x40014800
 800af0c:	40001800 	.word	0x40001800
 800af10:	40001c00 	.word	0x40001c00
 800af14:	40002000 	.word	0x40002000

0800af18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af18:	b480      	push	{r7}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	f023 0201 	bic.w	r2, r3, #1
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a1b      	ldr	r3, [r3, #32]
 800af32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f023 0303 	bic.w	r3, r3, #3
 800af4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	4313      	orrs	r3, r2
 800af58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	f023 0302 	bic.w	r3, r3, #2
 800af60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	697a      	ldr	r2, [r7, #20]
 800af68:	4313      	orrs	r3, r2
 800af6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a20      	ldr	r2, [pc, #128]	; (800aff0 <TIM_OC1_SetConfig+0xd8>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d003      	beq.n	800af7c <TIM_OC1_SetConfig+0x64>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a1f      	ldr	r2, [pc, #124]	; (800aff4 <TIM_OC1_SetConfig+0xdc>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d10c      	bne.n	800af96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	f023 0308 	bic.w	r3, r3, #8
 800af82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f023 0304 	bic.w	r3, r3, #4
 800af94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a15      	ldr	r2, [pc, #84]	; (800aff0 <TIM_OC1_SetConfig+0xd8>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d003      	beq.n	800afa6 <TIM_OC1_SetConfig+0x8e>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a14      	ldr	r2, [pc, #80]	; (800aff4 <TIM_OC1_SetConfig+0xdc>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d111      	bne.n	800afca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	699b      	ldr	r3, [r3, #24]
 800afc4:	693a      	ldr	r2, [r7, #16]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	697a      	ldr	r2, [r7, #20]
 800afe2:	621a      	str	r2, [r3, #32]
}
 800afe4:	bf00      	nop
 800afe6:	371c      	adds	r7, #28
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr
 800aff0:	40010000 	.word	0x40010000
 800aff4:	40010400 	.word	0x40010400

0800aff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aff8:	b480      	push	{r7}
 800affa:	b087      	sub	sp, #28
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	f023 0210 	bic.w	r2, r3, #16
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b02e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	021b      	lsls	r3, r3, #8
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	4313      	orrs	r3, r2
 800b03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	f023 0320 	bic.w	r3, r3, #32
 800b042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	011b      	lsls	r3, r3, #4
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a22      	ldr	r2, [pc, #136]	; (800b0dc <TIM_OC2_SetConfig+0xe4>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d003      	beq.n	800b060 <TIM_OC2_SetConfig+0x68>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a21      	ldr	r2, [pc, #132]	; (800b0e0 <TIM_OC2_SetConfig+0xe8>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d10d      	bne.n	800b07c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	011b      	lsls	r3, r3, #4
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	4313      	orrs	r3, r2
 800b072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b07a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a17      	ldr	r2, [pc, #92]	; (800b0dc <TIM_OC2_SetConfig+0xe4>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d003      	beq.n	800b08c <TIM_OC2_SetConfig+0x94>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	4a16      	ldr	r2, [pc, #88]	; (800b0e0 <TIM_OC2_SetConfig+0xe8>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	d113      	bne.n	800b0b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b09a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	695b      	ldr	r3, [r3, #20]
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	693a      	ldr	r2, [r7, #16]
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	621a      	str	r2, [r3, #32]
}
 800b0ce:	bf00      	nop
 800b0d0:	371c      	adds	r7, #28
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	40010000 	.word	0x40010000
 800b0e0:	40010400 	.word	0x40010400

0800b0e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b087      	sub	sp, #28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a1b      	ldr	r3, [r3, #32]
 800b0f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a1b      	ldr	r3, [r3, #32]
 800b0fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	69db      	ldr	r3, [r3, #28]
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f023 0303 	bic.w	r3, r3, #3
 800b11a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	4313      	orrs	r3, r2
 800b124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b12c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	021b      	lsls	r3, r3, #8
 800b134:	697a      	ldr	r2, [r7, #20]
 800b136:	4313      	orrs	r3, r2
 800b138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a21      	ldr	r2, [pc, #132]	; (800b1c4 <TIM_OC3_SetConfig+0xe0>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d003      	beq.n	800b14a <TIM_OC3_SetConfig+0x66>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a20      	ldr	r2, [pc, #128]	; (800b1c8 <TIM_OC3_SetConfig+0xe4>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d10d      	bne.n	800b166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	021b      	lsls	r3, r3, #8
 800b158:	697a      	ldr	r2, [r7, #20]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a16      	ldr	r2, [pc, #88]	; (800b1c4 <TIM_OC3_SetConfig+0xe0>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d003      	beq.n	800b176 <TIM_OC3_SetConfig+0x92>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a15      	ldr	r2, [pc, #84]	; (800b1c8 <TIM_OC3_SetConfig+0xe4>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d113      	bne.n	800b19e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b17c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	695b      	ldr	r3, [r3, #20]
 800b18a:	011b      	lsls	r3, r3, #4
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	4313      	orrs	r3, r2
 800b190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	011b      	lsls	r3, r3, #4
 800b198:	693a      	ldr	r2, [r7, #16]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	685a      	ldr	r2, [r3, #4]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	621a      	str	r2, [r3, #32]
}
 800b1b8:	bf00      	nop
 800b1ba:	371c      	adds	r7, #28
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr
 800b1c4:	40010000 	.word	0x40010000
 800b1c8:	40010400 	.word	0x40010400

0800b1cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	69db      	ldr	r3, [r3, #28]
 800b1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	021b      	lsls	r3, r3, #8
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	031b      	lsls	r3, r3, #12
 800b21e:	693a      	ldr	r2, [r7, #16]
 800b220:	4313      	orrs	r3, r2
 800b222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a12      	ldr	r2, [pc, #72]	; (800b270 <TIM_OC4_SetConfig+0xa4>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d003      	beq.n	800b234 <TIM_OC4_SetConfig+0x68>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a11      	ldr	r2, [pc, #68]	; (800b274 <TIM_OC4_SetConfig+0xa8>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d109      	bne.n	800b248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b23a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	695b      	ldr	r3, [r3, #20]
 800b240:	019b      	lsls	r3, r3, #6
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	4313      	orrs	r3, r2
 800b246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	685a      	ldr	r2, [r3, #4]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	621a      	str	r2, [r3, #32]
}
 800b262:	bf00      	nop
 800b264:	371c      	adds	r7, #28
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	40010000 	.word	0x40010000
 800b274:	40010400 	.word	0x40010400

0800b278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b278:	b480      	push	{r7}
 800b27a:	b087      	sub	sp, #28
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6a1b      	ldr	r3, [r3, #32]
 800b288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	f023 0201 	bic.w	r2, r3, #1
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	011b      	lsls	r3, r3, #4
 800b2a8:	693a      	ldr	r2, [r7, #16]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f023 030a 	bic.w	r3, r3, #10
 800b2b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	697a      	ldr	r2, [r7, #20]
 800b2c8:	621a      	str	r2, [r3, #32]
}
 800b2ca:	bf00      	nop
 800b2cc:	371c      	adds	r7, #28
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b087      	sub	sp, #28
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	60f8      	str	r0, [r7, #12]
 800b2de:	60b9      	str	r1, [r7, #8]
 800b2e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6a1b      	ldr	r3, [r3, #32]
 800b2e6:	f023 0210 	bic.w	r2, r3, #16
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6a1b      	ldr	r3, [r3, #32]
 800b2f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	031b      	lsls	r3, r3, #12
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	4313      	orrs	r3, r2
 800b30a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	011b      	lsls	r3, r3, #4
 800b318:	693a      	ldr	r2, [r7, #16]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	697a      	ldr	r2, [r7, #20]
 800b322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	693a      	ldr	r2, [r7, #16]
 800b328:	621a      	str	r2, [r3, #32]
}
 800b32a:	bf00      	nop
 800b32c:	371c      	adds	r7, #28
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b336:	b480      	push	{r7}
 800b338:	b085      	sub	sp, #20
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b34c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b34e:	683a      	ldr	r2, [r7, #0]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	4313      	orrs	r3, r2
 800b354:	f043 0307 	orr.w	r3, r3, #7
 800b358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	609a      	str	r2, [r3, #8]
}
 800b360:	bf00      	nop
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b087      	sub	sp, #28
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
 800b378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	021a      	lsls	r2, r3, #8
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	431a      	orrs	r2, r3
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	4313      	orrs	r3, r2
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	4313      	orrs	r3, r2
 800b398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	609a      	str	r2, [r3, #8]
}
 800b3a0:	bf00      	nop
 800b3a2:	371c      	adds	r7, #28
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f003 031f 	and.w	r3, r3, #31
 800b3be:	2201      	movs	r2, #1
 800b3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6a1a      	ldr	r2, [r3, #32]
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	43db      	mvns	r3, r3
 800b3ce:	401a      	ands	r2, r3
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6a1a      	ldr	r2, [r3, #32]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	f003 031f 	and.w	r3, r3, #31
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	621a      	str	r2, [r3, #32]
}
 800b3ea:	bf00      	nop
 800b3ec:	371c      	adds	r7, #28
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
	...

0800b3f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d101      	bne.n	800b410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b40c:	2302      	movs	r3, #2
 800b40e:	e05a      	b.n	800b4c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2201      	movs	r2, #1
 800b414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2202      	movs	r2, #2
 800b41c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	4313      	orrs	r3, r2
 800b440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a21      	ldr	r2, [pc, #132]	; (800b4d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d022      	beq.n	800b49a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b45c:	d01d      	beq.n	800b49a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a1d      	ldr	r2, [pc, #116]	; (800b4d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d018      	beq.n	800b49a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a1b      	ldr	r2, [pc, #108]	; (800b4dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d013      	beq.n	800b49a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a1a      	ldr	r2, [pc, #104]	; (800b4e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d00e      	beq.n	800b49a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a18      	ldr	r2, [pc, #96]	; (800b4e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d009      	beq.n	800b49a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a17      	ldr	r2, [pc, #92]	; (800b4e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d004      	beq.n	800b49a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a15      	ldr	r2, [pc, #84]	; (800b4ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d10c      	bne.n	800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3714      	adds	r7, #20
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	40010000 	.word	0x40010000
 800b4d8:	40000400 	.word	0x40000400
 800b4dc:	40000800 	.word	0x40000800
 800b4e0:	40000c00 	.word	0x40000c00
 800b4e4:	40010400 	.word	0x40010400
 800b4e8:	40014000 	.word	0x40014000
 800b4ec:	40001800 	.word	0x40001800

0800b4f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e03f      	b.n	800b582 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7f8 fb02 	bl	8003b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2224      	movs	r2, #36	; 0x24
 800b520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fddf 	bl	800c0f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	691a      	ldr	r2, [r3, #16]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	695a      	ldr	r2, [r3, #20]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68da      	ldr	r2, [r3, #12]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2220      	movs	r2, #32
 800b574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2220      	movs	r2, #32
 800b57c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	4618      	mov	r0, r3
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b08a      	sub	sp, #40	; 0x28
 800b58e:	af02      	add	r7, sp, #8
 800b590:	60f8      	str	r0, [r7, #12]
 800b592:	60b9      	str	r1, [r7, #8]
 800b594:	603b      	str	r3, [r7, #0]
 800b596:	4613      	mov	r3, r2
 800b598:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b59a:	2300      	movs	r3, #0
 800b59c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	2b20      	cmp	r3, #32
 800b5a8:	d17c      	bne.n	800b6a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <HAL_UART_Transmit+0x2c>
 800b5b0:	88fb      	ldrh	r3, [r7, #6]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d101      	bne.n	800b5ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e075      	b.n	800b6a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d101      	bne.n	800b5c8 <HAL_UART_Transmit+0x3e>
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	e06e      	b.n	800b6a6 <HAL_UART_Transmit+0x11c>
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2221      	movs	r2, #33	; 0x21
 800b5da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5de:	f7fa fdcd 	bl	800617c <HAL_GetTick>
 800b5e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	88fa      	ldrh	r2, [r7, #6]
 800b5e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	88fa      	ldrh	r2, [r7, #6]
 800b5ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5f8:	d108      	bne.n	800b60c <HAL_UART_Transmit+0x82>
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d104      	bne.n	800b60c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b602:	2300      	movs	r3, #0
 800b604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	61bb      	str	r3, [r7, #24]
 800b60a:	e003      	b.n	800b614 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b610:	2300      	movs	r3, #0
 800b612:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2200      	movs	r2, #0
 800b618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b61c:	e02a      	b.n	800b674 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	2200      	movs	r2, #0
 800b626:	2180      	movs	r1, #128	; 0x80
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f000 fb27 	bl	800bc7c <UART_WaitOnFlagUntilTimeout>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b634:	2303      	movs	r3, #3
 800b636:	e036      	b.n	800b6a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d10b      	bne.n	800b656 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	881b      	ldrh	r3, [r3, #0]
 800b642:	461a      	mov	r2, r3
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b64c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	3302      	adds	r3, #2
 800b652:	61bb      	str	r3, [r7, #24]
 800b654:	e007      	b.n	800b666 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	781a      	ldrb	r2, [r3, #0]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	3301      	adds	r3, #1
 800b664:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	3b01      	subs	r3, #1
 800b66e:	b29a      	uxth	r2, r3
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b678:	b29b      	uxth	r3, r3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1cf      	bne.n	800b61e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	2200      	movs	r2, #0
 800b686:	2140      	movs	r1, #64	; 0x40
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f000 faf7 	bl	800bc7c <UART_WaitOnFlagUntilTimeout>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d001      	beq.n	800b698 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	e006      	b.n	800b6a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2220      	movs	r2, #32
 800b69c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	e000      	b.n	800b6a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b6a4:	2302      	movs	r3, #2
  }
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3720      	adds	r7, #32
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b084      	sub	sp, #16
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	60f8      	str	r0, [r7, #12]
 800b6b6:	60b9      	str	r1, [r7, #8]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	2b20      	cmp	r3, #32
 800b6c6:	d11d      	bne.n	800b704 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d002      	beq.n	800b6d4 <HAL_UART_Receive_IT+0x26>
 800b6ce:	88fb      	ldrh	r3, [r7, #6]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d101      	bne.n	800b6d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e016      	b.n	800b706 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d101      	bne.n	800b6e6 <HAL_UART_Receive_IT+0x38>
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	e00f      	b.n	800b706 <HAL_UART_Receive_IT+0x58>
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800b6f4:	88fb      	ldrh	r3, [r7, #6]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	68b9      	ldr	r1, [r7, #8]
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	f000 fb08 	bl	800bd10 <UART_Start_Receive_IT>
 800b700:	4603      	mov	r3, r0
 800b702:	e000      	b.n	800b706 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b704:	2302      	movs	r3, #2
  }
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b084      	sub	sp, #16
 800b712:	af00      	add	r7, sp, #0
 800b714:	60f8      	str	r0, [r7, #12]
 800b716:	60b9      	str	r1, [r7, #8]
 800b718:	4613      	mov	r3, r2
 800b71a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b722:	b2db      	uxtb	r3, r3
 800b724:	2b20      	cmp	r3, #32
 800b726:	d11d      	bne.n	800b764 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <HAL_UART_Receive_DMA+0x26>
 800b72e:	88fb      	ldrh	r3, [r7, #6]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	e016      	b.n	800b766 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d101      	bne.n	800b746 <HAL_UART_Receive_DMA+0x38>
 800b742:	2302      	movs	r3, #2
 800b744:	e00f      	b.n	800b766 <HAL_UART_Receive_DMA+0x58>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800b754:	88fb      	ldrh	r3, [r7, #6]
 800b756:	461a      	mov	r2, r3
 800b758:	68b9      	ldr	r1, [r7, #8]
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f000 fb12 	bl	800bd84 <UART_Start_Receive_DMA>
 800b760:	4603      	mov	r3, r0
 800b762:	e000      	b.n	800b766 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b764:	2302      	movs	r3, #2
  }
}
 800b766:	4618      	mov	r0, r3
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
	...

0800b770 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b08a      	sub	sp, #40	; 0x28
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800b790:	2300      	movs	r3, #0
 800b792:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800b794:	2300      	movs	r3, #0
 800b796:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79a:	f003 030f 	and.w	r3, r3, #15
 800b79e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10d      	bne.n	800b7c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a8:	f003 0320 	and.w	r3, r3, #32
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d008      	beq.n	800b7c2 <HAL_UART_IRQHandler+0x52>
 800b7b0:	6a3b      	ldr	r3, [r7, #32]
 800b7b2:	f003 0320 	and.w	r3, r3, #32
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d003      	beq.n	800b7c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fc05 	bl	800bfca <UART_Receive_IT>
      return;
 800b7c0:	e17c      	b.n	800babc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f000 80b1 	beq.w	800b92c <HAL_UART_IRQHandler+0x1bc>
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d105      	bne.n	800b7e0 <HAL_UART_IRQHandler+0x70>
 800b7d4:	6a3b      	ldr	r3, [r7, #32]
 800b7d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	f000 80a6 	beq.w	800b92c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e2:	f003 0301 	and.w	r3, r3, #1
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00a      	beq.n	800b800 <HAL_UART_IRQHandler+0x90>
 800b7ea:	6a3b      	ldr	r3, [r7, #32]
 800b7ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d005      	beq.n	800b800 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f8:	f043 0201 	orr.w	r2, r3, #1
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	f003 0304 	and.w	r3, r3, #4
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00a      	beq.n	800b820 <HAL_UART_IRQHandler+0xb0>
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	f003 0301 	and.w	r3, r3, #1
 800b810:	2b00      	cmp	r3, #0
 800b812:	d005      	beq.n	800b820 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b818:	f043 0202 	orr.w	r2, r3, #2
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b822:	f003 0302 	and.w	r3, r3, #2
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00a      	beq.n	800b840 <HAL_UART_IRQHandler+0xd0>
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	f003 0301 	and.w	r3, r3, #1
 800b830:	2b00      	cmp	r3, #0
 800b832:	d005      	beq.n	800b840 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b838:	f043 0204 	orr.w	r2, r3, #4
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b842:	f003 0308 	and.w	r3, r3, #8
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00f      	beq.n	800b86a <HAL_UART_IRQHandler+0xfa>
 800b84a:	6a3b      	ldr	r3, [r7, #32]
 800b84c:	f003 0320 	and.w	r3, r3, #32
 800b850:	2b00      	cmp	r3, #0
 800b852:	d104      	bne.n	800b85e <HAL_UART_IRQHandler+0xee>
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d005      	beq.n	800b86a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b862:	f043 0208 	orr.w	r2, r3, #8
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f000 811f 	beq.w	800bab2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	f003 0320 	and.w	r3, r3, #32
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d007      	beq.n	800b88e <HAL_UART_IRQHandler+0x11e>
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	f003 0320 	and.w	r3, r3, #32
 800b884:	2b00      	cmp	r3, #0
 800b886:	d002      	beq.n	800b88e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 fb9e 	bl	800bfca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	695b      	ldr	r3, [r3, #20]
 800b894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b898:	2b40      	cmp	r3, #64	; 0x40
 800b89a:	bf0c      	ite	eq
 800b89c:	2301      	moveq	r3, #1
 800b89e:	2300      	movne	r3, #0
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a8:	f003 0308 	and.w	r3, r3, #8
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d102      	bne.n	800b8b6 <HAL_UART_IRQHandler+0x146>
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d031      	beq.n	800b91a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fade 	bl	800be78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8c6:	2b40      	cmp	r3, #64	; 0x40
 800b8c8:	d123      	bne.n	800b912 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	695a      	ldr	r2, [r3, #20]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d013      	beq.n	800b90a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e6:	4a77      	ldr	r2, [pc, #476]	; (800bac4 <HAL_UART_IRQHandler+0x354>)
 800b8e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fb fac8 	bl	8006e84 <HAL_DMA_Abort_IT>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d016      	beq.n	800b928 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b904:	4610      	mov	r0, r2
 800b906:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b908:	e00e      	b.n	800b928 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f8f0 	bl	800baf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b910:	e00a      	b.n	800b928 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f8ec 	bl	800baf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b918:	e006      	b.n	800b928 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 f8e8 	bl	800baf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b926:	e0c4      	b.n	800bab2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b928:	bf00      	nop
    return;
 800b92a:	e0c2      	b.n	800bab2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b930:	2b01      	cmp	r3, #1
 800b932:	f040 80a2 	bne.w	800ba7a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	f003 0310 	and.w	r3, r3, #16
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f000 809c 	beq.w	800ba7a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b942:	6a3b      	ldr	r3, [r7, #32]
 800b944:	f003 0310 	and.w	r3, r3, #16
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 8096 	beq.w	800ba7a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b94e:	2300      	movs	r3, #0
 800b950:	60fb      	str	r3, [r7, #12]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	60fb      	str	r3, [r7, #12]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	60fb      	str	r3, [r7, #12]
 800b962:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b96e:	2b40      	cmp	r3, #64	; 0x40
 800b970:	d14f      	bne.n	800ba12 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800b97c:	8a3b      	ldrh	r3, [r7, #16]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f000 8099 	beq.w	800bab6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b988:	8a3a      	ldrh	r2, [r7, #16]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	f080 8093 	bcs.w	800bab6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	8a3a      	ldrh	r2, [r7, #16]
 800b994:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b99a:	69db      	ldr	r3, [r3, #28]
 800b99c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9a0:	d02b      	beq.n	800b9fa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68da      	ldr	r2, [r3, #12]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9b0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	695a      	ldr	r2, [r3, #20]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f022 0201 	bic.w	r2, r2, #1
 800b9c0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	695a      	ldr	r2, [r3, #20]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b9d0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68da      	ldr	r2, [r3, #12]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f022 0210 	bic.w	r2, r2, #16
 800b9ee:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fb f9d5 	bl	8006da4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	4619      	mov	r1, r3
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f87a 	bl	800bb04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800ba10:	e051      	b.n	800bab6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d047      	beq.n	800baba <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800ba2a:	8a7b      	ldrh	r3, [r7, #18]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d044      	beq.n	800baba <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68da      	ldr	r2, [r3, #12]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ba3e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	695a      	ldr	r2, [r3, #20]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f022 0201 	bic.w	r2, r2, #1
 800ba4e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2220      	movs	r2, #32
 800ba54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68da      	ldr	r2, [r3, #12]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f022 0210 	bic.w	r2, r2, #16
 800ba6c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba6e:	8a7b      	ldrh	r3, [r7, #18]
 800ba70:	4619      	mov	r1, r3
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f846 	bl	800bb04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800ba78:	e01f      	b.n	800baba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d008      	beq.n	800ba96 <HAL_UART_IRQHandler+0x326>
 800ba84:	6a3b      	ldr	r3, [r7, #32]
 800ba86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d003      	beq.n	800ba96 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 fa33 	bl	800befa <UART_Transmit_IT>
    return;
 800ba94:	e012      	b.n	800babc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00d      	beq.n	800babc <HAL_UART_IRQHandler+0x34c>
 800baa0:	6a3b      	ldr	r3, [r7, #32]
 800baa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d008      	beq.n	800babc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fa75 	bl	800bf9a <UART_EndTransmit_IT>
    return;
 800bab0:	e004      	b.n	800babc <HAL_UART_IRQHandler+0x34c>
    return;
 800bab2:	bf00      	nop
 800bab4:	e002      	b.n	800babc <HAL_UART_IRQHandler+0x34c>
      return;
 800bab6:	bf00      	nop
 800bab8:	e000      	b.n	800babc <HAL_UART_IRQHandler+0x34c>
      return;
 800baba:	bf00      	nop
  }
}
 800babc:	3728      	adds	r7, #40	; 0x28
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	0800bed3 	.word	0x0800bed3

0800bac8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bad0:	bf00      	nop
 800bad2:	370c      	adds	r7, #12
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bae4:	bf00      	nop
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800baf8:	bf00      	nop
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb10:	bf00      	nop
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb28:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d12a      	bne.n	800bb8e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	68da      	ldr	r2, [r3, #12]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb4c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	695a      	ldr	r2, [r3, #20]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f022 0201 	bic.w	r2, r2, #1
 800bb5c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	695a      	ldr	r2, [r3, #20]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb6c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2220      	movs	r2, #32
 800bb72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d107      	bne.n	800bb8e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68da      	ldr	r2, [r3, #12]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f022 0210 	bic.w	r2, r2, #16
 800bb8c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d106      	bne.n	800bba4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f7ff ffb1 	bl	800bb04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bba2:	e002      	b.n	800bbaa <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f7f6 f851 	bl	8001c4c <HAL_UART_RxCpltCallback>
}
 800bbaa:	bf00      	nop
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b084      	sub	sp, #16
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbbe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d108      	bne.n	800bbda <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbcc:	085b      	lsrs	r3, r3, #1
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	68f8      	ldr	r0, [r7, #12]
 800bbd4:	f7ff ff96 	bl	800bb04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbd8:	e002      	b.n	800bbe0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f7ff ff7e 	bl	800badc <HAL_UART_RxHalfCpltCallback>
}
 800bbe0:	bf00      	nop
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	695b      	ldr	r3, [r3, #20]
 800bc00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc04:	2b80      	cmp	r3, #128	; 0x80
 800bc06:	bf0c      	ite	eq
 800bc08:	2301      	moveq	r3, #1
 800bc0a:	2300      	movne	r3, #0
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	2b21      	cmp	r3, #33	; 0x21
 800bc1a:	d108      	bne.n	800bc2e <UART_DMAError+0x46>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d005      	beq.n	800bc2e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2200      	movs	r2, #0
 800bc26:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bc28:	68b8      	ldr	r0, [r7, #8]
 800bc2a:	f000 f90f 	bl	800be4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	695b      	ldr	r3, [r3, #20]
 800bc34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc38:	2b40      	cmp	r3, #64	; 0x40
 800bc3a:	bf0c      	ite	eq
 800bc3c:	2301      	moveq	r3, #1
 800bc3e:	2300      	movne	r3, #0
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	2b22      	cmp	r3, #34	; 0x22
 800bc4e:	d108      	bne.n	800bc62 <UART_DMAError+0x7a>
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d005      	beq.n	800bc62 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bc5c:	68b8      	ldr	r0, [r7, #8]
 800bc5e:	f000 f90b 	bl	800be78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc66:	f043 0210 	orr.w	r2, r3, #16
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc6e:	68b8      	ldr	r0, [r7, #8]
 800bc70:	f7ff ff3e 	bl	800baf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc74:	bf00      	nop
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	603b      	str	r3, [r7, #0]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc8c:	e02c      	b.n	800bce8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc94:	d028      	beq.n	800bce8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d007      	beq.n	800bcac <UART_WaitOnFlagUntilTimeout+0x30>
 800bc9c:	f7fa fa6e 	bl	800617c <HAL_GetTick>
 800bca0:	4602      	mov	r2, r0
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	69ba      	ldr	r2, [r7, #24]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d21d      	bcs.n	800bce8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68da      	ldr	r2, [r3, #12]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bcba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	695a      	ldr	r2, [r3, #20]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f022 0201 	bic.w	r2, r2, #1
 800bcca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2220      	movs	r2, #32
 800bcd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2220      	movs	r2, #32
 800bcd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bce4:	2303      	movs	r3, #3
 800bce6:	e00f      	b.n	800bd08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	bf0c      	ite	eq
 800bcf8:	2301      	moveq	r3, #1
 800bcfa:	2300      	movne	r3, #0
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	461a      	mov	r2, r3
 800bd00:	79fb      	ldrb	r3, [r7, #7]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d0c3      	beq.n	800bc8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	88fa      	ldrh	r2, [r7, #6]
 800bd28:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	88fa      	ldrh	r2, [r7, #6]
 800bd2e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2222      	movs	r2, #34	; 0x22
 800bd3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68da      	ldr	r2, [r3, #12]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd54:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	695a      	ldr	r2, [r3, #20]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f042 0201 	orr.w	r2, r2, #1
 800bd64:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68da      	ldr	r2, [r3, #12]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f042 0220 	orr.w	r2, r2, #32
 800bd74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3714      	adds	r7, #20
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b086      	sub	sp, #24
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	4613      	mov	r3, r2
 800bd90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	88fa      	ldrh	r2, [r7, #6]
 800bd9c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2222      	movs	r2, #34	; 0x22
 800bda8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb0:	4a23      	ldr	r2, [pc, #140]	; (800be40 <UART_Start_Receive_DMA+0xbc>)
 800bdb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb8:	4a22      	ldr	r2, [pc, #136]	; (800be44 <UART_Start_Receive_DMA+0xc0>)
 800bdba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc0:	4a21      	ldr	r2, [pc, #132]	; (800be48 <UART_Start_Receive_DMA+0xc4>)
 800bdc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc8:	2200      	movs	r2, #0
 800bdca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bdcc:	f107 0308 	add.w	r3, r7, #8
 800bdd0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3304      	adds	r3, #4
 800bddc:	4619      	mov	r1, r3
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	88fb      	ldrh	r3, [r7, #6]
 800bde4:	f7fa ff86 	bl	8006cf4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bde8:	2300      	movs	r3, #0
 800bdea:	613b      	str	r3, [r7, #16]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	613b      	str	r3, [r7, #16]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	613b      	str	r3, [r7, #16]
 800bdfc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2200      	movs	r2, #0
 800be02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68da      	ldr	r2, [r3, #12]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be14:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	695a      	ldr	r2, [r3, #20]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f042 0201 	orr.w	r2, r2, #1
 800be24:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	695a      	ldr	r2, [r3, #20]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be34:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3718      	adds	r7, #24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	0800bb1d 	.word	0x0800bb1d
 800be44:	0800bbb3 	.word	0x0800bbb3
 800be48:	0800bbe9 	.word	0x0800bbe9

0800be4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68da      	ldr	r2, [r3, #12]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800be62:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2220      	movs	r2, #32
 800be68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800be6c:	bf00      	nop
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68da      	ldr	r2, [r3, #12]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800be8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	695a      	ldr	r2, [r3, #20]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f022 0201 	bic.w	r2, r2, #1
 800be9e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d107      	bne.n	800beb8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	68da      	ldr	r2, [r3, #12]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f022 0210 	bic.w	r2, r2, #16
 800beb6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2220      	movs	r2, #32
 800bebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bec6:	bf00      	nop
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b084      	sub	sp, #16
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2200      	movs	r2, #0
 800beea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	f7ff fdff 	bl	800baf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bef2:	bf00      	nop
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800befa:	b480      	push	{r7}
 800befc:	b085      	sub	sp, #20
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b21      	cmp	r3, #33	; 0x21
 800bf0c:	d13e      	bne.n	800bf8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf16:	d114      	bne.n	800bf42 <UART_Transmit_IT+0x48>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d110      	bne.n	800bf42 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a1b      	ldr	r3, [r3, #32]
 800bf24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	881b      	ldrh	r3, [r3, #0]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a1b      	ldr	r3, [r3, #32]
 800bf3a:	1c9a      	adds	r2, r3, #2
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	621a      	str	r2, [r3, #32]
 800bf40:	e008      	b.n	800bf54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a1b      	ldr	r3, [r3, #32]
 800bf46:	1c59      	adds	r1, r3, #1
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	6211      	str	r1, [r2, #32]
 800bf4c:	781a      	ldrb	r2, [r3, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	4619      	mov	r1, r3
 800bf62:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d10f      	bne.n	800bf88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68da      	ldr	r2, [r3, #12]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	68da      	ldr	r2, [r3, #12]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	e000      	b.n	800bf8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bf8c:	2302      	movs	r3, #2
  }
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3714      	adds	r7, #20
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr

0800bf9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b082      	sub	sp, #8
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68da      	ldr	r2, [r3, #12]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2220      	movs	r2, #32
 800bfb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7ff fd84 	bl	800bac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b084      	sub	sp, #16
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b22      	cmp	r3, #34	; 0x22
 800bfdc:	f040 8087 	bne.w	800c0ee <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfe8:	d117      	bne.n	800c01a <UART_Receive_IT+0x50>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d113      	bne.n	800c01a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bff2:	2300      	movs	r3, #0
 800bff4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	b29b      	uxth	r3, r3
 800c004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c008:	b29a      	uxth	r2, r3
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c012:	1c9a      	adds	r2, r3, #2
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	629a      	str	r2, [r3, #40]	; 0x28
 800c018:	e026      	b.n	800c068 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800c020:	2300      	movs	r3, #0
 800c022:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c02c:	d007      	beq.n	800c03e <UART_Receive_IT+0x74>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10a      	bne.n	800c04c <UART_Receive_IT+0x82>
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	691b      	ldr	r3, [r3, #16]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d106      	bne.n	800c04c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	b2da      	uxtb	r2, r3
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	701a      	strb	r2, [r3, #0]
 800c04a:	e008      	b.n	800c05e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	b2db      	uxtb	r3, r3
 800c054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c058:	b2da      	uxtb	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c062:	1c5a      	adds	r2, r3, #1
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	3b01      	subs	r3, #1
 800c070:	b29b      	uxth	r3, r3
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	4619      	mov	r1, r3
 800c076:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d136      	bne.n	800c0ea <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	68da      	ldr	r2, [r3, #12]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f022 0220 	bic.w	r2, r2, #32
 800c08a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68da      	ldr	r2, [r3, #12]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c09a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	695a      	ldr	r2, [r3, #20]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f022 0201 	bic.w	r2, r2, #1
 800c0aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2220      	movs	r2, #32
 800c0b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d10e      	bne.n	800c0da <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68da      	ldr	r2, [r3, #12]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f022 0210 	bic.w	r2, r2, #16
 800c0ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f7ff fd16 	bl	800bb04 <HAL_UARTEx_RxEventCallback>
 800c0d8:	e002      	b.n	800c0e0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7f5 fdb6 	bl	8001c4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	e002      	b.n	800c0f0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	e000      	b.n	800c0f0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800c0ee:	2302      	movs	r3, #2
  }
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0fc:	b09f      	sub	sp, #124	; 0x7c
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c10e:	68d9      	ldr	r1, [r3, #12]
 800c110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	ea40 0301 	orr.w	r3, r0, r1
 800c118:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c11a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c11c:	689a      	ldr	r2, [r3, #8]
 800c11e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c120:	691b      	ldr	r3, [r3, #16]
 800c122:	431a      	orrs	r2, r3
 800c124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c126:	695b      	ldr	r3, [r3, #20]
 800c128:	431a      	orrs	r2, r3
 800c12a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c12c:	69db      	ldr	r3, [r3, #28]
 800c12e:	4313      	orrs	r3, r2
 800c130:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800c132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c13c:	f021 010c 	bic.w	r1, r1, #12
 800c140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c146:	430b      	orrs	r3, r1
 800c148:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c14a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	695b      	ldr	r3, [r3, #20]
 800c150:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c156:	6999      	ldr	r1, [r3, #24]
 800c158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	ea40 0301 	orr.w	r3, r0, r1
 800c160:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	4bc5      	ldr	r3, [pc, #788]	; (800c47c <UART_SetConfig+0x384>)
 800c168:	429a      	cmp	r2, r3
 800c16a:	d004      	beq.n	800c176 <UART_SetConfig+0x7e>
 800c16c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	4bc3      	ldr	r3, [pc, #780]	; (800c480 <UART_SetConfig+0x388>)
 800c172:	429a      	cmp	r2, r3
 800c174:	d103      	bne.n	800c17e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c176:	f7fe f83d 	bl	800a1f4 <HAL_RCC_GetPCLK2Freq>
 800c17a:	6778      	str	r0, [r7, #116]	; 0x74
 800c17c:	e002      	b.n	800c184 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c17e:	f7fe f825 	bl	800a1cc <HAL_RCC_GetPCLK1Freq>
 800c182:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c186:	69db      	ldr	r3, [r3, #28]
 800c188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c18c:	f040 80b6 	bne.w	800c2fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c192:	461c      	mov	r4, r3
 800c194:	f04f 0500 	mov.w	r5, #0
 800c198:	4622      	mov	r2, r4
 800c19a:	462b      	mov	r3, r5
 800c19c:	1891      	adds	r1, r2, r2
 800c19e:	6439      	str	r1, [r7, #64]	; 0x40
 800c1a0:	415b      	adcs	r3, r3
 800c1a2:	647b      	str	r3, [r7, #68]	; 0x44
 800c1a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c1a8:	1912      	adds	r2, r2, r4
 800c1aa:	eb45 0303 	adc.w	r3, r5, r3
 800c1ae:	f04f 0000 	mov.w	r0, #0
 800c1b2:	f04f 0100 	mov.w	r1, #0
 800c1b6:	00d9      	lsls	r1, r3, #3
 800c1b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c1bc:	00d0      	lsls	r0, r2, #3
 800c1be:	4602      	mov	r2, r0
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	1911      	adds	r1, r2, r4
 800c1c4:	6639      	str	r1, [r7, #96]	; 0x60
 800c1c6:	416b      	adcs	r3, r5
 800c1c8:	667b      	str	r3, [r7, #100]	; 0x64
 800c1ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	f04f 0300 	mov.w	r3, #0
 800c1d4:	1891      	adds	r1, r2, r2
 800c1d6:	63b9      	str	r1, [r7, #56]	; 0x38
 800c1d8:	415b      	adcs	r3, r3
 800c1da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c1e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c1e4:	f7f4 fd50 	bl	8000c88 <__aeabi_uldivmod>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	4ba5      	ldr	r3, [pc, #660]	; (800c484 <UART_SetConfig+0x38c>)
 800c1ee:	fba3 2302 	umull	r2, r3, r3, r2
 800c1f2:	095b      	lsrs	r3, r3, #5
 800c1f4:	011e      	lsls	r6, r3, #4
 800c1f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1f8:	461c      	mov	r4, r3
 800c1fa:	f04f 0500 	mov.w	r5, #0
 800c1fe:	4622      	mov	r2, r4
 800c200:	462b      	mov	r3, r5
 800c202:	1891      	adds	r1, r2, r2
 800c204:	6339      	str	r1, [r7, #48]	; 0x30
 800c206:	415b      	adcs	r3, r3
 800c208:	637b      	str	r3, [r7, #52]	; 0x34
 800c20a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c20e:	1912      	adds	r2, r2, r4
 800c210:	eb45 0303 	adc.w	r3, r5, r3
 800c214:	f04f 0000 	mov.w	r0, #0
 800c218:	f04f 0100 	mov.w	r1, #0
 800c21c:	00d9      	lsls	r1, r3, #3
 800c21e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c222:	00d0      	lsls	r0, r2, #3
 800c224:	4602      	mov	r2, r0
 800c226:	460b      	mov	r3, r1
 800c228:	1911      	adds	r1, r2, r4
 800c22a:	65b9      	str	r1, [r7, #88]	; 0x58
 800c22c:	416b      	adcs	r3, r5
 800c22e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	461a      	mov	r2, r3
 800c236:	f04f 0300 	mov.w	r3, #0
 800c23a:	1891      	adds	r1, r2, r2
 800c23c:	62b9      	str	r1, [r7, #40]	; 0x28
 800c23e:	415b      	adcs	r3, r3
 800c240:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c246:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c24a:	f7f4 fd1d 	bl	8000c88 <__aeabi_uldivmod>
 800c24e:	4602      	mov	r2, r0
 800c250:	460b      	mov	r3, r1
 800c252:	4b8c      	ldr	r3, [pc, #560]	; (800c484 <UART_SetConfig+0x38c>)
 800c254:	fba3 1302 	umull	r1, r3, r3, r2
 800c258:	095b      	lsrs	r3, r3, #5
 800c25a:	2164      	movs	r1, #100	; 0x64
 800c25c:	fb01 f303 	mul.w	r3, r1, r3
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	00db      	lsls	r3, r3, #3
 800c264:	3332      	adds	r3, #50	; 0x32
 800c266:	4a87      	ldr	r2, [pc, #540]	; (800c484 <UART_SetConfig+0x38c>)
 800c268:	fba2 2303 	umull	r2, r3, r2, r3
 800c26c:	095b      	lsrs	r3, r3, #5
 800c26e:	005b      	lsls	r3, r3, #1
 800c270:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c274:	441e      	add	r6, r3
 800c276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c278:	4618      	mov	r0, r3
 800c27a:	f04f 0100 	mov.w	r1, #0
 800c27e:	4602      	mov	r2, r0
 800c280:	460b      	mov	r3, r1
 800c282:	1894      	adds	r4, r2, r2
 800c284:	623c      	str	r4, [r7, #32]
 800c286:	415b      	adcs	r3, r3
 800c288:	627b      	str	r3, [r7, #36]	; 0x24
 800c28a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c28e:	1812      	adds	r2, r2, r0
 800c290:	eb41 0303 	adc.w	r3, r1, r3
 800c294:	f04f 0400 	mov.w	r4, #0
 800c298:	f04f 0500 	mov.w	r5, #0
 800c29c:	00dd      	lsls	r5, r3, #3
 800c29e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c2a2:	00d4      	lsls	r4, r2, #3
 800c2a4:	4622      	mov	r2, r4
 800c2a6:	462b      	mov	r3, r5
 800c2a8:	1814      	adds	r4, r2, r0
 800c2aa:	653c      	str	r4, [r7, #80]	; 0x50
 800c2ac:	414b      	adcs	r3, r1
 800c2ae:	657b      	str	r3, [r7, #84]	; 0x54
 800c2b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	f04f 0300 	mov.w	r3, #0
 800c2ba:	1891      	adds	r1, r2, r2
 800c2bc:	61b9      	str	r1, [r7, #24]
 800c2be:	415b      	adcs	r3, r3
 800c2c0:	61fb      	str	r3, [r7, #28]
 800c2c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c2c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c2ca:	f7f4 fcdd 	bl	8000c88 <__aeabi_uldivmod>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	4b6c      	ldr	r3, [pc, #432]	; (800c484 <UART_SetConfig+0x38c>)
 800c2d4:	fba3 1302 	umull	r1, r3, r3, r2
 800c2d8:	095b      	lsrs	r3, r3, #5
 800c2da:	2164      	movs	r1, #100	; 0x64
 800c2dc:	fb01 f303 	mul.w	r3, r1, r3
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	00db      	lsls	r3, r3, #3
 800c2e4:	3332      	adds	r3, #50	; 0x32
 800c2e6:	4a67      	ldr	r2, [pc, #412]	; (800c484 <UART_SetConfig+0x38c>)
 800c2e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ec:	095b      	lsrs	r3, r3, #5
 800c2ee:	f003 0207 	and.w	r2, r3, #7
 800c2f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4432      	add	r2, r6
 800c2f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c2fa:	e0b9      	b.n	800c470 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c2fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2fe:	461c      	mov	r4, r3
 800c300:	f04f 0500 	mov.w	r5, #0
 800c304:	4622      	mov	r2, r4
 800c306:	462b      	mov	r3, r5
 800c308:	1891      	adds	r1, r2, r2
 800c30a:	6139      	str	r1, [r7, #16]
 800c30c:	415b      	adcs	r3, r3
 800c30e:	617b      	str	r3, [r7, #20]
 800c310:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c314:	1912      	adds	r2, r2, r4
 800c316:	eb45 0303 	adc.w	r3, r5, r3
 800c31a:	f04f 0000 	mov.w	r0, #0
 800c31e:	f04f 0100 	mov.w	r1, #0
 800c322:	00d9      	lsls	r1, r3, #3
 800c324:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c328:	00d0      	lsls	r0, r2, #3
 800c32a:	4602      	mov	r2, r0
 800c32c:	460b      	mov	r3, r1
 800c32e:	eb12 0804 	adds.w	r8, r2, r4
 800c332:	eb43 0905 	adc.w	r9, r3, r5
 800c336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f04f 0100 	mov.w	r1, #0
 800c340:	f04f 0200 	mov.w	r2, #0
 800c344:	f04f 0300 	mov.w	r3, #0
 800c348:	008b      	lsls	r3, r1, #2
 800c34a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c34e:	0082      	lsls	r2, r0, #2
 800c350:	4640      	mov	r0, r8
 800c352:	4649      	mov	r1, r9
 800c354:	f7f4 fc98 	bl	8000c88 <__aeabi_uldivmod>
 800c358:	4602      	mov	r2, r0
 800c35a:	460b      	mov	r3, r1
 800c35c:	4b49      	ldr	r3, [pc, #292]	; (800c484 <UART_SetConfig+0x38c>)
 800c35e:	fba3 2302 	umull	r2, r3, r3, r2
 800c362:	095b      	lsrs	r3, r3, #5
 800c364:	011e      	lsls	r6, r3, #4
 800c366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c368:	4618      	mov	r0, r3
 800c36a:	f04f 0100 	mov.w	r1, #0
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	1894      	adds	r4, r2, r2
 800c374:	60bc      	str	r4, [r7, #8]
 800c376:	415b      	adcs	r3, r3
 800c378:	60fb      	str	r3, [r7, #12]
 800c37a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c37e:	1812      	adds	r2, r2, r0
 800c380:	eb41 0303 	adc.w	r3, r1, r3
 800c384:	f04f 0400 	mov.w	r4, #0
 800c388:	f04f 0500 	mov.w	r5, #0
 800c38c:	00dd      	lsls	r5, r3, #3
 800c38e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c392:	00d4      	lsls	r4, r2, #3
 800c394:	4622      	mov	r2, r4
 800c396:	462b      	mov	r3, r5
 800c398:	1814      	adds	r4, r2, r0
 800c39a:	64bc      	str	r4, [r7, #72]	; 0x48
 800c39c:	414b      	adcs	r3, r1
 800c39e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f04f 0100 	mov.w	r1, #0
 800c3aa:	f04f 0200 	mov.w	r2, #0
 800c3ae:	f04f 0300 	mov.w	r3, #0
 800c3b2:	008b      	lsls	r3, r1, #2
 800c3b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c3b8:	0082      	lsls	r2, r0, #2
 800c3ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c3be:	f7f4 fc63 	bl	8000c88 <__aeabi_uldivmod>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	4b2f      	ldr	r3, [pc, #188]	; (800c484 <UART_SetConfig+0x38c>)
 800c3c8:	fba3 1302 	umull	r1, r3, r3, r2
 800c3cc:	095b      	lsrs	r3, r3, #5
 800c3ce:	2164      	movs	r1, #100	; 0x64
 800c3d0:	fb01 f303 	mul.w	r3, r1, r3
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	011b      	lsls	r3, r3, #4
 800c3d8:	3332      	adds	r3, #50	; 0x32
 800c3da:	4a2a      	ldr	r2, [pc, #168]	; (800c484 <UART_SetConfig+0x38c>)
 800c3dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c3e0:	095b      	lsrs	r3, r3, #5
 800c3e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3e6:	441e      	add	r6, r3
 800c3e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f04f 0100 	mov.w	r1, #0
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	1894      	adds	r4, r2, r2
 800c3f6:	603c      	str	r4, [r7, #0]
 800c3f8:	415b      	adcs	r3, r3
 800c3fa:	607b      	str	r3, [r7, #4]
 800c3fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c400:	1812      	adds	r2, r2, r0
 800c402:	eb41 0303 	adc.w	r3, r1, r3
 800c406:	f04f 0400 	mov.w	r4, #0
 800c40a:	f04f 0500 	mov.w	r5, #0
 800c40e:	00dd      	lsls	r5, r3, #3
 800c410:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c414:	00d4      	lsls	r4, r2, #3
 800c416:	4622      	mov	r2, r4
 800c418:	462b      	mov	r3, r5
 800c41a:	eb12 0a00 	adds.w	sl, r2, r0
 800c41e:	eb43 0b01 	adc.w	fp, r3, r1
 800c422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	4618      	mov	r0, r3
 800c428:	f04f 0100 	mov.w	r1, #0
 800c42c:	f04f 0200 	mov.w	r2, #0
 800c430:	f04f 0300 	mov.w	r3, #0
 800c434:	008b      	lsls	r3, r1, #2
 800c436:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c43a:	0082      	lsls	r2, r0, #2
 800c43c:	4650      	mov	r0, sl
 800c43e:	4659      	mov	r1, fp
 800c440:	f7f4 fc22 	bl	8000c88 <__aeabi_uldivmod>
 800c444:	4602      	mov	r2, r0
 800c446:	460b      	mov	r3, r1
 800c448:	4b0e      	ldr	r3, [pc, #56]	; (800c484 <UART_SetConfig+0x38c>)
 800c44a:	fba3 1302 	umull	r1, r3, r3, r2
 800c44e:	095b      	lsrs	r3, r3, #5
 800c450:	2164      	movs	r1, #100	; 0x64
 800c452:	fb01 f303 	mul.w	r3, r1, r3
 800c456:	1ad3      	subs	r3, r2, r3
 800c458:	011b      	lsls	r3, r3, #4
 800c45a:	3332      	adds	r3, #50	; 0x32
 800c45c:	4a09      	ldr	r2, [pc, #36]	; (800c484 <UART_SetConfig+0x38c>)
 800c45e:	fba2 2303 	umull	r2, r3, r2, r3
 800c462:	095b      	lsrs	r3, r3, #5
 800c464:	f003 020f 	and.w	r2, r3, #15
 800c468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4432      	add	r2, r6
 800c46e:	609a      	str	r2, [r3, #8]
}
 800c470:	bf00      	nop
 800c472:	377c      	adds	r7, #124	; 0x7c
 800c474:	46bd      	mov	sp, r7
 800c476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47a:	bf00      	nop
 800c47c:	40011000 	.word	0x40011000
 800c480:	40011400 	.word	0x40011400
 800c484:	51eb851f 	.word	0x51eb851f

0800c488 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c488:	b084      	sub	sp, #16
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b084      	sub	sp, #16
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	f107 001c 	add.w	r0, r7, #28
 800c496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d122      	bne.n	800c4e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c4b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c4c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d105      	bne.n	800c4da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f001 fac6 	bl	800da6c <USB_CoreReset>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	73fb      	strb	r3, [r7, #15]
 800c4e4:	e01a      	b.n	800c51c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f001 faba 	bl	800da6c <USB_CoreReset>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d106      	bne.n	800c510 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c506:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	639a      	str	r2, [r3, #56]	; 0x38
 800c50e:	e005      	b.n	800c51c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c514:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d10b      	bne.n	800c53a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	f043 0206 	orr.w	r2, r3, #6
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	f043 0220 	orr.w	r2, r3, #32
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3710      	adds	r7, #16
 800c540:	46bd      	mov	sp, r7
 800c542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c546:	b004      	add	sp, #16
 800c548:	4770      	bx	lr
	...

0800c54c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b087      	sub	sp, #28
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	4613      	mov	r3, r2
 800c558:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c55a:	79fb      	ldrb	r3, [r7, #7]
 800c55c:	2b02      	cmp	r3, #2
 800c55e:	d165      	bne.n	800c62c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	4a41      	ldr	r2, [pc, #260]	; (800c668 <USB_SetTurnaroundTime+0x11c>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d906      	bls.n	800c576 <USB_SetTurnaroundTime+0x2a>
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	4a40      	ldr	r2, [pc, #256]	; (800c66c <USB_SetTurnaroundTime+0x120>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d202      	bcs.n	800c576 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c570:	230f      	movs	r3, #15
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	e062      	b.n	800c63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	4a3c      	ldr	r2, [pc, #240]	; (800c66c <USB_SetTurnaroundTime+0x120>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d306      	bcc.n	800c58c <USB_SetTurnaroundTime+0x40>
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	4a3b      	ldr	r2, [pc, #236]	; (800c670 <USB_SetTurnaroundTime+0x124>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d202      	bcs.n	800c58c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c586:	230e      	movs	r3, #14
 800c588:	617b      	str	r3, [r7, #20]
 800c58a:	e057      	b.n	800c63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	4a38      	ldr	r2, [pc, #224]	; (800c670 <USB_SetTurnaroundTime+0x124>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d306      	bcc.n	800c5a2 <USB_SetTurnaroundTime+0x56>
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	4a37      	ldr	r2, [pc, #220]	; (800c674 <USB_SetTurnaroundTime+0x128>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d202      	bcs.n	800c5a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c59c:	230d      	movs	r3, #13
 800c59e:	617b      	str	r3, [r7, #20]
 800c5a0:	e04c      	b.n	800c63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	4a33      	ldr	r2, [pc, #204]	; (800c674 <USB_SetTurnaroundTime+0x128>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d306      	bcc.n	800c5b8 <USB_SetTurnaroundTime+0x6c>
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	4a32      	ldr	r2, [pc, #200]	; (800c678 <USB_SetTurnaroundTime+0x12c>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d802      	bhi.n	800c5b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c5b2:	230c      	movs	r3, #12
 800c5b4:	617b      	str	r3, [r7, #20]
 800c5b6:	e041      	b.n	800c63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	4a2f      	ldr	r2, [pc, #188]	; (800c678 <USB_SetTurnaroundTime+0x12c>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d906      	bls.n	800c5ce <USB_SetTurnaroundTime+0x82>
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	4a2e      	ldr	r2, [pc, #184]	; (800c67c <USB_SetTurnaroundTime+0x130>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d802      	bhi.n	800c5ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c5c8:	230b      	movs	r3, #11
 800c5ca:	617b      	str	r3, [r7, #20]
 800c5cc:	e036      	b.n	800c63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	4a2a      	ldr	r2, [pc, #168]	; (800c67c <USB_SetTurnaroundTime+0x130>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d906      	bls.n	800c5e4 <USB_SetTurnaroundTime+0x98>
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	4a29      	ldr	r2, [pc, #164]	; (800c680 <USB_SetTurnaroundTime+0x134>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d802      	bhi.n	800c5e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c5de:	230a      	movs	r3, #10
 800c5e0:	617b      	str	r3, [r7, #20]
 800c5e2:	e02b      	b.n	800c63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	4a26      	ldr	r2, [pc, #152]	; (800c680 <USB_SetTurnaroundTime+0x134>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d906      	bls.n	800c5fa <USB_SetTurnaroundTime+0xae>
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	4a25      	ldr	r2, [pc, #148]	; (800c684 <USB_SetTurnaroundTime+0x138>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d202      	bcs.n	800c5fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c5f4:	2309      	movs	r3, #9
 800c5f6:	617b      	str	r3, [r7, #20]
 800c5f8:	e020      	b.n	800c63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	4a21      	ldr	r2, [pc, #132]	; (800c684 <USB_SetTurnaroundTime+0x138>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d306      	bcc.n	800c610 <USB_SetTurnaroundTime+0xc4>
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	4a20      	ldr	r2, [pc, #128]	; (800c688 <USB_SetTurnaroundTime+0x13c>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d802      	bhi.n	800c610 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c60a:	2308      	movs	r3, #8
 800c60c:	617b      	str	r3, [r7, #20]
 800c60e:	e015      	b.n	800c63c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	4a1d      	ldr	r2, [pc, #116]	; (800c688 <USB_SetTurnaroundTime+0x13c>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d906      	bls.n	800c626 <USB_SetTurnaroundTime+0xda>
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	4a1c      	ldr	r2, [pc, #112]	; (800c68c <USB_SetTurnaroundTime+0x140>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d202      	bcs.n	800c626 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c620:	2307      	movs	r3, #7
 800c622:	617b      	str	r3, [r7, #20]
 800c624:	e00a      	b.n	800c63c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c626:	2306      	movs	r3, #6
 800c628:	617b      	str	r3, [r7, #20]
 800c62a:	e007      	b.n	800c63c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c62c:	79fb      	ldrb	r3, [r7, #7]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d102      	bne.n	800c638 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c632:	2309      	movs	r3, #9
 800c634:	617b      	str	r3, [r7, #20]
 800c636:	e001      	b.n	800c63c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c638:	2309      	movs	r3, #9
 800c63a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	68da      	ldr	r2, [r3, #12]
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	029b      	lsls	r3, r3, #10
 800c650:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c654:	431a      	orrs	r2, r3
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	371c      	adds	r7, #28
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr
 800c668:	00d8acbf 	.word	0x00d8acbf
 800c66c:	00e4e1c0 	.word	0x00e4e1c0
 800c670:	00f42400 	.word	0x00f42400
 800c674:	01067380 	.word	0x01067380
 800c678:	011a499f 	.word	0x011a499f
 800c67c:	01312cff 	.word	0x01312cff
 800c680:	014ca43f 	.word	0x014ca43f
 800c684:	016e3600 	.word	0x016e3600
 800c688:	01a6ab1f 	.word	0x01a6ab1f
 800c68c:	01e84800 	.word	0x01e84800

0800c690 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	f043 0201 	orr.w	r2, r3, #1
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	370c      	adds	r7, #12
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6b2:	b480      	push	{r7}
 800c6b4:	b083      	sub	sp, #12
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	f023 0201 	bic.w	r2, r3, #1
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c6c6:	2300      	movs	r3, #0
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	370c      	adds	r7, #12
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
 800c6dc:	460b      	mov	r3, r1
 800c6de:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c6ec:	78fb      	ldrb	r3, [r7, #3]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d106      	bne.n	800c700 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	60da      	str	r2, [r3, #12]
 800c6fe:	e00b      	b.n	800c718 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c700:	78fb      	ldrb	r3, [r7, #3]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d106      	bne.n	800c714 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	60da      	str	r2, [r3, #12]
 800c712:	e001      	b.n	800c718 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c714:	2301      	movs	r3, #1
 800c716:	e003      	b.n	800c720 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c718:	2032      	movs	r0, #50	; 0x32
 800c71a:	f7f9 fd3b 	bl	8006194 <HAL_Delay>

  return HAL_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	3708      	adds	r7, #8
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c728:	b084      	sub	sp, #16
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b086      	sub	sp, #24
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c73a:	2300      	movs	r3, #0
 800c73c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c742:	2300      	movs	r3, #0
 800c744:	613b      	str	r3, [r7, #16]
 800c746:	e009      	b.n	800c75c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	3340      	adds	r3, #64	; 0x40
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	4413      	add	r3, r2
 800c752:	2200      	movs	r2, #0
 800c754:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	3301      	adds	r3, #1
 800c75a:	613b      	str	r3, [r7, #16]
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	2b0e      	cmp	r3, #14
 800c760:	d9f2      	bls.n	800c748 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c764:	2b00      	cmp	r3, #0
 800c766:	d11c      	bne.n	800c7a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c776:	f043 0302 	orr.w	r3, r3, #2
 800c77a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c780:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c78c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c798:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	639a      	str	r2, [r3, #56]	; 0x38
 800c7a0:	e00b      	b.n	800c7ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	680b      	ldr	r3, [r1, #0]
 800c7d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d10c      	bne.n	800c7fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d104      	bne.n	800c7f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 f949 	bl	800ca80 <USB_SetDevSpeed>
 800c7ee:	e008      	b.n	800c802 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c7f0:	2101      	movs	r1, #1
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f944 	bl	800ca80 <USB_SetDevSpeed>
 800c7f8:	e003      	b.n	800c802 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c7fa:	2103      	movs	r1, #3
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f93f 	bl	800ca80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c802:	2110      	movs	r1, #16
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 f8f3 	bl	800c9f0 <USB_FlushTxFifo>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d001      	beq.n	800c814 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f911 	bl	800ca3c <USB_FlushRxFifo>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d001      	beq.n	800c824 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c820:	2301      	movs	r3, #1
 800c822:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c82a:	461a      	mov	r2, r3
 800c82c:	2300      	movs	r3, #0
 800c82e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c836:	461a      	mov	r2, r3
 800c838:	2300      	movs	r3, #0
 800c83a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c842:	461a      	mov	r2, r3
 800c844:	2300      	movs	r3, #0
 800c846:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c848:	2300      	movs	r3, #0
 800c84a:	613b      	str	r3, [r7, #16]
 800c84c:	e043      	b.n	800c8d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	015a      	lsls	r2, r3, #5
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	4413      	add	r3, r2
 800c856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c864:	d118      	bne.n	800c898 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10a      	bne.n	800c882 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	015a      	lsls	r2, r3, #5
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	4413      	add	r3, r2
 800c874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c878:	461a      	mov	r2, r3
 800c87a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c87e:	6013      	str	r3, [r2, #0]
 800c880:	e013      	b.n	800c8aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	015a      	lsls	r2, r3, #5
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	4413      	add	r3, r2
 800c88a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c88e:	461a      	mov	r2, r3
 800c890:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c894:	6013      	str	r3, [r2, #0]
 800c896:	e008      	b.n	800c8aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	015a      	lsls	r2, r3, #5
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	4413      	add	r3, r2
 800c8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	015a      	lsls	r2, r3, #5
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	015a      	lsls	r2, r3, #5
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c8ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	613b      	str	r3, [r7, #16]
 800c8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d8:	693a      	ldr	r2, [r7, #16]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d3b7      	bcc.n	800c84e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8de:	2300      	movs	r3, #0
 800c8e0:	613b      	str	r3, [r7, #16]
 800c8e2:	e043      	b.n	800c96c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	015a      	lsls	r2, r3, #5
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8fa:	d118      	bne.n	800c92e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d10a      	bne.n	800c918 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	015a      	lsls	r2, r3, #5
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	4413      	add	r3, r2
 800c90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c90e:	461a      	mov	r2, r3
 800c910:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c914:	6013      	str	r3, [r2, #0]
 800c916:	e013      	b.n	800c940 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	015a      	lsls	r2, r3, #5
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	4413      	add	r3, r2
 800c920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c924:	461a      	mov	r2, r3
 800c926:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c92a:	6013      	str	r3, [r2, #0]
 800c92c:	e008      	b.n	800c940 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	015a      	lsls	r2, r3, #5
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	4413      	add	r3, r2
 800c936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c93a:	461a      	mov	r2, r3
 800c93c:	2300      	movs	r3, #0
 800c93e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	015a      	lsls	r2, r3, #5
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	4413      	add	r3, r2
 800c948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c94c:	461a      	mov	r2, r3
 800c94e:	2300      	movs	r3, #0
 800c950:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	015a      	lsls	r2, r3, #5
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	4413      	add	r3, r2
 800c95a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c95e:	461a      	mov	r2, r3
 800c960:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c964:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	3301      	adds	r3, #1
 800c96a:	613b      	str	r3, [r7, #16]
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96e:	693a      	ldr	r2, [r7, #16]
 800c970:	429a      	cmp	r2, r3
 800c972:	d3b7      	bcc.n	800c8e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c982:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c986:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c994:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d105      	bne.n	800c9a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	699b      	ldr	r3, [r3, #24]
 800c9a0:	f043 0210 	orr.w	r2, r3, #16
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	699a      	ldr	r2, [r3, #24]
 800c9ac:	4b0f      	ldr	r3, [pc, #60]	; (800c9ec <USB_DevInit+0x2c4>)
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d005      	beq.n	800c9c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	699b      	ldr	r3, [r3, #24]
 800c9be:	f043 0208 	orr.w	r2, r3, #8
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d107      	bne.n	800c9dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	699b      	ldr	r3, [r3, #24]
 800c9d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9d4:	f043 0304 	orr.w	r3, r3, #4
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3718      	adds	r7, #24
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9e8:	b004      	add	sp, #16
 800c9ea:	4770      	bx	lr
 800c9ec:	803c3800 	.word	0x803c3800

0800c9f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	019b      	lsls	r3, r3, #6
 800ca02:	f043 0220 	orr.w	r2, r3, #32
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	60fb      	str	r3, [r7, #12]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	4a09      	ldr	r2, [pc, #36]	; (800ca38 <USB_FlushTxFifo+0x48>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d901      	bls.n	800ca1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ca18:	2303      	movs	r3, #3
 800ca1a:	e006      	b.n	800ca2a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	691b      	ldr	r3, [r3, #16]
 800ca20:	f003 0320 	and.w	r3, r3, #32
 800ca24:	2b20      	cmp	r3, #32
 800ca26:	d0f0      	beq.n	800ca0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3714      	adds	r7, #20
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	00030d40 	.word	0x00030d40

0800ca3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b085      	sub	sp, #20
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ca44:	2300      	movs	r3, #0
 800ca46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2210      	movs	r2, #16
 800ca4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3301      	adds	r3, #1
 800ca52:	60fb      	str	r3, [r7, #12]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	4a09      	ldr	r2, [pc, #36]	; (800ca7c <USB_FlushRxFifo+0x40>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d901      	bls.n	800ca60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ca5c:	2303      	movs	r3, #3
 800ca5e:	e006      	b.n	800ca6e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	691b      	ldr	r3, [r3, #16]
 800ca64:	f003 0310 	and.w	r3, r3, #16
 800ca68:	2b10      	cmp	r3, #16
 800ca6a:	d0f0      	beq.n	800ca4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ca6c:	2300      	movs	r3, #0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3714      	adds	r7, #20
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	00030d40 	.word	0x00030d40

0800ca80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	460b      	mov	r3, r1
 800ca8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	78fb      	ldrb	r3, [r7, #3]
 800ca9a:	68f9      	ldr	r1, [r7, #12]
 800ca9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800caa0:	4313      	orrs	r3, r2
 800caa2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b087      	sub	sp, #28
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	f003 0306 	and.w	r3, r3, #6
 800caca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d102      	bne.n	800cad8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cad2:	2300      	movs	r3, #0
 800cad4:	75fb      	strb	r3, [r7, #23]
 800cad6:	e00a      	b.n	800caee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d002      	beq.n	800cae4 <USB_GetDevSpeed+0x32>
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2b06      	cmp	r3, #6
 800cae2:	d102      	bne.n	800caea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cae4:	2302      	movs	r3, #2
 800cae6:	75fb      	strb	r3, [r7, #23]
 800cae8:	e001      	b.n	800caee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800caea:	230f      	movs	r3, #15
 800caec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800caee:	7dfb      	ldrb	r3, [r7, #23]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	371c      	adds	r7, #28
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	785b      	ldrb	r3, [r3, #1]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d13a      	bne.n	800cb8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb1e:	69da      	ldr	r2, [r3, #28]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	f003 030f 	and.w	r3, r3, #15
 800cb28:	2101      	movs	r1, #1
 800cb2a:	fa01 f303 	lsl.w	r3, r1, r3
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	68f9      	ldr	r1, [r7, #12]
 800cb32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb36:	4313      	orrs	r3, r2
 800cb38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	015a      	lsls	r2, r3, #5
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	4413      	add	r3, r2
 800cb42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d155      	bne.n	800cbfc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb50:	68bb      	ldr	r3, [r7, #8]
 800cb52:	015a      	lsls	r2, r3, #5
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4413      	add	r3, r2
 800cb58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	78db      	ldrb	r3, [r3, #3]
 800cb6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	059b      	lsls	r3, r3, #22
 800cb72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cb74:	4313      	orrs	r3, r2
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	0151      	lsls	r1, r2, #5
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	440a      	add	r2, r1
 800cb7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb8a:	6013      	str	r3, [r2, #0]
 800cb8c:	e036      	b.n	800cbfc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb94:	69da      	ldr	r2, [r3, #28]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	f003 030f 	and.w	r3, r3, #15
 800cb9e:	2101      	movs	r1, #1
 800cba0:	fa01 f303 	lsl.w	r3, r1, r3
 800cba4:	041b      	lsls	r3, r3, #16
 800cba6:	68f9      	ldr	r1, [r7, #12]
 800cba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbac:	4313      	orrs	r3, r2
 800cbae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	015a      	lsls	r2, r3, #5
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d11a      	bne.n	800cbfc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	015a      	lsls	r2, r3, #5
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	4413      	add	r3, r2
 800cbce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	689b      	ldr	r3, [r3, #8]
 800cbd8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	78db      	ldrb	r3, [r3, #3]
 800cbe0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cbe2:	430b      	orrs	r3, r1
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	0151      	lsls	r1, r2, #5
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	440a      	add	r2, r1
 800cbee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cbf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbfa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3714      	adds	r7, #20
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr
	...

0800cc0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	785b      	ldrb	r3, [r3, #1]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d161      	bne.n	800ccec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	015a      	lsls	r2, r3, #5
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	4413      	add	r3, r2
 800cc30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc3e:	d11f      	bne.n	800cc80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	015a      	lsls	r2, r3, #5
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4413      	add	r3, r2
 800cc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	68ba      	ldr	r2, [r7, #8]
 800cc50:	0151      	lsls	r1, r2, #5
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	440a      	add	r2, r1
 800cc56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	015a      	lsls	r2, r3, #5
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	4413      	add	r3, r2
 800cc68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	68ba      	ldr	r2, [r7, #8]
 800cc70:	0151      	lsls	r1, r2, #5
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	440a      	add	r2, r1
 800cc76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	f003 030f 	and.w	r3, r3, #15
 800cc90:	2101      	movs	r1, #1
 800cc92:	fa01 f303 	lsl.w	r3, r1, r3
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	43db      	mvns	r3, r3
 800cc9a:	68f9      	ldr	r1, [r7, #12]
 800cc9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cca0:	4013      	ands	r3, r2
 800cca2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccaa:	69da      	ldr	r2, [r3, #28]
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	f003 030f 	and.w	r3, r3, #15
 800ccb4:	2101      	movs	r1, #1
 800ccb6:	fa01 f303 	lsl.w	r3, r1, r3
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	43db      	mvns	r3, r3
 800ccbe:	68f9      	ldr	r1, [r7, #12]
 800ccc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	015a      	lsls	r2, r3, #5
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	4413      	add	r3, r2
 800ccd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	0159      	lsls	r1, r3, #5
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	440b      	add	r3, r1
 800ccde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cce2:	4619      	mov	r1, r3
 800cce4:	4b35      	ldr	r3, [pc, #212]	; (800cdbc <USB_DeactivateEndpoint+0x1b0>)
 800cce6:	4013      	ands	r3, r2
 800cce8:	600b      	str	r3, [r1, #0]
 800ccea:	e060      	b.n	800cdae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	015a      	lsls	r2, r3, #5
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd02:	d11f      	bne.n	800cd44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	0151      	lsls	r1, r2, #5
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	440a      	add	r2, r1
 800cd1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cd22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	015a      	lsls	r2, r3, #5
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68ba      	ldr	r2, [r7, #8]
 800cd34:	0151      	lsls	r1, r2, #5
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	440a      	add	r2, r1
 800cd3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	f003 030f 	and.w	r3, r3, #15
 800cd54:	2101      	movs	r1, #1
 800cd56:	fa01 f303 	lsl.w	r3, r1, r3
 800cd5a:	041b      	lsls	r3, r3, #16
 800cd5c:	43db      	mvns	r3, r3
 800cd5e:	68f9      	ldr	r1, [r7, #12]
 800cd60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd64:	4013      	ands	r3, r2
 800cd66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd6e:	69da      	ldr	r2, [r3, #28]
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	f003 030f 	and.w	r3, r3, #15
 800cd78:	2101      	movs	r1, #1
 800cd7a:	fa01 f303 	lsl.w	r3, r1, r3
 800cd7e:	041b      	lsls	r3, r3, #16
 800cd80:	43db      	mvns	r3, r3
 800cd82:	68f9      	ldr	r1, [r7, #12]
 800cd84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd88:	4013      	ands	r3, r2
 800cd8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	015a      	lsls	r2, r3, #5
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	4413      	add	r3, r2
 800cd94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	0159      	lsls	r1, r3, #5
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	440b      	add	r3, r1
 800cda2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda6:	4619      	mov	r1, r3
 800cda8:	4b05      	ldr	r3, [pc, #20]	; (800cdc0 <USB_DeactivateEndpoint+0x1b4>)
 800cdaa:	4013      	ands	r3, r2
 800cdac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cdae:	2300      	movs	r3, #0
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	ec337800 	.word	0xec337800
 800cdc0:	eff37800 	.word	0xeff37800

0800cdc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b08a      	sub	sp, #40	; 0x28
 800cdc8:	af02      	add	r7, sp, #8
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	60b9      	str	r1, [r7, #8]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	785b      	ldrb	r3, [r3, #1]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	f040 815c 	bne.w	800d09e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	695b      	ldr	r3, [r3, #20]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d132      	bne.n	800ce54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	015a      	lsls	r2, r3, #5
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdfa:	691b      	ldr	r3, [r3, #16]
 800cdfc:	69ba      	ldr	r2, [r7, #24]
 800cdfe:	0151      	lsls	r1, r2, #5
 800ce00:	69fa      	ldr	r2, [r7, #28]
 800ce02:	440a      	add	r2, r1
 800ce04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ce0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ce10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	015a      	lsls	r2, r3, #5
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	4413      	add	r3, r2
 800ce1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce1e:	691b      	ldr	r3, [r3, #16]
 800ce20:	69ba      	ldr	r2, [r7, #24]
 800ce22:	0151      	lsls	r1, r2, #5
 800ce24:	69fa      	ldr	r2, [r7, #28]
 800ce26:	440a      	add	r2, r1
 800ce28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	015a      	lsls	r2, r3, #5
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	4413      	add	r3, r2
 800ce3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce3e:	691b      	ldr	r3, [r3, #16]
 800ce40:	69ba      	ldr	r2, [r7, #24]
 800ce42:	0151      	lsls	r1, r2, #5
 800ce44:	69fa      	ldr	r2, [r7, #28]
 800ce46:	440a      	add	r2, r1
 800ce48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce4c:	0cdb      	lsrs	r3, r3, #19
 800ce4e:	04db      	lsls	r3, r3, #19
 800ce50:	6113      	str	r3, [r2, #16]
 800ce52:	e074      	b.n	800cf3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	015a      	lsls	r2, r3, #5
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	69ba      	ldr	r2, [r7, #24]
 800ce64:	0151      	lsls	r1, r2, #5
 800ce66:	69fa      	ldr	r2, [r7, #28]
 800ce68:	440a      	add	r2, r1
 800ce6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce6e:	0cdb      	lsrs	r3, r3, #19
 800ce70:	04db      	lsls	r3, r3, #19
 800ce72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	015a      	lsls	r2, r3, #5
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce80:	691b      	ldr	r3, [r3, #16]
 800ce82:	69ba      	ldr	r2, [r7, #24]
 800ce84:	0151      	lsls	r1, r2, #5
 800ce86:	69fa      	ldr	r2, [r7, #28]
 800ce88:	440a      	add	r2, r1
 800ce8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ce92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ce96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	015a      	lsls	r2, r3, #5
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	4413      	add	r3, r2
 800cea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea4:	691a      	ldr	r2, [r3, #16]
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	6959      	ldr	r1, [r3, #20]
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	689b      	ldr	r3, [r3, #8]
 800ceae:	440b      	add	r3, r1
 800ceb0:	1e59      	subs	r1, r3, #1
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	fbb1 f3f3 	udiv	r3, r1, r3
 800ceba:	04d9      	lsls	r1, r3, #19
 800cebc:	4b9d      	ldr	r3, [pc, #628]	; (800d134 <USB_EPStartXfer+0x370>)
 800cebe:	400b      	ands	r3, r1
 800cec0:	69b9      	ldr	r1, [r7, #24]
 800cec2:	0148      	lsls	r0, r1, #5
 800cec4:	69f9      	ldr	r1, [r7, #28]
 800cec6:	4401      	add	r1, r0
 800cec8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cecc:	4313      	orrs	r3, r2
 800cece:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	015a      	lsls	r2, r3, #5
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	4413      	add	r3, r2
 800ced8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cedc:	691a      	ldr	r2, [r3, #16]
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	695b      	ldr	r3, [r3, #20]
 800cee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cee6:	69b9      	ldr	r1, [r7, #24]
 800cee8:	0148      	lsls	r0, r1, #5
 800ceea:	69f9      	ldr	r1, [r7, #28]
 800ceec:	4401      	add	r1, r0
 800ceee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cef2:	4313      	orrs	r3, r2
 800cef4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	78db      	ldrb	r3, [r3, #3]
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d11f      	bne.n	800cf3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	015a      	lsls	r2, r3, #5
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	4413      	add	r3, r2
 800cf06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf0a:	691b      	ldr	r3, [r3, #16]
 800cf0c:	69ba      	ldr	r2, [r7, #24]
 800cf0e:	0151      	lsls	r1, r2, #5
 800cf10:	69fa      	ldr	r2, [r7, #28]
 800cf12:	440a      	add	r2, r1
 800cf14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800cf1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	015a      	lsls	r2, r3, #5
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	4413      	add	r3, r2
 800cf26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf2a:	691b      	ldr	r3, [r3, #16]
 800cf2c:	69ba      	ldr	r2, [r7, #24]
 800cf2e:	0151      	lsls	r1, r2, #5
 800cf30:	69fa      	ldr	r2, [r7, #28]
 800cf32:	440a      	add	r2, r1
 800cf34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800cf3e:	79fb      	ldrb	r3, [r7, #7]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d14b      	bne.n	800cfdc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d009      	beq.n	800cf60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	015a      	lsls	r2, r3, #5
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	4413      	add	r3, r2
 800cf54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf58:	461a      	mov	r2, r3
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	691b      	ldr	r3, [r3, #16]
 800cf5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	78db      	ldrb	r3, [r3, #3]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d128      	bne.n	800cfba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cf68:	69fb      	ldr	r3, [r7, #28]
 800cf6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d110      	bne.n	800cf9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	015a      	lsls	r2, r3, #5
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	4413      	add	r3, r2
 800cf80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	69ba      	ldr	r2, [r7, #24]
 800cf88:	0151      	lsls	r1, r2, #5
 800cf8a:	69fa      	ldr	r2, [r7, #28]
 800cf8c:	440a      	add	r2, r1
 800cf8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf96:	6013      	str	r3, [r2, #0]
 800cf98:	e00f      	b.n	800cfba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	015a      	lsls	r2, r3, #5
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	69ba      	ldr	r2, [r7, #24]
 800cfaa:	0151      	lsls	r1, r2, #5
 800cfac:	69fa      	ldr	r2, [r7, #28]
 800cfae:	440a      	add	r2, r1
 800cfb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfb8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	015a      	lsls	r2, r3, #5
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	69ba      	ldr	r2, [r7, #24]
 800cfca:	0151      	lsls	r1, r2, #5
 800cfcc:	69fa      	ldr	r2, [r7, #28]
 800cfce:	440a      	add	r2, r1
 800cfd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cfd8:	6013      	str	r3, [r2, #0]
 800cfda:	e12f      	b.n	800d23c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cfdc:	69bb      	ldr	r3, [r7, #24]
 800cfde:	015a      	lsls	r2, r3, #5
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	69ba      	ldr	r2, [r7, #24]
 800cfec:	0151      	lsls	r1, r2, #5
 800cfee:	69fa      	ldr	r2, [r7, #28]
 800cff0:	440a      	add	r2, r1
 800cff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cff6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cffa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	78db      	ldrb	r3, [r3, #3]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d015      	beq.n	800d030 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	695b      	ldr	r3, [r3, #20]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 8117 	beq.w	800d23c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	f003 030f 	and.w	r3, r3, #15
 800d01e:	2101      	movs	r1, #1
 800d020:	fa01 f303 	lsl.w	r3, r1, r3
 800d024:	69f9      	ldr	r1, [r7, #28]
 800d026:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d02a:	4313      	orrs	r3, r2
 800d02c:	634b      	str	r3, [r1, #52]	; 0x34
 800d02e:	e105      	b.n	800d23c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d110      	bne.n	800d062 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	015a      	lsls	r2, r3, #5
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	4413      	add	r3, r2
 800d048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	69ba      	ldr	r2, [r7, #24]
 800d050:	0151      	lsls	r1, r2, #5
 800d052:	69fa      	ldr	r2, [r7, #28]
 800d054:	440a      	add	r2, r1
 800d056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d05a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d05e:	6013      	str	r3, [r2, #0]
 800d060:	e00f      	b.n	800d082 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	015a      	lsls	r2, r3, #5
 800d066:	69fb      	ldr	r3, [r7, #28]
 800d068:	4413      	add	r3, r2
 800d06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	69ba      	ldr	r2, [r7, #24]
 800d072:	0151      	lsls	r1, r2, #5
 800d074:	69fa      	ldr	r2, [r7, #28]
 800d076:	440a      	add	r2, r1
 800d078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d07c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d080:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	68d9      	ldr	r1, [r3, #12]
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	781a      	ldrb	r2, [r3, #0]
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	695b      	ldr	r3, [r3, #20]
 800d08e:	b298      	uxth	r0, r3
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	9300      	str	r3, [sp, #0]
 800d094:	4603      	mov	r3, r0
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f000 fa2b 	bl	800d4f2 <USB_WritePacket>
 800d09c:	e0ce      	b.n	800d23c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	015a      	lsls	r2, r3, #5
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0aa:	691b      	ldr	r3, [r3, #16]
 800d0ac:	69ba      	ldr	r2, [r7, #24]
 800d0ae:	0151      	lsls	r1, r2, #5
 800d0b0:	69fa      	ldr	r2, [r7, #28]
 800d0b2:	440a      	add	r2, r1
 800d0b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0b8:	0cdb      	lsrs	r3, r3, #19
 800d0ba:	04db      	lsls	r3, r3, #19
 800d0bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	015a      	lsls	r2, r3, #5
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0ca:	691b      	ldr	r3, [r3, #16]
 800d0cc:	69ba      	ldr	r2, [r7, #24]
 800d0ce:	0151      	lsls	r1, r2, #5
 800d0d0:	69fa      	ldr	r2, [r7, #28]
 800d0d2:	440a      	add	r2, r1
 800d0d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d0dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d0e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d126      	bne.n	800d138 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	015a      	lsls	r2, r3, #5
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0f6:	691a      	ldr	r2, [r3, #16]
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d100:	69b9      	ldr	r1, [r7, #24]
 800d102:	0148      	lsls	r0, r1, #5
 800d104:	69f9      	ldr	r1, [r7, #28]
 800d106:	4401      	add	r1, r0
 800d108:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d10c:	4313      	orrs	r3, r2
 800d10e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	015a      	lsls	r2, r3, #5
 800d114:	69fb      	ldr	r3, [r7, #28]
 800d116:	4413      	add	r3, r2
 800d118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d11c:	691b      	ldr	r3, [r3, #16]
 800d11e:	69ba      	ldr	r2, [r7, #24]
 800d120:	0151      	lsls	r1, r2, #5
 800d122:	69fa      	ldr	r2, [r7, #28]
 800d124:	440a      	add	r2, r1
 800d126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d12a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d12e:	6113      	str	r3, [r2, #16]
 800d130:	e036      	b.n	800d1a0 <USB_EPStartXfer+0x3dc>
 800d132:	bf00      	nop
 800d134:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	695a      	ldr	r2, [r3, #20]
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	4413      	add	r3, r2
 800d142:	1e5a      	subs	r2, r3, #1
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	fbb2 f3f3 	udiv	r3, r2, r3
 800d14c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	015a      	lsls	r2, r3, #5
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	4413      	add	r3, r2
 800d156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d15a:	691a      	ldr	r2, [r3, #16]
 800d15c:	8afb      	ldrh	r3, [r7, #22]
 800d15e:	04d9      	lsls	r1, r3, #19
 800d160:	4b39      	ldr	r3, [pc, #228]	; (800d248 <USB_EPStartXfer+0x484>)
 800d162:	400b      	ands	r3, r1
 800d164:	69b9      	ldr	r1, [r7, #24]
 800d166:	0148      	lsls	r0, r1, #5
 800d168:	69f9      	ldr	r1, [r7, #28]
 800d16a:	4401      	add	r1, r0
 800d16c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d170:	4313      	orrs	r3, r2
 800d172:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d174:	69bb      	ldr	r3, [r7, #24]
 800d176:	015a      	lsls	r2, r3, #5
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	4413      	add	r3, r2
 800d17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d180:	691a      	ldr	r2, [r3, #16]
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	8af9      	ldrh	r1, [r7, #22]
 800d188:	fb01 f303 	mul.w	r3, r1, r3
 800d18c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d190:	69b9      	ldr	r1, [r7, #24]
 800d192:	0148      	lsls	r0, r1, #5
 800d194:	69f9      	ldr	r1, [r7, #28]
 800d196:	4401      	add	r1, r0
 800d198:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d19c:	4313      	orrs	r3, r2
 800d19e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d1a0:	79fb      	ldrb	r3, [r7, #7]
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d10d      	bne.n	800d1c2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	68db      	ldr	r3, [r3, #12]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d009      	beq.n	800d1c2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	68d9      	ldr	r1, [r3, #12]
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	015a      	lsls	r2, r3, #5
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1be:	460a      	mov	r2, r1
 800d1c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	78db      	ldrb	r3, [r3, #3]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d128      	bne.n	800d21c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d110      	bne.n	800d1fc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	015a      	lsls	r2, r3, #5
 800d1de:	69fb      	ldr	r3, [r7, #28]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	69ba      	ldr	r2, [r7, #24]
 800d1ea:	0151      	lsls	r1, r2, #5
 800d1ec:	69fa      	ldr	r2, [r7, #28]
 800d1ee:	440a      	add	r2, r1
 800d1f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d1f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d1f8:	6013      	str	r3, [r2, #0]
 800d1fa:	e00f      	b.n	800d21c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	015a      	lsls	r2, r3, #5
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	4413      	add	r3, r2
 800d204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	69ba      	ldr	r2, [r7, #24]
 800d20c:	0151      	lsls	r1, r2, #5
 800d20e:	69fa      	ldr	r2, [r7, #28]
 800d210:	440a      	add	r2, r1
 800d212:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d21a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	015a      	lsls	r2, r3, #5
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	4413      	add	r3, r2
 800d224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	69ba      	ldr	r2, [r7, #24]
 800d22c:	0151      	lsls	r1, r2, #5
 800d22e:	69fa      	ldr	r2, [r7, #28]
 800d230:	440a      	add	r2, r1
 800d232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d236:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d23a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3720      	adds	r7, #32
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	1ff80000 	.word	0x1ff80000

0800d24c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b087      	sub	sp, #28
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	4613      	mov	r3, r2
 800d258:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	785b      	ldrb	r3, [r3, #1]
 800d268:	2b01      	cmp	r3, #1
 800d26a:	f040 80cd 	bne.w	800d408 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	695b      	ldr	r3, [r3, #20]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d132      	bne.n	800d2dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	015a      	lsls	r2, r3, #5
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	4413      	add	r3, r2
 800d27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	693a      	ldr	r2, [r7, #16]
 800d286:	0151      	lsls	r1, r2, #5
 800d288:	697a      	ldr	r2, [r7, #20]
 800d28a:	440a      	add	r2, r1
 800d28c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d290:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d294:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d298:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	015a      	lsls	r2, r3, #5
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	4413      	add	r3, r2
 800d2a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2a6:	691b      	ldr	r3, [r3, #16]
 800d2a8:	693a      	ldr	r2, [r7, #16]
 800d2aa:	0151      	lsls	r1, r2, #5
 800d2ac:	697a      	ldr	r2, [r7, #20]
 800d2ae:	440a      	add	r2, r1
 800d2b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d2b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	015a      	lsls	r2, r3, #5
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	4413      	add	r3, r2
 800d2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	693a      	ldr	r2, [r7, #16]
 800d2ca:	0151      	lsls	r1, r2, #5
 800d2cc:	697a      	ldr	r2, [r7, #20]
 800d2ce:	440a      	add	r2, r1
 800d2d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2d4:	0cdb      	lsrs	r3, r3, #19
 800d2d6:	04db      	lsls	r3, r3, #19
 800d2d8:	6113      	str	r3, [r2, #16]
 800d2da:	e04e      	b.n	800d37a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	015a      	lsls	r2, r3, #5
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	693a      	ldr	r2, [r7, #16]
 800d2ec:	0151      	lsls	r1, r2, #5
 800d2ee:	697a      	ldr	r2, [r7, #20]
 800d2f0:	440a      	add	r2, r1
 800d2f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2f6:	0cdb      	lsrs	r3, r3, #19
 800d2f8:	04db      	lsls	r3, r3, #19
 800d2fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	015a      	lsls	r2, r3, #5
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	4413      	add	r3, r2
 800d304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d308:	691b      	ldr	r3, [r3, #16]
 800d30a:	693a      	ldr	r2, [r7, #16]
 800d30c:	0151      	lsls	r1, r2, #5
 800d30e:	697a      	ldr	r2, [r7, #20]
 800d310:	440a      	add	r2, r1
 800d312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d316:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d31a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d31e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	695a      	ldr	r2, [r3, #20]
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d903      	bls.n	800d334 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	689a      	ldr	r2, [r3, #8]
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	015a      	lsls	r2, r3, #5
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	4413      	add	r3, r2
 800d33c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d340:	691b      	ldr	r3, [r3, #16]
 800d342:	693a      	ldr	r2, [r7, #16]
 800d344:	0151      	lsls	r1, r2, #5
 800d346:	697a      	ldr	r2, [r7, #20]
 800d348:	440a      	add	r2, r1
 800d34a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d34e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d352:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	015a      	lsls	r2, r3, #5
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	4413      	add	r3, r2
 800d35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d360:	691a      	ldr	r2, [r3, #16]
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	695b      	ldr	r3, [r3, #20]
 800d366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d36a:	6939      	ldr	r1, [r7, #16]
 800d36c:	0148      	lsls	r0, r1, #5
 800d36e:	6979      	ldr	r1, [r7, #20]
 800d370:	4401      	add	r1, r0
 800d372:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d376:	4313      	orrs	r3, r2
 800d378:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d37a:	79fb      	ldrb	r3, [r7, #7]
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d11e      	bne.n	800d3be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d009      	beq.n	800d39c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	015a      	lsls	r2, r3, #5
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	4413      	add	r3, r2
 800d390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d394:	461a      	mov	r2, r3
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	691b      	ldr	r3, [r3, #16]
 800d39a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	015a      	lsls	r2, r3, #5
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	693a      	ldr	r2, [r7, #16]
 800d3ac:	0151      	lsls	r1, r2, #5
 800d3ae:	697a      	ldr	r2, [r7, #20]
 800d3b0:	440a      	add	r2, r1
 800d3b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3ba:	6013      	str	r3, [r2, #0]
 800d3bc:	e092      	b.n	800d4e4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	015a      	lsls	r2, r3, #5
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	693a      	ldr	r2, [r7, #16]
 800d3ce:	0151      	lsls	r1, r2, #5
 800d3d0:	697a      	ldr	r2, [r7, #20]
 800d3d2:	440a      	add	r2, r1
 800d3d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	695b      	ldr	r3, [r3, #20]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d07e      	beq.n	800d4e4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	f003 030f 	and.w	r3, r3, #15
 800d3f6:	2101      	movs	r1, #1
 800d3f8:	fa01 f303 	lsl.w	r3, r1, r3
 800d3fc:	6979      	ldr	r1, [r7, #20]
 800d3fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d402:	4313      	orrs	r3, r2
 800d404:	634b      	str	r3, [r1, #52]	; 0x34
 800d406:	e06d      	b.n	800d4e4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	015a      	lsls	r2, r3, #5
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	4413      	add	r3, r2
 800d410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	693a      	ldr	r2, [r7, #16]
 800d418:	0151      	lsls	r1, r2, #5
 800d41a:	697a      	ldr	r2, [r7, #20]
 800d41c:	440a      	add	r2, r1
 800d41e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d422:	0cdb      	lsrs	r3, r3, #19
 800d424:	04db      	lsls	r3, r3, #19
 800d426:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d428:	693b      	ldr	r3, [r7, #16]
 800d42a:	015a      	lsls	r2, r3, #5
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	4413      	add	r3, r2
 800d430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d434:	691b      	ldr	r3, [r3, #16]
 800d436:	693a      	ldr	r2, [r7, #16]
 800d438:	0151      	lsls	r1, r2, #5
 800d43a:	697a      	ldr	r2, [r7, #20]
 800d43c:	440a      	add	r2, r1
 800d43e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d442:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d446:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d44a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	695b      	ldr	r3, [r3, #20]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d003      	beq.n	800d45c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	689a      	ldr	r2, [r3, #8]
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	015a      	lsls	r2, r3, #5
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	4413      	add	r3, r2
 800d464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d468:	691b      	ldr	r3, [r3, #16]
 800d46a:	693a      	ldr	r2, [r7, #16]
 800d46c:	0151      	lsls	r1, r2, #5
 800d46e:	697a      	ldr	r2, [r7, #20]
 800d470:	440a      	add	r2, r1
 800d472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d47a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	015a      	lsls	r2, r3, #5
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	4413      	add	r3, r2
 800d484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d488:	691a      	ldr	r2, [r3, #16]
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d492:	6939      	ldr	r1, [r7, #16]
 800d494:	0148      	lsls	r0, r1, #5
 800d496:	6979      	ldr	r1, [r7, #20]
 800d498:	4401      	add	r1, r0
 800d49a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d4a2:	79fb      	ldrb	r3, [r7, #7]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d10d      	bne.n	800d4c4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d009      	beq.n	800d4c4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	68d9      	ldr	r1, [r3, #12]
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	015a      	lsls	r2, r3, #5
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4c0:	460a      	mov	r2, r1
 800d4c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	015a      	lsls	r2, r3, #5
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	693a      	ldr	r2, [r7, #16]
 800d4d4:	0151      	lsls	r1, r2, #5
 800d4d6:	697a      	ldr	r2, [r7, #20]
 800d4d8:	440a      	add	r2, r1
 800d4da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d4de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d4e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d4e4:	2300      	movs	r3, #0
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	371c      	adds	r7, #28
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr

0800d4f2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d4f2:	b480      	push	{r7}
 800d4f4:	b089      	sub	sp, #36	; 0x24
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	60f8      	str	r0, [r7, #12]
 800d4fa:	60b9      	str	r1, [r7, #8]
 800d4fc:	4611      	mov	r1, r2
 800d4fe:	461a      	mov	r2, r3
 800d500:	460b      	mov	r3, r1
 800d502:	71fb      	strb	r3, [r7, #7]
 800d504:	4613      	mov	r3, r2
 800d506:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d510:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d514:	2b00      	cmp	r3, #0
 800d516:	d11a      	bne.n	800d54e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d518:	88bb      	ldrh	r3, [r7, #4]
 800d51a:	3303      	adds	r3, #3
 800d51c:	089b      	lsrs	r3, r3, #2
 800d51e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d520:	2300      	movs	r3, #0
 800d522:	61bb      	str	r3, [r7, #24]
 800d524:	e00f      	b.n	800d546 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d526:	79fb      	ldrb	r3, [r7, #7]
 800d528:	031a      	lsls	r2, r3, #12
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	4413      	add	r3, r2
 800d52e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d532:	461a      	mov	r2, r3
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	3304      	adds	r3, #4
 800d53e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	3301      	adds	r3, #1
 800d544:	61bb      	str	r3, [r7, #24]
 800d546:	69ba      	ldr	r2, [r7, #24]
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d3eb      	bcc.n	800d526 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d54e:	2300      	movs	r3, #0
}
 800d550:	4618      	mov	r0, r3
 800d552:	3724      	adds	r7, #36	; 0x24
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b089      	sub	sp, #36	; 0x24
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	4613      	mov	r3, r2
 800d568:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d572:	88fb      	ldrh	r3, [r7, #6]
 800d574:	3303      	adds	r3, #3
 800d576:	089b      	lsrs	r3, r3, #2
 800d578:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d57a:	2300      	movs	r3, #0
 800d57c:	61bb      	str	r3, [r7, #24]
 800d57e:	e00b      	b.n	800d598 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	601a      	str	r2, [r3, #0]
    pDest++;
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	3304      	adds	r3, #4
 800d590:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	3301      	adds	r3, #1
 800d596:	61bb      	str	r3, [r7, #24]
 800d598:	69ba      	ldr	r2, [r7, #24]
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d3ef      	bcc.n	800d580 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d5a0:	69fb      	ldr	r3, [r7, #28]
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3724      	adds	r7, #36	; 0x24
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b085      	sub	sp, #20
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	785b      	ldrb	r3, [r3, #1]
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	d12c      	bne.n	800d624 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	015a      	lsls	r2, r3, #5
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	4413      	add	r3, r2
 800d5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	db12      	blt.n	800d602 <USB_EPSetStall+0x54>
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d00f      	beq.n	800d602 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	015a      	lsls	r2, r3, #5
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	0151      	lsls	r1, r2, #5
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	440a      	add	r2, r1
 800d5f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d600:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	015a      	lsls	r2, r3, #5
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	4413      	add	r3, r2
 800d60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	68ba      	ldr	r2, [r7, #8]
 800d612:	0151      	lsls	r1, r2, #5
 800d614:	68fa      	ldr	r2, [r7, #12]
 800d616:	440a      	add	r2, r1
 800d618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d61c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d620:	6013      	str	r3, [r2, #0]
 800d622:	e02b      	b.n	800d67c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	015a      	lsls	r2, r3, #5
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	4413      	add	r3, r2
 800d62c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	db12      	blt.n	800d65c <USB_EPSetStall+0xae>
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d00f      	beq.n	800d65c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	015a      	lsls	r2, r3, #5
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	4413      	add	r3, r2
 800d644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	0151      	lsls	r1, r2, #5
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	440a      	add	r2, r1
 800d652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d656:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d65a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	015a      	lsls	r2, r3, #5
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	4413      	add	r3, r2
 800d664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	68ba      	ldr	r2, [r7, #8]
 800d66c:	0151      	lsls	r1, r2, #5
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	440a      	add	r2, r1
 800d672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d67a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d67c:	2300      	movs	r3, #0
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3714      	adds	r7, #20
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr

0800d68a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d68a:	b480      	push	{r7}
 800d68c:	b085      	sub	sp, #20
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
 800d692:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	785b      	ldrb	r3, [r3, #1]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d128      	bne.n	800d6f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	015a      	lsls	r2, r3, #5
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	68ba      	ldr	r2, [r7, #8]
 800d6b6:	0151      	lsls	r1, r2, #5
 800d6b8:	68fa      	ldr	r2, [r7, #12]
 800d6ba:	440a      	add	r2, r1
 800d6bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d6c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	78db      	ldrb	r3, [r3, #3]
 800d6ca:	2b03      	cmp	r3, #3
 800d6cc:	d003      	beq.n	800d6d6 <USB_EPClearStall+0x4c>
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	78db      	ldrb	r3, [r3, #3]
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	d138      	bne.n	800d748 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	015a      	lsls	r2, r3, #5
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	4413      	add	r3, r2
 800d6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	68ba      	ldr	r2, [r7, #8]
 800d6e6:	0151      	lsls	r1, r2, #5
 800d6e8:	68fa      	ldr	r2, [r7, #12]
 800d6ea:	440a      	add	r2, r1
 800d6ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d6f4:	6013      	str	r3, [r2, #0]
 800d6f6:	e027      	b.n	800d748 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	015a      	lsls	r2, r3, #5
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	4413      	add	r3, r2
 800d700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	68ba      	ldr	r2, [r7, #8]
 800d708:	0151      	lsls	r1, r2, #5
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	440a      	add	r2, r1
 800d70e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d712:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d716:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	78db      	ldrb	r3, [r3, #3]
 800d71c:	2b03      	cmp	r3, #3
 800d71e:	d003      	beq.n	800d728 <USB_EPClearStall+0x9e>
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	78db      	ldrb	r3, [r3, #3]
 800d724:	2b02      	cmp	r3, #2
 800d726:	d10f      	bne.n	800d748 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	015a      	lsls	r2, r3, #5
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	4413      	add	r3, r2
 800d730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	68ba      	ldr	r2, [r7, #8]
 800d738:	0151      	lsls	r1, r2, #5
 800d73a:	68fa      	ldr	r2, [r7, #12]
 800d73c:	440a      	add	r2, r1
 800d73e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d746:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3714      	adds	r7, #20
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr

0800d756 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d756:	b480      	push	{r7}
 800d758:	b085      	sub	sp, #20
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
 800d75e:	460b      	mov	r3, r1
 800d760:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	68fa      	ldr	r2, [r7, #12]
 800d770:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d774:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d778:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	78fb      	ldrb	r3, [r7, #3]
 800d784:	011b      	lsls	r3, r3, #4
 800d786:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d78a:	68f9      	ldr	r1, [r7, #12]
 800d78c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d790:	4313      	orrs	r3, r2
 800d792:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	3714      	adds	r7, #20
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d7a2:	b480      	push	{r7}
 800d7a4:	b085      	sub	sp, #20
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	68fa      	ldr	r2, [r7, #12]
 800d7b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d7bc:	f023 0303 	bic.w	r3, r3, #3
 800d7c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7c8:	685b      	ldr	r3, [r3, #4]
 800d7ca:	68fa      	ldr	r2, [r7, #12]
 800d7cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d7d0:	f023 0302 	bic.w	r3, r3, #2
 800d7d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d7d6:	2300      	movs	r3, #0
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3714      	adds	r7, #20
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d7fe:	f023 0303 	bic.w	r3, r3, #3
 800d802:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	68fa      	ldr	r2, [r7, #12]
 800d80e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d812:	f043 0302 	orr.w	r3, r3, #2
 800d816:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3714      	adds	r7, #20
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d826:	b480      	push	{r7}
 800d828:	b085      	sub	sp, #20
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	699b      	ldr	r3, [r3, #24]
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	4013      	ands	r3, r2
 800d83c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d83e:	68fb      	ldr	r3, [r7, #12]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3714      	adds	r7, #20
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b085      	sub	sp, #20
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d85e:	699b      	ldr	r3, [r3, #24]
 800d860:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d868:	69db      	ldr	r3, [r3, #28]
 800d86a:	68ba      	ldr	r2, [r7, #8]
 800d86c:	4013      	ands	r3, r2
 800d86e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	0c1b      	lsrs	r3, r3, #16
}
 800d874:	4618      	mov	r0, r3
 800d876:	3714      	adds	r7, #20
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d892:	699b      	ldr	r3, [r3, #24]
 800d894:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d89c:	69db      	ldr	r3, [r3, #28]
 800d89e:	68ba      	ldr	r2, [r7, #8]
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	b29b      	uxth	r3, r3
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3714      	adds	r7, #20
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d8c4:	78fb      	ldrb	r3, [r7, #3]
 800d8c6:	015a      	lsls	r2, r3, #5
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8da:	695b      	ldr	r3, [r3, #20]
 800d8dc:	68ba      	ldr	r2, [r7, #8]
 800d8de:	4013      	ands	r3, r2
 800d8e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d8e2:	68bb      	ldr	r3, [r7, #8]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3714      	adds	r7, #20
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b087      	sub	sp, #28
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d906:	691b      	ldr	r3, [r3, #16]
 800d908:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d912:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d914:	78fb      	ldrb	r3, [r7, #3]
 800d916:	f003 030f 	and.w	r3, r3, #15
 800d91a:	68fa      	ldr	r2, [r7, #12]
 800d91c:	fa22 f303 	lsr.w	r3, r2, r3
 800d920:	01db      	lsls	r3, r3, #7
 800d922:	b2db      	uxtb	r3, r3
 800d924:	693a      	ldr	r2, [r7, #16]
 800d926:	4313      	orrs	r3, r2
 800d928:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d92a:	78fb      	ldrb	r3, [r7, #3]
 800d92c:	015a      	lsls	r2, r3, #5
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	4413      	add	r3, r2
 800d932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	693a      	ldr	r2, [r7, #16]
 800d93a:	4013      	ands	r3, r2
 800d93c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d93e:	68bb      	ldr	r3, [r7, #8]
}
 800d940:	4618      	mov	r0, r3
 800d942:	371c      	adds	r7, #28
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr

0800d94c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	695b      	ldr	r3, [r3, #20]
 800d958:	f003 0301 	and.w	r3, r3, #1
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr

0800d968 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	68fa      	ldr	r2, [r7, #12]
 800d97e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d982:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d986:	f023 0307 	bic.w	r3, r3, #7
 800d98a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d99a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d99e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9a0:	2300      	movs	r3, #0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3714      	adds	r7, #20
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr
	...

0800d9b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b087      	sub	sp, #28
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	607a      	str	r2, [r7, #4]
 800d9bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	333c      	adds	r3, #60	; 0x3c
 800d9c6:	3304      	adds	r3, #4
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	4a26      	ldr	r2, [pc, #152]	; (800da68 <USB_EP0_OutStart+0xb8>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d90a      	bls.n	800d9ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d9e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d9e4:	d101      	bne.n	800d9ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	e037      	b.n	800da5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9fc:	691b      	ldr	r3, [r3, #16]
 800d9fe:	697a      	ldr	r2, [r7, #20]
 800da00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da10:	691b      	ldr	r3, [r3, #16]
 800da12:	697a      	ldr	r2, [r7, #20]
 800da14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da18:	f043 0318 	orr.w	r3, r3, #24
 800da1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	697a      	ldr	r2, [r7, #20]
 800da28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800da30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800da32:	7afb      	ldrb	r3, [r7, #11]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d10f      	bne.n	800da58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da3e:	461a      	mov	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	697a      	ldr	r2, [r7, #20]
 800da4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800da56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800da58:	2300      	movs	r3, #0
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	371c      	adds	r7, #28
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr
 800da66:	bf00      	nop
 800da68:	4f54300a 	.word	0x4f54300a

0800da6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b085      	sub	sp, #20
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800da74:	2300      	movs	r3, #0
 800da76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	3301      	adds	r3, #1
 800da7c:	60fb      	str	r3, [r7, #12]
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	4a13      	ldr	r2, [pc, #76]	; (800dad0 <USB_CoreReset+0x64>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d901      	bls.n	800da8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800da86:	2303      	movs	r3, #3
 800da88:	e01b      	b.n	800dac2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	daf2      	bge.n	800da78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800da92:	2300      	movs	r3, #0
 800da94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	691b      	ldr	r3, [r3, #16]
 800da9a:	f043 0201 	orr.w	r2, r3, #1
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	3301      	adds	r3, #1
 800daa6:	60fb      	str	r3, [r7, #12]
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	4a09      	ldr	r2, [pc, #36]	; (800dad0 <USB_CoreReset+0x64>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d901      	bls.n	800dab4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dab0:	2303      	movs	r3, #3
 800dab2:	e006      	b.n	800dac2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	691b      	ldr	r3, [r3, #16]
 800dab8:	f003 0301 	and.w	r3, r3, #1
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	d0f0      	beq.n	800daa2 <USB_CoreReset+0x36>

  return HAL_OK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3714      	adds	r7, #20
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop
 800dad0:	00030d40 	.word	0x00030d40

0800dad4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800dad8:	4904      	ldr	r1, [pc, #16]	; (800daec <MX_FATFS_Init+0x18>)
 800dada:	4805      	ldr	r0, [pc, #20]	; (800daf0 <MX_FATFS_Init+0x1c>)
 800dadc:	f004 fd06 	bl	80124ec <FATFS_LinkDriver>
 800dae0:	4603      	mov	r3, r0
 800dae2:	461a      	mov	r2, r3
 800dae4:	4b03      	ldr	r3, [pc, #12]	; (800daf4 <MX_FATFS_Init+0x20>)
 800dae6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dae8:	bf00      	nop
 800daea:	bd80      	pop	{r7, pc}
 800daec:	20001a8c 	.word	0x20001a8c
 800daf0:	20000010 	.word	0x20000010
 800daf4:	20001a88 	.word	0x20001a88

0800daf8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800daf8:	b480      	push	{r7}
 800dafa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dafc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dafe:	4618      	mov	r0, r3
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	4603      	mov	r3, r0
 800db10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800db12:	79fb      	ldrb	r3, [r7, #7]
 800db14:	4618      	mov	r0, r3
 800db16:	f000 f9dd 	bl	800ded4 <USER_SPI_initialize>
 800db1a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	4603      	mov	r3, r0
 800db2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800db2e:	79fb      	ldrb	r3, [r7, #7]
 800db30:	4618      	mov	r0, r3
 800db32:	f000 fabb 	bl	800e0ac <USER_SPI_status>
 800db36:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	60b9      	str	r1, [r7, #8]
 800db48:	607a      	str	r2, [r7, #4]
 800db4a:	603b      	str	r3, [r7, #0]
 800db4c:	4603      	mov	r3, r0
 800db4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800db50:	7bf8      	ldrb	r0, [r7, #15]
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	68b9      	ldr	r1, [r7, #8]
 800db58:	f000 fabe 	bl	800e0d8 <USER_SPI_read>
 800db5c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3710      	adds	r7, #16
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b084      	sub	sp, #16
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	607a      	str	r2, [r7, #4]
 800db70:	603b      	str	r3, [r7, #0]
 800db72:	4603      	mov	r3, r0
 800db74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800db76:	7bf8      	ldrb	r0, [r7, #15]
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	68b9      	ldr	r1, [r7, #8]
 800db7e:	f000 fb11 	bl	800e1a4 <USER_SPI_write>
 800db82:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800db84:	4618      	mov	r0, r3
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	4603      	mov	r3, r0
 800db94:	603a      	str	r2, [r7, #0]
 800db96:	71fb      	strb	r3, [r7, #7]
 800db98:	460b      	mov	r3, r1
 800db9a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800db9c:	79b9      	ldrb	r1, [r7, #6]
 800db9e:	79fb      	ldrb	r3, [r7, #7]
 800dba0:	683a      	ldr	r2, [r7, #0]
 800dba2:	4618      	mov	r0, r3
 800dba4:	f000 fb7a 	bl	800e29c <USER_SPI_ioctl>
 800dba8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3708      	adds	r7, #8
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
	...

0800dbb4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800dbbc:	f7f8 fade 	bl	800617c <HAL_GetTick>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	4a04      	ldr	r2, [pc, #16]	; (800dbd4 <SPI_Timer_On+0x20>)
 800dbc4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800dbc6:	4a04      	ldr	r2, [pc, #16]	; (800dbd8 <SPI_Timer_On+0x24>)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6013      	str	r3, [r2, #0]
}
 800dbcc:	bf00      	nop
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	20001a94 	.word	0x20001a94
 800dbd8:	20001a90 	.word	0x20001a90

0800dbdc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800dbe0:	f7f8 facc 	bl	800617c <HAL_GetTick>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	4b06      	ldr	r3, [pc, #24]	; (800dc00 <SPI_Timer_Status+0x24>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	1ad2      	subs	r2, r2, r3
 800dbec:	4b05      	ldr	r3, [pc, #20]	; (800dc04 <SPI_Timer_Status+0x28>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	bf34      	ite	cc
 800dbf4:	2301      	movcc	r3, #1
 800dbf6:	2300      	movcs	r3, #0
 800dbf8:	b2db      	uxtb	r3, r3
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	20001a94 	.word	0x20001a94
 800dc04:	20001a90 	.word	0x20001a90

0800dc08 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b086      	sub	sp, #24
 800dc0c:	af02      	add	r7, sp, #8
 800dc0e:	4603      	mov	r3, r0
 800dc10:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800dc12:	f107 020f 	add.w	r2, r7, #15
 800dc16:	1df9      	adds	r1, r7, #7
 800dc18:	2332      	movs	r3, #50	; 0x32
 800dc1a:	9300      	str	r3, [sp, #0]
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	4804      	ldr	r0, [pc, #16]	; (800dc30 <xchg_spi+0x28>)
 800dc20:	f7fc fb85 	bl	800a32e <HAL_SPI_TransmitReceive>
    return rxDat;
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3710      	adds	r7, #16
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	2000140c 	.word	0x2000140c

0800dc34 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800dc34:	b590      	push	{r4, r7, lr}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800dc3e:	2300      	movs	r3, #0
 800dc40:	60fb      	str	r3, [r7, #12]
 800dc42:	e00a      	b.n	800dc5a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	18d4      	adds	r4, r2, r3
 800dc4a:	20ff      	movs	r0, #255	; 0xff
 800dc4c:	f7ff ffdc 	bl	800dc08 <xchg_spi>
 800dc50:	4603      	mov	r3, r0
 800dc52:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	3301      	adds	r3, #1
 800dc58:	60fb      	str	r3, [r7, #12]
 800dc5a:	68fa      	ldr	r2, [r7, #12]
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d3f0      	bcc.n	800dc44 <rcvr_spi_multi+0x10>
	}
}
 800dc62:	bf00      	nop
 800dc64:	bf00      	nop
 800dc66:	3714      	adds	r7, #20
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd90      	pop	{r4, r7, pc}

0800dc6c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800dc76:	2300      	movs	r3, #0
 800dc78:	60fb      	str	r3, [r7, #12]
 800dc7a:	e009      	b.n	800dc90 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	4413      	add	r3, r2
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7ff ffbf 	bl	800dc08 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	60fb      	str	r3, [r7, #12]
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d3f1      	bcc.n	800dc7c <xmit_spi_multi+0x10>
	}
}
 800dc98:	bf00      	nop
 800dc9a:	bf00      	nop
 800dc9c:	3710      	adds	r7, #16
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}

0800dca2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800dca2:	b580      	push	{r7, lr}
 800dca4:	b086      	sub	sp, #24
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800dcaa:	f7f8 fa67 	bl	800617c <HAL_GetTick>
 800dcae:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800dcb4:	20ff      	movs	r0, #255	; 0xff
 800dcb6:	f7ff ffa7 	bl	800dc08 <xchg_spi>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800dcbe:	7bfb      	ldrb	r3, [r7, #15]
 800dcc0:	2bff      	cmp	r3, #255	; 0xff
 800dcc2:	d007      	beq.n	800dcd4 <wait_ready+0x32>
 800dcc4:	f7f8 fa5a 	bl	800617c <HAL_GetTick>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	1ad3      	subs	r3, r2, r3
 800dcce:	693a      	ldr	r2, [r7, #16]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d8ef      	bhi.n	800dcb4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800dcd4:	7bfb      	ldrb	r3, [r7, #15]
 800dcd6:	2bff      	cmp	r3, #255	; 0xff
 800dcd8:	bf0c      	ite	eq
 800dcda:	2301      	moveq	r3, #1
 800dcdc:	2300      	movne	r3, #0
 800dcde:	b2db      	uxtb	r3, r3
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3718      	adds	r7, #24
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800dcec:	2201      	movs	r2, #1
 800dcee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dcf2:	4804      	ldr	r0, [pc, #16]	; (800dd04 <despiselect+0x1c>)
 800dcf4:	f7f9 fcee 	bl	80076d4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800dcf8:	20ff      	movs	r0, #255	; 0xff
 800dcfa:	f7ff ff85 	bl	800dc08 <xchg_spi>

}
 800dcfe:	bf00      	nop
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	40020000 	.word	0x40020000

0800dd08 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dd12:	480a      	ldr	r0, [pc, #40]	; (800dd3c <spiselect+0x34>)
 800dd14:	f7f9 fcde 	bl	80076d4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800dd18:	20ff      	movs	r0, #255	; 0xff
 800dd1a:	f7ff ff75 	bl	800dc08 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800dd1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dd22:	f7ff ffbe 	bl	800dca2 <wait_ready>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d001      	beq.n	800dd30 <spiselect+0x28>
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e002      	b.n	800dd36 <spiselect+0x2e>

	despiselect();
 800dd30:	f7ff ffda 	bl	800dce8 <despiselect>
	return 0;	/* Timeout */
 800dd34:	2300      	movs	r3, #0
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	40020000 	.word	0x40020000

0800dd40 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800dd4a:	20c8      	movs	r0, #200	; 0xc8
 800dd4c:	f7ff ff32 	bl	800dbb4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800dd50:	20ff      	movs	r0, #255	; 0xff
 800dd52:	f7ff ff59 	bl	800dc08 <xchg_spi>
 800dd56:	4603      	mov	r3, r0
 800dd58:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800dd5a:	7bfb      	ldrb	r3, [r7, #15]
 800dd5c:	2bff      	cmp	r3, #255	; 0xff
 800dd5e:	d104      	bne.n	800dd6a <rcvr_datablock+0x2a>
 800dd60:	f7ff ff3c 	bl	800dbdc <SPI_Timer_Status>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d1f2      	bne.n	800dd50 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800dd6a:	7bfb      	ldrb	r3, [r7, #15]
 800dd6c:	2bfe      	cmp	r3, #254	; 0xfe
 800dd6e:	d001      	beq.n	800dd74 <rcvr_datablock+0x34>
 800dd70:	2300      	movs	r3, #0
 800dd72:	e00a      	b.n	800dd8a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7ff ff5c 	bl	800dc34 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800dd7c:	20ff      	movs	r0, #255	; 0xff
 800dd7e:	f7ff ff43 	bl	800dc08 <xchg_spi>
 800dd82:	20ff      	movs	r0, #255	; 0xff
 800dd84:	f7ff ff40 	bl	800dc08 <xchg_spi>

	return 1;						/* Function succeeded */
 800dd88:	2301      	movs	r3, #1
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b084      	sub	sp, #16
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800dd9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dda2:	f7ff ff7e 	bl	800dca2 <wait_ready>
 800dda6:	4603      	mov	r3, r0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d101      	bne.n	800ddb0 <xmit_datablock+0x1e>
 800ddac:	2300      	movs	r3, #0
 800ddae:	e01e      	b.n	800ddee <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800ddb0:	78fb      	ldrb	r3, [r7, #3]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7ff ff28 	bl	800dc08 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800ddb8:	78fb      	ldrb	r3, [r7, #3]
 800ddba:	2bfd      	cmp	r3, #253	; 0xfd
 800ddbc:	d016      	beq.n	800ddec <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800ddbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f7ff ff52 	bl	800dc6c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800ddc8:	20ff      	movs	r0, #255	; 0xff
 800ddca:	f7ff ff1d 	bl	800dc08 <xchg_spi>
 800ddce:	20ff      	movs	r0, #255	; 0xff
 800ddd0:	f7ff ff1a 	bl	800dc08 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800ddd4:	20ff      	movs	r0, #255	; 0xff
 800ddd6:	f7ff ff17 	bl	800dc08 <xchg_spi>
 800ddda:	4603      	mov	r3, r0
 800dddc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800ddde:	7bfb      	ldrb	r3, [r7, #15]
 800dde0:	f003 031f 	and.w	r3, r3, #31
 800dde4:	2b05      	cmp	r3, #5
 800dde6:	d001      	beq.n	800ddec <xmit_datablock+0x5a>
 800dde8:	2300      	movs	r3, #0
 800ddea:	e000      	b.n	800ddee <xmit_datablock+0x5c>
	}
	return 1;
 800ddec:	2301      	movs	r3, #1
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3710      	adds	r7, #16
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800ddf6:	b580      	push	{r7, lr}
 800ddf8:	b084      	sub	sp, #16
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	6039      	str	r1, [r7, #0]
 800de00:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800de02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de06:	2b00      	cmp	r3, #0
 800de08:	da0e      	bge.n	800de28 <send_cmd+0x32>
		cmd &= 0x7F;
 800de0a:	79fb      	ldrb	r3, [r7, #7]
 800de0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de10:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800de12:	2100      	movs	r1, #0
 800de14:	2037      	movs	r0, #55	; 0x37
 800de16:	f7ff ffee 	bl	800ddf6 <send_cmd>
 800de1a:	4603      	mov	r3, r0
 800de1c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800de1e:	7bbb      	ldrb	r3, [r7, #14]
 800de20:	2b01      	cmp	r3, #1
 800de22:	d901      	bls.n	800de28 <send_cmd+0x32>
 800de24:	7bbb      	ldrb	r3, [r7, #14]
 800de26:	e051      	b.n	800decc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800de28:	79fb      	ldrb	r3, [r7, #7]
 800de2a:	2b0c      	cmp	r3, #12
 800de2c:	d008      	beq.n	800de40 <send_cmd+0x4a>
		despiselect();
 800de2e:	f7ff ff5b 	bl	800dce8 <despiselect>
		if (!spiselect()) return 0xFF;
 800de32:	f7ff ff69 	bl	800dd08 <spiselect>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d101      	bne.n	800de40 <send_cmd+0x4a>
 800de3c:	23ff      	movs	r3, #255	; 0xff
 800de3e:	e045      	b.n	800decc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800de40:	79fb      	ldrb	r3, [r7, #7]
 800de42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de46:	b2db      	uxtb	r3, r3
 800de48:	4618      	mov	r0, r3
 800de4a:	f7ff fedd 	bl	800dc08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	0e1b      	lsrs	r3, r3, #24
 800de52:	b2db      	uxtb	r3, r3
 800de54:	4618      	mov	r0, r3
 800de56:	f7ff fed7 	bl	800dc08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	0c1b      	lsrs	r3, r3, #16
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	4618      	mov	r0, r3
 800de62:	f7ff fed1 	bl	800dc08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	0a1b      	lsrs	r3, r3, #8
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7ff fecb 	bl	800dc08 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	b2db      	uxtb	r3, r3
 800de76:	4618      	mov	r0, r3
 800de78:	f7ff fec6 	bl	800dc08 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800de7c:	2301      	movs	r3, #1
 800de7e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800de80:	79fb      	ldrb	r3, [r7, #7]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d101      	bne.n	800de8a <send_cmd+0x94>
 800de86:	2395      	movs	r3, #149	; 0x95
 800de88:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800de8a:	79fb      	ldrb	r3, [r7, #7]
 800de8c:	2b08      	cmp	r3, #8
 800de8e:	d101      	bne.n	800de94 <send_cmd+0x9e>
 800de90:	2387      	movs	r3, #135	; 0x87
 800de92:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800de94:	7bfb      	ldrb	r3, [r7, #15]
 800de96:	4618      	mov	r0, r3
 800de98:	f7ff feb6 	bl	800dc08 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800de9c:	79fb      	ldrb	r3, [r7, #7]
 800de9e:	2b0c      	cmp	r3, #12
 800dea0:	d102      	bne.n	800dea8 <send_cmd+0xb2>
 800dea2:	20ff      	movs	r0, #255	; 0xff
 800dea4:	f7ff feb0 	bl	800dc08 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800dea8:	230a      	movs	r3, #10
 800deaa:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800deac:	20ff      	movs	r0, #255	; 0xff
 800deae:	f7ff feab 	bl	800dc08 <xchg_spi>
 800deb2:	4603      	mov	r3, r0
 800deb4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800deb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800deba:	2b00      	cmp	r3, #0
 800debc:	da05      	bge.n	800deca <send_cmd+0xd4>
 800debe:	7bfb      	ldrb	r3, [r7, #15]
 800dec0:	3b01      	subs	r3, #1
 800dec2:	73fb      	strb	r3, [r7, #15]
 800dec4:	7bfb      	ldrb	r3, [r7, #15]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d1f0      	bne.n	800deac <send_cmd+0xb6>

	return res;							/* Return received response */
 800deca:	7bbb      	ldrb	r3, [r7, #14]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800ded4:	b590      	push	{r4, r7, lr}
 800ded6:	b085      	sub	sp, #20
 800ded8:	af00      	add	r7, sp, #0
 800deda:	4603      	mov	r3, r0
 800dedc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800dede:	79fb      	ldrb	r3, [r7, #7]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d001      	beq.n	800dee8 <USER_SPI_initialize+0x14>
 800dee4:	2301      	movs	r3, #1
 800dee6:	e0d6      	b.n	800e096 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800dee8:	4b6d      	ldr	r3, [pc, #436]	; (800e0a0 <USER_SPI_initialize+0x1cc>)
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	b2db      	uxtb	r3, r3
 800deee:	f003 0302 	and.w	r3, r3, #2
 800def2:	2b00      	cmp	r3, #0
 800def4:	d003      	beq.n	800defe <USER_SPI_initialize+0x2a>
 800def6:	4b6a      	ldr	r3, [pc, #424]	; (800e0a0 <USER_SPI_initialize+0x1cc>)
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	b2db      	uxtb	r3, r3
 800defc:	e0cb      	b.n	800e096 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800defe:	4b69      	ldr	r3, [pc, #420]	; (800e0a4 <USER_SPI_initialize+0x1d0>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800df08:	4b66      	ldr	r3, [pc, #408]	; (800e0a4 <USER_SPI_initialize+0x1d0>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800df10:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800df12:	230a      	movs	r3, #10
 800df14:	73fb      	strb	r3, [r7, #15]
 800df16:	e005      	b.n	800df24 <USER_SPI_initialize+0x50>
 800df18:	20ff      	movs	r0, #255	; 0xff
 800df1a:	f7ff fe75 	bl	800dc08 <xchg_spi>
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
 800df20:	3b01      	subs	r3, #1
 800df22:	73fb      	strb	r3, [r7, #15]
 800df24:	7bfb      	ldrb	r3, [r7, #15]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d1f6      	bne.n	800df18 <USER_SPI_initialize+0x44>

	ty = 0;
 800df2a:	2300      	movs	r3, #0
 800df2c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800df2e:	2100      	movs	r1, #0
 800df30:	2000      	movs	r0, #0
 800df32:	f7ff ff60 	bl	800ddf6 <send_cmd>
 800df36:	4603      	mov	r3, r0
 800df38:	2b01      	cmp	r3, #1
 800df3a:	f040 808b 	bne.w	800e054 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800df3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800df42:	f7ff fe37 	bl	800dbb4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800df46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800df4a:	2008      	movs	r0, #8
 800df4c:	f7ff ff53 	bl	800ddf6 <send_cmd>
 800df50:	4603      	mov	r3, r0
 800df52:	2b01      	cmp	r3, #1
 800df54:	d151      	bne.n	800dffa <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800df56:	2300      	movs	r3, #0
 800df58:	73fb      	strb	r3, [r7, #15]
 800df5a:	e00d      	b.n	800df78 <USER_SPI_initialize+0xa4>
 800df5c:	7bfc      	ldrb	r4, [r7, #15]
 800df5e:	20ff      	movs	r0, #255	; 0xff
 800df60:	f7ff fe52 	bl	800dc08 <xchg_spi>
 800df64:	4603      	mov	r3, r0
 800df66:	461a      	mov	r2, r3
 800df68:	f107 0310 	add.w	r3, r7, #16
 800df6c:	4423      	add	r3, r4
 800df6e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800df72:	7bfb      	ldrb	r3, [r7, #15]
 800df74:	3301      	adds	r3, #1
 800df76:	73fb      	strb	r3, [r7, #15]
 800df78:	7bfb      	ldrb	r3, [r7, #15]
 800df7a:	2b03      	cmp	r3, #3
 800df7c:	d9ee      	bls.n	800df5c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800df7e:	7abb      	ldrb	r3, [r7, #10]
 800df80:	2b01      	cmp	r3, #1
 800df82:	d167      	bne.n	800e054 <USER_SPI_initialize+0x180>
 800df84:	7afb      	ldrb	r3, [r7, #11]
 800df86:	2baa      	cmp	r3, #170	; 0xaa
 800df88:	d164      	bne.n	800e054 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800df8a:	bf00      	nop
 800df8c:	f7ff fe26 	bl	800dbdc <SPI_Timer_Status>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	d007      	beq.n	800dfa6 <USER_SPI_initialize+0xd2>
 800df96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800df9a:	20a9      	movs	r0, #169	; 0xa9
 800df9c:	f7ff ff2b 	bl	800ddf6 <send_cmd>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1f2      	bne.n	800df8c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800dfa6:	f7ff fe19 	bl	800dbdc <SPI_Timer_Status>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d051      	beq.n	800e054 <USER_SPI_initialize+0x180>
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	203a      	movs	r0, #58	; 0x3a
 800dfb4:	f7ff ff1f 	bl	800ddf6 <send_cmd>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d14a      	bne.n	800e054 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	73fb      	strb	r3, [r7, #15]
 800dfc2:	e00d      	b.n	800dfe0 <USER_SPI_initialize+0x10c>
 800dfc4:	7bfc      	ldrb	r4, [r7, #15]
 800dfc6:	20ff      	movs	r0, #255	; 0xff
 800dfc8:	f7ff fe1e 	bl	800dc08 <xchg_spi>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	461a      	mov	r2, r3
 800dfd0:	f107 0310 	add.w	r3, r7, #16
 800dfd4:	4423      	add	r3, r4
 800dfd6:	f803 2c08 	strb.w	r2, [r3, #-8]
 800dfda:	7bfb      	ldrb	r3, [r7, #15]
 800dfdc:	3301      	adds	r3, #1
 800dfde:	73fb      	strb	r3, [r7, #15]
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
 800dfe2:	2b03      	cmp	r3, #3
 800dfe4:	d9ee      	bls.n	800dfc4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800dfe6:	7a3b      	ldrb	r3, [r7, #8]
 800dfe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d001      	beq.n	800dff4 <USER_SPI_initialize+0x120>
 800dff0:	230c      	movs	r3, #12
 800dff2:	e000      	b.n	800dff6 <USER_SPI_initialize+0x122>
 800dff4:	2304      	movs	r3, #4
 800dff6:	737b      	strb	r3, [r7, #13]
 800dff8:	e02c      	b.n	800e054 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800dffa:	2100      	movs	r1, #0
 800dffc:	20a9      	movs	r0, #169	; 0xa9
 800dffe:	f7ff fefa 	bl	800ddf6 <send_cmd>
 800e002:	4603      	mov	r3, r0
 800e004:	2b01      	cmp	r3, #1
 800e006:	d804      	bhi.n	800e012 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800e008:	2302      	movs	r3, #2
 800e00a:	737b      	strb	r3, [r7, #13]
 800e00c:	23a9      	movs	r3, #169	; 0xa9
 800e00e:	73bb      	strb	r3, [r7, #14]
 800e010:	e003      	b.n	800e01a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800e012:	2301      	movs	r3, #1
 800e014:	737b      	strb	r3, [r7, #13]
 800e016:	2301      	movs	r3, #1
 800e018:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800e01a:	bf00      	nop
 800e01c:	f7ff fdde 	bl	800dbdc <SPI_Timer_Status>
 800e020:	4603      	mov	r3, r0
 800e022:	2b00      	cmp	r3, #0
 800e024:	d007      	beq.n	800e036 <USER_SPI_initialize+0x162>
 800e026:	7bbb      	ldrb	r3, [r7, #14]
 800e028:	2100      	movs	r1, #0
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7ff fee3 	bl	800ddf6 <send_cmd>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d1f2      	bne.n	800e01c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800e036:	f7ff fdd1 	bl	800dbdc <SPI_Timer_Status>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d007      	beq.n	800e050 <USER_SPI_initialize+0x17c>
 800e040:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e044:	2010      	movs	r0, #16
 800e046:	f7ff fed6 	bl	800ddf6 <send_cmd>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d001      	beq.n	800e054 <USER_SPI_initialize+0x180>
				ty = 0;
 800e050:	2300      	movs	r3, #0
 800e052:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800e054:	4a14      	ldr	r2, [pc, #80]	; (800e0a8 <USER_SPI_initialize+0x1d4>)
 800e056:	7b7b      	ldrb	r3, [r7, #13]
 800e058:	7013      	strb	r3, [r2, #0]
	despiselect();
 800e05a:	f7ff fe45 	bl	800dce8 <despiselect>

	if (ty) {			/* OK */
 800e05e:	7b7b      	ldrb	r3, [r7, #13]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d012      	beq.n	800e08a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800e064:	4b0f      	ldr	r3, [pc, #60]	; (800e0a4 <USER_SPI_initialize+0x1d0>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800e06e:	4b0d      	ldr	r3, [pc, #52]	; (800e0a4 <USER_SPI_initialize+0x1d0>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f042 0210 	orr.w	r2, r2, #16
 800e076:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800e078:	4b09      	ldr	r3, [pc, #36]	; (800e0a0 <USER_SPI_initialize+0x1cc>)
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	f023 0301 	bic.w	r3, r3, #1
 800e082:	b2da      	uxtb	r2, r3
 800e084:	4b06      	ldr	r3, [pc, #24]	; (800e0a0 <USER_SPI_initialize+0x1cc>)
 800e086:	701a      	strb	r2, [r3, #0]
 800e088:	e002      	b.n	800e090 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800e08a:	4b05      	ldr	r3, [pc, #20]	; (800e0a0 <USER_SPI_initialize+0x1cc>)
 800e08c:	2201      	movs	r2, #1
 800e08e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800e090:	4b03      	ldr	r3, [pc, #12]	; (800e0a0 <USER_SPI_initialize+0x1cc>)
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	b2db      	uxtb	r3, r3
}
 800e096:	4618      	mov	r0, r3
 800e098:	3714      	adds	r7, #20
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd90      	pop	{r4, r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	20000024 	.word	0x20000024
 800e0a4:	2000140c 	.word	0x2000140c
 800e0a8:	2000064d 	.word	0x2000064d

0800e0ac <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800e0b6:	79fb      	ldrb	r3, [r7, #7]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d001      	beq.n	800e0c0 <USER_SPI_status+0x14>
 800e0bc:	2301      	movs	r3, #1
 800e0be:	e002      	b.n	800e0c6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800e0c0:	4b04      	ldr	r3, [pc, #16]	; (800e0d4 <USER_SPI_status+0x28>)
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	b2db      	uxtb	r3, r3
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	370c      	adds	r7, #12
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr
 800e0d2:	bf00      	nop
 800e0d4:	20000024 	.word	0x20000024

0800e0d8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	60b9      	str	r1, [r7, #8]
 800e0e0:	607a      	str	r2, [r7, #4]
 800e0e2:	603b      	str	r3, [r7, #0]
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800e0e8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d102      	bne.n	800e0f4 <USER_SPI_read+0x1c>
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d101      	bne.n	800e0f8 <USER_SPI_read+0x20>
 800e0f4:	2304      	movs	r3, #4
 800e0f6:	e04d      	b.n	800e194 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e0f8:	4b28      	ldr	r3, [pc, #160]	; (800e19c <USER_SPI_read+0xc4>)
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	f003 0301 	and.w	r3, r3, #1
 800e102:	2b00      	cmp	r3, #0
 800e104:	d001      	beq.n	800e10a <USER_SPI_read+0x32>
 800e106:	2303      	movs	r3, #3
 800e108:	e044      	b.n	800e194 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800e10a:	4b25      	ldr	r3, [pc, #148]	; (800e1a0 <USER_SPI_read+0xc8>)
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	f003 0308 	and.w	r3, r3, #8
 800e112:	2b00      	cmp	r3, #0
 800e114:	d102      	bne.n	800e11c <USER_SPI_read+0x44>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	025b      	lsls	r3, r3, #9
 800e11a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d111      	bne.n	800e146 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800e122:	6879      	ldr	r1, [r7, #4]
 800e124:	2011      	movs	r0, #17
 800e126:	f7ff fe66 	bl	800ddf6 <send_cmd>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d129      	bne.n	800e184 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800e130:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e134:	68b8      	ldr	r0, [r7, #8]
 800e136:	f7ff fe03 	bl	800dd40 <rcvr_datablock>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d021      	beq.n	800e184 <USER_SPI_read+0xac>
			count = 0;
 800e140:	2300      	movs	r3, #0
 800e142:	603b      	str	r3, [r7, #0]
 800e144:	e01e      	b.n	800e184 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800e146:	6879      	ldr	r1, [r7, #4]
 800e148:	2012      	movs	r0, #18
 800e14a:	f7ff fe54 	bl	800ddf6 <send_cmd>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d117      	bne.n	800e184 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800e154:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e158:	68b8      	ldr	r0, [r7, #8]
 800e15a:	f7ff fdf1 	bl	800dd40 <rcvr_datablock>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	d00a      	beq.n	800e17a <USER_SPI_read+0xa2>
				buff += 512;
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e16a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	3b01      	subs	r3, #1
 800e170:	603b      	str	r3, [r7, #0]
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1ed      	bne.n	800e154 <USER_SPI_read+0x7c>
 800e178:	e000      	b.n	800e17c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800e17a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800e17c:	2100      	movs	r1, #0
 800e17e:	200c      	movs	r0, #12
 800e180:	f7ff fe39 	bl	800ddf6 <send_cmd>
		}
	}
	despiselect();
 800e184:	f7ff fdb0 	bl	800dce8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	bf14      	ite	ne
 800e18e:	2301      	movne	r3, #1
 800e190:	2300      	moveq	r3, #0
 800e192:	b2db      	uxtb	r3, r3
}
 800e194:	4618      	mov	r0, r3
 800e196:	3710      	adds	r7, #16
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	20000024 	.word	0x20000024
 800e1a0:	2000064d 	.word	0x2000064d

0800e1a4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	60b9      	str	r1, [r7, #8]
 800e1ac:	607a      	str	r2, [r7, #4]
 800e1ae:	603b      	str	r3, [r7, #0]
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800e1b4:	7bfb      	ldrb	r3, [r7, #15]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d102      	bne.n	800e1c0 <USER_SPI_write+0x1c>
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d101      	bne.n	800e1c4 <USER_SPI_write+0x20>
 800e1c0:	2304      	movs	r3, #4
 800e1c2:	e063      	b.n	800e28c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800e1c4:	4b33      	ldr	r3, [pc, #204]	; (800e294 <USER_SPI_write+0xf0>)
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	f003 0301 	and.w	r3, r3, #1
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d001      	beq.n	800e1d6 <USER_SPI_write+0x32>
 800e1d2:	2303      	movs	r3, #3
 800e1d4:	e05a      	b.n	800e28c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800e1d6:	4b2f      	ldr	r3, [pc, #188]	; (800e294 <USER_SPI_write+0xf0>)
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	b2db      	uxtb	r3, r3
 800e1dc:	f003 0304 	and.w	r3, r3, #4
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d001      	beq.n	800e1e8 <USER_SPI_write+0x44>
 800e1e4:	2302      	movs	r3, #2
 800e1e6:	e051      	b.n	800e28c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800e1e8:	4b2b      	ldr	r3, [pc, #172]	; (800e298 <USER_SPI_write+0xf4>)
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	f003 0308 	and.w	r3, r3, #8
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d102      	bne.n	800e1fa <USER_SPI_write+0x56>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	025b      	lsls	r3, r3, #9
 800e1f8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d110      	bne.n	800e222 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800e200:	6879      	ldr	r1, [r7, #4]
 800e202:	2018      	movs	r0, #24
 800e204:	f7ff fdf7 	bl	800ddf6 <send_cmd>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d136      	bne.n	800e27c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800e20e:	21fe      	movs	r1, #254	; 0xfe
 800e210:	68b8      	ldr	r0, [r7, #8]
 800e212:	f7ff fdbe 	bl	800dd92 <xmit_datablock>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d02f      	beq.n	800e27c <USER_SPI_write+0xd8>
			count = 0;
 800e21c:	2300      	movs	r3, #0
 800e21e:	603b      	str	r3, [r7, #0]
 800e220:	e02c      	b.n	800e27c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800e222:	4b1d      	ldr	r3, [pc, #116]	; (800e298 <USER_SPI_write+0xf4>)
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	f003 0306 	and.w	r3, r3, #6
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d003      	beq.n	800e236 <USER_SPI_write+0x92>
 800e22e:	6839      	ldr	r1, [r7, #0]
 800e230:	2097      	movs	r0, #151	; 0x97
 800e232:	f7ff fde0 	bl	800ddf6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800e236:	6879      	ldr	r1, [r7, #4]
 800e238:	2019      	movs	r0, #25
 800e23a:	f7ff fddc 	bl	800ddf6 <send_cmd>
 800e23e:	4603      	mov	r3, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	d11b      	bne.n	800e27c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800e244:	21fc      	movs	r1, #252	; 0xfc
 800e246:	68b8      	ldr	r0, [r7, #8]
 800e248:	f7ff fda3 	bl	800dd92 <xmit_datablock>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00a      	beq.n	800e268 <USER_SPI_write+0xc4>
				buff += 512;
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e258:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	3b01      	subs	r3, #1
 800e25e:	603b      	str	r3, [r7, #0]
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1ee      	bne.n	800e244 <USER_SPI_write+0xa0>
 800e266:	e000      	b.n	800e26a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800e268:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800e26a:	21fd      	movs	r1, #253	; 0xfd
 800e26c:	2000      	movs	r0, #0
 800e26e:	f7ff fd90 	bl	800dd92 <xmit_datablock>
 800e272:	4603      	mov	r3, r0
 800e274:	2b00      	cmp	r3, #0
 800e276:	d101      	bne.n	800e27c <USER_SPI_write+0xd8>
 800e278:	2301      	movs	r3, #1
 800e27a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800e27c:	f7ff fd34 	bl	800dce8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	bf14      	ite	ne
 800e286:	2301      	movne	r3, #1
 800e288:	2300      	moveq	r3, #0
 800e28a:	b2db      	uxtb	r3, r3
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3710      	adds	r7, #16
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	20000024 	.word	0x20000024
 800e298:	2000064d 	.word	0x2000064d

0800e29c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b08c      	sub	sp, #48	; 0x30
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	603a      	str	r2, [r7, #0]
 800e2a6:	71fb      	strb	r3, [r7, #7]
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800e2ac:	79fb      	ldrb	r3, [r7, #7]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d001      	beq.n	800e2b6 <USER_SPI_ioctl+0x1a>
 800e2b2:	2304      	movs	r3, #4
 800e2b4:	e15a      	b.n	800e56c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e2b6:	4baf      	ldr	r3, [pc, #700]	; (800e574 <USER_SPI_ioctl+0x2d8>)
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	b2db      	uxtb	r3, r3
 800e2bc:	f003 0301 	and.w	r3, r3, #1
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d001      	beq.n	800e2c8 <USER_SPI_ioctl+0x2c>
 800e2c4:	2303      	movs	r3, #3
 800e2c6:	e151      	b.n	800e56c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800e2ce:	79bb      	ldrb	r3, [r7, #6]
 800e2d0:	2b04      	cmp	r3, #4
 800e2d2:	f200 8136 	bhi.w	800e542 <USER_SPI_ioctl+0x2a6>
 800e2d6:	a201      	add	r2, pc, #4	; (adr r2, 800e2dc <USER_SPI_ioctl+0x40>)
 800e2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2dc:	0800e2f1 	.word	0x0800e2f1
 800e2e0:	0800e305 	.word	0x0800e305
 800e2e4:	0800e543 	.word	0x0800e543
 800e2e8:	0800e3b1 	.word	0x0800e3b1
 800e2ec:	0800e4a7 	.word	0x0800e4a7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800e2f0:	f7ff fd0a 	bl	800dd08 <spiselect>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f000 8127 	beq.w	800e54a <USER_SPI_ioctl+0x2ae>
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800e302:	e122      	b.n	800e54a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800e304:	2100      	movs	r1, #0
 800e306:	2009      	movs	r0, #9
 800e308:	f7ff fd75 	bl	800ddf6 <send_cmd>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	f040 811d 	bne.w	800e54e <USER_SPI_ioctl+0x2b2>
 800e314:	f107 030c 	add.w	r3, r7, #12
 800e318:	2110      	movs	r1, #16
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7ff fd10 	bl	800dd40 <rcvr_datablock>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	f000 8113 	beq.w	800e54e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800e328:	7b3b      	ldrb	r3, [r7, #12]
 800e32a:	099b      	lsrs	r3, r3, #6
 800e32c:	b2db      	uxtb	r3, r3
 800e32e:	2b01      	cmp	r3, #1
 800e330:	d111      	bne.n	800e356 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800e332:	7d7b      	ldrb	r3, [r7, #21]
 800e334:	461a      	mov	r2, r3
 800e336:	7d3b      	ldrb	r3, [r7, #20]
 800e338:	021b      	lsls	r3, r3, #8
 800e33a:	4413      	add	r3, r2
 800e33c:	461a      	mov	r2, r3
 800e33e:	7cfb      	ldrb	r3, [r7, #19]
 800e340:	041b      	lsls	r3, r3, #16
 800e342:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800e346:	4413      	add	r3, r2
 800e348:	3301      	adds	r3, #1
 800e34a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	029a      	lsls	r2, r3, #10
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	601a      	str	r2, [r3, #0]
 800e354:	e028      	b.n	800e3a8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e356:	7c7b      	ldrb	r3, [r7, #17]
 800e358:	f003 030f 	and.w	r3, r3, #15
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	7dbb      	ldrb	r3, [r7, #22]
 800e360:	09db      	lsrs	r3, r3, #7
 800e362:	b2db      	uxtb	r3, r3
 800e364:	4413      	add	r3, r2
 800e366:	b2da      	uxtb	r2, r3
 800e368:	7d7b      	ldrb	r3, [r7, #21]
 800e36a:	005b      	lsls	r3, r3, #1
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	f003 0306 	and.w	r3, r3, #6
 800e372:	b2db      	uxtb	r3, r3
 800e374:	4413      	add	r3, r2
 800e376:	b2db      	uxtb	r3, r3
 800e378:	3302      	adds	r3, #2
 800e37a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800e37e:	7d3b      	ldrb	r3, [r7, #20]
 800e380:	099b      	lsrs	r3, r3, #6
 800e382:	b2db      	uxtb	r3, r3
 800e384:	461a      	mov	r2, r3
 800e386:	7cfb      	ldrb	r3, [r7, #19]
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	441a      	add	r2, r3
 800e38c:	7cbb      	ldrb	r3, [r7, #18]
 800e38e:	029b      	lsls	r3, r3, #10
 800e390:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e394:	4413      	add	r3, r2
 800e396:	3301      	adds	r3, #1
 800e398:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800e39a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e39e:	3b09      	subs	r3, #9
 800e3a0:	69fa      	ldr	r2, [r7, #28]
 800e3a2:	409a      	lsls	r2, r3
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800e3ae:	e0ce      	b.n	800e54e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800e3b0:	4b71      	ldr	r3, [pc, #452]	; (800e578 <USER_SPI_ioctl+0x2dc>)
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	f003 0304 	and.w	r3, r3, #4
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d031      	beq.n	800e420 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800e3bc:	2100      	movs	r1, #0
 800e3be:	208d      	movs	r0, #141	; 0x8d
 800e3c0:	f7ff fd19 	bl	800ddf6 <send_cmd>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	f040 80c3 	bne.w	800e552 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800e3cc:	20ff      	movs	r0, #255	; 0xff
 800e3ce:	f7ff fc1b 	bl	800dc08 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800e3d2:	f107 030c 	add.w	r3, r7, #12
 800e3d6:	2110      	movs	r1, #16
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7ff fcb1 	bl	800dd40 <rcvr_datablock>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f000 80b6 	beq.w	800e552 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800e3e6:	2330      	movs	r3, #48	; 0x30
 800e3e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e3ec:	e007      	b.n	800e3fe <USER_SPI_ioctl+0x162>
 800e3ee:	20ff      	movs	r0, #255	; 0xff
 800e3f0:	f7ff fc0a 	bl	800dc08 <xchg_spi>
 800e3f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e3f8:	3b01      	subs	r3, #1
 800e3fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e3fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e402:	2b00      	cmp	r3, #0
 800e404:	d1f3      	bne.n	800e3ee <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800e406:	7dbb      	ldrb	r3, [r7, #22]
 800e408:	091b      	lsrs	r3, r3, #4
 800e40a:	b2db      	uxtb	r3, r3
 800e40c:	461a      	mov	r2, r3
 800e40e:	2310      	movs	r3, #16
 800e410:	fa03 f202 	lsl.w	r2, r3, r2
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800e418:	2300      	movs	r3, #0
 800e41a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800e41e:	e098      	b.n	800e552 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800e420:	2100      	movs	r1, #0
 800e422:	2009      	movs	r0, #9
 800e424:	f7ff fce7 	bl	800ddf6 <send_cmd>
 800e428:	4603      	mov	r3, r0
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f040 8091 	bne.w	800e552 <USER_SPI_ioctl+0x2b6>
 800e430:	f107 030c 	add.w	r3, r7, #12
 800e434:	2110      	movs	r1, #16
 800e436:	4618      	mov	r0, r3
 800e438:	f7ff fc82 	bl	800dd40 <rcvr_datablock>
 800e43c:	4603      	mov	r3, r0
 800e43e:	2b00      	cmp	r3, #0
 800e440:	f000 8087 	beq.w	800e552 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800e444:	4b4c      	ldr	r3, [pc, #304]	; (800e578 <USER_SPI_ioctl+0x2dc>)
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	f003 0302 	and.w	r3, r3, #2
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d012      	beq.n	800e476 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800e450:	7dbb      	ldrb	r3, [r7, #22]
 800e452:	005b      	lsls	r3, r3, #1
 800e454:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800e458:	7dfa      	ldrb	r2, [r7, #23]
 800e45a:	09d2      	lsrs	r2, r2, #7
 800e45c:	b2d2      	uxtb	r2, r2
 800e45e:	4413      	add	r3, r2
 800e460:	1c5a      	adds	r2, r3, #1
 800e462:	7e7b      	ldrb	r3, [r7, #25]
 800e464:	099b      	lsrs	r3, r3, #6
 800e466:	b2db      	uxtb	r3, r3
 800e468:	3b01      	subs	r3, #1
 800e46a:	fa02 f303 	lsl.w	r3, r2, r3
 800e46e:	461a      	mov	r2, r3
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	601a      	str	r2, [r3, #0]
 800e474:	e013      	b.n	800e49e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800e476:	7dbb      	ldrb	r3, [r7, #22]
 800e478:	109b      	asrs	r3, r3, #2
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	f003 031f 	and.w	r3, r3, #31
 800e480:	3301      	adds	r3, #1
 800e482:	7dfa      	ldrb	r2, [r7, #23]
 800e484:	00d2      	lsls	r2, r2, #3
 800e486:	f002 0218 	and.w	r2, r2, #24
 800e48a:	7df9      	ldrb	r1, [r7, #23]
 800e48c:	0949      	lsrs	r1, r1, #5
 800e48e:	b2c9      	uxtb	r1, r1
 800e490:	440a      	add	r2, r1
 800e492:	3201      	adds	r2, #1
 800e494:	fb02 f303 	mul.w	r3, r2, r3
 800e498:	461a      	mov	r2, r3
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800e4a4:	e055      	b.n	800e552 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e4a6:	4b34      	ldr	r3, [pc, #208]	; (800e578 <USER_SPI_ioctl+0x2dc>)
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	f003 0306 	and.w	r3, r3, #6
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d051      	beq.n	800e556 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e4b2:	f107 020c 	add.w	r2, r7, #12
 800e4b6:	79fb      	ldrb	r3, [r7, #7]
 800e4b8:	210b      	movs	r1, #11
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7ff feee 	bl	800e29c <USER_SPI_ioctl>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d149      	bne.n	800e55a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e4c6:	7b3b      	ldrb	r3, [r7, #12]
 800e4c8:	099b      	lsrs	r3, r3, #6
 800e4ca:	b2db      	uxtb	r3, r3
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d104      	bne.n	800e4da <USER_SPI_ioctl+0x23e>
 800e4d0:	7dbb      	ldrb	r3, [r7, #22]
 800e4d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d041      	beq.n	800e55e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	623b      	str	r3, [r7, #32]
 800e4de:	6a3b      	ldr	r3, [r7, #32]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4e4:	6a3b      	ldr	r3, [r7, #32]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800e4ea:	4b23      	ldr	r3, [pc, #140]	; (800e578 <USER_SPI_ioctl+0x2dc>)
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	f003 0308 	and.w	r3, r3, #8
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d105      	bne.n	800e502 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800e4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f8:	025b      	lsls	r3, r3, #9
 800e4fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	025b      	lsls	r3, r3, #9
 800e500:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800e502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e504:	2020      	movs	r0, #32
 800e506:	f7ff fc76 	bl	800ddf6 <send_cmd>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d128      	bne.n	800e562 <USER_SPI_ioctl+0x2c6>
 800e510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e512:	2021      	movs	r0, #33	; 0x21
 800e514:	f7ff fc6f 	bl	800ddf6 <send_cmd>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d121      	bne.n	800e562 <USER_SPI_ioctl+0x2c6>
 800e51e:	2100      	movs	r1, #0
 800e520:	2026      	movs	r0, #38	; 0x26
 800e522:	f7ff fc68 	bl	800ddf6 <send_cmd>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d11a      	bne.n	800e562 <USER_SPI_ioctl+0x2c6>
 800e52c:	f247 5030 	movw	r0, #30000	; 0x7530
 800e530:	f7ff fbb7 	bl	800dca2 <wait_ready>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d013      	beq.n	800e562 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800e53a:	2300      	movs	r3, #0
 800e53c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800e540:	e00f      	b.n	800e562 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800e542:	2304      	movs	r3, #4
 800e544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e548:	e00c      	b.n	800e564 <USER_SPI_ioctl+0x2c8>
		break;
 800e54a:	bf00      	nop
 800e54c:	e00a      	b.n	800e564 <USER_SPI_ioctl+0x2c8>
		break;
 800e54e:	bf00      	nop
 800e550:	e008      	b.n	800e564 <USER_SPI_ioctl+0x2c8>
		break;
 800e552:	bf00      	nop
 800e554:	e006      	b.n	800e564 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e556:	bf00      	nop
 800e558:	e004      	b.n	800e564 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e55a:	bf00      	nop
 800e55c:	e002      	b.n	800e564 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e55e:	bf00      	nop
 800e560:	e000      	b.n	800e564 <USER_SPI_ioctl+0x2c8>
		break;
 800e562:	bf00      	nop
	}

	despiselect();
 800e564:	f7ff fbc0 	bl	800dce8 <despiselect>

	return res;
 800e568:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3730      	adds	r7, #48	; 0x30
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	20000024 	.word	0x20000024
 800e578:	2000064d 	.word	0x2000064d

0800e57c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	460b      	mov	r3, r1
 800e586:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e588:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e58c:	f004 fc94 	bl	8012eb8 <USBD_static_malloc>
 800e590:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d105      	bne.n	800e5a4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2200      	movs	r2, #0
 800e59c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	e066      	b.n	800e672 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	68fa      	ldr	r2, [r7, #12]
 800e5a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	7c1b      	ldrb	r3, [r3, #16]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d119      	bne.n	800e5e8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e5b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5b8:	2202      	movs	r2, #2
 800e5ba:	2181      	movs	r1, #129	; 0x81
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f004 fb58 	bl	8012c72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e5c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e5cc:	2202      	movs	r2, #2
 800e5ce:	2101      	movs	r1, #1
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f004 fb4e 	bl	8012c72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2201      	movs	r2, #1
 800e5da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2210      	movs	r2, #16
 800e5e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e5e6:	e016      	b.n	800e616 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e5e8:	2340      	movs	r3, #64	; 0x40
 800e5ea:	2202      	movs	r2, #2
 800e5ec:	2181      	movs	r1, #129	; 0x81
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f004 fb3f 	bl	8012c72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e5fa:	2340      	movs	r3, #64	; 0x40
 800e5fc:	2202      	movs	r2, #2
 800e5fe:	2101      	movs	r1, #1
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f004 fb36 	bl	8012c72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2201      	movs	r2, #1
 800e60a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2210      	movs	r2, #16
 800e612:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e616:	2308      	movs	r3, #8
 800e618:	2203      	movs	r2, #3
 800e61a:	2182      	movs	r1, #130	; 0x82
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f004 fb28 	bl	8012c72 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2201      	movs	r2, #1
 800e626:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2200      	movs	r2, #0
 800e638:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2200      	movs	r2, #0
 800e640:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	7c1b      	ldrb	r3, [r3, #16]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d109      	bne.n	800e660 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e652:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e656:	2101      	movs	r1, #1
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f004 fbf9 	bl	8012e50 <USBD_LL_PrepareReceive>
 800e65e:	e007      	b.n	800e670 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e666:	2340      	movs	r3, #64	; 0x40
 800e668:	2101      	movs	r1, #1
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f004 fbf0 	bl	8012e50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e670:	2300      	movs	r3, #0
}
 800e672:	4618      	mov	r0, r3
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}

0800e67a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e67a:	b580      	push	{r7, lr}
 800e67c:	b082      	sub	sp, #8
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
 800e682:	460b      	mov	r3, r1
 800e684:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e686:	2181      	movs	r1, #129	; 0x81
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f004 fb18 	bl	8012cbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2200      	movs	r2, #0
 800e692:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e694:	2101      	movs	r1, #1
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f004 fb11 	bl	8012cbe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e6a4:	2182      	movs	r1, #130	; 0x82
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f004 fb09 	bl	8012cbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d00e      	beq.n	800e6e4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f004 fbfc 	bl	8012ed4 <USBD_static_free>
    pdev->pClassData = NULL;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
	...

0800e6f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b086      	sub	sp, #24
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e700:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e702:	2300      	movs	r3, #0
 800e704:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e706:	2300      	movs	r3, #0
 800e708:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e70a:	2300      	movs	r3, #0
 800e70c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d101      	bne.n	800e718 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e714:	2303      	movs	r3, #3
 800e716:	e0af      	b.n	800e878 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e720:	2b00      	cmp	r3, #0
 800e722:	d03f      	beq.n	800e7a4 <USBD_CDC_Setup+0xb4>
 800e724:	2b20      	cmp	r3, #32
 800e726:	f040 809f 	bne.w	800e868 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	88db      	ldrh	r3, [r3, #6]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d02e      	beq.n	800e790 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	b25b      	sxtb	r3, r3
 800e738:	2b00      	cmp	r3, #0
 800e73a:	da16      	bge.n	800e76a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e742:	689b      	ldr	r3, [r3, #8]
 800e744:	683a      	ldr	r2, [r7, #0]
 800e746:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e748:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e74a:	683a      	ldr	r2, [r7, #0]
 800e74c:	88d2      	ldrh	r2, [r2, #6]
 800e74e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	88db      	ldrh	r3, [r3, #6]
 800e754:	2b07      	cmp	r3, #7
 800e756:	bf28      	it	cs
 800e758:	2307      	movcs	r3, #7
 800e75a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	89fa      	ldrh	r2, [r7, #14]
 800e760:	4619      	mov	r1, r3
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f001 fb19 	bl	800fd9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e768:	e085      	b.n	800e876 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	785a      	ldrb	r2, [r3, #1]
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	88db      	ldrh	r3, [r3, #6]
 800e778:	b2da      	uxtb	r2, r3
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e780:	6939      	ldr	r1, [r7, #16]
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	88db      	ldrh	r3, [r3, #6]
 800e786:	461a      	mov	r2, r3
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f001 fb32 	bl	800fdf2 <USBD_CtlPrepareRx>
      break;
 800e78e:	e072      	b.n	800e876 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e796:	689b      	ldr	r3, [r3, #8]
 800e798:	683a      	ldr	r2, [r7, #0]
 800e79a:	7850      	ldrb	r0, [r2, #1]
 800e79c:	2200      	movs	r2, #0
 800e79e:	6839      	ldr	r1, [r7, #0]
 800e7a0:	4798      	blx	r3
      break;
 800e7a2:	e068      	b.n	800e876 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	785b      	ldrb	r3, [r3, #1]
 800e7a8:	2b0b      	cmp	r3, #11
 800e7aa:	d852      	bhi.n	800e852 <USBD_CDC_Setup+0x162>
 800e7ac:	a201      	add	r2, pc, #4	; (adr r2, 800e7b4 <USBD_CDC_Setup+0xc4>)
 800e7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b2:	bf00      	nop
 800e7b4:	0800e7e5 	.word	0x0800e7e5
 800e7b8:	0800e861 	.word	0x0800e861
 800e7bc:	0800e853 	.word	0x0800e853
 800e7c0:	0800e853 	.word	0x0800e853
 800e7c4:	0800e853 	.word	0x0800e853
 800e7c8:	0800e853 	.word	0x0800e853
 800e7cc:	0800e853 	.word	0x0800e853
 800e7d0:	0800e853 	.word	0x0800e853
 800e7d4:	0800e853 	.word	0x0800e853
 800e7d8:	0800e853 	.word	0x0800e853
 800e7dc:	0800e80f 	.word	0x0800e80f
 800e7e0:	0800e839 	.word	0x0800e839
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	2b03      	cmp	r3, #3
 800e7ee:	d107      	bne.n	800e800 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e7f0:	f107 030a 	add.w	r3, r7, #10
 800e7f4:	2202      	movs	r2, #2
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f001 face 	bl	800fd9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e7fe:	e032      	b.n	800e866 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e800:	6839      	ldr	r1, [r7, #0]
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f001 fa58 	bl	800fcb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e808:	2303      	movs	r3, #3
 800e80a:	75fb      	strb	r3, [r7, #23]
          break;
 800e80c:	e02b      	b.n	800e866 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e814:	b2db      	uxtb	r3, r3
 800e816:	2b03      	cmp	r3, #3
 800e818:	d107      	bne.n	800e82a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e81a:	f107 030d 	add.w	r3, r7, #13
 800e81e:	2201      	movs	r2, #1
 800e820:	4619      	mov	r1, r3
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f001 fab9 	bl	800fd9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e828:	e01d      	b.n	800e866 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e82a:	6839      	ldr	r1, [r7, #0]
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f001 fa43 	bl	800fcb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e832:	2303      	movs	r3, #3
 800e834:	75fb      	strb	r3, [r7, #23]
          break;
 800e836:	e016      	b.n	800e866 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	2b03      	cmp	r3, #3
 800e842:	d00f      	beq.n	800e864 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e844:	6839      	ldr	r1, [r7, #0]
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f001 fa36 	bl	800fcb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e84c:	2303      	movs	r3, #3
 800e84e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e850:	e008      	b.n	800e864 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e852:	6839      	ldr	r1, [r7, #0]
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f001 fa2f 	bl	800fcb8 <USBD_CtlError>
          ret = USBD_FAIL;
 800e85a:	2303      	movs	r3, #3
 800e85c:	75fb      	strb	r3, [r7, #23]
          break;
 800e85e:	e002      	b.n	800e866 <USBD_CDC_Setup+0x176>
          break;
 800e860:	bf00      	nop
 800e862:	e008      	b.n	800e876 <USBD_CDC_Setup+0x186>
          break;
 800e864:	bf00      	nop
      }
      break;
 800e866:	e006      	b.n	800e876 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e868:	6839      	ldr	r1, [r7, #0]
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f001 fa24 	bl	800fcb8 <USBD_CtlError>
      ret = USBD_FAIL;
 800e870:	2303      	movs	r3, #3
 800e872:	75fb      	strb	r3, [r7, #23]
      break;
 800e874:	bf00      	nop
  }

  return (uint8_t)ret;
 800e876:	7dfb      	ldrb	r3, [r7, #23]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3718      	adds	r7, #24
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b084      	sub	sp, #16
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	460b      	mov	r3, r1
 800e88a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e892:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d101      	bne.n	800e8a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e89e:	2303      	movs	r3, #3
 800e8a0:	e04f      	b.n	800e942 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e8aa:	78fa      	ldrb	r2, [r7, #3]
 800e8ac:	6879      	ldr	r1, [r7, #4]
 800e8ae:	4613      	mov	r3, r2
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	4413      	add	r3, r2
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	440b      	add	r3, r1
 800e8b8:	3318      	adds	r3, #24
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d029      	beq.n	800e914 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e8c0:	78fa      	ldrb	r2, [r7, #3]
 800e8c2:	6879      	ldr	r1, [r7, #4]
 800e8c4:	4613      	mov	r3, r2
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	4413      	add	r3, r2
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	440b      	add	r3, r1
 800e8ce:	3318      	adds	r3, #24
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	78f9      	ldrb	r1, [r7, #3]
 800e8d4:	68f8      	ldr	r0, [r7, #12]
 800e8d6:	460b      	mov	r3, r1
 800e8d8:	00db      	lsls	r3, r3, #3
 800e8da:	1a5b      	subs	r3, r3, r1
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	4403      	add	r3, r0
 800e8e0:	3344      	adds	r3, #68	; 0x44
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800e8e8:	fb03 f301 	mul.w	r3, r3, r1
 800e8ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d110      	bne.n	800e914 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e8f2:	78fa      	ldrb	r2, [r7, #3]
 800e8f4:	6879      	ldr	r1, [r7, #4]
 800e8f6:	4613      	mov	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	4413      	add	r3, r2
 800e8fc:	009b      	lsls	r3, r3, #2
 800e8fe:	440b      	add	r3, r1
 800e900:	3318      	adds	r3, #24
 800e902:	2200      	movs	r2, #0
 800e904:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e906:	78f9      	ldrb	r1, [r7, #3]
 800e908:	2300      	movs	r3, #0
 800e90a:	2200      	movs	r2, #0
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f004 fa7e 	bl	8012e0e <USBD_LL_Transmit>
 800e912:	e015      	b.n	800e940 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	2200      	movs	r2, #0
 800e918:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d00b      	beq.n	800e940 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	68ba      	ldr	r2, [r7, #8]
 800e932:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e936:	68ba      	ldr	r2, [r7, #8]
 800e938:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e93c:	78fa      	ldrb	r2, [r7, #3]
 800e93e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e940:	2300      	movs	r3, #0
}
 800e942:	4618      	mov	r0, r3
 800e944:	3710      	adds	r7, #16
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b084      	sub	sp, #16
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
 800e952:	460b      	mov	r3, r1
 800e954:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e95c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e964:	2b00      	cmp	r3, #0
 800e966:	d101      	bne.n	800e96c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e968:	2303      	movs	r3, #3
 800e96a:	e015      	b.n	800e998 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e96c:	78fb      	ldrb	r3, [r7, #3]
 800e96e:	4619      	mov	r1, r3
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f004 fa8e 	bl	8012e92 <USBD_LL_GetRxDataSize>
 800e976:	4602      	mov	r2, r0
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	68fa      	ldr	r2, [r7, #12]
 800e988:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e992:	4611      	mov	r1, r2
 800e994:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e996:	2300      	movs	r3, #0
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b084      	sub	sp, #16
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d101      	bne.n	800e9ba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e9b6:	2303      	movs	r3, #3
 800e9b8:	e01b      	b.n	800e9f2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d015      	beq.n	800e9f0 <USBD_CDC_EP0_RxReady+0x50>
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e9ca:	2bff      	cmp	r3, #255	; 0xff
 800e9cc:	d010      	beq.n	800e9f0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	68fa      	ldr	r2, [r7, #12]
 800e9d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e9dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e9de:	68fa      	ldr	r2, [r7, #12]
 800e9e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e9e4:	b292      	uxth	r2, r2
 800e9e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	22ff      	movs	r2, #255	; 0xff
 800e9ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e9f0:	2300      	movs	r3, #0
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
	...

0800e9fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2243      	movs	r2, #67	; 0x43
 800ea08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ea0a:	4b03      	ldr	r3, [pc, #12]	; (800ea18 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	370c      	adds	r7, #12
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr
 800ea18:	200000b0 	.word	0x200000b0

0800ea1c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2243      	movs	r2, #67	; 0x43
 800ea28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ea2a:	4b03      	ldr	r3, [pc, #12]	; (800ea38 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	370c      	adds	r7, #12
 800ea30:	46bd      	mov	sp, r7
 800ea32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea36:	4770      	bx	lr
 800ea38:	2000006c 	.word	0x2000006c

0800ea3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2243      	movs	r2, #67	; 0x43
 800ea48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ea4a:	4b03      	ldr	r3, [pc, #12]	; (800ea58 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr
 800ea58:	200000f4 	.word	0x200000f4

0800ea5c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	220a      	movs	r2, #10
 800ea68:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ea6a:	4b03      	ldr	r3, [pc, #12]	; (800ea78 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr
 800ea78:	20000028 	.word	0x20000028

0800ea7c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
 800ea84:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d101      	bne.n	800ea90 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ea8c:	2303      	movs	r3, #3
 800ea8e:	e004      	b.n	800ea9a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ea98:	2300      	movs	r3, #0
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	370c      	adds	r7, #12
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800eaa6:	b480      	push	{r7}
 800eaa8:	b087      	sub	sp, #28
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	60f8      	str	r0, [r7, #12]
 800eaae:	60b9      	str	r1, [r7, #8]
 800eab0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eab8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d101      	bne.n	800eac4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800eac0:	2303      	movs	r3, #3
 800eac2:	e008      	b.n	800ead6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	68ba      	ldr	r2, [r7, #8]
 800eac8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ead4:	2300      	movs	r3, #0
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	371c      	adds	r7, #28
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr

0800eae2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800eae2:	b480      	push	{r7}
 800eae4:	b085      	sub	sp, #20
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
 800eaea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaf2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800eafa:	2303      	movs	r3, #3
 800eafc:	e004      	b.n	800eb08 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	683a      	ldr	r2, [r7, #0]
 800eb02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800eb06:	2300      	movs	r3, #0
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3714      	adds	r7, #20
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb22:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800eb24:	2301      	movs	r3, #1
 800eb26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d101      	bne.n	800eb36 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eb32:	2303      	movs	r3, #3
 800eb34:	e01a      	b.n	800eb6c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d114      	bne.n	800eb6a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	2201      	movs	r2, #1
 800eb44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800eb5e:	2181      	movs	r1, #129	; 0x81
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f004 f954 	bl	8012e0e <USBD_LL_Transmit>

    ret = USBD_OK;
 800eb66:	2300      	movs	r3, #0
 800eb68:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800eb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d101      	bne.n	800eb92 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800eb8e:	2303      	movs	r3, #3
 800eb90:	e016      	b.n	800ebc0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	7c1b      	ldrb	r3, [r3, #16]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d109      	bne.n	800ebae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eba4:	2101      	movs	r1, #1
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f004 f952 	bl	8012e50 <USBD_LL_PrepareReceive>
 800ebac:	e007      	b.n	800ebbe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ebb4:	2340      	movs	r3, #64	; 0x40
 800ebb6:	2101      	movs	r1, #1
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f004 f949 	bl	8012e50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ebbe:	2300      	movs	r3, #0
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b086      	sub	sp, #24
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d101      	bne.n	800ebe0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ebdc:	2303      	movs	r3, #3
 800ebde:	e01f      	b.n	800ec20 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2200      	movs	r2, #0
 800ebec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d003      	beq.n	800ec06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	68ba      	ldr	r2, [r7, #8]
 800ec02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2201      	movs	r2, #1
 800ec0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	79fa      	ldrb	r2, [r7, #7]
 800ec12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ec14:	68f8      	ldr	r0, [r7, #12]
 800ec16:	f003 ffc5 	bl	8012ba4 <USBD_LL_Init>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ec1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3718      	adds	r7, #24
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b084      	sub	sp, #16
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ec32:	2300      	movs	r3, #0
 800ec34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d101      	bne.n	800ec40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ec3c:	2303      	movs	r3, #3
 800ec3e:	e016      	b.n	800ec6e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	683a      	ldr	r2, [r7, #0]
 800ec44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d00b      	beq.n	800ec6c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5c:	f107 020e 	add.w	r2, r7, #14
 800ec60:	4610      	mov	r0, r2
 800ec62:	4798      	blx	r3
 800ec64:	4602      	mov	r2, r0
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ec6c:	2300      	movs	r3, #0
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}

0800ec76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b082      	sub	sp, #8
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f003 ffdc 	bl	8012c3c <USBD_LL_Start>
 800ec84:	4603      	mov	r3, r0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3708      	adds	r7, #8
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ec8e:	b480      	push	{r7}
 800ec90:	b083      	sub	sp, #12
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec96:	2300      	movs	r3, #0
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr

0800eca4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	460b      	mov	r3, r1
 800ecae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ecb0:	2303      	movs	r3, #3
 800ecb2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d009      	beq.n	800ecd2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	78fa      	ldrb	r2, [r7, #3]
 800ecc8:	4611      	mov	r1, r2
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	4798      	blx	r3
 800ecce:	4603      	mov	r3, r0
 800ecd0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ecd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3710      	adds	r7, #16
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	460b      	mov	r3, r1
 800ece6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d007      	beq.n	800ed02 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	78fa      	ldrb	r2, [r7, #3]
 800ecfc:	4611      	mov	r1, r2
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	4798      	blx	r3
  }

  return USBD_OK;
 800ed02:	2300      	movs	r3, #0
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f000 ff90 	bl	800fc44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2201      	movs	r2, #1
 800ed28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ed32:	461a      	mov	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed40:	f003 031f 	and.w	r3, r3, #31
 800ed44:	2b02      	cmp	r3, #2
 800ed46:	d01a      	beq.n	800ed7e <USBD_LL_SetupStage+0x72>
 800ed48:	2b02      	cmp	r3, #2
 800ed4a:	d822      	bhi.n	800ed92 <USBD_LL_SetupStage+0x86>
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d002      	beq.n	800ed56 <USBD_LL_SetupStage+0x4a>
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d00a      	beq.n	800ed6a <USBD_LL_SetupStage+0x5e>
 800ed54:	e01d      	b.n	800ed92 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 fa62 	bl	800f228 <USBD_StdDevReq>
 800ed64:	4603      	mov	r3, r0
 800ed66:	73fb      	strb	r3, [r7, #15]
      break;
 800ed68:	e020      	b.n	800edac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed70:	4619      	mov	r1, r3
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 fac6 	bl	800f304 <USBD_StdItfReq>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ed7c:	e016      	b.n	800edac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ed84:	4619      	mov	r1, r3
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f000 fb05 	bl	800f396 <USBD_StdEPReq>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ed90:	e00c      	b.n	800edac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ed98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	4619      	mov	r1, r3
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f003 ffab 	bl	8012cfc <USBD_LL_StallEP>
 800eda6:	4603      	mov	r3, r0
 800eda8:	73fb      	strb	r3, [r7, #15]
      break;
 800edaa:	bf00      	nop
  }

  return ret;
 800edac:	7bfb      	ldrb	r3, [r7, #15]
}
 800edae:	4618      	mov	r0, r3
 800edb0:	3710      	adds	r7, #16
 800edb2:	46bd      	mov	sp, r7
 800edb4:	bd80      	pop	{r7, pc}

0800edb6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800edb6:	b580      	push	{r7, lr}
 800edb8:	b086      	sub	sp, #24
 800edba:	af00      	add	r7, sp, #0
 800edbc:	60f8      	str	r0, [r7, #12]
 800edbe:	460b      	mov	r3, r1
 800edc0:	607a      	str	r2, [r7, #4]
 800edc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800edc4:	7afb      	ldrb	r3, [r7, #11]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d138      	bne.n	800ee3c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800edd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800edd8:	2b03      	cmp	r3, #3
 800edda:	d14a      	bne.n	800ee72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800eddc:	693b      	ldr	r3, [r7, #16]
 800edde:	689a      	ldr	r2, [r3, #8]
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d913      	bls.n	800ee10 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	689a      	ldr	r2, [r3, #8]
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	1ad2      	subs	r2, r2, r3
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	68da      	ldr	r2, [r3, #12]
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	689b      	ldr	r3, [r3, #8]
 800edfe:	4293      	cmp	r3, r2
 800ee00:	bf28      	it	cs
 800ee02:	4613      	movcs	r3, r2
 800ee04:	461a      	mov	r2, r3
 800ee06:	6879      	ldr	r1, [r7, #4]
 800ee08:	68f8      	ldr	r0, [r7, #12]
 800ee0a:	f001 f80f 	bl	800fe2c <USBD_CtlContinueRx>
 800ee0e:	e030      	b.n	800ee72 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	2b03      	cmp	r3, #3
 800ee1a:	d10b      	bne.n	800ee34 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee22:	691b      	ldr	r3, [r3, #16]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d005      	beq.n	800ee34 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee2e:	691b      	ldr	r3, [r3, #16]
 800ee30:	68f8      	ldr	r0, [r7, #12]
 800ee32:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f001 f80a 	bl	800fe4e <USBD_CtlSendStatus>
 800ee3a:	e01a      	b.n	800ee72 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	2b03      	cmp	r3, #3
 800ee46:	d114      	bne.n	800ee72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee4e:	699b      	ldr	r3, [r3, #24]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d00e      	beq.n	800ee72 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee5a:	699b      	ldr	r3, [r3, #24]
 800ee5c:	7afa      	ldrb	r2, [r7, #11]
 800ee5e:	4611      	mov	r1, r2
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	4798      	blx	r3
 800ee64:	4603      	mov	r3, r0
 800ee66:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ee68:	7dfb      	ldrb	r3, [r7, #23]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d001      	beq.n	800ee72 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ee6e:	7dfb      	ldrb	r3, [r7, #23]
 800ee70:	e000      	b.n	800ee74 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ee72:	2300      	movs	r3, #0
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3718      	adds	r7, #24
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b086      	sub	sp, #24
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	460b      	mov	r3, r1
 800ee86:	607a      	str	r2, [r7, #4]
 800ee88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ee8a:	7afb      	ldrb	r3, [r7, #11]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d16b      	bne.n	800ef68 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	3314      	adds	r3, #20
 800ee94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ee9c:	2b02      	cmp	r3, #2
 800ee9e:	d156      	bne.n	800ef4e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	689a      	ldr	r2, [r3, #8]
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	68db      	ldr	r3, [r3, #12]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d914      	bls.n	800eed6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	689a      	ldr	r2, [r3, #8]
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	1ad2      	subs	r2, r2, r3
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	689b      	ldr	r3, [r3, #8]
 800eebe:	461a      	mov	r2, r3
 800eec0:	6879      	ldr	r1, [r7, #4]
 800eec2:	68f8      	ldr	r0, [r7, #12]
 800eec4:	f000 ff84 	bl	800fdd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eec8:	2300      	movs	r3, #0
 800eeca:	2200      	movs	r2, #0
 800eecc:	2100      	movs	r1, #0
 800eece:	68f8      	ldr	r0, [r7, #12]
 800eed0:	f003 ffbe 	bl	8012e50 <USBD_LL_PrepareReceive>
 800eed4:	e03b      	b.n	800ef4e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	68da      	ldr	r2, [r3, #12]
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d11c      	bne.n	800ef1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	685a      	ldr	r2, [r3, #4]
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d316      	bcc.n	800ef1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	685a      	ldr	r2, [r3, #4]
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d20f      	bcs.n	800ef1c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eefc:	2200      	movs	r2, #0
 800eefe:	2100      	movs	r1, #0
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f000 ff65 	bl	800fdd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef0e:	2300      	movs	r3, #0
 800ef10:	2200      	movs	r2, #0
 800ef12:	2100      	movs	r1, #0
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f003 ff9b 	bl	8012e50 <USBD_LL_PrepareReceive>
 800ef1a:	e018      	b.n	800ef4e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	2b03      	cmp	r3, #3
 800ef26:	d10b      	bne.n	800ef40 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d005      	beq.n	800ef40 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef3a:	68db      	ldr	r3, [r3, #12]
 800ef3c:	68f8      	ldr	r0, [r7, #12]
 800ef3e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef40:	2180      	movs	r1, #128	; 0x80
 800ef42:	68f8      	ldr	r0, [r7, #12]
 800ef44:	f003 feda 	bl	8012cfc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f000 ff93 	bl	800fe74 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ef54:	2b01      	cmp	r3, #1
 800ef56:	d122      	bne.n	800ef9e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f7ff fe98 	bl	800ec8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2200      	movs	r2, #0
 800ef62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ef66:	e01a      	b.n	800ef9e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	2b03      	cmp	r3, #3
 800ef72:	d114      	bne.n	800ef9e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef7a:	695b      	ldr	r3, [r3, #20]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d00e      	beq.n	800ef9e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef86:	695b      	ldr	r3, [r3, #20]
 800ef88:	7afa      	ldrb	r2, [r7, #11]
 800ef8a:	4611      	mov	r1, r2
 800ef8c:	68f8      	ldr	r0, [r7, #12]
 800ef8e:	4798      	blx	r3
 800ef90:	4603      	mov	r3, r0
 800ef92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ef94:	7dfb      	ldrb	r3, [r7, #23]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d001      	beq.n	800ef9e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ef9a:	7dfb      	ldrb	r3, [r7, #23]
 800ef9c:	e000      	b.n	800efa0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ef9e:	2300      	movs	r3, #0
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3718      	adds	r7, #24
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	2201      	movs	r2, #1
 800efb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2200      	movs	r2, #0
 800efbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d101      	bne.n	800efdc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800efd8:	2303      	movs	r3, #3
 800efda:	e02f      	b.n	800f03c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d00f      	beq.n	800f006 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d009      	beq.n	800f006 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	6852      	ldr	r2, [r2, #4]
 800effe:	b2d2      	uxtb	r2, r2
 800f000:	4611      	mov	r1, r2
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f006:	2340      	movs	r3, #64	; 0x40
 800f008:	2200      	movs	r2, #0
 800f00a:	2100      	movs	r1, #0
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f003 fe30 	bl	8012c72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2201      	movs	r2, #1
 800f016:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2240      	movs	r2, #64	; 0x40
 800f01e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f022:	2340      	movs	r3, #64	; 0x40
 800f024:	2200      	movs	r2, #0
 800f026:	2180      	movs	r1, #128	; 0x80
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f003 fe22 	bl	8012c72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2201      	movs	r2, #1
 800f032:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2240      	movs	r2, #64	; 0x40
 800f038:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	460b      	mov	r3, r1
 800f04e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	78fa      	ldrb	r2, [r7, #3]
 800f054:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f056:	2300      	movs	r3, #0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	370c      	adds	r7, #12
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr

0800f064 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f072:	b2da      	uxtb	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2204      	movs	r2, #4
 800f07e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f082:	2300      	movs	r3, #0
}
 800f084:	4618      	mov	r0, r3
 800f086:	370c      	adds	r7, #12
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr

0800f090 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	2b04      	cmp	r3, #4
 800f0a2:	d106      	bne.n	800f0b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f0aa:	b2da      	uxtb	r2, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f0b2:	2300      	movs	r3, #0
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	370c      	adds	r7, #12
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr

0800f0c0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d101      	bne.n	800f0d6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f0d2:	2303      	movs	r3, #3
 800f0d4:	e012      	b.n	800f0fc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0dc:	b2db      	uxtb	r3, r3
 800f0de:	2b03      	cmp	r3, #3
 800f0e0:	d10b      	bne.n	800f0fa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0e8:	69db      	ldr	r3, [r3, #28]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d005      	beq.n	800f0fa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0f4:	69db      	ldr	r3, [r3, #28]
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f0fa:	2300      	movs	r3, #0
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3708      	adds	r7, #8
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}

0800f104 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b082      	sub	sp, #8
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	460b      	mov	r3, r1
 800f10e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f116:	2b00      	cmp	r3, #0
 800f118:	d101      	bne.n	800f11e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f11a:	2303      	movs	r3, #3
 800f11c:	e014      	b.n	800f148 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f124:	b2db      	uxtb	r3, r3
 800f126:	2b03      	cmp	r3, #3
 800f128:	d10d      	bne.n	800f146 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f130:	6a1b      	ldr	r3, [r3, #32]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d007      	beq.n	800f146 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f13c:	6a1b      	ldr	r3, [r3, #32]
 800f13e:	78fa      	ldrb	r2, [r7, #3]
 800f140:	4611      	mov	r1, r2
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f146:	2300      	movs	r3, #0
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3708      	adds	r7, #8
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	460b      	mov	r3, r1
 800f15a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f162:	2b00      	cmp	r3, #0
 800f164:	d101      	bne.n	800f16a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f166:	2303      	movs	r3, #3
 800f168:	e014      	b.n	800f194 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f170:	b2db      	uxtb	r3, r3
 800f172:	2b03      	cmp	r3, #3
 800f174:	d10d      	bne.n	800f192 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d007      	beq.n	800f192 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f18a:	78fa      	ldrb	r2, [r7, #3]
 800f18c:	4611      	mov	r1, r2
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f192:	2300      	movs	r3, #0
}
 800f194:	4618      	mov	r0, r3
 800f196:	3708      	adds	r7, #8
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f1a4:	2300      	movs	r3, #0
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	370c      	adds	r7, #12
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr

0800f1b2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f1b2:	b580      	push	{r7, lr}
 800f1b4:	b082      	sub	sp, #8
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2201      	movs	r2, #1
 800f1be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d009      	beq.n	800f1e0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	6852      	ldr	r2, [r2, #4]
 800f1d8:	b2d2      	uxtb	r2, r2
 800f1da:	4611      	mov	r1, r2
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	4798      	blx	r3
  }

  return USBD_OK;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3708      	adds	r7, #8
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}

0800f1ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f1ea:	b480      	push	{r7}
 800f1ec:	b087      	sub	sp, #28
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	3301      	adds	r3, #1
 800f200:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f208:	8a3b      	ldrh	r3, [r7, #16]
 800f20a:	021b      	lsls	r3, r3, #8
 800f20c:	b21a      	sxth	r2, r3
 800f20e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f212:	4313      	orrs	r3, r2
 800f214:	b21b      	sxth	r3, r3
 800f216:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f218:	89fb      	ldrh	r3, [r7, #14]
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	371c      	adds	r7, #28
 800f21e:	46bd      	mov	sp, r7
 800f220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f224:	4770      	bx	lr
	...

0800f228 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f232:	2300      	movs	r3, #0
 800f234:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f23e:	2b40      	cmp	r3, #64	; 0x40
 800f240:	d005      	beq.n	800f24e <USBD_StdDevReq+0x26>
 800f242:	2b40      	cmp	r3, #64	; 0x40
 800f244:	d853      	bhi.n	800f2ee <USBD_StdDevReq+0xc6>
 800f246:	2b00      	cmp	r3, #0
 800f248:	d00b      	beq.n	800f262 <USBD_StdDevReq+0x3a>
 800f24a:	2b20      	cmp	r3, #32
 800f24c:	d14f      	bne.n	800f2ee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f254:	689b      	ldr	r3, [r3, #8]
 800f256:	6839      	ldr	r1, [r7, #0]
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	4798      	blx	r3
 800f25c:	4603      	mov	r3, r0
 800f25e:	73fb      	strb	r3, [r7, #15]
      break;
 800f260:	e04a      	b.n	800f2f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	785b      	ldrb	r3, [r3, #1]
 800f266:	2b09      	cmp	r3, #9
 800f268:	d83b      	bhi.n	800f2e2 <USBD_StdDevReq+0xba>
 800f26a:	a201      	add	r2, pc, #4	; (adr r2, 800f270 <USBD_StdDevReq+0x48>)
 800f26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f270:	0800f2c5 	.word	0x0800f2c5
 800f274:	0800f2d9 	.word	0x0800f2d9
 800f278:	0800f2e3 	.word	0x0800f2e3
 800f27c:	0800f2cf 	.word	0x0800f2cf
 800f280:	0800f2e3 	.word	0x0800f2e3
 800f284:	0800f2a3 	.word	0x0800f2a3
 800f288:	0800f299 	.word	0x0800f299
 800f28c:	0800f2e3 	.word	0x0800f2e3
 800f290:	0800f2bb 	.word	0x0800f2bb
 800f294:	0800f2ad 	.word	0x0800f2ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f298:	6839      	ldr	r1, [r7, #0]
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 f9de 	bl	800f65c <USBD_GetDescriptor>
          break;
 800f2a0:	e024      	b.n	800f2ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f2a2:	6839      	ldr	r1, [r7, #0]
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 fb43 	bl	800f930 <USBD_SetAddress>
          break;
 800f2aa:	e01f      	b.n	800f2ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f2ac:	6839      	ldr	r1, [r7, #0]
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f000 fb82 	bl	800f9b8 <USBD_SetConfig>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	73fb      	strb	r3, [r7, #15]
          break;
 800f2b8:	e018      	b.n	800f2ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f2ba:	6839      	ldr	r1, [r7, #0]
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 fc21 	bl	800fb04 <USBD_GetConfig>
          break;
 800f2c2:	e013      	b.n	800f2ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f2c4:	6839      	ldr	r1, [r7, #0]
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 fc52 	bl	800fb70 <USBD_GetStatus>
          break;
 800f2cc:	e00e      	b.n	800f2ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 fc81 	bl	800fbd8 <USBD_SetFeature>
          break;
 800f2d6:	e009      	b.n	800f2ec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f2d8:	6839      	ldr	r1, [r7, #0]
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 fc90 	bl	800fc00 <USBD_ClrFeature>
          break;
 800f2e0:	e004      	b.n	800f2ec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f2e2:	6839      	ldr	r1, [r7, #0]
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	f000 fce7 	bl	800fcb8 <USBD_CtlError>
          break;
 800f2ea:	bf00      	nop
      }
      break;
 800f2ec:	e004      	b.n	800f2f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f2ee:	6839      	ldr	r1, [r7, #0]
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 fce1 	bl	800fcb8 <USBD_CtlError>
      break;
 800f2f6:	bf00      	nop
  }

  return ret;
 800f2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3710      	adds	r7, #16
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop

0800f304 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b084      	sub	sp, #16
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f30e:	2300      	movs	r3, #0
 800f310:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f31a:	2b40      	cmp	r3, #64	; 0x40
 800f31c:	d005      	beq.n	800f32a <USBD_StdItfReq+0x26>
 800f31e:	2b40      	cmp	r3, #64	; 0x40
 800f320:	d82f      	bhi.n	800f382 <USBD_StdItfReq+0x7e>
 800f322:	2b00      	cmp	r3, #0
 800f324:	d001      	beq.n	800f32a <USBD_StdItfReq+0x26>
 800f326:	2b20      	cmp	r3, #32
 800f328:	d12b      	bne.n	800f382 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f330:	b2db      	uxtb	r3, r3
 800f332:	3b01      	subs	r3, #1
 800f334:	2b02      	cmp	r3, #2
 800f336:	d81d      	bhi.n	800f374 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	889b      	ldrh	r3, [r3, #4]
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d813      	bhi.n	800f36a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	6839      	ldr	r1, [r7, #0]
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	4798      	blx	r3
 800f350:	4603      	mov	r3, r0
 800f352:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	88db      	ldrh	r3, [r3, #6]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d110      	bne.n	800f37e <USBD_StdItfReq+0x7a>
 800f35c:	7bfb      	ldrb	r3, [r7, #15]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d10d      	bne.n	800f37e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f000 fd73 	bl	800fe4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f368:	e009      	b.n	800f37e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f36a:	6839      	ldr	r1, [r7, #0]
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 fca3 	bl	800fcb8 <USBD_CtlError>
          break;
 800f372:	e004      	b.n	800f37e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f374:	6839      	ldr	r1, [r7, #0]
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 fc9e 	bl	800fcb8 <USBD_CtlError>
          break;
 800f37c:	e000      	b.n	800f380 <USBD_StdItfReq+0x7c>
          break;
 800f37e:	bf00      	nop
      }
      break;
 800f380:	e004      	b.n	800f38c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f382:	6839      	ldr	r1, [r7, #0]
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f000 fc97 	bl	800fcb8 <USBD_CtlError>
      break;
 800f38a:	bf00      	nop
  }

  return ret;
 800f38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}

0800f396 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f396:	b580      	push	{r7, lr}
 800f398:	b084      	sub	sp, #16
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
 800f39e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	889b      	ldrh	r3, [r3, #4]
 800f3a8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f3b2:	2b40      	cmp	r3, #64	; 0x40
 800f3b4:	d007      	beq.n	800f3c6 <USBD_StdEPReq+0x30>
 800f3b6:	2b40      	cmp	r3, #64	; 0x40
 800f3b8:	f200 8145 	bhi.w	800f646 <USBD_StdEPReq+0x2b0>
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d00c      	beq.n	800f3da <USBD_StdEPReq+0x44>
 800f3c0:	2b20      	cmp	r3, #32
 800f3c2:	f040 8140 	bne.w	800f646 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3cc:	689b      	ldr	r3, [r3, #8]
 800f3ce:	6839      	ldr	r1, [r7, #0]
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	4798      	blx	r3
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	73fb      	strb	r3, [r7, #15]
      break;
 800f3d8:	e13a      	b.n	800f650 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	785b      	ldrb	r3, [r3, #1]
 800f3de:	2b03      	cmp	r3, #3
 800f3e0:	d007      	beq.n	800f3f2 <USBD_StdEPReq+0x5c>
 800f3e2:	2b03      	cmp	r3, #3
 800f3e4:	f300 8129 	bgt.w	800f63a <USBD_StdEPReq+0x2a4>
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d07f      	beq.n	800f4ec <USBD_StdEPReq+0x156>
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d03c      	beq.n	800f46a <USBD_StdEPReq+0xd4>
 800f3f0:	e123      	b.n	800f63a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	2b02      	cmp	r3, #2
 800f3fc:	d002      	beq.n	800f404 <USBD_StdEPReq+0x6e>
 800f3fe:	2b03      	cmp	r3, #3
 800f400:	d016      	beq.n	800f430 <USBD_StdEPReq+0x9a>
 800f402:	e02c      	b.n	800f45e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f404:	7bbb      	ldrb	r3, [r7, #14]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d00d      	beq.n	800f426 <USBD_StdEPReq+0x90>
 800f40a:	7bbb      	ldrb	r3, [r7, #14]
 800f40c:	2b80      	cmp	r3, #128	; 0x80
 800f40e:	d00a      	beq.n	800f426 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f410:	7bbb      	ldrb	r3, [r7, #14]
 800f412:	4619      	mov	r1, r3
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f003 fc71 	bl	8012cfc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f41a:	2180      	movs	r1, #128	; 0x80
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f003 fc6d 	bl	8012cfc <USBD_LL_StallEP>
 800f422:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f424:	e020      	b.n	800f468 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f426:	6839      	ldr	r1, [r7, #0]
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 fc45 	bl	800fcb8 <USBD_CtlError>
              break;
 800f42e:	e01b      	b.n	800f468 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	885b      	ldrh	r3, [r3, #2]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d10e      	bne.n	800f456 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f438:	7bbb      	ldrb	r3, [r7, #14]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00b      	beq.n	800f456 <USBD_StdEPReq+0xc0>
 800f43e:	7bbb      	ldrb	r3, [r7, #14]
 800f440:	2b80      	cmp	r3, #128	; 0x80
 800f442:	d008      	beq.n	800f456 <USBD_StdEPReq+0xc0>
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	88db      	ldrh	r3, [r3, #6]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d104      	bne.n	800f456 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f44c:	7bbb      	ldrb	r3, [r7, #14]
 800f44e:	4619      	mov	r1, r3
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f003 fc53 	bl	8012cfc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 fcf9 	bl	800fe4e <USBD_CtlSendStatus>

              break;
 800f45c:	e004      	b.n	800f468 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f45e:	6839      	ldr	r1, [r7, #0]
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f000 fc29 	bl	800fcb8 <USBD_CtlError>
              break;
 800f466:	bf00      	nop
          }
          break;
 800f468:	e0ec      	b.n	800f644 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f470:	b2db      	uxtb	r3, r3
 800f472:	2b02      	cmp	r3, #2
 800f474:	d002      	beq.n	800f47c <USBD_StdEPReq+0xe6>
 800f476:	2b03      	cmp	r3, #3
 800f478:	d016      	beq.n	800f4a8 <USBD_StdEPReq+0x112>
 800f47a:	e030      	b.n	800f4de <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f47c:	7bbb      	ldrb	r3, [r7, #14]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d00d      	beq.n	800f49e <USBD_StdEPReq+0x108>
 800f482:	7bbb      	ldrb	r3, [r7, #14]
 800f484:	2b80      	cmp	r3, #128	; 0x80
 800f486:	d00a      	beq.n	800f49e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f488:	7bbb      	ldrb	r3, [r7, #14]
 800f48a:	4619      	mov	r1, r3
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f003 fc35 	bl	8012cfc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f492:	2180      	movs	r1, #128	; 0x80
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f003 fc31 	bl	8012cfc <USBD_LL_StallEP>
 800f49a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f49c:	e025      	b.n	800f4ea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f49e:	6839      	ldr	r1, [r7, #0]
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 fc09 	bl	800fcb8 <USBD_CtlError>
              break;
 800f4a6:	e020      	b.n	800f4ea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	885b      	ldrh	r3, [r3, #2]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d11b      	bne.n	800f4e8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f4b0:	7bbb      	ldrb	r3, [r7, #14]
 800f4b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d004      	beq.n	800f4c4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f4ba:	7bbb      	ldrb	r3, [r7, #14]
 800f4bc:	4619      	mov	r1, r3
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f003 fc3b 	bl	8012d3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fcc2 	bl	800fe4e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	6839      	ldr	r1, [r7, #0]
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	4798      	blx	r3
 800f4d8:	4603      	mov	r3, r0
 800f4da:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f4dc:	e004      	b.n	800f4e8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f4de:	6839      	ldr	r1, [r7, #0]
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f000 fbe9 	bl	800fcb8 <USBD_CtlError>
              break;
 800f4e6:	e000      	b.n	800f4ea <USBD_StdEPReq+0x154>
              break;
 800f4e8:	bf00      	nop
          }
          break;
 800f4ea:	e0ab      	b.n	800f644 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	2b02      	cmp	r3, #2
 800f4f6:	d002      	beq.n	800f4fe <USBD_StdEPReq+0x168>
 800f4f8:	2b03      	cmp	r3, #3
 800f4fa:	d032      	beq.n	800f562 <USBD_StdEPReq+0x1cc>
 800f4fc:	e097      	b.n	800f62e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f4fe:	7bbb      	ldrb	r3, [r7, #14]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d007      	beq.n	800f514 <USBD_StdEPReq+0x17e>
 800f504:	7bbb      	ldrb	r3, [r7, #14]
 800f506:	2b80      	cmp	r3, #128	; 0x80
 800f508:	d004      	beq.n	800f514 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f50a:	6839      	ldr	r1, [r7, #0]
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 fbd3 	bl	800fcb8 <USBD_CtlError>
                break;
 800f512:	e091      	b.n	800f638 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	da0b      	bge.n	800f534 <USBD_StdEPReq+0x19e>
 800f51c:	7bbb      	ldrb	r3, [r7, #14]
 800f51e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f522:	4613      	mov	r3, r2
 800f524:	009b      	lsls	r3, r3, #2
 800f526:	4413      	add	r3, r2
 800f528:	009b      	lsls	r3, r3, #2
 800f52a:	3310      	adds	r3, #16
 800f52c:	687a      	ldr	r2, [r7, #4]
 800f52e:	4413      	add	r3, r2
 800f530:	3304      	adds	r3, #4
 800f532:	e00b      	b.n	800f54c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f534:	7bbb      	ldrb	r3, [r7, #14]
 800f536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f53a:	4613      	mov	r3, r2
 800f53c:	009b      	lsls	r3, r3, #2
 800f53e:	4413      	add	r3, r2
 800f540:	009b      	lsls	r3, r3, #2
 800f542:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	4413      	add	r3, r2
 800f54a:	3304      	adds	r3, #4
 800f54c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	2200      	movs	r2, #0
 800f552:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	2202      	movs	r2, #2
 800f558:	4619      	mov	r1, r3
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 fc1d 	bl	800fd9a <USBD_CtlSendData>
              break;
 800f560:	e06a      	b.n	800f638 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f562:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f566:	2b00      	cmp	r3, #0
 800f568:	da11      	bge.n	800f58e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f56a:	7bbb      	ldrb	r3, [r7, #14]
 800f56c:	f003 020f 	and.w	r2, r3, #15
 800f570:	6879      	ldr	r1, [r7, #4]
 800f572:	4613      	mov	r3, r2
 800f574:	009b      	lsls	r3, r3, #2
 800f576:	4413      	add	r3, r2
 800f578:	009b      	lsls	r3, r3, #2
 800f57a:	440b      	add	r3, r1
 800f57c:	3324      	adds	r3, #36	; 0x24
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d117      	bne.n	800f5b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f584:	6839      	ldr	r1, [r7, #0]
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 fb96 	bl	800fcb8 <USBD_CtlError>
                  break;
 800f58c:	e054      	b.n	800f638 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f58e:	7bbb      	ldrb	r3, [r7, #14]
 800f590:	f003 020f 	and.w	r2, r3, #15
 800f594:	6879      	ldr	r1, [r7, #4]
 800f596:	4613      	mov	r3, r2
 800f598:	009b      	lsls	r3, r3, #2
 800f59a:	4413      	add	r3, r2
 800f59c:	009b      	lsls	r3, r3, #2
 800f59e:	440b      	add	r3, r1
 800f5a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f5a4:	881b      	ldrh	r3, [r3, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d104      	bne.n	800f5b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f5aa:	6839      	ldr	r1, [r7, #0]
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f000 fb83 	bl	800fcb8 <USBD_CtlError>
                  break;
 800f5b2:	e041      	b.n	800f638 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f5b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	da0b      	bge.n	800f5d4 <USBD_StdEPReq+0x23e>
 800f5bc:	7bbb      	ldrb	r3, [r7, #14]
 800f5be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	4413      	add	r3, r2
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	3310      	adds	r3, #16
 800f5cc:	687a      	ldr	r2, [r7, #4]
 800f5ce:	4413      	add	r3, r2
 800f5d0:	3304      	adds	r3, #4
 800f5d2:	e00b      	b.n	800f5ec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f5d4:	7bbb      	ldrb	r3, [r7, #14]
 800f5d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f5da:	4613      	mov	r3, r2
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	4413      	add	r3, r2
 800f5e0:	009b      	lsls	r3, r3, #2
 800f5e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f5e6:	687a      	ldr	r2, [r7, #4]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	3304      	adds	r3, #4
 800f5ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f5ee:	7bbb      	ldrb	r3, [r7, #14]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d002      	beq.n	800f5fa <USBD_StdEPReq+0x264>
 800f5f4:	7bbb      	ldrb	r3, [r7, #14]
 800f5f6:	2b80      	cmp	r3, #128	; 0x80
 800f5f8:	d103      	bne.n	800f602 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	601a      	str	r2, [r3, #0]
 800f600:	e00e      	b.n	800f620 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f602:	7bbb      	ldrb	r3, [r7, #14]
 800f604:	4619      	mov	r1, r3
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f003 fbb6 	bl	8012d78 <USBD_LL_IsStallEP>
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d003      	beq.n	800f61a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	2201      	movs	r2, #1
 800f616:	601a      	str	r2, [r3, #0]
 800f618:	e002      	b.n	800f620 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	2200      	movs	r2, #0
 800f61e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	2202      	movs	r2, #2
 800f624:	4619      	mov	r1, r3
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f000 fbb7 	bl	800fd9a <USBD_CtlSendData>
              break;
 800f62c:	e004      	b.n	800f638 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f62e:	6839      	ldr	r1, [r7, #0]
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f000 fb41 	bl	800fcb8 <USBD_CtlError>
              break;
 800f636:	bf00      	nop
          }
          break;
 800f638:	e004      	b.n	800f644 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f63a:	6839      	ldr	r1, [r7, #0]
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f000 fb3b 	bl	800fcb8 <USBD_CtlError>
          break;
 800f642:	bf00      	nop
      }
      break;
 800f644:	e004      	b.n	800f650 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f646:	6839      	ldr	r1, [r7, #0]
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f000 fb35 	bl	800fcb8 <USBD_CtlError>
      break;
 800f64e:	bf00      	nop
  }

  return ret;
 800f650:	7bfb      	ldrb	r3, [r7, #15]
}
 800f652:	4618      	mov	r0, r3
 800f654:	3710      	adds	r7, #16
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
	...

0800f65c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b084      	sub	sp, #16
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f666:	2300      	movs	r3, #0
 800f668:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f66a:	2300      	movs	r3, #0
 800f66c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f66e:	2300      	movs	r3, #0
 800f670:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	885b      	ldrh	r3, [r3, #2]
 800f676:	0a1b      	lsrs	r3, r3, #8
 800f678:	b29b      	uxth	r3, r3
 800f67a:	3b01      	subs	r3, #1
 800f67c:	2b06      	cmp	r3, #6
 800f67e:	f200 8128 	bhi.w	800f8d2 <USBD_GetDescriptor+0x276>
 800f682:	a201      	add	r2, pc, #4	; (adr r2, 800f688 <USBD_GetDescriptor+0x2c>)
 800f684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f688:	0800f6a5 	.word	0x0800f6a5
 800f68c:	0800f6bd 	.word	0x0800f6bd
 800f690:	0800f6fd 	.word	0x0800f6fd
 800f694:	0800f8d3 	.word	0x0800f8d3
 800f698:	0800f8d3 	.word	0x0800f8d3
 800f69c:	0800f873 	.word	0x0800f873
 800f6a0:	0800f89f 	.word	0x0800f89f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	687a      	ldr	r2, [r7, #4]
 800f6ae:	7c12      	ldrb	r2, [r2, #16]
 800f6b0:	f107 0108 	add.w	r1, r7, #8
 800f6b4:	4610      	mov	r0, r2
 800f6b6:	4798      	blx	r3
 800f6b8:	60f8      	str	r0, [r7, #12]
      break;
 800f6ba:	e112      	b.n	800f8e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	7c1b      	ldrb	r3, [r3, #16]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d10d      	bne.n	800f6e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6cc:	f107 0208 	add.w	r2, r7, #8
 800f6d0:	4610      	mov	r0, r2
 800f6d2:	4798      	blx	r3
 800f6d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	3301      	adds	r3, #1
 800f6da:	2202      	movs	r2, #2
 800f6dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f6de:	e100      	b.n	800f8e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6e8:	f107 0208 	add.w	r2, r7, #8
 800f6ec:	4610      	mov	r0, r2
 800f6ee:	4798      	blx	r3
 800f6f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	2202      	movs	r2, #2
 800f6f8:	701a      	strb	r2, [r3, #0]
      break;
 800f6fa:	e0f2      	b.n	800f8e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	885b      	ldrh	r3, [r3, #2]
 800f700:	b2db      	uxtb	r3, r3
 800f702:	2b05      	cmp	r3, #5
 800f704:	f200 80ac 	bhi.w	800f860 <USBD_GetDescriptor+0x204>
 800f708:	a201      	add	r2, pc, #4	; (adr r2, 800f710 <USBD_GetDescriptor+0xb4>)
 800f70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f70e:	bf00      	nop
 800f710:	0800f729 	.word	0x0800f729
 800f714:	0800f75d 	.word	0x0800f75d
 800f718:	0800f791 	.word	0x0800f791
 800f71c:	0800f7c5 	.word	0x0800f7c5
 800f720:	0800f7f9 	.word	0x0800f7f9
 800f724:	0800f82d 	.word	0x0800f82d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d00b      	beq.n	800f74c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	687a      	ldr	r2, [r7, #4]
 800f73e:	7c12      	ldrb	r2, [r2, #16]
 800f740:	f107 0108 	add.w	r1, r7, #8
 800f744:	4610      	mov	r0, r2
 800f746:	4798      	blx	r3
 800f748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f74a:	e091      	b.n	800f870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 fab2 	bl	800fcb8 <USBD_CtlError>
            err++;
 800f754:	7afb      	ldrb	r3, [r7, #11]
 800f756:	3301      	adds	r3, #1
 800f758:	72fb      	strb	r3, [r7, #11]
          break;
 800f75a:	e089      	b.n	800f870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f762:	689b      	ldr	r3, [r3, #8]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00b      	beq.n	800f780 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f76e:	689b      	ldr	r3, [r3, #8]
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	7c12      	ldrb	r2, [r2, #16]
 800f774:	f107 0108 	add.w	r1, r7, #8
 800f778:	4610      	mov	r0, r2
 800f77a:	4798      	blx	r3
 800f77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f77e:	e077      	b.n	800f870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f780:	6839      	ldr	r1, [r7, #0]
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 fa98 	bl	800fcb8 <USBD_CtlError>
            err++;
 800f788:	7afb      	ldrb	r3, [r7, #11]
 800f78a:	3301      	adds	r3, #1
 800f78c:	72fb      	strb	r3, [r7, #11]
          break;
 800f78e:	e06f      	b.n	800f870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f796:	68db      	ldr	r3, [r3, #12]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d00b      	beq.n	800f7b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	7c12      	ldrb	r2, [r2, #16]
 800f7a8:	f107 0108 	add.w	r1, r7, #8
 800f7ac:	4610      	mov	r0, r2
 800f7ae:	4798      	blx	r3
 800f7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7b2:	e05d      	b.n	800f870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f7b4:	6839      	ldr	r1, [r7, #0]
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 fa7e 	bl	800fcb8 <USBD_CtlError>
            err++;
 800f7bc:	7afb      	ldrb	r3, [r7, #11]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f7c2:	e055      	b.n	800f870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7ca:	691b      	ldr	r3, [r3, #16]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d00b      	beq.n	800f7e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7d6:	691b      	ldr	r3, [r3, #16]
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	7c12      	ldrb	r2, [r2, #16]
 800f7dc:	f107 0108 	add.w	r1, r7, #8
 800f7e0:	4610      	mov	r0, r2
 800f7e2:	4798      	blx	r3
 800f7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7e6:	e043      	b.n	800f870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f7e8:	6839      	ldr	r1, [r7, #0]
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 fa64 	bl	800fcb8 <USBD_CtlError>
            err++;
 800f7f0:	7afb      	ldrb	r3, [r7, #11]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f7f6:	e03b      	b.n	800f870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7fe:	695b      	ldr	r3, [r3, #20]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00b      	beq.n	800f81c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f80a:	695b      	ldr	r3, [r3, #20]
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	7c12      	ldrb	r2, [r2, #16]
 800f810:	f107 0108 	add.w	r1, r7, #8
 800f814:	4610      	mov	r0, r2
 800f816:	4798      	blx	r3
 800f818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f81a:	e029      	b.n	800f870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f81c:	6839      	ldr	r1, [r7, #0]
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 fa4a 	bl	800fcb8 <USBD_CtlError>
            err++;
 800f824:	7afb      	ldrb	r3, [r7, #11]
 800f826:	3301      	adds	r3, #1
 800f828:	72fb      	strb	r3, [r7, #11]
          break;
 800f82a:	e021      	b.n	800f870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f832:	699b      	ldr	r3, [r3, #24]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d00b      	beq.n	800f850 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f83e:	699b      	ldr	r3, [r3, #24]
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	7c12      	ldrb	r2, [r2, #16]
 800f844:	f107 0108 	add.w	r1, r7, #8
 800f848:	4610      	mov	r0, r2
 800f84a:	4798      	blx	r3
 800f84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f84e:	e00f      	b.n	800f870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f850:	6839      	ldr	r1, [r7, #0]
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f000 fa30 	bl	800fcb8 <USBD_CtlError>
            err++;
 800f858:	7afb      	ldrb	r3, [r7, #11]
 800f85a:	3301      	adds	r3, #1
 800f85c:	72fb      	strb	r3, [r7, #11]
          break;
 800f85e:	e007      	b.n	800f870 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f860:	6839      	ldr	r1, [r7, #0]
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 fa28 	bl	800fcb8 <USBD_CtlError>
          err++;
 800f868:	7afb      	ldrb	r3, [r7, #11]
 800f86a:	3301      	adds	r3, #1
 800f86c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f86e:	bf00      	nop
      }
      break;
 800f870:	e037      	b.n	800f8e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	7c1b      	ldrb	r3, [r3, #16]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d109      	bne.n	800f88e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f882:	f107 0208 	add.w	r2, r7, #8
 800f886:	4610      	mov	r0, r2
 800f888:	4798      	blx	r3
 800f88a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f88c:	e029      	b.n	800f8e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f88e:	6839      	ldr	r1, [r7, #0]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 fa11 	bl	800fcb8 <USBD_CtlError>
        err++;
 800f896:	7afb      	ldrb	r3, [r7, #11]
 800f898:	3301      	adds	r3, #1
 800f89a:	72fb      	strb	r3, [r7, #11]
      break;
 800f89c:	e021      	b.n	800f8e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	7c1b      	ldrb	r3, [r3, #16]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d10d      	bne.n	800f8c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8ae:	f107 0208 	add.w	r2, r7, #8
 800f8b2:	4610      	mov	r0, r2
 800f8b4:	4798      	blx	r3
 800f8b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	2207      	movs	r2, #7
 800f8be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f8c0:	e00f      	b.n	800f8e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f8c2:	6839      	ldr	r1, [r7, #0]
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 f9f7 	bl	800fcb8 <USBD_CtlError>
        err++;
 800f8ca:	7afb      	ldrb	r3, [r7, #11]
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	72fb      	strb	r3, [r7, #11]
      break;
 800f8d0:	e007      	b.n	800f8e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f8d2:	6839      	ldr	r1, [r7, #0]
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 f9ef 	bl	800fcb8 <USBD_CtlError>
      err++;
 800f8da:	7afb      	ldrb	r3, [r7, #11]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	72fb      	strb	r3, [r7, #11]
      break;
 800f8e0:	bf00      	nop
  }

  if (err != 0U)
 800f8e2:	7afb      	ldrb	r3, [r7, #11]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d11e      	bne.n	800f926 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	88db      	ldrh	r3, [r3, #6]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d016      	beq.n	800f91e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f8f0:	893b      	ldrh	r3, [r7, #8]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00e      	beq.n	800f914 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	88da      	ldrh	r2, [r3, #6]
 800f8fa:	893b      	ldrh	r3, [r7, #8]
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	bf28      	it	cs
 800f900:	4613      	movcs	r3, r2
 800f902:	b29b      	uxth	r3, r3
 800f904:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f906:	893b      	ldrh	r3, [r7, #8]
 800f908:	461a      	mov	r2, r3
 800f90a:	68f9      	ldr	r1, [r7, #12]
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 fa44 	bl	800fd9a <USBD_CtlSendData>
 800f912:	e009      	b.n	800f928 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f914:	6839      	ldr	r1, [r7, #0]
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 f9ce 	bl	800fcb8 <USBD_CtlError>
 800f91c:	e004      	b.n	800f928 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 fa95 	bl	800fe4e <USBD_CtlSendStatus>
 800f924:	e000      	b.n	800f928 <USBD_GetDescriptor+0x2cc>
    return;
 800f926:	bf00      	nop
  }
}
 800f928:	3710      	adds	r7, #16
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop

0800f930 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b084      	sub	sp, #16
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	889b      	ldrh	r3, [r3, #4]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d131      	bne.n	800f9a6 <USBD_SetAddress+0x76>
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	88db      	ldrh	r3, [r3, #6]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d12d      	bne.n	800f9a6 <USBD_SetAddress+0x76>
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	885b      	ldrh	r3, [r3, #2]
 800f94e:	2b7f      	cmp	r3, #127	; 0x7f
 800f950:	d829      	bhi.n	800f9a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	885b      	ldrh	r3, [r3, #2]
 800f956:	b2db      	uxtb	r3, r3
 800f958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f95c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f964:	b2db      	uxtb	r3, r3
 800f966:	2b03      	cmp	r3, #3
 800f968:	d104      	bne.n	800f974 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f96a:	6839      	ldr	r1, [r7, #0]
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 f9a3 	bl	800fcb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f972:	e01d      	b.n	800f9b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	7bfa      	ldrb	r2, [r7, #15]
 800f978:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f97c:	7bfb      	ldrb	r3, [r7, #15]
 800f97e:	4619      	mov	r1, r3
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f003 fa25 	bl	8012dd0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f000 fa61 	bl	800fe4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f98c:	7bfb      	ldrb	r3, [r7, #15]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d004      	beq.n	800f99c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2202      	movs	r2, #2
 800f996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f99a:	e009      	b.n	800f9b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9a4:	e004      	b.n	800f9b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f9a6:	6839      	ldr	r1, [r7, #0]
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 f985 	bl	800fcb8 <USBD_CtlError>
  }
}
 800f9ae:	bf00      	nop
 800f9b0:	bf00      	nop
 800f9b2:	3710      	adds	r7, #16
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	885b      	ldrh	r3, [r3, #2]
 800f9ca:	b2da      	uxtb	r2, r3
 800f9cc:	4b4c      	ldr	r3, [pc, #304]	; (800fb00 <USBD_SetConfig+0x148>)
 800f9ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f9d0:	4b4b      	ldr	r3, [pc, #300]	; (800fb00 <USBD_SetConfig+0x148>)
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d905      	bls.n	800f9e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f9d8:	6839      	ldr	r1, [r7, #0]
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 f96c 	bl	800fcb8 <USBD_CtlError>
    return USBD_FAIL;
 800f9e0:	2303      	movs	r3, #3
 800f9e2:	e088      	b.n	800faf6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	2b02      	cmp	r3, #2
 800f9ee:	d002      	beq.n	800f9f6 <USBD_SetConfig+0x3e>
 800f9f0:	2b03      	cmp	r3, #3
 800f9f2:	d025      	beq.n	800fa40 <USBD_SetConfig+0x88>
 800f9f4:	e071      	b.n	800fada <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f9f6:	4b42      	ldr	r3, [pc, #264]	; (800fb00 <USBD_SetConfig+0x148>)
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d01c      	beq.n	800fa38 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f9fe:	4b40      	ldr	r3, [pc, #256]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	461a      	mov	r2, r3
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa08:	4b3d      	ldr	r3, [pc, #244]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f7ff f948 	bl	800eca4 <USBD_SetClassConfig>
 800fa14:	4603      	mov	r3, r0
 800fa16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fa18:	7bfb      	ldrb	r3, [r7, #15]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d004      	beq.n	800fa28 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800fa1e:	6839      	ldr	r1, [r7, #0]
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f000 f949 	bl	800fcb8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fa26:	e065      	b.n	800faf4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f000 fa10 	bl	800fe4e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2203      	movs	r2, #3
 800fa32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fa36:	e05d      	b.n	800faf4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f000 fa08 	bl	800fe4e <USBD_CtlSendStatus>
      break;
 800fa3e:	e059      	b.n	800faf4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fa40:	4b2f      	ldr	r3, [pc, #188]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d112      	bne.n	800fa6e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2202      	movs	r2, #2
 800fa4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fa50:	4b2b      	ldr	r3, [pc, #172]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	461a      	mov	r2, r3
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fa5a:	4b29      	ldr	r3, [pc, #164]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	4619      	mov	r1, r3
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7ff f93b 	bl	800ecdc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 f9f1 	bl	800fe4e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fa6c:	e042      	b.n	800faf4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800fa6e:	4b24      	ldr	r3, [pc, #144]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	461a      	mov	r2, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d02a      	beq.n	800fad2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	685b      	ldr	r3, [r3, #4]
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	4619      	mov	r1, r3
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7ff f929 	bl	800ecdc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fa8a:	4b1d      	ldr	r3, [pc, #116]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	461a      	mov	r2, r3
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa94:	4b1a      	ldr	r3, [pc, #104]	; (800fb00 <USBD_SetConfig+0x148>)
 800fa96:	781b      	ldrb	r3, [r3, #0]
 800fa98:	4619      	mov	r1, r3
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f7ff f902 	bl	800eca4 <USBD_SetClassConfig>
 800faa0:	4603      	mov	r3, r0
 800faa2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800faa4:	7bfb      	ldrb	r3, [r7, #15]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d00f      	beq.n	800faca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800faaa:	6839      	ldr	r1, [r7, #0]
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f000 f903 	bl	800fcb8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	4619      	mov	r1, r3
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f7ff f90e 	bl	800ecdc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2202      	movs	r2, #2
 800fac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fac8:	e014      	b.n	800faf4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f000 f9bf 	bl	800fe4e <USBD_CtlSendStatus>
      break;
 800fad0:	e010      	b.n	800faf4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 f9bb 	bl	800fe4e <USBD_CtlSendStatus>
      break;
 800fad8:	e00c      	b.n	800faf4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800fada:	6839      	ldr	r1, [r7, #0]
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 f8eb 	bl	800fcb8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fae2:	4b07      	ldr	r3, [pc, #28]	; (800fb00 <USBD_SetConfig+0x148>)
 800fae4:	781b      	ldrb	r3, [r3, #0]
 800fae6:	4619      	mov	r1, r3
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f7ff f8f7 	bl	800ecdc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800faee:	2303      	movs	r3, #3
 800faf0:	73fb      	strb	r3, [r7, #15]
      break;
 800faf2:	bf00      	nop
  }

  return ret;
 800faf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3710      	adds	r7, #16
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	2000064e 	.word	0x2000064e

0800fb04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	88db      	ldrh	r3, [r3, #6]
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d004      	beq.n	800fb20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fb16:	6839      	ldr	r1, [r7, #0]
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 f8cd 	bl	800fcb8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fb1e:	e023      	b.n	800fb68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb26:	b2db      	uxtb	r3, r3
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	dc02      	bgt.n	800fb32 <USBD_GetConfig+0x2e>
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	dc03      	bgt.n	800fb38 <USBD_GetConfig+0x34>
 800fb30:	e015      	b.n	800fb5e <USBD_GetConfig+0x5a>
 800fb32:	2b03      	cmp	r3, #3
 800fb34:	d00b      	beq.n	800fb4e <USBD_GetConfig+0x4a>
 800fb36:	e012      	b.n	800fb5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	3308      	adds	r3, #8
 800fb42:	2201      	movs	r2, #1
 800fb44:	4619      	mov	r1, r3
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 f927 	bl	800fd9a <USBD_CtlSendData>
        break;
 800fb4c:	e00c      	b.n	800fb68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	3304      	adds	r3, #4
 800fb52:	2201      	movs	r2, #1
 800fb54:	4619      	mov	r1, r3
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 f91f 	bl	800fd9a <USBD_CtlSendData>
        break;
 800fb5c:	e004      	b.n	800fb68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fb5e:	6839      	ldr	r1, [r7, #0]
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f000 f8a9 	bl	800fcb8 <USBD_CtlError>
        break;
 800fb66:	bf00      	nop
}
 800fb68:	bf00      	nop
 800fb6a:	3708      	adds	r7, #8
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	3b01      	subs	r3, #1
 800fb84:	2b02      	cmp	r3, #2
 800fb86:	d81e      	bhi.n	800fbc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	88db      	ldrh	r3, [r3, #6]
 800fb8c:	2b02      	cmp	r3, #2
 800fb8e:	d004      	beq.n	800fb9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fb90:	6839      	ldr	r1, [r7, #0]
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 f890 	bl	800fcb8 <USBD_CtlError>
        break;
 800fb98:	e01a      	b.n	800fbd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2201      	movs	r2, #1
 800fb9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d005      	beq.n	800fbb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	f043 0202 	orr.w	r2, r3, #2
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	330c      	adds	r3, #12
 800fbba:	2202      	movs	r2, #2
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 f8eb 	bl	800fd9a <USBD_CtlSendData>
      break;
 800fbc4:	e004      	b.n	800fbd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fbc6:	6839      	ldr	r1, [r7, #0]
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f000 f875 	bl	800fcb8 <USBD_CtlError>
      break;
 800fbce:	bf00      	nop
  }
}
 800fbd0:	bf00      	nop
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	885b      	ldrh	r3, [r3, #2]
 800fbe6:	2b01      	cmp	r3, #1
 800fbe8:	d106      	bne.n	800fbf8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2201      	movs	r2, #1
 800fbee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 f92b 	bl	800fe4e <USBD_CtlSendStatus>
  }
}
 800fbf8:	bf00      	nop
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b082      	sub	sp, #8
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc10:	b2db      	uxtb	r3, r3
 800fc12:	3b01      	subs	r3, #1
 800fc14:	2b02      	cmp	r3, #2
 800fc16:	d80b      	bhi.n	800fc30 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	885b      	ldrh	r3, [r3, #2]
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d10c      	bne.n	800fc3a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2200      	movs	r2, #0
 800fc24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 f910 	bl	800fe4e <USBD_CtlSendStatus>
      }
      break;
 800fc2e:	e004      	b.n	800fc3a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fc30:	6839      	ldr	r1, [r7, #0]
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 f840 	bl	800fcb8 <USBD_CtlError>
      break;
 800fc38:	e000      	b.n	800fc3c <USBD_ClrFeature+0x3c>
      break;
 800fc3a:	bf00      	nop
  }
}
 800fc3c:	bf00      	nop
 800fc3e:	3708      	adds	r7, #8
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	781a      	ldrb	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	781a      	ldrb	r2, [r3, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fc6e:	68f8      	ldr	r0, [r7, #12]
 800fc70:	f7ff fabb 	bl	800f1ea <SWAPBYTE>
 800fc74:	4603      	mov	r3, r0
 800fc76:	461a      	mov	r2, r3
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	3301      	adds	r3, #1
 800fc86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fc88:	68f8      	ldr	r0, [r7, #12]
 800fc8a:	f7ff faae 	bl	800f1ea <SWAPBYTE>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	461a      	mov	r2, r3
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fca2:	68f8      	ldr	r0, [r7, #12]
 800fca4:	f7ff faa1 	bl	800f1ea <SWAPBYTE>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	461a      	mov	r2, r3
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	80da      	strh	r2, [r3, #6]
}
 800fcb0:	bf00      	nop
 800fcb2:	3710      	adds	r7, #16
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcc2:	2180      	movs	r1, #128	; 0x80
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f003 f819 	bl	8012cfc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fcca:	2100      	movs	r1, #0
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f003 f815 	bl	8012cfc <USBD_LL_StallEP>
}
 800fcd2:	bf00      	nop
 800fcd4:	3708      	adds	r7, #8
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b086      	sub	sp, #24
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	60f8      	str	r0, [r7, #12]
 800fce2:	60b9      	str	r1, [r7, #8]
 800fce4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fce6:	2300      	movs	r3, #0
 800fce8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d036      	beq.n	800fd5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fcf4:	6938      	ldr	r0, [r7, #16]
 800fcf6:	f000 f836 	bl	800fd66 <USBD_GetLen>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	005b      	lsls	r3, r3, #1
 800fd02:	b29a      	uxth	r2, r3
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fd08:	7dfb      	ldrb	r3, [r7, #23]
 800fd0a:	68ba      	ldr	r2, [r7, #8]
 800fd0c:	4413      	add	r3, r2
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	7812      	ldrb	r2, [r2, #0]
 800fd12:	701a      	strb	r2, [r3, #0]
  idx++;
 800fd14:	7dfb      	ldrb	r3, [r7, #23]
 800fd16:	3301      	adds	r3, #1
 800fd18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fd1a:	7dfb      	ldrb	r3, [r7, #23]
 800fd1c:	68ba      	ldr	r2, [r7, #8]
 800fd1e:	4413      	add	r3, r2
 800fd20:	2203      	movs	r2, #3
 800fd22:	701a      	strb	r2, [r3, #0]
  idx++;
 800fd24:	7dfb      	ldrb	r3, [r7, #23]
 800fd26:	3301      	adds	r3, #1
 800fd28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fd2a:	e013      	b.n	800fd54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fd2c:	7dfb      	ldrb	r3, [r7, #23]
 800fd2e:	68ba      	ldr	r2, [r7, #8]
 800fd30:	4413      	add	r3, r2
 800fd32:	693a      	ldr	r2, [r7, #16]
 800fd34:	7812      	ldrb	r2, [r2, #0]
 800fd36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	613b      	str	r3, [r7, #16]
    idx++;
 800fd3e:	7dfb      	ldrb	r3, [r7, #23]
 800fd40:	3301      	adds	r3, #1
 800fd42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fd44:	7dfb      	ldrb	r3, [r7, #23]
 800fd46:	68ba      	ldr	r2, [r7, #8]
 800fd48:	4413      	add	r3, r2
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	701a      	strb	r2, [r3, #0]
    idx++;
 800fd4e:	7dfb      	ldrb	r3, [r7, #23]
 800fd50:	3301      	adds	r3, #1
 800fd52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d1e7      	bne.n	800fd2c <USBD_GetString+0x52>
 800fd5c:	e000      	b.n	800fd60 <USBD_GetString+0x86>
    return;
 800fd5e:	bf00      	nop
  }
}
 800fd60:	3718      	adds	r7, #24
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}

0800fd66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fd66:	b480      	push	{r7}
 800fd68:	b085      	sub	sp, #20
 800fd6a:	af00      	add	r7, sp, #0
 800fd6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fd76:	e005      	b.n	800fd84 <USBD_GetLen+0x1e>
  {
    len++;
 800fd78:	7bfb      	ldrb	r3, [r7, #15]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	3301      	adds	r3, #1
 800fd82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d1f5      	bne.n	800fd78 <USBD_GetLen+0x12>
  }

  return len;
 800fd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3714      	adds	r7, #20
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr

0800fd9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fd9a:	b580      	push	{r7, lr}
 800fd9c:	b084      	sub	sp, #16
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	60f8      	str	r0, [r7, #12]
 800fda2:	60b9      	str	r1, [r7, #8]
 800fda4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2202      	movs	r2, #2
 800fdaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	687a      	ldr	r2, [r7, #4]
 800fdb8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	68ba      	ldr	r2, [r7, #8]
 800fdbe:	2100      	movs	r1, #0
 800fdc0:	68f8      	ldr	r0, [r7, #12]
 800fdc2:	f003 f824 	bl	8012e0e <USBD_LL_Transmit>

  return USBD_OK;
 800fdc6:	2300      	movs	r3, #0
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3710      	adds	r7, #16
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	68ba      	ldr	r2, [r7, #8]
 800fde0:	2100      	movs	r1, #0
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f003 f813 	bl	8012e0e <USBD_LL_Transmit>

  return USBD_OK;
 800fde8:	2300      	movs	r3, #0
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3710      	adds	r7, #16
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b084      	sub	sp, #16
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	60f8      	str	r0, [r7, #12]
 800fdfa:	60b9      	str	r1, [r7, #8]
 800fdfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	2203      	movs	r2, #3
 800fe02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	687a      	ldr	r2, [r7, #4]
 800fe0a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	68ba      	ldr	r2, [r7, #8]
 800fe1a:	2100      	movs	r1, #0
 800fe1c:	68f8      	ldr	r0, [r7, #12]
 800fe1e:	f003 f817 	bl	8012e50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3710      	adds	r7, #16
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b084      	sub	sp, #16
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	68ba      	ldr	r2, [r7, #8]
 800fe3c:	2100      	movs	r1, #0
 800fe3e:	68f8      	ldr	r0, [r7, #12]
 800fe40:	f003 f806 	bl	8012e50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe44:	2300      	movs	r3, #0
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3710      	adds	r7, #16
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b082      	sub	sp, #8
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2204      	movs	r2, #4
 800fe5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fe5e:	2300      	movs	r3, #0
 800fe60:	2200      	movs	r2, #0
 800fe62:	2100      	movs	r1, #0
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f002 ffd2 	bl	8012e0e <USBD_LL_Transmit>

  return USBD_OK;
 800fe6a:	2300      	movs	r3, #0
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2205      	movs	r2, #5
 800fe80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe84:	2300      	movs	r3, #0
 800fe86:	2200      	movs	r2, #0
 800fe88:	2100      	movs	r1, #0
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f002 ffe0 	bl	8012e50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe90:	2300      	movs	r3, #0
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3708      	adds	r7, #8
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
	...

0800fe9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b084      	sub	sp, #16
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	4603      	mov	r3, r0
 800fea4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fea6:	79fb      	ldrb	r3, [r7, #7]
 800fea8:	4a08      	ldr	r2, [pc, #32]	; (800fecc <disk_status+0x30>)
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	4413      	add	r3, r2
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	79fa      	ldrb	r2, [r7, #7]
 800feb4:	4905      	ldr	r1, [pc, #20]	; (800fecc <disk_status+0x30>)
 800feb6:	440a      	add	r2, r1
 800feb8:	7a12      	ldrb	r2, [r2, #8]
 800feba:	4610      	mov	r0, r2
 800febc:	4798      	blx	r3
 800febe:	4603      	mov	r3, r0
 800fec0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fec4:	4618      	mov	r0, r3
 800fec6:	3710      	adds	r7, #16
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	20000678 	.word	0x20000678

0800fed0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	4603      	mov	r3, r0
 800fed8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800feda:	2300      	movs	r3, #0
 800fedc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fede:	79fb      	ldrb	r3, [r7, #7]
 800fee0:	4a0d      	ldr	r2, [pc, #52]	; (800ff18 <disk_initialize+0x48>)
 800fee2:	5cd3      	ldrb	r3, [r2, r3]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d111      	bne.n	800ff0c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800fee8:	79fb      	ldrb	r3, [r7, #7]
 800feea:	4a0b      	ldr	r2, [pc, #44]	; (800ff18 <disk_initialize+0x48>)
 800feec:	2101      	movs	r1, #1
 800feee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fef0:	79fb      	ldrb	r3, [r7, #7]
 800fef2:	4a09      	ldr	r2, [pc, #36]	; (800ff18 <disk_initialize+0x48>)
 800fef4:	009b      	lsls	r3, r3, #2
 800fef6:	4413      	add	r3, r2
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	79fa      	ldrb	r2, [r7, #7]
 800fefe:	4906      	ldr	r1, [pc, #24]	; (800ff18 <disk_initialize+0x48>)
 800ff00:	440a      	add	r2, r1
 800ff02:	7a12      	ldrb	r2, [r2, #8]
 800ff04:	4610      	mov	r0, r2
 800ff06:	4798      	blx	r3
 800ff08:	4603      	mov	r3, r0
 800ff0a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ff0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3710      	adds	r7, #16
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	20000678 	.word	0x20000678

0800ff1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ff1c:	b590      	push	{r4, r7, lr}
 800ff1e:	b087      	sub	sp, #28
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60b9      	str	r1, [r7, #8]
 800ff24:	607a      	str	r2, [r7, #4]
 800ff26:	603b      	str	r3, [r7, #0]
 800ff28:	4603      	mov	r3, r0
 800ff2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ff2c:	7bfb      	ldrb	r3, [r7, #15]
 800ff2e:	4a0a      	ldr	r2, [pc, #40]	; (800ff58 <disk_read+0x3c>)
 800ff30:	009b      	lsls	r3, r3, #2
 800ff32:	4413      	add	r3, r2
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	689c      	ldr	r4, [r3, #8]
 800ff38:	7bfb      	ldrb	r3, [r7, #15]
 800ff3a:	4a07      	ldr	r2, [pc, #28]	; (800ff58 <disk_read+0x3c>)
 800ff3c:	4413      	add	r3, r2
 800ff3e:	7a18      	ldrb	r0, [r3, #8]
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	68b9      	ldr	r1, [r7, #8]
 800ff46:	47a0      	blx	r4
 800ff48:	4603      	mov	r3, r0
 800ff4a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ff4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	371c      	adds	r7, #28
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd90      	pop	{r4, r7, pc}
 800ff56:	bf00      	nop
 800ff58:	20000678 	.word	0x20000678

0800ff5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ff5c:	b590      	push	{r4, r7, lr}
 800ff5e:	b087      	sub	sp, #28
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	60b9      	str	r1, [r7, #8]
 800ff64:	607a      	str	r2, [r7, #4]
 800ff66:	603b      	str	r3, [r7, #0]
 800ff68:	4603      	mov	r3, r0
 800ff6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ff6c:	7bfb      	ldrb	r3, [r7, #15]
 800ff6e:	4a0a      	ldr	r2, [pc, #40]	; (800ff98 <disk_write+0x3c>)
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	4413      	add	r3, r2
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	68dc      	ldr	r4, [r3, #12]
 800ff78:	7bfb      	ldrb	r3, [r7, #15]
 800ff7a:	4a07      	ldr	r2, [pc, #28]	; (800ff98 <disk_write+0x3c>)
 800ff7c:	4413      	add	r3, r2
 800ff7e:	7a18      	ldrb	r0, [r3, #8]
 800ff80:	683b      	ldr	r3, [r7, #0]
 800ff82:	687a      	ldr	r2, [r7, #4]
 800ff84:	68b9      	ldr	r1, [r7, #8]
 800ff86:	47a0      	blx	r4
 800ff88:	4603      	mov	r3, r0
 800ff8a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ff8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	371c      	adds	r7, #28
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd90      	pop	{r4, r7, pc}
 800ff96:	bf00      	nop
 800ff98:	20000678 	.word	0x20000678

0800ff9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	603a      	str	r2, [r7, #0]
 800ffa6:	71fb      	strb	r3, [r7, #7]
 800ffa8:	460b      	mov	r3, r1
 800ffaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ffac:	79fb      	ldrb	r3, [r7, #7]
 800ffae:	4a09      	ldr	r2, [pc, #36]	; (800ffd4 <disk_ioctl+0x38>)
 800ffb0:	009b      	lsls	r3, r3, #2
 800ffb2:	4413      	add	r3, r2
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	691b      	ldr	r3, [r3, #16]
 800ffb8:	79fa      	ldrb	r2, [r7, #7]
 800ffba:	4906      	ldr	r1, [pc, #24]	; (800ffd4 <disk_ioctl+0x38>)
 800ffbc:	440a      	add	r2, r1
 800ffbe:	7a10      	ldrb	r0, [r2, #8]
 800ffc0:	79b9      	ldrb	r1, [r7, #6]
 800ffc2:	683a      	ldr	r2, [r7, #0]
 800ffc4:	4798      	blx	r3
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	73fb      	strb	r3, [r7, #15]
  return res;
 800ffca:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3710      	adds	r7, #16
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	20000678 	.word	0x20000678

0800ffd8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b085      	sub	sp, #20
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ffe8:	89fb      	ldrh	r3, [r7, #14]
 800ffea:	021b      	lsls	r3, r3, #8
 800ffec:	b21a      	sxth	r2, r3
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	b21b      	sxth	r3, r3
 800fff4:	4313      	orrs	r3, r2
 800fff6:	b21b      	sxth	r3, r3
 800fff8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fffa:	89fb      	ldrh	r3, [r7, #14]
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3714      	adds	r7, #20
 8010000:	46bd      	mov	sp, r7
 8010002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010006:	4770      	bx	lr

08010008 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010008:	b480      	push	{r7}
 801000a:	b085      	sub	sp, #20
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	3303      	adds	r3, #3
 8010014:	781b      	ldrb	r3, [r3, #0]
 8010016:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	021b      	lsls	r3, r3, #8
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	3202      	adds	r2, #2
 8010020:	7812      	ldrb	r2, [r2, #0]
 8010022:	4313      	orrs	r3, r2
 8010024:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	021b      	lsls	r3, r3, #8
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	3201      	adds	r2, #1
 801002e:	7812      	ldrb	r2, [r2, #0]
 8010030:	4313      	orrs	r3, r2
 8010032:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	021b      	lsls	r3, r3, #8
 8010038:	687a      	ldr	r2, [r7, #4]
 801003a:	7812      	ldrb	r2, [r2, #0]
 801003c:	4313      	orrs	r3, r2
 801003e:	60fb      	str	r3, [r7, #12]
	return rv;
 8010040:	68fb      	ldr	r3, [r7, #12]
}
 8010042:	4618      	mov	r0, r3
 8010044:	3714      	adds	r7, #20
 8010046:	46bd      	mov	sp, r7
 8010048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004c:	4770      	bx	lr

0801004e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801004e:	b480      	push	{r7}
 8010050:	b083      	sub	sp, #12
 8010052:	af00      	add	r7, sp, #0
 8010054:	6078      	str	r0, [r7, #4]
 8010056:	460b      	mov	r3, r1
 8010058:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	1c5a      	adds	r2, r3, #1
 801005e:	607a      	str	r2, [r7, #4]
 8010060:	887a      	ldrh	r2, [r7, #2]
 8010062:	b2d2      	uxtb	r2, r2
 8010064:	701a      	strb	r2, [r3, #0]
 8010066:	887b      	ldrh	r3, [r7, #2]
 8010068:	0a1b      	lsrs	r3, r3, #8
 801006a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	1c5a      	adds	r2, r3, #1
 8010070:	607a      	str	r2, [r7, #4]
 8010072:	887a      	ldrh	r2, [r7, #2]
 8010074:	b2d2      	uxtb	r2, r2
 8010076:	701a      	strb	r2, [r3, #0]
}
 8010078:	bf00      	nop
 801007a:	370c      	adds	r7, #12
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr

08010084 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	1c5a      	adds	r2, r3, #1
 8010092:	607a      	str	r2, [r7, #4]
 8010094:	683a      	ldr	r2, [r7, #0]
 8010096:	b2d2      	uxtb	r2, r2
 8010098:	701a      	strb	r2, [r3, #0]
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	0a1b      	lsrs	r3, r3, #8
 801009e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	1c5a      	adds	r2, r3, #1
 80100a4:	607a      	str	r2, [r7, #4]
 80100a6:	683a      	ldr	r2, [r7, #0]
 80100a8:	b2d2      	uxtb	r2, r2
 80100aa:	701a      	strb	r2, [r3, #0]
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	0a1b      	lsrs	r3, r3, #8
 80100b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	1c5a      	adds	r2, r3, #1
 80100b6:	607a      	str	r2, [r7, #4]
 80100b8:	683a      	ldr	r2, [r7, #0]
 80100ba:	b2d2      	uxtb	r2, r2
 80100bc:	701a      	strb	r2, [r3, #0]
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	0a1b      	lsrs	r3, r3, #8
 80100c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	1c5a      	adds	r2, r3, #1
 80100c8:	607a      	str	r2, [r7, #4]
 80100ca:	683a      	ldr	r2, [r7, #0]
 80100cc:	b2d2      	uxtb	r2, r2
 80100ce:	701a      	strb	r2, [r3, #0]
}
 80100d0:	bf00      	nop
 80100d2:	370c      	adds	r7, #12
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr

080100dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80100dc:	b480      	push	{r7}
 80100de:	b087      	sub	sp, #28
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	60f8      	str	r0, [r7, #12]
 80100e4:	60b9      	str	r1, [r7, #8]
 80100e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d00d      	beq.n	8010112 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80100f6:	693a      	ldr	r2, [r7, #16]
 80100f8:	1c53      	adds	r3, r2, #1
 80100fa:	613b      	str	r3, [r7, #16]
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	1c59      	adds	r1, r3, #1
 8010100:	6179      	str	r1, [r7, #20]
 8010102:	7812      	ldrb	r2, [r2, #0]
 8010104:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	3b01      	subs	r3, #1
 801010a:	607b      	str	r3, [r7, #4]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1f1      	bne.n	80100f6 <mem_cpy+0x1a>
	}
}
 8010112:	bf00      	nop
 8010114:	371c      	adds	r7, #28
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr

0801011e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801011e:	b480      	push	{r7}
 8010120:	b087      	sub	sp, #28
 8010122:	af00      	add	r7, sp, #0
 8010124:	60f8      	str	r0, [r7, #12]
 8010126:	60b9      	str	r1, [r7, #8]
 8010128:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	1c5a      	adds	r2, r3, #1
 8010132:	617a      	str	r2, [r7, #20]
 8010134:	68ba      	ldr	r2, [r7, #8]
 8010136:	b2d2      	uxtb	r2, r2
 8010138:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	3b01      	subs	r3, #1
 801013e:	607b      	str	r3, [r7, #4]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d1f3      	bne.n	801012e <mem_set+0x10>
}
 8010146:	bf00      	nop
 8010148:	bf00      	nop
 801014a:	371c      	adds	r7, #28
 801014c:	46bd      	mov	sp, r7
 801014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010152:	4770      	bx	lr

08010154 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010154:	b480      	push	{r7}
 8010156:	b089      	sub	sp, #36	; 0x24
 8010158:	af00      	add	r7, sp, #0
 801015a:	60f8      	str	r0, [r7, #12]
 801015c:	60b9      	str	r1, [r7, #8]
 801015e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	61fb      	str	r3, [r7, #28]
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010168:	2300      	movs	r3, #0
 801016a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	1c5a      	adds	r2, r3, #1
 8010170:	61fa      	str	r2, [r7, #28]
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	4619      	mov	r1, r3
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	1c5a      	adds	r2, r3, #1
 801017a:	61ba      	str	r2, [r7, #24]
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	1acb      	subs	r3, r1, r3
 8010180:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	3b01      	subs	r3, #1
 8010186:	607b      	str	r3, [r7, #4]
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d002      	beq.n	8010194 <mem_cmp+0x40>
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d0eb      	beq.n	801016c <mem_cmp+0x18>

	return r;
 8010194:	697b      	ldr	r3, [r7, #20]
}
 8010196:	4618      	mov	r0, r3
 8010198:	3724      	adds	r7, #36	; 0x24
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr

080101a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80101a2:	b480      	push	{r7}
 80101a4:	b083      	sub	sp, #12
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
 80101aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80101ac:	e002      	b.n	80101b4 <chk_chr+0x12>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	3301      	adds	r3, #1
 80101b2:	607b      	str	r3, [r7, #4]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d005      	beq.n	80101c8 <chk_chr+0x26>
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	781b      	ldrb	r3, [r3, #0]
 80101c0:	461a      	mov	r2, r3
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d1f2      	bne.n	80101ae <chk_chr+0xc>
	return *str;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	781b      	ldrb	r3, [r3, #0]
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	370c      	adds	r7, #12
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr

080101d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80101e2:	2300      	movs	r3, #0
 80101e4:	60bb      	str	r3, [r7, #8]
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	60fb      	str	r3, [r7, #12]
 80101ea:	e029      	b.n	8010240 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80101ec:	4a27      	ldr	r2, [pc, #156]	; (801028c <chk_lock+0xb4>)
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	011b      	lsls	r3, r3, #4
 80101f2:	4413      	add	r3, r2
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d01d      	beq.n	8010236 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80101fa:	4a24      	ldr	r2, [pc, #144]	; (801028c <chk_lock+0xb4>)
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	011b      	lsls	r3, r3, #4
 8010200:	4413      	add	r3, r2
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	429a      	cmp	r2, r3
 801020a:	d116      	bne.n	801023a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801020c:	4a1f      	ldr	r2, [pc, #124]	; (801028c <chk_lock+0xb4>)
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	011b      	lsls	r3, r3, #4
 8010212:	4413      	add	r3, r2
 8010214:	3304      	adds	r3, #4
 8010216:	681a      	ldr	r2, [r3, #0]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801021c:	429a      	cmp	r2, r3
 801021e:	d10c      	bne.n	801023a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010220:	4a1a      	ldr	r2, [pc, #104]	; (801028c <chk_lock+0xb4>)
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	011b      	lsls	r3, r3, #4
 8010226:	4413      	add	r3, r2
 8010228:	3308      	adds	r3, #8
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010230:	429a      	cmp	r2, r3
 8010232:	d102      	bne.n	801023a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010234:	e007      	b.n	8010246 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010236:	2301      	movs	r3, #1
 8010238:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	3301      	adds	r3, #1
 801023e:	60fb      	str	r3, [r7, #12]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2b01      	cmp	r3, #1
 8010244:	d9d2      	bls.n	80101ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2b02      	cmp	r3, #2
 801024a:	d109      	bne.n	8010260 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d102      	bne.n	8010258 <chk_lock+0x80>
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	2b02      	cmp	r3, #2
 8010256:	d101      	bne.n	801025c <chk_lock+0x84>
 8010258:	2300      	movs	r3, #0
 801025a:	e010      	b.n	801027e <chk_lock+0xa6>
 801025c:	2312      	movs	r3, #18
 801025e:	e00e      	b.n	801027e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d108      	bne.n	8010278 <chk_lock+0xa0>
 8010266:	4a09      	ldr	r2, [pc, #36]	; (801028c <chk_lock+0xb4>)
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	011b      	lsls	r3, r3, #4
 801026c:	4413      	add	r3, r2
 801026e:	330c      	adds	r3, #12
 8010270:	881b      	ldrh	r3, [r3, #0]
 8010272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010276:	d101      	bne.n	801027c <chk_lock+0xa4>
 8010278:	2310      	movs	r3, #16
 801027a:	e000      	b.n	801027e <chk_lock+0xa6>
 801027c:	2300      	movs	r3, #0
}
 801027e:	4618      	mov	r0, r3
 8010280:	3714      	adds	r7, #20
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr
 801028a:	bf00      	nop
 801028c:	20000658 	.word	0x20000658

08010290 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010296:	2300      	movs	r3, #0
 8010298:	607b      	str	r3, [r7, #4]
 801029a:	e002      	b.n	80102a2 <enq_lock+0x12>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	3301      	adds	r3, #1
 80102a0:	607b      	str	r3, [r7, #4]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	d806      	bhi.n	80102b6 <enq_lock+0x26>
 80102a8:	4a09      	ldr	r2, [pc, #36]	; (80102d0 <enq_lock+0x40>)
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	011b      	lsls	r3, r3, #4
 80102ae:	4413      	add	r3, r2
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d1f2      	bne.n	801029c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b02      	cmp	r3, #2
 80102ba:	bf14      	ite	ne
 80102bc:	2301      	movne	r3, #1
 80102be:	2300      	moveq	r3, #0
 80102c0:	b2db      	uxtb	r3, r3
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	370c      	adds	r7, #12
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	20000658 	.word	0x20000658

080102d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b085      	sub	sp, #20
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80102de:	2300      	movs	r3, #0
 80102e0:	60fb      	str	r3, [r7, #12]
 80102e2:	e01f      	b.n	8010324 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80102e4:	4a41      	ldr	r2, [pc, #260]	; (80103ec <inc_lock+0x118>)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	011b      	lsls	r3, r3, #4
 80102ea:	4413      	add	r3, r2
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d113      	bne.n	801031e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80102f6:	4a3d      	ldr	r2, [pc, #244]	; (80103ec <inc_lock+0x118>)
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	011b      	lsls	r3, r3, #4
 80102fc:	4413      	add	r3, r2
 80102fe:	3304      	adds	r3, #4
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010306:	429a      	cmp	r2, r3
 8010308:	d109      	bne.n	801031e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801030a:	4a38      	ldr	r2, [pc, #224]	; (80103ec <inc_lock+0x118>)
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	011b      	lsls	r3, r3, #4
 8010310:	4413      	add	r3, r2
 8010312:	3308      	adds	r3, #8
 8010314:	681a      	ldr	r2, [r3, #0]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801031a:	429a      	cmp	r2, r3
 801031c:	d006      	beq.n	801032c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	3301      	adds	r3, #1
 8010322:	60fb      	str	r3, [r7, #12]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2b01      	cmp	r3, #1
 8010328:	d9dc      	bls.n	80102e4 <inc_lock+0x10>
 801032a:	e000      	b.n	801032e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801032c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2b02      	cmp	r3, #2
 8010332:	d132      	bne.n	801039a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010334:	2300      	movs	r3, #0
 8010336:	60fb      	str	r3, [r7, #12]
 8010338:	e002      	b.n	8010340 <inc_lock+0x6c>
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	3301      	adds	r3, #1
 801033e:	60fb      	str	r3, [r7, #12]
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	2b01      	cmp	r3, #1
 8010344:	d806      	bhi.n	8010354 <inc_lock+0x80>
 8010346:	4a29      	ldr	r2, [pc, #164]	; (80103ec <inc_lock+0x118>)
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	011b      	lsls	r3, r3, #4
 801034c:	4413      	add	r3, r2
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1f2      	bne.n	801033a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2b02      	cmp	r3, #2
 8010358:	d101      	bne.n	801035e <inc_lock+0x8a>
 801035a:	2300      	movs	r3, #0
 801035c:	e040      	b.n	80103e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	4922      	ldr	r1, [pc, #136]	; (80103ec <inc_lock+0x118>)
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	011b      	lsls	r3, r3, #4
 8010368:	440b      	add	r3, r1
 801036a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	689a      	ldr	r2, [r3, #8]
 8010370:	491e      	ldr	r1, [pc, #120]	; (80103ec <inc_lock+0x118>)
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	011b      	lsls	r3, r3, #4
 8010376:	440b      	add	r3, r1
 8010378:	3304      	adds	r3, #4
 801037a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	695a      	ldr	r2, [r3, #20]
 8010380:	491a      	ldr	r1, [pc, #104]	; (80103ec <inc_lock+0x118>)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	011b      	lsls	r3, r3, #4
 8010386:	440b      	add	r3, r1
 8010388:	3308      	adds	r3, #8
 801038a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801038c:	4a17      	ldr	r2, [pc, #92]	; (80103ec <inc_lock+0x118>)
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	011b      	lsls	r3, r3, #4
 8010392:	4413      	add	r3, r2
 8010394:	330c      	adds	r3, #12
 8010396:	2200      	movs	r2, #0
 8010398:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d009      	beq.n	80103b4 <inc_lock+0xe0>
 80103a0:	4a12      	ldr	r2, [pc, #72]	; (80103ec <inc_lock+0x118>)
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	011b      	lsls	r3, r3, #4
 80103a6:	4413      	add	r3, r2
 80103a8:	330c      	adds	r3, #12
 80103aa:	881b      	ldrh	r3, [r3, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d001      	beq.n	80103b4 <inc_lock+0xe0>
 80103b0:	2300      	movs	r3, #0
 80103b2:	e015      	b.n	80103e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d108      	bne.n	80103cc <inc_lock+0xf8>
 80103ba:	4a0c      	ldr	r2, [pc, #48]	; (80103ec <inc_lock+0x118>)
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	011b      	lsls	r3, r3, #4
 80103c0:	4413      	add	r3, r2
 80103c2:	330c      	adds	r3, #12
 80103c4:	881b      	ldrh	r3, [r3, #0]
 80103c6:	3301      	adds	r3, #1
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	e001      	b.n	80103d0 <inc_lock+0xfc>
 80103cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103d0:	4906      	ldr	r1, [pc, #24]	; (80103ec <inc_lock+0x118>)
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	011b      	lsls	r3, r3, #4
 80103d6:	440b      	add	r3, r1
 80103d8:	330c      	adds	r3, #12
 80103da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	3301      	adds	r3, #1
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3714      	adds	r7, #20
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr
 80103ec:	20000658 	.word	0x20000658

080103f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b085      	sub	sp, #20
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	3b01      	subs	r3, #1
 80103fc:	607b      	str	r3, [r7, #4]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2b01      	cmp	r3, #1
 8010402:	d825      	bhi.n	8010450 <dec_lock+0x60>
		n = Files[i].ctr;
 8010404:	4a17      	ldr	r2, [pc, #92]	; (8010464 <dec_lock+0x74>)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	011b      	lsls	r3, r3, #4
 801040a:	4413      	add	r3, r2
 801040c:	330c      	adds	r3, #12
 801040e:	881b      	ldrh	r3, [r3, #0]
 8010410:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010412:	89fb      	ldrh	r3, [r7, #14]
 8010414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010418:	d101      	bne.n	801041e <dec_lock+0x2e>
 801041a:	2300      	movs	r3, #0
 801041c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801041e:	89fb      	ldrh	r3, [r7, #14]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d002      	beq.n	801042a <dec_lock+0x3a>
 8010424:	89fb      	ldrh	r3, [r7, #14]
 8010426:	3b01      	subs	r3, #1
 8010428:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801042a:	4a0e      	ldr	r2, [pc, #56]	; (8010464 <dec_lock+0x74>)
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	011b      	lsls	r3, r3, #4
 8010430:	4413      	add	r3, r2
 8010432:	330c      	adds	r3, #12
 8010434:	89fa      	ldrh	r2, [r7, #14]
 8010436:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010438:	89fb      	ldrh	r3, [r7, #14]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d105      	bne.n	801044a <dec_lock+0x5a>
 801043e:	4a09      	ldr	r2, [pc, #36]	; (8010464 <dec_lock+0x74>)
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	011b      	lsls	r3, r3, #4
 8010444:	4413      	add	r3, r2
 8010446:	2200      	movs	r2, #0
 8010448:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801044a:	2300      	movs	r3, #0
 801044c:	737b      	strb	r3, [r7, #13]
 801044e:	e001      	b.n	8010454 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010450:	2302      	movs	r3, #2
 8010452:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010454:	7b7b      	ldrb	r3, [r7, #13]
}
 8010456:	4618      	mov	r0, r3
 8010458:	3714      	adds	r7, #20
 801045a:	46bd      	mov	sp, r7
 801045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010460:	4770      	bx	lr
 8010462:	bf00      	nop
 8010464:	20000658 	.word	0x20000658

08010468 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010468:	b480      	push	{r7}
 801046a:	b085      	sub	sp, #20
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010470:	2300      	movs	r3, #0
 8010472:	60fb      	str	r3, [r7, #12]
 8010474:	e010      	b.n	8010498 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010476:	4a0d      	ldr	r2, [pc, #52]	; (80104ac <clear_lock+0x44>)
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	011b      	lsls	r3, r3, #4
 801047c:	4413      	add	r3, r2
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	687a      	ldr	r2, [r7, #4]
 8010482:	429a      	cmp	r2, r3
 8010484:	d105      	bne.n	8010492 <clear_lock+0x2a>
 8010486:	4a09      	ldr	r2, [pc, #36]	; (80104ac <clear_lock+0x44>)
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	011b      	lsls	r3, r3, #4
 801048c:	4413      	add	r3, r2
 801048e:	2200      	movs	r2, #0
 8010490:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	3301      	adds	r3, #1
 8010496:	60fb      	str	r3, [r7, #12]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2b01      	cmp	r3, #1
 801049c:	d9eb      	bls.n	8010476 <clear_lock+0xe>
	}
}
 801049e:	bf00      	nop
 80104a0:	bf00      	nop
 80104a2:	3714      	adds	r7, #20
 80104a4:	46bd      	mov	sp, r7
 80104a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104aa:	4770      	bx	lr
 80104ac:	20000658 	.word	0x20000658

080104b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b086      	sub	sp, #24
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80104b8:	2300      	movs	r3, #0
 80104ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	78db      	ldrb	r3, [r3, #3]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d034      	beq.n	801052e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	7858      	ldrb	r0, [r3, #1]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104d4:	2301      	movs	r3, #1
 80104d6:	697a      	ldr	r2, [r7, #20]
 80104d8:	f7ff fd40 	bl	800ff5c <disk_write>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d002      	beq.n	80104e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80104e2:	2301      	movs	r3, #1
 80104e4:	73fb      	strb	r3, [r7, #15]
 80104e6:	e022      	b.n	801052e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2200      	movs	r2, #0
 80104ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6a1b      	ldr	r3, [r3, #32]
 80104f2:	697a      	ldr	r2, [r7, #20]
 80104f4:	1ad2      	subs	r2, r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	699b      	ldr	r3, [r3, #24]
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d217      	bcs.n	801052e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	789b      	ldrb	r3, [r3, #2]
 8010502:	613b      	str	r3, [r7, #16]
 8010504:	e010      	b.n	8010528 <sync_window+0x78>
					wsect += fs->fsize;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	699b      	ldr	r3, [r3, #24]
 801050a:	697a      	ldr	r2, [r7, #20]
 801050c:	4413      	add	r3, r2
 801050e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	7858      	ldrb	r0, [r3, #1]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801051a:	2301      	movs	r3, #1
 801051c:	697a      	ldr	r2, [r7, #20]
 801051e:	f7ff fd1d 	bl	800ff5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	3b01      	subs	r3, #1
 8010526:	613b      	str	r3, [r7, #16]
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	2b01      	cmp	r3, #1
 801052c:	d8eb      	bhi.n	8010506 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801052e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010530:	4618      	mov	r0, r3
 8010532:	3718      	adds	r7, #24
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010542:	2300      	movs	r3, #0
 8010544:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801054a:	683a      	ldr	r2, [r7, #0]
 801054c:	429a      	cmp	r2, r3
 801054e:	d01b      	beq.n	8010588 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f7ff ffad 	bl	80104b0 <sync_window>
 8010556:	4603      	mov	r3, r0
 8010558:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801055a:	7bfb      	ldrb	r3, [r7, #15]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d113      	bne.n	8010588 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	7858      	ldrb	r0, [r3, #1]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801056a:	2301      	movs	r3, #1
 801056c:	683a      	ldr	r2, [r7, #0]
 801056e:	f7ff fcd5 	bl	800ff1c <disk_read>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d004      	beq.n	8010582 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010578:	f04f 33ff 	mov.w	r3, #4294967295
 801057c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801057e:	2301      	movs	r3, #1
 8010580:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	683a      	ldr	r2, [r7, #0]
 8010586:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8010588:	7bfb      	ldrb	r3, [r7, #15]
}
 801058a:	4618      	mov	r0, r3
 801058c:	3710      	adds	r7, #16
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
	...

08010594 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b084      	sub	sp, #16
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f7ff ff87 	bl	80104b0 <sync_window>
 80105a2:	4603      	mov	r3, r0
 80105a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80105a6:	7bfb      	ldrb	r3, [r7, #15]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d158      	bne.n	801065e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	2b03      	cmp	r3, #3
 80105b2:	d148      	bne.n	8010646 <sync_fs+0xb2>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	791b      	ldrb	r3, [r3, #4]
 80105b8:	2b01      	cmp	r3, #1
 80105ba:	d144      	bne.n	8010646 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	3330      	adds	r3, #48	; 0x30
 80105c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105c4:	2100      	movs	r1, #0
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7ff fda9 	bl	801011e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	3330      	adds	r3, #48	; 0x30
 80105d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80105d4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80105d8:	4618      	mov	r0, r3
 80105da:	f7ff fd38 	bl	801004e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	3330      	adds	r3, #48	; 0x30
 80105e2:	4921      	ldr	r1, [pc, #132]	; (8010668 <sync_fs+0xd4>)
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7ff fd4d 	bl	8010084 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	3330      	adds	r3, #48	; 0x30
 80105ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80105f2:	491e      	ldr	r1, [pc, #120]	; (801066c <sync_fs+0xd8>)
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7ff fd45 	bl	8010084 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	3330      	adds	r3, #48	; 0x30
 80105fe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	691b      	ldr	r3, [r3, #16]
 8010606:	4619      	mov	r1, r3
 8010608:	4610      	mov	r0, r2
 801060a:	f7ff fd3b 	bl	8010084 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	3330      	adds	r3, #48	; 0x30
 8010612:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	68db      	ldr	r3, [r3, #12]
 801061a:	4619      	mov	r1, r3
 801061c:	4610      	mov	r0, r2
 801061e:	f7ff fd31 	bl	8010084 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	69db      	ldr	r3, [r3, #28]
 8010626:	1c5a      	adds	r2, r3, #1
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	7858      	ldrb	r0, [r3, #1]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801063a:	2301      	movs	r3, #1
 801063c:	f7ff fc8e 	bl	800ff5c <disk_write>
			fs->fsi_flag = 0;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2200      	movs	r2, #0
 8010644:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	785b      	ldrb	r3, [r3, #1]
 801064a:	2200      	movs	r2, #0
 801064c:	2100      	movs	r1, #0
 801064e:	4618      	mov	r0, r3
 8010650:	f7ff fca4 	bl	800ff9c <disk_ioctl>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	d001      	beq.n	801065e <sync_fs+0xca>
 801065a:	2301      	movs	r3, #1
 801065c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801065e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010660:	4618      	mov	r0, r3
 8010662:	3710      	adds	r7, #16
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}
 8010668:	41615252 	.word	0x41615252
 801066c:	61417272 	.word	0x61417272

08010670 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010670:	b480      	push	{r7}
 8010672:	b083      	sub	sp, #12
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
 8010678:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	3b02      	subs	r3, #2
 801067e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	695b      	ldr	r3, [r3, #20]
 8010684:	3b02      	subs	r3, #2
 8010686:	683a      	ldr	r2, [r7, #0]
 8010688:	429a      	cmp	r2, r3
 801068a:	d301      	bcc.n	8010690 <clust2sect+0x20>
 801068c:	2300      	movs	r3, #0
 801068e:	e008      	b.n	80106a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	895b      	ldrh	r3, [r3, #10]
 8010694:	461a      	mov	r2, r3
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	fb03 f202 	mul.w	r2, r3, r2
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106a0:	4413      	add	r3, r2
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	370c      	adds	r7, #12
 80106a6:	46bd      	mov	sp, r7
 80106a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ac:	4770      	bx	lr

080106ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80106ae:	b580      	push	{r7, lr}
 80106b0:	b086      	sub	sp, #24
 80106b2:	af00      	add	r7, sp, #0
 80106b4:	6078      	str	r0, [r7, #4]
 80106b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	2b01      	cmp	r3, #1
 80106c2:	d904      	bls.n	80106ce <get_fat+0x20>
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	695b      	ldr	r3, [r3, #20]
 80106c8:	683a      	ldr	r2, [r7, #0]
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d302      	bcc.n	80106d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80106ce:	2301      	movs	r3, #1
 80106d0:	617b      	str	r3, [r7, #20]
 80106d2:	e08f      	b.n	80107f4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80106d4:	f04f 33ff 	mov.w	r3, #4294967295
 80106d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	2b03      	cmp	r3, #3
 80106e0:	d062      	beq.n	80107a8 <get_fat+0xfa>
 80106e2:	2b03      	cmp	r3, #3
 80106e4:	dc7c      	bgt.n	80107e0 <get_fat+0x132>
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	d002      	beq.n	80106f0 <get_fat+0x42>
 80106ea:	2b02      	cmp	r3, #2
 80106ec:	d042      	beq.n	8010774 <get_fat+0xc6>
 80106ee:	e077      	b.n	80107e0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	60fb      	str	r3, [r7, #12]
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	085b      	lsrs	r3, r3, #1
 80106f8:	68fa      	ldr	r2, [r7, #12]
 80106fa:	4413      	add	r3, r2
 80106fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	6a1a      	ldr	r2, [r3, #32]
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	0a5b      	lsrs	r3, r3, #9
 8010706:	4413      	add	r3, r2
 8010708:	4619      	mov	r1, r3
 801070a:	6938      	ldr	r0, [r7, #16]
 801070c:	f7ff ff14 	bl	8010538 <move_window>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d167      	bne.n	80107e6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	1c5a      	adds	r2, r3, #1
 801071a:	60fa      	str	r2, [r7, #12]
 801071c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010720:	693a      	ldr	r2, [r7, #16]
 8010722:	4413      	add	r3, r2
 8010724:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010728:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	6a1a      	ldr	r2, [r3, #32]
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	0a5b      	lsrs	r3, r3, #9
 8010732:	4413      	add	r3, r2
 8010734:	4619      	mov	r1, r3
 8010736:	6938      	ldr	r0, [r7, #16]
 8010738:	f7ff fefe 	bl	8010538 <move_window>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d153      	bne.n	80107ea <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010748:	693a      	ldr	r2, [r7, #16]
 801074a:	4413      	add	r3, r2
 801074c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010750:	021b      	lsls	r3, r3, #8
 8010752:	461a      	mov	r2, r3
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	4313      	orrs	r3, r2
 8010758:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	f003 0301 	and.w	r3, r3, #1
 8010760:	2b00      	cmp	r3, #0
 8010762:	d002      	beq.n	801076a <get_fat+0xbc>
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	091b      	lsrs	r3, r3, #4
 8010768:	e002      	b.n	8010770 <get_fat+0xc2>
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010770:	617b      	str	r3, [r7, #20]
			break;
 8010772:	e03f      	b.n	80107f4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	6a1a      	ldr	r2, [r3, #32]
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	0a1b      	lsrs	r3, r3, #8
 801077c:	4413      	add	r3, r2
 801077e:	4619      	mov	r1, r3
 8010780:	6938      	ldr	r0, [r7, #16]
 8010782:	f7ff fed9 	bl	8010538 <move_window>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d130      	bne.n	80107ee <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	005b      	lsls	r3, r3, #1
 8010796:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801079a:	4413      	add	r3, r2
 801079c:	4618      	mov	r0, r3
 801079e:	f7ff fc1b 	bl	800ffd8 <ld_word>
 80107a2:	4603      	mov	r3, r0
 80107a4:	617b      	str	r3, [r7, #20]
			break;
 80107a6:	e025      	b.n	80107f4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	6a1a      	ldr	r2, [r3, #32]
 80107ac:	683b      	ldr	r3, [r7, #0]
 80107ae:	09db      	lsrs	r3, r3, #7
 80107b0:	4413      	add	r3, r2
 80107b2:	4619      	mov	r1, r3
 80107b4:	6938      	ldr	r0, [r7, #16]
 80107b6:	f7ff febf 	bl	8010538 <move_window>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d118      	bne.n	80107f2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80107c6:	683b      	ldr	r3, [r7, #0]
 80107c8:	009b      	lsls	r3, r3, #2
 80107ca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80107ce:	4413      	add	r3, r2
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7ff fc19 	bl	8010008 <ld_dword>
 80107d6:	4603      	mov	r3, r0
 80107d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80107dc:	617b      	str	r3, [r7, #20]
			break;
 80107de:	e009      	b.n	80107f4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80107e0:	2301      	movs	r3, #1
 80107e2:	617b      	str	r3, [r7, #20]
 80107e4:	e006      	b.n	80107f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80107e6:	bf00      	nop
 80107e8:	e004      	b.n	80107f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80107ea:	bf00      	nop
 80107ec:	e002      	b.n	80107f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80107ee:	bf00      	nop
 80107f0:	e000      	b.n	80107f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80107f2:	bf00      	nop
		}
	}

	return val;
 80107f4:	697b      	ldr	r3, [r7, #20]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3718      	adds	r7, #24
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}

080107fe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80107fe:	b590      	push	{r4, r7, lr}
 8010800:	b089      	sub	sp, #36	; 0x24
 8010802:	af00      	add	r7, sp, #0
 8010804:	60f8      	str	r0, [r7, #12]
 8010806:	60b9      	str	r1, [r7, #8]
 8010808:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801080a:	2302      	movs	r3, #2
 801080c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	2b01      	cmp	r3, #1
 8010812:	f240 80d2 	bls.w	80109ba <put_fat+0x1bc>
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	695b      	ldr	r3, [r3, #20]
 801081a:	68ba      	ldr	r2, [r7, #8]
 801081c:	429a      	cmp	r2, r3
 801081e:	f080 80cc 	bcs.w	80109ba <put_fat+0x1bc>
		switch (fs->fs_type) {
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	2b03      	cmp	r3, #3
 8010828:	f000 8096 	beq.w	8010958 <put_fat+0x15a>
 801082c:	2b03      	cmp	r3, #3
 801082e:	f300 80cd 	bgt.w	80109cc <put_fat+0x1ce>
 8010832:	2b01      	cmp	r3, #1
 8010834:	d002      	beq.n	801083c <put_fat+0x3e>
 8010836:	2b02      	cmp	r3, #2
 8010838:	d06e      	beq.n	8010918 <put_fat+0x11a>
 801083a:	e0c7      	b.n	80109cc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	61bb      	str	r3, [r7, #24]
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	085b      	lsrs	r3, r3, #1
 8010844:	69ba      	ldr	r2, [r7, #24]
 8010846:	4413      	add	r3, r2
 8010848:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	6a1a      	ldr	r2, [r3, #32]
 801084e:	69bb      	ldr	r3, [r7, #24]
 8010850:	0a5b      	lsrs	r3, r3, #9
 8010852:	4413      	add	r3, r2
 8010854:	4619      	mov	r1, r3
 8010856:	68f8      	ldr	r0, [r7, #12]
 8010858:	f7ff fe6e 	bl	8010538 <move_window>
 801085c:	4603      	mov	r3, r0
 801085e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010860:	7ffb      	ldrb	r3, [r7, #31]
 8010862:	2b00      	cmp	r3, #0
 8010864:	f040 80ab 	bne.w	80109be <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801086e:	69bb      	ldr	r3, [r7, #24]
 8010870:	1c59      	adds	r1, r3, #1
 8010872:	61b9      	str	r1, [r7, #24]
 8010874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010878:	4413      	add	r3, r2
 801087a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801087c:	68bb      	ldr	r3, [r7, #8]
 801087e:	f003 0301 	and.w	r3, r3, #1
 8010882:	2b00      	cmp	r3, #0
 8010884:	d00d      	beq.n	80108a2 <put_fat+0xa4>
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	781b      	ldrb	r3, [r3, #0]
 801088a:	b25b      	sxtb	r3, r3
 801088c:	f003 030f 	and.w	r3, r3, #15
 8010890:	b25a      	sxtb	r2, r3
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	b2db      	uxtb	r3, r3
 8010896:	011b      	lsls	r3, r3, #4
 8010898:	b25b      	sxtb	r3, r3
 801089a:	4313      	orrs	r3, r2
 801089c:	b25b      	sxtb	r3, r3
 801089e:	b2db      	uxtb	r3, r3
 80108a0:	e001      	b.n	80108a6 <put_fat+0xa8>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	b2db      	uxtb	r3, r3
 80108a6:	697a      	ldr	r2, [r7, #20]
 80108a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2201      	movs	r2, #1
 80108ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	6a1a      	ldr	r2, [r3, #32]
 80108b4:	69bb      	ldr	r3, [r7, #24]
 80108b6:	0a5b      	lsrs	r3, r3, #9
 80108b8:	4413      	add	r3, r2
 80108ba:	4619      	mov	r1, r3
 80108bc:	68f8      	ldr	r0, [r7, #12]
 80108be:	f7ff fe3b 	bl	8010538 <move_window>
 80108c2:	4603      	mov	r3, r0
 80108c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80108c6:	7ffb      	ldrb	r3, [r7, #31]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d17a      	bne.n	80109c2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80108d2:	69bb      	ldr	r3, [r7, #24]
 80108d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108d8:	4413      	add	r3, r2
 80108da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	f003 0301 	and.w	r3, r3, #1
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d003      	beq.n	80108ee <put_fat+0xf0>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	091b      	lsrs	r3, r3, #4
 80108ea:	b2db      	uxtb	r3, r3
 80108ec:	e00e      	b.n	801090c <put_fat+0x10e>
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	b25b      	sxtb	r3, r3
 80108f4:	f023 030f 	bic.w	r3, r3, #15
 80108f8:	b25a      	sxtb	r2, r3
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	0a1b      	lsrs	r3, r3, #8
 80108fe:	b25b      	sxtb	r3, r3
 8010900:	f003 030f 	and.w	r3, r3, #15
 8010904:	b25b      	sxtb	r3, r3
 8010906:	4313      	orrs	r3, r2
 8010908:	b25b      	sxtb	r3, r3
 801090a:	b2db      	uxtb	r3, r3
 801090c:	697a      	ldr	r2, [r7, #20]
 801090e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2201      	movs	r2, #1
 8010914:	70da      	strb	r2, [r3, #3]
			break;
 8010916:	e059      	b.n	80109cc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	6a1a      	ldr	r2, [r3, #32]
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	0a1b      	lsrs	r3, r3, #8
 8010920:	4413      	add	r3, r2
 8010922:	4619      	mov	r1, r3
 8010924:	68f8      	ldr	r0, [r7, #12]
 8010926:	f7ff fe07 	bl	8010538 <move_window>
 801092a:	4603      	mov	r3, r0
 801092c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801092e:	7ffb      	ldrb	r3, [r7, #31]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d148      	bne.n	80109c6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	005b      	lsls	r3, r3, #1
 801093e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010942:	4413      	add	r3, r2
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	b292      	uxth	r2, r2
 8010948:	4611      	mov	r1, r2
 801094a:	4618      	mov	r0, r3
 801094c:	f7ff fb7f 	bl	801004e <st_word>
			fs->wflag = 1;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2201      	movs	r2, #1
 8010954:	70da      	strb	r2, [r3, #3]
			break;
 8010956:	e039      	b.n	80109cc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	6a1a      	ldr	r2, [r3, #32]
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	09db      	lsrs	r3, r3, #7
 8010960:	4413      	add	r3, r2
 8010962:	4619      	mov	r1, r3
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f7ff fde7 	bl	8010538 <move_window>
 801096a:	4603      	mov	r3, r0
 801096c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801096e:	7ffb      	ldrb	r3, [r7, #31]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d12a      	bne.n	80109ca <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	009b      	lsls	r3, r3, #2
 8010984:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010988:	4413      	add	r3, r2
 801098a:	4618      	mov	r0, r3
 801098c:	f7ff fb3c 	bl	8010008 <ld_dword>
 8010990:	4603      	mov	r3, r0
 8010992:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010996:	4323      	orrs	r3, r4
 8010998:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80109a8:	4413      	add	r3, r2
 80109aa:	6879      	ldr	r1, [r7, #4]
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7ff fb69 	bl	8010084 <st_dword>
			fs->wflag = 1;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	2201      	movs	r2, #1
 80109b6:	70da      	strb	r2, [r3, #3]
			break;
 80109b8:	e008      	b.n	80109cc <put_fat+0x1ce>
		}
	}
 80109ba:	bf00      	nop
 80109bc:	e006      	b.n	80109cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80109be:	bf00      	nop
 80109c0:	e004      	b.n	80109cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80109c2:	bf00      	nop
 80109c4:	e002      	b.n	80109cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80109c6:	bf00      	nop
 80109c8:	e000      	b.n	80109cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80109ca:	bf00      	nop
	return res;
 80109cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3724      	adds	r7, #36	; 0x24
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd90      	pop	{r4, r7, pc}

080109d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b088      	sub	sp, #32
 80109da:	af00      	add	r7, sp, #0
 80109dc:	60f8      	str	r0, [r7, #12]
 80109de:	60b9      	str	r1, [r7, #8]
 80109e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80109e2:	2300      	movs	r3, #0
 80109e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d904      	bls.n	80109fc <remove_chain+0x26>
 80109f2:	69bb      	ldr	r3, [r7, #24]
 80109f4:	695b      	ldr	r3, [r3, #20]
 80109f6:	68ba      	ldr	r2, [r7, #8]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d301      	bcc.n	8010a00 <remove_chain+0x2a>
 80109fc:	2302      	movs	r3, #2
 80109fe:	e04b      	b.n	8010a98 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00c      	beq.n	8010a20 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010a06:	f04f 32ff 	mov.w	r2, #4294967295
 8010a0a:	6879      	ldr	r1, [r7, #4]
 8010a0c:	69b8      	ldr	r0, [r7, #24]
 8010a0e:	f7ff fef6 	bl	80107fe <put_fat>
 8010a12:	4603      	mov	r3, r0
 8010a14:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010a16:	7ffb      	ldrb	r3, [r7, #31]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d001      	beq.n	8010a20 <remove_chain+0x4a>
 8010a1c:	7ffb      	ldrb	r3, [r7, #31]
 8010a1e:	e03b      	b.n	8010a98 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010a20:	68b9      	ldr	r1, [r7, #8]
 8010a22:	68f8      	ldr	r0, [r7, #12]
 8010a24:	f7ff fe43 	bl	80106ae <get_fat>
 8010a28:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d031      	beq.n	8010a94 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	2b01      	cmp	r3, #1
 8010a34:	d101      	bne.n	8010a3a <remove_chain+0x64>
 8010a36:	2302      	movs	r3, #2
 8010a38:	e02e      	b.n	8010a98 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a40:	d101      	bne.n	8010a46 <remove_chain+0x70>
 8010a42:	2301      	movs	r3, #1
 8010a44:	e028      	b.n	8010a98 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010a46:	2200      	movs	r2, #0
 8010a48:	68b9      	ldr	r1, [r7, #8]
 8010a4a:	69b8      	ldr	r0, [r7, #24]
 8010a4c:	f7ff fed7 	bl	80107fe <put_fat>
 8010a50:	4603      	mov	r3, r0
 8010a52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010a54:	7ffb      	ldrb	r3, [r7, #31]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d001      	beq.n	8010a5e <remove_chain+0x88>
 8010a5a:	7ffb      	ldrb	r3, [r7, #31]
 8010a5c:	e01c      	b.n	8010a98 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010a5e:	69bb      	ldr	r3, [r7, #24]
 8010a60:	691a      	ldr	r2, [r3, #16]
 8010a62:	69bb      	ldr	r3, [r7, #24]
 8010a64:	695b      	ldr	r3, [r3, #20]
 8010a66:	3b02      	subs	r3, #2
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d20b      	bcs.n	8010a84 <remove_chain+0xae>
			fs->free_clst++;
 8010a6c:	69bb      	ldr	r3, [r7, #24]
 8010a6e:	691b      	ldr	r3, [r3, #16]
 8010a70:	1c5a      	adds	r2, r3, #1
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8010a76:	69bb      	ldr	r3, [r7, #24]
 8010a78:	791b      	ldrb	r3, [r3, #4]
 8010a7a:	f043 0301 	orr.w	r3, r3, #1
 8010a7e:	b2da      	uxtb	r2, r3
 8010a80:	69bb      	ldr	r3, [r7, #24]
 8010a82:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010a88:	69bb      	ldr	r3, [r7, #24]
 8010a8a:	695b      	ldr	r3, [r3, #20]
 8010a8c:	68ba      	ldr	r2, [r7, #8]
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d3c6      	bcc.n	8010a20 <remove_chain+0x4a>
 8010a92:	e000      	b.n	8010a96 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010a94:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010a96:	2300      	movs	r3, #0
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3720      	adds	r7, #32
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b088      	sub	sp, #32
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
 8010aa8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d10d      	bne.n	8010ad2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010abc:	69bb      	ldr	r3, [r7, #24]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d004      	beq.n	8010acc <create_chain+0x2c>
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	695b      	ldr	r3, [r3, #20]
 8010ac6:	69ba      	ldr	r2, [r7, #24]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d31b      	bcc.n	8010b04 <create_chain+0x64>
 8010acc:	2301      	movs	r3, #1
 8010ace:	61bb      	str	r3, [r7, #24]
 8010ad0:	e018      	b.n	8010b04 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010ad2:	6839      	ldr	r1, [r7, #0]
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f7ff fdea 	bl	80106ae <get_fat>
 8010ada:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	2b01      	cmp	r3, #1
 8010ae0:	d801      	bhi.n	8010ae6 <create_chain+0x46>
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	e070      	b.n	8010bc8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aec:	d101      	bne.n	8010af2 <create_chain+0x52>
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	e06a      	b.n	8010bc8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	695b      	ldr	r3, [r3, #20]
 8010af6:	68fa      	ldr	r2, [r7, #12]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	d201      	bcs.n	8010b00 <create_chain+0x60>
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	e063      	b.n	8010bc8 <create_chain+0x128>
		scl = clst;
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010b04:	69bb      	ldr	r3, [r7, #24]
 8010b06:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010b08:	69fb      	ldr	r3, [r7, #28]
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	695b      	ldr	r3, [r3, #20]
 8010b12:	69fa      	ldr	r2, [r7, #28]
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d307      	bcc.n	8010b28 <create_chain+0x88>
				ncl = 2;
 8010b18:	2302      	movs	r3, #2
 8010b1a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010b1c:	69fa      	ldr	r2, [r7, #28]
 8010b1e:	69bb      	ldr	r3, [r7, #24]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d901      	bls.n	8010b28 <create_chain+0x88>
 8010b24:	2300      	movs	r3, #0
 8010b26:	e04f      	b.n	8010bc8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010b28:	69f9      	ldr	r1, [r7, #28]
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f7ff fdbf 	bl	80106ae <get_fat>
 8010b30:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d00e      	beq.n	8010b56 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d003      	beq.n	8010b46 <create_chain+0xa6>
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b44:	d101      	bne.n	8010b4a <create_chain+0xaa>
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	e03e      	b.n	8010bc8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010b4a:	69fa      	ldr	r2, [r7, #28]
 8010b4c:	69bb      	ldr	r3, [r7, #24]
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d1da      	bne.n	8010b08 <create_chain+0x68>
 8010b52:	2300      	movs	r3, #0
 8010b54:	e038      	b.n	8010bc8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010b56:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010b58:	f04f 32ff 	mov.w	r2, #4294967295
 8010b5c:	69f9      	ldr	r1, [r7, #28]
 8010b5e:	6938      	ldr	r0, [r7, #16]
 8010b60:	f7ff fe4d 	bl	80107fe <put_fat>
 8010b64:	4603      	mov	r3, r0
 8010b66:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010b68:	7dfb      	ldrb	r3, [r7, #23]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d109      	bne.n	8010b82 <create_chain+0xe2>
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d006      	beq.n	8010b82 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010b74:	69fa      	ldr	r2, [r7, #28]
 8010b76:	6839      	ldr	r1, [r7, #0]
 8010b78:	6938      	ldr	r0, [r7, #16]
 8010b7a:	f7ff fe40 	bl	80107fe <put_fat>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010b82:	7dfb      	ldrb	r3, [r7, #23]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d116      	bne.n	8010bb6 <create_chain+0x116>
		fs->last_clst = ncl;
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	69fa      	ldr	r2, [r7, #28]
 8010b8c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	691a      	ldr	r2, [r3, #16]
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	695b      	ldr	r3, [r3, #20]
 8010b96:	3b02      	subs	r3, #2
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d804      	bhi.n	8010ba6 <create_chain+0x106>
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	691b      	ldr	r3, [r3, #16]
 8010ba0:	1e5a      	subs	r2, r3, #1
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	791b      	ldrb	r3, [r3, #4]
 8010baa:	f043 0301 	orr.w	r3, r3, #1
 8010bae:	b2da      	uxtb	r2, r3
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	711a      	strb	r2, [r3, #4]
 8010bb4:	e007      	b.n	8010bc6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010bb6:	7dfb      	ldrb	r3, [r7, #23]
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d102      	bne.n	8010bc2 <create_chain+0x122>
 8010bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc0:	e000      	b.n	8010bc4 <create_chain+0x124>
 8010bc2:	2301      	movs	r3, #1
 8010bc4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010bc6:	69fb      	ldr	r3, [r7, #28]
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3720      	adds	r7, #32
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}

08010bd0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b087      	sub	sp, #28
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
 8010bd8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010be4:	3304      	adds	r3, #4
 8010be6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	0a5b      	lsrs	r3, r3, #9
 8010bec:	68fa      	ldr	r2, [r7, #12]
 8010bee:	8952      	ldrh	r2, [r2, #10]
 8010bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010bf4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	1d1a      	adds	r2, r3, #4
 8010bfa:	613a      	str	r2, [r7, #16]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d101      	bne.n	8010c0a <clmt_clust+0x3a>
 8010c06:	2300      	movs	r3, #0
 8010c08:	e010      	b.n	8010c2c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010c0a:	697a      	ldr	r2, [r7, #20]
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d307      	bcc.n	8010c22 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010c12:	697a      	ldr	r2, [r7, #20]
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	1ad3      	subs	r3, r2, r3
 8010c18:	617b      	str	r3, [r7, #20]
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	3304      	adds	r3, #4
 8010c1e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010c20:	e7e9      	b.n	8010bf6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010c22:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	681a      	ldr	r2, [r3, #0]
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	4413      	add	r3, r2
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	371c      	adds	r7, #28
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr

08010c38 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b086      	sub	sp, #24
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010c4e:	d204      	bcs.n	8010c5a <dir_sdi+0x22>
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	f003 031f 	and.w	r3, r3, #31
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d001      	beq.n	8010c5e <dir_sdi+0x26>
		return FR_INT_ERR;
 8010c5a:	2302      	movs	r3, #2
 8010c5c:	e063      	b.n	8010d26 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	683a      	ldr	r2, [r7, #0]
 8010c62:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	689b      	ldr	r3, [r3, #8]
 8010c68:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d106      	bne.n	8010c7e <dir_sdi+0x46>
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	2b02      	cmp	r3, #2
 8010c76:	d902      	bls.n	8010c7e <dir_sdi+0x46>
		clst = fs->dirbase;
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c7c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d10c      	bne.n	8010c9e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	095b      	lsrs	r3, r3, #5
 8010c88:	693a      	ldr	r2, [r7, #16]
 8010c8a:	8912      	ldrh	r2, [r2, #8]
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d301      	bcc.n	8010c94 <dir_sdi+0x5c>
 8010c90:	2302      	movs	r3, #2
 8010c92:	e048      	b.n	8010d26 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	61da      	str	r2, [r3, #28]
 8010c9c:	e029      	b.n	8010cf2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	895b      	ldrh	r3, [r3, #10]
 8010ca2:	025b      	lsls	r3, r3, #9
 8010ca4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010ca6:	e019      	b.n	8010cdc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6979      	ldr	r1, [r7, #20]
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7ff fcfe 	bl	80106ae <get_fat>
 8010cb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cba:	d101      	bne.n	8010cc0 <dir_sdi+0x88>
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	e032      	b.n	8010d26 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	2b01      	cmp	r3, #1
 8010cc4:	d904      	bls.n	8010cd0 <dir_sdi+0x98>
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	695b      	ldr	r3, [r3, #20]
 8010cca:	697a      	ldr	r2, [r7, #20]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d301      	bcc.n	8010cd4 <dir_sdi+0x9c>
 8010cd0:	2302      	movs	r3, #2
 8010cd2:	e028      	b.n	8010d26 <dir_sdi+0xee>
			ofs -= csz;
 8010cd4:	683a      	ldr	r2, [r7, #0]
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	1ad3      	subs	r3, r2, r3
 8010cda:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010cdc:	683a      	ldr	r2, [r7, #0]
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	d2e1      	bcs.n	8010ca8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010ce4:	6979      	ldr	r1, [r7, #20]
 8010ce6:	6938      	ldr	r0, [r7, #16]
 8010ce8:	f7ff fcc2 	bl	8010670 <clust2sect>
 8010cec:	4602      	mov	r2, r0
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	697a      	ldr	r2, [r7, #20]
 8010cf6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	69db      	ldr	r3, [r3, #28]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d101      	bne.n	8010d04 <dir_sdi+0xcc>
 8010d00:	2302      	movs	r3, #2
 8010d02:	e010      	b.n	8010d26 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	69da      	ldr	r2, [r3, #28]
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	0a5b      	lsrs	r3, r3, #9
 8010d0c:	441a      	add	r2, r3
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d1e:	441a      	add	r2, r3
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010d24:	2300      	movs	r3, #0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3718      	adds	r7, #24
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b086      	sub	sp, #24
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
 8010d36:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	695b      	ldr	r3, [r3, #20]
 8010d42:	3320      	adds	r3, #32
 8010d44:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	69db      	ldr	r3, [r3, #28]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d003      	beq.n	8010d56 <dir_next+0x28>
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010d54:	d301      	bcc.n	8010d5a <dir_next+0x2c>
 8010d56:	2304      	movs	r3, #4
 8010d58:	e0aa      	b.n	8010eb0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f040 8098 	bne.w	8010e96 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	69db      	ldr	r3, [r3, #28]
 8010d6a:	1c5a      	adds	r2, r3, #1
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	699b      	ldr	r3, [r3, #24]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d10b      	bne.n	8010d90 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	095b      	lsrs	r3, r3, #5
 8010d7c:	68fa      	ldr	r2, [r7, #12]
 8010d7e:	8912      	ldrh	r2, [r2, #8]
 8010d80:	4293      	cmp	r3, r2
 8010d82:	f0c0 8088 	bcc.w	8010e96 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2200      	movs	r2, #0
 8010d8a:	61da      	str	r2, [r3, #28]
 8010d8c:	2304      	movs	r3, #4
 8010d8e:	e08f      	b.n	8010eb0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	0a5b      	lsrs	r3, r3, #9
 8010d94:	68fa      	ldr	r2, [r7, #12]
 8010d96:	8952      	ldrh	r2, [r2, #10]
 8010d98:	3a01      	subs	r2, #1
 8010d9a:	4013      	ands	r3, r2
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d17a      	bne.n	8010e96 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	699b      	ldr	r3, [r3, #24]
 8010da6:	4619      	mov	r1, r3
 8010da8:	4610      	mov	r0, r2
 8010daa:	f7ff fc80 	bl	80106ae <get_fat>
 8010dae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	2b01      	cmp	r3, #1
 8010db4:	d801      	bhi.n	8010dba <dir_next+0x8c>
 8010db6:	2302      	movs	r3, #2
 8010db8:	e07a      	b.n	8010eb0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dc0:	d101      	bne.n	8010dc6 <dir_next+0x98>
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	e074      	b.n	8010eb0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	695b      	ldr	r3, [r3, #20]
 8010dca:	697a      	ldr	r2, [r7, #20]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d358      	bcc.n	8010e82 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d104      	bne.n	8010de0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2200      	movs	r2, #0
 8010dda:	61da      	str	r2, [r3, #28]
 8010ddc:	2304      	movs	r3, #4
 8010dde:	e067      	b.n	8010eb0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	699b      	ldr	r3, [r3, #24]
 8010de6:	4619      	mov	r1, r3
 8010de8:	4610      	mov	r0, r2
 8010dea:	f7ff fe59 	bl	8010aa0 <create_chain>
 8010dee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d101      	bne.n	8010dfa <dir_next+0xcc>
 8010df6:	2307      	movs	r3, #7
 8010df8:	e05a      	b.n	8010eb0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d101      	bne.n	8010e04 <dir_next+0xd6>
 8010e00:	2302      	movs	r3, #2
 8010e02:	e055      	b.n	8010eb0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e0a:	d101      	bne.n	8010e10 <dir_next+0xe2>
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	e04f      	b.n	8010eb0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010e10:	68f8      	ldr	r0, [r7, #12]
 8010e12:	f7ff fb4d 	bl	80104b0 <sync_window>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d001      	beq.n	8010e20 <dir_next+0xf2>
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	e047      	b.n	8010eb0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	3330      	adds	r3, #48	; 0x30
 8010e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e28:	2100      	movs	r1, #0
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7ff f977 	bl	801011e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010e30:	2300      	movs	r3, #0
 8010e32:	613b      	str	r3, [r7, #16]
 8010e34:	6979      	ldr	r1, [r7, #20]
 8010e36:	68f8      	ldr	r0, [r7, #12]
 8010e38:	f7ff fc1a 	bl	8010670 <clust2sect>
 8010e3c:	4602      	mov	r2, r0
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	62da      	str	r2, [r3, #44]	; 0x2c
 8010e42:	e012      	b.n	8010e6a <dir_next+0x13c>
						fs->wflag = 1;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	2201      	movs	r2, #1
 8010e48:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010e4a:	68f8      	ldr	r0, [r7, #12]
 8010e4c:	f7ff fb30 	bl	80104b0 <sync_window>
 8010e50:	4603      	mov	r3, r0
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d001      	beq.n	8010e5a <dir_next+0x12c>
 8010e56:	2301      	movs	r3, #1
 8010e58:	e02a      	b.n	8010eb0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	613b      	str	r3, [r7, #16]
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e64:	1c5a      	adds	r2, r3, #1
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	62da      	str	r2, [r3, #44]	; 0x2c
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	895b      	ldrh	r3, [r3, #10]
 8010e6e:	461a      	mov	r2, r3
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d3e6      	bcc.n	8010e44 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	1ad2      	subs	r2, r2, r3
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	697a      	ldr	r2, [r7, #20]
 8010e86:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010e88:	6979      	ldr	r1, [r7, #20]
 8010e8a:	68f8      	ldr	r0, [r7, #12]
 8010e8c:	f7ff fbf0 	bl	8010670 <clust2sect>
 8010e90:	4602      	mov	r2, r0
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	68ba      	ldr	r2, [r7, #8]
 8010e9a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ea8:	441a      	add	r2, r3
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010eae:	2300      	movs	r3, #0
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3718      	adds	r7, #24
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}

08010eb8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b086      	sub	sp, #24
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010ec8:	2100      	movs	r1, #0
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f7ff feb4 	bl	8010c38 <dir_sdi>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010ed4:	7dfb      	ldrb	r3, [r7, #23]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d12b      	bne.n	8010f32 <dir_alloc+0x7a>
		n = 0;
 8010eda:	2300      	movs	r3, #0
 8010edc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	69db      	ldr	r3, [r3, #28]
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	68f8      	ldr	r0, [r7, #12]
 8010ee6:	f7ff fb27 	bl	8010538 <move_window>
 8010eea:	4603      	mov	r3, r0
 8010eec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010eee:	7dfb      	ldrb	r3, [r7, #23]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d11d      	bne.n	8010f30 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6a1b      	ldr	r3, [r3, #32]
 8010ef8:	781b      	ldrb	r3, [r3, #0]
 8010efa:	2be5      	cmp	r3, #229	; 0xe5
 8010efc:	d004      	beq.n	8010f08 <dir_alloc+0x50>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6a1b      	ldr	r3, [r3, #32]
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d107      	bne.n	8010f18 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	3301      	adds	r3, #1
 8010f0c:	613b      	str	r3, [r7, #16]
 8010f0e:	693a      	ldr	r2, [r7, #16]
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	429a      	cmp	r2, r3
 8010f14:	d102      	bne.n	8010f1c <dir_alloc+0x64>
 8010f16:	e00c      	b.n	8010f32 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010f18:	2300      	movs	r3, #0
 8010f1a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010f1c:	2101      	movs	r1, #1
 8010f1e:	6878      	ldr	r0, [r7, #4]
 8010f20:	f7ff ff05 	bl	8010d2e <dir_next>
 8010f24:	4603      	mov	r3, r0
 8010f26:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010f28:	7dfb      	ldrb	r3, [r7, #23]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d0d7      	beq.n	8010ede <dir_alloc+0x26>
 8010f2e:	e000      	b.n	8010f32 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010f30:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010f32:	7dfb      	ldrb	r3, [r7, #23]
 8010f34:	2b04      	cmp	r3, #4
 8010f36:	d101      	bne.n	8010f3c <dir_alloc+0x84>
 8010f38:	2307      	movs	r3, #7
 8010f3a:	75fb      	strb	r3, [r7, #23]
	return res;
 8010f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3718      	adds	r7, #24
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}

08010f46 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b084      	sub	sp, #16
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
 8010f4e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	331a      	adds	r3, #26
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7ff f83f 	bl	800ffd8 <ld_word>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	781b      	ldrb	r3, [r3, #0]
 8010f62:	2b03      	cmp	r3, #3
 8010f64:	d109      	bne.n	8010f7a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	3314      	adds	r3, #20
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7ff f834 	bl	800ffd8 <ld_word>
 8010f70:	4603      	mov	r3, r0
 8010f72:	041b      	lsls	r3, r3, #16
 8010f74:	68fa      	ldr	r2, [r7, #12]
 8010f76:	4313      	orrs	r3, r2
 8010f78:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3710      	adds	r7, #16
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}

08010f84 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b084      	sub	sp, #16
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	60f8      	str	r0, [r7, #12]
 8010f8c:	60b9      	str	r1, [r7, #8]
 8010f8e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	331a      	adds	r3, #26
 8010f94:	687a      	ldr	r2, [r7, #4]
 8010f96:	b292      	uxth	r2, r2
 8010f98:	4611      	mov	r1, r2
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7ff f857 	bl	801004e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	2b03      	cmp	r3, #3
 8010fa6:	d109      	bne.n	8010fbc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	f103 0214 	add.w	r2, r3, #20
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	0c1b      	lsrs	r3, r3, #16
 8010fb2:	b29b      	uxth	r3, r3
 8010fb4:	4619      	mov	r1, r3
 8010fb6:	4610      	mov	r0, r2
 8010fb8:	f7ff f849 	bl	801004e <st_word>
	}
}
 8010fbc:	bf00      	nop
 8010fbe:	3710      	adds	r7, #16
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}

08010fc4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b086      	sub	sp, #24
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010fd2:	2100      	movs	r1, #0
 8010fd4:	6878      	ldr	r0, [r7, #4]
 8010fd6:	f7ff fe2f 	bl	8010c38 <dir_sdi>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010fde:	7dfb      	ldrb	r3, [r7, #23]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d001      	beq.n	8010fe8 <dir_find+0x24>
 8010fe4:	7dfb      	ldrb	r3, [r7, #23]
 8010fe6:	e03e      	b.n	8011066 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	69db      	ldr	r3, [r3, #28]
 8010fec:	4619      	mov	r1, r3
 8010fee:	6938      	ldr	r0, [r7, #16]
 8010ff0:	f7ff faa2 	bl	8010538 <move_window>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010ff8:	7dfb      	ldrb	r3, [r7, #23]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d12f      	bne.n	801105e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6a1b      	ldr	r3, [r3, #32]
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011006:	7bfb      	ldrb	r3, [r7, #15]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d102      	bne.n	8011012 <dir_find+0x4e>
 801100c:	2304      	movs	r3, #4
 801100e:	75fb      	strb	r3, [r7, #23]
 8011010:	e028      	b.n	8011064 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6a1b      	ldr	r3, [r3, #32]
 8011016:	330b      	adds	r3, #11
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801101e:	b2da      	uxtb	r2, r3
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6a1b      	ldr	r3, [r3, #32]
 8011028:	330b      	adds	r3, #11
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	f003 0308 	and.w	r3, r3, #8
 8011030:	2b00      	cmp	r3, #0
 8011032:	d10a      	bne.n	801104a <dir_find+0x86>
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6a18      	ldr	r0, [r3, #32]
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	3324      	adds	r3, #36	; 0x24
 801103c:	220b      	movs	r2, #11
 801103e:	4619      	mov	r1, r3
 8011040:	f7ff f888 	bl	8010154 <mem_cmp>
 8011044:	4603      	mov	r3, r0
 8011046:	2b00      	cmp	r3, #0
 8011048:	d00b      	beq.n	8011062 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801104a:	2100      	movs	r1, #0
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f7ff fe6e 	bl	8010d2e <dir_next>
 8011052:	4603      	mov	r3, r0
 8011054:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011056:	7dfb      	ldrb	r3, [r7, #23]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d0c5      	beq.n	8010fe8 <dir_find+0x24>
 801105c:	e002      	b.n	8011064 <dir_find+0xa0>
		if (res != FR_OK) break;
 801105e:	bf00      	nop
 8011060:	e000      	b.n	8011064 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011062:	bf00      	nop

	return res;
 8011064:	7dfb      	ldrb	r3, [r7, #23]
}
 8011066:	4618      	mov	r0, r3
 8011068:	3718      	adds	r7, #24
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}

0801106e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801106e:	b580      	push	{r7, lr}
 8011070:	b084      	sub	sp, #16
 8011072:	af00      	add	r7, sp, #0
 8011074:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801107c:	2101      	movs	r1, #1
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f7ff ff1a 	bl	8010eb8 <dir_alloc>
 8011084:	4603      	mov	r3, r0
 8011086:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011088:	7bfb      	ldrb	r3, [r7, #15]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d11c      	bne.n	80110c8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	69db      	ldr	r3, [r3, #28]
 8011092:	4619      	mov	r1, r3
 8011094:	68b8      	ldr	r0, [r7, #8]
 8011096:	f7ff fa4f 	bl	8010538 <move_window>
 801109a:	4603      	mov	r3, r0
 801109c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801109e:	7bfb      	ldrb	r3, [r7, #15]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d111      	bne.n	80110c8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	6a1b      	ldr	r3, [r3, #32]
 80110a8:	2220      	movs	r2, #32
 80110aa:	2100      	movs	r1, #0
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7ff f836 	bl	801011e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6a18      	ldr	r0, [r3, #32]
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	3324      	adds	r3, #36	; 0x24
 80110ba:	220b      	movs	r2, #11
 80110bc:	4619      	mov	r1, r3
 80110be:	f7ff f80d 	bl	80100dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	2201      	movs	r2, #1
 80110c6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80110c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3710      	adds	r7, #16
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
	...

080110d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b088      	sub	sp, #32
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	60fb      	str	r3, [r7, #12]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	3324      	adds	r3, #36	; 0x24
 80110e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80110ea:	220b      	movs	r2, #11
 80110ec:	2120      	movs	r1, #32
 80110ee:	68b8      	ldr	r0, [r7, #8]
 80110f0:	f7ff f815 	bl	801011e <mem_set>
	si = i = 0; ni = 8;
 80110f4:	2300      	movs	r3, #0
 80110f6:	613b      	str	r3, [r7, #16]
 80110f8:	693b      	ldr	r3, [r7, #16]
 80110fa:	61fb      	str	r3, [r7, #28]
 80110fc:	2308      	movs	r3, #8
 80110fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	1c5a      	adds	r2, r3, #1
 8011104:	61fa      	str	r2, [r7, #28]
 8011106:	68fa      	ldr	r2, [r7, #12]
 8011108:	4413      	add	r3, r2
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801110e:	7efb      	ldrb	r3, [r7, #27]
 8011110:	2b20      	cmp	r3, #32
 8011112:	d94e      	bls.n	80111b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011114:	7efb      	ldrb	r3, [r7, #27]
 8011116:	2b2f      	cmp	r3, #47	; 0x2f
 8011118:	d006      	beq.n	8011128 <create_name+0x54>
 801111a:	7efb      	ldrb	r3, [r7, #27]
 801111c:	2b5c      	cmp	r3, #92	; 0x5c
 801111e:	d110      	bne.n	8011142 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011120:	e002      	b.n	8011128 <create_name+0x54>
 8011122:	69fb      	ldr	r3, [r7, #28]
 8011124:	3301      	adds	r3, #1
 8011126:	61fb      	str	r3, [r7, #28]
 8011128:	68fa      	ldr	r2, [r7, #12]
 801112a:	69fb      	ldr	r3, [r7, #28]
 801112c:	4413      	add	r3, r2
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	2b2f      	cmp	r3, #47	; 0x2f
 8011132:	d0f6      	beq.n	8011122 <create_name+0x4e>
 8011134:	68fa      	ldr	r2, [r7, #12]
 8011136:	69fb      	ldr	r3, [r7, #28]
 8011138:	4413      	add	r3, r2
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	2b5c      	cmp	r3, #92	; 0x5c
 801113e:	d0f0      	beq.n	8011122 <create_name+0x4e>
			break;
 8011140:	e038      	b.n	80111b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011142:	7efb      	ldrb	r3, [r7, #27]
 8011144:	2b2e      	cmp	r3, #46	; 0x2e
 8011146:	d003      	beq.n	8011150 <create_name+0x7c>
 8011148:	693a      	ldr	r2, [r7, #16]
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	429a      	cmp	r2, r3
 801114e:	d30c      	bcc.n	801116a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	2b0b      	cmp	r3, #11
 8011154:	d002      	beq.n	801115c <create_name+0x88>
 8011156:	7efb      	ldrb	r3, [r7, #27]
 8011158:	2b2e      	cmp	r3, #46	; 0x2e
 801115a:	d001      	beq.n	8011160 <create_name+0x8c>
 801115c:	2306      	movs	r3, #6
 801115e:	e044      	b.n	80111ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011160:	2308      	movs	r3, #8
 8011162:	613b      	str	r3, [r7, #16]
 8011164:	230b      	movs	r3, #11
 8011166:	617b      	str	r3, [r7, #20]
			continue;
 8011168:	e022      	b.n	80111b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801116a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801116e:	2b00      	cmp	r3, #0
 8011170:	da04      	bge.n	801117c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011172:	7efb      	ldrb	r3, [r7, #27]
 8011174:	3b80      	subs	r3, #128	; 0x80
 8011176:	4a1f      	ldr	r2, [pc, #124]	; (80111f4 <create_name+0x120>)
 8011178:	5cd3      	ldrb	r3, [r2, r3]
 801117a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801117c:	7efb      	ldrb	r3, [r7, #27]
 801117e:	4619      	mov	r1, r3
 8011180:	481d      	ldr	r0, [pc, #116]	; (80111f8 <create_name+0x124>)
 8011182:	f7ff f80e 	bl	80101a2 <chk_chr>
 8011186:	4603      	mov	r3, r0
 8011188:	2b00      	cmp	r3, #0
 801118a:	d001      	beq.n	8011190 <create_name+0xbc>
 801118c:	2306      	movs	r3, #6
 801118e:	e02c      	b.n	80111ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011190:	7efb      	ldrb	r3, [r7, #27]
 8011192:	2b60      	cmp	r3, #96	; 0x60
 8011194:	d905      	bls.n	80111a2 <create_name+0xce>
 8011196:	7efb      	ldrb	r3, [r7, #27]
 8011198:	2b7a      	cmp	r3, #122	; 0x7a
 801119a:	d802      	bhi.n	80111a2 <create_name+0xce>
 801119c:	7efb      	ldrb	r3, [r7, #27]
 801119e:	3b20      	subs	r3, #32
 80111a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80111a2:	693b      	ldr	r3, [r7, #16]
 80111a4:	1c5a      	adds	r2, r3, #1
 80111a6:	613a      	str	r2, [r7, #16]
 80111a8:	68ba      	ldr	r2, [r7, #8]
 80111aa:	4413      	add	r3, r2
 80111ac:	7efa      	ldrb	r2, [r7, #27]
 80111ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80111b0:	e7a6      	b.n	8011100 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80111b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80111b4:	68fa      	ldr	r2, [r7, #12]
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	441a      	add	r2, r3
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d101      	bne.n	80111c8 <create_name+0xf4>
 80111c4:	2306      	movs	r3, #6
 80111c6:	e010      	b.n	80111ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	2be5      	cmp	r3, #229	; 0xe5
 80111ce:	d102      	bne.n	80111d6 <create_name+0x102>
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	2205      	movs	r2, #5
 80111d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80111d6:	7efb      	ldrb	r3, [r7, #27]
 80111d8:	2b20      	cmp	r3, #32
 80111da:	d801      	bhi.n	80111e0 <create_name+0x10c>
 80111dc:	2204      	movs	r2, #4
 80111de:	e000      	b.n	80111e2 <create_name+0x10e>
 80111e0:	2200      	movs	r2, #0
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	330b      	adds	r3, #11
 80111e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80111e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3720      	adds	r7, #32
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	0801a464 	.word	0x0801a464
 80111f8:	08018a80 	.word	0x08018a80

080111fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b086      	sub	sp, #24
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011210:	e002      	b.n	8011218 <follow_path+0x1c>
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	3301      	adds	r3, #1
 8011216:	603b      	str	r3, [r7, #0]
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	2b2f      	cmp	r3, #47	; 0x2f
 801121e:	d0f8      	beq.n	8011212 <follow_path+0x16>
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	2b5c      	cmp	r3, #92	; 0x5c
 8011226:	d0f4      	beq.n	8011212 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	2200      	movs	r2, #0
 801122c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	2b1f      	cmp	r3, #31
 8011234:	d80a      	bhi.n	801124c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2280      	movs	r2, #128	; 0x80
 801123a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801123e:	2100      	movs	r1, #0
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7ff fcf9 	bl	8010c38 <dir_sdi>
 8011246:	4603      	mov	r3, r0
 8011248:	75fb      	strb	r3, [r7, #23]
 801124a:	e043      	b.n	80112d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801124c:	463b      	mov	r3, r7
 801124e:	4619      	mov	r1, r3
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f7ff ff3f 	bl	80110d4 <create_name>
 8011256:	4603      	mov	r3, r0
 8011258:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801125a:	7dfb      	ldrb	r3, [r7, #23]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d134      	bne.n	80112ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f7ff feaf 	bl	8010fc4 <dir_find>
 8011266:	4603      	mov	r3, r0
 8011268:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011270:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011272:	7dfb      	ldrb	r3, [r7, #23]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d00a      	beq.n	801128e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011278:	7dfb      	ldrb	r3, [r7, #23]
 801127a:	2b04      	cmp	r3, #4
 801127c:	d127      	bne.n	80112ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801127e:	7afb      	ldrb	r3, [r7, #11]
 8011280:	f003 0304 	and.w	r3, r3, #4
 8011284:	2b00      	cmp	r3, #0
 8011286:	d122      	bne.n	80112ce <follow_path+0xd2>
 8011288:	2305      	movs	r3, #5
 801128a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801128c:	e01f      	b.n	80112ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801128e:	7afb      	ldrb	r3, [r7, #11]
 8011290:	f003 0304 	and.w	r3, r3, #4
 8011294:	2b00      	cmp	r3, #0
 8011296:	d11c      	bne.n	80112d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	799b      	ldrb	r3, [r3, #6]
 801129c:	f003 0310 	and.w	r3, r3, #16
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d102      	bne.n	80112aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80112a4:	2305      	movs	r3, #5
 80112a6:	75fb      	strb	r3, [r7, #23]
 80112a8:	e014      	b.n	80112d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	695b      	ldr	r3, [r3, #20]
 80112b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112b8:	4413      	add	r3, r2
 80112ba:	4619      	mov	r1, r3
 80112bc:	68f8      	ldr	r0, [r7, #12]
 80112be:	f7ff fe42 	bl	8010f46 <ld_clust>
 80112c2:	4602      	mov	r2, r0
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80112c8:	e7c0      	b.n	801124c <follow_path+0x50>
			if (res != FR_OK) break;
 80112ca:	bf00      	nop
 80112cc:	e002      	b.n	80112d4 <follow_path+0xd8>
				break;
 80112ce:	bf00      	nop
 80112d0:	e000      	b.n	80112d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80112d2:	bf00      	nop
			}
		}
	}

	return res;
 80112d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3718      	adds	r7, #24
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}

080112de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80112de:	b480      	push	{r7}
 80112e0:	b087      	sub	sp, #28
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80112e6:	f04f 33ff 	mov.w	r3, #4294967295
 80112ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d031      	beq.n	8011358 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	617b      	str	r3, [r7, #20]
 80112fa:	e002      	b.n	8011302 <get_ldnumber+0x24>
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	3301      	adds	r3, #1
 8011300:	617b      	str	r3, [r7, #20]
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	2b20      	cmp	r3, #32
 8011308:	d903      	bls.n	8011312 <get_ldnumber+0x34>
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	2b3a      	cmp	r3, #58	; 0x3a
 8011310:	d1f4      	bne.n	80112fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011312:	697b      	ldr	r3, [r7, #20]
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	2b3a      	cmp	r3, #58	; 0x3a
 8011318:	d11c      	bne.n	8011354 <get_ldnumber+0x76>
			tp = *path;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	1c5a      	adds	r2, r3, #1
 8011324:	60fa      	str	r2, [r7, #12]
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	3b30      	subs	r3, #48	; 0x30
 801132a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	2b09      	cmp	r3, #9
 8011330:	d80e      	bhi.n	8011350 <get_ldnumber+0x72>
 8011332:	68fa      	ldr	r2, [r7, #12]
 8011334:	697b      	ldr	r3, [r7, #20]
 8011336:	429a      	cmp	r2, r3
 8011338:	d10a      	bne.n	8011350 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d107      	bne.n	8011350 <get_ldnumber+0x72>
					vol = (int)i;
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	3301      	adds	r3, #1
 8011348:	617b      	str	r3, [r7, #20]
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	697a      	ldr	r2, [r7, #20]
 801134e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	e002      	b.n	801135a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011354:	2300      	movs	r3, #0
 8011356:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011358:	693b      	ldr	r3, [r7, #16]
}
 801135a:	4618      	mov	r0, r3
 801135c:	371c      	adds	r7, #28
 801135e:	46bd      	mov	sp, r7
 8011360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011364:	4770      	bx	lr
	...

08011368 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2200      	movs	r2, #0
 8011376:	70da      	strb	r2, [r3, #3]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f04f 32ff 	mov.w	r2, #4294967295
 801137e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011380:	6839      	ldr	r1, [r7, #0]
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f7ff f8d8 	bl	8010538 <move_window>
 8011388:	4603      	mov	r3, r0
 801138a:	2b00      	cmp	r3, #0
 801138c:	d001      	beq.n	8011392 <check_fs+0x2a>
 801138e:	2304      	movs	r3, #4
 8011390:	e038      	b.n	8011404 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	3330      	adds	r3, #48	; 0x30
 8011396:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801139a:	4618      	mov	r0, r3
 801139c:	f7fe fe1c 	bl	800ffd8 <ld_word>
 80113a0:	4603      	mov	r3, r0
 80113a2:	461a      	mov	r2, r3
 80113a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80113a8:	429a      	cmp	r2, r3
 80113aa:	d001      	beq.n	80113b0 <check_fs+0x48>
 80113ac:	2303      	movs	r3, #3
 80113ae:	e029      	b.n	8011404 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113b6:	2be9      	cmp	r3, #233	; 0xe9
 80113b8:	d009      	beq.n	80113ce <check_fs+0x66>
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113c0:	2beb      	cmp	r3, #235	; 0xeb
 80113c2:	d11e      	bne.n	8011402 <check_fs+0x9a>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80113ca:	2b90      	cmp	r3, #144	; 0x90
 80113cc:	d119      	bne.n	8011402 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	3330      	adds	r3, #48	; 0x30
 80113d2:	3336      	adds	r3, #54	; 0x36
 80113d4:	4618      	mov	r0, r3
 80113d6:	f7fe fe17 	bl	8010008 <ld_dword>
 80113da:	4603      	mov	r3, r0
 80113dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80113e0:	4a0a      	ldr	r2, [pc, #40]	; (801140c <check_fs+0xa4>)
 80113e2:	4293      	cmp	r3, r2
 80113e4:	d101      	bne.n	80113ea <check_fs+0x82>
 80113e6:	2300      	movs	r3, #0
 80113e8:	e00c      	b.n	8011404 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	3330      	adds	r3, #48	; 0x30
 80113ee:	3352      	adds	r3, #82	; 0x52
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fe fe09 	bl	8010008 <ld_dword>
 80113f6:	4603      	mov	r3, r0
 80113f8:	4a05      	ldr	r2, [pc, #20]	; (8011410 <check_fs+0xa8>)
 80113fa:	4293      	cmp	r3, r2
 80113fc:	d101      	bne.n	8011402 <check_fs+0x9a>
 80113fe:	2300      	movs	r3, #0
 8011400:	e000      	b.n	8011404 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011402:	2302      	movs	r3, #2
}
 8011404:	4618      	mov	r0, r3
 8011406:	3708      	adds	r7, #8
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	00544146 	.word	0x00544146
 8011410:	33544146 	.word	0x33544146

08011414 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b096      	sub	sp, #88	; 0x58
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	4613      	mov	r3, r2
 8011420:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	2200      	movs	r2, #0
 8011426:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011428:	68f8      	ldr	r0, [r7, #12]
 801142a:	f7ff ff58 	bl	80112de <get_ldnumber>
 801142e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011432:	2b00      	cmp	r3, #0
 8011434:	da01      	bge.n	801143a <find_volume+0x26>
 8011436:	230b      	movs	r3, #11
 8011438:	e22e      	b.n	8011898 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801143a:	4aa8      	ldr	r2, [pc, #672]	; (80116dc <find_volume+0x2c8>)
 801143c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801143e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011442:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011446:	2b00      	cmp	r3, #0
 8011448:	d101      	bne.n	801144e <find_volume+0x3a>
 801144a:	230c      	movs	r3, #12
 801144c:	e224      	b.n	8011898 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011452:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011454:	79fb      	ldrb	r3, [r7, #7]
 8011456:	f023 0301 	bic.w	r3, r3, #1
 801145a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801145c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d01a      	beq.n	801149a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011466:	785b      	ldrb	r3, [r3, #1]
 8011468:	4618      	mov	r0, r3
 801146a:	f7fe fd17 	bl	800fe9c <disk_status>
 801146e:	4603      	mov	r3, r0
 8011470:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011478:	f003 0301 	and.w	r3, r3, #1
 801147c:	2b00      	cmp	r3, #0
 801147e:	d10c      	bne.n	801149a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011480:	79fb      	ldrb	r3, [r7, #7]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d007      	beq.n	8011496 <find_volume+0x82>
 8011486:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801148a:	f003 0304 	and.w	r3, r3, #4
 801148e:	2b00      	cmp	r3, #0
 8011490:	d001      	beq.n	8011496 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011492:	230a      	movs	r3, #10
 8011494:	e200      	b.n	8011898 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8011496:	2300      	movs	r3, #0
 8011498:	e1fe      	b.n	8011898 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149c:	2200      	movs	r2, #0
 801149e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80114a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114a2:	b2da      	uxtb	r2, r3
 80114a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80114a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114aa:	785b      	ldrb	r3, [r3, #1]
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7fe fd0f 	bl	800fed0 <disk_initialize>
 80114b2:	4603      	mov	r3, r0
 80114b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80114b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80114bc:	f003 0301 	and.w	r3, r3, #1
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80114c4:	2303      	movs	r3, #3
 80114c6:	e1e7      	b.n	8011898 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80114c8:	79fb      	ldrb	r3, [r7, #7]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d007      	beq.n	80114de <find_volume+0xca>
 80114ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80114d2:	f003 0304 	and.w	r3, r3, #4
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d001      	beq.n	80114de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80114da:	230a      	movs	r3, #10
 80114dc:	e1dc      	b.n	8011898 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80114de:	2300      	movs	r3, #0
 80114e0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80114e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80114e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80114e6:	f7ff ff3f 	bl	8011368 <check_fs>
 80114ea:	4603      	mov	r3, r0
 80114ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80114f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80114f4:	2b02      	cmp	r3, #2
 80114f6:	d14b      	bne.n	8011590 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80114f8:	2300      	movs	r3, #0
 80114fa:	643b      	str	r3, [r7, #64]	; 0x40
 80114fc:	e01f      	b.n	801153e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80114fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011500:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011506:	011b      	lsls	r3, r3, #4
 8011508:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801150c:	4413      	add	r3, r2
 801150e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011512:	3304      	adds	r3, #4
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d006      	beq.n	8011528 <find_volume+0x114>
 801151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151c:	3308      	adds	r3, #8
 801151e:	4618      	mov	r0, r3
 8011520:	f7fe fd72 	bl	8010008 <ld_dword>
 8011524:	4602      	mov	r2, r0
 8011526:	e000      	b.n	801152a <find_volume+0x116>
 8011528:	2200      	movs	r2, #0
 801152a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801152c:	009b      	lsls	r3, r3, #2
 801152e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011532:	440b      	add	r3, r1
 8011534:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801153a:	3301      	adds	r3, #1
 801153c:	643b      	str	r3, [r7, #64]	; 0x40
 801153e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011540:	2b03      	cmp	r3, #3
 8011542:	d9dc      	bls.n	80114fe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011544:	2300      	movs	r3, #0
 8011546:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801154a:	2b00      	cmp	r3, #0
 801154c:	d002      	beq.n	8011554 <find_volume+0x140>
 801154e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011550:	3b01      	subs	r3, #1
 8011552:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011556:	009b      	lsls	r3, r3, #2
 8011558:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801155c:	4413      	add	r3, r2
 801155e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011562:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011566:	2b00      	cmp	r3, #0
 8011568:	d005      	beq.n	8011576 <find_volume+0x162>
 801156a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801156c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801156e:	f7ff fefb 	bl	8011368 <check_fs>
 8011572:	4603      	mov	r3, r0
 8011574:	e000      	b.n	8011578 <find_volume+0x164>
 8011576:	2303      	movs	r3, #3
 8011578:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801157c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011580:	2b01      	cmp	r3, #1
 8011582:	d905      	bls.n	8011590 <find_volume+0x17c>
 8011584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011586:	3301      	adds	r3, #1
 8011588:	643b      	str	r3, [r7, #64]	; 0x40
 801158a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801158c:	2b03      	cmp	r3, #3
 801158e:	d9e1      	bls.n	8011554 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011590:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011594:	2b04      	cmp	r3, #4
 8011596:	d101      	bne.n	801159c <find_volume+0x188>
 8011598:	2301      	movs	r3, #1
 801159a:	e17d      	b.n	8011898 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801159c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80115a0:	2b01      	cmp	r3, #1
 80115a2:	d901      	bls.n	80115a8 <find_volume+0x194>
 80115a4:	230d      	movs	r3, #13
 80115a6:	e177      	b.n	8011898 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80115a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115aa:	3330      	adds	r3, #48	; 0x30
 80115ac:	330b      	adds	r3, #11
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7fe fd12 	bl	800ffd8 <ld_word>
 80115b4:	4603      	mov	r3, r0
 80115b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115ba:	d001      	beq.n	80115c0 <find_volume+0x1ac>
 80115bc:	230d      	movs	r3, #13
 80115be:	e16b      	b.n	8011898 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80115c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c2:	3330      	adds	r3, #48	; 0x30
 80115c4:	3316      	adds	r3, #22
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7fe fd06 	bl	800ffd8 <ld_word>
 80115cc:	4603      	mov	r3, r0
 80115ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80115d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d106      	bne.n	80115e4 <find_volume+0x1d0>
 80115d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d8:	3330      	adds	r3, #48	; 0x30
 80115da:	3324      	adds	r3, #36	; 0x24
 80115dc:	4618      	mov	r0, r3
 80115de:	f7fe fd13 	bl	8010008 <ld_dword>
 80115e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80115e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80115e8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80115ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80115f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80115f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115f6:	789b      	ldrb	r3, [r3, #2]
 80115f8:	2b01      	cmp	r3, #1
 80115fa:	d005      	beq.n	8011608 <find_volume+0x1f4>
 80115fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115fe:	789b      	ldrb	r3, [r3, #2]
 8011600:	2b02      	cmp	r3, #2
 8011602:	d001      	beq.n	8011608 <find_volume+0x1f4>
 8011604:	230d      	movs	r3, #13
 8011606:	e147      	b.n	8011898 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160a:	789b      	ldrb	r3, [r3, #2]
 801160c:	461a      	mov	r2, r3
 801160e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011610:	fb02 f303 	mul.w	r3, r2, r3
 8011614:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801161c:	b29a      	uxth	r2, r3
 801161e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011620:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011624:	895b      	ldrh	r3, [r3, #10]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d008      	beq.n	801163c <find_volume+0x228>
 801162a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162c:	895b      	ldrh	r3, [r3, #10]
 801162e:	461a      	mov	r2, r3
 8011630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011632:	895b      	ldrh	r3, [r3, #10]
 8011634:	3b01      	subs	r3, #1
 8011636:	4013      	ands	r3, r2
 8011638:	2b00      	cmp	r3, #0
 801163a:	d001      	beq.n	8011640 <find_volume+0x22c>
 801163c:	230d      	movs	r3, #13
 801163e:	e12b      	b.n	8011898 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011642:	3330      	adds	r3, #48	; 0x30
 8011644:	3311      	adds	r3, #17
 8011646:	4618      	mov	r0, r3
 8011648:	f7fe fcc6 	bl	800ffd8 <ld_word>
 801164c:	4603      	mov	r3, r0
 801164e:	461a      	mov	r2, r3
 8011650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011652:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011656:	891b      	ldrh	r3, [r3, #8]
 8011658:	f003 030f 	and.w	r3, r3, #15
 801165c:	b29b      	uxth	r3, r3
 801165e:	2b00      	cmp	r3, #0
 8011660:	d001      	beq.n	8011666 <find_volume+0x252>
 8011662:	230d      	movs	r3, #13
 8011664:	e118      	b.n	8011898 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011668:	3330      	adds	r3, #48	; 0x30
 801166a:	3313      	adds	r3, #19
 801166c:	4618      	mov	r0, r3
 801166e:	f7fe fcb3 	bl	800ffd8 <ld_word>
 8011672:	4603      	mov	r3, r0
 8011674:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011678:	2b00      	cmp	r3, #0
 801167a:	d106      	bne.n	801168a <find_volume+0x276>
 801167c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801167e:	3330      	adds	r3, #48	; 0x30
 8011680:	3320      	adds	r3, #32
 8011682:	4618      	mov	r0, r3
 8011684:	f7fe fcc0 	bl	8010008 <ld_dword>
 8011688:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801168a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168c:	3330      	adds	r3, #48	; 0x30
 801168e:	330e      	adds	r3, #14
 8011690:	4618      	mov	r0, r3
 8011692:	f7fe fca1 	bl	800ffd8 <ld_word>
 8011696:	4603      	mov	r3, r0
 8011698:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801169a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801169c:	2b00      	cmp	r3, #0
 801169e:	d101      	bne.n	80116a4 <find_volume+0x290>
 80116a0:	230d      	movs	r3, #13
 80116a2:	e0f9      	b.n	8011898 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80116a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80116a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116a8:	4413      	add	r3, r2
 80116aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116ac:	8912      	ldrh	r2, [r2, #8]
 80116ae:	0912      	lsrs	r2, r2, #4
 80116b0:	b292      	uxth	r2, r2
 80116b2:	4413      	add	r3, r2
 80116b4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80116b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d201      	bcs.n	80116c2 <find_volume+0x2ae>
 80116be:	230d      	movs	r3, #13
 80116c0:	e0ea      	b.n	8011898 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80116c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c6:	1ad3      	subs	r3, r2, r3
 80116c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116ca:	8952      	ldrh	r2, [r2, #10]
 80116cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80116d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80116d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d103      	bne.n	80116e0 <find_volume+0x2cc>
 80116d8:	230d      	movs	r3, #13
 80116da:	e0dd      	b.n	8011898 <find_volume+0x484>
 80116dc:	20000650 	.word	0x20000650
		fmt = FS_FAT32;
 80116e0:	2303      	movs	r3, #3
 80116e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80116e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80116ec:	4293      	cmp	r3, r2
 80116ee:	d802      	bhi.n	80116f6 <find_volume+0x2e2>
 80116f0:	2302      	movs	r3, #2
 80116f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80116f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80116fc:	4293      	cmp	r3, r2
 80116fe:	d802      	bhi.n	8011706 <find_volume+0x2f2>
 8011700:	2301      	movs	r3, #1
 8011702:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011708:	1c9a      	adds	r2, r3, #2
 801170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801170e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011710:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011712:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011714:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011718:	441a      	add	r2, r3
 801171a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801171e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011722:	441a      	add	r2, r3
 8011724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011726:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8011728:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801172c:	2b03      	cmp	r3, #3
 801172e:	d11e      	bne.n	801176e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011732:	3330      	adds	r3, #48	; 0x30
 8011734:	332a      	adds	r3, #42	; 0x2a
 8011736:	4618      	mov	r0, r3
 8011738:	f7fe fc4e 	bl	800ffd8 <ld_word>
 801173c:	4603      	mov	r3, r0
 801173e:	2b00      	cmp	r3, #0
 8011740:	d001      	beq.n	8011746 <find_volume+0x332>
 8011742:	230d      	movs	r3, #13
 8011744:	e0a8      	b.n	8011898 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011748:	891b      	ldrh	r3, [r3, #8]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d001      	beq.n	8011752 <find_volume+0x33e>
 801174e:	230d      	movs	r3, #13
 8011750:	e0a2      	b.n	8011898 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011754:	3330      	adds	r3, #48	; 0x30
 8011756:	332c      	adds	r3, #44	; 0x2c
 8011758:	4618      	mov	r0, r3
 801175a:	f7fe fc55 	bl	8010008 <ld_dword>
 801175e:	4602      	mov	r2, r0
 8011760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011762:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011766:	695b      	ldr	r3, [r3, #20]
 8011768:	009b      	lsls	r3, r3, #2
 801176a:	647b      	str	r3, [r7, #68]	; 0x44
 801176c:	e01f      	b.n	80117ae <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801176e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011770:	891b      	ldrh	r3, [r3, #8]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d101      	bne.n	801177a <find_volume+0x366>
 8011776:	230d      	movs	r3, #13
 8011778:	e08e      	b.n	8011898 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801177a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801177c:	6a1a      	ldr	r2, [r3, #32]
 801177e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011780:	441a      	add	r2, r3
 8011782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011784:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011786:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801178a:	2b02      	cmp	r3, #2
 801178c:	d103      	bne.n	8011796 <find_volume+0x382>
 801178e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011790:	695b      	ldr	r3, [r3, #20]
 8011792:	005b      	lsls	r3, r3, #1
 8011794:	e00a      	b.n	80117ac <find_volume+0x398>
 8011796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011798:	695a      	ldr	r2, [r3, #20]
 801179a:	4613      	mov	r3, r2
 801179c:	005b      	lsls	r3, r3, #1
 801179e:	4413      	add	r3, r2
 80117a0:	085a      	lsrs	r2, r3, #1
 80117a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a4:	695b      	ldr	r3, [r3, #20]
 80117a6:	f003 0301 	and.w	r3, r3, #1
 80117aa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80117ac:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80117ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b0:	699a      	ldr	r2, [r3, #24]
 80117b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80117b8:	0a5b      	lsrs	r3, r3, #9
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d201      	bcs.n	80117c2 <find_volume+0x3ae>
 80117be:	230d      	movs	r3, #13
 80117c0:	e06a      	b.n	8011898 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80117c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c4:	f04f 32ff 	mov.w	r2, #4294967295
 80117c8:	611a      	str	r2, [r3, #16]
 80117ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117cc:	691a      	ldr	r2, [r3, #16]
 80117ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80117d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d4:	2280      	movs	r2, #128	; 0x80
 80117d6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80117d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80117dc:	2b03      	cmp	r3, #3
 80117de:	d149      	bne.n	8011874 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80117e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e2:	3330      	adds	r3, #48	; 0x30
 80117e4:	3330      	adds	r3, #48	; 0x30
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7fe fbf6 	bl	800ffd8 <ld_word>
 80117ec:	4603      	mov	r3, r0
 80117ee:	2b01      	cmp	r3, #1
 80117f0:	d140      	bne.n	8011874 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80117f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117f4:	3301      	adds	r3, #1
 80117f6:	4619      	mov	r1, r3
 80117f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80117fa:	f7fe fe9d 	bl	8010538 <move_window>
 80117fe:	4603      	mov	r3, r0
 8011800:	2b00      	cmp	r3, #0
 8011802:	d137      	bne.n	8011874 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8011804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011806:	2200      	movs	r2, #0
 8011808:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801180a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801180c:	3330      	adds	r3, #48	; 0x30
 801180e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011812:	4618      	mov	r0, r3
 8011814:	f7fe fbe0 	bl	800ffd8 <ld_word>
 8011818:	4603      	mov	r3, r0
 801181a:	461a      	mov	r2, r3
 801181c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011820:	429a      	cmp	r2, r3
 8011822:	d127      	bne.n	8011874 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011826:	3330      	adds	r3, #48	; 0x30
 8011828:	4618      	mov	r0, r3
 801182a:	f7fe fbed 	bl	8010008 <ld_dword>
 801182e:	4603      	mov	r3, r0
 8011830:	4a1b      	ldr	r2, [pc, #108]	; (80118a0 <find_volume+0x48c>)
 8011832:	4293      	cmp	r3, r2
 8011834:	d11e      	bne.n	8011874 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011838:	3330      	adds	r3, #48	; 0x30
 801183a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801183e:	4618      	mov	r0, r3
 8011840:	f7fe fbe2 	bl	8010008 <ld_dword>
 8011844:	4603      	mov	r3, r0
 8011846:	4a17      	ldr	r2, [pc, #92]	; (80118a4 <find_volume+0x490>)
 8011848:	4293      	cmp	r3, r2
 801184a:	d113      	bne.n	8011874 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801184c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184e:	3330      	adds	r3, #48	; 0x30
 8011850:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011854:	4618      	mov	r0, r3
 8011856:	f7fe fbd7 	bl	8010008 <ld_dword>
 801185a:	4602      	mov	r2, r0
 801185c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801185e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011862:	3330      	adds	r3, #48	; 0x30
 8011864:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011868:	4618      	mov	r0, r3
 801186a:	f7fe fbcd 	bl	8010008 <ld_dword>
 801186e:	4602      	mov	r2, r0
 8011870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011872:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011876:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801187a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801187c:	4b0a      	ldr	r3, [pc, #40]	; (80118a8 <find_volume+0x494>)
 801187e:	881b      	ldrh	r3, [r3, #0]
 8011880:	3301      	adds	r3, #1
 8011882:	b29a      	uxth	r2, r3
 8011884:	4b08      	ldr	r3, [pc, #32]	; (80118a8 <find_volume+0x494>)
 8011886:	801a      	strh	r2, [r3, #0]
 8011888:	4b07      	ldr	r3, [pc, #28]	; (80118a8 <find_volume+0x494>)
 801188a:	881a      	ldrh	r2, [r3, #0]
 801188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011890:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011892:	f7fe fde9 	bl	8010468 <clear_lock>
#endif
	return FR_OK;
 8011896:	2300      	movs	r3, #0
}
 8011898:	4618      	mov	r0, r3
 801189a:	3758      	adds	r7, #88	; 0x58
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}
 80118a0:	41615252 	.word	0x41615252
 80118a4:	61417272 	.word	0x61417272
 80118a8:	20000654 	.word	0x20000654

080118ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
 80118b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80118b6:	2309      	movs	r3, #9
 80118b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d01c      	beq.n	80118fa <validate+0x4e>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d018      	beq.n	80118fa <validate+0x4e>
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	781b      	ldrb	r3, [r3, #0]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d013      	beq.n	80118fa <validate+0x4e>
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	889a      	ldrh	r2, [r3, #4]
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	88db      	ldrh	r3, [r3, #6]
 80118dc:	429a      	cmp	r2, r3
 80118de:	d10c      	bne.n	80118fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	785b      	ldrb	r3, [r3, #1]
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7fe fad8 	bl	800fe9c <disk_status>
 80118ec:	4603      	mov	r3, r0
 80118ee:	f003 0301 	and.w	r3, r3, #1
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d101      	bne.n	80118fa <validate+0x4e>
			res = FR_OK;
 80118f6:	2300      	movs	r3, #0
 80118f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80118fa:	7bfb      	ldrb	r3, [r7, #15]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d102      	bne.n	8011906 <validate+0x5a>
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	e000      	b.n	8011908 <validate+0x5c>
 8011906:	2300      	movs	r3, #0
 8011908:	683a      	ldr	r2, [r7, #0]
 801190a:	6013      	str	r3, [r2, #0]
	return res;
 801190c:	7bfb      	ldrb	r3, [r7, #15]
}
 801190e:	4618      	mov	r0, r3
 8011910:	3710      	adds	r7, #16
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}
	...

08011918 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b088      	sub	sp, #32
 801191c:	af00      	add	r7, sp, #0
 801191e:	60f8      	str	r0, [r7, #12]
 8011920:	60b9      	str	r1, [r7, #8]
 8011922:	4613      	mov	r3, r2
 8011924:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801192a:	f107 0310 	add.w	r3, r7, #16
 801192e:	4618      	mov	r0, r3
 8011930:	f7ff fcd5 	bl	80112de <get_ldnumber>
 8011934:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	2b00      	cmp	r3, #0
 801193a:	da01      	bge.n	8011940 <f_mount+0x28>
 801193c:	230b      	movs	r3, #11
 801193e:	e02b      	b.n	8011998 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011940:	4a17      	ldr	r2, [pc, #92]	; (80119a0 <f_mount+0x88>)
 8011942:	69fb      	ldr	r3, [r7, #28]
 8011944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011948:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801194a:	69bb      	ldr	r3, [r7, #24]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d005      	beq.n	801195c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011950:	69b8      	ldr	r0, [r7, #24]
 8011952:	f7fe fd89 	bl	8010468 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011956:	69bb      	ldr	r3, [r7, #24]
 8011958:	2200      	movs	r2, #0
 801195a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d002      	beq.n	8011968 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	2200      	movs	r2, #0
 8011966:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011968:	68fa      	ldr	r2, [r7, #12]
 801196a:	490d      	ldr	r1, [pc, #52]	; (80119a0 <f_mount+0x88>)
 801196c:	69fb      	ldr	r3, [r7, #28]
 801196e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d002      	beq.n	801197e <f_mount+0x66>
 8011978:	79fb      	ldrb	r3, [r7, #7]
 801197a:	2b01      	cmp	r3, #1
 801197c:	d001      	beq.n	8011982 <f_mount+0x6a>
 801197e:	2300      	movs	r3, #0
 8011980:	e00a      	b.n	8011998 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011982:	f107 010c 	add.w	r1, r7, #12
 8011986:	f107 0308 	add.w	r3, r7, #8
 801198a:	2200      	movs	r2, #0
 801198c:	4618      	mov	r0, r3
 801198e:	f7ff fd41 	bl	8011414 <find_volume>
 8011992:	4603      	mov	r3, r0
 8011994:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011996:	7dfb      	ldrb	r3, [r7, #23]
}
 8011998:	4618      	mov	r0, r3
 801199a:	3720      	adds	r7, #32
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	20000650 	.word	0x20000650

080119a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b098      	sub	sp, #96	; 0x60
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	60f8      	str	r0, [r7, #12]
 80119ac:	60b9      	str	r1, [r7, #8]
 80119ae:	4613      	mov	r3, r2
 80119b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d101      	bne.n	80119bc <f_open+0x18>
 80119b8:	2309      	movs	r3, #9
 80119ba:	e1ad      	b.n	8011d18 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80119bc:	79fb      	ldrb	r3, [r7, #7]
 80119be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80119c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80119c4:	79fa      	ldrb	r2, [r7, #7]
 80119c6:	f107 0110 	add.w	r1, r7, #16
 80119ca:	f107 0308 	add.w	r3, r7, #8
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7ff fd20 	bl	8011414 <find_volume>
 80119d4:	4603      	mov	r3, r0
 80119d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80119da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80119de:	2b00      	cmp	r3, #0
 80119e0:	f040 8191 	bne.w	8011d06 <f_open+0x362>
		dj.obj.fs = fs;
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80119e8:	68ba      	ldr	r2, [r7, #8]
 80119ea:	f107 0314 	add.w	r3, r7, #20
 80119ee:	4611      	mov	r1, r2
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7ff fc03 	bl	80111fc <follow_path>
 80119f6:	4603      	mov	r3, r0
 80119f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80119fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d11a      	bne.n	8011a3a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011a04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011a08:	b25b      	sxtb	r3, r3
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	da03      	bge.n	8011a16 <f_open+0x72>
				res = FR_INVALID_NAME;
 8011a0e:	2306      	movs	r3, #6
 8011a10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011a14:	e011      	b.n	8011a3a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011a16:	79fb      	ldrb	r3, [r7, #7]
 8011a18:	f023 0301 	bic.w	r3, r3, #1
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	bf14      	ite	ne
 8011a20:	2301      	movne	r3, #1
 8011a22:	2300      	moveq	r3, #0
 8011a24:	b2db      	uxtb	r3, r3
 8011a26:	461a      	mov	r2, r3
 8011a28:	f107 0314 	add.w	r3, r7, #20
 8011a2c:	4611      	mov	r1, r2
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7fe fbd2 	bl	80101d8 <chk_lock>
 8011a34:	4603      	mov	r3, r0
 8011a36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011a3a:	79fb      	ldrb	r3, [r7, #7]
 8011a3c:	f003 031c 	and.w	r3, r3, #28
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d07f      	beq.n	8011b44 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011a44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d017      	beq.n	8011a7c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a50:	2b04      	cmp	r3, #4
 8011a52:	d10e      	bne.n	8011a72 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011a54:	f7fe fc1c 	bl	8010290 <enq_lock>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d006      	beq.n	8011a6c <f_open+0xc8>
 8011a5e:	f107 0314 	add.w	r3, r7, #20
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7ff fb03 	bl	801106e <dir_register>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	e000      	b.n	8011a6e <f_open+0xca>
 8011a6c:	2312      	movs	r3, #18
 8011a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011a72:	79fb      	ldrb	r3, [r7, #7]
 8011a74:	f043 0308 	orr.w	r3, r3, #8
 8011a78:	71fb      	strb	r3, [r7, #7]
 8011a7a:	e010      	b.n	8011a9e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011a7c:	7ebb      	ldrb	r3, [r7, #26]
 8011a7e:	f003 0311 	and.w	r3, r3, #17
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d003      	beq.n	8011a8e <f_open+0xea>
					res = FR_DENIED;
 8011a86:	2307      	movs	r3, #7
 8011a88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011a8c:	e007      	b.n	8011a9e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011a8e:	79fb      	ldrb	r3, [r7, #7]
 8011a90:	f003 0304 	and.w	r3, r3, #4
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d002      	beq.n	8011a9e <f_open+0xfa>
 8011a98:	2308      	movs	r3, #8
 8011a9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011a9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d168      	bne.n	8011b78 <f_open+0x1d4>
 8011aa6:	79fb      	ldrb	r3, [r7, #7]
 8011aa8:	f003 0308 	and.w	r3, r3, #8
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d063      	beq.n	8011b78 <f_open+0x1d4>
				dw = GET_FATTIME();
 8011ab0:	f7fc f822 	bl	800daf8 <get_fattime>
 8011ab4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ab8:	330e      	adds	r3, #14
 8011aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7fe fae1 	bl	8010084 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ac4:	3316      	adds	r3, #22
 8011ac6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7fe fadb 	bl	8010084 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ad0:	330b      	adds	r3, #11
 8011ad2:	2220      	movs	r2, #32
 8011ad4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ada:	4611      	mov	r1, r2
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7ff fa32 	bl	8010f46 <ld_clust>
 8011ae2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011ae4:	693b      	ldr	r3, [r7, #16]
 8011ae6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011ae8:	2200      	movs	r2, #0
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7ff fa4a 	bl	8010f84 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011af2:	331c      	adds	r3, #28
 8011af4:	2100      	movs	r1, #0
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fe fac4 	bl	8010084 <st_dword>
					fs->wflag = 1;
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	2201      	movs	r2, #1
 8011b00:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d037      	beq.n	8011b78 <f_open+0x1d4>
						dw = fs->winsect;
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b0c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011b0e:	f107 0314 	add.w	r3, r7, #20
 8011b12:	2200      	movs	r2, #0
 8011b14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7fe ff5d 	bl	80109d6 <remove_chain>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011b22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d126      	bne.n	8011b78 <f_open+0x1d4>
							res = move_window(fs, dw);
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7fe fd02 	bl	8010538 <move_window>
 8011b34:	4603      	mov	r3, r0
 8011b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b3e:	3a01      	subs	r2, #1
 8011b40:	60da      	str	r2, [r3, #12]
 8011b42:	e019      	b.n	8011b78 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011b44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d115      	bne.n	8011b78 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011b4c:	7ebb      	ldrb	r3, [r7, #26]
 8011b4e:	f003 0310 	and.w	r3, r3, #16
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d003      	beq.n	8011b5e <f_open+0x1ba>
					res = FR_NO_FILE;
 8011b56:	2304      	movs	r3, #4
 8011b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011b5c:	e00c      	b.n	8011b78 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011b5e:	79fb      	ldrb	r3, [r7, #7]
 8011b60:	f003 0302 	and.w	r3, r3, #2
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d007      	beq.n	8011b78 <f_open+0x1d4>
 8011b68:	7ebb      	ldrb	r3, [r7, #26]
 8011b6a:	f003 0301 	and.w	r3, r3, #1
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d002      	beq.n	8011b78 <f_open+0x1d4>
						res = FR_DENIED;
 8011b72:	2307      	movs	r3, #7
 8011b74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011b78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d128      	bne.n	8011bd2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011b80:	79fb      	ldrb	r3, [r7, #7]
 8011b82:	f003 0308 	and.w	r3, r3, #8
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d003      	beq.n	8011b92 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8011b8a:	79fb      	ldrb	r3, [r7, #7]
 8011b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b90:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011b92:	693b      	ldr	r3, [r7, #16]
 8011b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011ba0:	79fb      	ldrb	r3, [r7, #7]
 8011ba2:	f023 0301 	bic.w	r3, r3, #1
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	bf14      	ite	ne
 8011baa:	2301      	movne	r3, #1
 8011bac:	2300      	moveq	r3, #0
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	f107 0314 	add.w	r3, r7, #20
 8011bb6:	4611      	mov	r1, r2
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f7fe fb8b 	bl	80102d4 <inc_lock>
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	691b      	ldr	r3, [r3, #16]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d102      	bne.n	8011bd2 <f_open+0x22e>
 8011bcc:	2302      	movs	r3, #2
 8011bce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011bd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f040 8095 	bne.w	8011d06 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011be0:	4611      	mov	r1, r2
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7ff f9af 	bl	8010f46 <ld_clust>
 8011be8:	4602      	mov	r2, r0
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bf0:	331c      	adds	r3, #28
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fe fa08 	bl	8010008 <ld_dword>
 8011bf8:	4602      	mov	r2, r0
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	2200      	movs	r2, #0
 8011c02:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011c04:	693a      	ldr	r2, [r7, #16]
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011c0a:	693b      	ldr	r3, [r7, #16]
 8011c0c:	88da      	ldrh	r2, [r3, #6]
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	79fa      	ldrb	r2, [r7, #7]
 8011c16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	2200      	movs	r2, #0
 8011c22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2200      	movs	r2, #0
 8011c28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	3330      	adds	r3, #48	; 0x30
 8011c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c32:	2100      	movs	r1, #0
 8011c34:	4618      	mov	r0, r3
 8011c36:	f7fe fa72 	bl	801011e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011c3a:	79fb      	ldrb	r3, [r7, #7]
 8011c3c:	f003 0320 	and.w	r3, r3, #32
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d060      	beq.n	8011d06 <f_open+0x362>
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d05c      	beq.n	8011d06 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	68da      	ldr	r2, [r3, #12]
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	895b      	ldrh	r3, [r3, #10]
 8011c58:	025b      	lsls	r3, r3, #9
 8011c5a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	689b      	ldr	r3, [r3, #8]
 8011c60:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	68db      	ldr	r3, [r3, #12]
 8011c66:	657b      	str	r3, [r7, #84]	; 0x54
 8011c68:	e016      	b.n	8011c98 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7fe fd1d 	bl	80106ae <get_fat>
 8011c74:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	d802      	bhi.n	8011c82 <f_open+0x2de>
 8011c7c:	2302      	movs	r3, #2
 8011c7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011c82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c88:	d102      	bne.n	8011c90 <f_open+0x2ec>
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011c90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c94:	1ad3      	subs	r3, r2, r3
 8011c96:	657b      	str	r3, [r7, #84]	; 0x54
 8011c98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d103      	bne.n	8011ca8 <f_open+0x304>
 8011ca0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d8e0      	bhi.n	8011c6a <f_open+0x2c6>
				}
				fp->clust = clst;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011cac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011cae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d127      	bne.n	8011d06 <f_open+0x362>
 8011cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d022      	beq.n	8011d06 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fe fcd3 	bl	8010670 <clust2sect>
 8011cca:	6478      	str	r0, [r7, #68]	; 0x44
 8011ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d103      	bne.n	8011cda <f_open+0x336>
						res = FR_INT_ERR;
 8011cd2:	2302      	movs	r3, #2
 8011cd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011cd8:	e015      	b.n	8011d06 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011cdc:	0a5a      	lsrs	r2, r3, #9
 8011cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ce0:	441a      	add	r2, r3
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	7858      	ldrb	r0, [r3, #1]
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	6a1a      	ldr	r2, [r3, #32]
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	f7fe f911 	bl	800ff1c <disk_read>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d002      	beq.n	8011d06 <f_open+0x362>
 8011d00:	2301      	movs	r3, #1
 8011d02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011d06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d002      	beq.n	8011d14 <f_open+0x370>
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2200      	movs	r2, #0
 8011d12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011d14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3760      	adds	r7, #96	; 0x60
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}

08011d20 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b08e      	sub	sp, #56	; 0x38
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	60f8      	str	r0, [r7, #12]
 8011d28:	60b9      	str	r1, [r7, #8]
 8011d2a:	607a      	str	r2, [r7, #4]
 8011d2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	2200      	movs	r2, #0
 8011d36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	f107 0214 	add.w	r2, r7, #20
 8011d3e:	4611      	mov	r1, r2
 8011d40:	4618      	mov	r0, r3
 8011d42:	f7ff fdb3 	bl	80118ac <validate>
 8011d46:	4603      	mov	r3, r0
 8011d48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011d4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d107      	bne.n	8011d64 <f_read+0x44>
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	7d5b      	ldrb	r3, [r3, #21]
 8011d58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011d5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d002      	beq.n	8011d6a <f_read+0x4a>
 8011d64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d68:	e115      	b.n	8011f96 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	7d1b      	ldrb	r3, [r3, #20]
 8011d6e:	f003 0301 	and.w	r3, r3, #1
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d101      	bne.n	8011d7a <f_read+0x5a>
 8011d76:	2307      	movs	r3, #7
 8011d78:	e10d      	b.n	8011f96 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	68da      	ldr	r2, [r3, #12]
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	699b      	ldr	r3, [r3, #24]
 8011d82:	1ad3      	subs	r3, r2, r3
 8011d84:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	6a3b      	ldr	r3, [r7, #32]
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	f240 80fe 	bls.w	8011f8c <f_read+0x26c>
 8011d90:	6a3b      	ldr	r3, [r7, #32]
 8011d92:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011d94:	e0fa      	b.n	8011f8c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	699b      	ldr	r3, [r3, #24]
 8011d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f040 80c6 	bne.w	8011f30 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	699b      	ldr	r3, [r3, #24]
 8011da8:	0a5b      	lsrs	r3, r3, #9
 8011daa:	697a      	ldr	r2, [r7, #20]
 8011dac:	8952      	ldrh	r2, [r2, #10]
 8011dae:	3a01      	subs	r2, #1
 8011db0:	4013      	ands	r3, r2
 8011db2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011db4:	69fb      	ldr	r3, [r7, #28]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d12f      	bne.n	8011e1a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	699b      	ldr	r3, [r3, #24]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d103      	bne.n	8011dca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	689b      	ldr	r3, [r3, #8]
 8011dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8011dc8:	e013      	b.n	8011df2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d007      	beq.n	8011de2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	699b      	ldr	r3, [r3, #24]
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	68f8      	ldr	r0, [r7, #12]
 8011dda:	f7fe fef9 	bl	8010bd0 <clmt_clust>
 8011dde:	6338      	str	r0, [r7, #48]	; 0x30
 8011de0:	e007      	b.n	8011df2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011de2:	68fa      	ldr	r2, [r7, #12]
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	69db      	ldr	r3, [r3, #28]
 8011de8:	4619      	mov	r1, r3
 8011dea:	4610      	mov	r0, r2
 8011dec:	f7fe fc5f 	bl	80106ae <get_fat>
 8011df0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df4:	2b01      	cmp	r3, #1
 8011df6:	d804      	bhi.n	8011e02 <f_read+0xe2>
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	2202      	movs	r2, #2
 8011dfc:	755a      	strb	r2, [r3, #21]
 8011dfe:	2302      	movs	r3, #2
 8011e00:	e0c9      	b.n	8011f96 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e08:	d104      	bne.n	8011e14 <f_read+0xf4>
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	755a      	strb	r2, [r3, #21]
 8011e10:	2301      	movs	r3, #1
 8011e12:	e0c0      	b.n	8011f96 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e18:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011e1a:	697a      	ldr	r2, [r7, #20]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	69db      	ldr	r3, [r3, #28]
 8011e20:	4619      	mov	r1, r3
 8011e22:	4610      	mov	r0, r2
 8011e24:	f7fe fc24 	bl	8010670 <clust2sect>
 8011e28:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d104      	bne.n	8011e3a <f_read+0x11a>
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2202      	movs	r2, #2
 8011e34:	755a      	strb	r2, [r3, #21]
 8011e36:	2302      	movs	r3, #2
 8011e38:	e0ad      	b.n	8011f96 <f_read+0x276>
			sect += csect;
 8011e3a:	69ba      	ldr	r2, [r7, #24]
 8011e3c:	69fb      	ldr	r3, [r7, #28]
 8011e3e:	4413      	add	r3, r2
 8011e40:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	0a5b      	lsrs	r3, r3, #9
 8011e46:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d039      	beq.n	8011ec2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011e4e:	69fa      	ldr	r2, [r7, #28]
 8011e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e52:	4413      	add	r3, r2
 8011e54:	697a      	ldr	r2, [r7, #20]
 8011e56:	8952      	ldrh	r2, [r2, #10]
 8011e58:	4293      	cmp	r3, r2
 8011e5a:	d905      	bls.n	8011e68 <f_read+0x148>
					cc = fs->csize - csect;
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	895b      	ldrh	r3, [r3, #10]
 8011e60:	461a      	mov	r2, r3
 8011e62:	69fb      	ldr	r3, [r7, #28]
 8011e64:	1ad3      	subs	r3, r2, r3
 8011e66:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	7858      	ldrb	r0, [r3, #1]
 8011e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e6e:	69ba      	ldr	r2, [r7, #24]
 8011e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e72:	f7fe f853 	bl	800ff1c <disk_read>
 8011e76:	4603      	mov	r3, r0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d004      	beq.n	8011e86 <f_read+0x166>
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	2201      	movs	r2, #1
 8011e80:	755a      	strb	r2, [r3, #21]
 8011e82:	2301      	movs	r3, #1
 8011e84:	e087      	b.n	8011f96 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	7d1b      	ldrb	r3, [r3, #20]
 8011e8a:	b25b      	sxtb	r3, r3
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	da14      	bge.n	8011eba <f_read+0x19a>
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6a1a      	ldr	r2, [r3, #32]
 8011e94:	69bb      	ldr	r3, [r7, #24]
 8011e96:	1ad3      	subs	r3, r2, r3
 8011e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d90d      	bls.n	8011eba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	6a1a      	ldr	r2, [r3, #32]
 8011ea2:	69bb      	ldr	r3, [r7, #24]
 8011ea4:	1ad3      	subs	r3, r2, r3
 8011ea6:	025b      	lsls	r3, r3, #9
 8011ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011eaa:	18d0      	adds	r0, r2, r3
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	3330      	adds	r3, #48	; 0x30
 8011eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	f7fe f911 	bl	80100dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebc:	025b      	lsls	r3, r3, #9
 8011ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011ec0:	e050      	b.n	8011f64 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	6a1b      	ldr	r3, [r3, #32]
 8011ec6:	69ba      	ldr	r2, [r7, #24]
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d02e      	beq.n	8011f2a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	7d1b      	ldrb	r3, [r3, #20]
 8011ed0:	b25b      	sxtb	r3, r3
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	da18      	bge.n	8011f08 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	7858      	ldrb	r0, [r3, #1]
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	6a1a      	ldr	r2, [r3, #32]
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	f7fe f839 	bl	800ff5c <disk_write>
 8011eea:	4603      	mov	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d004      	beq.n	8011efa <f_read+0x1da>
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	2201      	movs	r2, #1
 8011ef4:	755a      	strb	r2, [r3, #21]
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	e04d      	b.n	8011f96 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	7d1b      	ldrb	r3, [r3, #20]
 8011efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f02:	b2da      	uxtb	r2, r3
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	7858      	ldrb	r0, [r3, #1]
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011f12:	2301      	movs	r3, #1
 8011f14:	69ba      	ldr	r2, [r7, #24]
 8011f16:	f7fe f801 	bl	800ff1c <disk_read>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d004      	beq.n	8011f2a <f_read+0x20a>
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	2201      	movs	r2, #1
 8011f24:	755a      	strb	r2, [r3, #21]
 8011f26:	2301      	movs	r3, #1
 8011f28:	e035      	b.n	8011f96 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	69ba      	ldr	r2, [r7, #24]
 8011f2e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	699b      	ldr	r3, [r3, #24]
 8011f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f38:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d901      	bls.n	8011f4a <f_read+0x22a>
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	699b      	ldr	r3, [r3, #24]
 8011f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f58:	4413      	add	r3, r2
 8011f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f60:	f7fe f8bc 	bl	80100dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f68:	4413      	add	r3, r2
 8011f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	699a      	ldr	r2, [r3, #24]
 8011f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f72:	441a      	add	r2, r3
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	619a      	str	r2, [r3, #24]
 8011f78:	683b      	ldr	r3, [r7, #0]
 8011f7a:	681a      	ldr	r2, [r3, #0]
 8011f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7e:	441a      	add	r2, r3
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	601a      	str	r2, [r3, #0]
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f88:	1ad3      	subs	r3, r2, r3
 8011f8a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	f47f af01 	bne.w	8011d96 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011f94:	2300      	movs	r3, #0
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	3738      	adds	r7, #56	; 0x38
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	bd80      	pop	{r7, pc}

08011f9e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011f9e:	b580      	push	{r7, lr}
 8011fa0:	b08c      	sub	sp, #48	; 0x30
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	60f8      	str	r0, [r7, #12]
 8011fa6:	60b9      	str	r1, [r7, #8]
 8011fa8:	607a      	str	r2, [r7, #4]
 8011faa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	f107 0210 	add.w	r2, r7, #16
 8011fbc:	4611      	mov	r1, r2
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7ff fc74 	bl	80118ac <validate>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011fca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d107      	bne.n	8011fe2 <f_write+0x44>
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	7d5b      	ldrb	r3, [r3, #21]
 8011fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011fda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d002      	beq.n	8011fe8 <f_write+0x4a>
 8011fe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fe6:	e14b      	b.n	8012280 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	7d1b      	ldrb	r3, [r3, #20]
 8011fec:	f003 0302 	and.w	r3, r3, #2
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d101      	bne.n	8011ff8 <f_write+0x5a>
 8011ff4:	2307      	movs	r3, #7
 8011ff6:	e143      	b.n	8012280 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	699a      	ldr	r2, [r3, #24]
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	441a      	add	r2, r3
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	699b      	ldr	r3, [r3, #24]
 8012004:	429a      	cmp	r2, r3
 8012006:	f080 812d 	bcs.w	8012264 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	699b      	ldr	r3, [r3, #24]
 801200e:	43db      	mvns	r3, r3
 8012010:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012012:	e127      	b.n	8012264 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	699b      	ldr	r3, [r3, #24]
 8012018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801201c:	2b00      	cmp	r3, #0
 801201e:	f040 80e3 	bne.w	80121e8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	699b      	ldr	r3, [r3, #24]
 8012026:	0a5b      	lsrs	r3, r3, #9
 8012028:	693a      	ldr	r2, [r7, #16]
 801202a:	8952      	ldrh	r2, [r2, #10]
 801202c:	3a01      	subs	r2, #1
 801202e:	4013      	ands	r3, r2
 8012030:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012032:	69bb      	ldr	r3, [r7, #24]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d143      	bne.n	80120c0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	699b      	ldr	r3, [r3, #24]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d10c      	bne.n	801205a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	689b      	ldr	r3, [r3, #8]
 8012044:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012048:	2b00      	cmp	r3, #0
 801204a:	d11a      	bne.n	8012082 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2100      	movs	r1, #0
 8012050:	4618      	mov	r0, r3
 8012052:	f7fe fd25 	bl	8010aa0 <create_chain>
 8012056:	62b8      	str	r0, [r7, #40]	; 0x28
 8012058:	e013      	b.n	8012082 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801205e:	2b00      	cmp	r3, #0
 8012060:	d007      	beq.n	8012072 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	699b      	ldr	r3, [r3, #24]
 8012066:	4619      	mov	r1, r3
 8012068:	68f8      	ldr	r0, [r7, #12]
 801206a:	f7fe fdb1 	bl	8010bd0 <clmt_clust>
 801206e:	62b8      	str	r0, [r7, #40]	; 0x28
 8012070:	e007      	b.n	8012082 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012072:	68fa      	ldr	r2, [r7, #12]
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	69db      	ldr	r3, [r3, #28]
 8012078:	4619      	mov	r1, r3
 801207a:	4610      	mov	r0, r2
 801207c:	f7fe fd10 	bl	8010aa0 <create_chain>
 8012080:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012084:	2b00      	cmp	r3, #0
 8012086:	f000 80f2 	beq.w	801226e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801208c:	2b01      	cmp	r3, #1
 801208e:	d104      	bne.n	801209a <f_write+0xfc>
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2202      	movs	r2, #2
 8012094:	755a      	strb	r2, [r3, #21]
 8012096:	2302      	movs	r3, #2
 8012098:	e0f2      	b.n	8012280 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801209a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120a0:	d104      	bne.n	80120ac <f_write+0x10e>
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	2201      	movs	r2, #1
 80120a6:	755a      	strb	r2, [r3, #21]
 80120a8:	2301      	movs	r3, #1
 80120aa:	e0e9      	b.n	8012280 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120b0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	689b      	ldr	r3, [r3, #8]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d102      	bne.n	80120c0 <f_write+0x122>
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120be:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	7d1b      	ldrb	r3, [r3, #20]
 80120c4:	b25b      	sxtb	r3, r3
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	da18      	bge.n	80120fc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	7858      	ldrb	r0, [r3, #1]
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	6a1a      	ldr	r2, [r3, #32]
 80120d8:	2301      	movs	r3, #1
 80120da:	f7fd ff3f 	bl	800ff5c <disk_write>
 80120de:	4603      	mov	r3, r0
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d004      	beq.n	80120ee <f_write+0x150>
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	2201      	movs	r2, #1
 80120e8:	755a      	strb	r2, [r3, #21]
 80120ea:	2301      	movs	r3, #1
 80120ec:	e0c8      	b.n	8012280 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	7d1b      	ldrb	r3, [r3, #20]
 80120f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120f6:	b2da      	uxtb	r2, r3
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80120fc:	693a      	ldr	r2, [r7, #16]
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	69db      	ldr	r3, [r3, #28]
 8012102:	4619      	mov	r1, r3
 8012104:	4610      	mov	r0, r2
 8012106:	f7fe fab3 	bl	8010670 <clust2sect>
 801210a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d104      	bne.n	801211c <f_write+0x17e>
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	2202      	movs	r2, #2
 8012116:	755a      	strb	r2, [r3, #21]
 8012118:	2302      	movs	r3, #2
 801211a:	e0b1      	b.n	8012280 <f_write+0x2e2>
			sect += csect;
 801211c:	697a      	ldr	r2, [r7, #20]
 801211e:	69bb      	ldr	r3, [r7, #24]
 8012120:	4413      	add	r3, r2
 8012122:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	0a5b      	lsrs	r3, r3, #9
 8012128:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801212a:	6a3b      	ldr	r3, [r7, #32]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d03c      	beq.n	80121aa <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012130:	69ba      	ldr	r2, [r7, #24]
 8012132:	6a3b      	ldr	r3, [r7, #32]
 8012134:	4413      	add	r3, r2
 8012136:	693a      	ldr	r2, [r7, #16]
 8012138:	8952      	ldrh	r2, [r2, #10]
 801213a:	4293      	cmp	r3, r2
 801213c:	d905      	bls.n	801214a <f_write+0x1ac>
					cc = fs->csize - csect;
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	895b      	ldrh	r3, [r3, #10]
 8012142:	461a      	mov	r2, r3
 8012144:	69bb      	ldr	r3, [r7, #24]
 8012146:	1ad3      	subs	r3, r2, r3
 8012148:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	7858      	ldrb	r0, [r3, #1]
 801214e:	6a3b      	ldr	r3, [r7, #32]
 8012150:	697a      	ldr	r2, [r7, #20]
 8012152:	69f9      	ldr	r1, [r7, #28]
 8012154:	f7fd ff02 	bl	800ff5c <disk_write>
 8012158:	4603      	mov	r3, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	d004      	beq.n	8012168 <f_write+0x1ca>
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2201      	movs	r2, #1
 8012162:	755a      	strb	r2, [r3, #21]
 8012164:	2301      	movs	r3, #1
 8012166:	e08b      	b.n	8012280 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	6a1a      	ldr	r2, [r3, #32]
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	1ad3      	subs	r3, r2, r3
 8012170:	6a3a      	ldr	r2, [r7, #32]
 8012172:	429a      	cmp	r2, r3
 8012174:	d915      	bls.n	80121a2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	6a1a      	ldr	r2, [r3, #32]
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	1ad3      	subs	r3, r2, r3
 8012184:	025b      	lsls	r3, r3, #9
 8012186:	69fa      	ldr	r2, [r7, #28]
 8012188:	4413      	add	r3, r2
 801218a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801218e:	4619      	mov	r1, r3
 8012190:	f7fd ffa4 	bl	80100dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	7d1b      	ldrb	r3, [r3, #20]
 8012198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801219c:	b2da      	uxtb	r2, r3
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80121a2:	6a3b      	ldr	r3, [r7, #32]
 80121a4:	025b      	lsls	r3, r3, #9
 80121a6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80121a8:	e03f      	b.n	801222a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	6a1b      	ldr	r3, [r3, #32]
 80121ae:	697a      	ldr	r2, [r7, #20]
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d016      	beq.n	80121e2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	699a      	ldr	r2, [r3, #24]
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80121bc:	429a      	cmp	r2, r3
 80121be:	d210      	bcs.n	80121e2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	7858      	ldrb	r0, [r3, #1]
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80121ca:	2301      	movs	r3, #1
 80121cc:	697a      	ldr	r2, [r7, #20]
 80121ce:	f7fd fea5 	bl	800ff1c <disk_read>
 80121d2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d004      	beq.n	80121e2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	2201      	movs	r2, #1
 80121dc:	755a      	strb	r2, [r3, #21]
 80121de:	2301      	movs	r3, #1
 80121e0:	e04e      	b.n	8012280 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	697a      	ldr	r2, [r7, #20]
 80121e6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	699b      	ldr	r3, [r3, #24]
 80121ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121f0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80121f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80121f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	429a      	cmp	r2, r3
 80121fc:	d901      	bls.n	8012202 <f_write+0x264>
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	699b      	ldr	r3, [r3, #24]
 801220c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012210:	4413      	add	r3, r2
 8012212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012214:	69f9      	ldr	r1, [r7, #28]
 8012216:	4618      	mov	r0, r3
 8012218:	f7fd ff60 	bl	80100dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	7d1b      	ldrb	r3, [r3, #20]
 8012220:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012224:	b2da      	uxtb	r2, r3
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801222a:	69fa      	ldr	r2, [r7, #28]
 801222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222e:	4413      	add	r3, r2
 8012230:	61fb      	str	r3, [r7, #28]
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	699a      	ldr	r2, [r3, #24]
 8012236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012238:	441a      	add	r2, r3
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	619a      	str	r2, [r3, #24]
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	68da      	ldr	r2, [r3, #12]
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	699b      	ldr	r3, [r3, #24]
 8012246:	429a      	cmp	r2, r3
 8012248:	bf38      	it	cc
 801224a:	461a      	movcc	r2, r3
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	60da      	str	r2, [r3, #12]
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	681a      	ldr	r2, [r3, #0]
 8012254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012256:	441a      	add	r2, r3
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	601a      	str	r2, [r3, #0]
 801225c:	687a      	ldr	r2, [r7, #4]
 801225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012260:	1ad3      	subs	r3, r2, r3
 8012262:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2b00      	cmp	r3, #0
 8012268:	f47f aed4 	bne.w	8012014 <f_write+0x76>
 801226c:	e000      	b.n	8012270 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801226e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	7d1b      	ldrb	r3, [r3, #20]
 8012274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012278:	b2da      	uxtb	r2, r3
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801227e:	2300      	movs	r3, #0
}
 8012280:	4618      	mov	r0, r3
 8012282:	3730      	adds	r7, #48	; 0x30
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}

08012288 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b086      	sub	sp, #24
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f107 0208 	add.w	r2, r7, #8
 8012296:	4611      	mov	r1, r2
 8012298:	4618      	mov	r0, r3
 801229a:	f7ff fb07 	bl	80118ac <validate>
 801229e:	4603      	mov	r3, r0
 80122a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80122a2:	7dfb      	ldrb	r3, [r7, #23]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d168      	bne.n	801237a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	7d1b      	ldrb	r3, [r3, #20]
 80122ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d062      	beq.n	801237a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	7d1b      	ldrb	r3, [r3, #20]
 80122b8:	b25b      	sxtb	r3, r3
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	da15      	bge.n	80122ea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	7858      	ldrb	r0, [r3, #1]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	6a1a      	ldr	r2, [r3, #32]
 80122cc:	2301      	movs	r3, #1
 80122ce:	f7fd fe45 	bl	800ff5c <disk_write>
 80122d2:	4603      	mov	r3, r0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d001      	beq.n	80122dc <f_sync+0x54>
 80122d8:	2301      	movs	r3, #1
 80122da:	e04f      	b.n	801237c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	7d1b      	ldrb	r3, [r3, #20]
 80122e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122e4:	b2da      	uxtb	r2, r3
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80122ea:	f7fb fc05 	bl	800daf8 <get_fattime>
 80122ee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80122f0:	68ba      	ldr	r2, [r7, #8]
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122f6:	4619      	mov	r1, r3
 80122f8:	4610      	mov	r0, r2
 80122fa:	f7fe f91d 	bl	8010538 <move_window>
 80122fe:	4603      	mov	r3, r0
 8012300:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012302:	7dfb      	ldrb	r3, [r7, #23]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d138      	bne.n	801237a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801230c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	330b      	adds	r3, #11
 8012312:	781a      	ldrb	r2, [r3, #0]
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	330b      	adds	r3, #11
 8012318:	f042 0220 	orr.w	r2, r2, #32
 801231c:	b2d2      	uxtb	r2, r2
 801231e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6818      	ldr	r0, [r3, #0]
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	689b      	ldr	r3, [r3, #8]
 8012328:	461a      	mov	r2, r3
 801232a:	68f9      	ldr	r1, [r7, #12]
 801232c:	f7fe fe2a 	bl	8010f84 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f103 021c 	add.w	r2, r3, #28
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	68db      	ldr	r3, [r3, #12]
 801233a:	4619      	mov	r1, r3
 801233c:	4610      	mov	r0, r2
 801233e:	f7fd fea1 	bl	8010084 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	3316      	adds	r3, #22
 8012346:	6939      	ldr	r1, [r7, #16]
 8012348:	4618      	mov	r0, r3
 801234a:	f7fd fe9b 	bl	8010084 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	3312      	adds	r3, #18
 8012352:	2100      	movs	r1, #0
 8012354:	4618      	mov	r0, r3
 8012356:	f7fd fe7a 	bl	801004e <st_word>
					fs->wflag = 1;
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	2201      	movs	r2, #1
 801235e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	4618      	mov	r0, r3
 8012364:	f7fe f916 	bl	8010594 <sync_fs>
 8012368:	4603      	mov	r3, r0
 801236a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	7d1b      	ldrb	r3, [r3, #20]
 8012370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012374:	b2da      	uxtb	r2, r3
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801237a:	7dfb      	ldrb	r3, [r7, #23]
}
 801237c:	4618      	mov	r0, r3
 801237e:	3718      	adds	r7, #24
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b084      	sub	sp, #16
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f7ff ff7b 	bl	8012288 <f_sync>
 8012392:	4603      	mov	r3, r0
 8012394:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012396:	7bfb      	ldrb	r3, [r7, #15]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d118      	bne.n	80123ce <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	f107 0208 	add.w	r2, r7, #8
 80123a2:	4611      	mov	r1, r2
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7ff fa81 	bl	80118ac <validate>
 80123aa:	4603      	mov	r3, r0
 80123ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80123ae:	7bfb      	ldrb	r3, [r7, #15]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d10c      	bne.n	80123ce <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	691b      	ldr	r3, [r3, #16]
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7fe f819 	bl	80103f0 <dec_lock>
 80123be:	4603      	mov	r3, r0
 80123c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80123c2:	7bfb      	ldrb	r3, [r7, #15]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d102      	bne.n	80123ce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2200      	movs	r2, #0
 80123cc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80123ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3710      	adds	r7, #16
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}

080123d8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b088      	sub	sp, #32
 80123dc:	af00      	add	r7, sp, #0
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	60b9      	str	r1, [r7, #8]
 80123e2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80123e4:	2300      	movs	r3, #0
 80123e6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80123ec:	e01b      	b.n	8012426 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80123ee:	f107 0310 	add.w	r3, r7, #16
 80123f2:	f107 0114 	add.w	r1, r7, #20
 80123f6:	2201      	movs	r2, #1
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f7ff fc91 	bl	8011d20 <f_read>
		if (rc != 1) break;
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	2b01      	cmp	r3, #1
 8012402:	d116      	bne.n	8012432 <f_gets+0x5a>
		c = s[0];
 8012404:	7d3b      	ldrb	r3, [r7, #20]
 8012406:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8012408:	7dfb      	ldrb	r3, [r7, #23]
 801240a:	2b0d      	cmp	r3, #13
 801240c:	d100      	bne.n	8012410 <f_gets+0x38>
 801240e:	e00a      	b.n	8012426 <f_gets+0x4e>
		*p++ = c;
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	1c5a      	adds	r2, r3, #1
 8012414:	61ba      	str	r2, [r7, #24]
 8012416:	7dfa      	ldrb	r2, [r7, #23]
 8012418:	701a      	strb	r2, [r3, #0]
		n++;
 801241a:	69fb      	ldr	r3, [r7, #28]
 801241c:	3301      	adds	r3, #1
 801241e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8012420:	7dfb      	ldrb	r3, [r7, #23]
 8012422:	2b0a      	cmp	r3, #10
 8012424:	d007      	beq.n	8012436 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	3b01      	subs	r3, #1
 801242a:	69fa      	ldr	r2, [r7, #28]
 801242c:	429a      	cmp	r2, r3
 801242e:	dbde      	blt.n	80123ee <f_gets+0x16>
 8012430:	e002      	b.n	8012438 <f_gets+0x60>
		if (rc != 1) break;
 8012432:	bf00      	nop
 8012434:	e000      	b.n	8012438 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8012436:	bf00      	nop
	}
	*p = 0;
 8012438:	69bb      	ldr	r3, [r7, #24]
 801243a:	2200      	movs	r2, #0
 801243c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801243e:	69fb      	ldr	r3, [r7, #28]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d001      	beq.n	8012448 <f_gets+0x70>
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	e000      	b.n	801244a <f_gets+0x72>
 8012448:	2300      	movs	r3, #0
}
 801244a:	4618      	mov	r0, r3
 801244c:	3720      	adds	r7, #32
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
	...

08012454 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012454:	b480      	push	{r7}
 8012456:	b087      	sub	sp, #28
 8012458:	af00      	add	r7, sp, #0
 801245a:	60f8      	str	r0, [r7, #12]
 801245c:	60b9      	str	r1, [r7, #8]
 801245e:	4613      	mov	r3, r2
 8012460:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012462:	2301      	movs	r3, #1
 8012464:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012466:	2300      	movs	r3, #0
 8012468:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801246a:	4b1f      	ldr	r3, [pc, #124]	; (80124e8 <FATFS_LinkDriverEx+0x94>)
 801246c:	7a5b      	ldrb	r3, [r3, #9]
 801246e:	b2db      	uxtb	r3, r3
 8012470:	2b00      	cmp	r3, #0
 8012472:	d131      	bne.n	80124d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012474:	4b1c      	ldr	r3, [pc, #112]	; (80124e8 <FATFS_LinkDriverEx+0x94>)
 8012476:	7a5b      	ldrb	r3, [r3, #9]
 8012478:	b2db      	uxtb	r3, r3
 801247a:	461a      	mov	r2, r3
 801247c:	4b1a      	ldr	r3, [pc, #104]	; (80124e8 <FATFS_LinkDriverEx+0x94>)
 801247e:	2100      	movs	r1, #0
 8012480:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012482:	4b19      	ldr	r3, [pc, #100]	; (80124e8 <FATFS_LinkDriverEx+0x94>)
 8012484:	7a5b      	ldrb	r3, [r3, #9]
 8012486:	b2db      	uxtb	r3, r3
 8012488:	4a17      	ldr	r2, [pc, #92]	; (80124e8 <FATFS_LinkDriverEx+0x94>)
 801248a:	009b      	lsls	r3, r3, #2
 801248c:	4413      	add	r3, r2
 801248e:	68fa      	ldr	r2, [r7, #12]
 8012490:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012492:	4b15      	ldr	r3, [pc, #84]	; (80124e8 <FATFS_LinkDriverEx+0x94>)
 8012494:	7a5b      	ldrb	r3, [r3, #9]
 8012496:	b2db      	uxtb	r3, r3
 8012498:	461a      	mov	r2, r3
 801249a:	4b13      	ldr	r3, [pc, #76]	; (80124e8 <FATFS_LinkDriverEx+0x94>)
 801249c:	4413      	add	r3, r2
 801249e:	79fa      	ldrb	r2, [r7, #7]
 80124a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80124a2:	4b11      	ldr	r3, [pc, #68]	; (80124e8 <FATFS_LinkDriverEx+0x94>)
 80124a4:	7a5b      	ldrb	r3, [r3, #9]
 80124a6:	b2db      	uxtb	r3, r3
 80124a8:	1c5a      	adds	r2, r3, #1
 80124aa:	b2d1      	uxtb	r1, r2
 80124ac:	4a0e      	ldr	r2, [pc, #56]	; (80124e8 <FATFS_LinkDriverEx+0x94>)
 80124ae:	7251      	strb	r1, [r2, #9]
 80124b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80124b2:	7dbb      	ldrb	r3, [r7, #22]
 80124b4:	3330      	adds	r3, #48	; 0x30
 80124b6:	b2da      	uxtb	r2, r3
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	3301      	adds	r3, #1
 80124c0:	223a      	movs	r2, #58	; 0x3a
 80124c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	3302      	adds	r3, #2
 80124c8:	222f      	movs	r2, #47	; 0x2f
 80124ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	3303      	adds	r3, #3
 80124d0:	2200      	movs	r2, #0
 80124d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80124d4:	2300      	movs	r3, #0
 80124d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80124d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80124da:	4618      	mov	r0, r3
 80124dc:	371c      	adds	r7, #28
 80124de:	46bd      	mov	sp, r7
 80124e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e4:	4770      	bx	lr
 80124e6:	bf00      	nop
 80124e8:	20000678 	.word	0x20000678

080124ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80124f6:	2200      	movs	r2, #0
 80124f8:	6839      	ldr	r1, [r7, #0]
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f7ff ffaa 	bl	8012454 <FATFS_LinkDriverEx>
 8012500:	4603      	mov	r3, r0
}
 8012502:	4618      	mov	r0, r3
 8012504:	3708      	adds	r7, #8
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}
	...

0801250c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012510:	2200      	movs	r2, #0
 8012512:	4912      	ldr	r1, [pc, #72]	; (801255c <MX_USB_DEVICE_Init+0x50>)
 8012514:	4812      	ldr	r0, [pc, #72]	; (8012560 <MX_USB_DEVICE_Init+0x54>)
 8012516:	f7fc fb57 	bl	800ebc8 <USBD_Init>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d001      	beq.n	8012524 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012520:	f7f0 fdac 	bl	800307c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012524:	490f      	ldr	r1, [pc, #60]	; (8012564 <MX_USB_DEVICE_Init+0x58>)
 8012526:	480e      	ldr	r0, [pc, #56]	; (8012560 <MX_USB_DEVICE_Init+0x54>)
 8012528:	f7fc fb7e 	bl	800ec28 <USBD_RegisterClass>
 801252c:	4603      	mov	r3, r0
 801252e:	2b00      	cmp	r3, #0
 8012530:	d001      	beq.n	8012536 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012532:	f7f0 fda3 	bl	800307c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012536:	490c      	ldr	r1, [pc, #48]	; (8012568 <MX_USB_DEVICE_Init+0x5c>)
 8012538:	4809      	ldr	r0, [pc, #36]	; (8012560 <MX_USB_DEVICE_Init+0x54>)
 801253a:	f7fc fa9f 	bl	800ea7c <USBD_CDC_RegisterInterface>
 801253e:	4603      	mov	r3, r0
 8012540:	2b00      	cmp	r3, #0
 8012542:	d001      	beq.n	8012548 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012544:	f7f0 fd9a 	bl	800307c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012548:	4805      	ldr	r0, [pc, #20]	; (8012560 <MX_USB_DEVICE_Init+0x54>)
 801254a:	f7fc fb94 	bl	800ec76 <USBD_Start>
 801254e:	4603      	mov	r3, r0
 8012550:	2b00      	cmp	r3, #0
 8012552:	d001      	beq.n	8012558 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012554:	f7f0 fd92 	bl	800307c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012558:	bf00      	nop
 801255a:	bd80      	pop	{r7, pc}
 801255c:	2000014c 	.word	0x2000014c
 8012560:	20001a98 	.word	0x20001a98
 8012564:	20000034 	.word	0x20000034
 8012568:	20000138 	.word	0x20000138

0801256c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012570:	2200      	movs	r2, #0
 8012572:	4905      	ldr	r1, [pc, #20]	; (8012588 <CDC_Init_FS+0x1c>)
 8012574:	4805      	ldr	r0, [pc, #20]	; (801258c <CDC_Init_FS+0x20>)
 8012576:	f7fc fa96 	bl	800eaa6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801257a:	4905      	ldr	r1, [pc, #20]	; (8012590 <CDC_Init_FS+0x24>)
 801257c:	4803      	ldr	r0, [pc, #12]	; (801258c <CDC_Init_FS+0x20>)
 801257e:	f7fc fab0 	bl	800eae2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012582:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012584:	4618      	mov	r0, r3
 8012586:	bd80      	pop	{r7, pc}
 8012588:	20001d68 	.word	0x20001d68
 801258c:	20001a98 	.word	0x20001a98
 8012590:	20002568 	.word	0x20002568

08012594 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012594:	b480      	push	{r7}
 8012596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012598:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801259a:	4618      	mov	r0, r3
 801259c:	46bd      	mov	sp, r7
 801259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a2:	4770      	bx	lr

080125a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80125a4:	b480      	push	{r7}
 80125a6:	b083      	sub	sp, #12
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	4603      	mov	r3, r0
 80125ac:	6039      	str	r1, [r7, #0]
 80125ae:	71fb      	strb	r3, [r7, #7]
 80125b0:	4613      	mov	r3, r2
 80125b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80125b4:	79fb      	ldrb	r3, [r7, #7]
 80125b6:	2b23      	cmp	r3, #35	; 0x23
 80125b8:	d84a      	bhi.n	8012650 <CDC_Control_FS+0xac>
 80125ba:	a201      	add	r2, pc, #4	; (adr r2, 80125c0 <CDC_Control_FS+0x1c>)
 80125bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125c0:	08012651 	.word	0x08012651
 80125c4:	08012651 	.word	0x08012651
 80125c8:	08012651 	.word	0x08012651
 80125cc:	08012651 	.word	0x08012651
 80125d0:	08012651 	.word	0x08012651
 80125d4:	08012651 	.word	0x08012651
 80125d8:	08012651 	.word	0x08012651
 80125dc:	08012651 	.word	0x08012651
 80125e0:	08012651 	.word	0x08012651
 80125e4:	08012651 	.word	0x08012651
 80125e8:	08012651 	.word	0x08012651
 80125ec:	08012651 	.word	0x08012651
 80125f0:	08012651 	.word	0x08012651
 80125f4:	08012651 	.word	0x08012651
 80125f8:	08012651 	.word	0x08012651
 80125fc:	08012651 	.word	0x08012651
 8012600:	08012651 	.word	0x08012651
 8012604:	08012651 	.word	0x08012651
 8012608:	08012651 	.word	0x08012651
 801260c:	08012651 	.word	0x08012651
 8012610:	08012651 	.word	0x08012651
 8012614:	08012651 	.word	0x08012651
 8012618:	08012651 	.word	0x08012651
 801261c:	08012651 	.word	0x08012651
 8012620:	08012651 	.word	0x08012651
 8012624:	08012651 	.word	0x08012651
 8012628:	08012651 	.word	0x08012651
 801262c:	08012651 	.word	0x08012651
 8012630:	08012651 	.word	0x08012651
 8012634:	08012651 	.word	0x08012651
 8012638:	08012651 	.word	0x08012651
 801263c:	08012651 	.word	0x08012651
 8012640:	08012651 	.word	0x08012651
 8012644:	08012651 	.word	0x08012651
 8012648:	08012651 	.word	0x08012651
 801264c:	08012651 	.word	0x08012651
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012650:	bf00      	nop
  }

  return (USBD_OK);
 8012652:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012654:	4618      	mov	r0, r3
 8012656:	370c      	adds	r7, #12
 8012658:	46bd      	mov	sp, r7
 801265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265e:	4770      	bx	lr

08012660 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801266a:	6879      	ldr	r1, [r7, #4]
 801266c:	4805      	ldr	r0, [pc, #20]	; (8012684 <CDC_Receive_FS+0x24>)
 801266e:	f7fc fa38 	bl	800eae2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012672:	4804      	ldr	r0, [pc, #16]	; (8012684 <CDC_Receive_FS+0x24>)
 8012674:	f7fc fa7e 	bl	800eb74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012678:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801267a:	4618      	mov	r0, r3
 801267c:	3708      	adds	r7, #8
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
 8012682:	bf00      	nop
 8012684:	20001a98 	.word	0x20001a98

08012688 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b084      	sub	sp, #16
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
 8012690:	460b      	mov	r3, r1
 8012692:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012694:	2300      	movs	r3, #0
 8012696:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012698:	4b0d      	ldr	r3, [pc, #52]	; (80126d0 <CDC_Transmit_FS+0x48>)
 801269a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801269e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d001      	beq.n	80126ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80126aa:	2301      	movs	r3, #1
 80126ac:	e00b      	b.n	80126c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80126ae:	887b      	ldrh	r3, [r7, #2]
 80126b0:	461a      	mov	r2, r3
 80126b2:	6879      	ldr	r1, [r7, #4]
 80126b4:	4806      	ldr	r0, [pc, #24]	; (80126d0 <CDC_Transmit_FS+0x48>)
 80126b6:	f7fc f9f6 	bl	800eaa6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80126ba:	4805      	ldr	r0, [pc, #20]	; (80126d0 <CDC_Transmit_FS+0x48>)
 80126bc:	f7fc fa2a 	bl	800eb14 <USBD_CDC_TransmitPacket>
 80126c0:	4603      	mov	r3, r0
 80126c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80126c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3710      	adds	r7, #16
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	bf00      	nop
 80126d0:	20001a98 	.word	0x20001a98

080126d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80126d4:	b480      	push	{r7}
 80126d6:	b087      	sub	sp, #28
 80126d8:	af00      	add	r7, sp, #0
 80126da:	60f8      	str	r0, [r7, #12]
 80126dc:	60b9      	str	r1, [r7, #8]
 80126de:	4613      	mov	r3, r2
 80126e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80126e2:	2300      	movs	r3, #0
 80126e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80126e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	371c      	adds	r7, #28
 80126ee:	46bd      	mov	sp, r7
 80126f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f4:	4770      	bx	lr
	...

080126f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80126f8:	b480      	push	{r7}
 80126fa:	b083      	sub	sp, #12
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	4603      	mov	r3, r0
 8012700:	6039      	str	r1, [r7, #0]
 8012702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	2212      	movs	r2, #18
 8012708:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801270a:	4b03      	ldr	r3, [pc, #12]	; (8012718 <USBD_FS_DeviceDescriptor+0x20>)
}
 801270c:	4618      	mov	r0, r3
 801270e:	370c      	adds	r7, #12
 8012710:	46bd      	mov	sp, r7
 8012712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012716:	4770      	bx	lr
 8012718:	20000168 	.word	0x20000168

0801271c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801271c:	b480      	push	{r7}
 801271e:	b083      	sub	sp, #12
 8012720:	af00      	add	r7, sp, #0
 8012722:	4603      	mov	r3, r0
 8012724:	6039      	str	r1, [r7, #0]
 8012726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	2204      	movs	r2, #4
 801272c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801272e:	4b03      	ldr	r3, [pc, #12]	; (801273c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012730:	4618      	mov	r0, r3
 8012732:	370c      	adds	r7, #12
 8012734:	46bd      	mov	sp, r7
 8012736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273a:	4770      	bx	lr
 801273c:	2000017c 	.word	0x2000017c

08012740 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b082      	sub	sp, #8
 8012744:	af00      	add	r7, sp, #0
 8012746:	4603      	mov	r3, r0
 8012748:	6039      	str	r1, [r7, #0]
 801274a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801274c:	79fb      	ldrb	r3, [r7, #7]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d105      	bne.n	801275e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012752:	683a      	ldr	r2, [r7, #0]
 8012754:	4907      	ldr	r1, [pc, #28]	; (8012774 <USBD_FS_ProductStrDescriptor+0x34>)
 8012756:	4808      	ldr	r0, [pc, #32]	; (8012778 <USBD_FS_ProductStrDescriptor+0x38>)
 8012758:	f7fd fabf 	bl	800fcda <USBD_GetString>
 801275c:	e004      	b.n	8012768 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801275e:	683a      	ldr	r2, [r7, #0]
 8012760:	4904      	ldr	r1, [pc, #16]	; (8012774 <USBD_FS_ProductStrDescriptor+0x34>)
 8012762:	4805      	ldr	r0, [pc, #20]	; (8012778 <USBD_FS_ProductStrDescriptor+0x38>)
 8012764:	f7fd fab9 	bl	800fcda <USBD_GetString>
  }
  return USBD_StrDesc;
 8012768:	4b02      	ldr	r3, [pc, #8]	; (8012774 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801276a:	4618      	mov	r0, r3
 801276c:	3708      	adds	r7, #8
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}
 8012772:	bf00      	nop
 8012774:	20002d68 	.word	0x20002d68
 8012778:	08018ac4 	.word	0x08018ac4

0801277c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801277c:	b580      	push	{r7, lr}
 801277e:	b082      	sub	sp, #8
 8012780:	af00      	add	r7, sp, #0
 8012782:	4603      	mov	r3, r0
 8012784:	6039      	str	r1, [r7, #0]
 8012786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012788:	683a      	ldr	r2, [r7, #0]
 801278a:	4904      	ldr	r1, [pc, #16]	; (801279c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801278c:	4804      	ldr	r0, [pc, #16]	; (80127a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801278e:	f7fd faa4 	bl	800fcda <USBD_GetString>
  return USBD_StrDesc;
 8012792:	4b02      	ldr	r3, [pc, #8]	; (801279c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012794:	4618      	mov	r0, r3
 8012796:	3708      	adds	r7, #8
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}
 801279c:	20002d68 	.word	0x20002d68
 80127a0:	08018adc 	.word	0x08018adc

080127a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b082      	sub	sp, #8
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	4603      	mov	r3, r0
 80127ac:	6039      	str	r1, [r7, #0]
 80127ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	221a      	movs	r2, #26
 80127b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80127b6:	f000 f843 	bl	8012840 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80127ba:	4b02      	ldr	r3, [pc, #8]	; (80127c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80127bc:	4618      	mov	r0, r3
 80127be:	3708      	adds	r7, #8
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	20000180 	.word	0x20000180

080127c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b082      	sub	sp, #8
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	4603      	mov	r3, r0
 80127d0:	6039      	str	r1, [r7, #0]
 80127d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80127d4:	79fb      	ldrb	r3, [r7, #7]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d105      	bne.n	80127e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80127da:	683a      	ldr	r2, [r7, #0]
 80127dc:	4907      	ldr	r1, [pc, #28]	; (80127fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80127de:	4808      	ldr	r0, [pc, #32]	; (8012800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80127e0:	f7fd fa7b 	bl	800fcda <USBD_GetString>
 80127e4:	e004      	b.n	80127f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80127e6:	683a      	ldr	r2, [r7, #0]
 80127e8:	4904      	ldr	r1, [pc, #16]	; (80127fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80127ea:	4805      	ldr	r0, [pc, #20]	; (8012800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80127ec:	f7fd fa75 	bl	800fcda <USBD_GetString>
  }
  return USBD_StrDesc;
 80127f0:	4b02      	ldr	r3, [pc, #8]	; (80127fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3708      	adds	r7, #8
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop
 80127fc:	20002d68 	.word	0x20002d68
 8012800:	08018af0 	.word	0x08018af0

08012804 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b082      	sub	sp, #8
 8012808:	af00      	add	r7, sp, #0
 801280a:	4603      	mov	r3, r0
 801280c:	6039      	str	r1, [r7, #0]
 801280e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012810:	79fb      	ldrb	r3, [r7, #7]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d105      	bne.n	8012822 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012816:	683a      	ldr	r2, [r7, #0]
 8012818:	4907      	ldr	r1, [pc, #28]	; (8012838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801281a:	4808      	ldr	r0, [pc, #32]	; (801283c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801281c:	f7fd fa5d 	bl	800fcda <USBD_GetString>
 8012820:	e004      	b.n	801282c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012822:	683a      	ldr	r2, [r7, #0]
 8012824:	4904      	ldr	r1, [pc, #16]	; (8012838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012826:	4805      	ldr	r0, [pc, #20]	; (801283c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012828:	f7fd fa57 	bl	800fcda <USBD_GetString>
  }
  return USBD_StrDesc;
 801282c:	4b02      	ldr	r3, [pc, #8]	; (8012838 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801282e:	4618      	mov	r0, r3
 8012830:	3708      	adds	r7, #8
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}
 8012836:	bf00      	nop
 8012838:	20002d68 	.word	0x20002d68
 801283c:	08018afc 	.word	0x08018afc

08012840 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b084      	sub	sp, #16
 8012844:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012846:	4b0f      	ldr	r3, [pc, #60]	; (8012884 <Get_SerialNum+0x44>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801284c:	4b0e      	ldr	r3, [pc, #56]	; (8012888 <Get_SerialNum+0x48>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012852:	4b0e      	ldr	r3, [pc, #56]	; (801288c <Get_SerialNum+0x4c>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012858:	68fa      	ldr	r2, [r7, #12]
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	4413      	add	r3, r2
 801285e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d009      	beq.n	801287a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012866:	2208      	movs	r2, #8
 8012868:	4909      	ldr	r1, [pc, #36]	; (8012890 <Get_SerialNum+0x50>)
 801286a:	68f8      	ldr	r0, [r7, #12]
 801286c:	f000 f814 	bl	8012898 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012870:	2204      	movs	r2, #4
 8012872:	4908      	ldr	r1, [pc, #32]	; (8012894 <Get_SerialNum+0x54>)
 8012874:	68b8      	ldr	r0, [r7, #8]
 8012876:	f000 f80f 	bl	8012898 <IntToUnicode>
  }
}
 801287a:	bf00      	nop
 801287c:	3710      	adds	r7, #16
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop
 8012884:	1fff7a10 	.word	0x1fff7a10
 8012888:	1fff7a14 	.word	0x1fff7a14
 801288c:	1fff7a18 	.word	0x1fff7a18
 8012890:	20000182 	.word	0x20000182
 8012894:	20000192 	.word	0x20000192

08012898 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012898:	b480      	push	{r7}
 801289a:	b087      	sub	sp, #28
 801289c:	af00      	add	r7, sp, #0
 801289e:	60f8      	str	r0, [r7, #12]
 80128a0:	60b9      	str	r1, [r7, #8]
 80128a2:	4613      	mov	r3, r2
 80128a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80128a6:	2300      	movs	r3, #0
 80128a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80128aa:	2300      	movs	r3, #0
 80128ac:	75fb      	strb	r3, [r7, #23]
 80128ae:	e027      	b.n	8012900 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	0f1b      	lsrs	r3, r3, #28
 80128b4:	2b09      	cmp	r3, #9
 80128b6:	d80b      	bhi.n	80128d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	0f1b      	lsrs	r3, r3, #28
 80128bc:	b2da      	uxtb	r2, r3
 80128be:	7dfb      	ldrb	r3, [r7, #23]
 80128c0:	005b      	lsls	r3, r3, #1
 80128c2:	4619      	mov	r1, r3
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	440b      	add	r3, r1
 80128c8:	3230      	adds	r2, #48	; 0x30
 80128ca:	b2d2      	uxtb	r2, r2
 80128cc:	701a      	strb	r2, [r3, #0]
 80128ce:	e00a      	b.n	80128e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	0f1b      	lsrs	r3, r3, #28
 80128d4:	b2da      	uxtb	r2, r3
 80128d6:	7dfb      	ldrb	r3, [r7, #23]
 80128d8:	005b      	lsls	r3, r3, #1
 80128da:	4619      	mov	r1, r3
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	440b      	add	r3, r1
 80128e0:	3237      	adds	r2, #55	; 0x37
 80128e2:	b2d2      	uxtb	r2, r2
 80128e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	011b      	lsls	r3, r3, #4
 80128ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80128ec:	7dfb      	ldrb	r3, [r7, #23]
 80128ee:	005b      	lsls	r3, r3, #1
 80128f0:	3301      	adds	r3, #1
 80128f2:	68ba      	ldr	r2, [r7, #8]
 80128f4:	4413      	add	r3, r2
 80128f6:	2200      	movs	r2, #0
 80128f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80128fa:	7dfb      	ldrb	r3, [r7, #23]
 80128fc:	3301      	adds	r3, #1
 80128fe:	75fb      	strb	r3, [r7, #23]
 8012900:	7dfa      	ldrb	r2, [r7, #23]
 8012902:	79fb      	ldrb	r3, [r7, #7]
 8012904:	429a      	cmp	r2, r3
 8012906:	d3d3      	bcc.n	80128b0 <IntToUnicode+0x18>
  }
}
 8012908:	bf00      	nop
 801290a:	bf00      	nop
 801290c:	371c      	adds	r7, #28
 801290e:	46bd      	mov	sp, r7
 8012910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012914:	4770      	bx	lr
	...

08012918 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b08a      	sub	sp, #40	; 0x28
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012920:	f107 0314 	add.w	r3, r7, #20
 8012924:	2200      	movs	r2, #0
 8012926:	601a      	str	r2, [r3, #0]
 8012928:	605a      	str	r2, [r3, #4]
 801292a:	609a      	str	r2, [r3, #8]
 801292c:	60da      	str	r2, [r3, #12]
 801292e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012938:	d13a      	bne.n	80129b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801293a:	2300      	movs	r3, #0
 801293c:	613b      	str	r3, [r7, #16]
 801293e:	4b1e      	ldr	r3, [pc, #120]	; (80129b8 <HAL_PCD_MspInit+0xa0>)
 8012940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012942:	4a1d      	ldr	r2, [pc, #116]	; (80129b8 <HAL_PCD_MspInit+0xa0>)
 8012944:	f043 0301 	orr.w	r3, r3, #1
 8012948:	6313      	str	r3, [r2, #48]	; 0x30
 801294a:	4b1b      	ldr	r3, [pc, #108]	; (80129b8 <HAL_PCD_MspInit+0xa0>)
 801294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801294e:	f003 0301 	and.w	r3, r3, #1
 8012952:	613b      	str	r3, [r7, #16]
 8012954:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012956:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801295a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801295c:	2302      	movs	r3, #2
 801295e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012960:	2300      	movs	r3, #0
 8012962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012964:	2303      	movs	r3, #3
 8012966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012968:	230a      	movs	r3, #10
 801296a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801296c:	f107 0314 	add.w	r3, r7, #20
 8012970:	4619      	mov	r1, r3
 8012972:	4812      	ldr	r0, [pc, #72]	; (80129bc <HAL_PCD_MspInit+0xa4>)
 8012974:	f7f4 fd12 	bl	800739c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012978:	4b0f      	ldr	r3, [pc, #60]	; (80129b8 <HAL_PCD_MspInit+0xa0>)
 801297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801297c:	4a0e      	ldr	r2, [pc, #56]	; (80129b8 <HAL_PCD_MspInit+0xa0>)
 801297e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012982:	6353      	str	r3, [r2, #52]	; 0x34
 8012984:	2300      	movs	r3, #0
 8012986:	60fb      	str	r3, [r7, #12]
 8012988:	4b0b      	ldr	r3, [pc, #44]	; (80129b8 <HAL_PCD_MspInit+0xa0>)
 801298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801298c:	4a0a      	ldr	r2, [pc, #40]	; (80129b8 <HAL_PCD_MspInit+0xa0>)
 801298e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012992:	6453      	str	r3, [r2, #68]	; 0x44
 8012994:	4b08      	ldr	r3, [pc, #32]	; (80129b8 <HAL_PCD_MspInit+0xa0>)
 8012996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801299c:	60fb      	str	r3, [r7, #12]
 801299e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80129a0:	2200      	movs	r2, #0
 80129a2:	2100      	movs	r1, #0
 80129a4:	2043      	movs	r0, #67	; 0x43
 80129a6:	f7f4 f8c0 	bl	8006b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80129aa:	2043      	movs	r0, #67	; 0x43
 80129ac:	f7f4 f8d9 	bl	8006b62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80129b0:	bf00      	nop
 80129b2:	3728      	adds	r7, #40	; 0x28
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}
 80129b8:	40023800 	.word	0x40023800
 80129bc:	40020000 	.word	0x40020000

080129c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b082      	sub	sp, #8
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80129d4:	4619      	mov	r1, r3
 80129d6:	4610      	mov	r0, r2
 80129d8:	f7fc f998 	bl	800ed0c <USBD_LL_SetupStage>
}
 80129dc:	bf00      	nop
 80129de:	3708      	adds	r7, #8
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}

080129e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b082      	sub	sp, #8
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
 80129ec:	460b      	mov	r3, r1
 80129ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80129f6:	78fa      	ldrb	r2, [r7, #3]
 80129f8:	6879      	ldr	r1, [r7, #4]
 80129fa:	4613      	mov	r3, r2
 80129fc:	00db      	lsls	r3, r3, #3
 80129fe:	1a9b      	subs	r3, r3, r2
 8012a00:	009b      	lsls	r3, r3, #2
 8012a02:	440b      	add	r3, r1
 8012a04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012a08:	681a      	ldr	r2, [r3, #0]
 8012a0a:	78fb      	ldrb	r3, [r7, #3]
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	f7fc f9d2 	bl	800edb6 <USBD_LL_DataOutStage>
}
 8012a12:	bf00      	nop
 8012a14:	3708      	adds	r7, #8
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}

08012a1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a1a:	b580      	push	{r7, lr}
 8012a1c:	b082      	sub	sp, #8
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
 8012a22:	460b      	mov	r3, r1
 8012a24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012a2c:	78fa      	ldrb	r2, [r7, #3]
 8012a2e:	6879      	ldr	r1, [r7, #4]
 8012a30:	4613      	mov	r3, r2
 8012a32:	00db      	lsls	r3, r3, #3
 8012a34:	1a9b      	subs	r3, r3, r2
 8012a36:	009b      	lsls	r3, r3, #2
 8012a38:	440b      	add	r3, r1
 8012a3a:	3348      	adds	r3, #72	; 0x48
 8012a3c:	681a      	ldr	r2, [r3, #0]
 8012a3e:	78fb      	ldrb	r3, [r7, #3]
 8012a40:	4619      	mov	r1, r3
 8012a42:	f7fc fa1b 	bl	800ee7c <USBD_LL_DataInStage>
}
 8012a46:	bf00      	nop
 8012a48:	3708      	adds	r7, #8
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}

08012a4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a4e:	b580      	push	{r7, lr}
 8012a50:	b082      	sub	sp, #8
 8012a52:	af00      	add	r7, sp, #0
 8012a54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f7fc fb2f 	bl	800f0c0 <USBD_LL_SOF>
}
 8012a62:	bf00      	nop
 8012a64:	3708      	adds	r7, #8
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}

08012a6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a6a:	b580      	push	{r7, lr}
 8012a6c:	b084      	sub	sp, #16
 8012a6e:	af00      	add	r7, sp, #0
 8012a70:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012a72:	2301      	movs	r3, #1
 8012a74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	68db      	ldr	r3, [r3, #12]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d102      	bne.n	8012a84 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	73fb      	strb	r3, [r7, #15]
 8012a82:	e008      	b.n	8012a96 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	68db      	ldr	r3, [r3, #12]
 8012a88:	2b02      	cmp	r3, #2
 8012a8a:	d102      	bne.n	8012a92 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	73fb      	strb	r3, [r7, #15]
 8012a90:	e001      	b.n	8012a96 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012a92:	f7f0 faf3 	bl	800307c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012a9c:	7bfa      	ldrb	r2, [r7, #15]
 8012a9e:	4611      	mov	r1, r2
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7fc facf 	bl	800f044 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012aac:	4618      	mov	r0, r3
 8012aae:	f7fc fa7b 	bl	800efa8 <USBD_LL_Reset>
}
 8012ab2:	bf00      	nop
 8012ab4:	3710      	adds	r7, #16
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}
	...

08012abc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b082      	sub	sp, #8
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7fc faca 	bl	800f064 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	6812      	ldr	r2, [r2, #0]
 8012ade:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012ae2:	f043 0301 	orr.w	r3, r3, #1
 8012ae6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	6a1b      	ldr	r3, [r3, #32]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d005      	beq.n	8012afc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012af0:	4b04      	ldr	r3, [pc, #16]	; (8012b04 <HAL_PCD_SuspendCallback+0x48>)
 8012af2:	691b      	ldr	r3, [r3, #16]
 8012af4:	4a03      	ldr	r2, [pc, #12]	; (8012b04 <HAL_PCD_SuspendCallback+0x48>)
 8012af6:	f043 0306 	orr.w	r3, r3, #6
 8012afa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012afc:	bf00      	nop
 8012afe:	3708      	adds	r7, #8
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	e000ed00 	.word	0xe000ed00

08012b08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b082      	sub	sp, #8
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7fc faba 	bl	800f090 <USBD_LL_Resume>
}
 8012b1c:	bf00      	nop
 8012b1e:	3708      	adds	r7, #8
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}

08012b24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b082      	sub	sp, #8
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	460b      	mov	r3, r1
 8012b2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012b36:	78fa      	ldrb	r2, [r7, #3]
 8012b38:	4611      	mov	r1, r2
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7fc fb08 	bl	800f150 <USBD_LL_IsoOUTIncomplete>
}
 8012b40:	bf00      	nop
 8012b42:	3708      	adds	r7, #8
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}

08012b48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b082      	sub	sp, #8
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	460b      	mov	r3, r1
 8012b52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012b5a:	78fa      	ldrb	r2, [r7, #3]
 8012b5c:	4611      	mov	r1, r2
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7fc fad0 	bl	800f104 <USBD_LL_IsoINIncomplete>
}
 8012b64:	bf00      	nop
 8012b66:	3708      	adds	r7, #8
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd80      	pop	{r7, pc}

08012b6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b082      	sub	sp, #8
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7fc fb0e 	bl	800f19c <USBD_LL_DevConnected>
}
 8012b80:	bf00      	nop
 8012b82:	3708      	adds	r7, #8
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}

08012b88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b082      	sub	sp, #8
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7fc fb0b 	bl	800f1b2 <USBD_LL_DevDisconnected>
}
 8012b9c:	bf00      	nop
 8012b9e:	3708      	adds	r7, #8
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d13c      	bne.n	8012c2e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012bb4:	4a20      	ldr	r2, [pc, #128]	; (8012c38 <USBD_LL_Init+0x94>)
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	4a1e      	ldr	r2, [pc, #120]	; (8012c38 <USBD_LL_Init+0x94>)
 8012bc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012bc4:	4b1c      	ldr	r3, [pc, #112]	; (8012c38 <USBD_LL_Init+0x94>)
 8012bc6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012bca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8012bcc:	4b1a      	ldr	r3, [pc, #104]	; (8012c38 <USBD_LL_Init+0x94>)
 8012bce:	2204      	movs	r2, #4
 8012bd0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012bd2:	4b19      	ldr	r3, [pc, #100]	; (8012c38 <USBD_LL_Init+0x94>)
 8012bd4:	2202      	movs	r2, #2
 8012bd6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012bd8:	4b17      	ldr	r3, [pc, #92]	; (8012c38 <USBD_LL_Init+0x94>)
 8012bda:	2200      	movs	r2, #0
 8012bdc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012bde:	4b16      	ldr	r3, [pc, #88]	; (8012c38 <USBD_LL_Init+0x94>)
 8012be0:	2202      	movs	r2, #2
 8012be2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012be4:	4b14      	ldr	r3, [pc, #80]	; (8012c38 <USBD_LL_Init+0x94>)
 8012be6:	2200      	movs	r2, #0
 8012be8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012bea:	4b13      	ldr	r3, [pc, #76]	; (8012c38 <USBD_LL_Init+0x94>)
 8012bec:	2200      	movs	r2, #0
 8012bee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012bf0:	4b11      	ldr	r3, [pc, #68]	; (8012c38 <USBD_LL_Init+0x94>)
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012bf6:	4b10      	ldr	r3, [pc, #64]	; (8012c38 <USBD_LL_Init+0x94>)
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012bfc:	4b0e      	ldr	r3, [pc, #56]	; (8012c38 <USBD_LL_Init+0x94>)
 8012bfe:	2200      	movs	r2, #0
 8012c00:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012c02:	480d      	ldr	r0, [pc, #52]	; (8012c38 <USBD_LL_Init+0x94>)
 8012c04:	f7f5 fd15 	bl	8008632 <HAL_PCD_Init>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d001      	beq.n	8012c12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012c0e:	f7f0 fa35 	bl	800307c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012c12:	2180      	movs	r1, #128	; 0x80
 8012c14:	4808      	ldr	r0, [pc, #32]	; (8012c38 <USBD_LL_Init+0x94>)
 8012c16:	f7f6 fe72 	bl	80098fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012c1a:	2240      	movs	r2, #64	; 0x40
 8012c1c:	2100      	movs	r1, #0
 8012c1e:	4806      	ldr	r0, [pc, #24]	; (8012c38 <USBD_LL_Init+0x94>)
 8012c20:	f7f6 fe26 	bl	8009870 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012c24:	2280      	movs	r2, #128	; 0x80
 8012c26:	2101      	movs	r1, #1
 8012c28:	4803      	ldr	r0, [pc, #12]	; (8012c38 <USBD_LL_Init+0x94>)
 8012c2a:	f7f6 fe21 	bl	8009870 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012c2e:	2300      	movs	r3, #0
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	20002f68 	.word	0x20002f68

08012c3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b084      	sub	sp, #16
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c44:	2300      	movs	r3, #0
 8012c46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012c52:	4618      	mov	r0, r3
 8012c54:	f7f5 fe0a 	bl	800886c <HAL_PCD_Start>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c5c:	7bfb      	ldrb	r3, [r7, #15]
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f000 f942 	bl	8012ee8 <USBD_Get_USB_Status>
 8012c64:	4603      	mov	r3, r0
 8012c66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c68:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	3710      	adds	r7, #16
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd80      	pop	{r7, pc}

08012c72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012c72:	b580      	push	{r7, lr}
 8012c74:	b084      	sub	sp, #16
 8012c76:	af00      	add	r7, sp, #0
 8012c78:	6078      	str	r0, [r7, #4]
 8012c7a:	4608      	mov	r0, r1
 8012c7c:	4611      	mov	r1, r2
 8012c7e:	461a      	mov	r2, r3
 8012c80:	4603      	mov	r3, r0
 8012c82:	70fb      	strb	r3, [r7, #3]
 8012c84:	460b      	mov	r3, r1
 8012c86:	70bb      	strb	r3, [r7, #2]
 8012c88:	4613      	mov	r3, r2
 8012c8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c90:	2300      	movs	r3, #0
 8012c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012c9a:	78bb      	ldrb	r3, [r7, #2]
 8012c9c:	883a      	ldrh	r2, [r7, #0]
 8012c9e:	78f9      	ldrb	r1, [r7, #3]
 8012ca0:	f7f6 f9ee 	bl	8009080 <HAL_PCD_EP_Open>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ca8:	7bfb      	ldrb	r3, [r7, #15]
 8012caa:	4618      	mov	r0, r3
 8012cac:	f000 f91c 	bl	8012ee8 <USBD_Get_USB_Status>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012cb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3710      	adds	r7, #16
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}

08012cbe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012cbe:	b580      	push	{r7, lr}
 8012cc0:	b084      	sub	sp, #16
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
 8012cc6:	460b      	mov	r3, r1
 8012cc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012cce:	2300      	movs	r3, #0
 8012cd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012cd8:	78fa      	ldrb	r2, [r7, #3]
 8012cda:	4611      	mov	r1, r2
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f7f6 fa37 	bl	8009150 <HAL_PCD_EP_Close>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ce6:	7bfb      	ldrb	r3, [r7, #15]
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f000 f8fd 	bl	8012ee8 <USBD_Get_USB_Status>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012cf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3710      	adds	r7, #16
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}

08012cfc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b084      	sub	sp, #16
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	460b      	mov	r3, r1
 8012d06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012d16:	78fa      	ldrb	r2, [r7, #3]
 8012d18:	4611      	mov	r1, r2
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f7f6 fb0f 	bl	800933e <HAL_PCD_EP_SetStall>
 8012d20:	4603      	mov	r3, r0
 8012d22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d24:	7bfb      	ldrb	r3, [r7, #15]
 8012d26:	4618      	mov	r0, r3
 8012d28:	f000 f8de 	bl	8012ee8 <USBD_Get_USB_Status>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	3710      	adds	r7, #16
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}

08012d3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d3a:	b580      	push	{r7, lr}
 8012d3c:	b084      	sub	sp, #16
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	6078      	str	r0, [r7, #4]
 8012d42:	460b      	mov	r3, r1
 8012d44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d46:	2300      	movs	r3, #0
 8012d48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012d54:	78fa      	ldrb	r2, [r7, #3]
 8012d56:	4611      	mov	r1, r2
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7f6 fb54 	bl	8009406 <HAL_PCD_EP_ClrStall>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d62:	7bfb      	ldrb	r3, [r7, #15]
 8012d64:	4618      	mov	r0, r3
 8012d66:	f000 f8bf 	bl	8012ee8 <USBD_Get_USB_Status>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3710      	adds	r7, #16
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}

08012d78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b085      	sub	sp, #20
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
 8012d80:	460b      	mov	r3, r1
 8012d82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012d8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	da0b      	bge.n	8012dac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012d94:	78fb      	ldrb	r3, [r7, #3]
 8012d96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012d9a:	68f9      	ldr	r1, [r7, #12]
 8012d9c:	4613      	mov	r3, r2
 8012d9e:	00db      	lsls	r3, r3, #3
 8012da0:	1a9b      	subs	r3, r3, r2
 8012da2:	009b      	lsls	r3, r3, #2
 8012da4:	440b      	add	r3, r1
 8012da6:	333e      	adds	r3, #62	; 0x3e
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	e00b      	b.n	8012dc4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012dac:	78fb      	ldrb	r3, [r7, #3]
 8012dae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012db2:	68f9      	ldr	r1, [r7, #12]
 8012db4:	4613      	mov	r3, r2
 8012db6:	00db      	lsls	r3, r3, #3
 8012db8:	1a9b      	subs	r3, r3, r2
 8012dba:	009b      	lsls	r3, r3, #2
 8012dbc:	440b      	add	r3, r1
 8012dbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012dc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3714      	adds	r7, #20
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dce:	4770      	bx	lr

08012dd0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b084      	sub	sp, #16
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	460b      	mov	r3, r1
 8012dda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012de0:	2300      	movs	r3, #0
 8012de2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012dea:	78fa      	ldrb	r2, [r7, #3]
 8012dec:	4611      	mov	r1, r2
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7f6 f921 	bl	8009036 <HAL_PCD_SetAddress>
 8012df4:	4603      	mov	r3, r0
 8012df6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012df8:	7bfb      	ldrb	r3, [r7, #15]
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f000 f874 	bl	8012ee8 <USBD_Get_USB_Status>
 8012e00:	4603      	mov	r3, r0
 8012e02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e04:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3710      	adds	r7, #16
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}

08012e0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012e0e:	b580      	push	{r7, lr}
 8012e10:	b086      	sub	sp, #24
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	60f8      	str	r0, [r7, #12]
 8012e16:	607a      	str	r2, [r7, #4]
 8012e18:	603b      	str	r3, [r7, #0]
 8012e1a:	460b      	mov	r3, r1
 8012e1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e1e:	2300      	movs	r3, #0
 8012e20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e22:	2300      	movs	r3, #0
 8012e24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012e2c:	7af9      	ldrb	r1, [r7, #11]
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	687a      	ldr	r2, [r7, #4]
 8012e32:	f7f6 fa3a 	bl	80092aa <HAL_PCD_EP_Transmit>
 8012e36:	4603      	mov	r3, r0
 8012e38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e3a:	7dfb      	ldrb	r3, [r7, #23]
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f000 f853 	bl	8012ee8 <USBD_Get_USB_Status>
 8012e42:	4603      	mov	r3, r0
 8012e44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012e46:	7dbb      	ldrb	r3, [r7, #22]
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	3718      	adds	r7, #24
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}

08012e50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b086      	sub	sp, #24
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	60f8      	str	r0, [r7, #12]
 8012e58:	607a      	str	r2, [r7, #4]
 8012e5a:	603b      	str	r3, [r7, #0]
 8012e5c:	460b      	mov	r3, r1
 8012e5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e60:	2300      	movs	r3, #0
 8012e62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e64:	2300      	movs	r3, #0
 8012e66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012e6e:	7af9      	ldrb	r1, [r7, #11]
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	687a      	ldr	r2, [r7, #4]
 8012e74:	f7f6 f9b6 	bl	80091e4 <HAL_PCD_EP_Receive>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e7c:	7dfb      	ldrb	r3, [r7, #23]
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f000 f832 	bl	8012ee8 <USBD_Get_USB_Status>
 8012e84:	4603      	mov	r3, r0
 8012e86:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012e88:	7dbb      	ldrb	r3, [r7, #22]
}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3718      	adds	r7, #24
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}

08012e92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e92:	b580      	push	{r7, lr}
 8012e94:	b082      	sub	sp, #8
 8012e96:	af00      	add	r7, sp, #0
 8012e98:	6078      	str	r0, [r7, #4]
 8012e9a:	460b      	mov	r3, r1
 8012e9c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012ea4:	78fa      	ldrb	r2, [r7, #3]
 8012ea6:	4611      	mov	r1, r2
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7f6 f9e6 	bl	800927a <HAL_PCD_EP_GetRxCount>
 8012eae:	4603      	mov	r3, r0
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3708      	adds	r7, #8
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}

08012eb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012eb8:	b480      	push	{r7}
 8012eba:	b083      	sub	sp, #12
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012ec0:	4b03      	ldr	r3, [pc, #12]	; (8012ed0 <USBD_static_malloc+0x18>)
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	370c      	adds	r7, #12
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ecc:	4770      	bx	lr
 8012ece:	bf00      	nop
 8012ed0:	20000684 	.word	0x20000684

08012ed4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012ed4:	b480      	push	{r7}
 8012ed6:	b083      	sub	sp, #12
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]

}
 8012edc:	bf00      	nop
 8012ede:	370c      	adds	r7, #12
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee6:	4770      	bx	lr

08012ee8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012ee8:	b480      	push	{r7}
 8012eea:	b085      	sub	sp, #20
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	4603      	mov	r3, r0
 8012ef0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012ef6:	79fb      	ldrb	r3, [r7, #7]
 8012ef8:	2b03      	cmp	r3, #3
 8012efa:	d817      	bhi.n	8012f2c <USBD_Get_USB_Status+0x44>
 8012efc:	a201      	add	r2, pc, #4	; (adr r2, 8012f04 <USBD_Get_USB_Status+0x1c>)
 8012efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f02:	bf00      	nop
 8012f04:	08012f15 	.word	0x08012f15
 8012f08:	08012f1b 	.word	0x08012f1b
 8012f0c:	08012f21 	.word	0x08012f21
 8012f10:	08012f27 	.word	0x08012f27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012f14:	2300      	movs	r3, #0
 8012f16:	73fb      	strb	r3, [r7, #15]
    break;
 8012f18:	e00b      	b.n	8012f32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012f1a:	2303      	movs	r3, #3
 8012f1c:	73fb      	strb	r3, [r7, #15]
    break;
 8012f1e:	e008      	b.n	8012f32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012f20:	2301      	movs	r3, #1
 8012f22:	73fb      	strb	r3, [r7, #15]
    break;
 8012f24:	e005      	b.n	8012f32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012f26:	2303      	movs	r3, #3
 8012f28:	73fb      	strb	r3, [r7, #15]
    break;
 8012f2a:	e002      	b.n	8012f32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012f2c:	2303      	movs	r3, #3
 8012f2e:	73fb      	strb	r3, [r7, #15]
    break;
 8012f30:	bf00      	nop
  }
  return usb_status;
 8012f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3714      	adds	r7, #20
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3e:	4770      	bx	lr

08012f40 <atof>:
 8012f40:	2100      	movs	r1, #0
 8012f42:	f001 bd99 	b.w	8014a78 <strtod>
	...

08012f48 <__errno>:
 8012f48:	4b01      	ldr	r3, [pc, #4]	; (8012f50 <__errno+0x8>)
 8012f4a:	6818      	ldr	r0, [r3, #0]
 8012f4c:	4770      	bx	lr
 8012f4e:	bf00      	nop
 8012f50:	2000019c 	.word	0x2000019c

08012f54 <__libc_init_array>:
 8012f54:	b570      	push	{r4, r5, r6, lr}
 8012f56:	4d0d      	ldr	r5, [pc, #52]	; (8012f8c <__libc_init_array+0x38>)
 8012f58:	4c0d      	ldr	r4, [pc, #52]	; (8012f90 <__libc_init_array+0x3c>)
 8012f5a:	1b64      	subs	r4, r4, r5
 8012f5c:	10a4      	asrs	r4, r4, #2
 8012f5e:	2600      	movs	r6, #0
 8012f60:	42a6      	cmp	r6, r4
 8012f62:	d109      	bne.n	8012f78 <__libc_init_array+0x24>
 8012f64:	4d0b      	ldr	r5, [pc, #44]	; (8012f94 <__libc_init_array+0x40>)
 8012f66:	4c0c      	ldr	r4, [pc, #48]	; (8012f98 <__libc_init_array+0x44>)
 8012f68:	f005 fc22 	bl	80187b0 <_init>
 8012f6c:	1b64      	subs	r4, r4, r5
 8012f6e:	10a4      	asrs	r4, r4, #2
 8012f70:	2600      	movs	r6, #0
 8012f72:	42a6      	cmp	r6, r4
 8012f74:	d105      	bne.n	8012f82 <__libc_init_array+0x2e>
 8012f76:	bd70      	pop	{r4, r5, r6, pc}
 8012f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f7c:	4798      	blx	r3
 8012f7e:	3601      	adds	r6, #1
 8012f80:	e7ee      	b.n	8012f60 <__libc_init_array+0xc>
 8012f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f86:	4798      	blx	r3
 8012f88:	3601      	adds	r6, #1
 8012f8a:	e7f2      	b.n	8012f72 <__libc_init_array+0x1e>
 8012f8c:	0801a9f8 	.word	0x0801a9f8
 8012f90:	0801a9f8 	.word	0x0801a9f8
 8012f94:	0801a9f8 	.word	0x0801a9f8
 8012f98:	0801a9fc 	.word	0x0801a9fc

08012f9c <memset>:
 8012f9c:	4402      	add	r2, r0
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	4293      	cmp	r3, r2
 8012fa2:	d100      	bne.n	8012fa6 <memset+0xa>
 8012fa4:	4770      	bx	lr
 8012fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8012faa:	e7f9      	b.n	8012fa0 <memset+0x4>

08012fac <__cvt>:
 8012fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012fb0:	ec55 4b10 	vmov	r4, r5, d0
 8012fb4:	2d00      	cmp	r5, #0
 8012fb6:	460e      	mov	r6, r1
 8012fb8:	4619      	mov	r1, r3
 8012fba:	462b      	mov	r3, r5
 8012fbc:	bfbb      	ittet	lt
 8012fbe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012fc2:	461d      	movlt	r5, r3
 8012fc4:	2300      	movge	r3, #0
 8012fc6:	232d      	movlt	r3, #45	; 0x2d
 8012fc8:	700b      	strb	r3, [r1, #0]
 8012fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012fcc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012fd0:	4691      	mov	r9, r2
 8012fd2:	f023 0820 	bic.w	r8, r3, #32
 8012fd6:	bfbc      	itt	lt
 8012fd8:	4622      	movlt	r2, r4
 8012fda:	4614      	movlt	r4, r2
 8012fdc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012fe0:	d005      	beq.n	8012fee <__cvt+0x42>
 8012fe2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012fe6:	d100      	bne.n	8012fea <__cvt+0x3e>
 8012fe8:	3601      	adds	r6, #1
 8012fea:	2102      	movs	r1, #2
 8012fec:	e000      	b.n	8012ff0 <__cvt+0x44>
 8012fee:	2103      	movs	r1, #3
 8012ff0:	ab03      	add	r3, sp, #12
 8012ff2:	9301      	str	r3, [sp, #4]
 8012ff4:	ab02      	add	r3, sp, #8
 8012ff6:	9300      	str	r3, [sp, #0]
 8012ff8:	ec45 4b10 	vmov	d0, r4, r5
 8012ffc:	4653      	mov	r3, sl
 8012ffe:	4632      	mov	r2, r6
 8013000:	f001 fe7a 	bl	8014cf8 <_dtoa_r>
 8013004:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013008:	4607      	mov	r7, r0
 801300a:	d102      	bne.n	8013012 <__cvt+0x66>
 801300c:	f019 0f01 	tst.w	r9, #1
 8013010:	d022      	beq.n	8013058 <__cvt+0xac>
 8013012:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013016:	eb07 0906 	add.w	r9, r7, r6
 801301a:	d110      	bne.n	801303e <__cvt+0x92>
 801301c:	783b      	ldrb	r3, [r7, #0]
 801301e:	2b30      	cmp	r3, #48	; 0x30
 8013020:	d10a      	bne.n	8013038 <__cvt+0x8c>
 8013022:	2200      	movs	r2, #0
 8013024:	2300      	movs	r3, #0
 8013026:	4620      	mov	r0, r4
 8013028:	4629      	mov	r1, r5
 801302a:	f7ed fd4d 	bl	8000ac8 <__aeabi_dcmpeq>
 801302e:	b918      	cbnz	r0, 8013038 <__cvt+0x8c>
 8013030:	f1c6 0601 	rsb	r6, r6, #1
 8013034:	f8ca 6000 	str.w	r6, [sl]
 8013038:	f8da 3000 	ldr.w	r3, [sl]
 801303c:	4499      	add	r9, r3
 801303e:	2200      	movs	r2, #0
 8013040:	2300      	movs	r3, #0
 8013042:	4620      	mov	r0, r4
 8013044:	4629      	mov	r1, r5
 8013046:	f7ed fd3f 	bl	8000ac8 <__aeabi_dcmpeq>
 801304a:	b108      	cbz	r0, 8013050 <__cvt+0xa4>
 801304c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013050:	2230      	movs	r2, #48	; 0x30
 8013052:	9b03      	ldr	r3, [sp, #12]
 8013054:	454b      	cmp	r3, r9
 8013056:	d307      	bcc.n	8013068 <__cvt+0xbc>
 8013058:	9b03      	ldr	r3, [sp, #12]
 801305a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801305c:	1bdb      	subs	r3, r3, r7
 801305e:	4638      	mov	r0, r7
 8013060:	6013      	str	r3, [r2, #0]
 8013062:	b004      	add	sp, #16
 8013064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013068:	1c59      	adds	r1, r3, #1
 801306a:	9103      	str	r1, [sp, #12]
 801306c:	701a      	strb	r2, [r3, #0]
 801306e:	e7f0      	b.n	8013052 <__cvt+0xa6>

08013070 <__exponent>:
 8013070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013072:	4603      	mov	r3, r0
 8013074:	2900      	cmp	r1, #0
 8013076:	bfb8      	it	lt
 8013078:	4249      	neglt	r1, r1
 801307a:	f803 2b02 	strb.w	r2, [r3], #2
 801307e:	bfb4      	ite	lt
 8013080:	222d      	movlt	r2, #45	; 0x2d
 8013082:	222b      	movge	r2, #43	; 0x2b
 8013084:	2909      	cmp	r1, #9
 8013086:	7042      	strb	r2, [r0, #1]
 8013088:	dd2a      	ble.n	80130e0 <__exponent+0x70>
 801308a:	f10d 0407 	add.w	r4, sp, #7
 801308e:	46a4      	mov	ip, r4
 8013090:	270a      	movs	r7, #10
 8013092:	46a6      	mov	lr, r4
 8013094:	460a      	mov	r2, r1
 8013096:	fb91 f6f7 	sdiv	r6, r1, r7
 801309a:	fb07 1516 	mls	r5, r7, r6, r1
 801309e:	3530      	adds	r5, #48	; 0x30
 80130a0:	2a63      	cmp	r2, #99	; 0x63
 80130a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80130a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80130aa:	4631      	mov	r1, r6
 80130ac:	dcf1      	bgt.n	8013092 <__exponent+0x22>
 80130ae:	3130      	adds	r1, #48	; 0x30
 80130b0:	f1ae 0502 	sub.w	r5, lr, #2
 80130b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80130b8:	1c44      	adds	r4, r0, #1
 80130ba:	4629      	mov	r1, r5
 80130bc:	4561      	cmp	r1, ip
 80130be:	d30a      	bcc.n	80130d6 <__exponent+0x66>
 80130c0:	f10d 0209 	add.w	r2, sp, #9
 80130c4:	eba2 020e 	sub.w	r2, r2, lr
 80130c8:	4565      	cmp	r5, ip
 80130ca:	bf88      	it	hi
 80130cc:	2200      	movhi	r2, #0
 80130ce:	4413      	add	r3, r2
 80130d0:	1a18      	subs	r0, r3, r0
 80130d2:	b003      	add	sp, #12
 80130d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80130da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80130de:	e7ed      	b.n	80130bc <__exponent+0x4c>
 80130e0:	2330      	movs	r3, #48	; 0x30
 80130e2:	3130      	adds	r1, #48	; 0x30
 80130e4:	7083      	strb	r3, [r0, #2]
 80130e6:	70c1      	strb	r1, [r0, #3]
 80130e8:	1d03      	adds	r3, r0, #4
 80130ea:	e7f1      	b.n	80130d0 <__exponent+0x60>

080130ec <_printf_float>:
 80130ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f0:	ed2d 8b02 	vpush	{d8}
 80130f4:	b08d      	sub	sp, #52	; 0x34
 80130f6:	460c      	mov	r4, r1
 80130f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80130fc:	4616      	mov	r6, r2
 80130fe:	461f      	mov	r7, r3
 8013100:	4605      	mov	r5, r0
 8013102:	f003 f849 	bl	8016198 <_localeconv_r>
 8013106:	f8d0 a000 	ldr.w	sl, [r0]
 801310a:	4650      	mov	r0, sl
 801310c:	f7ed f860 	bl	80001d0 <strlen>
 8013110:	2300      	movs	r3, #0
 8013112:	930a      	str	r3, [sp, #40]	; 0x28
 8013114:	6823      	ldr	r3, [r4, #0]
 8013116:	9305      	str	r3, [sp, #20]
 8013118:	f8d8 3000 	ldr.w	r3, [r8]
 801311c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013120:	3307      	adds	r3, #7
 8013122:	f023 0307 	bic.w	r3, r3, #7
 8013126:	f103 0208 	add.w	r2, r3, #8
 801312a:	f8c8 2000 	str.w	r2, [r8]
 801312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013132:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013136:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801313a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801313e:	9307      	str	r3, [sp, #28]
 8013140:	f8cd 8018 	str.w	r8, [sp, #24]
 8013144:	ee08 0a10 	vmov	s16, r0
 8013148:	4b9f      	ldr	r3, [pc, #636]	; (80133c8 <_printf_float+0x2dc>)
 801314a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801314e:	f04f 32ff 	mov.w	r2, #4294967295
 8013152:	f7ed fceb 	bl	8000b2c <__aeabi_dcmpun>
 8013156:	bb88      	cbnz	r0, 80131bc <_printf_float+0xd0>
 8013158:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801315c:	4b9a      	ldr	r3, [pc, #616]	; (80133c8 <_printf_float+0x2dc>)
 801315e:	f04f 32ff 	mov.w	r2, #4294967295
 8013162:	f7ed fcc5 	bl	8000af0 <__aeabi_dcmple>
 8013166:	bb48      	cbnz	r0, 80131bc <_printf_float+0xd0>
 8013168:	2200      	movs	r2, #0
 801316a:	2300      	movs	r3, #0
 801316c:	4640      	mov	r0, r8
 801316e:	4649      	mov	r1, r9
 8013170:	f7ed fcb4 	bl	8000adc <__aeabi_dcmplt>
 8013174:	b110      	cbz	r0, 801317c <_printf_float+0x90>
 8013176:	232d      	movs	r3, #45	; 0x2d
 8013178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801317c:	4b93      	ldr	r3, [pc, #588]	; (80133cc <_printf_float+0x2e0>)
 801317e:	4894      	ldr	r0, [pc, #592]	; (80133d0 <_printf_float+0x2e4>)
 8013180:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013184:	bf94      	ite	ls
 8013186:	4698      	movls	r8, r3
 8013188:	4680      	movhi	r8, r0
 801318a:	2303      	movs	r3, #3
 801318c:	6123      	str	r3, [r4, #16]
 801318e:	9b05      	ldr	r3, [sp, #20]
 8013190:	f023 0204 	bic.w	r2, r3, #4
 8013194:	6022      	str	r2, [r4, #0]
 8013196:	f04f 0900 	mov.w	r9, #0
 801319a:	9700      	str	r7, [sp, #0]
 801319c:	4633      	mov	r3, r6
 801319e:	aa0b      	add	r2, sp, #44	; 0x2c
 80131a0:	4621      	mov	r1, r4
 80131a2:	4628      	mov	r0, r5
 80131a4:	f000 f9d8 	bl	8013558 <_printf_common>
 80131a8:	3001      	adds	r0, #1
 80131aa:	f040 8090 	bne.w	80132ce <_printf_float+0x1e2>
 80131ae:	f04f 30ff 	mov.w	r0, #4294967295
 80131b2:	b00d      	add	sp, #52	; 0x34
 80131b4:	ecbd 8b02 	vpop	{d8}
 80131b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131bc:	4642      	mov	r2, r8
 80131be:	464b      	mov	r3, r9
 80131c0:	4640      	mov	r0, r8
 80131c2:	4649      	mov	r1, r9
 80131c4:	f7ed fcb2 	bl	8000b2c <__aeabi_dcmpun>
 80131c8:	b140      	cbz	r0, 80131dc <_printf_float+0xf0>
 80131ca:	464b      	mov	r3, r9
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	bfbc      	itt	lt
 80131d0:	232d      	movlt	r3, #45	; 0x2d
 80131d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80131d6:	487f      	ldr	r0, [pc, #508]	; (80133d4 <_printf_float+0x2e8>)
 80131d8:	4b7f      	ldr	r3, [pc, #508]	; (80133d8 <_printf_float+0x2ec>)
 80131da:	e7d1      	b.n	8013180 <_printf_float+0x94>
 80131dc:	6863      	ldr	r3, [r4, #4]
 80131de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80131e2:	9206      	str	r2, [sp, #24]
 80131e4:	1c5a      	adds	r2, r3, #1
 80131e6:	d13f      	bne.n	8013268 <_printf_float+0x17c>
 80131e8:	2306      	movs	r3, #6
 80131ea:	6063      	str	r3, [r4, #4]
 80131ec:	9b05      	ldr	r3, [sp, #20]
 80131ee:	6861      	ldr	r1, [r4, #4]
 80131f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80131f4:	2300      	movs	r3, #0
 80131f6:	9303      	str	r3, [sp, #12]
 80131f8:	ab0a      	add	r3, sp, #40	; 0x28
 80131fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80131fe:	ab09      	add	r3, sp, #36	; 0x24
 8013200:	ec49 8b10 	vmov	d0, r8, r9
 8013204:	9300      	str	r3, [sp, #0]
 8013206:	6022      	str	r2, [r4, #0]
 8013208:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801320c:	4628      	mov	r0, r5
 801320e:	f7ff fecd 	bl	8012fac <__cvt>
 8013212:	9b06      	ldr	r3, [sp, #24]
 8013214:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013216:	2b47      	cmp	r3, #71	; 0x47
 8013218:	4680      	mov	r8, r0
 801321a:	d108      	bne.n	801322e <_printf_float+0x142>
 801321c:	1cc8      	adds	r0, r1, #3
 801321e:	db02      	blt.n	8013226 <_printf_float+0x13a>
 8013220:	6863      	ldr	r3, [r4, #4]
 8013222:	4299      	cmp	r1, r3
 8013224:	dd41      	ble.n	80132aa <_printf_float+0x1be>
 8013226:	f1ab 0b02 	sub.w	fp, fp, #2
 801322a:	fa5f fb8b 	uxtb.w	fp, fp
 801322e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013232:	d820      	bhi.n	8013276 <_printf_float+0x18a>
 8013234:	3901      	subs	r1, #1
 8013236:	465a      	mov	r2, fp
 8013238:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801323c:	9109      	str	r1, [sp, #36]	; 0x24
 801323e:	f7ff ff17 	bl	8013070 <__exponent>
 8013242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013244:	1813      	adds	r3, r2, r0
 8013246:	2a01      	cmp	r2, #1
 8013248:	4681      	mov	r9, r0
 801324a:	6123      	str	r3, [r4, #16]
 801324c:	dc02      	bgt.n	8013254 <_printf_float+0x168>
 801324e:	6822      	ldr	r2, [r4, #0]
 8013250:	07d2      	lsls	r2, r2, #31
 8013252:	d501      	bpl.n	8013258 <_printf_float+0x16c>
 8013254:	3301      	adds	r3, #1
 8013256:	6123      	str	r3, [r4, #16]
 8013258:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801325c:	2b00      	cmp	r3, #0
 801325e:	d09c      	beq.n	801319a <_printf_float+0xae>
 8013260:	232d      	movs	r3, #45	; 0x2d
 8013262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013266:	e798      	b.n	801319a <_printf_float+0xae>
 8013268:	9a06      	ldr	r2, [sp, #24]
 801326a:	2a47      	cmp	r2, #71	; 0x47
 801326c:	d1be      	bne.n	80131ec <_printf_float+0x100>
 801326e:	2b00      	cmp	r3, #0
 8013270:	d1bc      	bne.n	80131ec <_printf_float+0x100>
 8013272:	2301      	movs	r3, #1
 8013274:	e7b9      	b.n	80131ea <_printf_float+0xfe>
 8013276:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801327a:	d118      	bne.n	80132ae <_printf_float+0x1c2>
 801327c:	2900      	cmp	r1, #0
 801327e:	6863      	ldr	r3, [r4, #4]
 8013280:	dd0b      	ble.n	801329a <_printf_float+0x1ae>
 8013282:	6121      	str	r1, [r4, #16]
 8013284:	b913      	cbnz	r3, 801328c <_printf_float+0x1a0>
 8013286:	6822      	ldr	r2, [r4, #0]
 8013288:	07d0      	lsls	r0, r2, #31
 801328a:	d502      	bpl.n	8013292 <_printf_float+0x1a6>
 801328c:	3301      	adds	r3, #1
 801328e:	440b      	add	r3, r1
 8013290:	6123      	str	r3, [r4, #16]
 8013292:	65a1      	str	r1, [r4, #88]	; 0x58
 8013294:	f04f 0900 	mov.w	r9, #0
 8013298:	e7de      	b.n	8013258 <_printf_float+0x16c>
 801329a:	b913      	cbnz	r3, 80132a2 <_printf_float+0x1b6>
 801329c:	6822      	ldr	r2, [r4, #0]
 801329e:	07d2      	lsls	r2, r2, #31
 80132a0:	d501      	bpl.n	80132a6 <_printf_float+0x1ba>
 80132a2:	3302      	adds	r3, #2
 80132a4:	e7f4      	b.n	8013290 <_printf_float+0x1a4>
 80132a6:	2301      	movs	r3, #1
 80132a8:	e7f2      	b.n	8013290 <_printf_float+0x1a4>
 80132aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80132ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132b0:	4299      	cmp	r1, r3
 80132b2:	db05      	blt.n	80132c0 <_printf_float+0x1d4>
 80132b4:	6823      	ldr	r3, [r4, #0]
 80132b6:	6121      	str	r1, [r4, #16]
 80132b8:	07d8      	lsls	r0, r3, #31
 80132ba:	d5ea      	bpl.n	8013292 <_printf_float+0x1a6>
 80132bc:	1c4b      	adds	r3, r1, #1
 80132be:	e7e7      	b.n	8013290 <_printf_float+0x1a4>
 80132c0:	2900      	cmp	r1, #0
 80132c2:	bfd4      	ite	le
 80132c4:	f1c1 0202 	rsble	r2, r1, #2
 80132c8:	2201      	movgt	r2, #1
 80132ca:	4413      	add	r3, r2
 80132cc:	e7e0      	b.n	8013290 <_printf_float+0x1a4>
 80132ce:	6823      	ldr	r3, [r4, #0]
 80132d0:	055a      	lsls	r2, r3, #21
 80132d2:	d407      	bmi.n	80132e4 <_printf_float+0x1f8>
 80132d4:	6923      	ldr	r3, [r4, #16]
 80132d6:	4642      	mov	r2, r8
 80132d8:	4631      	mov	r1, r6
 80132da:	4628      	mov	r0, r5
 80132dc:	47b8      	blx	r7
 80132de:	3001      	adds	r0, #1
 80132e0:	d12c      	bne.n	801333c <_printf_float+0x250>
 80132e2:	e764      	b.n	80131ae <_printf_float+0xc2>
 80132e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80132e8:	f240 80e0 	bls.w	80134ac <_printf_float+0x3c0>
 80132ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80132f0:	2200      	movs	r2, #0
 80132f2:	2300      	movs	r3, #0
 80132f4:	f7ed fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 80132f8:	2800      	cmp	r0, #0
 80132fa:	d034      	beq.n	8013366 <_printf_float+0x27a>
 80132fc:	4a37      	ldr	r2, [pc, #220]	; (80133dc <_printf_float+0x2f0>)
 80132fe:	2301      	movs	r3, #1
 8013300:	4631      	mov	r1, r6
 8013302:	4628      	mov	r0, r5
 8013304:	47b8      	blx	r7
 8013306:	3001      	adds	r0, #1
 8013308:	f43f af51 	beq.w	80131ae <_printf_float+0xc2>
 801330c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013310:	429a      	cmp	r2, r3
 8013312:	db02      	blt.n	801331a <_printf_float+0x22e>
 8013314:	6823      	ldr	r3, [r4, #0]
 8013316:	07d8      	lsls	r0, r3, #31
 8013318:	d510      	bpl.n	801333c <_printf_float+0x250>
 801331a:	ee18 3a10 	vmov	r3, s16
 801331e:	4652      	mov	r2, sl
 8013320:	4631      	mov	r1, r6
 8013322:	4628      	mov	r0, r5
 8013324:	47b8      	blx	r7
 8013326:	3001      	adds	r0, #1
 8013328:	f43f af41 	beq.w	80131ae <_printf_float+0xc2>
 801332c:	f04f 0800 	mov.w	r8, #0
 8013330:	f104 091a 	add.w	r9, r4, #26
 8013334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013336:	3b01      	subs	r3, #1
 8013338:	4543      	cmp	r3, r8
 801333a:	dc09      	bgt.n	8013350 <_printf_float+0x264>
 801333c:	6823      	ldr	r3, [r4, #0]
 801333e:	079b      	lsls	r3, r3, #30
 8013340:	f100 8105 	bmi.w	801354e <_printf_float+0x462>
 8013344:	68e0      	ldr	r0, [r4, #12]
 8013346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013348:	4298      	cmp	r0, r3
 801334a:	bfb8      	it	lt
 801334c:	4618      	movlt	r0, r3
 801334e:	e730      	b.n	80131b2 <_printf_float+0xc6>
 8013350:	2301      	movs	r3, #1
 8013352:	464a      	mov	r2, r9
 8013354:	4631      	mov	r1, r6
 8013356:	4628      	mov	r0, r5
 8013358:	47b8      	blx	r7
 801335a:	3001      	adds	r0, #1
 801335c:	f43f af27 	beq.w	80131ae <_printf_float+0xc2>
 8013360:	f108 0801 	add.w	r8, r8, #1
 8013364:	e7e6      	b.n	8013334 <_printf_float+0x248>
 8013366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013368:	2b00      	cmp	r3, #0
 801336a:	dc39      	bgt.n	80133e0 <_printf_float+0x2f4>
 801336c:	4a1b      	ldr	r2, [pc, #108]	; (80133dc <_printf_float+0x2f0>)
 801336e:	2301      	movs	r3, #1
 8013370:	4631      	mov	r1, r6
 8013372:	4628      	mov	r0, r5
 8013374:	47b8      	blx	r7
 8013376:	3001      	adds	r0, #1
 8013378:	f43f af19 	beq.w	80131ae <_printf_float+0xc2>
 801337c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013380:	4313      	orrs	r3, r2
 8013382:	d102      	bne.n	801338a <_printf_float+0x29e>
 8013384:	6823      	ldr	r3, [r4, #0]
 8013386:	07d9      	lsls	r1, r3, #31
 8013388:	d5d8      	bpl.n	801333c <_printf_float+0x250>
 801338a:	ee18 3a10 	vmov	r3, s16
 801338e:	4652      	mov	r2, sl
 8013390:	4631      	mov	r1, r6
 8013392:	4628      	mov	r0, r5
 8013394:	47b8      	blx	r7
 8013396:	3001      	adds	r0, #1
 8013398:	f43f af09 	beq.w	80131ae <_printf_float+0xc2>
 801339c:	f04f 0900 	mov.w	r9, #0
 80133a0:	f104 0a1a 	add.w	sl, r4, #26
 80133a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133a6:	425b      	negs	r3, r3
 80133a8:	454b      	cmp	r3, r9
 80133aa:	dc01      	bgt.n	80133b0 <_printf_float+0x2c4>
 80133ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133ae:	e792      	b.n	80132d6 <_printf_float+0x1ea>
 80133b0:	2301      	movs	r3, #1
 80133b2:	4652      	mov	r2, sl
 80133b4:	4631      	mov	r1, r6
 80133b6:	4628      	mov	r0, r5
 80133b8:	47b8      	blx	r7
 80133ba:	3001      	adds	r0, #1
 80133bc:	f43f aef7 	beq.w	80131ae <_printf_float+0xc2>
 80133c0:	f109 0901 	add.w	r9, r9, #1
 80133c4:	e7ee      	b.n	80133a4 <_printf_float+0x2b8>
 80133c6:	bf00      	nop
 80133c8:	7fefffff 	.word	0x7fefffff
 80133cc:	0801a4e8 	.word	0x0801a4e8
 80133d0:	0801a4ec 	.word	0x0801a4ec
 80133d4:	0801a4f4 	.word	0x0801a4f4
 80133d8:	0801a4f0 	.word	0x0801a4f0
 80133dc:	0801a959 	.word	0x0801a959
 80133e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80133e4:	429a      	cmp	r2, r3
 80133e6:	bfa8      	it	ge
 80133e8:	461a      	movge	r2, r3
 80133ea:	2a00      	cmp	r2, #0
 80133ec:	4691      	mov	r9, r2
 80133ee:	dc37      	bgt.n	8013460 <_printf_float+0x374>
 80133f0:	f04f 0b00 	mov.w	fp, #0
 80133f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80133f8:	f104 021a 	add.w	r2, r4, #26
 80133fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80133fe:	9305      	str	r3, [sp, #20]
 8013400:	eba3 0309 	sub.w	r3, r3, r9
 8013404:	455b      	cmp	r3, fp
 8013406:	dc33      	bgt.n	8013470 <_printf_float+0x384>
 8013408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801340c:	429a      	cmp	r2, r3
 801340e:	db3b      	blt.n	8013488 <_printf_float+0x39c>
 8013410:	6823      	ldr	r3, [r4, #0]
 8013412:	07da      	lsls	r2, r3, #31
 8013414:	d438      	bmi.n	8013488 <_printf_float+0x39c>
 8013416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013418:	9b05      	ldr	r3, [sp, #20]
 801341a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801341c:	1ad3      	subs	r3, r2, r3
 801341e:	eba2 0901 	sub.w	r9, r2, r1
 8013422:	4599      	cmp	r9, r3
 8013424:	bfa8      	it	ge
 8013426:	4699      	movge	r9, r3
 8013428:	f1b9 0f00 	cmp.w	r9, #0
 801342c:	dc35      	bgt.n	801349a <_printf_float+0x3ae>
 801342e:	f04f 0800 	mov.w	r8, #0
 8013432:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013436:	f104 0a1a 	add.w	sl, r4, #26
 801343a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801343e:	1a9b      	subs	r3, r3, r2
 8013440:	eba3 0309 	sub.w	r3, r3, r9
 8013444:	4543      	cmp	r3, r8
 8013446:	f77f af79 	ble.w	801333c <_printf_float+0x250>
 801344a:	2301      	movs	r3, #1
 801344c:	4652      	mov	r2, sl
 801344e:	4631      	mov	r1, r6
 8013450:	4628      	mov	r0, r5
 8013452:	47b8      	blx	r7
 8013454:	3001      	adds	r0, #1
 8013456:	f43f aeaa 	beq.w	80131ae <_printf_float+0xc2>
 801345a:	f108 0801 	add.w	r8, r8, #1
 801345e:	e7ec      	b.n	801343a <_printf_float+0x34e>
 8013460:	4613      	mov	r3, r2
 8013462:	4631      	mov	r1, r6
 8013464:	4642      	mov	r2, r8
 8013466:	4628      	mov	r0, r5
 8013468:	47b8      	blx	r7
 801346a:	3001      	adds	r0, #1
 801346c:	d1c0      	bne.n	80133f0 <_printf_float+0x304>
 801346e:	e69e      	b.n	80131ae <_printf_float+0xc2>
 8013470:	2301      	movs	r3, #1
 8013472:	4631      	mov	r1, r6
 8013474:	4628      	mov	r0, r5
 8013476:	9205      	str	r2, [sp, #20]
 8013478:	47b8      	blx	r7
 801347a:	3001      	adds	r0, #1
 801347c:	f43f ae97 	beq.w	80131ae <_printf_float+0xc2>
 8013480:	9a05      	ldr	r2, [sp, #20]
 8013482:	f10b 0b01 	add.w	fp, fp, #1
 8013486:	e7b9      	b.n	80133fc <_printf_float+0x310>
 8013488:	ee18 3a10 	vmov	r3, s16
 801348c:	4652      	mov	r2, sl
 801348e:	4631      	mov	r1, r6
 8013490:	4628      	mov	r0, r5
 8013492:	47b8      	blx	r7
 8013494:	3001      	adds	r0, #1
 8013496:	d1be      	bne.n	8013416 <_printf_float+0x32a>
 8013498:	e689      	b.n	80131ae <_printf_float+0xc2>
 801349a:	9a05      	ldr	r2, [sp, #20]
 801349c:	464b      	mov	r3, r9
 801349e:	4442      	add	r2, r8
 80134a0:	4631      	mov	r1, r6
 80134a2:	4628      	mov	r0, r5
 80134a4:	47b8      	blx	r7
 80134a6:	3001      	adds	r0, #1
 80134a8:	d1c1      	bne.n	801342e <_printf_float+0x342>
 80134aa:	e680      	b.n	80131ae <_printf_float+0xc2>
 80134ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134ae:	2a01      	cmp	r2, #1
 80134b0:	dc01      	bgt.n	80134b6 <_printf_float+0x3ca>
 80134b2:	07db      	lsls	r3, r3, #31
 80134b4:	d538      	bpl.n	8013528 <_printf_float+0x43c>
 80134b6:	2301      	movs	r3, #1
 80134b8:	4642      	mov	r2, r8
 80134ba:	4631      	mov	r1, r6
 80134bc:	4628      	mov	r0, r5
 80134be:	47b8      	blx	r7
 80134c0:	3001      	adds	r0, #1
 80134c2:	f43f ae74 	beq.w	80131ae <_printf_float+0xc2>
 80134c6:	ee18 3a10 	vmov	r3, s16
 80134ca:	4652      	mov	r2, sl
 80134cc:	4631      	mov	r1, r6
 80134ce:	4628      	mov	r0, r5
 80134d0:	47b8      	blx	r7
 80134d2:	3001      	adds	r0, #1
 80134d4:	f43f ae6b 	beq.w	80131ae <_printf_float+0xc2>
 80134d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80134dc:	2200      	movs	r2, #0
 80134de:	2300      	movs	r3, #0
 80134e0:	f7ed faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80134e4:	b9d8      	cbnz	r0, 801351e <_printf_float+0x432>
 80134e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134e8:	f108 0201 	add.w	r2, r8, #1
 80134ec:	3b01      	subs	r3, #1
 80134ee:	4631      	mov	r1, r6
 80134f0:	4628      	mov	r0, r5
 80134f2:	47b8      	blx	r7
 80134f4:	3001      	adds	r0, #1
 80134f6:	d10e      	bne.n	8013516 <_printf_float+0x42a>
 80134f8:	e659      	b.n	80131ae <_printf_float+0xc2>
 80134fa:	2301      	movs	r3, #1
 80134fc:	4652      	mov	r2, sl
 80134fe:	4631      	mov	r1, r6
 8013500:	4628      	mov	r0, r5
 8013502:	47b8      	blx	r7
 8013504:	3001      	adds	r0, #1
 8013506:	f43f ae52 	beq.w	80131ae <_printf_float+0xc2>
 801350a:	f108 0801 	add.w	r8, r8, #1
 801350e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013510:	3b01      	subs	r3, #1
 8013512:	4543      	cmp	r3, r8
 8013514:	dcf1      	bgt.n	80134fa <_printf_float+0x40e>
 8013516:	464b      	mov	r3, r9
 8013518:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801351c:	e6dc      	b.n	80132d8 <_printf_float+0x1ec>
 801351e:	f04f 0800 	mov.w	r8, #0
 8013522:	f104 0a1a 	add.w	sl, r4, #26
 8013526:	e7f2      	b.n	801350e <_printf_float+0x422>
 8013528:	2301      	movs	r3, #1
 801352a:	4642      	mov	r2, r8
 801352c:	e7df      	b.n	80134ee <_printf_float+0x402>
 801352e:	2301      	movs	r3, #1
 8013530:	464a      	mov	r2, r9
 8013532:	4631      	mov	r1, r6
 8013534:	4628      	mov	r0, r5
 8013536:	47b8      	blx	r7
 8013538:	3001      	adds	r0, #1
 801353a:	f43f ae38 	beq.w	80131ae <_printf_float+0xc2>
 801353e:	f108 0801 	add.w	r8, r8, #1
 8013542:	68e3      	ldr	r3, [r4, #12]
 8013544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013546:	1a5b      	subs	r3, r3, r1
 8013548:	4543      	cmp	r3, r8
 801354a:	dcf0      	bgt.n	801352e <_printf_float+0x442>
 801354c:	e6fa      	b.n	8013344 <_printf_float+0x258>
 801354e:	f04f 0800 	mov.w	r8, #0
 8013552:	f104 0919 	add.w	r9, r4, #25
 8013556:	e7f4      	b.n	8013542 <_printf_float+0x456>

08013558 <_printf_common>:
 8013558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801355c:	4616      	mov	r6, r2
 801355e:	4699      	mov	r9, r3
 8013560:	688a      	ldr	r2, [r1, #8]
 8013562:	690b      	ldr	r3, [r1, #16]
 8013564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013568:	4293      	cmp	r3, r2
 801356a:	bfb8      	it	lt
 801356c:	4613      	movlt	r3, r2
 801356e:	6033      	str	r3, [r6, #0]
 8013570:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013574:	4607      	mov	r7, r0
 8013576:	460c      	mov	r4, r1
 8013578:	b10a      	cbz	r2, 801357e <_printf_common+0x26>
 801357a:	3301      	adds	r3, #1
 801357c:	6033      	str	r3, [r6, #0]
 801357e:	6823      	ldr	r3, [r4, #0]
 8013580:	0699      	lsls	r1, r3, #26
 8013582:	bf42      	ittt	mi
 8013584:	6833      	ldrmi	r3, [r6, #0]
 8013586:	3302      	addmi	r3, #2
 8013588:	6033      	strmi	r3, [r6, #0]
 801358a:	6825      	ldr	r5, [r4, #0]
 801358c:	f015 0506 	ands.w	r5, r5, #6
 8013590:	d106      	bne.n	80135a0 <_printf_common+0x48>
 8013592:	f104 0a19 	add.w	sl, r4, #25
 8013596:	68e3      	ldr	r3, [r4, #12]
 8013598:	6832      	ldr	r2, [r6, #0]
 801359a:	1a9b      	subs	r3, r3, r2
 801359c:	42ab      	cmp	r3, r5
 801359e:	dc26      	bgt.n	80135ee <_printf_common+0x96>
 80135a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80135a4:	1e13      	subs	r3, r2, #0
 80135a6:	6822      	ldr	r2, [r4, #0]
 80135a8:	bf18      	it	ne
 80135aa:	2301      	movne	r3, #1
 80135ac:	0692      	lsls	r2, r2, #26
 80135ae:	d42b      	bmi.n	8013608 <_printf_common+0xb0>
 80135b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80135b4:	4649      	mov	r1, r9
 80135b6:	4638      	mov	r0, r7
 80135b8:	47c0      	blx	r8
 80135ba:	3001      	adds	r0, #1
 80135bc:	d01e      	beq.n	80135fc <_printf_common+0xa4>
 80135be:	6823      	ldr	r3, [r4, #0]
 80135c0:	68e5      	ldr	r5, [r4, #12]
 80135c2:	6832      	ldr	r2, [r6, #0]
 80135c4:	f003 0306 	and.w	r3, r3, #6
 80135c8:	2b04      	cmp	r3, #4
 80135ca:	bf08      	it	eq
 80135cc:	1aad      	subeq	r5, r5, r2
 80135ce:	68a3      	ldr	r3, [r4, #8]
 80135d0:	6922      	ldr	r2, [r4, #16]
 80135d2:	bf0c      	ite	eq
 80135d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80135d8:	2500      	movne	r5, #0
 80135da:	4293      	cmp	r3, r2
 80135dc:	bfc4      	itt	gt
 80135de:	1a9b      	subgt	r3, r3, r2
 80135e0:	18ed      	addgt	r5, r5, r3
 80135e2:	2600      	movs	r6, #0
 80135e4:	341a      	adds	r4, #26
 80135e6:	42b5      	cmp	r5, r6
 80135e8:	d11a      	bne.n	8013620 <_printf_common+0xc8>
 80135ea:	2000      	movs	r0, #0
 80135ec:	e008      	b.n	8013600 <_printf_common+0xa8>
 80135ee:	2301      	movs	r3, #1
 80135f0:	4652      	mov	r2, sl
 80135f2:	4649      	mov	r1, r9
 80135f4:	4638      	mov	r0, r7
 80135f6:	47c0      	blx	r8
 80135f8:	3001      	adds	r0, #1
 80135fa:	d103      	bne.n	8013604 <_printf_common+0xac>
 80135fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013604:	3501      	adds	r5, #1
 8013606:	e7c6      	b.n	8013596 <_printf_common+0x3e>
 8013608:	18e1      	adds	r1, r4, r3
 801360a:	1c5a      	adds	r2, r3, #1
 801360c:	2030      	movs	r0, #48	; 0x30
 801360e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013612:	4422      	add	r2, r4
 8013614:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013618:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801361c:	3302      	adds	r3, #2
 801361e:	e7c7      	b.n	80135b0 <_printf_common+0x58>
 8013620:	2301      	movs	r3, #1
 8013622:	4622      	mov	r2, r4
 8013624:	4649      	mov	r1, r9
 8013626:	4638      	mov	r0, r7
 8013628:	47c0      	blx	r8
 801362a:	3001      	adds	r0, #1
 801362c:	d0e6      	beq.n	80135fc <_printf_common+0xa4>
 801362e:	3601      	adds	r6, #1
 8013630:	e7d9      	b.n	80135e6 <_printf_common+0x8e>
	...

08013634 <_printf_i>:
 8013634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013638:	460c      	mov	r4, r1
 801363a:	4691      	mov	r9, r2
 801363c:	7e27      	ldrb	r7, [r4, #24]
 801363e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013640:	2f78      	cmp	r7, #120	; 0x78
 8013642:	4680      	mov	r8, r0
 8013644:	469a      	mov	sl, r3
 8013646:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801364a:	d807      	bhi.n	801365c <_printf_i+0x28>
 801364c:	2f62      	cmp	r7, #98	; 0x62
 801364e:	d80a      	bhi.n	8013666 <_printf_i+0x32>
 8013650:	2f00      	cmp	r7, #0
 8013652:	f000 80d8 	beq.w	8013806 <_printf_i+0x1d2>
 8013656:	2f58      	cmp	r7, #88	; 0x58
 8013658:	f000 80a3 	beq.w	80137a2 <_printf_i+0x16e>
 801365c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013660:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013664:	e03a      	b.n	80136dc <_printf_i+0xa8>
 8013666:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801366a:	2b15      	cmp	r3, #21
 801366c:	d8f6      	bhi.n	801365c <_printf_i+0x28>
 801366e:	a001      	add	r0, pc, #4	; (adr r0, 8013674 <_printf_i+0x40>)
 8013670:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013674:	080136cd 	.word	0x080136cd
 8013678:	080136e1 	.word	0x080136e1
 801367c:	0801365d 	.word	0x0801365d
 8013680:	0801365d 	.word	0x0801365d
 8013684:	0801365d 	.word	0x0801365d
 8013688:	0801365d 	.word	0x0801365d
 801368c:	080136e1 	.word	0x080136e1
 8013690:	0801365d 	.word	0x0801365d
 8013694:	0801365d 	.word	0x0801365d
 8013698:	0801365d 	.word	0x0801365d
 801369c:	0801365d 	.word	0x0801365d
 80136a0:	080137ed 	.word	0x080137ed
 80136a4:	08013711 	.word	0x08013711
 80136a8:	080137cf 	.word	0x080137cf
 80136ac:	0801365d 	.word	0x0801365d
 80136b0:	0801365d 	.word	0x0801365d
 80136b4:	0801380f 	.word	0x0801380f
 80136b8:	0801365d 	.word	0x0801365d
 80136bc:	08013711 	.word	0x08013711
 80136c0:	0801365d 	.word	0x0801365d
 80136c4:	0801365d 	.word	0x0801365d
 80136c8:	080137d7 	.word	0x080137d7
 80136cc:	680b      	ldr	r3, [r1, #0]
 80136ce:	1d1a      	adds	r2, r3, #4
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	600a      	str	r2, [r1, #0]
 80136d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80136d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80136dc:	2301      	movs	r3, #1
 80136de:	e0a3      	b.n	8013828 <_printf_i+0x1f4>
 80136e0:	6825      	ldr	r5, [r4, #0]
 80136e2:	6808      	ldr	r0, [r1, #0]
 80136e4:	062e      	lsls	r6, r5, #24
 80136e6:	f100 0304 	add.w	r3, r0, #4
 80136ea:	d50a      	bpl.n	8013702 <_printf_i+0xce>
 80136ec:	6805      	ldr	r5, [r0, #0]
 80136ee:	600b      	str	r3, [r1, #0]
 80136f0:	2d00      	cmp	r5, #0
 80136f2:	da03      	bge.n	80136fc <_printf_i+0xc8>
 80136f4:	232d      	movs	r3, #45	; 0x2d
 80136f6:	426d      	negs	r5, r5
 80136f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80136fc:	485e      	ldr	r0, [pc, #376]	; (8013878 <_printf_i+0x244>)
 80136fe:	230a      	movs	r3, #10
 8013700:	e019      	b.n	8013736 <_printf_i+0x102>
 8013702:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013706:	6805      	ldr	r5, [r0, #0]
 8013708:	600b      	str	r3, [r1, #0]
 801370a:	bf18      	it	ne
 801370c:	b22d      	sxthne	r5, r5
 801370e:	e7ef      	b.n	80136f0 <_printf_i+0xbc>
 8013710:	680b      	ldr	r3, [r1, #0]
 8013712:	6825      	ldr	r5, [r4, #0]
 8013714:	1d18      	adds	r0, r3, #4
 8013716:	6008      	str	r0, [r1, #0]
 8013718:	0628      	lsls	r0, r5, #24
 801371a:	d501      	bpl.n	8013720 <_printf_i+0xec>
 801371c:	681d      	ldr	r5, [r3, #0]
 801371e:	e002      	b.n	8013726 <_printf_i+0xf2>
 8013720:	0669      	lsls	r1, r5, #25
 8013722:	d5fb      	bpl.n	801371c <_printf_i+0xe8>
 8013724:	881d      	ldrh	r5, [r3, #0]
 8013726:	4854      	ldr	r0, [pc, #336]	; (8013878 <_printf_i+0x244>)
 8013728:	2f6f      	cmp	r7, #111	; 0x6f
 801372a:	bf0c      	ite	eq
 801372c:	2308      	moveq	r3, #8
 801372e:	230a      	movne	r3, #10
 8013730:	2100      	movs	r1, #0
 8013732:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013736:	6866      	ldr	r6, [r4, #4]
 8013738:	60a6      	str	r6, [r4, #8]
 801373a:	2e00      	cmp	r6, #0
 801373c:	bfa2      	ittt	ge
 801373e:	6821      	ldrge	r1, [r4, #0]
 8013740:	f021 0104 	bicge.w	r1, r1, #4
 8013744:	6021      	strge	r1, [r4, #0]
 8013746:	b90d      	cbnz	r5, 801374c <_printf_i+0x118>
 8013748:	2e00      	cmp	r6, #0
 801374a:	d04d      	beq.n	80137e8 <_printf_i+0x1b4>
 801374c:	4616      	mov	r6, r2
 801374e:	fbb5 f1f3 	udiv	r1, r5, r3
 8013752:	fb03 5711 	mls	r7, r3, r1, r5
 8013756:	5dc7      	ldrb	r7, [r0, r7]
 8013758:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801375c:	462f      	mov	r7, r5
 801375e:	42bb      	cmp	r3, r7
 8013760:	460d      	mov	r5, r1
 8013762:	d9f4      	bls.n	801374e <_printf_i+0x11a>
 8013764:	2b08      	cmp	r3, #8
 8013766:	d10b      	bne.n	8013780 <_printf_i+0x14c>
 8013768:	6823      	ldr	r3, [r4, #0]
 801376a:	07df      	lsls	r7, r3, #31
 801376c:	d508      	bpl.n	8013780 <_printf_i+0x14c>
 801376e:	6923      	ldr	r3, [r4, #16]
 8013770:	6861      	ldr	r1, [r4, #4]
 8013772:	4299      	cmp	r1, r3
 8013774:	bfde      	ittt	le
 8013776:	2330      	movle	r3, #48	; 0x30
 8013778:	f806 3c01 	strble.w	r3, [r6, #-1]
 801377c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013780:	1b92      	subs	r2, r2, r6
 8013782:	6122      	str	r2, [r4, #16]
 8013784:	f8cd a000 	str.w	sl, [sp]
 8013788:	464b      	mov	r3, r9
 801378a:	aa03      	add	r2, sp, #12
 801378c:	4621      	mov	r1, r4
 801378e:	4640      	mov	r0, r8
 8013790:	f7ff fee2 	bl	8013558 <_printf_common>
 8013794:	3001      	adds	r0, #1
 8013796:	d14c      	bne.n	8013832 <_printf_i+0x1fe>
 8013798:	f04f 30ff 	mov.w	r0, #4294967295
 801379c:	b004      	add	sp, #16
 801379e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137a2:	4835      	ldr	r0, [pc, #212]	; (8013878 <_printf_i+0x244>)
 80137a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80137a8:	6823      	ldr	r3, [r4, #0]
 80137aa:	680e      	ldr	r6, [r1, #0]
 80137ac:	061f      	lsls	r7, r3, #24
 80137ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80137b2:	600e      	str	r6, [r1, #0]
 80137b4:	d514      	bpl.n	80137e0 <_printf_i+0x1ac>
 80137b6:	07d9      	lsls	r1, r3, #31
 80137b8:	bf44      	itt	mi
 80137ba:	f043 0320 	orrmi.w	r3, r3, #32
 80137be:	6023      	strmi	r3, [r4, #0]
 80137c0:	b91d      	cbnz	r5, 80137ca <_printf_i+0x196>
 80137c2:	6823      	ldr	r3, [r4, #0]
 80137c4:	f023 0320 	bic.w	r3, r3, #32
 80137c8:	6023      	str	r3, [r4, #0]
 80137ca:	2310      	movs	r3, #16
 80137cc:	e7b0      	b.n	8013730 <_printf_i+0xfc>
 80137ce:	6823      	ldr	r3, [r4, #0]
 80137d0:	f043 0320 	orr.w	r3, r3, #32
 80137d4:	6023      	str	r3, [r4, #0]
 80137d6:	2378      	movs	r3, #120	; 0x78
 80137d8:	4828      	ldr	r0, [pc, #160]	; (801387c <_printf_i+0x248>)
 80137da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80137de:	e7e3      	b.n	80137a8 <_printf_i+0x174>
 80137e0:	065e      	lsls	r6, r3, #25
 80137e2:	bf48      	it	mi
 80137e4:	b2ad      	uxthmi	r5, r5
 80137e6:	e7e6      	b.n	80137b6 <_printf_i+0x182>
 80137e8:	4616      	mov	r6, r2
 80137ea:	e7bb      	b.n	8013764 <_printf_i+0x130>
 80137ec:	680b      	ldr	r3, [r1, #0]
 80137ee:	6826      	ldr	r6, [r4, #0]
 80137f0:	6960      	ldr	r0, [r4, #20]
 80137f2:	1d1d      	adds	r5, r3, #4
 80137f4:	600d      	str	r5, [r1, #0]
 80137f6:	0635      	lsls	r5, r6, #24
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	d501      	bpl.n	8013800 <_printf_i+0x1cc>
 80137fc:	6018      	str	r0, [r3, #0]
 80137fe:	e002      	b.n	8013806 <_printf_i+0x1d2>
 8013800:	0671      	lsls	r1, r6, #25
 8013802:	d5fb      	bpl.n	80137fc <_printf_i+0x1c8>
 8013804:	8018      	strh	r0, [r3, #0]
 8013806:	2300      	movs	r3, #0
 8013808:	6123      	str	r3, [r4, #16]
 801380a:	4616      	mov	r6, r2
 801380c:	e7ba      	b.n	8013784 <_printf_i+0x150>
 801380e:	680b      	ldr	r3, [r1, #0]
 8013810:	1d1a      	adds	r2, r3, #4
 8013812:	600a      	str	r2, [r1, #0]
 8013814:	681e      	ldr	r6, [r3, #0]
 8013816:	6862      	ldr	r2, [r4, #4]
 8013818:	2100      	movs	r1, #0
 801381a:	4630      	mov	r0, r6
 801381c:	f7ec fce0 	bl	80001e0 <memchr>
 8013820:	b108      	cbz	r0, 8013826 <_printf_i+0x1f2>
 8013822:	1b80      	subs	r0, r0, r6
 8013824:	6060      	str	r0, [r4, #4]
 8013826:	6863      	ldr	r3, [r4, #4]
 8013828:	6123      	str	r3, [r4, #16]
 801382a:	2300      	movs	r3, #0
 801382c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013830:	e7a8      	b.n	8013784 <_printf_i+0x150>
 8013832:	6923      	ldr	r3, [r4, #16]
 8013834:	4632      	mov	r2, r6
 8013836:	4649      	mov	r1, r9
 8013838:	4640      	mov	r0, r8
 801383a:	47d0      	blx	sl
 801383c:	3001      	adds	r0, #1
 801383e:	d0ab      	beq.n	8013798 <_printf_i+0x164>
 8013840:	6823      	ldr	r3, [r4, #0]
 8013842:	079b      	lsls	r3, r3, #30
 8013844:	d413      	bmi.n	801386e <_printf_i+0x23a>
 8013846:	68e0      	ldr	r0, [r4, #12]
 8013848:	9b03      	ldr	r3, [sp, #12]
 801384a:	4298      	cmp	r0, r3
 801384c:	bfb8      	it	lt
 801384e:	4618      	movlt	r0, r3
 8013850:	e7a4      	b.n	801379c <_printf_i+0x168>
 8013852:	2301      	movs	r3, #1
 8013854:	4632      	mov	r2, r6
 8013856:	4649      	mov	r1, r9
 8013858:	4640      	mov	r0, r8
 801385a:	47d0      	blx	sl
 801385c:	3001      	adds	r0, #1
 801385e:	d09b      	beq.n	8013798 <_printf_i+0x164>
 8013860:	3501      	adds	r5, #1
 8013862:	68e3      	ldr	r3, [r4, #12]
 8013864:	9903      	ldr	r1, [sp, #12]
 8013866:	1a5b      	subs	r3, r3, r1
 8013868:	42ab      	cmp	r3, r5
 801386a:	dcf2      	bgt.n	8013852 <_printf_i+0x21e>
 801386c:	e7eb      	b.n	8013846 <_printf_i+0x212>
 801386e:	2500      	movs	r5, #0
 8013870:	f104 0619 	add.w	r6, r4, #25
 8013874:	e7f5      	b.n	8013862 <_printf_i+0x22e>
 8013876:	bf00      	nop
 8013878:	0801a4f8 	.word	0x0801a4f8
 801387c:	0801a509 	.word	0x0801a509

08013880 <_scanf_float>:
 8013880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013884:	b087      	sub	sp, #28
 8013886:	4617      	mov	r7, r2
 8013888:	9303      	str	r3, [sp, #12]
 801388a:	688b      	ldr	r3, [r1, #8]
 801388c:	1e5a      	subs	r2, r3, #1
 801388e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013892:	bf83      	ittte	hi
 8013894:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013898:	195b      	addhi	r3, r3, r5
 801389a:	9302      	strhi	r3, [sp, #8]
 801389c:	2300      	movls	r3, #0
 801389e:	bf86      	itte	hi
 80138a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80138a4:	608b      	strhi	r3, [r1, #8]
 80138a6:	9302      	strls	r3, [sp, #8]
 80138a8:	680b      	ldr	r3, [r1, #0]
 80138aa:	468b      	mov	fp, r1
 80138ac:	2500      	movs	r5, #0
 80138ae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80138b2:	f84b 3b1c 	str.w	r3, [fp], #28
 80138b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80138ba:	4680      	mov	r8, r0
 80138bc:	460c      	mov	r4, r1
 80138be:	465e      	mov	r6, fp
 80138c0:	46aa      	mov	sl, r5
 80138c2:	46a9      	mov	r9, r5
 80138c4:	9501      	str	r5, [sp, #4]
 80138c6:	68a2      	ldr	r2, [r4, #8]
 80138c8:	b152      	cbz	r2, 80138e0 <_scanf_float+0x60>
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	2b4e      	cmp	r3, #78	; 0x4e
 80138d0:	d864      	bhi.n	801399c <_scanf_float+0x11c>
 80138d2:	2b40      	cmp	r3, #64	; 0x40
 80138d4:	d83c      	bhi.n	8013950 <_scanf_float+0xd0>
 80138d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80138da:	b2c8      	uxtb	r0, r1
 80138dc:	280e      	cmp	r0, #14
 80138de:	d93a      	bls.n	8013956 <_scanf_float+0xd6>
 80138e0:	f1b9 0f00 	cmp.w	r9, #0
 80138e4:	d003      	beq.n	80138ee <_scanf_float+0x6e>
 80138e6:	6823      	ldr	r3, [r4, #0]
 80138e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80138ec:	6023      	str	r3, [r4, #0]
 80138ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80138f2:	f1ba 0f01 	cmp.w	sl, #1
 80138f6:	f200 8113 	bhi.w	8013b20 <_scanf_float+0x2a0>
 80138fa:	455e      	cmp	r6, fp
 80138fc:	f200 8105 	bhi.w	8013b0a <_scanf_float+0x28a>
 8013900:	2501      	movs	r5, #1
 8013902:	4628      	mov	r0, r5
 8013904:	b007      	add	sp, #28
 8013906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801390a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801390e:	2a0d      	cmp	r2, #13
 8013910:	d8e6      	bhi.n	80138e0 <_scanf_float+0x60>
 8013912:	a101      	add	r1, pc, #4	; (adr r1, 8013918 <_scanf_float+0x98>)
 8013914:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013918:	08013a57 	.word	0x08013a57
 801391c:	080138e1 	.word	0x080138e1
 8013920:	080138e1 	.word	0x080138e1
 8013924:	080138e1 	.word	0x080138e1
 8013928:	08013ab7 	.word	0x08013ab7
 801392c:	08013a8f 	.word	0x08013a8f
 8013930:	080138e1 	.word	0x080138e1
 8013934:	080138e1 	.word	0x080138e1
 8013938:	08013a65 	.word	0x08013a65
 801393c:	080138e1 	.word	0x080138e1
 8013940:	080138e1 	.word	0x080138e1
 8013944:	080138e1 	.word	0x080138e1
 8013948:	080138e1 	.word	0x080138e1
 801394c:	08013a1d 	.word	0x08013a1d
 8013950:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013954:	e7db      	b.n	801390e <_scanf_float+0x8e>
 8013956:	290e      	cmp	r1, #14
 8013958:	d8c2      	bhi.n	80138e0 <_scanf_float+0x60>
 801395a:	a001      	add	r0, pc, #4	; (adr r0, 8013960 <_scanf_float+0xe0>)
 801395c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013960:	08013a0f 	.word	0x08013a0f
 8013964:	080138e1 	.word	0x080138e1
 8013968:	08013a0f 	.word	0x08013a0f
 801396c:	08013aa3 	.word	0x08013aa3
 8013970:	080138e1 	.word	0x080138e1
 8013974:	080139bd 	.word	0x080139bd
 8013978:	080139f9 	.word	0x080139f9
 801397c:	080139f9 	.word	0x080139f9
 8013980:	080139f9 	.word	0x080139f9
 8013984:	080139f9 	.word	0x080139f9
 8013988:	080139f9 	.word	0x080139f9
 801398c:	080139f9 	.word	0x080139f9
 8013990:	080139f9 	.word	0x080139f9
 8013994:	080139f9 	.word	0x080139f9
 8013998:	080139f9 	.word	0x080139f9
 801399c:	2b6e      	cmp	r3, #110	; 0x6e
 801399e:	d809      	bhi.n	80139b4 <_scanf_float+0x134>
 80139a0:	2b60      	cmp	r3, #96	; 0x60
 80139a2:	d8b2      	bhi.n	801390a <_scanf_float+0x8a>
 80139a4:	2b54      	cmp	r3, #84	; 0x54
 80139a6:	d077      	beq.n	8013a98 <_scanf_float+0x218>
 80139a8:	2b59      	cmp	r3, #89	; 0x59
 80139aa:	d199      	bne.n	80138e0 <_scanf_float+0x60>
 80139ac:	2d07      	cmp	r5, #7
 80139ae:	d197      	bne.n	80138e0 <_scanf_float+0x60>
 80139b0:	2508      	movs	r5, #8
 80139b2:	e029      	b.n	8013a08 <_scanf_float+0x188>
 80139b4:	2b74      	cmp	r3, #116	; 0x74
 80139b6:	d06f      	beq.n	8013a98 <_scanf_float+0x218>
 80139b8:	2b79      	cmp	r3, #121	; 0x79
 80139ba:	e7f6      	b.n	80139aa <_scanf_float+0x12a>
 80139bc:	6821      	ldr	r1, [r4, #0]
 80139be:	05c8      	lsls	r0, r1, #23
 80139c0:	d51a      	bpl.n	80139f8 <_scanf_float+0x178>
 80139c2:	9b02      	ldr	r3, [sp, #8]
 80139c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80139c8:	6021      	str	r1, [r4, #0]
 80139ca:	f109 0901 	add.w	r9, r9, #1
 80139ce:	b11b      	cbz	r3, 80139d8 <_scanf_float+0x158>
 80139d0:	3b01      	subs	r3, #1
 80139d2:	3201      	adds	r2, #1
 80139d4:	9302      	str	r3, [sp, #8]
 80139d6:	60a2      	str	r2, [r4, #8]
 80139d8:	68a3      	ldr	r3, [r4, #8]
 80139da:	3b01      	subs	r3, #1
 80139dc:	60a3      	str	r3, [r4, #8]
 80139de:	6923      	ldr	r3, [r4, #16]
 80139e0:	3301      	adds	r3, #1
 80139e2:	6123      	str	r3, [r4, #16]
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	3b01      	subs	r3, #1
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	607b      	str	r3, [r7, #4]
 80139ec:	f340 8084 	ble.w	8013af8 <_scanf_float+0x278>
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	3301      	adds	r3, #1
 80139f4:	603b      	str	r3, [r7, #0]
 80139f6:	e766      	b.n	80138c6 <_scanf_float+0x46>
 80139f8:	eb1a 0f05 	cmn.w	sl, r5
 80139fc:	f47f af70 	bne.w	80138e0 <_scanf_float+0x60>
 8013a00:	6822      	ldr	r2, [r4, #0]
 8013a02:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013a06:	6022      	str	r2, [r4, #0]
 8013a08:	f806 3b01 	strb.w	r3, [r6], #1
 8013a0c:	e7e4      	b.n	80139d8 <_scanf_float+0x158>
 8013a0e:	6822      	ldr	r2, [r4, #0]
 8013a10:	0610      	lsls	r0, r2, #24
 8013a12:	f57f af65 	bpl.w	80138e0 <_scanf_float+0x60>
 8013a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013a1a:	e7f4      	b.n	8013a06 <_scanf_float+0x186>
 8013a1c:	f1ba 0f00 	cmp.w	sl, #0
 8013a20:	d10e      	bne.n	8013a40 <_scanf_float+0x1c0>
 8013a22:	f1b9 0f00 	cmp.w	r9, #0
 8013a26:	d10e      	bne.n	8013a46 <_scanf_float+0x1c6>
 8013a28:	6822      	ldr	r2, [r4, #0]
 8013a2a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013a2e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013a32:	d108      	bne.n	8013a46 <_scanf_float+0x1c6>
 8013a34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013a38:	6022      	str	r2, [r4, #0]
 8013a3a:	f04f 0a01 	mov.w	sl, #1
 8013a3e:	e7e3      	b.n	8013a08 <_scanf_float+0x188>
 8013a40:	f1ba 0f02 	cmp.w	sl, #2
 8013a44:	d055      	beq.n	8013af2 <_scanf_float+0x272>
 8013a46:	2d01      	cmp	r5, #1
 8013a48:	d002      	beq.n	8013a50 <_scanf_float+0x1d0>
 8013a4a:	2d04      	cmp	r5, #4
 8013a4c:	f47f af48 	bne.w	80138e0 <_scanf_float+0x60>
 8013a50:	3501      	adds	r5, #1
 8013a52:	b2ed      	uxtb	r5, r5
 8013a54:	e7d8      	b.n	8013a08 <_scanf_float+0x188>
 8013a56:	f1ba 0f01 	cmp.w	sl, #1
 8013a5a:	f47f af41 	bne.w	80138e0 <_scanf_float+0x60>
 8013a5e:	f04f 0a02 	mov.w	sl, #2
 8013a62:	e7d1      	b.n	8013a08 <_scanf_float+0x188>
 8013a64:	b97d      	cbnz	r5, 8013a86 <_scanf_float+0x206>
 8013a66:	f1b9 0f00 	cmp.w	r9, #0
 8013a6a:	f47f af3c 	bne.w	80138e6 <_scanf_float+0x66>
 8013a6e:	6822      	ldr	r2, [r4, #0]
 8013a70:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013a74:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013a78:	f47f af39 	bne.w	80138ee <_scanf_float+0x6e>
 8013a7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013a80:	6022      	str	r2, [r4, #0]
 8013a82:	2501      	movs	r5, #1
 8013a84:	e7c0      	b.n	8013a08 <_scanf_float+0x188>
 8013a86:	2d03      	cmp	r5, #3
 8013a88:	d0e2      	beq.n	8013a50 <_scanf_float+0x1d0>
 8013a8a:	2d05      	cmp	r5, #5
 8013a8c:	e7de      	b.n	8013a4c <_scanf_float+0x1cc>
 8013a8e:	2d02      	cmp	r5, #2
 8013a90:	f47f af26 	bne.w	80138e0 <_scanf_float+0x60>
 8013a94:	2503      	movs	r5, #3
 8013a96:	e7b7      	b.n	8013a08 <_scanf_float+0x188>
 8013a98:	2d06      	cmp	r5, #6
 8013a9a:	f47f af21 	bne.w	80138e0 <_scanf_float+0x60>
 8013a9e:	2507      	movs	r5, #7
 8013aa0:	e7b2      	b.n	8013a08 <_scanf_float+0x188>
 8013aa2:	6822      	ldr	r2, [r4, #0]
 8013aa4:	0591      	lsls	r1, r2, #22
 8013aa6:	f57f af1b 	bpl.w	80138e0 <_scanf_float+0x60>
 8013aaa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013aae:	6022      	str	r2, [r4, #0]
 8013ab0:	f8cd 9004 	str.w	r9, [sp, #4]
 8013ab4:	e7a8      	b.n	8013a08 <_scanf_float+0x188>
 8013ab6:	6822      	ldr	r2, [r4, #0]
 8013ab8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013abc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013ac0:	d006      	beq.n	8013ad0 <_scanf_float+0x250>
 8013ac2:	0550      	lsls	r0, r2, #21
 8013ac4:	f57f af0c 	bpl.w	80138e0 <_scanf_float+0x60>
 8013ac8:	f1b9 0f00 	cmp.w	r9, #0
 8013acc:	f43f af0f 	beq.w	80138ee <_scanf_float+0x6e>
 8013ad0:	0591      	lsls	r1, r2, #22
 8013ad2:	bf58      	it	pl
 8013ad4:	9901      	ldrpl	r1, [sp, #4]
 8013ad6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013ada:	bf58      	it	pl
 8013adc:	eba9 0101 	subpl.w	r1, r9, r1
 8013ae0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013ae4:	bf58      	it	pl
 8013ae6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013aea:	6022      	str	r2, [r4, #0]
 8013aec:	f04f 0900 	mov.w	r9, #0
 8013af0:	e78a      	b.n	8013a08 <_scanf_float+0x188>
 8013af2:	f04f 0a03 	mov.w	sl, #3
 8013af6:	e787      	b.n	8013a08 <_scanf_float+0x188>
 8013af8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013afc:	4639      	mov	r1, r7
 8013afe:	4640      	mov	r0, r8
 8013b00:	4798      	blx	r3
 8013b02:	2800      	cmp	r0, #0
 8013b04:	f43f aedf 	beq.w	80138c6 <_scanf_float+0x46>
 8013b08:	e6ea      	b.n	80138e0 <_scanf_float+0x60>
 8013b0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013b0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013b12:	463a      	mov	r2, r7
 8013b14:	4640      	mov	r0, r8
 8013b16:	4798      	blx	r3
 8013b18:	6923      	ldr	r3, [r4, #16]
 8013b1a:	3b01      	subs	r3, #1
 8013b1c:	6123      	str	r3, [r4, #16]
 8013b1e:	e6ec      	b.n	80138fa <_scanf_float+0x7a>
 8013b20:	1e6b      	subs	r3, r5, #1
 8013b22:	2b06      	cmp	r3, #6
 8013b24:	d825      	bhi.n	8013b72 <_scanf_float+0x2f2>
 8013b26:	2d02      	cmp	r5, #2
 8013b28:	d836      	bhi.n	8013b98 <_scanf_float+0x318>
 8013b2a:	455e      	cmp	r6, fp
 8013b2c:	f67f aee8 	bls.w	8013900 <_scanf_float+0x80>
 8013b30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013b34:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013b38:	463a      	mov	r2, r7
 8013b3a:	4640      	mov	r0, r8
 8013b3c:	4798      	blx	r3
 8013b3e:	6923      	ldr	r3, [r4, #16]
 8013b40:	3b01      	subs	r3, #1
 8013b42:	6123      	str	r3, [r4, #16]
 8013b44:	e7f1      	b.n	8013b2a <_scanf_float+0x2aa>
 8013b46:	9802      	ldr	r0, [sp, #8]
 8013b48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013b4c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013b50:	9002      	str	r0, [sp, #8]
 8013b52:	463a      	mov	r2, r7
 8013b54:	4640      	mov	r0, r8
 8013b56:	4798      	blx	r3
 8013b58:	6923      	ldr	r3, [r4, #16]
 8013b5a:	3b01      	subs	r3, #1
 8013b5c:	6123      	str	r3, [r4, #16]
 8013b5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013b62:	fa5f fa8a 	uxtb.w	sl, sl
 8013b66:	f1ba 0f02 	cmp.w	sl, #2
 8013b6a:	d1ec      	bne.n	8013b46 <_scanf_float+0x2c6>
 8013b6c:	3d03      	subs	r5, #3
 8013b6e:	b2ed      	uxtb	r5, r5
 8013b70:	1b76      	subs	r6, r6, r5
 8013b72:	6823      	ldr	r3, [r4, #0]
 8013b74:	05da      	lsls	r2, r3, #23
 8013b76:	d52f      	bpl.n	8013bd8 <_scanf_float+0x358>
 8013b78:	055b      	lsls	r3, r3, #21
 8013b7a:	d510      	bpl.n	8013b9e <_scanf_float+0x31e>
 8013b7c:	455e      	cmp	r6, fp
 8013b7e:	f67f aebf 	bls.w	8013900 <_scanf_float+0x80>
 8013b82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013b86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013b8a:	463a      	mov	r2, r7
 8013b8c:	4640      	mov	r0, r8
 8013b8e:	4798      	blx	r3
 8013b90:	6923      	ldr	r3, [r4, #16]
 8013b92:	3b01      	subs	r3, #1
 8013b94:	6123      	str	r3, [r4, #16]
 8013b96:	e7f1      	b.n	8013b7c <_scanf_float+0x2fc>
 8013b98:	46aa      	mov	sl, r5
 8013b9a:	9602      	str	r6, [sp, #8]
 8013b9c:	e7df      	b.n	8013b5e <_scanf_float+0x2de>
 8013b9e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013ba2:	6923      	ldr	r3, [r4, #16]
 8013ba4:	2965      	cmp	r1, #101	; 0x65
 8013ba6:	f103 33ff 	add.w	r3, r3, #4294967295
 8013baa:	f106 35ff 	add.w	r5, r6, #4294967295
 8013bae:	6123      	str	r3, [r4, #16]
 8013bb0:	d00c      	beq.n	8013bcc <_scanf_float+0x34c>
 8013bb2:	2945      	cmp	r1, #69	; 0x45
 8013bb4:	d00a      	beq.n	8013bcc <_scanf_float+0x34c>
 8013bb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013bba:	463a      	mov	r2, r7
 8013bbc:	4640      	mov	r0, r8
 8013bbe:	4798      	blx	r3
 8013bc0:	6923      	ldr	r3, [r4, #16]
 8013bc2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013bc6:	3b01      	subs	r3, #1
 8013bc8:	1eb5      	subs	r5, r6, #2
 8013bca:	6123      	str	r3, [r4, #16]
 8013bcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013bd0:	463a      	mov	r2, r7
 8013bd2:	4640      	mov	r0, r8
 8013bd4:	4798      	blx	r3
 8013bd6:	462e      	mov	r6, r5
 8013bd8:	6825      	ldr	r5, [r4, #0]
 8013bda:	f015 0510 	ands.w	r5, r5, #16
 8013bde:	d158      	bne.n	8013c92 <_scanf_float+0x412>
 8013be0:	7035      	strb	r5, [r6, #0]
 8013be2:	6823      	ldr	r3, [r4, #0]
 8013be4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013bec:	d11c      	bne.n	8013c28 <_scanf_float+0x3a8>
 8013bee:	9b01      	ldr	r3, [sp, #4]
 8013bf0:	454b      	cmp	r3, r9
 8013bf2:	eba3 0209 	sub.w	r2, r3, r9
 8013bf6:	d124      	bne.n	8013c42 <_scanf_float+0x3c2>
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	4659      	mov	r1, fp
 8013bfc:	4640      	mov	r0, r8
 8013bfe:	f000 ff35 	bl	8014a6c <_strtod_r>
 8013c02:	9b03      	ldr	r3, [sp, #12]
 8013c04:	6821      	ldr	r1, [r4, #0]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	f011 0f02 	tst.w	r1, #2
 8013c0c:	ec57 6b10 	vmov	r6, r7, d0
 8013c10:	f103 0204 	add.w	r2, r3, #4
 8013c14:	d020      	beq.n	8013c58 <_scanf_float+0x3d8>
 8013c16:	9903      	ldr	r1, [sp, #12]
 8013c18:	600a      	str	r2, [r1, #0]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	e9c3 6700 	strd	r6, r7, [r3]
 8013c20:	68e3      	ldr	r3, [r4, #12]
 8013c22:	3301      	adds	r3, #1
 8013c24:	60e3      	str	r3, [r4, #12]
 8013c26:	e66c      	b.n	8013902 <_scanf_float+0x82>
 8013c28:	9b04      	ldr	r3, [sp, #16]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d0e4      	beq.n	8013bf8 <_scanf_float+0x378>
 8013c2e:	9905      	ldr	r1, [sp, #20]
 8013c30:	230a      	movs	r3, #10
 8013c32:	462a      	mov	r2, r5
 8013c34:	3101      	adds	r1, #1
 8013c36:	4640      	mov	r0, r8
 8013c38:	f000 ffae 	bl	8014b98 <_strtol_r>
 8013c3c:	9b04      	ldr	r3, [sp, #16]
 8013c3e:	9e05      	ldr	r6, [sp, #20]
 8013c40:	1ac2      	subs	r2, r0, r3
 8013c42:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013c46:	429e      	cmp	r6, r3
 8013c48:	bf28      	it	cs
 8013c4a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013c4e:	4912      	ldr	r1, [pc, #72]	; (8013c98 <_scanf_float+0x418>)
 8013c50:	4630      	mov	r0, r6
 8013c52:	f000 f82b 	bl	8013cac <siprintf>
 8013c56:	e7cf      	b.n	8013bf8 <_scanf_float+0x378>
 8013c58:	f011 0f04 	tst.w	r1, #4
 8013c5c:	9903      	ldr	r1, [sp, #12]
 8013c5e:	600a      	str	r2, [r1, #0]
 8013c60:	d1db      	bne.n	8013c1a <_scanf_float+0x39a>
 8013c62:	f8d3 8000 	ldr.w	r8, [r3]
 8013c66:	ee10 2a10 	vmov	r2, s0
 8013c6a:	ee10 0a10 	vmov	r0, s0
 8013c6e:	463b      	mov	r3, r7
 8013c70:	4639      	mov	r1, r7
 8013c72:	f7ec ff5b 	bl	8000b2c <__aeabi_dcmpun>
 8013c76:	b128      	cbz	r0, 8013c84 <_scanf_float+0x404>
 8013c78:	4808      	ldr	r0, [pc, #32]	; (8013c9c <_scanf_float+0x41c>)
 8013c7a:	f000 f811 	bl	8013ca0 <nanf>
 8013c7e:	ed88 0a00 	vstr	s0, [r8]
 8013c82:	e7cd      	b.n	8013c20 <_scanf_float+0x3a0>
 8013c84:	4630      	mov	r0, r6
 8013c86:	4639      	mov	r1, r7
 8013c88:	f7ec ffae 	bl	8000be8 <__aeabi_d2f>
 8013c8c:	f8c8 0000 	str.w	r0, [r8]
 8013c90:	e7c6      	b.n	8013c20 <_scanf_float+0x3a0>
 8013c92:	2500      	movs	r5, #0
 8013c94:	e635      	b.n	8013902 <_scanf_float+0x82>
 8013c96:	bf00      	nop
 8013c98:	0801a51a 	.word	0x0801a51a
 8013c9c:	0801a9ab 	.word	0x0801a9ab

08013ca0 <nanf>:
 8013ca0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013ca8 <nanf+0x8>
 8013ca4:	4770      	bx	lr
 8013ca6:	bf00      	nop
 8013ca8:	7fc00000 	.word	0x7fc00000

08013cac <siprintf>:
 8013cac:	b40e      	push	{r1, r2, r3}
 8013cae:	b500      	push	{lr}
 8013cb0:	b09c      	sub	sp, #112	; 0x70
 8013cb2:	ab1d      	add	r3, sp, #116	; 0x74
 8013cb4:	9002      	str	r0, [sp, #8]
 8013cb6:	9006      	str	r0, [sp, #24]
 8013cb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013cbc:	4809      	ldr	r0, [pc, #36]	; (8013ce4 <siprintf+0x38>)
 8013cbe:	9107      	str	r1, [sp, #28]
 8013cc0:	9104      	str	r1, [sp, #16]
 8013cc2:	4909      	ldr	r1, [pc, #36]	; (8013ce8 <siprintf+0x3c>)
 8013cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cc8:	9105      	str	r1, [sp, #20]
 8013cca:	6800      	ldr	r0, [r0, #0]
 8013ccc:	9301      	str	r3, [sp, #4]
 8013cce:	a902      	add	r1, sp, #8
 8013cd0:	f003 f874 	bl	8016dbc <_svfiprintf_r>
 8013cd4:	9b02      	ldr	r3, [sp, #8]
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	701a      	strb	r2, [r3, #0]
 8013cda:	b01c      	add	sp, #112	; 0x70
 8013cdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8013ce0:	b003      	add	sp, #12
 8013ce2:	4770      	bx	lr
 8013ce4:	2000019c 	.word	0x2000019c
 8013ce8:	ffff0208 	.word	0xffff0208

08013cec <siscanf>:
 8013cec:	b40e      	push	{r1, r2, r3}
 8013cee:	b510      	push	{r4, lr}
 8013cf0:	b09f      	sub	sp, #124	; 0x7c
 8013cf2:	ac21      	add	r4, sp, #132	; 0x84
 8013cf4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013cf8:	f854 2b04 	ldr.w	r2, [r4], #4
 8013cfc:	9201      	str	r2, [sp, #4]
 8013cfe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013d02:	9004      	str	r0, [sp, #16]
 8013d04:	9008      	str	r0, [sp, #32]
 8013d06:	f7ec fa63 	bl	80001d0 <strlen>
 8013d0a:	4b0c      	ldr	r3, [pc, #48]	; (8013d3c <siscanf+0x50>)
 8013d0c:	9005      	str	r0, [sp, #20]
 8013d0e:	9009      	str	r0, [sp, #36]	; 0x24
 8013d10:	930d      	str	r3, [sp, #52]	; 0x34
 8013d12:	480b      	ldr	r0, [pc, #44]	; (8013d40 <siscanf+0x54>)
 8013d14:	9a01      	ldr	r2, [sp, #4]
 8013d16:	6800      	ldr	r0, [r0, #0]
 8013d18:	9403      	str	r4, [sp, #12]
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	9311      	str	r3, [sp, #68]	; 0x44
 8013d1e:	9316      	str	r3, [sp, #88]	; 0x58
 8013d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013d24:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013d28:	a904      	add	r1, sp, #16
 8013d2a:	4623      	mov	r3, r4
 8013d2c:	f003 f9a0 	bl	8017070 <__ssvfiscanf_r>
 8013d30:	b01f      	add	sp, #124	; 0x7c
 8013d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d36:	b003      	add	sp, #12
 8013d38:	4770      	bx	lr
 8013d3a:	bf00      	nop
 8013d3c:	08013d67 	.word	0x08013d67
 8013d40:	2000019c 	.word	0x2000019c

08013d44 <__sread>:
 8013d44:	b510      	push	{r4, lr}
 8013d46:	460c      	mov	r4, r1
 8013d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d4c:	f003 fc54 	bl	80175f8 <_read_r>
 8013d50:	2800      	cmp	r0, #0
 8013d52:	bfab      	itete	ge
 8013d54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013d56:	89a3      	ldrhlt	r3, [r4, #12]
 8013d58:	181b      	addge	r3, r3, r0
 8013d5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013d5e:	bfac      	ite	ge
 8013d60:	6563      	strge	r3, [r4, #84]	; 0x54
 8013d62:	81a3      	strhlt	r3, [r4, #12]
 8013d64:	bd10      	pop	{r4, pc}

08013d66 <__seofread>:
 8013d66:	2000      	movs	r0, #0
 8013d68:	4770      	bx	lr

08013d6a <__swrite>:
 8013d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d6e:	461f      	mov	r7, r3
 8013d70:	898b      	ldrh	r3, [r1, #12]
 8013d72:	05db      	lsls	r3, r3, #23
 8013d74:	4605      	mov	r5, r0
 8013d76:	460c      	mov	r4, r1
 8013d78:	4616      	mov	r6, r2
 8013d7a:	d505      	bpl.n	8013d88 <__swrite+0x1e>
 8013d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d80:	2302      	movs	r3, #2
 8013d82:	2200      	movs	r2, #0
 8013d84:	f002 fa10 	bl	80161a8 <_lseek_r>
 8013d88:	89a3      	ldrh	r3, [r4, #12]
 8013d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d92:	81a3      	strh	r3, [r4, #12]
 8013d94:	4632      	mov	r2, r6
 8013d96:	463b      	mov	r3, r7
 8013d98:	4628      	mov	r0, r5
 8013d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d9e:	f000 befd 	b.w	8014b9c <_write_r>

08013da2 <__sseek>:
 8013da2:	b510      	push	{r4, lr}
 8013da4:	460c      	mov	r4, r1
 8013da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013daa:	f002 f9fd 	bl	80161a8 <_lseek_r>
 8013dae:	1c43      	adds	r3, r0, #1
 8013db0:	89a3      	ldrh	r3, [r4, #12]
 8013db2:	bf15      	itete	ne
 8013db4:	6560      	strne	r0, [r4, #84]	; 0x54
 8013db6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013dba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013dbe:	81a3      	strheq	r3, [r4, #12]
 8013dc0:	bf18      	it	ne
 8013dc2:	81a3      	strhne	r3, [r4, #12]
 8013dc4:	bd10      	pop	{r4, pc}

08013dc6 <__sclose>:
 8013dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dca:	f000 bef9 	b.w	8014bc0 <_close_r>

08013dce <strcat>:
 8013dce:	b510      	push	{r4, lr}
 8013dd0:	4602      	mov	r2, r0
 8013dd2:	7814      	ldrb	r4, [r2, #0]
 8013dd4:	4613      	mov	r3, r2
 8013dd6:	3201      	adds	r2, #1
 8013dd8:	2c00      	cmp	r4, #0
 8013dda:	d1fa      	bne.n	8013dd2 <strcat+0x4>
 8013ddc:	3b01      	subs	r3, #1
 8013dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013de2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013de6:	2a00      	cmp	r2, #0
 8013de8:	d1f9      	bne.n	8013dde <strcat+0x10>
 8013dea:	bd10      	pop	{r4, pc}

08013dec <strstr>:
 8013dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dee:	780c      	ldrb	r4, [r1, #0]
 8013df0:	b164      	cbz	r4, 8013e0c <strstr+0x20>
 8013df2:	4603      	mov	r3, r0
 8013df4:	781a      	ldrb	r2, [r3, #0]
 8013df6:	4618      	mov	r0, r3
 8013df8:	1c5e      	adds	r6, r3, #1
 8013dfa:	b90a      	cbnz	r2, 8013e00 <strstr+0x14>
 8013dfc:	4610      	mov	r0, r2
 8013dfe:	e005      	b.n	8013e0c <strstr+0x20>
 8013e00:	4294      	cmp	r4, r2
 8013e02:	d108      	bne.n	8013e16 <strstr+0x2a>
 8013e04:	460d      	mov	r5, r1
 8013e06:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8013e0a:	b902      	cbnz	r2, 8013e0e <strstr+0x22>
 8013e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e0e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8013e12:	4297      	cmp	r7, r2
 8013e14:	d0f7      	beq.n	8013e06 <strstr+0x1a>
 8013e16:	4633      	mov	r3, r6
 8013e18:	e7ec      	b.n	8013df4 <strstr+0x8>

08013e1a <sulp>:
 8013e1a:	b570      	push	{r4, r5, r6, lr}
 8013e1c:	4604      	mov	r4, r0
 8013e1e:	460d      	mov	r5, r1
 8013e20:	ec45 4b10 	vmov	d0, r4, r5
 8013e24:	4616      	mov	r6, r2
 8013e26:	f002 fd65 	bl	80168f4 <__ulp>
 8013e2a:	ec51 0b10 	vmov	r0, r1, d0
 8013e2e:	b17e      	cbz	r6, 8013e50 <sulp+0x36>
 8013e30:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013e34:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	dd09      	ble.n	8013e50 <sulp+0x36>
 8013e3c:	051b      	lsls	r3, r3, #20
 8013e3e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013e42:	2400      	movs	r4, #0
 8013e44:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013e48:	4622      	mov	r2, r4
 8013e4a:	462b      	mov	r3, r5
 8013e4c:	f7ec fbd4 	bl	80005f8 <__aeabi_dmul>
 8013e50:	bd70      	pop	{r4, r5, r6, pc}
 8013e52:	0000      	movs	r0, r0
 8013e54:	0000      	movs	r0, r0
	...

08013e58 <_strtod_l>:
 8013e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e5c:	b0a3      	sub	sp, #140	; 0x8c
 8013e5e:	461f      	mov	r7, r3
 8013e60:	2300      	movs	r3, #0
 8013e62:	931e      	str	r3, [sp, #120]	; 0x78
 8013e64:	4ba4      	ldr	r3, [pc, #656]	; (80140f8 <_strtod_l+0x2a0>)
 8013e66:	9219      	str	r2, [sp, #100]	; 0x64
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	9307      	str	r3, [sp, #28]
 8013e6c:	4604      	mov	r4, r0
 8013e6e:	4618      	mov	r0, r3
 8013e70:	4688      	mov	r8, r1
 8013e72:	f7ec f9ad 	bl	80001d0 <strlen>
 8013e76:	f04f 0a00 	mov.w	sl, #0
 8013e7a:	4605      	mov	r5, r0
 8013e7c:	f04f 0b00 	mov.w	fp, #0
 8013e80:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013e84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013e86:	781a      	ldrb	r2, [r3, #0]
 8013e88:	2a2b      	cmp	r2, #43	; 0x2b
 8013e8a:	d04c      	beq.n	8013f26 <_strtod_l+0xce>
 8013e8c:	d839      	bhi.n	8013f02 <_strtod_l+0xaa>
 8013e8e:	2a0d      	cmp	r2, #13
 8013e90:	d832      	bhi.n	8013ef8 <_strtod_l+0xa0>
 8013e92:	2a08      	cmp	r2, #8
 8013e94:	d832      	bhi.n	8013efc <_strtod_l+0xa4>
 8013e96:	2a00      	cmp	r2, #0
 8013e98:	d03c      	beq.n	8013f14 <_strtod_l+0xbc>
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	930e      	str	r3, [sp, #56]	; 0x38
 8013e9e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013ea0:	7833      	ldrb	r3, [r6, #0]
 8013ea2:	2b30      	cmp	r3, #48	; 0x30
 8013ea4:	f040 80b4 	bne.w	8014010 <_strtod_l+0x1b8>
 8013ea8:	7873      	ldrb	r3, [r6, #1]
 8013eaa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013eae:	2b58      	cmp	r3, #88	; 0x58
 8013eb0:	d16c      	bne.n	8013f8c <_strtod_l+0x134>
 8013eb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013eb4:	9301      	str	r3, [sp, #4]
 8013eb6:	ab1e      	add	r3, sp, #120	; 0x78
 8013eb8:	9702      	str	r7, [sp, #8]
 8013eba:	9300      	str	r3, [sp, #0]
 8013ebc:	4a8f      	ldr	r2, [pc, #572]	; (80140fc <_strtod_l+0x2a4>)
 8013ebe:	ab1f      	add	r3, sp, #124	; 0x7c
 8013ec0:	a91d      	add	r1, sp, #116	; 0x74
 8013ec2:	4620      	mov	r0, r4
 8013ec4:	f001 fe60 	bl	8015b88 <__gethex>
 8013ec8:	f010 0707 	ands.w	r7, r0, #7
 8013ecc:	4605      	mov	r5, r0
 8013ece:	d005      	beq.n	8013edc <_strtod_l+0x84>
 8013ed0:	2f06      	cmp	r7, #6
 8013ed2:	d12a      	bne.n	8013f2a <_strtod_l+0xd2>
 8013ed4:	3601      	adds	r6, #1
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	961d      	str	r6, [sp, #116]	; 0x74
 8013eda:	930e      	str	r3, [sp, #56]	; 0x38
 8013edc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	f040 8596 	bne.w	8014a10 <_strtod_l+0xbb8>
 8013ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ee6:	b1db      	cbz	r3, 8013f20 <_strtod_l+0xc8>
 8013ee8:	4652      	mov	r2, sl
 8013eea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013eee:	ec43 2b10 	vmov	d0, r2, r3
 8013ef2:	b023      	add	sp, #140	; 0x8c
 8013ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ef8:	2a20      	cmp	r2, #32
 8013efa:	d1ce      	bne.n	8013e9a <_strtod_l+0x42>
 8013efc:	3301      	adds	r3, #1
 8013efe:	931d      	str	r3, [sp, #116]	; 0x74
 8013f00:	e7c0      	b.n	8013e84 <_strtod_l+0x2c>
 8013f02:	2a2d      	cmp	r2, #45	; 0x2d
 8013f04:	d1c9      	bne.n	8013e9a <_strtod_l+0x42>
 8013f06:	2201      	movs	r2, #1
 8013f08:	920e      	str	r2, [sp, #56]	; 0x38
 8013f0a:	1c5a      	adds	r2, r3, #1
 8013f0c:	921d      	str	r2, [sp, #116]	; 0x74
 8013f0e:	785b      	ldrb	r3, [r3, #1]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d1c4      	bne.n	8013e9e <_strtod_l+0x46>
 8013f14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013f16:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	f040 8576 	bne.w	8014a0c <_strtod_l+0xbb4>
 8013f20:	4652      	mov	r2, sl
 8013f22:	465b      	mov	r3, fp
 8013f24:	e7e3      	b.n	8013eee <_strtod_l+0x96>
 8013f26:	2200      	movs	r2, #0
 8013f28:	e7ee      	b.n	8013f08 <_strtod_l+0xb0>
 8013f2a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013f2c:	b13a      	cbz	r2, 8013f3e <_strtod_l+0xe6>
 8013f2e:	2135      	movs	r1, #53	; 0x35
 8013f30:	a820      	add	r0, sp, #128	; 0x80
 8013f32:	f002 fdea 	bl	8016b0a <__copybits>
 8013f36:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013f38:	4620      	mov	r0, r4
 8013f3a:	f002 f9af 	bl	801629c <_Bfree>
 8013f3e:	3f01      	subs	r7, #1
 8013f40:	2f05      	cmp	r7, #5
 8013f42:	d807      	bhi.n	8013f54 <_strtod_l+0xfc>
 8013f44:	e8df f007 	tbb	[pc, r7]
 8013f48:	1d180b0e 	.word	0x1d180b0e
 8013f4c:	030e      	.short	0x030e
 8013f4e:	f04f 0b00 	mov.w	fp, #0
 8013f52:	46da      	mov	sl, fp
 8013f54:	0728      	lsls	r0, r5, #28
 8013f56:	d5c1      	bpl.n	8013edc <_strtod_l+0x84>
 8013f58:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013f5c:	e7be      	b.n	8013edc <_strtod_l+0x84>
 8013f5e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8013f62:	e7f7      	b.n	8013f54 <_strtod_l+0xfc>
 8013f64:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8013f68:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013f6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013f6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013f72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013f76:	e7ed      	b.n	8013f54 <_strtod_l+0xfc>
 8013f78:	f8df b184 	ldr.w	fp, [pc, #388]	; 8014100 <_strtod_l+0x2a8>
 8013f7c:	f04f 0a00 	mov.w	sl, #0
 8013f80:	e7e8      	b.n	8013f54 <_strtod_l+0xfc>
 8013f82:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013f86:	f04f 3aff 	mov.w	sl, #4294967295
 8013f8a:	e7e3      	b.n	8013f54 <_strtod_l+0xfc>
 8013f8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013f8e:	1c5a      	adds	r2, r3, #1
 8013f90:	921d      	str	r2, [sp, #116]	; 0x74
 8013f92:	785b      	ldrb	r3, [r3, #1]
 8013f94:	2b30      	cmp	r3, #48	; 0x30
 8013f96:	d0f9      	beq.n	8013f8c <_strtod_l+0x134>
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d09f      	beq.n	8013edc <_strtod_l+0x84>
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	f04f 0900 	mov.w	r9, #0
 8013fa2:	9304      	str	r3, [sp, #16]
 8013fa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8013fa8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013fac:	464f      	mov	r7, r9
 8013fae:	220a      	movs	r2, #10
 8013fb0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8013fb2:	7806      	ldrb	r6, [r0, #0]
 8013fb4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013fb8:	b2d9      	uxtb	r1, r3
 8013fba:	2909      	cmp	r1, #9
 8013fbc:	d92a      	bls.n	8014014 <_strtod_l+0x1bc>
 8013fbe:	9907      	ldr	r1, [sp, #28]
 8013fc0:	462a      	mov	r2, r5
 8013fc2:	f003 fb7f 	bl	80176c4 <strncmp>
 8013fc6:	b398      	cbz	r0, 8014030 <_strtod_l+0x1d8>
 8013fc8:	2000      	movs	r0, #0
 8013fca:	4633      	mov	r3, r6
 8013fcc:	463d      	mov	r5, r7
 8013fce:	9007      	str	r0, [sp, #28]
 8013fd0:	4602      	mov	r2, r0
 8013fd2:	2b65      	cmp	r3, #101	; 0x65
 8013fd4:	d001      	beq.n	8013fda <_strtod_l+0x182>
 8013fd6:	2b45      	cmp	r3, #69	; 0x45
 8013fd8:	d118      	bne.n	801400c <_strtod_l+0x1b4>
 8013fda:	b91d      	cbnz	r5, 8013fe4 <_strtod_l+0x18c>
 8013fdc:	9b04      	ldr	r3, [sp, #16]
 8013fde:	4303      	orrs	r3, r0
 8013fe0:	d098      	beq.n	8013f14 <_strtod_l+0xbc>
 8013fe2:	2500      	movs	r5, #0
 8013fe4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8013fe8:	f108 0301 	add.w	r3, r8, #1
 8013fec:	931d      	str	r3, [sp, #116]	; 0x74
 8013fee:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013ff2:	2b2b      	cmp	r3, #43	; 0x2b
 8013ff4:	d075      	beq.n	80140e2 <_strtod_l+0x28a>
 8013ff6:	2b2d      	cmp	r3, #45	; 0x2d
 8013ff8:	d07b      	beq.n	80140f2 <_strtod_l+0x29a>
 8013ffa:	f04f 0c00 	mov.w	ip, #0
 8013ffe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014002:	2909      	cmp	r1, #9
 8014004:	f240 8082 	bls.w	801410c <_strtod_l+0x2b4>
 8014008:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801400c:	2600      	movs	r6, #0
 801400e:	e09d      	b.n	801414c <_strtod_l+0x2f4>
 8014010:	2300      	movs	r3, #0
 8014012:	e7c4      	b.n	8013f9e <_strtod_l+0x146>
 8014014:	2f08      	cmp	r7, #8
 8014016:	bfd8      	it	le
 8014018:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801401a:	f100 0001 	add.w	r0, r0, #1
 801401e:	bfda      	itte	le
 8014020:	fb02 3301 	mlale	r3, r2, r1, r3
 8014024:	9309      	strle	r3, [sp, #36]	; 0x24
 8014026:	fb02 3909 	mlagt	r9, r2, r9, r3
 801402a:	3701      	adds	r7, #1
 801402c:	901d      	str	r0, [sp, #116]	; 0x74
 801402e:	e7bf      	b.n	8013fb0 <_strtod_l+0x158>
 8014030:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014032:	195a      	adds	r2, r3, r5
 8014034:	921d      	str	r2, [sp, #116]	; 0x74
 8014036:	5d5b      	ldrb	r3, [r3, r5]
 8014038:	2f00      	cmp	r7, #0
 801403a:	d037      	beq.n	80140ac <_strtod_l+0x254>
 801403c:	9007      	str	r0, [sp, #28]
 801403e:	463d      	mov	r5, r7
 8014040:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014044:	2a09      	cmp	r2, #9
 8014046:	d912      	bls.n	801406e <_strtod_l+0x216>
 8014048:	2201      	movs	r2, #1
 801404a:	e7c2      	b.n	8013fd2 <_strtod_l+0x17a>
 801404c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801404e:	1c5a      	adds	r2, r3, #1
 8014050:	921d      	str	r2, [sp, #116]	; 0x74
 8014052:	785b      	ldrb	r3, [r3, #1]
 8014054:	3001      	adds	r0, #1
 8014056:	2b30      	cmp	r3, #48	; 0x30
 8014058:	d0f8      	beq.n	801404c <_strtod_l+0x1f4>
 801405a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801405e:	2a08      	cmp	r2, #8
 8014060:	f200 84db 	bhi.w	8014a1a <_strtod_l+0xbc2>
 8014064:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014066:	9007      	str	r0, [sp, #28]
 8014068:	2000      	movs	r0, #0
 801406a:	920a      	str	r2, [sp, #40]	; 0x28
 801406c:	4605      	mov	r5, r0
 801406e:	3b30      	subs	r3, #48	; 0x30
 8014070:	f100 0201 	add.w	r2, r0, #1
 8014074:	d014      	beq.n	80140a0 <_strtod_l+0x248>
 8014076:	9907      	ldr	r1, [sp, #28]
 8014078:	4411      	add	r1, r2
 801407a:	9107      	str	r1, [sp, #28]
 801407c:	462a      	mov	r2, r5
 801407e:	eb00 0e05 	add.w	lr, r0, r5
 8014082:	210a      	movs	r1, #10
 8014084:	4572      	cmp	r2, lr
 8014086:	d113      	bne.n	80140b0 <_strtod_l+0x258>
 8014088:	182a      	adds	r2, r5, r0
 801408a:	2a08      	cmp	r2, #8
 801408c:	f105 0501 	add.w	r5, r5, #1
 8014090:	4405      	add	r5, r0
 8014092:	dc1c      	bgt.n	80140ce <_strtod_l+0x276>
 8014094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014096:	220a      	movs	r2, #10
 8014098:	fb02 3301 	mla	r3, r2, r1, r3
 801409c:	9309      	str	r3, [sp, #36]	; 0x24
 801409e:	2200      	movs	r2, #0
 80140a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80140a2:	1c59      	adds	r1, r3, #1
 80140a4:	911d      	str	r1, [sp, #116]	; 0x74
 80140a6:	785b      	ldrb	r3, [r3, #1]
 80140a8:	4610      	mov	r0, r2
 80140aa:	e7c9      	b.n	8014040 <_strtod_l+0x1e8>
 80140ac:	4638      	mov	r0, r7
 80140ae:	e7d2      	b.n	8014056 <_strtod_l+0x1fe>
 80140b0:	2a08      	cmp	r2, #8
 80140b2:	dc04      	bgt.n	80140be <_strtod_l+0x266>
 80140b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80140b6:	434e      	muls	r6, r1
 80140b8:	9609      	str	r6, [sp, #36]	; 0x24
 80140ba:	3201      	adds	r2, #1
 80140bc:	e7e2      	b.n	8014084 <_strtod_l+0x22c>
 80140be:	f102 0c01 	add.w	ip, r2, #1
 80140c2:	f1bc 0f10 	cmp.w	ip, #16
 80140c6:	bfd8      	it	le
 80140c8:	fb01 f909 	mulle.w	r9, r1, r9
 80140cc:	e7f5      	b.n	80140ba <_strtod_l+0x262>
 80140ce:	2d10      	cmp	r5, #16
 80140d0:	bfdc      	itt	le
 80140d2:	220a      	movle	r2, #10
 80140d4:	fb02 3909 	mlale	r9, r2, r9, r3
 80140d8:	e7e1      	b.n	801409e <_strtod_l+0x246>
 80140da:	2300      	movs	r3, #0
 80140dc:	9307      	str	r3, [sp, #28]
 80140de:	2201      	movs	r2, #1
 80140e0:	e77c      	b.n	8013fdc <_strtod_l+0x184>
 80140e2:	f04f 0c00 	mov.w	ip, #0
 80140e6:	f108 0302 	add.w	r3, r8, #2
 80140ea:	931d      	str	r3, [sp, #116]	; 0x74
 80140ec:	f898 3002 	ldrb.w	r3, [r8, #2]
 80140f0:	e785      	b.n	8013ffe <_strtod_l+0x1a6>
 80140f2:	f04f 0c01 	mov.w	ip, #1
 80140f6:	e7f6      	b.n	80140e6 <_strtod_l+0x28e>
 80140f8:	0801a7d4 	.word	0x0801a7d4
 80140fc:	0801a520 	.word	0x0801a520
 8014100:	7ff00000 	.word	0x7ff00000
 8014104:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014106:	1c59      	adds	r1, r3, #1
 8014108:	911d      	str	r1, [sp, #116]	; 0x74
 801410a:	785b      	ldrb	r3, [r3, #1]
 801410c:	2b30      	cmp	r3, #48	; 0x30
 801410e:	d0f9      	beq.n	8014104 <_strtod_l+0x2ac>
 8014110:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8014114:	2908      	cmp	r1, #8
 8014116:	f63f af79 	bhi.w	801400c <_strtod_l+0x1b4>
 801411a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801411e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014120:	9308      	str	r3, [sp, #32]
 8014122:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014124:	1c59      	adds	r1, r3, #1
 8014126:	911d      	str	r1, [sp, #116]	; 0x74
 8014128:	785b      	ldrb	r3, [r3, #1]
 801412a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801412e:	2e09      	cmp	r6, #9
 8014130:	d937      	bls.n	80141a2 <_strtod_l+0x34a>
 8014132:	9e08      	ldr	r6, [sp, #32]
 8014134:	1b89      	subs	r1, r1, r6
 8014136:	2908      	cmp	r1, #8
 8014138:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801413c:	dc02      	bgt.n	8014144 <_strtod_l+0x2ec>
 801413e:	4576      	cmp	r6, lr
 8014140:	bfa8      	it	ge
 8014142:	4676      	movge	r6, lr
 8014144:	f1bc 0f00 	cmp.w	ip, #0
 8014148:	d000      	beq.n	801414c <_strtod_l+0x2f4>
 801414a:	4276      	negs	r6, r6
 801414c:	2d00      	cmp	r5, #0
 801414e:	d14f      	bne.n	80141f0 <_strtod_l+0x398>
 8014150:	9904      	ldr	r1, [sp, #16]
 8014152:	4301      	orrs	r1, r0
 8014154:	f47f aec2 	bne.w	8013edc <_strtod_l+0x84>
 8014158:	2a00      	cmp	r2, #0
 801415a:	f47f aedb 	bne.w	8013f14 <_strtod_l+0xbc>
 801415e:	2b69      	cmp	r3, #105	; 0x69
 8014160:	d027      	beq.n	80141b2 <_strtod_l+0x35a>
 8014162:	dc24      	bgt.n	80141ae <_strtod_l+0x356>
 8014164:	2b49      	cmp	r3, #73	; 0x49
 8014166:	d024      	beq.n	80141b2 <_strtod_l+0x35a>
 8014168:	2b4e      	cmp	r3, #78	; 0x4e
 801416a:	f47f aed3 	bne.w	8013f14 <_strtod_l+0xbc>
 801416e:	499e      	ldr	r1, [pc, #632]	; (80143e8 <_strtod_l+0x590>)
 8014170:	a81d      	add	r0, sp, #116	; 0x74
 8014172:	f001 ff61 	bl	8016038 <__match>
 8014176:	2800      	cmp	r0, #0
 8014178:	f43f aecc 	beq.w	8013f14 <_strtod_l+0xbc>
 801417c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801417e:	781b      	ldrb	r3, [r3, #0]
 8014180:	2b28      	cmp	r3, #40	; 0x28
 8014182:	d12d      	bne.n	80141e0 <_strtod_l+0x388>
 8014184:	4999      	ldr	r1, [pc, #612]	; (80143ec <_strtod_l+0x594>)
 8014186:	aa20      	add	r2, sp, #128	; 0x80
 8014188:	a81d      	add	r0, sp, #116	; 0x74
 801418a:	f001 ff69 	bl	8016060 <__hexnan>
 801418e:	2805      	cmp	r0, #5
 8014190:	d126      	bne.n	80141e0 <_strtod_l+0x388>
 8014192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014194:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8014198:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801419c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80141a0:	e69c      	b.n	8013edc <_strtod_l+0x84>
 80141a2:	210a      	movs	r1, #10
 80141a4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80141a8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80141ac:	e7b9      	b.n	8014122 <_strtod_l+0x2ca>
 80141ae:	2b6e      	cmp	r3, #110	; 0x6e
 80141b0:	e7db      	b.n	801416a <_strtod_l+0x312>
 80141b2:	498f      	ldr	r1, [pc, #572]	; (80143f0 <_strtod_l+0x598>)
 80141b4:	a81d      	add	r0, sp, #116	; 0x74
 80141b6:	f001 ff3f 	bl	8016038 <__match>
 80141ba:	2800      	cmp	r0, #0
 80141bc:	f43f aeaa 	beq.w	8013f14 <_strtod_l+0xbc>
 80141c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80141c2:	498c      	ldr	r1, [pc, #560]	; (80143f4 <_strtod_l+0x59c>)
 80141c4:	3b01      	subs	r3, #1
 80141c6:	a81d      	add	r0, sp, #116	; 0x74
 80141c8:	931d      	str	r3, [sp, #116]	; 0x74
 80141ca:	f001 ff35 	bl	8016038 <__match>
 80141ce:	b910      	cbnz	r0, 80141d6 <_strtod_l+0x37e>
 80141d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80141d2:	3301      	adds	r3, #1
 80141d4:	931d      	str	r3, [sp, #116]	; 0x74
 80141d6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8014404 <_strtod_l+0x5ac>
 80141da:	f04f 0a00 	mov.w	sl, #0
 80141de:	e67d      	b.n	8013edc <_strtod_l+0x84>
 80141e0:	4885      	ldr	r0, [pc, #532]	; (80143f8 <_strtod_l+0x5a0>)
 80141e2:	f003 fa1d 	bl	8017620 <nan>
 80141e6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80141ea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80141ee:	e675      	b.n	8013edc <_strtod_l+0x84>
 80141f0:	9b07      	ldr	r3, [sp, #28]
 80141f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141f4:	1af3      	subs	r3, r6, r3
 80141f6:	2f00      	cmp	r7, #0
 80141f8:	bf08      	it	eq
 80141fa:	462f      	moveq	r7, r5
 80141fc:	2d10      	cmp	r5, #16
 80141fe:	9308      	str	r3, [sp, #32]
 8014200:	46a8      	mov	r8, r5
 8014202:	bfa8      	it	ge
 8014204:	f04f 0810 	movge.w	r8, #16
 8014208:	f7ec f97c 	bl	8000504 <__aeabi_ui2d>
 801420c:	2d09      	cmp	r5, #9
 801420e:	4682      	mov	sl, r0
 8014210:	468b      	mov	fp, r1
 8014212:	dd13      	ble.n	801423c <_strtod_l+0x3e4>
 8014214:	4b79      	ldr	r3, [pc, #484]	; (80143fc <_strtod_l+0x5a4>)
 8014216:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801421a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801421e:	f7ec f9eb 	bl	80005f8 <__aeabi_dmul>
 8014222:	4682      	mov	sl, r0
 8014224:	4648      	mov	r0, r9
 8014226:	468b      	mov	fp, r1
 8014228:	f7ec f96c 	bl	8000504 <__aeabi_ui2d>
 801422c:	4602      	mov	r2, r0
 801422e:	460b      	mov	r3, r1
 8014230:	4650      	mov	r0, sl
 8014232:	4659      	mov	r1, fp
 8014234:	f7ec f82a 	bl	800028c <__adddf3>
 8014238:	4682      	mov	sl, r0
 801423a:	468b      	mov	fp, r1
 801423c:	2d0f      	cmp	r5, #15
 801423e:	dc38      	bgt.n	80142b2 <_strtod_l+0x45a>
 8014240:	9b08      	ldr	r3, [sp, #32]
 8014242:	2b00      	cmp	r3, #0
 8014244:	f43f ae4a 	beq.w	8013edc <_strtod_l+0x84>
 8014248:	dd24      	ble.n	8014294 <_strtod_l+0x43c>
 801424a:	2b16      	cmp	r3, #22
 801424c:	dc0b      	bgt.n	8014266 <_strtod_l+0x40e>
 801424e:	4d6b      	ldr	r5, [pc, #428]	; (80143fc <_strtod_l+0x5a4>)
 8014250:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8014254:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014258:	4652      	mov	r2, sl
 801425a:	465b      	mov	r3, fp
 801425c:	f7ec f9cc 	bl	80005f8 <__aeabi_dmul>
 8014260:	4682      	mov	sl, r0
 8014262:	468b      	mov	fp, r1
 8014264:	e63a      	b.n	8013edc <_strtod_l+0x84>
 8014266:	9a08      	ldr	r2, [sp, #32]
 8014268:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801426c:	4293      	cmp	r3, r2
 801426e:	db20      	blt.n	80142b2 <_strtod_l+0x45a>
 8014270:	4c62      	ldr	r4, [pc, #392]	; (80143fc <_strtod_l+0x5a4>)
 8014272:	f1c5 050f 	rsb	r5, r5, #15
 8014276:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801427a:	4652      	mov	r2, sl
 801427c:	465b      	mov	r3, fp
 801427e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014282:	f7ec f9b9 	bl	80005f8 <__aeabi_dmul>
 8014286:	9b08      	ldr	r3, [sp, #32]
 8014288:	1b5d      	subs	r5, r3, r5
 801428a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801428e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014292:	e7e3      	b.n	801425c <_strtod_l+0x404>
 8014294:	9b08      	ldr	r3, [sp, #32]
 8014296:	3316      	adds	r3, #22
 8014298:	db0b      	blt.n	80142b2 <_strtod_l+0x45a>
 801429a:	9b07      	ldr	r3, [sp, #28]
 801429c:	4a57      	ldr	r2, [pc, #348]	; (80143fc <_strtod_l+0x5a4>)
 801429e:	1b9e      	subs	r6, r3, r6
 80142a0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80142a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80142a8:	4650      	mov	r0, sl
 80142aa:	4659      	mov	r1, fp
 80142ac:	f7ec face 	bl	800084c <__aeabi_ddiv>
 80142b0:	e7d6      	b.n	8014260 <_strtod_l+0x408>
 80142b2:	9b08      	ldr	r3, [sp, #32]
 80142b4:	eba5 0808 	sub.w	r8, r5, r8
 80142b8:	4498      	add	r8, r3
 80142ba:	f1b8 0f00 	cmp.w	r8, #0
 80142be:	dd71      	ble.n	80143a4 <_strtod_l+0x54c>
 80142c0:	f018 030f 	ands.w	r3, r8, #15
 80142c4:	d00a      	beq.n	80142dc <_strtod_l+0x484>
 80142c6:	494d      	ldr	r1, [pc, #308]	; (80143fc <_strtod_l+0x5a4>)
 80142c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80142cc:	4652      	mov	r2, sl
 80142ce:	465b      	mov	r3, fp
 80142d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80142d4:	f7ec f990 	bl	80005f8 <__aeabi_dmul>
 80142d8:	4682      	mov	sl, r0
 80142da:	468b      	mov	fp, r1
 80142dc:	f038 080f 	bics.w	r8, r8, #15
 80142e0:	d04d      	beq.n	801437e <_strtod_l+0x526>
 80142e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80142e6:	dd22      	ble.n	801432e <_strtod_l+0x4d6>
 80142e8:	2500      	movs	r5, #0
 80142ea:	462e      	mov	r6, r5
 80142ec:	9509      	str	r5, [sp, #36]	; 0x24
 80142ee:	9507      	str	r5, [sp, #28]
 80142f0:	2322      	movs	r3, #34	; 0x22
 80142f2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8014404 <_strtod_l+0x5ac>
 80142f6:	6023      	str	r3, [r4, #0]
 80142f8:	f04f 0a00 	mov.w	sl, #0
 80142fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142fe:	2b00      	cmp	r3, #0
 8014300:	f43f adec 	beq.w	8013edc <_strtod_l+0x84>
 8014304:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014306:	4620      	mov	r0, r4
 8014308:	f001 ffc8 	bl	801629c <_Bfree>
 801430c:	9907      	ldr	r1, [sp, #28]
 801430e:	4620      	mov	r0, r4
 8014310:	f001 ffc4 	bl	801629c <_Bfree>
 8014314:	4631      	mov	r1, r6
 8014316:	4620      	mov	r0, r4
 8014318:	f001 ffc0 	bl	801629c <_Bfree>
 801431c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801431e:	4620      	mov	r0, r4
 8014320:	f001 ffbc 	bl	801629c <_Bfree>
 8014324:	4629      	mov	r1, r5
 8014326:	4620      	mov	r0, r4
 8014328:	f001 ffb8 	bl	801629c <_Bfree>
 801432c:	e5d6      	b.n	8013edc <_strtod_l+0x84>
 801432e:	2300      	movs	r3, #0
 8014330:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014334:	4650      	mov	r0, sl
 8014336:	4659      	mov	r1, fp
 8014338:	4699      	mov	r9, r3
 801433a:	f1b8 0f01 	cmp.w	r8, #1
 801433e:	dc21      	bgt.n	8014384 <_strtod_l+0x52c>
 8014340:	b10b      	cbz	r3, 8014346 <_strtod_l+0x4ee>
 8014342:	4682      	mov	sl, r0
 8014344:	468b      	mov	fp, r1
 8014346:	4b2e      	ldr	r3, [pc, #184]	; (8014400 <_strtod_l+0x5a8>)
 8014348:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801434c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8014350:	4652      	mov	r2, sl
 8014352:	465b      	mov	r3, fp
 8014354:	e9d9 0100 	ldrd	r0, r1, [r9]
 8014358:	f7ec f94e 	bl	80005f8 <__aeabi_dmul>
 801435c:	4b29      	ldr	r3, [pc, #164]	; (8014404 <_strtod_l+0x5ac>)
 801435e:	460a      	mov	r2, r1
 8014360:	400b      	ands	r3, r1
 8014362:	4929      	ldr	r1, [pc, #164]	; (8014408 <_strtod_l+0x5b0>)
 8014364:	428b      	cmp	r3, r1
 8014366:	4682      	mov	sl, r0
 8014368:	d8be      	bhi.n	80142e8 <_strtod_l+0x490>
 801436a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801436e:	428b      	cmp	r3, r1
 8014370:	bf86      	itte	hi
 8014372:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801440c <_strtod_l+0x5b4>
 8014376:	f04f 3aff 	movhi.w	sl, #4294967295
 801437a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801437e:	2300      	movs	r3, #0
 8014380:	9304      	str	r3, [sp, #16]
 8014382:	e081      	b.n	8014488 <_strtod_l+0x630>
 8014384:	f018 0f01 	tst.w	r8, #1
 8014388:	d007      	beq.n	801439a <_strtod_l+0x542>
 801438a:	4b1d      	ldr	r3, [pc, #116]	; (8014400 <_strtod_l+0x5a8>)
 801438c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8014390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014394:	f7ec f930 	bl	80005f8 <__aeabi_dmul>
 8014398:	2301      	movs	r3, #1
 801439a:	f109 0901 	add.w	r9, r9, #1
 801439e:	ea4f 0868 	mov.w	r8, r8, asr #1
 80143a2:	e7ca      	b.n	801433a <_strtod_l+0x4e2>
 80143a4:	d0eb      	beq.n	801437e <_strtod_l+0x526>
 80143a6:	f1c8 0800 	rsb	r8, r8, #0
 80143aa:	f018 020f 	ands.w	r2, r8, #15
 80143ae:	d00a      	beq.n	80143c6 <_strtod_l+0x56e>
 80143b0:	4b12      	ldr	r3, [pc, #72]	; (80143fc <_strtod_l+0x5a4>)
 80143b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80143b6:	4650      	mov	r0, sl
 80143b8:	4659      	mov	r1, fp
 80143ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143be:	f7ec fa45 	bl	800084c <__aeabi_ddiv>
 80143c2:	4682      	mov	sl, r0
 80143c4:	468b      	mov	fp, r1
 80143c6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80143ca:	d0d8      	beq.n	801437e <_strtod_l+0x526>
 80143cc:	f1b8 0f1f 	cmp.w	r8, #31
 80143d0:	dd1e      	ble.n	8014410 <_strtod_l+0x5b8>
 80143d2:	2500      	movs	r5, #0
 80143d4:	462e      	mov	r6, r5
 80143d6:	9509      	str	r5, [sp, #36]	; 0x24
 80143d8:	9507      	str	r5, [sp, #28]
 80143da:	2322      	movs	r3, #34	; 0x22
 80143dc:	f04f 0a00 	mov.w	sl, #0
 80143e0:	f04f 0b00 	mov.w	fp, #0
 80143e4:	6023      	str	r3, [r4, #0]
 80143e6:	e789      	b.n	80142fc <_strtod_l+0x4a4>
 80143e8:	0801a4f5 	.word	0x0801a4f5
 80143ec:	0801a534 	.word	0x0801a534
 80143f0:	0801a4ed 	.word	0x0801a4ed
 80143f4:	0801a674 	.word	0x0801a674
 80143f8:	0801a9ab 	.word	0x0801a9ab
 80143fc:	0801a870 	.word	0x0801a870
 8014400:	0801a848 	.word	0x0801a848
 8014404:	7ff00000 	.word	0x7ff00000
 8014408:	7ca00000 	.word	0x7ca00000
 801440c:	7fefffff 	.word	0x7fefffff
 8014410:	f018 0310 	ands.w	r3, r8, #16
 8014414:	bf18      	it	ne
 8014416:	236a      	movne	r3, #106	; 0x6a
 8014418:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80147d0 <_strtod_l+0x978>
 801441c:	9304      	str	r3, [sp, #16]
 801441e:	4650      	mov	r0, sl
 8014420:	4659      	mov	r1, fp
 8014422:	2300      	movs	r3, #0
 8014424:	f018 0f01 	tst.w	r8, #1
 8014428:	d004      	beq.n	8014434 <_strtod_l+0x5dc>
 801442a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801442e:	f7ec f8e3 	bl	80005f8 <__aeabi_dmul>
 8014432:	2301      	movs	r3, #1
 8014434:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014438:	f109 0908 	add.w	r9, r9, #8
 801443c:	d1f2      	bne.n	8014424 <_strtod_l+0x5cc>
 801443e:	b10b      	cbz	r3, 8014444 <_strtod_l+0x5ec>
 8014440:	4682      	mov	sl, r0
 8014442:	468b      	mov	fp, r1
 8014444:	9b04      	ldr	r3, [sp, #16]
 8014446:	b1bb      	cbz	r3, 8014478 <_strtod_l+0x620>
 8014448:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801444c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014450:	2b00      	cmp	r3, #0
 8014452:	4659      	mov	r1, fp
 8014454:	dd10      	ble.n	8014478 <_strtod_l+0x620>
 8014456:	2b1f      	cmp	r3, #31
 8014458:	f340 8128 	ble.w	80146ac <_strtod_l+0x854>
 801445c:	2b34      	cmp	r3, #52	; 0x34
 801445e:	bfde      	ittt	le
 8014460:	3b20      	suble	r3, #32
 8014462:	f04f 32ff 	movle.w	r2, #4294967295
 8014466:	fa02 f303 	lslle.w	r3, r2, r3
 801446a:	f04f 0a00 	mov.w	sl, #0
 801446e:	bfcc      	ite	gt
 8014470:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014474:	ea03 0b01 	andle.w	fp, r3, r1
 8014478:	2200      	movs	r2, #0
 801447a:	2300      	movs	r3, #0
 801447c:	4650      	mov	r0, sl
 801447e:	4659      	mov	r1, fp
 8014480:	f7ec fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 8014484:	2800      	cmp	r0, #0
 8014486:	d1a4      	bne.n	80143d2 <_strtod_l+0x57a>
 8014488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801448a:	9300      	str	r3, [sp, #0]
 801448c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801448e:	462b      	mov	r3, r5
 8014490:	463a      	mov	r2, r7
 8014492:	4620      	mov	r0, r4
 8014494:	f001 ff6e 	bl	8016374 <__s2b>
 8014498:	9009      	str	r0, [sp, #36]	; 0x24
 801449a:	2800      	cmp	r0, #0
 801449c:	f43f af24 	beq.w	80142e8 <_strtod_l+0x490>
 80144a0:	9b07      	ldr	r3, [sp, #28]
 80144a2:	1b9e      	subs	r6, r3, r6
 80144a4:	9b08      	ldr	r3, [sp, #32]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	bfb4      	ite	lt
 80144aa:	4633      	movlt	r3, r6
 80144ac:	2300      	movge	r3, #0
 80144ae:	9310      	str	r3, [sp, #64]	; 0x40
 80144b0:	9b08      	ldr	r3, [sp, #32]
 80144b2:	2500      	movs	r5, #0
 80144b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80144b8:	9318      	str	r3, [sp, #96]	; 0x60
 80144ba:	462e      	mov	r6, r5
 80144bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144be:	4620      	mov	r0, r4
 80144c0:	6859      	ldr	r1, [r3, #4]
 80144c2:	f001 feab 	bl	801621c <_Balloc>
 80144c6:	9007      	str	r0, [sp, #28]
 80144c8:	2800      	cmp	r0, #0
 80144ca:	f43f af11 	beq.w	80142f0 <_strtod_l+0x498>
 80144ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144d0:	691a      	ldr	r2, [r3, #16]
 80144d2:	3202      	adds	r2, #2
 80144d4:	f103 010c 	add.w	r1, r3, #12
 80144d8:	0092      	lsls	r2, r2, #2
 80144da:	300c      	adds	r0, #12
 80144dc:	f001 fe90 	bl	8016200 <memcpy>
 80144e0:	ec4b ab10 	vmov	d0, sl, fp
 80144e4:	aa20      	add	r2, sp, #128	; 0x80
 80144e6:	a91f      	add	r1, sp, #124	; 0x7c
 80144e8:	4620      	mov	r0, r4
 80144ea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80144ee:	f002 fa7d 	bl	80169ec <__d2b>
 80144f2:	901e      	str	r0, [sp, #120]	; 0x78
 80144f4:	2800      	cmp	r0, #0
 80144f6:	f43f aefb 	beq.w	80142f0 <_strtod_l+0x498>
 80144fa:	2101      	movs	r1, #1
 80144fc:	4620      	mov	r0, r4
 80144fe:	f001 ffd3 	bl	80164a8 <__i2b>
 8014502:	4606      	mov	r6, r0
 8014504:	2800      	cmp	r0, #0
 8014506:	f43f aef3 	beq.w	80142f0 <_strtod_l+0x498>
 801450a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801450c:	9904      	ldr	r1, [sp, #16]
 801450e:	2b00      	cmp	r3, #0
 8014510:	bfab      	itete	ge
 8014512:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8014514:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8014516:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8014518:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801451c:	bfac      	ite	ge
 801451e:	eb03 0902 	addge.w	r9, r3, r2
 8014522:	1ad7      	sublt	r7, r2, r3
 8014524:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014526:	eba3 0801 	sub.w	r8, r3, r1
 801452a:	4490      	add	r8, r2
 801452c:	4ba3      	ldr	r3, [pc, #652]	; (80147bc <_strtod_l+0x964>)
 801452e:	f108 38ff 	add.w	r8, r8, #4294967295
 8014532:	4598      	cmp	r8, r3
 8014534:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014538:	f280 80cc 	bge.w	80146d4 <_strtod_l+0x87c>
 801453c:	eba3 0308 	sub.w	r3, r3, r8
 8014540:	2b1f      	cmp	r3, #31
 8014542:	eba2 0203 	sub.w	r2, r2, r3
 8014546:	f04f 0101 	mov.w	r1, #1
 801454a:	f300 80b6 	bgt.w	80146ba <_strtod_l+0x862>
 801454e:	fa01 f303 	lsl.w	r3, r1, r3
 8014552:	9311      	str	r3, [sp, #68]	; 0x44
 8014554:	2300      	movs	r3, #0
 8014556:	930c      	str	r3, [sp, #48]	; 0x30
 8014558:	eb09 0802 	add.w	r8, r9, r2
 801455c:	9b04      	ldr	r3, [sp, #16]
 801455e:	45c1      	cmp	r9, r8
 8014560:	4417      	add	r7, r2
 8014562:	441f      	add	r7, r3
 8014564:	464b      	mov	r3, r9
 8014566:	bfa8      	it	ge
 8014568:	4643      	movge	r3, r8
 801456a:	42bb      	cmp	r3, r7
 801456c:	bfa8      	it	ge
 801456e:	463b      	movge	r3, r7
 8014570:	2b00      	cmp	r3, #0
 8014572:	bfc2      	ittt	gt
 8014574:	eba8 0803 	subgt.w	r8, r8, r3
 8014578:	1aff      	subgt	r7, r7, r3
 801457a:	eba9 0903 	subgt.w	r9, r9, r3
 801457e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014580:	2b00      	cmp	r3, #0
 8014582:	dd17      	ble.n	80145b4 <_strtod_l+0x75c>
 8014584:	4631      	mov	r1, r6
 8014586:	461a      	mov	r2, r3
 8014588:	4620      	mov	r0, r4
 801458a:	f002 f849 	bl	8016620 <__pow5mult>
 801458e:	4606      	mov	r6, r0
 8014590:	2800      	cmp	r0, #0
 8014592:	f43f aead 	beq.w	80142f0 <_strtod_l+0x498>
 8014596:	4601      	mov	r1, r0
 8014598:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801459a:	4620      	mov	r0, r4
 801459c:	f001 ff9a 	bl	80164d4 <__multiply>
 80145a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80145a2:	2800      	cmp	r0, #0
 80145a4:	f43f aea4 	beq.w	80142f0 <_strtod_l+0x498>
 80145a8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80145aa:	4620      	mov	r0, r4
 80145ac:	f001 fe76 	bl	801629c <_Bfree>
 80145b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80145b2:	931e      	str	r3, [sp, #120]	; 0x78
 80145b4:	f1b8 0f00 	cmp.w	r8, #0
 80145b8:	f300 8091 	bgt.w	80146de <_strtod_l+0x886>
 80145bc:	9b08      	ldr	r3, [sp, #32]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	dd08      	ble.n	80145d4 <_strtod_l+0x77c>
 80145c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80145c4:	9907      	ldr	r1, [sp, #28]
 80145c6:	4620      	mov	r0, r4
 80145c8:	f002 f82a 	bl	8016620 <__pow5mult>
 80145cc:	9007      	str	r0, [sp, #28]
 80145ce:	2800      	cmp	r0, #0
 80145d0:	f43f ae8e 	beq.w	80142f0 <_strtod_l+0x498>
 80145d4:	2f00      	cmp	r7, #0
 80145d6:	dd08      	ble.n	80145ea <_strtod_l+0x792>
 80145d8:	9907      	ldr	r1, [sp, #28]
 80145da:	463a      	mov	r2, r7
 80145dc:	4620      	mov	r0, r4
 80145de:	f002 f879 	bl	80166d4 <__lshift>
 80145e2:	9007      	str	r0, [sp, #28]
 80145e4:	2800      	cmp	r0, #0
 80145e6:	f43f ae83 	beq.w	80142f0 <_strtod_l+0x498>
 80145ea:	f1b9 0f00 	cmp.w	r9, #0
 80145ee:	dd08      	ble.n	8014602 <_strtod_l+0x7aa>
 80145f0:	4631      	mov	r1, r6
 80145f2:	464a      	mov	r2, r9
 80145f4:	4620      	mov	r0, r4
 80145f6:	f002 f86d 	bl	80166d4 <__lshift>
 80145fa:	4606      	mov	r6, r0
 80145fc:	2800      	cmp	r0, #0
 80145fe:	f43f ae77 	beq.w	80142f0 <_strtod_l+0x498>
 8014602:	9a07      	ldr	r2, [sp, #28]
 8014604:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014606:	4620      	mov	r0, r4
 8014608:	f002 f8ec 	bl	80167e4 <__mdiff>
 801460c:	4605      	mov	r5, r0
 801460e:	2800      	cmp	r0, #0
 8014610:	f43f ae6e 	beq.w	80142f0 <_strtod_l+0x498>
 8014614:	68c3      	ldr	r3, [r0, #12]
 8014616:	930f      	str	r3, [sp, #60]	; 0x3c
 8014618:	2300      	movs	r3, #0
 801461a:	60c3      	str	r3, [r0, #12]
 801461c:	4631      	mov	r1, r6
 801461e:	f002 f8c5 	bl	80167ac <__mcmp>
 8014622:	2800      	cmp	r0, #0
 8014624:	da65      	bge.n	80146f2 <_strtod_l+0x89a>
 8014626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014628:	ea53 030a 	orrs.w	r3, r3, sl
 801462c:	f040 8087 	bne.w	801473e <_strtod_l+0x8e6>
 8014630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014634:	2b00      	cmp	r3, #0
 8014636:	f040 8082 	bne.w	801473e <_strtod_l+0x8e6>
 801463a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801463e:	0d1b      	lsrs	r3, r3, #20
 8014640:	051b      	lsls	r3, r3, #20
 8014642:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014646:	d97a      	bls.n	801473e <_strtod_l+0x8e6>
 8014648:	696b      	ldr	r3, [r5, #20]
 801464a:	b913      	cbnz	r3, 8014652 <_strtod_l+0x7fa>
 801464c:	692b      	ldr	r3, [r5, #16]
 801464e:	2b01      	cmp	r3, #1
 8014650:	dd75      	ble.n	801473e <_strtod_l+0x8e6>
 8014652:	4629      	mov	r1, r5
 8014654:	2201      	movs	r2, #1
 8014656:	4620      	mov	r0, r4
 8014658:	f002 f83c 	bl	80166d4 <__lshift>
 801465c:	4631      	mov	r1, r6
 801465e:	4605      	mov	r5, r0
 8014660:	f002 f8a4 	bl	80167ac <__mcmp>
 8014664:	2800      	cmp	r0, #0
 8014666:	dd6a      	ble.n	801473e <_strtod_l+0x8e6>
 8014668:	9904      	ldr	r1, [sp, #16]
 801466a:	4a55      	ldr	r2, [pc, #340]	; (80147c0 <_strtod_l+0x968>)
 801466c:	465b      	mov	r3, fp
 801466e:	2900      	cmp	r1, #0
 8014670:	f000 8085 	beq.w	801477e <_strtod_l+0x926>
 8014674:	ea02 010b 	and.w	r1, r2, fp
 8014678:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801467c:	dc7f      	bgt.n	801477e <_strtod_l+0x926>
 801467e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014682:	f77f aeaa 	ble.w	80143da <_strtod_l+0x582>
 8014686:	4a4f      	ldr	r2, [pc, #316]	; (80147c4 <_strtod_l+0x96c>)
 8014688:	2300      	movs	r3, #0
 801468a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801468e:	4650      	mov	r0, sl
 8014690:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8014694:	4659      	mov	r1, fp
 8014696:	f7eb ffaf 	bl	80005f8 <__aeabi_dmul>
 801469a:	460b      	mov	r3, r1
 801469c:	4303      	orrs	r3, r0
 801469e:	bf08      	it	eq
 80146a0:	2322      	moveq	r3, #34	; 0x22
 80146a2:	4682      	mov	sl, r0
 80146a4:	468b      	mov	fp, r1
 80146a6:	bf08      	it	eq
 80146a8:	6023      	streq	r3, [r4, #0]
 80146aa:	e62b      	b.n	8014304 <_strtod_l+0x4ac>
 80146ac:	f04f 32ff 	mov.w	r2, #4294967295
 80146b0:	fa02 f303 	lsl.w	r3, r2, r3
 80146b4:	ea03 0a0a 	and.w	sl, r3, sl
 80146b8:	e6de      	b.n	8014478 <_strtod_l+0x620>
 80146ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80146be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80146c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80146c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80146ca:	fa01 f308 	lsl.w	r3, r1, r8
 80146ce:	930c      	str	r3, [sp, #48]	; 0x30
 80146d0:	9111      	str	r1, [sp, #68]	; 0x44
 80146d2:	e741      	b.n	8014558 <_strtod_l+0x700>
 80146d4:	2300      	movs	r3, #0
 80146d6:	930c      	str	r3, [sp, #48]	; 0x30
 80146d8:	2301      	movs	r3, #1
 80146da:	9311      	str	r3, [sp, #68]	; 0x44
 80146dc:	e73c      	b.n	8014558 <_strtod_l+0x700>
 80146de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80146e0:	4642      	mov	r2, r8
 80146e2:	4620      	mov	r0, r4
 80146e4:	f001 fff6 	bl	80166d4 <__lshift>
 80146e8:	901e      	str	r0, [sp, #120]	; 0x78
 80146ea:	2800      	cmp	r0, #0
 80146ec:	f47f af66 	bne.w	80145bc <_strtod_l+0x764>
 80146f0:	e5fe      	b.n	80142f0 <_strtod_l+0x498>
 80146f2:	465f      	mov	r7, fp
 80146f4:	d16e      	bne.n	80147d4 <_strtod_l+0x97c>
 80146f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80146f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80146fc:	b342      	cbz	r2, 8014750 <_strtod_l+0x8f8>
 80146fe:	4a32      	ldr	r2, [pc, #200]	; (80147c8 <_strtod_l+0x970>)
 8014700:	4293      	cmp	r3, r2
 8014702:	d128      	bne.n	8014756 <_strtod_l+0x8fe>
 8014704:	9b04      	ldr	r3, [sp, #16]
 8014706:	4650      	mov	r0, sl
 8014708:	b1eb      	cbz	r3, 8014746 <_strtod_l+0x8ee>
 801470a:	4a2d      	ldr	r2, [pc, #180]	; (80147c0 <_strtod_l+0x968>)
 801470c:	403a      	ands	r2, r7
 801470e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014712:	f04f 31ff 	mov.w	r1, #4294967295
 8014716:	d819      	bhi.n	801474c <_strtod_l+0x8f4>
 8014718:	0d12      	lsrs	r2, r2, #20
 801471a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801471e:	fa01 f303 	lsl.w	r3, r1, r3
 8014722:	4298      	cmp	r0, r3
 8014724:	d117      	bne.n	8014756 <_strtod_l+0x8fe>
 8014726:	4b29      	ldr	r3, [pc, #164]	; (80147cc <_strtod_l+0x974>)
 8014728:	429f      	cmp	r7, r3
 801472a:	d102      	bne.n	8014732 <_strtod_l+0x8da>
 801472c:	3001      	adds	r0, #1
 801472e:	f43f addf 	beq.w	80142f0 <_strtod_l+0x498>
 8014732:	4b23      	ldr	r3, [pc, #140]	; (80147c0 <_strtod_l+0x968>)
 8014734:	403b      	ands	r3, r7
 8014736:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801473a:	f04f 0a00 	mov.w	sl, #0
 801473e:	9b04      	ldr	r3, [sp, #16]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d1a0      	bne.n	8014686 <_strtod_l+0x82e>
 8014744:	e5de      	b.n	8014304 <_strtod_l+0x4ac>
 8014746:	f04f 33ff 	mov.w	r3, #4294967295
 801474a:	e7ea      	b.n	8014722 <_strtod_l+0x8ca>
 801474c:	460b      	mov	r3, r1
 801474e:	e7e8      	b.n	8014722 <_strtod_l+0x8ca>
 8014750:	ea53 030a 	orrs.w	r3, r3, sl
 8014754:	d088      	beq.n	8014668 <_strtod_l+0x810>
 8014756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014758:	b1db      	cbz	r3, 8014792 <_strtod_l+0x93a>
 801475a:	423b      	tst	r3, r7
 801475c:	d0ef      	beq.n	801473e <_strtod_l+0x8e6>
 801475e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014760:	9a04      	ldr	r2, [sp, #16]
 8014762:	4650      	mov	r0, sl
 8014764:	4659      	mov	r1, fp
 8014766:	b1c3      	cbz	r3, 801479a <_strtod_l+0x942>
 8014768:	f7ff fb57 	bl	8013e1a <sulp>
 801476c:	4602      	mov	r2, r0
 801476e:	460b      	mov	r3, r1
 8014770:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014774:	f7eb fd8a 	bl	800028c <__adddf3>
 8014778:	4682      	mov	sl, r0
 801477a:	468b      	mov	fp, r1
 801477c:	e7df      	b.n	801473e <_strtod_l+0x8e6>
 801477e:	4013      	ands	r3, r2
 8014780:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014784:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014788:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801478c:	f04f 3aff 	mov.w	sl, #4294967295
 8014790:	e7d5      	b.n	801473e <_strtod_l+0x8e6>
 8014792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014794:	ea13 0f0a 	tst.w	r3, sl
 8014798:	e7e0      	b.n	801475c <_strtod_l+0x904>
 801479a:	f7ff fb3e 	bl	8013e1a <sulp>
 801479e:	4602      	mov	r2, r0
 80147a0:	460b      	mov	r3, r1
 80147a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80147a6:	f7eb fd6f 	bl	8000288 <__aeabi_dsub>
 80147aa:	2200      	movs	r2, #0
 80147ac:	2300      	movs	r3, #0
 80147ae:	4682      	mov	sl, r0
 80147b0:	468b      	mov	fp, r1
 80147b2:	f7ec f989 	bl	8000ac8 <__aeabi_dcmpeq>
 80147b6:	2800      	cmp	r0, #0
 80147b8:	d0c1      	beq.n	801473e <_strtod_l+0x8e6>
 80147ba:	e60e      	b.n	80143da <_strtod_l+0x582>
 80147bc:	fffffc02 	.word	0xfffffc02
 80147c0:	7ff00000 	.word	0x7ff00000
 80147c4:	39500000 	.word	0x39500000
 80147c8:	000fffff 	.word	0x000fffff
 80147cc:	7fefffff 	.word	0x7fefffff
 80147d0:	0801a548 	.word	0x0801a548
 80147d4:	4631      	mov	r1, r6
 80147d6:	4628      	mov	r0, r5
 80147d8:	f002 f964 	bl	8016aa4 <__ratio>
 80147dc:	ec59 8b10 	vmov	r8, r9, d0
 80147e0:	ee10 0a10 	vmov	r0, s0
 80147e4:	2200      	movs	r2, #0
 80147e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80147ea:	4649      	mov	r1, r9
 80147ec:	f7ec f980 	bl	8000af0 <__aeabi_dcmple>
 80147f0:	2800      	cmp	r0, #0
 80147f2:	d07c      	beq.n	80148ee <_strtod_l+0xa96>
 80147f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d04c      	beq.n	8014894 <_strtod_l+0xa3c>
 80147fa:	4b95      	ldr	r3, [pc, #596]	; (8014a50 <_strtod_l+0xbf8>)
 80147fc:	2200      	movs	r2, #0
 80147fe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8014802:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014a50 <_strtod_l+0xbf8>
 8014806:	f04f 0800 	mov.w	r8, #0
 801480a:	4b92      	ldr	r3, [pc, #584]	; (8014a54 <_strtod_l+0xbfc>)
 801480c:	403b      	ands	r3, r7
 801480e:	9311      	str	r3, [sp, #68]	; 0x44
 8014810:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014812:	4b91      	ldr	r3, [pc, #580]	; (8014a58 <_strtod_l+0xc00>)
 8014814:	429a      	cmp	r2, r3
 8014816:	f040 80b2 	bne.w	801497e <_strtod_l+0xb26>
 801481a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801481e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014822:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8014826:	ec4b ab10 	vmov	d0, sl, fp
 801482a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801482e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014832:	f002 f85f 	bl	80168f4 <__ulp>
 8014836:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801483a:	ec53 2b10 	vmov	r2, r3, d0
 801483e:	f7eb fedb 	bl	80005f8 <__aeabi_dmul>
 8014842:	4652      	mov	r2, sl
 8014844:	465b      	mov	r3, fp
 8014846:	f7eb fd21 	bl	800028c <__adddf3>
 801484a:	460b      	mov	r3, r1
 801484c:	4981      	ldr	r1, [pc, #516]	; (8014a54 <_strtod_l+0xbfc>)
 801484e:	4a83      	ldr	r2, [pc, #524]	; (8014a5c <_strtod_l+0xc04>)
 8014850:	4019      	ands	r1, r3
 8014852:	4291      	cmp	r1, r2
 8014854:	4682      	mov	sl, r0
 8014856:	d95e      	bls.n	8014916 <_strtod_l+0xabe>
 8014858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801485a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801485e:	4293      	cmp	r3, r2
 8014860:	d103      	bne.n	801486a <_strtod_l+0xa12>
 8014862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014864:	3301      	adds	r3, #1
 8014866:	f43f ad43 	beq.w	80142f0 <_strtod_l+0x498>
 801486a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8014a68 <_strtod_l+0xc10>
 801486e:	f04f 3aff 	mov.w	sl, #4294967295
 8014872:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014874:	4620      	mov	r0, r4
 8014876:	f001 fd11 	bl	801629c <_Bfree>
 801487a:	9907      	ldr	r1, [sp, #28]
 801487c:	4620      	mov	r0, r4
 801487e:	f001 fd0d 	bl	801629c <_Bfree>
 8014882:	4631      	mov	r1, r6
 8014884:	4620      	mov	r0, r4
 8014886:	f001 fd09 	bl	801629c <_Bfree>
 801488a:	4629      	mov	r1, r5
 801488c:	4620      	mov	r0, r4
 801488e:	f001 fd05 	bl	801629c <_Bfree>
 8014892:	e613      	b.n	80144bc <_strtod_l+0x664>
 8014894:	f1ba 0f00 	cmp.w	sl, #0
 8014898:	d11b      	bne.n	80148d2 <_strtod_l+0xa7a>
 801489a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801489e:	b9f3      	cbnz	r3, 80148de <_strtod_l+0xa86>
 80148a0:	4b6b      	ldr	r3, [pc, #428]	; (8014a50 <_strtod_l+0xbf8>)
 80148a2:	2200      	movs	r2, #0
 80148a4:	4640      	mov	r0, r8
 80148a6:	4649      	mov	r1, r9
 80148a8:	f7ec f918 	bl	8000adc <__aeabi_dcmplt>
 80148ac:	b9d0      	cbnz	r0, 80148e4 <_strtod_l+0xa8c>
 80148ae:	4640      	mov	r0, r8
 80148b0:	4649      	mov	r1, r9
 80148b2:	4b6b      	ldr	r3, [pc, #428]	; (8014a60 <_strtod_l+0xc08>)
 80148b4:	2200      	movs	r2, #0
 80148b6:	f7eb fe9f 	bl	80005f8 <__aeabi_dmul>
 80148ba:	4680      	mov	r8, r0
 80148bc:	4689      	mov	r9, r1
 80148be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80148c2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80148c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80148c8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80148cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80148d0:	e79b      	b.n	801480a <_strtod_l+0x9b2>
 80148d2:	f1ba 0f01 	cmp.w	sl, #1
 80148d6:	d102      	bne.n	80148de <_strtod_l+0xa86>
 80148d8:	2f00      	cmp	r7, #0
 80148da:	f43f ad7e 	beq.w	80143da <_strtod_l+0x582>
 80148de:	4b61      	ldr	r3, [pc, #388]	; (8014a64 <_strtod_l+0xc0c>)
 80148e0:	2200      	movs	r2, #0
 80148e2:	e78c      	b.n	80147fe <_strtod_l+0x9a6>
 80148e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014a60 <_strtod_l+0xc08>
 80148e8:	f04f 0800 	mov.w	r8, #0
 80148ec:	e7e7      	b.n	80148be <_strtod_l+0xa66>
 80148ee:	4b5c      	ldr	r3, [pc, #368]	; (8014a60 <_strtod_l+0xc08>)
 80148f0:	4640      	mov	r0, r8
 80148f2:	4649      	mov	r1, r9
 80148f4:	2200      	movs	r2, #0
 80148f6:	f7eb fe7f 	bl	80005f8 <__aeabi_dmul>
 80148fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80148fc:	4680      	mov	r8, r0
 80148fe:	4689      	mov	r9, r1
 8014900:	b933      	cbnz	r3, 8014910 <_strtod_l+0xab8>
 8014902:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014906:	9012      	str	r0, [sp, #72]	; 0x48
 8014908:	9313      	str	r3, [sp, #76]	; 0x4c
 801490a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801490e:	e7dd      	b.n	80148cc <_strtod_l+0xa74>
 8014910:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8014914:	e7f9      	b.n	801490a <_strtod_l+0xab2>
 8014916:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801491a:	9b04      	ldr	r3, [sp, #16]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d1a8      	bne.n	8014872 <_strtod_l+0xa1a>
 8014920:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014924:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014926:	0d1b      	lsrs	r3, r3, #20
 8014928:	051b      	lsls	r3, r3, #20
 801492a:	429a      	cmp	r2, r3
 801492c:	d1a1      	bne.n	8014872 <_strtod_l+0xa1a>
 801492e:	4640      	mov	r0, r8
 8014930:	4649      	mov	r1, r9
 8014932:	f7ec f9c1 	bl	8000cb8 <__aeabi_d2lz>
 8014936:	f7eb fe31 	bl	800059c <__aeabi_l2d>
 801493a:	4602      	mov	r2, r0
 801493c:	460b      	mov	r3, r1
 801493e:	4640      	mov	r0, r8
 8014940:	4649      	mov	r1, r9
 8014942:	f7eb fca1 	bl	8000288 <__aeabi_dsub>
 8014946:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014948:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801494c:	ea43 030a 	orr.w	r3, r3, sl
 8014950:	4313      	orrs	r3, r2
 8014952:	4680      	mov	r8, r0
 8014954:	4689      	mov	r9, r1
 8014956:	d053      	beq.n	8014a00 <_strtod_l+0xba8>
 8014958:	a335      	add	r3, pc, #212	; (adr r3, 8014a30 <_strtod_l+0xbd8>)
 801495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801495e:	f7ec f8bd 	bl	8000adc <__aeabi_dcmplt>
 8014962:	2800      	cmp	r0, #0
 8014964:	f47f acce 	bne.w	8014304 <_strtod_l+0x4ac>
 8014968:	a333      	add	r3, pc, #204	; (adr r3, 8014a38 <_strtod_l+0xbe0>)
 801496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801496e:	4640      	mov	r0, r8
 8014970:	4649      	mov	r1, r9
 8014972:	f7ec f8d1 	bl	8000b18 <__aeabi_dcmpgt>
 8014976:	2800      	cmp	r0, #0
 8014978:	f43f af7b 	beq.w	8014872 <_strtod_l+0xa1a>
 801497c:	e4c2      	b.n	8014304 <_strtod_l+0x4ac>
 801497e:	9b04      	ldr	r3, [sp, #16]
 8014980:	b333      	cbz	r3, 80149d0 <_strtod_l+0xb78>
 8014982:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014984:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014988:	d822      	bhi.n	80149d0 <_strtod_l+0xb78>
 801498a:	a32d      	add	r3, pc, #180	; (adr r3, 8014a40 <_strtod_l+0xbe8>)
 801498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014990:	4640      	mov	r0, r8
 8014992:	4649      	mov	r1, r9
 8014994:	f7ec f8ac 	bl	8000af0 <__aeabi_dcmple>
 8014998:	b1a0      	cbz	r0, 80149c4 <_strtod_l+0xb6c>
 801499a:	4649      	mov	r1, r9
 801499c:	4640      	mov	r0, r8
 801499e:	f7ec f903 	bl	8000ba8 <__aeabi_d2uiz>
 80149a2:	2801      	cmp	r0, #1
 80149a4:	bf38      	it	cc
 80149a6:	2001      	movcc	r0, #1
 80149a8:	f7eb fdac 	bl	8000504 <__aeabi_ui2d>
 80149ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149ae:	4680      	mov	r8, r0
 80149b0:	4689      	mov	r9, r1
 80149b2:	bb13      	cbnz	r3, 80149fa <_strtod_l+0xba2>
 80149b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80149b8:	9014      	str	r0, [sp, #80]	; 0x50
 80149ba:	9315      	str	r3, [sp, #84]	; 0x54
 80149bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80149c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80149c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80149c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80149cc:	1a9b      	subs	r3, r3, r2
 80149ce:	930d      	str	r3, [sp, #52]	; 0x34
 80149d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80149d4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80149d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80149dc:	f001 ff8a 	bl	80168f4 <__ulp>
 80149e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80149e4:	ec53 2b10 	vmov	r2, r3, d0
 80149e8:	f7eb fe06 	bl	80005f8 <__aeabi_dmul>
 80149ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80149f0:	f7eb fc4c 	bl	800028c <__adddf3>
 80149f4:	4682      	mov	sl, r0
 80149f6:	468b      	mov	fp, r1
 80149f8:	e78f      	b.n	801491a <_strtod_l+0xac2>
 80149fa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80149fe:	e7dd      	b.n	80149bc <_strtod_l+0xb64>
 8014a00:	a311      	add	r3, pc, #68	; (adr r3, 8014a48 <_strtod_l+0xbf0>)
 8014a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a06:	f7ec f869 	bl	8000adc <__aeabi_dcmplt>
 8014a0a:	e7b4      	b.n	8014976 <_strtod_l+0xb1e>
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	930e      	str	r3, [sp, #56]	; 0x38
 8014a10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014a12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014a14:	6013      	str	r3, [r2, #0]
 8014a16:	f7ff ba65 	b.w	8013ee4 <_strtod_l+0x8c>
 8014a1a:	2b65      	cmp	r3, #101	; 0x65
 8014a1c:	f43f ab5d 	beq.w	80140da <_strtod_l+0x282>
 8014a20:	2b45      	cmp	r3, #69	; 0x45
 8014a22:	f43f ab5a 	beq.w	80140da <_strtod_l+0x282>
 8014a26:	2201      	movs	r2, #1
 8014a28:	f7ff bb92 	b.w	8014150 <_strtod_l+0x2f8>
 8014a2c:	f3af 8000 	nop.w
 8014a30:	94a03595 	.word	0x94a03595
 8014a34:	3fdfffff 	.word	0x3fdfffff
 8014a38:	35afe535 	.word	0x35afe535
 8014a3c:	3fe00000 	.word	0x3fe00000
 8014a40:	ffc00000 	.word	0xffc00000
 8014a44:	41dfffff 	.word	0x41dfffff
 8014a48:	94a03595 	.word	0x94a03595
 8014a4c:	3fcfffff 	.word	0x3fcfffff
 8014a50:	3ff00000 	.word	0x3ff00000
 8014a54:	7ff00000 	.word	0x7ff00000
 8014a58:	7fe00000 	.word	0x7fe00000
 8014a5c:	7c9fffff 	.word	0x7c9fffff
 8014a60:	3fe00000 	.word	0x3fe00000
 8014a64:	bff00000 	.word	0xbff00000
 8014a68:	7fefffff 	.word	0x7fefffff

08014a6c <_strtod_r>:
 8014a6c:	4b01      	ldr	r3, [pc, #4]	; (8014a74 <_strtod_r+0x8>)
 8014a6e:	f7ff b9f3 	b.w	8013e58 <_strtod_l>
 8014a72:	bf00      	nop
 8014a74:	20000204 	.word	0x20000204

08014a78 <strtod>:
 8014a78:	460a      	mov	r2, r1
 8014a7a:	4601      	mov	r1, r0
 8014a7c:	4802      	ldr	r0, [pc, #8]	; (8014a88 <strtod+0x10>)
 8014a7e:	4b03      	ldr	r3, [pc, #12]	; (8014a8c <strtod+0x14>)
 8014a80:	6800      	ldr	r0, [r0, #0]
 8014a82:	f7ff b9e9 	b.w	8013e58 <_strtod_l>
 8014a86:	bf00      	nop
 8014a88:	2000019c 	.word	0x2000019c
 8014a8c:	20000204 	.word	0x20000204

08014a90 <_strtol_l.isra.0>:
 8014a90:	2b01      	cmp	r3, #1
 8014a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a96:	d001      	beq.n	8014a9c <_strtol_l.isra.0+0xc>
 8014a98:	2b24      	cmp	r3, #36	; 0x24
 8014a9a:	d906      	bls.n	8014aaa <_strtol_l.isra.0+0x1a>
 8014a9c:	f7fe fa54 	bl	8012f48 <__errno>
 8014aa0:	2316      	movs	r3, #22
 8014aa2:	6003      	str	r3, [r0, #0]
 8014aa4:	2000      	movs	r0, #0
 8014aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014aaa:	4f3a      	ldr	r7, [pc, #232]	; (8014b94 <_strtol_l.isra.0+0x104>)
 8014aac:	468e      	mov	lr, r1
 8014aae:	4676      	mov	r6, lr
 8014ab0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014ab4:	5de5      	ldrb	r5, [r4, r7]
 8014ab6:	f015 0508 	ands.w	r5, r5, #8
 8014aba:	d1f8      	bne.n	8014aae <_strtol_l.isra.0+0x1e>
 8014abc:	2c2d      	cmp	r4, #45	; 0x2d
 8014abe:	d134      	bne.n	8014b2a <_strtol_l.isra.0+0x9a>
 8014ac0:	f89e 4000 	ldrb.w	r4, [lr]
 8014ac4:	f04f 0801 	mov.w	r8, #1
 8014ac8:	f106 0e02 	add.w	lr, r6, #2
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d05c      	beq.n	8014b8a <_strtol_l.isra.0+0xfa>
 8014ad0:	2b10      	cmp	r3, #16
 8014ad2:	d10c      	bne.n	8014aee <_strtol_l.isra.0+0x5e>
 8014ad4:	2c30      	cmp	r4, #48	; 0x30
 8014ad6:	d10a      	bne.n	8014aee <_strtol_l.isra.0+0x5e>
 8014ad8:	f89e 4000 	ldrb.w	r4, [lr]
 8014adc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014ae0:	2c58      	cmp	r4, #88	; 0x58
 8014ae2:	d14d      	bne.n	8014b80 <_strtol_l.isra.0+0xf0>
 8014ae4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014ae8:	2310      	movs	r3, #16
 8014aea:	f10e 0e02 	add.w	lr, lr, #2
 8014aee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8014af2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014af6:	2600      	movs	r6, #0
 8014af8:	fbbc f9f3 	udiv	r9, ip, r3
 8014afc:	4635      	mov	r5, r6
 8014afe:	fb03 ca19 	mls	sl, r3, r9, ip
 8014b02:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014b06:	2f09      	cmp	r7, #9
 8014b08:	d818      	bhi.n	8014b3c <_strtol_l.isra.0+0xac>
 8014b0a:	463c      	mov	r4, r7
 8014b0c:	42a3      	cmp	r3, r4
 8014b0e:	dd24      	ble.n	8014b5a <_strtol_l.isra.0+0xca>
 8014b10:	2e00      	cmp	r6, #0
 8014b12:	db1f      	blt.n	8014b54 <_strtol_l.isra.0+0xc4>
 8014b14:	45a9      	cmp	r9, r5
 8014b16:	d31d      	bcc.n	8014b54 <_strtol_l.isra.0+0xc4>
 8014b18:	d101      	bne.n	8014b1e <_strtol_l.isra.0+0x8e>
 8014b1a:	45a2      	cmp	sl, r4
 8014b1c:	db1a      	blt.n	8014b54 <_strtol_l.isra.0+0xc4>
 8014b1e:	fb05 4503 	mla	r5, r5, r3, r4
 8014b22:	2601      	movs	r6, #1
 8014b24:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014b28:	e7eb      	b.n	8014b02 <_strtol_l.isra.0+0x72>
 8014b2a:	2c2b      	cmp	r4, #43	; 0x2b
 8014b2c:	bf08      	it	eq
 8014b2e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8014b32:	46a8      	mov	r8, r5
 8014b34:	bf08      	it	eq
 8014b36:	f106 0e02 	addeq.w	lr, r6, #2
 8014b3a:	e7c7      	b.n	8014acc <_strtol_l.isra.0+0x3c>
 8014b3c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014b40:	2f19      	cmp	r7, #25
 8014b42:	d801      	bhi.n	8014b48 <_strtol_l.isra.0+0xb8>
 8014b44:	3c37      	subs	r4, #55	; 0x37
 8014b46:	e7e1      	b.n	8014b0c <_strtol_l.isra.0+0x7c>
 8014b48:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014b4c:	2f19      	cmp	r7, #25
 8014b4e:	d804      	bhi.n	8014b5a <_strtol_l.isra.0+0xca>
 8014b50:	3c57      	subs	r4, #87	; 0x57
 8014b52:	e7db      	b.n	8014b0c <_strtol_l.isra.0+0x7c>
 8014b54:	f04f 36ff 	mov.w	r6, #4294967295
 8014b58:	e7e4      	b.n	8014b24 <_strtol_l.isra.0+0x94>
 8014b5a:	2e00      	cmp	r6, #0
 8014b5c:	da05      	bge.n	8014b6a <_strtol_l.isra.0+0xda>
 8014b5e:	2322      	movs	r3, #34	; 0x22
 8014b60:	6003      	str	r3, [r0, #0]
 8014b62:	4665      	mov	r5, ip
 8014b64:	b942      	cbnz	r2, 8014b78 <_strtol_l.isra.0+0xe8>
 8014b66:	4628      	mov	r0, r5
 8014b68:	e79d      	b.n	8014aa6 <_strtol_l.isra.0+0x16>
 8014b6a:	f1b8 0f00 	cmp.w	r8, #0
 8014b6e:	d000      	beq.n	8014b72 <_strtol_l.isra.0+0xe2>
 8014b70:	426d      	negs	r5, r5
 8014b72:	2a00      	cmp	r2, #0
 8014b74:	d0f7      	beq.n	8014b66 <_strtol_l.isra.0+0xd6>
 8014b76:	b10e      	cbz	r6, 8014b7c <_strtol_l.isra.0+0xec>
 8014b78:	f10e 31ff 	add.w	r1, lr, #4294967295
 8014b7c:	6011      	str	r1, [r2, #0]
 8014b7e:	e7f2      	b.n	8014b66 <_strtol_l.isra.0+0xd6>
 8014b80:	2430      	movs	r4, #48	; 0x30
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d1b3      	bne.n	8014aee <_strtol_l.isra.0+0x5e>
 8014b86:	2308      	movs	r3, #8
 8014b88:	e7b1      	b.n	8014aee <_strtol_l.isra.0+0x5e>
 8014b8a:	2c30      	cmp	r4, #48	; 0x30
 8014b8c:	d0a4      	beq.n	8014ad8 <_strtol_l.isra.0+0x48>
 8014b8e:	230a      	movs	r3, #10
 8014b90:	e7ad      	b.n	8014aee <_strtol_l.isra.0+0x5e>
 8014b92:	bf00      	nop
 8014b94:	0801a571 	.word	0x0801a571

08014b98 <_strtol_r>:
 8014b98:	f7ff bf7a 	b.w	8014a90 <_strtol_l.isra.0>

08014b9c <_write_r>:
 8014b9c:	b538      	push	{r3, r4, r5, lr}
 8014b9e:	4d07      	ldr	r5, [pc, #28]	; (8014bbc <_write_r+0x20>)
 8014ba0:	4604      	mov	r4, r0
 8014ba2:	4608      	mov	r0, r1
 8014ba4:	4611      	mov	r1, r2
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	602a      	str	r2, [r5, #0]
 8014baa:	461a      	mov	r2, r3
 8014bac:	f7ee fc03 	bl	80033b6 <_write>
 8014bb0:	1c43      	adds	r3, r0, #1
 8014bb2:	d102      	bne.n	8014bba <_write_r+0x1e>
 8014bb4:	682b      	ldr	r3, [r5, #0]
 8014bb6:	b103      	cbz	r3, 8014bba <_write_r+0x1e>
 8014bb8:	6023      	str	r3, [r4, #0]
 8014bba:	bd38      	pop	{r3, r4, r5, pc}
 8014bbc:	2000337c 	.word	0x2000337c

08014bc0 <_close_r>:
 8014bc0:	b538      	push	{r3, r4, r5, lr}
 8014bc2:	4d06      	ldr	r5, [pc, #24]	; (8014bdc <_close_r+0x1c>)
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	4604      	mov	r4, r0
 8014bc8:	4608      	mov	r0, r1
 8014bca:	602b      	str	r3, [r5, #0]
 8014bcc:	f7ee fc0f 	bl	80033ee <_close>
 8014bd0:	1c43      	adds	r3, r0, #1
 8014bd2:	d102      	bne.n	8014bda <_close_r+0x1a>
 8014bd4:	682b      	ldr	r3, [r5, #0]
 8014bd6:	b103      	cbz	r3, 8014bda <_close_r+0x1a>
 8014bd8:	6023      	str	r3, [r4, #0]
 8014bda:	bd38      	pop	{r3, r4, r5, pc}
 8014bdc:	2000337c 	.word	0x2000337c

08014be0 <quorem>:
 8014be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014be4:	6903      	ldr	r3, [r0, #16]
 8014be6:	690c      	ldr	r4, [r1, #16]
 8014be8:	42a3      	cmp	r3, r4
 8014bea:	4607      	mov	r7, r0
 8014bec:	f2c0 8081 	blt.w	8014cf2 <quorem+0x112>
 8014bf0:	3c01      	subs	r4, #1
 8014bf2:	f101 0814 	add.w	r8, r1, #20
 8014bf6:	f100 0514 	add.w	r5, r0, #20
 8014bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014bfe:	9301      	str	r3, [sp, #4]
 8014c00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014c04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c08:	3301      	adds	r3, #1
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014c10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014c14:	fbb2 f6f3 	udiv	r6, r2, r3
 8014c18:	d331      	bcc.n	8014c7e <quorem+0x9e>
 8014c1a:	f04f 0e00 	mov.w	lr, #0
 8014c1e:	4640      	mov	r0, r8
 8014c20:	46ac      	mov	ip, r5
 8014c22:	46f2      	mov	sl, lr
 8014c24:	f850 2b04 	ldr.w	r2, [r0], #4
 8014c28:	b293      	uxth	r3, r2
 8014c2a:	fb06 e303 	mla	r3, r6, r3, lr
 8014c2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014c32:	b29b      	uxth	r3, r3
 8014c34:	ebaa 0303 	sub.w	r3, sl, r3
 8014c38:	0c12      	lsrs	r2, r2, #16
 8014c3a:	f8dc a000 	ldr.w	sl, [ip]
 8014c3e:	fb06 e202 	mla	r2, r6, r2, lr
 8014c42:	fa13 f38a 	uxtah	r3, r3, sl
 8014c46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014c4a:	fa1f fa82 	uxth.w	sl, r2
 8014c4e:	f8dc 2000 	ldr.w	r2, [ip]
 8014c52:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8014c56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014c5a:	b29b      	uxth	r3, r3
 8014c5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c60:	4581      	cmp	r9, r0
 8014c62:	f84c 3b04 	str.w	r3, [ip], #4
 8014c66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014c6a:	d2db      	bcs.n	8014c24 <quorem+0x44>
 8014c6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8014c70:	b92b      	cbnz	r3, 8014c7e <quorem+0x9e>
 8014c72:	9b01      	ldr	r3, [sp, #4]
 8014c74:	3b04      	subs	r3, #4
 8014c76:	429d      	cmp	r5, r3
 8014c78:	461a      	mov	r2, r3
 8014c7a:	d32e      	bcc.n	8014cda <quorem+0xfa>
 8014c7c:	613c      	str	r4, [r7, #16]
 8014c7e:	4638      	mov	r0, r7
 8014c80:	f001 fd94 	bl	80167ac <__mcmp>
 8014c84:	2800      	cmp	r0, #0
 8014c86:	db24      	blt.n	8014cd2 <quorem+0xf2>
 8014c88:	3601      	adds	r6, #1
 8014c8a:	4628      	mov	r0, r5
 8014c8c:	f04f 0c00 	mov.w	ip, #0
 8014c90:	f858 2b04 	ldr.w	r2, [r8], #4
 8014c94:	f8d0 e000 	ldr.w	lr, [r0]
 8014c98:	b293      	uxth	r3, r2
 8014c9a:	ebac 0303 	sub.w	r3, ip, r3
 8014c9e:	0c12      	lsrs	r2, r2, #16
 8014ca0:	fa13 f38e 	uxtah	r3, r3, lr
 8014ca4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014ca8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014cac:	b29b      	uxth	r3, r3
 8014cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014cb2:	45c1      	cmp	r9, r8
 8014cb4:	f840 3b04 	str.w	r3, [r0], #4
 8014cb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014cbc:	d2e8      	bcs.n	8014c90 <quorem+0xb0>
 8014cbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014cc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014cc6:	b922      	cbnz	r2, 8014cd2 <quorem+0xf2>
 8014cc8:	3b04      	subs	r3, #4
 8014cca:	429d      	cmp	r5, r3
 8014ccc:	461a      	mov	r2, r3
 8014cce:	d30a      	bcc.n	8014ce6 <quorem+0x106>
 8014cd0:	613c      	str	r4, [r7, #16]
 8014cd2:	4630      	mov	r0, r6
 8014cd4:	b003      	add	sp, #12
 8014cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cda:	6812      	ldr	r2, [r2, #0]
 8014cdc:	3b04      	subs	r3, #4
 8014cde:	2a00      	cmp	r2, #0
 8014ce0:	d1cc      	bne.n	8014c7c <quorem+0x9c>
 8014ce2:	3c01      	subs	r4, #1
 8014ce4:	e7c7      	b.n	8014c76 <quorem+0x96>
 8014ce6:	6812      	ldr	r2, [r2, #0]
 8014ce8:	3b04      	subs	r3, #4
 8014cea:	2a00      	cmp	r2, #0
 8014cec:	d1f0      	bne.n	8014cd0 <quorem+0xf0>
 8014cee:	3c01      	subs	r4, #1
 8014cf0:	e7eb      	b.n	8014cca <quorem+0xea>
 8014cf2:	2000      	movs	r0, #0
 8014cf4:	e7ee      	b.n	8014cd4 <quorem+0xf4>
	...

08014cf8 <_dtoa_r>:
 8014cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cfc:	ed2d 8b02 	vpush	{d8}
 8014d00:	ec57 6b10 	vmov	r6, r7, d0
 8014d04:	b095      	sub	sp, #84	; 0x54
 8014d06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014d08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014d0c:	9105      	str	r1, [sp, #20]
 8014d0e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014d12:	4604      	mov	r4, r0
 8014d14:	9209      	str	r2, [sp, #36]	; 0x24
 8014d16:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d18:	b975      	cbnz	r5, 8014d38 <_dtoa_r+0x40>
 8014d1a:	2010      	movs	r0, #16
 8014d1c:	f001 fa56 	bl	80161cc <malloc>
 8014d20:	4602      	mov	r2, r0
 8014d22:	6260      	str	r0, [r4, #36]	; 0x24
 8014d24:	b920      	cbnz	r0, 8014d30 <_dtoa_r+0x38>
 8014d26:	4bb2      	ldr	r3, [pc, #712]	; (8014ff0 <_dtoa_r+0x2f8>)
 8014d28:	21ea      	movs	r1, #234	; 0xea
 8014d2a:	48b2      	ldr	r0, [pc, #712]	; (8014ff4 <_dtoa_r+0x2fc>)
 8014d2c:	f002 fe62 	bl	80179f4 <__assert_func>
 8014d30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014d34:	6005      	str	r5, [r0, #0]
 8014d36:	60c5      	str	r5, [r0, #12]
 8014d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d3a:	6819      	ldr	r1, [r3, #0]
 8014d3c:	b151      	cbz	r1, 8014d54 <_dtoa_r+0x5c>
 8014d3e:	685a      	ldr	r2, [r3, #4]
 8014d40:	604a      	str	r2, [r1, #4]
 8014d42:	2301      	movs	r3, #1
 8014d44:	4093      	lsls	r3, r2
 8014d46:	608b      	str	r3, [r1, #8]
 8014d48:	4620      	mov	r0, r4
 8014d4a:	f001 faa7 	bl	801629c <_Bfree>
 8014d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d50:	2200      	movs	r2, #0
 8014d52:	601a      	str	r2, [r3, #0]
 8014d54:	1e3b      	subs	r3, r7, #0
 8014d56:	bfb9      	ittee	lt
 8014d58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014d5c:	9303      	strlt	r3, [sp, #12]
 8014d5e:	2300      	movge	r3, #0
 8014d60:	f8c8 3000 	strge.w	r3, [r8]
 8014d64:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014d68:	4ba3      	ldr	r3, [pc, #652]	; (8014ff8 <_dtoa_r+0x300>)
 8014d6a:	bfbc      	itt	lt
 8014d6c:	2201      	movlt	r2, #1
 8014d6e:	f8c8 2000 	strlt.w	r2, [r8]
 8014d72:	ea33 0309 	bics.w	r3, r3, r9
 8014d76:	d11b      	bne.n	8014db0 <_dtoa_r+0xb8>
 8014d78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014d7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8014d7e:	6013      	str	r3, [r2, #0]
 8014d80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014d84:	4333      	orrs	r3, r6
 8014d86:	f000 857a 	beq.w	801587e <_dtoa_r+0xb86>
 8014d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d8c:	b963      	cbnz	r3, 8014da8 <_dtoa_r+0xb0>
 8014d8e:	4b9b      	ldr	r3, [pc, #620]	; (8014ffc <_dtoa_r+0x304>)
 8014d90:	e024      	b.n	8014ddc <_dtoa_r+0xe4>
 8014d92:	4b9b      	ldr	r3, [pc, #620]	; (8015000 <_dtoa_r+0x308>)
 8014d94:	9300      	str	r3, [sp, #0]
 8014d96:	3308      	adds	r3, #8
 8014d98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014d9a:	6013      	str	r3, [r2, #0]
 8014d9c:	9800      	ldr	r0, [sp, #0]
 8014d9e:	b015      	add	sp, #84	; 0x54
 8014da0:	ecbd 8b02 	vpop	{d8}
 8014da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014da8:	4b94      	ldr	r3, [pc, #592]	; (8014ffc <_dtoa_r+0x304>)
 8014daa:	9300      	str	r3, [sp, #0]
 8014dac:	3303      	adds	r3, #3
 8014dae:	e7f3      	b.n	8014d98 <_dtoa_r+0xa0>
 8014db0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014db4:	2200      	movs	r2, #0
 8014db6:	ec51 0b17 	vmov	r0, r1, d7
 8014dba:	2300      	movs	r3, #0
 8014dbc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014dc0:	f7eb fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 8014dc4:	4680      	mov	r8, r0
 8014dc6:	b158      	cbz	r0, 8014de0 <_dtoa_r+0xe8>
 8014dc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014dca:	2301      	movs	r3, #1
 8014dcc:	6013      	str	r3, [r2, #0]
 8014dce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	f000 8551 	beq.w	8015878 <_dtoa_r+0xb80>
 8014dd6:	488b      	ldr	r0, [pc, #556]	; (8015004 <_dtoa_r+0x30c>)
 8014dd8:	6018      	str	r0, [r3, #0]
 8014dda:	1e43      	subs	r3, r0, #1
 8014ddc:	9300      	str	r3, [sp, #0]
 8014dde:	e7dd      	b.n	8014d9c <_dtoa_r+0xa4>
 8014de0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014de4:	aa12      	add	r2, sp, #72	; 0x48
 8014de6:	a913      	add	r1, sp, #76	; 0x4c
 8014de8:	4620      	mov	r0, r4
 8014dea:	f001 fdff 	bl	80169ec <__d2b>
 8014dee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014df2:	4683      	mov	fp, r0
 8014df4:	2d00      	cmp	r5, #0
 8014df6:	d07c      	beq.n	8014ef2 <_dtoa_r+0x1fa>
 8014df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dfa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8014dfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e02:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8014e06:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014e0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014e0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014e12:	4b7d      	ldr	r3, [pc, #500]	; (8015008 <_dtoa_r+0x310>)
 8014e14:	2200      	movs	r2, #0
 8014e16:	4630      	mov	r0, r6
 8014e18:	4639      	mov	r1, r7
 8014e1a:	f7eb fa35 	bl	8000288 <__aeabi_dsub>
 8014e1e:	a36e      	add	r3, pc, #440	; (adr r3, 8014fd8 <_dtoa_r+0x2e0>)
 8014e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e24:	f7eb fbe8 	bl	80005f8 <__aeabi_dmul>
 8014e28:	a36d      	add	r3, pc, #436	; (adr r3, 8014fe0 <_dtoa_r+0x2e8>)
 8014e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e2e:	f7eb fa2d 	bl	800028c <__adddf3>
 8014e32:	4606      	mov	r6, r0
 8014e34:	4628      	mov	r0, r5
 8014e36:	460f      	mov	r7, r1
 8014e38:	f7eb fb74 	bl	8000524 <__aeabi_i2d>
 8014e3c:	a36a      	add	r3, pc, #424	; (adr r3, 8014fe8 <_dtoa_r+0x2f0>)
 8014e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e42:	f7eb fbd9 	bl	80005f8 <__aeabi_dmul>
 8014e46:	4602      	mov	r2, r0
 8014e48:	460b      	mov	r3, r1
 8014e4a:	4630      	mov	r0, r6
 8014e4c:	4639      	mov	r1, r7
 8014e4e:	f7eb fa1d 	bl	800028c <__adddf3>
 8014e52:	4606      	mov	r6, r0
 8014e54:	460f      	mov	r7, r1
 8014e56:	f7eb fe7f 	bl	8000b58 <__aeabi_d2iz>
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	4682      	mov	sl, r0
 8014e5e:	2300      	movs	r3, #0
 8014e60:	4630      	mov	r0, r6
 8014e62:	4639      	mov	r1, r7
 8014e64:	f7eb fe3a 	bl	8000adc <__aeabi_dcmplt>
 8014e68:	b148      	cbz	r0, 8014e7e <_dtoa_r+0x186>
 8014e6a:	4650      	mov	r0, sl
 8014e6c:	f7eb fb5a 	bl	8000524 <__aeabi_i2d>
 8014e70:	4632      	mov	r2, r6
 8014e72:	463b      	mov	r3, r7
 8014e74:	f7eb fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 8014e78:	b908      	cbnz	r0, 8014e7e <_dtoa_r+0x186>
 8014e7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014e7e:	f1ba 0f16 	cmp.w	sl, #22
 8014e82:	d854      	bhi.n	8014f2e <_dtoa_r+0x236>
 8014e84:	4b61      	ldr	r3, [pc, #388]	; (801500c <_dtoa_r+0x314>)
 8014e86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014e92:	f7eb fe23 	bl	8000adc <__aeabi_dcmplt>
 8014e96:	2800      	cmp	r0, #0
 8014e98:	d04b      	beq.n	8014f32 <_dtoa_r+0x23a>
 8014e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	930e      	str	r3, [sp, #56]	; 0x38
 8014ea2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ea4:	1b5d      	subs	r5, r3, r5
 8014ea6:	1e6b      	subs	r3, r5, #1
 8014ea8:	9304      	str	r3, [sp, #16]
 8014eaa:	bf43      	ittte	mi
 8014eac:	2300      	movmi	r3, #0
 8014eae:	f1c5 0801 	rsbmi	r8, r5, #1
 8014eb2:	9304      	strmi	r3, [sp, #16]
 8014eb4:	f04f 0800 	movpl.w	r8, #0
 8014eb8:	f1ba 0f00 	cmp.w	sl, #0
 8014ebc:	db3b      	blt.n	8014f36 <_dtoa_r+0x23e>
 8014ebe:	9b04      	ldr	r3, [sp, #16]
 8014ec0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8014ec4:	4453      	add	r3, sl
 8014ec6:	9304      	str	r3, [sp, #16]
 8014ec8:	2300      	movs	r3, #0
 8014eca:	9306      	str	r3, [sp, #24]
 8014ecc:	9b05      	ldr	r3, [sp, #20]
 8014ece:	2b09      	cmp	r3, #9
 8014ed0:	d869      	bhi.n	8014fa6 <_dtoa_r+0x2ae>
 8014ed2:	2b05      	cmp	r3, #5
 8014ed4:	bfc4      	itt	gt
 8014ed6:	3b04      	subgt	r3, #4
 8014ed8:	9305      	strgt	r3, [sp, #20]
 8014eda:	9b05      	ldr	r3, [sp, #20]
 8014edc:	f1a3 0302 	sub.w	r3, r3, #2
 8014ee0:	bfcc      	ite	gt
 8014ee2:	2500      	movgt	r5, #0
 8014ee4:	2501      	movle	r5, #1
 8014ee6:	2b03      	cmp	r3, #3
 8014ee8:	d869      	bhi.n	8014fbe <_dtoa_r+0x2c6>
 8014eea:	e8df f003 	tbb	[pc, r3]
 8014eee:	4e2c      	.short	0x4e2c
 8014ef0:	5a4c      	.short	0x5a4c
 8014ef2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8014ef6:	441d      	add	r5, r3
 8014ef8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014efc:	2b20      	cmp	r3, #32
 8014efe:	bfc1      	itttt	gt
 8014f00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014f04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014f08:	fa09 f303 	lslgt.w	r3, r9, r3
 8014f0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014f10:	bfda      	itte	le
 8014f12:	f1c3 0320 	rsble	r3, r3, #32
 8014f16:	fa06 f003 	lslle.w	r0, r6, r3
 8014f1a:	4318      	orrgt	r0, r3
 8014f1c:	f7eb faf2 	bl	8000504 <__aeabi_ui2d>
 8014f20:	2301      	movs	r3, #1
 8014f22:	4606      	mov	r6, r0
 8014f24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014f28:	3d01      	subs	r5, #1
 8014f2a:	9310      	str	r3, [sp, #64]	; 0x40
 8014f2c:	e771      	b.n	8014e12 <_dtoa_r+0x11a>
 8014f2e:	2301      	movs	r3, #1
 8014f30:	e7b6      	b.n	8014ea0 <_dtoa_r+0x1a8>
 8014f32:	900e      	str	r0, [sp, #56]	; 0x38
 8014f34:	e7b5      	b.n	8014ea2 <_dtoa_r+0x1aa>
 8014f36:	f1ca 0300 	rsb	r3, sl, #0
 8014f3a:	9306      	str	r3, [sp, #24]
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	eba8 080a 	sub.w	r8, r8, sl
 8014f42:	930d      	str	r3, [sp, #52]	; 0x34
 8014f44:	e7c2      	b.n	8014ecc <_dtoa_r+0x1d4>
 8014f46:	2300      	movs	r3, #0
 8014f48:	9308      	str	r3, [sp, #32]
 8014f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	dc39      	bgt.n	8014fc4 <_dtoa_r+0x2cc>
 8014f50:	f04f 0901 	mov.w	r9, #1
 8014f54:	f8cd 9004 	str.w	r9, [sp, #4]
 8014f58:	464b      	mov	r3, r9
 8014f5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014f5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014f60:	2200      	movs	r2, #0
 8014f62:	6042      	str	r2, [r0, #4]
 8014f64:	2204      	movs	r2, #4
 8014f66:	f102 0614 	add.w	r6, r2, #20
 8014f6a:	429e      	cmp	r6, r3
 8014f6c:	6841      	ldr	r1, [r0, #4]
 8014f6e:	d92f      	bls.n	8014fd0 <_dtoa_r+0x2d8>
 8014f70:	4620      	mov	r0, r4
 8014f72:	f001 f953 	bl	801621c <_Balloc>
 8014f76:	9000      	str	r0, [sp, #0]
 8014f78:	2800      	cmp	r0, #0
 8014f7a:	d14b      	bne.n	8015014 <_dtoa_r+0x31c>
 8014f7c:	4b24      	ldr	r3, [pc, #144]	; (8015010 <_dtoa_r+0x318>)
 8014f7e:	4602      	mov	r2, r0
 8014f80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014f84:	e6d1      	b.n	8014d2a <_dtoa_r+0x32>
 8014f86:	2301      	movs	r3, #1
 8014f88:	e7de      	b.n	8014f48 <_dtoa_r+0x250>
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	9308      	str	r3, [sp, #32]
 8014f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f90:	eb0a 0903 	add.w	r9, sl, r3
 8014f94:	f109 0301 	add.w	r3, r9, #1
 8014f98:	2b01      	cmp	r3, #1
 8014f9a:	9301      	str	r3, [sp, #4]
 8014f9c:	bfb8      	it	lt
 8014f9e:	2301      	movlt	r3, #1
 8014fa0:	e7dd      	b.n	8014f5e <_dtoa_r+0x266>
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	e7f2      	b.n	8014f8c <_dtoa_r+0x294>
 8014fa6:	2501      	movs	r5, #1
 8014fa8:	2300      	movs	r3, #0
 8014faa:	9305      	str	r3, [sp, #20]
 8014fac:	9508      	str	r5, [sp, #32]
 8014fae:	f04f 39ff 	mov.w	r9, #4294967295
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8014fb8:	2312      	movs	r3, #18
 8014fba:	9209      	str	r2, [sp, #36]	; 0x24
 8014fbc:	e7cf      	b.n	8014f5e <_dtoa_r+0x266>
 8014fbe:	2301      	movs	r3, #1
 8014fc0:	9308      	str	r3, [sp, #32]
 8014fc2:	e7f4      	b.n	8014fae <_dtoa_r+0x2b6>
 8014fc4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014fc8:	f8cd 9004 	str.w	r9, [sp, #4]
 8014fcc:	464b      	mov	r3, r9
 8014fce:	e7c6      	b.n	8014f5e <_dtoa_r+0x266>
 8014fd0:	3101      	adds	r1, #1
 8014fd2:	6041      	str	r1, [r0, #4]
 8014fd4:	0052      	lsls	r2, r2, #1
 8014fd6:	e7c6      	b.n	8014f66 <_dtoa_r+0x26e>
 8014fd8:	636f4361 	.word	0x636f4361
 8014fdc:	3fd287a7 	.word	0x3fd287a7
 8014fe0:	8b60c8b3 	.word	0x8b60c8b3
 8014fe4:	3fc68a28 	.word	0x3fc68a28
 8014fe8:	509f79fb 	.word	0x509f79fb
 8014fec:	3fd34413 	.word	0x3fd34413
 8014ff0:	0801a67e 	.word	0x0801a67e
 8014ff4:	0801a695 	.word	0x0801a695
 8014ff8:	7ff00000 	.word	0x7ff00000
 8014ffc:	0801a67a 	.word	0x0801a67a
 8015000:	0801a671 	.word	0x0801a671
 8015004:	0801a95a 	.word	0x0801a95a
 8015008:	3ff80000 	.word	0x3ff80000
 801500c:	0801a870 	.word	0x0801a870
 8015010:	0801a6f4 	.word	0x0801a6f4
 8015014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015016:	9a00      	ldr	r2, [sp, #0]
 8015018:	601a      	str	r2, [r3, #0]
 801501a:	9b01      	ldr	r3, [sp, #4]
 801501c:	2b0e      	cmp	r3, #14
 801501e:	f200 80ad 	bhi.w	801517c <_dtoa_r+0x484>
 8015022:	2d00      	cmp	r5, #0
 8015024:	f000 80aa 	beq.w	801517c <_dtoa_r+0x484>
 8015028:	f1ba 0f00 	cmp.w	sl, #0
 801502c:	dd36      	ble.n	801509c <_dtoa_r+0x3a4>
 801502e:	4ac3      	ldr	r2, [pc, #780]	; (801533c <_dtoa_r+0x644>)
 8015030:	f00a 030f 	and.w	r3, sl, #15
 8015034:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015038:	ed93 7b00 	vldr	d7, [r3]
 801503c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8015040:	ea4f 172a 	mov.w	r7, sl, asr #4
 8015044:	eeb0 8a47 	vmov.f32	s16, s14
 8015048:	eef0 8a67 	vmov.f32	s17, s15
 801504c:	d016      	beq.n	801507c <_dtoa_r+0x384>
 801504e:	4bbc      	ldr	r3, [pc, #752]	; (8015340 <_dtoa_r+0x648>)
 8015050:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015054:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015058:	f7eb fbf8 	bl	800084c <__aeabi_ddiv>
 801505c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015060:	f007 070f 	and.w	r7, r7, #15
 8015064:	2503      	movs	r5, #3
 8015066:	4eb6      	ldr	r6, [pc, #728]	; (8015340 <_dtoa_r+0x648>)
 8015068:	b957      	cbnz	r7, 8015080 <_dtoa_r+0x388>
 801506a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801506e:	ec53 2b18 	vmov	r2, r3, d8
 8015072:	f7eb fbeb 	bl	800084c <__aeabi_ddiv>
 8015076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801507a:	e029      	b.n	80150d0 <_dtoa_r+0x3d8>
 801507c:	2502      	movs	r5, #2
 801507e:	e7f2      	b.n	8015066 <_dtoa_r+0x36e>
 8015080:	07f9      	lsls	r1, r7, #31
 8015082:	d508      	bpl.n	8015096 <_dtoa_r+0x39e>
 8015084:	ec51 0b18 	vmov	r0, r1, d8
 8015088:	e9d6 2300 	ldrd	r2, r3, [r6]
 801508c:	f7eb fab4 	bl	80005f8 <__aeabi_dmul>
 8015090:	ec41 0b18 	vmov	d8, r0, r1
 8015094:	3501      	adds	r5, #1
 8015096:	107f      	asrs	r7, r7, #1
 8015098:	3608      	adds	r6, #8
 801509a:	e7e5      	b.n	8015068 <_dtoa_r+0x370>
 801509c:	f000 80a6 	beq.w	80151ec <_dtoa_r+0x4f4>
 80150a0:	f1ca 0600 	rsb	r6, sl, #0
 80150a4:	4ba5      	ldr	r3, [pc, #660]	; (801533c <_dtoa_r+0x644>)
 80150a6:	4fa6      	ldr	r7, [pc, #664]	; (8015340 <_dtoa_r+0x648>)
 80150a8:	f006 020f 	and.w	r2, r6, #15
 80150ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80150b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80150b8:	f7eb fa9e 	bl	80005f8 <__aeabi_dmul>
 80150bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150c0:	1136      	asrs	r6, r6, #4
 80150c2:	2300      	movs	r3, #0
 80150c4:	2502      	movs	r5, #2
 80150c6:	2e00      	cmp	r6, #0
 80150c8:	f040 8085 	bne.w	80151d6 <_dtoa_r+0x4de>
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d1d2      	bne.n	8015076 <_dtoa_r+0x37e>
 80150d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	f000 808c 	beq.w	80151f0 <_dtoa_r+0x4f8>
 80150d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80150dc:	4b99      	ldr	r3, [pc, #612]	; (8015344 <_dtoa_r+0x64c>)
 80150de:	2200      	movs	r2, #0
 80150e0:	4630      	mov	r0, r6
 80150e2:	4639      	mov	r1, r7
 80150e4:	f7eb fcfa 	bl	8000adc <__aeabi_dcmplt>
 80150e8:	2800      	cmp	r0, #0
 80150ea:	f000 8081 	beq.w	80151f0 <_dtoa_r+0x4f8>
 80150ee:	9b01      	ldr	r3, [sp, #4]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d07d      	beq.n	80151f0 <_dtoa_r+0x4f8>
 80150f4:	f1b9 0f00 	cmp.w	r9, #0
 80150f8:	dd3c      	ble.n	8015174 <_dtoa_r+0x47c>
 80150fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80150fe:	9307      	str	r3, [sp, #28]
 8015100:	2200      	movs	r2, #0
 8015102:	4b91      	ldr	r3, [pc, #580]	; (8015348 <_dtoa_r+0x650>)
 8015104:	4630      	mov	r0, r6
 8015106:	4639      	mov	r1, r7
 8015108:	f7eb fa76 	bl	80005f8 <__aeabi_dmul>
 801510c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015110:	3501      	adds	r5, #1
 8015112:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8015116:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801511a:	4628      	mov	r0, r5
 801511c:	f7eb fa02 	bl	8000524 <__aeabi_i2d>
 8015120:	4632      	mov	r2, r6
 8015122:	463b      	mov	r3, r7
 8015124:	f7eb fa68 	bl	80005f8 <__aeabi_dmul>
 8015128:	4b88      	ldr	r3, [pc, #544]	; (801534c <_dtoa_r+0x654>)
 801512a:	2200      	movs	r2, #0
 801512c:	f7eb f8ae 	bl	800028c <__adddf3>
 8015130:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8015134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015138:	9303      	str	r3, [sp, #12]
 801513a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801513c:	2b00      	cmp	r3, #0
 801513e:	d15c      	bne.n	80151fa <_dtoa_r+0x502>
 8015140:	4b83      	ldr	r3, [pc, #524]	; (8015350 <_dtoa_r+0x658>)
 8015142:	2200      	movs	r2, #0
 8015144:	4630      	mov	r0, r6
 8015146:	4639      	mov	r1, r7
 8015148:	f7eb f89e 	bl	8000288 <__aeabi_dsub>
 801514c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015150:	4606      	mov	r6, r0
 8015152:	460f      	mov	r7, r1
 8015154:	f7eb fce0 	bl	8000b18 <__aeabi_dcmpgt>
 8015158:	2800      	cmp	r0, #0
 801515a:	f040 8296 	bne.w	801568a <_dtoa_r+0x992>
 801515e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015162:	4630      	mov	r0, r6
 8015164:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015168:	4639      	mov	r1, r7
 801516a:	f7eb fcb7 	bl	8000adc <__aeabi_dcmplt>
 801516e:	2800      	cmp	r0, #0
 8015170:	f040 8288 	bne.w	8015684 <_dtoa_r+0x98c>
 8015174:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015178:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801517c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801517e:	2b00      	cmp	r3, #0
 8015180:	f2c0 8158 	blt.w	8015434 <_dtoa_r+0x73c>
 8015184:	f1ba 0f0e 	cmp.w	sl, #14
 8015188:	f300 8154 	bgt.w	8015434 <_dtoa_r+0x73c>
 801518c:	4b6b      	ldr	r3, [pc, #428]	; (801533c <_dtoa_r+0x644>)
 801518e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015192:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015198:	2b00      	cmp	r3, #0
 801519a:	f280 80e3 	bge.w	8015364 <_dtoa_r+0x66c>
 801519e:	9b01      	ldr	r3, [sp, #4]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	f300 80df 	bgt.w	8015364 <_dtoa_r+0x66c>
 80151a6:	f040 826d 	bne.w	8015684 <_dtoa_r+0x98c>
 80151aa:	4b69      	ldr	r3, [pc, #420]	; (8015350 <_dtoa_r+0x658>)
 80151ac:	2200      	movs	r2, #0
 80151ae:	4640      	mov	r0, r8
 80151b0:	4649      	mov	r1, r9
 80151b2:	f7eb fa21 	bl	80005f8 <__aeabi_dmul>
 80151b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151ba:	f7eb fca3 	bl	8000b04 <__aeabi_dcmpge>
 80151be:	9e01      	ldr	r6, [sp, #4]
 80151c0:	4637      	mov	r7, r6
 80151c2:	2800      	cmp	r0, #0
 80151c4:	f040 8243 	bne.w	801564e <_dtoa_r+0x956>
 80151c8:	9d00      	ldr	r5, [sp, #0]
 80151ca:	2331      	movs	r3, #49	; 0x31
 80151cc:	f805 3b01 	strb.w	r3, [r5], #1
 80151d0:	f10a 0a01 	add.w	sl, sl, #1
 80151d4:	e23f      	b.n	8015656 <_dtoa_r+0x95e>
 80151d6:	07f2      	lsls	r2, r6, #31
 80151d8:	d505      	bpl.n	80151e6 <_dtoa_r+0x4ee>
 80151da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80151de:	f7eb fa0b 	bl	80005f8 <__aeabi_dmul>
 80151e2:	3501      	adds	r5, #1
 80151e4:	2301      	movs	r3, #1
 80151e6:	1076      	asrs	r6, r6, #1
 80151e8:	3708      	adds	r7, #8
 80151ea:	e76c      	b.n	80150c6 <_dtoa_r+0x3ce>
 80151ec:	2502      	movs	r5, #2
 80151ee:	e76f      	b.n	80150d0 <_dtoa_r+0x3d8>
 80151f0:	9b01      	ldr	r3, [sp, #4]
 80151f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80151f6:	930c      	str	r3, [sp, #48]	; 0x30
 80151f8:	e78d      	b.n	8015116 <_dtoa_r+0x41e>
 80151fa:	9900      	ldr	r1, [sp, #0]
 80151fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80151fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015200:	4b4e      	ldr	r3, [pc, #312]	; (801533c <_dtoa_r+0x644>)
 8015202:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015206:	4401      	add	r1, r0
 8015208:	9102      	str	r1, [sp, #8]
 801520a:	9908      	ldr	r1, [sp, #32]
 801520c:	eeb0 8a47 	vmov.f32	s16, s14
 8015210:	eef0 8a67 	vmov.f32	s17, s15
 8015214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015218:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801521c:	2900      	cmp	r1, #0
 801521e:	d045      	beq.n	80152ac <_dtoa_r+0x5b4>
 8015220:	494c      	ldr	r1, [pc, #304]	; (8015354 <_dtoa_r+0x65c>)
 8015222:	2000      	movs	r0, #0
 8015224:	f7eb fb12 	bl	800084c <__aeabi_ddiv>
 8015228:	ec53 2b18 	vmov	r2, r3, d8
 801522c:	f7eb f82c 	bl	8000288 <__aeabi_dsub>
 8015230:	9d00      	ldr	r5, [sp, #0]
 8015232:	ec41 0b18 	vmov	d8, r0, r1
 8015236:	4639      	mov	r1, r7
 8015238:	4630      	mov	r0, r6
 801523a:	f7eb fc8d 	bl	8000b58 <__aeabi_d2iz>
 801523e:	900c      	str	r0, [sp, #48]	; 0x30
 8015240:	f7eb f970 	bl	8000524 <__aeabi_i2d>
 8015244:	4602      	mov	r2, r0
 8015246:	460b      	mov	r3, r1
 8015248:	4630      	mov	r0, r6
 801524a:	4639      	mov	r1, r7
 801524c:	f7eb f81c 	bl	8000288 <__aeabi_dsub>
 8015250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015252:	3330      	adds	r3, #48	; 0x30
 8015254:	f805 3b01 	strb.w	r3, [r5], #1
 8015258:	ec53 2b18 	vmov	r2, r3, d8
 801525c:	4606      	mov	r6, r0
 801525e:	460f      	mov	r7, r1
 8015260:	f7eb fc3c 	bl	8000adc <__aeabi_dcmplt>
 8015264:	2800      	cmp	r0, #0
 8015266:	d165      	bne.n	8015334 <_dtoa_r+0x63c>
 8015268:	4632      	mov	r2, r6
 801526a:	463b      	mov	r3, r7
 801526c:	4935      	ldr	r1, [pc, #212]	; (8015344 <_dtoa_r+0x64c>)
 801526e:	2000      	movs	r0, #0
 8015270:	f7eb f80a 	bl	8000288 <__aeabi_dsub>
 8015274:	ec53 2b18 	vmov	r2, r3, d8
 8015278:	f7eb fc30 	bl	8000adc <__aeabi_dcmplt>
 801527c:	2800      	cmp	r0, #0
 801527e:	f040 80b9 	bne.w	80153f4 <_dtoa_r+0x6fc>
 8015282:	9b02      	ldr	r3, [sp, #8]
 8015284:	429d      	cmp	r5, r3
 8015286:	f43f af75 	beq.w	8015174 <_dtoa_r+0x47c>
 801528a:	4b2f      	ldr	r3, [pc, #188]	; (8015348 <_dtoa_r+0x650>)
 801528c:	ec51 0b18 	vmov	r0, r1, d8
 8015290:	2200      	movs	r2, #0
 8015292:	f7eb f9b1 	bl	80005f8 <__aeabi_dmul>
 8015296:	4b2c      	ldr	r3, [pc, #176]	; (8015348 <_dtoa_r+0x650>)
 8015298:	ec41 0b18 	vmov	d8, r0, r1
 801529c:	2200      	movs	r2, #0
 801529e:	4630      	mov	r0, r6
 80152a0:	4639      	mov	r1, r7
 80152a2:	f7eb f9a9 	bl	80005f8 <__aeabi_dmul>
 80152a6:	4606      	mov	r6, r0
 80152a8:	460f      	mov	r7, r1
 80152aa:	e7c4      	b.n	8015236 <_dtoa_r+0x53e>
 80152ac:	ec51 0b17 	vmov	r0, r1, d7
 80152b0:	f7eb f9a2 	bl	80005f8 <__aeabi_dmul>
 80152b4:	9b02      	ldr	r3, [sp, #8]
 80152b6:	9d00      	ldr	r5, [sp, #0]
 80152b8:	930c      	str	r3, [sp, #48]	; 0x30
 80152ba:	ec41 0b18 	vmov	d8, r0, r1
 80152be:	4639      	mov	r1, r7
 80152c0:	4630      	mov	r0, r6
 80152c2:	f7eb fc49 	bl	8000b58 <__aeabi_d2iz>
 80152c6:	9011      	str	r0, [sp, #68]	; 0x44
 80152c8:	f7eb f92c 	bl	8000524 <__aeabi_i2d>
 80152cc:	4602      	mov	r2, r0
 80152ce:	460b      	mov	r3, r1
 80152d0:	4630      	mov	r0, r6
 80152d2:	4639      	mov	r1, r7
 80152d4:	f7ea ffd8 	bl	8000288 <__aeabi_dsub>
 80152d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80152da:	3330      	adds	r3, #48	; 0x30
 80152dc:	f805 3b01 	strb.w	r3, [r5], #1
 80152e0:	9b02      	ldr	r3, [sp, #8]
 80152e2:	429d      	cmp	r5, r3
 80152e4:	4606      	mov	r6, r0
 80152e6:	460f      	mov	r7, r1
 80152e8:	f04f 0200 	mov.w	r2, #0
 80152ec:	d134      	bne.n	8015358 <_dtoa_r+0x660>
 80152ee:	4b19      	ldr	r3, [pc, #100]	; (8015354 <_dtoa_r+0x65c>)
 80152f0:	ec51 0b18 	vmov	r0, r1, d8
 80152f4:	f7ea ffca 	bl	800028c <__adddf3>
 80152f8:	4602      	mov	r2, r0
 80152fa:	460b      	mov	r3, r1
 80152fc:	4630      	mov	r0, r6
 80152fe:	4639      	mov	r1, r7
 8015300:	f7eb fc0a 	bl	8000b18 <__aeabi_dcmpgt>
 8015304:	2800      	cmp	r0, #0
 8015306:	d175      	bne.n	80153f4 <_dtoa_r+0x6fc>
 8015308:	ec53 2b18 	vmov	r2, r3, d8
 801530c:	4911      	ldr	r1, [pc, #68]	; (8015354 <_dtoa_r+0x65c>)
 801530e:	2000      	movs	r0, #0
 8015310:	f7ea ffba 	bl	8000288 <__aeabi_dsub>
 8015314:	4602      	mov	r2, r0
 8015316:	460b      	mov	r3, r1
 8015318:	4630      	mov	r0, r6
 801531a:	4639      	mov	r1, r7
 801531c:	f7eb fbde 	bl	8000adc <__aeabi_dcmplt>
 8015320:	2800      	cmp	r0, #0
 8015322:	f43f af27 	beq.w	8015174 <_dtoa_r+0x47c>
 8015326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015328:	1e6b      	subs	r3, r5, #1
 801532a:	930c      	str	r3, [sp, #48]	; 0x30
 801532c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015330:	2b30      	cmp	r3, #48	; 0x30
 8015332:	d0f8      	beq.n	8015326 <_dtoa_r+0x62e>
 8015334:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015338:	e04a      	b.n	80153d0 <_dtoa_r+0x6d8>
 801533a:	bf00      	nop
 801533c:	0801a870 	.word	0x0801a870
 8015340:	0801a848 	.word	0x0801a848
 8015344:	3ff00000 	.word	0x3ff00000
 8015348:	40240000 	.word	0x40240000
 801534c:	401c0000 	.word	0x401c0000
 8015350:	40140000 	.word	0x40140000
 8015354:	3fe00000 	.word	0x3fe00000
 8015358:	4baf      	ldr	r3, [pc, #700]	; (8015618 <_dtoa_r+0x920>)
 801535a:	f7eb f94d 	bl	80005f8 <__aeabi_dmul>
 801535e:	4606      	mov	r6, r0
 8015360:	460f      	mov	r7, r1
 8015362:	e7ac      	b.n	80152be <_dtoa_r+0x5c6>
 8015364:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8015368:	9d00      	ldr	r5, [sp, #0]
 801536a:	4642      	mov	r2, r8
 801536c:	464b      	mov	r3, r9
 801536e:	4630      	mov	r0, r6
 8015370:	4639      	mov	r1, r7
 8015372:	f7eb fa6b 	bl	800084c <__aeabi_ddiv>
 8015376:	f7eb fbef 	bl	8000b58 <__aeabi_d2iz>
 801537a:	9002      	str	r0, [sp, #8]
 801537c:	f7eb f8d2 	bl	8000524 <__aeabi_i2d>
 8015380:	4642      	mov	r2, r8
 8015382:	464b      	mov	r3, r9
 8015384:	f7eb f938 	bl	80005f8 <__aeabi_dmul>
 8015388:	4602      	mov	r2, r0
 801538a:	460b      	mov	r3, r1
 801538c:	4630      	mov	r0, r6
 801538e:	4639      	mov	r1, r7
 8015390:	f7ea ff7a 	bl	8000288 <__aeabi_dsub>
 8015394:	9e02      	ldr	r6, [sp, #8]
 8015396:	9f01      	ldr	r7, [sp, #4]
 8015398:	3630      	adds	r6, #48	; 0x30
 801539a:	f805 6b01 	strb.w	r6, [r5], #1
 801539e:	9e00      	ldr	r6, [sp, #0]
 80153a0:	1bae      	subs	r6, r5, r6
 80153a2:	42b7      	cmp	r7, r6
 80153a4:	4602      	mov	r2, r0
 80153a6:	460b      	mov	r3, r1
 80153a8:	d137      	bne.n	801541a <_dtoa_r+0x722>
 80153aa:	f7ea ff6f 	bl	800028c <__adddf3>
 80153ae:	4642      	mov	r2, r8
 80153b0:	464b      	mov	r3, r9
 80153b2:	4606      	mov	r6, r0
 80153b4:	460f      	mov	r7, r1
 80153b6:	f7eb fbaf 	bl	8000b18 <__aeabi_dcmpgt>
 80153ba:	b9c8      	cbnz	r0, 80153f0 <_dtoa_r+0x6f8>
 80153bc:	4642      	mov	r2, r8
 80153be:	464b      	mov	r3, r9
 80153c0:	4630      	mov	r0, r6
 80153c2:	4639      	mov	r1, r7
 80153c4:	f7eb fb80 	bl	8000ac8 <__aeabi_dcmpeq>
 80153c8:	b110      	cbz	r0, 80153d0 <_dtoa_r+0x6d8>
 80153ca:	9b02      	ldr	r3, [sp, #8]
 80153cc:	07d9      	lsls	r1, r3, #31
 80153ce:	d40f      	bmi.n	80153f0 <_dtoa_r+0x6f8>
 80153d0:	4620      	mov	r0, r4
 80153d2:	4659      	mov	r1, fp
 80153d4:	f000 ff62 	bl	801629c <_Bfree>
 80153d8:	2300      	movs	r3, #0
 80153da:	702b      	strb	r3, [r5, #0]
 80153dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153de:	f10a 0001 	add.w	r0, sl, #1
 80153e2:	6018      	str	r0, [r3, #0]
 80153e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	f43f acd8 	beq.w	8014d9c <_dtoa_r+0xa4>
 80153ec:	601d      	str	r5, [r3, #0]
 80153ee:	e4d5      	b.n	8014d9c <_dtoa_r+0xa4>
 80153f0:	f8cd a01c 	str.w	sl, [sp, #28]
 80153f4:	462b      	mov	r3, r5
 80153f6:	461d      	mov	r5, r3
 80153f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80153fc:	2a39      	cmp	r2, #57	; 0x39
 80153fe:	d108      	bne.n	8015412 <_dtoa_r+0x71a>
 8015400:	9a00      	ldr	r2, [sp, #0]
 8015402:	429a      	cmp	r2, r3
 8015404:	d1f7      	bne.n	80153f6 <_dtoa_r+0x6fe>
 8015406:	9a07      	ldr	r2, [sp, #28]
 8015408:	9900      	ldr	r1, [sp, #0]
 801540a:	3201      	adds	r2, #1
 801540c:	9207      	str	r2, [sp, #28]
 801540e:	2230      	movs	r2, #48	; 0x30
 8015410:	700a      	strb	r2, [r1, #0]
 8015412:	781a      	ldrb	r2, [r3, #0]
 8015414:	3201      	adds	r2, #1
 8015416:	701a      	strb	r2, [r3, #0]
 8015418:	e78c      	b.n	8015334 <_dtoa_r+0x63c>
 801541a:	4b7f      	ldr	r3, [pc, #508]	; (8015618 <_dtoa_r+0x920>)
 801541c:	2200      	movs	r2, #0
 801541e:	f7eb f8eb 	bl	80005f8 <__aeabi_dmul>
 8015422:	2200      	movs	r2, #0
 8015424:	2300      	movs	r3, #0
 8015426:	4606      	mov	r6, r0
 8015428:	460f      	mov	r7, r1
 801542a:	f7eb fb4d 	bl	8000ac8 <__aeabi_dcmpeq>
 801542e:	2800      	cmp	r0, #0
 8015430:	d09b      	beq.n	801536a <_dtoa_r+0x672>
 8015432:	e7cd      	b.n	80153d0 <_dtoa_r+0x6d8>
 8015434:	9a08      	ldr	r2, [sp, #32]
 8015436:	2a00      	cmp	r2, #0
 8015438:	f000 80c4 	beq.w	80155c4 <_dtoa_r+0x8cc>
 801543c:	9a05      	ldr	r2, [sp, #20]
 801543e:	2a01      	cmp	r2, #1
 8015440:	f300 80a8 	bgt.w	8015594 <_dtoa_r+0x89c>
 8015444:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015446:	2a00      	cmp	r2, #0
 8015448:	f000 80a0 	beq.w	801558c <_dtoa_r+0x894>
 801544c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015450:	9e06      	ldr	r6, [sp, #24]
 8015452:	4645      	mov	r5, r8
 8015454:	9a04      	ldr	r2, [sp, #16]
 8015456:	2101      	movs	r1, #1
 8015458:	441a      	add	r2, r3
 801545a:	4620      	mov	r0, r4
 801545c:	4498      	add	r8, r3
 801545e:	9204      	str	r2, [sp, #16]
 8015460:	f001 f822 	bl	80164a8 <__i2b>
 8015464:	4607      	mov	r7, r0
 8015466:	2d00      	cmp	r5, #0
 8015468:	dd0b      	ble.n	8015482 <_dtoa_r+0x78a>
 801546a:	9b04      	ldr	r3, [sp, #16]
 801546c:	2b00      	cmp	r3, #0
 801546e:	dd08      	ble.n	8015482 <_dtoa_r+0x78a>
 8015470:	42ab      	cmp	r3, r5
 8015472:	9a04      	ldr	r2, [sp, #16]
 8015474:	bfa8      	it	ge
 8015476:	462b      	movge	r3, r5
 8015478:	eba8 0803 	sub.w	r8, r8, r3
 801547c:	1aed      	subs	r5, r5, r3
 801547e:	1ad3      	subs	r3, r2, r3
 8015480:	9304      	str	r3, [sp, #16]
 8015482:	9b06      	ldr	r3, [sp, #24]
 8015484:	b1fb      	cbz	r3, 80154c6 <_dtoa_r+0x7ce>
 8015486:	9b08      	ldr	r3, [sp, #32]
 8015488:	2b00      	cmp	r3, #0
 801548a:	f000 809f 	beq.w	80155cc <_dtoa_r+0x8d4>
 801548e:	2e00      	cmp	r6, #0
 8015490:	dd11      	ble.n	80154b6 <_dtoa_r+0x7be>
 8015492:	4639      	mov	r1, r7
 8015494:	4632      	mov	r2, r6
 8015496:	4620      	mov	r0, r4
 8015498:	f001 f8c2 	bl	8016620 <__pow5mult>
 801549c:	465a      	mov	r2, fp
 801549e:	4601      	mov	r1, r0
 80154a0:	4607      	mov	r7, r0
 80154a2:	4620      	mov	r0, r4
 80154a4:	f001 f816 	bl	80164d4 <__multiply>
 80154a8:	4659      	mov	r1, fp
 80154aa:	9007      	str	r0, [sp, #28]
 80154ac:	4620      	mov	r0, r4
 80154ae:	f000 fef5 	bl	801629c <_Bfree>
 80154b2:	9b07      	ldr	r3, [sp, #28]
 80154b4:	469b      	mov	fp, r3
 80154b6:	9b06      	ldr	r3, [sp, #24]
 80154b8:	1b9a      	subs	r2, r3, r6
 80154ba:	d004      	beq.n	80154c6 <_dtoa_r+0x7ce>
 80154bc:	4659      	mov	r1, fp
 80154be:	4620      	mov	r0, r4
 80154c0:	f001 f8ae 	bl	8016620 <__pow5mult>
 80154c4:	4683      	mov	fp, r0
 80154c6:	2101      	movs	r1, #1
 80154c8:	4620      	mov	r0, r4
 80154ca:	f000 ffed 	bl	80164a8 <__i2b>
 80154ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	4606      	mov	r6, r0
 80154d4:	dd7c      	ble.n	80155d0 <_dtoa_r+0x8d8>
 80154d6:	461a      	mov	r2, r3
 80154d8:	4601      	mov	r1, r0
 80154da:	4620      	mov	r0, r4
 80154dc:	f001 f8a0 	bl	8016620 <__pow5mult>
 80154e0:	9b05      	ldr	r3, [sp, #20]
 80154e2:	2b01      	cmp	r3, #1
 80154e4:	4606      	mov	r6, r0
 80154e6:	dd76      	ble.n	80155d6 <_dtoa_r+0x8de>
 80154e8:	2300      	movs	r3, #0
 80154ea:	9306      	str	r3, [sp, #24]
 80154ec:	6933      	ldr	r3, [r6, #16]
 80154ee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80154f2:	6918      	ldr	r0, [r3, #16]
 80154f4:	f000 ff88 	bl	8016408 <__hi0bits>
 80154f8:	f1c0 0020 	rsb	r0, r0, #32
 80154fc:	9b04      	ldr	r3, [sp, #16]
 80154fe:	4418      	add	r0, r3
 8015500:	f010 001f 	ands.w	r0, r0, #31
 8015504:	f000 8086 	beq.w	8015614 <_dtoa_r+0x91c>
 8015508:	f1c0 0320 	rsb	r3, r0, #32
 801550c:	2b04      	cmp	r3, #4
 801550e:	dd7f      	ble.n	8015610 <_dtoa_r+0x918>
 8015510:	f1c0 001c 	rsb	r0, r0, #28
 8015514:	9b04      	ldr	r3, [sp, #16]
 8015516:	4403      	add	r3, r0
 8015518:	4480      	add	r8, r0
 801551a:	4405      	add	r5, r0
 801551c:	9304      	str	r3, [sp, #16]
 801551e:	f1b8 0f00 	cmp.w	r8, #0
 8015522:	dd05      	ble.n	8015530 <_dtoa_r+0x838>
 8015524:	4659      	mov	r1, fp
 8015526:	4642      	mov	r2, r8
 8015528:	4620      	mov	r0, r4
 801552a:	f001 f8d3 	bl	80166d4 <__lshift>
 801552e:	4683      	mov	fp, r0
 8015530:	9b04      	ldr	r3, [sp, #16]
 8015532:	2b00      	cmp	r3, #0
 8015534:	dd05      	ble.n	8015542 <_dtoa_r+0x84a>
 8015536:	4631      	mov	r1, r6
 8015538:	461a      	mov	r2, r3
 801553a:	4620      	mov	r0, r4
 801553c:	f001 f8ca 	bl	80166d4 <__lshift>
 8015540:	4606      	mov	r6, r0
 8015542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015544:	2b00      	cmp	r3, #0
 8015546:	d069      	beq.n	801561c <_dtoa_r+0x924>
 8015548:	4631      	mov	r1, r6
 801554a:	4658      	mov	r0, fp
 801554c:	f001 f92e 	bl	80167ac <__mcmp>
 8015550:	2800      	cmp	r0, #0
 8015552:	da63      	bge.n	801561c <_dtoa_r+0x924>
 8015554:	2300      	movs	r3, #0
 8015556:	4659      	mov	r1, fp
 8015558:	220a      	movs	r2, #10
 801555a:	4620      	mov	r0, r4
 801555c:	f000 fec0 	bl	80162e0 <__multadd>
 8015560:	9b08      	ldr	r3, [sp, #32]
 8015562:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015566:	4683      	mov	fp, r0
 8015568:	2b00      	cmp	r3, #0
 801556a:	f000 818f 	beq.w	801588c <_dtoa_r+0xb94>
 801556e:	4639      	mov	r1, r7
 8015570:	2300      	movs	r3, #0
 8015572:	220a      	movs	r2, #10
 8015574:	4620      	mov	r0, r4
 8015576:	f000 feb3 	bl	80162e0 <__multadd>
 801557a:	f1b9 0f00 	cmp.w	r9, #0
 801557e:	4607      	mov	r7, r0
 8015580:	f300 808e 	bgt.w	80156a0 <_dtoa_r+0x9a8>
 8015584:	9b05      	ldr	r3, [sp, #20]
 8015586:	2b02      	cmp	r3, #2
 8015588:	dc50      	bgt.n	801562c <_dtoa_r+0x934>
 801558a:	e089      	b.n	80156a0 <_dtoa_r+0x9a8>
 801558c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801558e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015592:	e75d      	b.n	8015450 <_dtoa_r+0x758>
 8015594:	9b01      	ldr	r3, [sp, #4]
 8015596:	1e5e      	subs	r6, r3, #1
 8015598:	9b06      	ldr	r3, [sp, #24]
 801559a:	42b3      	cmp	r3, r6
 801559c:	bfbf      	itttt	lt
 801559e:	9b06      	ldrlt	r3, [sp, #24]
 80155a0:	9606      	strlt	r6, [sp, #24]
 80155a2:	1af2      	sublt	r2, r6, r3
 80155a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80155a6:	bfb6      	itet	lt
 80155a8:	189b      	addlt	r3, r3, r2
 80155aa:	1b9e      	subge	r6, r3, r6
 80155ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 80155ae:	9b01      	ldr	r3, [sp, #4]
 80155b0:	bfb8      	it	lt
 80155b2:	2600      	movlt	r6, #0
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	bfb5      	itete	lt
 80155b8:	eba8 0503 	sublt.w	r5, r8, r3
 80155bc:	9b01      	ldrge	r3, [sp, #4]
 80155be:	2300      	movlt	r3, #0
 80155c0:	4645      	movge	r5, r8
 80155c2:	e747      	b.n	8015454 <_dtoa_r+0x75c>
 80155c4:	9e06      	ldr	r6, [sp, #24]
 80155c6:	9f08      	ldr	r7, [sp, #32]
 80155c8:	4645      	mov	r5, r8
 80155ca:	e74c      	b.n	8015466 <_dtoa_r+0x76e>
 80155cc:	9a06      	ldr	r2, [sp, #24]
 80155ce:	e775      	b.n	80154bc <_dtoa_r+0x7c4>
 80155d0:	9b05      	ldr	r3, [sp, #20]
 80155d2:	2b01      	cmp	r3, #1
 80155d4:	dc18      	bgt.n	8015608 <_dtoa_r+0x910>
 80155d6:	9b02      	ldr	r3, [sp, #8]
 80155d8:	b9b3      	cbnz	r3, 8015608 <_dtoa_r+0x910>
 80155da:	9b03      	ldr	r3, [sp, #12]
 80155dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80155e0:	b9a3      	cbnz	r3, 801560c <_dtoa_r+0x914>
 80155e2:	9b03      	ldr	r3, [sp, #12]
 80155e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80155e8:	0d1b      	lsrs	r3, r3, #20
 80155ea:	051b      	lsls	r3, r3, #20
 80155ec:	b12b      	cbz	r3, 80155fa <_dtoa_r+0x902>
 80155ee:	9b04      	ldr	r3, [sp, #16]
 80155f0:	3301      	adds	r3, #1
 80155f2:	9304      	str	r3, [sp, #16]
 80155f4:	f108 0801 	add.w	r8, r8, #1
 80155f8:	2301      	movs	r3, #1
 80155fa:	9306      	str	r3, [sp, #24]
 80155fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155fe:	2b00      	cmp	r3, #0
 8015600:	f47f af74 	bne.w	80154ec <_dtoa_r+0x7f4>
 8015604:	2001      	movs	r0, #1
 8015606:	e779      	b.n	80154fc <_dtoa_r+0x804>
 8015608:	2300      	movs	r3, #0
 801560a:	e7f6      	b.n	80155fa <_dtoa_r+0x902>
 801560c:	9b02      	ldr	r3, [sp, #8]
 801560e:	e7f4      	b.n	80155fa <_dtoa_r+0x902>
 8015610:	d085      	beq.n	801551e <_dtoa_r+0x826>
 8015612:	4618      	mov	r0, r3
 8015614:	301c      	adds	r0, #28
 8015616:	e77d      	b.n	8015514 <_dtoa_r+0x81c>
 8015618:	40240000 	.word	0x40240000
 801561c:	9b01      	ldr	r3, [sp, #4]
 801561e:	2b00      	cmp	r3, #0
 8015620:	dc38      	bgt.n	8015694 <_dtoa_r+0x99c>
 8015622:	9b05      	ldr	r3, [sp, #20]
 8015624:	2b02      	cmp	r3, #2
 8015626:	dd35      	ble.n	8015694 <_dtoa_r+0x99c>
 8015628:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801562c:	f1b9 0f00 	cmp.w	r9, #0
 8015630:	d10d      	bne.n	801564e <_dtoa_r+0x956>
 8015632:	4631      	mov	r1, r6
 8015634:	464b      	mov	r3, r9
 8015636:	2205      	movs	r2, #5
 8015638:	4620      	mov	r0, r4
 801563a:	f000 fe51 	bl	80162e0 <__multadd>
 801563e:	4601      	mov	r1, r0
 8015640:	4606      	mov	r6, r0
 8015642:	4658      	mov	r0, fp
 8015644:	f001 f8b2 	bl	80167ac <__mcmp>
 8015648:	2800      	cmp	r0, #0
 801564a:	f73f adbd 	bgt.w	80151c8 <_dtoa_r+0x4d0>
 801564e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015650:	9d00      	ldr	r5, [sp, #0]
 8015652:	ea6f 0a03 	mvn.w	sl, r3
 8015656:	f04f 0800 	mov.w	r8, #0
 801565a:	4631      	mov	r1, r6
 801565c:	4620      	mov	r0, r4
 801565e:	f000 fe1d 	bl	801629c <_Bfree>
 8015662:	2f00      	cmp	r7, #0
 8015664:	f43f aeb4 	beq.w	80153d0 <_dtoa_r+0x6d8>
 8015668:	f1b8 0f00 	cmp.w	r8, #0
 801566c:	d005      	beq.n	801567a <_dtoa_r+0x982>
 801566e:	45b8      	cmp	r8, r7
 8015670:	d003      	beq.n	801567a <_dtoa_r+0x982>
 8015672:	4641      	mov	r1, r8
 8015674:	4620      	mov	r0, r4
 8015676:	f000 fe11 	bl	801629c <_Bfree>
 801567a:	4639      	mov	r1, r7
 801567c:	4620      	mov	r0, r4
 801567e:	f000 fe0d 	bl	801629c <_Bfree>
 8015682:	e6a5      	b.n	80153d0 <_dtoa_r+0x6d8>
 8015684:	2600      	movs	r6, #0
 8015686:	4637      	mov	r7, r6
 8015688:	e7e1      	b.n	801564e <_dtoa_r+0x956>
 801568a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801568c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015690:	4637      	mov	r7, r6
 8015692:	e599      	b.n	80151c8 <_dtoa_r+0x4d0>
 8015694:	9b08      	ldr	r3, [sp, #32]
 8015696:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801569a:	2b00      	cmp	r3, #0
 801569c:	f000 80fd 	beq.w	801589a <_dtoa_r+0xba2>
 80156a0:	2d00      	cmp	r5, #0
 80156a2:	dd05      	ble.n	80156b0 <_dtoa_r+0x9b8>
 80156a4:	4639      	mov	r1, r7
 80156a6:	462a      	mov	r2, r5
 80156a8:	4620      	mov	r0, r4
 80156aa:	f001 f813 	bl	80166d4 <__lshift>
 80156ae:	4607      	mov	r7, r0
 80156b0:	9b06      	ldr	r3, [sp, #24]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d05c      	beq.n	8015770 <_dtoa_r+0xa78>
 80156b6:	6879      	ldr	r1, [r7, #4]
 80156b8:	4620      	mov	r0, r4
 80156ba:	f000 fdaf 	bl	801621c <_Balloc>
 80156be:	4605      	mov	r5, r0
 80156c0:	b928      	cbnz	r0, 80156ce <_dtoa_r+0x9d6>
 80156c2:	4b80      	ldr	r3, [pc, #512]	; (80158c4 <_dtoa_r+0xbcc>)
 80156c4:	4602      	mov	r2, r0
 80156c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80156ca:	f7ff bb2e 	b.w	8014d2a <_dtoa_r+0x32>
 80156ce:	693a      	ldr	r2, [r7, #16]
 80156d0:	3202      	adds	r2, #2
 80156d2:	0092      	lsls	r2, r2, #2
 80156d4:	f107 010c 	add.w	r1, r7, #12
 80156d8:	300c      	adds	r0, #12
 80156da:	f000 fd91 	bl	8016200 <memcpy>
 80156de:	2201      	movs	r2, #1
 80156e0:	4629      	mov	r1, r5
 80156e2:	4620      	mov	r0, r4
 80156e4:	f000 fff6 	bl	80166d4 <__lshift>
 80156e8:	9b00      	ldr	r3, [sp, #0]
 80156ea:	3301      	adds	r3, #1
 80156ec:	9301      	str	r3, [sp, #4]
 80156ee:	9b00      	ldr	r3, [sp, #0]
 80156f0:	444b      	add	r3, r9
 80156f2:	9307      	str	r3, [sp, #28]
 80156f4:	9b02      	ldr	r3, [sp, #8]
 80156f6:	f003 0301 	and.w	r3, r3, #1
 80156fa:	46b8      	mov	r8, r7
 80156fc:	9306      	str	r3, [sp, #24]
 80156fe:	4607      	mov	r7, r0
 8015700:	9b01      	ldr	r3, [sp, #4]
 8015702:	4631      	mov	r1, r6
 8015704:	3b01      	subs	r3, #1
 8015706:	4658      	mov	r0, fp
 8015708:	9302      	str	r3, [sp, #8]
 801570a:	f7ff fa69 	bl	8014be0 <quorem>
 801570e:	4603      	mov	r3, r0
 8015710:	3330      	adds	r3, #48	; 0x30
 8015712:	9004      	str	r0, [sp, #16]
 8015714:	4641      	mov	r1, r8
 8015716:	4658      	mov	r0, fp
 8015718:	9308      	str	r3, [sp, #32]
 801571a:	f001 f847 	bl	80167ac <__mcmp>
 801571e:	463a      	mov	r2, r7
 8015720:	4681      	mov	r9, r0
 8015722:	4631      	mov	r1, r6
 8015724:	4620      	mov	r0, r4
 8015726:	f001 f85d 	bl	80167e4 <__mdiff>
 801572a:	68c2      	ldr	r2, [r0, #12]
 801572c:	9b08      	ldr	r3, [sp, #32]
 801572e:	4605      	mov	r5, r0
 8015730:	bb02      	cbnz	r2, 8015774 <_dtoa_r+0xa7c>
 8015732:	4601      	mov	r1, r0
 8015734:	4658      	mov	r0, fp
 8015736:	f001 f839 	bl	80167ac <__mcmp>
 801573a:	9b08      	ldr	r3, [sp, #32]
 801573c:	4602      	mov	r2, r0
 801573e:	4629      	mov	r1, r5
 8015740:	4620      	mov	r0, r4
 8015742:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8015746:	f000 fda9 	bl	801629c <_Bfree>
 801574a:	9b05      	ldr	r3, [sp, #20]
 801574c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801574e:	9d01      	ldr	r5, [sp, #4]
 8015750:	ea43 0102 	orr.w	r1, r3, r2
 8015754:	9b06      	ldr	r3, [sp, #24]
 8015756:	430b      	orrs	r3, r1
 8015758:	9b08      	ldr	r3, [sp, #32]
 801575a:	d10d      	bne.n	8015778 <_dtoa_r+0xa80>
 801575c:	2b39      	cmp	r3, #57	; 0x39
 801575e:	d029      	beq.n	80157b4 <_dtoa_r+0xabc>
 8015760:	f1b9 0f00 	cmp.w	r9, #0
 8015764:	dd01      	ble.n	801576a <_dtoa_r+0xa72>
 8015766:	9b04      	ldr	r3, [sp, #16]
 8015768:	3331      	adds	r3, #49	; 0x31
 801576a:	9a02      	ldr	r2, [sp, #8]
 801576c:	7013      	strb	r3, [r2, #0]
 801576e:	e774      	b.n	801565a <_dtoa_r+0x962>
 8015770:	4638      	mov	r0, r7
 8015772:	e7b9      	b.n	80156e8 <_dtoa_r+0x9f0>
 8015774:	2201      	movs	r2, #1
 8015776:	e7e2      	b.n	801573e <_dtoa_r+0xa46>
 8015778:	f1b9 0f00 	cmp.w	r9, #0
 801577c:	db06      	blt.n	801578c <_dtoa_r+0xa94>
 801577e:	9905      	ldr	r1, [sp, #20]
 8015780:	ea41 0909 	orr.w	r9, r1, r9
 8015784:	9906      	ldr	r1, [sp, #24]
 8015786:	ea59 0101 	orrs.w	r1, r9, r1
 801578a:	d120      	bne.n	80157ce <_dtoa_r+0xad6>
 801578c:	2a00      	cmp	r2, #0
 801578e:	ddec      	ble.n	801576a <_dtoa_r+0xa72>
 8015790:	4659      	mov	r1, fp
 8015792:	2201      	movs	r2, #1
 8015794:	4620      	mov	r0, r4
 8015796:	9301      	str	r3, [sp, #4]
 8015798:	f000 ff9c 	bl	80166d4 <__lshift>
 801579c:	4631      	mov	r1, r6
 801579e:	4683      	mov	fp, r0
 80157a0:	f001 f804 	bl	80167ac <__mcmp>
 80157a4:	2800      	cmp	r0, #0
 80157a6:	9b01      	ldr	r3, [sp, #4]
 80157a8:	dc02      	bgt.n	80157b0 <_dtoa_r+0xab8>
 80157aa:	d1de      	bne.n	801576a <_dtoa_r+0xa72>
 80157ac:	07da      	lsls	r2, r3, #31
 80157ae:	d5dc      	bpl.n	801576a <_dtoa_r+0xa72>
 80157b0:	2b39      	cmp	r3, #57	; 0x39
 80157b2:	d1d8      	bne.n	8015766 <_dtoa_r+0xa6e>
 80157b4:	9a02      	ldr	r2, [sp, #8]
 80157b6:	2339      	movs	r3, #57	; 0x39
 80157b8:	7013      	strb	r3, [r2, #0]
 80157ba:	462b      	mov	r3, r5
 80157bc:	461d      	mov	r5, r3
 80157be:	3b01      	subs	r3, #1
 80157c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80157c4:	2a39      	cmp	r2, #57	; 0x39
 80157c6:	d050      	beq.n	801586a <_dtoa_r+0xb72>
 80157c8:	3201      	adds	r2, #1
 80157ca:	701a      	strb	r2, [r3, #0]
 80157cc:	e745      	b.n	801565a <_dtoa_r+0x962>
 80157ce:	2a00      	cmp	r2, #0
 80157d0:	dd03      	ble.n	80157da <_dtoa_r+0xae2>
 80157d2:	2b39      	cmp	r3, #57	; 0x39
 80157d4:	d0ee      	beq.n	80157b4 <_dtoa_r+0xabc>
 80157d6:	3301      	adds	r3, #1
 80157d8:	e7c7      	b.n	801576a <_dtoa_r+0xa72>
 80157da:	9a01      	ldr	r2, [sp, #4]
 80157dc:	9907      	ldr	r1, [sp, #28]
 80157de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80157e2:	428a      	cmp	r2, r1
 80157e4:	d02a      	beq.n	801583c <_dtoa_r+0xb44>
 80157e6:	4659      	mov	r1, fp
 80157e8:	2300      	movs	r3, #0
 80157ea:	220a      	movs	r2, #10
 80157ec:	4620      	mov	r0, r4
 80157ee:	f000 fd77 	bl	80162e0 <__multadd>
 80157f2:	45b8      	cmp	r8, r7
 80157f4:	4683      	mov	fp, r0
 80157f6:	f04f 0300 	mov.w	r3, #0
 80157fa:	f04f 020a 	mov.w	r2, #10
 80157fe:	4641      	mov	r1, r8
 8015800:	4620      	mov	r0, r4
 8015802:	d107      	bne.n	8015814 <_dtoa_r+0xb1c>
 8015804:	f000 fd6c 	bl	80162e0 <__multadd>
 8015808:	4680      	mov	r8, r0
 801580a:	4607      	mov	r7, r0
 801580c:	9b01      	ldr	r3, [sp, #4]
 801580e:	3301      	adds	r3, #1
 8015810:	9301      	str	r3, [sp, #4]
 8015812:	e775      	b.n	8015700 <_dtoa_r+0xa08>
 8015814:	f000 fd64 	bl	80162e0 <__multadd>
 8015818:	4639      	mov	r1, r7
 801581a:	4680      	mov	r8, r0
 801581c:	2300      	movs	r3, #0
 801581e:	220a      	movs	r2, #10
 8015820:	4620      	mov	r0, r4
 8015822:	f000 fd5d 	bl	80162e0 <__multadd>
 8015826:	4607      	mov	r7, r0
 8015828:	e7f0      	b.n	801580c <_dtoa_r+0xb14>
 801582a:	f1b9 0f00 	cmp.w	r9, #0
 801582e:	9a00      	ldr	r2, [sp, #0]
 8015830:	bfcc      	ite	gt
 8015832:	464d      	movgt	r5, r9
 8015834:	2501      	movle	r5, #1
 8015836:	4415      	add	r5, r2
 8015838:	f04f 0800 	mov.w	r8, #0
 801583c:	4659      	mov	r1, fp
 801583e:	2201      	movs	r2, #1
 8015840:	4620      	mov	r0, r4
 8015842:	9301      	str	r3, [sp, #4]
 8015844:	f000 ff46 	bl	80166d4 <__lshift>
 8015848:	4631      	mov	r1, r6
 801584a:	4683      	mov	fp, r0
 801584c:	f000 ffae 	bl	80167ac <__mcmp>
 8015850:	2800      	cmp	r0, #0
 8015852:	dcb2      	bgt.n	80157ba <_dtoa_r+0xac2>
 8015854:	d102      	bne.n	801585c <_dtoa_r+0xb64>
 8015856:	9b01      	ldr	r3, [sp, #4]
 8015858:	07db      	lsls	r3, r3, #31
 801585a:	d4ae      	bmi.n	80157ba <_dtoa_r+0xac2>
 801585c:	462b      	mov	r3, r5
 801585e:	461d      	mov	r5, r3
 8015860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015864:	2a30      	cmp	r2, #48	; 0x30
 8015866:	d0fa      	beq.n	801585e <_dtoa_r+0xb66>
 8015868:	e6f7      	b.n	801565a <_dtoa_r+0x962>
 801586a:	9a00      	ldr	r2, [sp, #0]
 801586c:	429a      	cmp	r2, r3
 801586e:	d1a5      	bne.n	80157bc <_dtoa_r+0xac4>
 8015870:	f10a 0a01 	add.w	sl, sl, #1
 8015874:	2331      	movs	r3, #49	; 0x31
 8015876:	e779      	b.n	801576c <_dtoa_r+0xa74>
 8015878:	4b13      	ldr	r3, [pc, #76]	; (80158c8 <_dtoa_r+0xbd0>)
 801587a:	f7ff baaf 	b.w	8014ddc <_dtoa_r+0xe4>
 801587e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015880:	2b00      	cmp	r3, #0
 8015882:	f47f aa86 	bne.w	8014d92 <_dtoa_r+0x9a>
 8015886:	4b11      	ldr	r3, [pc, #68]	; (80158cc <_dtoa_r+0xbd4>)
 8015888:	f7ff baa8 	b.w	8014ddc <_dtoa_r+0xe4>
 801588c:	f1b9 0f00 	cmp.w	r9, #0
 8015890:	dc03      	bgt.n	801589a <_dtoa_r+0xba2>
 8015892:	9b05      	ldr	r3, [sp, #20]
 8015894:	2b02      	cmp	r3, #2
 8015896:	f73f aec9 	bgt.w	801562c <_dtoa_r+0x934>
 801589a:	9d00      	ldr	r5, [sp, #0]
 801589c:	4631      	mov	r1, r6
 801589e:	4658      	mov	r0, fp
 80158a0:	f7ff f99e 	bl	8014be0 <quorem>
 80158a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80158a8:	f805 3b01 	strb.w	r3, [r5], #1
 80158ac:	9a00      	ldr	r2, [sp, #0]
 80158ae:	1aaa      	subs	r2, r5, r2
 80158b0:	4591      	cmp	r9, r2
 80158b2:	ddba      	ble.n	801582a <_dtoa_r+0xb32>
 80158b4:	4659      	mov	r1, fp
 80158b6:	2300      	movs	r3, #0
 80158b8:	220a      	movs	r2, #10
 80158ba:	4620      	mov	r0, r4
 80158bc:	f000 fd10 	bl	80162e0 <__multadd>
 80158c0:	4683      	mov	fp, r0
 80158c2:	e7eb      	b.n	801589c <_dtoa_r+0xba4>
 80158c4:	0801a6f4 	.word	0x0801a6f4
 80158c8:	0801a959 	.word	0x0801a959
 80158cc:	0801a671 	.word	0x0801a671

080158d0 <std>:
 80158d0:	2300      	movs	r3, #0
 80158d2:	b510      	push	{r4, lr}
 80158d4:	4604      	mov	r4, r0
 80158d6:	e9c0 3300 	strd	r3, r3, [r0]
 80158da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80158de:	6083      	str	r3, [r0, #8]
 80158e0:	8181      	strh	r1, [r0, #12]
 80158e2:	6643      	str	r3, [r0, #100]	; 0x64
 80158e4:	81c2      	strh	r2, [r0, #14]
 80158e6:	6183      	str	r3, [r0, #24]
 80158e8:	4619      	mov	r1, r3
 80158ea:	2208      	movs	r2, #8
 80158ec:	305c      	adds	r0, #92	; 0x5c
 80158ee:	f7fd fb55 	bl	8012f9c <memset>
 80158f2:	4b05      	ldr	r3, [pc, #20]	; (8015908 <std+0x38>)
 80158f4:	6263      	str	r3, [r4, #36]	; 0x24
 80158f6:	4b05      	ldr	r3, [pc, #20]	; (801590c <std+0x3c>)
 80158f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80158fa:	4b05      	ldr	r3, [pc, #20]	; (8015910 <std+0x40>)
 80158fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80158fe:	4b05      	ldr	r3, [pc, #20]	; (8015914 <std+0x44>)
 8015900:	6224      	str	r4, [r4, #32]
 8015902:	6323      	str	r3, [r4, #48]	; 0x30
 8015904:	bd10      	pop	{r4, pc}
 8015906:	bf00      	nop
 8015908:	08013d45 	.word	0x08013d45
 801590c:	08013d6b 	.word	0x08013d6b
 8015910:	08013da3 	.word	0x08013da3
 8015914:	08013dc7 	.word	0x08013dc7

08015918 <_cleanup_r>:
 8015918:	4901      	ldr	r1, [pc, #4]	; (8015920 <_cleanup_r+0x8>)
 801591a:	f000 b8af 	b.w	8015a7c <_fwalk_reent>
 801591e:	bf00      	nop
 8015920:	08017b3d 	.word	0x08017b3d

08015924 <__sfmoreglue>:
 8015924:	b570      	push	{r4, r5, r6, lr}
 8015926:	1e4a      	subs	r2, r1, #1
 8015928:	2568      	movs	r5, #104	; 0x68
 801592a:	4355      	muls	r5, r2
 801592c:	460e      	mov	r6, r1
 801592e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015932:	f001 f98d 	bl	8016c50 <_malloc_r>
 8015936:	4604      	mov	r4, r0
 8015938:	b140      	cbz	r0, 801594c <__sfmoreglue+0x28>
 801593a:	2100      	movs	r1, #0
 801593c:	e9c0 1600 	strd	r1, r6, [r0]
 8015940:	300c      	adds	r0, #12
 8015942:	60a0      	str	r0, [r4, #8]
 8015944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015948:	f7fd fb28 	bl	8012f9c <memset>
 801594c:	4620      	mov	r0, r4
 801594e:	bd70      	pop	{r4, r5, r6, pc}

08015950 <__sfp_lock_acquire>:
 8015950:	4801      	ldr	r0, [pc, #4]	; (8015958 <__sfp_lock_acquire+0x8>)
 8015952:	f000 bc26 	b.w	80161a2 <__retarget_lock_acquire_recursive>
 8015956:	bf00      	nop
 8015958:	20003374 	.word	0x20003374

0801595c <__sfp_lock_release>:
 801595c:	4801      	ldr	r0, [pc, #4]	; (8015964 <__sfp_lock_release+0x8>)
 801595e:	f000 bc21 	b.w	80161a4 <__retarget_lock_release_recursive>
 8015962:	bf00      	nop
 8015964:	20003374 	.word	0x20003374

08015968 <__sinit_lock_acquire>:
 8015968:	4801      	ldr	r0, [pc, #4]	; (8015970 <__sinit_lock_acquire+0x8>)
 801596a:	f000 bc1a 	b.w	80161a2 <__retarget_lock_acquire_recursive>
 801596e:	bf00      	nop
 8015970:	20003373 	.word	0x20003373

08015974 <__sinit_lock_release>:
 8015974:	4801      	ldr	r0, [pc, #4]	; (801597c <__sinit_lock_release+0x8>)
 8015976:	f000 bc15 	b.w	80161a4 <__retarget_lock_release_recursive>
 801597a:	bf00      	nop
 801597c:	20003373 	.word	0x20003373

08015980 <__sinit>:
 8015980:	b510      	push	{r4, lr}
 8015982:	4604      	mov	r4, r0
 8015984:	f7ff fff0 	bl	8015968 <__sinit_lock_acquire>
 8015988:	69a3      	ldr	r3, [r4, #24]
 801598a:	b11b      	cbz	r3, 8015994 <__sinit+0x14>
 801598c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015990:	f7ff bff0 	b.w	8015974 <__sinit_lock_release>
 8015994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015998:	6523      	str	r3, [r4, #80]	; 0x50
 801599a:	4b13      	ldr	r3, [pc, #76]	; (80159e8 <__sinit+0x68>)
 801599c:	4a13      	ldr	r2, [pc, #76]	; (80159ec <__sinit+0x6c>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80159a2:	42a3      	cmp	r3, r4
 80159a4:	bf04      	itt	eq
 80159a6:	2301      	moveq	r3, #1
 80159a8:	61a3      	streq	r3, [r4, #24]
 80159aa:	4620      	mov	r0, r4
 80159ac:	f000 f820 	bl	80159f0 <__sfp>
 80159b0:	6060      	str	r0, [r4, #4]
 80159b2:	4620      	mov	r0, r4
 80159b4:	f000 f81c 	bl	80159f0 <__sfp>
 80159b8:	60a0      	str	r0, [r4, #8]
 80159ba:	4620      	mov	r0, r4
 80159bc:	f000 f818 	bl	80159f0 <__sfp>
 80159c0:	2200      	movs	r2, #0
 80159c2:	60e0      	str	r0, [r4, #12]
 80159c4:	2104      	movs	r1, #4
 80159c6:	6860      	ldr	r0, [r4, #4]
 80159c8:	f7ff ff82 	bl	80158d0 <std>
 80159cc:	68a0      	ldr	r0, [r4, #8]
 80159ce:	2201      	movs	r2, #1
 80159d0:	2109      	movs	r1, #9
 80159d2:	f7ff ff7d 	bl	80158d0 <std>
 80159d6:	68e0      	ldr	r0, [r4, #12]
 80159d8:	2202      	movs	r2, #2
 80159da:	2112      	movs	r1, #18
 80159dc:	f7ff ff78 	bl	80158d0 <std>
 80159e0:	2301      	movs	r3, #1
 80159e2:	61a3      	str	r3, [r4, #24]
 80159e4:	e7d2      	b.n	801598c <__sinit+0xc>
 80159e6:	bf00      	nop
 80159e8:	0801a4e4 	.word	0x0801a4e4
 80159ec:	08015919 	.word	0x08015919

080159f0 <__sfp>:
 80159f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159f2:	4607      	mov	r7, r0
 80159f4:	f7ff ffac 	bl	8015950 <__sfp_lock_acquire>
 80159f8:	4b1e      	ldr	r3, [pc, #120]	; (8015a74 <__sfp+0x84>)
 80159fa:	681e      	ldr	r6, [r3, #0]
 80159fc:	69b3      	ldr	r3, [r6, #24]
 80159fe:	b913      	cbnz	r3, 8015a06 <__sfp+0x16>
 8015a00:	4630      	mov	r0, r6
 8015a02:	f7ff ffbd 	bl	8015980 <__sinit>
 8015a06:	3648      	adds	r6, #72	; 0x48
 8015a08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015a0c:	3b01      	subs	r3, #1
 8015a0e:	d503      	bpl.n	8015a18 <__sfp+0x28>
 8015a10:	6833      	ldr	r3, [r6, #0]
 8015a12:	b30b      	cbz	r3, 8015a58 <__sfp+0x68>
 8015a14:	6836      	ldr	r6, [r6, #0]
 8015a16:	e7f7      	b.n	8015a08 <__sfp+0x18>
 8015a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015a1c:	b9d5      	cbnz	r5, 8015a54 <__sfp+0x64>
 8015a1e:	4b16      	ldr	r3, [pc, #88]	; (8015a78 <__sfp+0x88>)
 8015a20:	60e3      	str	r3, [r4, #12]
 8015a22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015a26:	6665      	str	r5, [r4, #100]	; 0x64
 8015a28:	f000 fbba 	bl	80161a0 <__retarget_lock_init_recursive>
 8015a2c:	f7ff ff96 	bl	801595c <__sfp_lock_release>
 8015a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015a38:	6025      	str	r5, [r4, #0]
 8015a3a:	61a5      	str	r5, [r4, #24]
 8015a3c:	2208      	movs	r2, #8
 8015a3e:	4629      	mov	r1, r5
 8015a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015a44:	f7fd faaa 	bl	8012f9c <memset>
 8015a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015a50:	4620      	mov	r0, r4
 8015a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a54:	3468      	adds	r4, #104	; 0x68
 8015a56:	e7d9      	b.n	8015a0c <__sfp+0x1c>
 8015a58:	2104      	movs	r1, #4
 8015a5a:	4638      	mov	r0, r7
 8015a5c:	f7ff ff62 	bl	8015924 <__sfmoreglue>
 8015a60:	4604      	mov	r4, r0
 8015a62:	6030      	str	r0, [r6, #0]
 8015a64:	2800      	cmp	r0, #0
 8015a66:	d1d5      	bne.n	8015a14 <__sfp+0x24>
 8015a68:	f7ff ff78 	bl	801595c <__sfp_lock_release>
 8015a6c:	230c      	movs	r3, #12
 8015a6e:	603b      	str	r3, [r7, #0]
 8015a70:	e7ee      	b.n	8015a50 <__sfp+0x60>
 8015a72:	bf00      	nop
 8015a74:	0801a4e4 	.word	0x0801a4e4
 8015a78:	ffff0001 	.word	0xffff0001

08015a7c <_fwalk_reent>:
 8015a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a80:	4606      	mov	r6, r0
 8015a82:	4688      	mov	r8, r1
 8015a84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015a88:	2700      	movs	r7, #0
 8015a8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015a8e:	f1b9 0901 	subs.w	r9, r9, #1
 8015a92:	d505      	bpl.n	8015aa0 <_fwalk_reent+0x24>
 8015a94:	6824      	ldr	r4, [r4, #0]
 8015a96:	2c00      	cmp	r4, #0
 8015a98:	d1f7      	bne.n	8015a8a <_fwalk_reent+0xe>
 8015a9a:	4638      	mov	r0, r7
 8015a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015aa0:	89ab      	ldrh	r3, [r5, #12]
 8015aa2:	2b01      	cmp	r3, #1
 8015aa4:	d907      	bls.n	8015ab6 <_fwalk_reent+0x3a>
 8015aa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015aaa:	3301      	adds	r3, #1
 8015aac:	d003      	beq.n	8015ab6 <_fwalk_reent+0x3a>
 8015aae:	4629      	mov	r1, r5
 8015ab0:	4630      	mov	r0, r6
 8015ab2:	47c0      	blx	r8
 8015ab4:	4307      	orrs	r7, r0
 8015ab6:	3568      	adds	r5, #104	; 0x68
 8015ab8:	e7e9      	b.n	8015a8e <_fwalk_reent+0x12>

08015aba <rshift>:
 8015aba:	6903      	ldr	r3, [r0, #16]
 8015abc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ac4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015ac8:	f100 0414 	add.w	r4, r0, #20
 8015acc:	dd45      	ble.n	8015b5a <rshift+0xa0>
 8015ace:	f011 011f 	ands.w	r1, r1, #31
 8015ad2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015ad6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015ada:	d10c      	bne.n	8015af6 <rshift+0x3c>
 8015adc:	f100 0710 	add.w	r7, r0, #16
 8015ae0:	4629      	mov	r1, r5
 8015ae2:	42b1      	cmp	r1, r6
 8015ae4:	d334      	bcc.n	8015b50 <rshift+0x96>
 8015ae6:	1a9b      	subs	r3, r3, r2
 8015ae8:	009b      	lsls	r3, r3, #2
 8015aea:	1eea      	subs	r2, r5, #3
 8015aec:	4296      	cmp	r6, r2
 8015aee:	bf38      	it	cc
 8015af0:	2300      	movcc	r3, #0
 8015af2:	4423      	add	r3, r4
 8015af4:	e015      	b.n	8015b22 <rshift+0x68>
 8015af6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015afa:	f1c1 0820 	rsb	r8, r1, #32
 8015afe:	40cf      	lsrs	r7, r1
 8015b00:	f105 0e04 	add.w	lr, r5, #4
 8015b04:	46a1      	mov	r9, r4
 8015b06:	4576      	cmp	r6, lr
 8015b08:	46f4      	mov	ip, lr
 8015b0a:	d815      	bhi.n	8015b38 <rshift+0x7e>
 8015b0c:	1a9b      	subs	r3, r3, r2
 8015b0e:	009a      	lsls	r2, r3, #2
 8015b10:	3a04      	subs	r2, #4
 8015b12:	3501      	adds	r5, #1
 8015b14:	42ae      	cmp	r6, r5
 8015b16:	bf38      	it	cc
 8015b18:	2200      	movcc	r2, #0
 8015b1a:	18a3      	adds	r3, r4, r2
 8015b1c:	50a7      	str	r7, [r4, r2]
 8015b1e:	b107      	cbz	r7, 8015b22 <rshift+0x68>
 8015b20:	3304      	adds	r3, #4
 8015b22:	1b1a      	subs	r2, r3, r4
 8015b24:	42a3      	cmp	r3, r4
 8015b26:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015b2a:	bf08      	it	eq
 8015b2c:	2300      	moveq	r3, #0
 8015b2e:	6102      	str	r2, [r0, #16]
 8015b30:	bf08      	it	eq
 8015b32:	6143      	streq	r3, [r0, #20]
 8015b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b38:	f8dc c000 	ldr.w	ip, [ip]
 8015b3c:	fa0c fc08 	lsl.w	ip, ip, r8
 8015b40:	ea4c 0707 	orr.w	r7, ip, r7
 8015b44:	f849 7b04 	str.w	r7, [r9], #4
 8015b48:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015b4c:	40cf      	lsrs	r7, r1
 8015b4e:	e7da      	b.n	8015b06 <rshift+0x4c>
 8015b50:	f851 cb04 	ldr.w	ip, [r1], #4
 8015b54:	f847 cf04 	str.w	ip, [r7, #4]!
 8015b58:	e7c3      	b.n	8015ae2 <rshift+0x28>
 8015b5a:	4623      	mov	r3, r4
 8015b5c:	e7e1      	b.n	8015b22 <rshift+0x68>

08015b5e <__hexdig_fun>:
 8015b5e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015b62:	2b09      	cmp	r3, #9
 8015b64:	d802      	bhi.n	8015b6c <__hexdig_fun+0xe>
 8015b66:	3820      	subs	r0, #32
 8015b68:	b2c0      	uxtb	r0, r0
 8015b6a:	4770      	bx	lr
 8015b6c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015b70:	2b05      	cmp	r3, #5
 8015b72:	d801      	bhi.n	8015b78 <__hexdig_fun+0x1a>
 8015b74:	3847      	subs	r0, #71	; 0x47
 8015b76:	e7f7      	b.n	8015b68 <__hexdig_fun+0xa>
 8015b78:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015b7c:	2b05      	cmp	r3, #5
 8015b7e:	d801      	bhi.n	8015b84 <__hexdig_fun+0x26>
 8015b80:	3827      	subs	r0, #39	; 0x27
 8015b82:	e7f1      	b.n	8015b68 <__hexdig_fun+0xa>
 8015b84:	2000      	movs	r0, #0
 8015b86:	4770      	bx	lr

08015b88 <__gethex>:
 8015b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b8c:	ed2d 8b02 	vpush	{d8}
 8015b90:	b089      	sub	sp, #36	; 0x24
 8015b92:	ee08 0a10 	vmov	s16, r0
 8015b96:	9304      	str	r3, [sp, #16]
 8015b98:	4bbc      	ldr	r3, [pc, #752]	; (8015e8c <__gethex+0x304>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	9301      	str	r3, [sp, #4]
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	468b      	mov	fp, r1
 8015ba2:	4690      	mov	r8, r2
 8015ba4:	f7ea fb14 	bl	80001d0 <strlen>
 8015ba8:	9b01      	ldr	r3, [sp, #4]
 8015baa:	f8db 2000 	ldr.w	r2, [fp]
 8015bae:	4403      	add	r3, r0
 8015bb0:	4682      	mov	sl, r0
 8015bb2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015bb6:	9305      	str	r3, [sp, #20]
 8015bb8:	1c93      	adds	r3, r2, #2
 8015bba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015bbe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015bc2:	32fe      	adds	r2, #254	; 0xfe
 8015bc4:	18d1      	adds	r1, r2, r3
 8015bc6:	461f      	mov	r7, r3
 8015bc8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015bcc:	9100      	str	r1, [sp, #0]
 8015bce:	2830      	cmp	r0, #48	; 0x30
 8015bd0:	d0f8      	beq.n	8015bc4 <__gethex+0x3c>
 8015bd2:	f7ff ffc4 	bl	8015b5e <__hexdig_fun>
 8015bd6:	4604      	mov	r4, r0
 8015bd8:	2800      	cmp	r0, #0
 8015bda:	d13a      	bne.n	8015c52 <__gethex+0xca>
 8015bdc:	9901      	ldr	r1, [sp, #4]
 8015bde:	4652      	mov	r2, sl
 8015be0:	4638      	mov	r0, r7
 8015be2:	f001 fd6f 	bl	80176c4 <strncmp>
 8015be6:	4605      	mov	r5, r0
 8015be8:	2800      	cmp	r0, #0
 8015bea:	d168      	bne.n	8015cbe <__gethex+0x136>
 8015bec:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015bf0:	eb07 060a 	add.w	r6, r7, sl
 8015bf4:	f7ff ffb3 	bl	8015b5e <__hexdig_fun>
 8015bf8:	2800      	cmp	r0, #0
 8015bfa:	d062      	beq.n	8015cc2 <__gethex+0x13a>
 8015bfc:	4633      	mov	r3, r6
 8015bfe:	7818      	ldrb	r0, [r3, #0]
 8015c00:	2830      	cmp	r0, #48	; 0x30
 8015c02:	461f      	mov	r7, r3
 8015c04:	f103 0301 	add.w	r3, r3, #1
 8015c08:	d0f9      	beq.n	8015bfe <__gethex+0x76>
 8015c0a:	f7ff ffa8 	bl	8015b5e <__hexdig_fun>
 8015c0e:	2301      	movs	r3, #1
 8015c10:	fab0 f480 	clz	r4, r0
 8015c14:	0964      	lsrs	r4, r4, #5
 8015c16:	4635      	mov	r5, r6
 8015c18:	9300      	str	r3, [sp, #0]
 8015c1a:	463a      	mov	r2, r7
 8015c1c:	4616      	mov	r6, r2
 8015c1e:	3201      	adds	r2, #1
 8015c20:	7830      	ldrb	r0, [r6, #0]
 8015c22:	f7ff ff9c 	bl	8015b5e <__hexdig_fun>
 8015c26:	2800      	cmp	r0, #0
 8015c28:	d1f8      	bne.n	8015c1c <__gethex+0x94>
 8015c2a:	9901      	ldr	r1, [sp, #4]
 8015c2c:	4652      	mov	r2, sl
 8015c2e:	4630      	mov	r0, r6
 8015c30:	f001 fd48 	bl	80176c4 <strncmp>
 8015c34:	b980      	cbnz	r0, 8015c58 <__gethex+0xd0>
 8015c36:	b94d      	cbnz	r5, 8015c4c <__gethex+0xc4>
 8015c38:	eb06 050a 	add.w	r5, r6, sl
 8015c3c:	462a      	mov	r2, r5
 8015c3e:	4616      	mov	r6, r2
 8015c40:	3201      	adds	r2, #1
 8015c42:	7830      	ldrb	r0, [r6, #0]
 8015c44:	f7ff ff8b 	bl	8015b5e <__hexdig_fun>
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	d1f8      	bne.n	8015c3e <__gethex+0xb6>
 8015c4c:	1bad      	subs	r5, r5, r6
 8015c4e:	00ad      	lsls	r5, r5, #2
 8015c50:	e004      	b.n	8015c5c <__gethex+0xd4>
 8015c52:	2400      	movs	r4, #0
 8015c54:	4625      	mov	r5, r4
 8015c56:	e7e0      	b.n	8015c1a <__gethex+0x92>
 8015c58:	2d00      	cmp	r5, #0
 8015c5a:	d1f7      	bne.n	8015c4c <__gethex+0xc4>
 8015c5c:	7833      	ldrb	r3, [r6, #0]
 8015c5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015c62:	2b50      	cmp	r3, #80	; 0x50
 8015c64:	d13b      	bne.n	8015cde <__gethex+0x156>
 8015c66:	7873      	ldrb	r3, [r6, #1]
 8015c68:	2b2b      	cmp	r3, #43	; 0x2b
 8015c6a:	d02c      	beq.n	8015cc6 <__gethex+0x13e>
 8015c6c:	2b2d      	cmp	r3, #45	; 0x2d
 8015c6e:	d02e      	beq.n	8015cce <__gethex+0x146>
 8015c70:	1c71      	adds	r1, r6, #1
 8015c72:	f04f 0900 	mov.w	r9, #0
 8015c76:	7808      	ldrb	r0, [r1, #0]
 8015c78:	f7ff ff71 	bl	8015b5e <__hexdig_fun>
 8015c7c:	1e43      	subs	r3, r0, #1
 8015c7e:	b2db      	uxtb	r3, r3
 8015c80:	2b18      	cmp	r3, #24
 8015c82:	d82c      	bhi.n	8015cde <__gethex+0x156>
 8015c84:	f1a0 0210 	sub.w	r2, r0, #16
 8015c88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015c8c:	f7ff ff67 	bl	8015b5e <__hexdig_fun>
 8015c90:	1e43      	subs	r3, r0, #1
 8015c92:	b2db      	uxtb	r3, r3
 8015c94:	2b18      	cmp	r3, #24
 8015c96:	d91d      	bls.n	8015cd4 <__gethex+0x14c>
 8015c98:	f1b9 0f00 	cmp.w	r9, #0
 8015c9c:	d000      	beq.n	8015ca0 <__gethex+0x118>
 8015c9e:	4252      	negs	r2, r2
 8015ca0:	4415      	add	r5, r2
 8015ca2:	f8cb 1000 	str.w	r1, [fp]
 8015ca6:	b1e4      	cbz	r4, 8015ce2 <__gethex+0x15a>
 8015ca8:	9b00      	ldr	r3, [sp, #0]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	bf14      	ite	ne
 8015cae:	2700      	movne	r7, #0
 8015cb0:	2706      	moveq	r7, #6
 8015cb2:	4638      	mov	r0, r7
 8015cb4:	b009      	add	sp, #36	; 0x24
 8015cb6:	ecbd 8b02 	vpop	{d8}
 8015cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cbe:	463e      	mov	r6, r7
 8015cc0:	4625      	mov	r5, r4
 8015cc2:	2401      	movs	r4, #1
 8015cc4:	e7ca      	b.n	8015c5c <__gethex+0xd4>
 8015cc6:	f04f 0900 	mov.w	r9, #0
 8015cca:	1cb1      	adds	r1, r6, #2
 8015ccc:	e7d3      	b.n	8015c76 <__gethex+0xee>
 8015cce:	f04f 0901 	mov.w	r9, #1
 8015cd2:	e7fa      	b.n	8015cca <__gethex+0x142>
 8015cd4:	230a      	movs	r3, #10
 8015cd6:	fb03 0202 	mla	r2, r3, r2, r0
 8015cda:	3a10      	subs	r2, #16
 8015cdc:	e7d4      	b.n	8015c88 <__gethex+0x100>
 8015cde:	4631      	mov	r1, r6
 8015ce0:	e7df      	b.n	8015ca2 <__gethex+0x11a>
 8015ce2:	1bf3      	subs	r3, r6, r7
 8015ce4:	3b01      	subs	r3, #1
 8015ce6:	4621      	mov	r1, r4
 8015ce8:	2b07      	cmp	r3, #7
 8015cea:	dc0b      	bgt.n	8015d04 <__gethex+0x17c>
 8015cec:	ee18 0a10 	vmov	r0, s16
 8015cf0:	f000 fa94 	bl	801621c <_Balloc>
 8015cf4:	4604      	mov	r4, r0
 8015cf6:	b940      	cbnz	r0, 8015d0a <__gethex+0x182>
 8015cf8:	4b65      	ldr	r3, [pc, #404]	; (8015e90 <__gethex+0x308>)
 8015cfa:	4602      	mov	r2, r0
 8015cfc:	21de      	movs	r1, #222	; 0xde
 8015cfe:	4865      	ldr	r0, [pc, #404]	; (8015e94 <__gethex+0x30c>)
 8015d00:	f001 fe78 	bl	80179f4 <__assert_func>
 8015d04:	3101      	adds	r1, #1
 8015d06:	105b      	asrs	r3, r3, #1
 8015d08:	e7ee      	b.n	8015ce8 <__gethex+0x160>
 8015d0a:	f100 0914 	add.w	r9, r0, #20
 8015d0e:	f04f 0b00 	mov.w	fp, #0
 8015d12:	f1ca 0301 	rsb	r3, sl, #1
 8015d16:	f8cd 9008 	str.w	r9, [sp, #8]
 8015d1a:	f8cd b000 	str.w	fp, [sp]
 8015d1e:	9306      	str	r3, [sp, #24]
 8015d20:	42b7      	cmp	r7, r6
 8015d22:	d340      	bcc.n	8015da6 <__gethex+0x21e>
 8015d24:	9802      	ldr	r0, [sp, #8]
 8015d26:	9b00      	ldr	r3, [sp, #0]
 8015d28:	f840 3b04 	str.w	r3, [r0], #4
 8015d2c:	eba0 0009 	sub.w	r0, r0, r9
 8015d30:	1080      	asrs	r0, r0, #2
 8015d32:	0146      	lsls	r6, r0, #5
 8015d34:	6120      	str	r0, [r4, #16]
 8015d36:	4618      	mov	r0, r3
 8015d38:	f000 fb66 	bl	8016408 <__hi0bits>
 8015d3c:	1a30      	subs	r0, r6, r0
 8015d3e:	f8d8 6000 	ldr.w	r6, [r8]
 8015d42:	42b0      	cmp	r0, r6
 8015d44:	dd63      	ble.n	8015e0e <__gethex+0x286>
 8015d46:	1b87      	subs	r7, r0, r6
 8015d48:	4639      	mov	r1, r7
 8015d4a:	4620      	mov	r0, r4
 8015d4c:	f000 ff00 	bl	8016b50 <__any_on>
 8015d50:	4682      	mov	sl, r0
 8015d52:	b1a8      	cbz	r0, 8015d80 <__gethex+0x1f8>
 8015d54:	1e7b      	subs	r3, r7, #1
 8015d56:	1159      	asrs	r1, r3, #5
 8015d58:	f003 021f 	and.w	r2, r3, #31
 8015d5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015d60:	f04f 0a01 	mov.w	sl, #1
 8015d64:	fa0a f202 	lsl.w	r2, sl, r2
 8015d68:	420a      	tst	r2, r1
 8015d6a:	d009      	beq.n	8015d80 <__gethex+0x1f8>
 8015d6c:	4553      	cmp	r3, sl
 8015d6e:	dd05      	ble.n	8015d7c <__gethex+0x1f4>
 8015d70:	1eb9      	subs	r1, r7, #2
 8015d72:	4620      	mov	r0, r4
 8015d74:	f000 feec 	bl	8016b50 <__any_on>
 8015d78:	2800      	cmp	r0, #0
 8015d7a:	d145      	bne.n	8015e08 <__gethex+0x280>
 8015d7c:	f04f 0a02 	mov.w	sl, #2
 8015d80:	4639      	mov	r1, r7
 8015d82:	4620      	mov	r0, r4
 8015d84:	f7ff fe99 	bl	8015aba <rshift>
 8015d88:	443d      	add	r5, r7
 8015d8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015d8e:	42ab      	cmp	r3, r5
 8015d90:	da4c      	bge.n	8015e2c <__gethex+0x2a4>
 8015d92:	ee18 0a10 	vmov	r0, s16
 8015d96:	4621      	mov	r1, r4
 8015d98:	f000 fa80 	bl	801629c <_Bfree>
 8015d9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015d9e:	2300      	movs	r3, #0
 8015da0:	6013      	str	r3, [r2, #0]
 8015da2:	27a3      	movs	r7, #163	; 0xa3
 8015da4:	e785      	b.n	8015cb2 <__gethex+0x12a>
 8015da6:	1e73      	subs	r3, r6, #1
 8015da8:	9a05      	ldr	r2, [sp, #20]
 8015daa:	9303      	str	r3, [sp, #12]
 8015dac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015db0:	4293      	cmp	r3, r2
 8015db2:	d019      	beq.n	8015de8 <__gethex+0x260>
 8015db4:	f1bb 0f20 	cmp.w	fp, #32
 8015db8:	d107      	bne.n	8015dca <__gethex+0x242>
 8015dba:	9b02      	ldr	r3, [sp, #8]
 8015dbc:	9a00      	ldr	r2, [sp, #0]
 8015dbe:	f843 2b04 	str.w	r2, [r3], #4
 8015dc2:	9302      	str	r3, [sp, #8]
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	9300      	str	r3, [sp, #0]
 8015dc8:	469b      	mov	fp, r3
 8015dca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015dce:	f7ff fec6 	bl	8015b5e <__hexdig_fun>
 8015dd2:	9b00      	ldr	r3, [sp, #0]
 8015dd4:	f000 000f 	and.w	r0, r0, #15
 8015dd8:	fa00 f00b 	lsl.w	r0, r0, fp
 8015ddc:	4303      	orrs	r3, r0
 8015dde:	9300      	str	r3, [sp, #0]
 8015de0:	f10b 0b04 	add.w	fp, fp, #4
 8015de4:	9b03      	ldr	r3, [sp, #12]
 8015de6:	e00d      	b.n	8015e04 <__gethex+0x27c>
 8015de8:	9b03      	ldr	r3, [sp, #12]
 8015dea:	9a06      	ldr	r2, [sp, #24]
 8015dec:	4413      	add	r3, r2
 8015dee:	42bb      	cmp	r3, r7
 8015df0:	d3e0      	bcc.n	8015db4 <__gethex+0x22c>
 8015df2:	4618      	mov	r0, r3
 8015df4:	9901      	ldr	r1, [sp, #4]
 8015df6:	9307      	str	r3, [sp, #28]
 8015df8:	4652      	mov	r2, sl
 8015dfa:	f001 fc63 	bl	80176c4 <strncmp>
 8015dfe:	9b07      	ldr	r3, [sp, #28]
 8015e00:	2800      	cmp	r0, #0
 8015e02:	d1d7      	bne.n	8015db4 <__gethex+0x22c>
 8015e04:	461e      	mov	r6, r3
 8015e06:	e78b      	b.n	8015d20 <__gethex+0x198>
 8015e08:	f04f 0a03 	mov.w	sl, #3
 8015e0c:	e7b8      	b.n	8015d80 <__gethex+0x1f8>
 8015e0e:	da0a      	bge.n	8015e26 <__gethex+0x29e>
 8015e10:	1a37      	subs	r7, r6, r0
 8015e12:	4621      	mov	r1, r4
 8015e14:	ee18 0a10 	vmov	r0, s16
 8015e18:	463a      	mov	r2, r7
 8015e1a:	f000 fc5b 	bl	80166d4 <__lshift>
 8015e1e:	1bed      	subs	r5, r5, r7
 8015e20:	4604      	mov	r4, r0
 8015e22:	f100 0914 	add.w	r9, r0, #20
 8015e26:	f04f 0a00 	mov.w	sl, #0
 8015e2a:	e7ae      	b.n	8015d8a <__gethex+0x202>
 8015e2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015e30:	42a8      	cmp	r0, r5
 8015e32:	dd72      	ble.n	8015f1a <__gethex+0x392>
 8015e34:	1b45      	subs	r5, r0, r5
 8015e36:	42ae      	cmp	r6, r5
 8015e38:	dc36      	bgt.n	8015ea8 <__gethex+0x320>
 8015e3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015e3e:	2b02      	cmp	r3, #2
 8015e40:	d02a      	beq.n	8015e98 <__gethex+0x310>
 8015e42:	2b03      	cmp	r3, #3
 8015e44:	d02c      	beq.n	8015ea0 <__gethex+0x318>
 8015e46:	2b01      	cmp	r3, #1
 8015e48:	d115      	bne.n	8015e76 <__gethex+0x2ee>
 8015e4a:	42ae      	cmp	r6, r5
 8015e4c:	d113      	bne.n	8015e76 <__gethex+0x2ee>
 8015e4e:	2e01      	cmp	r6, #1
 8015e50:	d10b      	bne.n	8015e6a <__gethex+0x2e2>
 8015e52:	9a04      	ldr	r2, [sp, #16]
 8015e54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015e58:	6013      	str	r3, [r2, #0]
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	6123      	str	r3, [r4, #16]
 8015e5e:	f8c9 3000 	str.w	r3, [r9]
 8015e62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e64:	2762      	movs	r7, #98	; 0x62
 8015e66:	601c      	str	r4, [r3, #0]
 8015e68:	e723      	b.n	8015cb2 <__gethex+0x12a>
 8015e6a:	1e71      	subs	r1, r6, #1
 8015e6c:	4620      	mov	r0, r4
 8015e6e:	f000 fe6f 	bl	8016b50 <__any_on>
 8015e72:	2800      	cmp	r0, #0
 8015e74:	d1ed      	bne.n	8015e52 <__gethex+0x2ca>
 8015e76:	ee18 0a10 	vmov	r0, s16
 8015e7a:	4621      	mov	r1, r4
 8015e7c:	f000 fa0e 	bl	801629c <_Bfree>
 8015e80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015e82:	2300      	movs	r3, #0
 8015e84:	6013      	str	r3, [r2, #0]
 8015e86:	2750      	movs	r7, #80	; 0x50
 8015e88:	e713      	b.n	8015cb2 <__gethex+0x12a>
 8015e8a:	bf00      	nop
 8015e8c:	0801a7d4 	.word	0x0801a7d4
 8015e90:	0801a6f4 	.word	0x0801a6f4
 8015e94:	0801a768 	.word	0x0801a768
 8015e98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d1eb      	bne.n	8015e76 <__gethex+0x2ee>
 8015e9e:	e7d8      	b.n	8015e52 <__gethex+0x2ca>
 8015ea0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d1d5      	bne.n	8015e52 <__gethex+0x2ca>
 8015ea6:	e7e6      	b.n	8015e76 <__gethex+0x2ee>
 8015ea8:	1e6f      	subs	r7, r5, #1
 8015eaa:	f1ba 0f00 	cmp.w	sl, #0
 8015eae:	d131      	bne.n	8015f14 <__gethex+0x38c>
 8015eb0:	b127      	cbz	r7, 8015ebc <__gethex+0x334>
 8015eb2:	4639      	mov	r1, r7
 8015eb4:	4620      	mov	r0, r4
 8015eb6:	f000 fe4b 	bl	8016b50 <__any_on>
 8015eba:	4682      	mov	sl, r0
 8015ebc:	117b      	asrs	r3, r7, #5
 8015ebe:	2101      	movs	r1, #1
 8015ec0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015ec4:	f007 071f 	and.w	r7, r7, #31
 8015ec8:	fa01 f707 	lsl.w	r7, r1, r7
 8015ecc:	421f      	tst	r7, r3
 8015ece:	4629      	mov	r1, r5
 8015ed0:	4620      	mov	r0, r4
 8015ed2:	bf18      	it	ne
 8015ed4:	f04a 0a02 	orrne.w	sl, sl, #2
 8015ed8:	1b76      	subs	r6, r6, r5
 8015eda:	f7ff fdee 	bl	8015aba <rshift>
 8015ede:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015ee2:	2702      	movs	r7, #2
 8015ee4:	f1ba 0f00 	cmp.w	sl, #0
 8015ee8:	d048      	beq.n	8015f7c <__gethex+0x3f4>
 8015eea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015eee:	2b02      	cmp	r3, #2
 8015ef0:	d015      	beq.n	8015f1e <__gethex+0x396>
 8015ef2:	2b03      	cmp	r3, #3
 8015ef4:	d017      	beq.n	8015f26 <__gethex+0x39e>
 8015ef6:	2b01      	cmp	r3, #1
 8015ef8:	d109      	bne.n	8015f0e <__gethex+0x386>
 8015efa:	f01a 0f02 	tst.w	sl, #2
 8015efe:	d006      	beq.n	8015f0e <__gethex+0x386>
 8015f00:	f8d9 0000 	ldr.w	r0, [r9]
 8015f04:	ea4a 0a00 	orr.w	sl, sl, r0
 8015f08:	f01a 0f01 	tst.w	sl, #1
 8015f0c:	d10e      	bne.n	8015f2c <__gethex+0x3a4>
 8015f0e:	f047 0710 	orr.w	r7, r7, #16
 8015f12:	e033      	b.n	8015f7c <__gethex+0x3f4>
 8015f14:	f04f 0a01 	mov.w	sl, #1
 8015f18:	e7d0      	b.n	8015ebc <__gethex+0x334>
 8015f1a:	2701      	movs	r7, #1
 8015f1c:	e7e2      	b.n	8015ee4 <__gethex+0x35c>
 8015f1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f20:	f1c3 0301 	rsb	r3, r3, #1
 8015f24:	9315      	str	r3, [sp, #84]	; 0x54
 8015f26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d0f0      	beq.n	8015f0e <__gethex+0x386>
 8015f2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015f30:	f104 0314 	add.w	r3, r4, #20
 8015f34:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015f38:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015f3c:	f04f 0c00 	mov.w	ip, #0
 8015f40:	4618      	mov	r0, r3
 8015f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f46:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015f4a:	d01c      	beq.n	8015f86 <__gethex+0x3fe>
 8015f4c:	3201      	adds	r2, #1
 8015f4e:	6002      	str	r2, [r0, #0]
 8015f50:	2f02      	cmp	r7, #2
 8015f52:	f104 0314 	add.w	r3, r4, #20
 8015f56:	d13f      	bne.n	8015fd8 <__gethex+0x450>
 8015f58:	f8d8 2000 	ldr.w	r2, [r8]
 8015f5c:	3a01      	subs	r2, #1
 8015f5e:	42b2      	cmp	r2, r6
 8015f60:	d10a      	bne.n	8015f78 <__gethex+0x3f0>
 8015f62:	1171      	asrs	r1, r6, #5
 8015f64:	2201      	movs	r2, #1
 8015f66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015f6a:	f006 061f 	and.w	r6, r6, #31
 8015f6e:	fa02 f606 	lsl.w	r6, r2, r6
 8015f72:	421e      	tst	r6, r3
 8015f74:	bf18      	it	ne
 8015f76:	4617      	movne	r7, r2
 8015f78:	f047 0720 	orr.w	r7, r7, #32
 8015f7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f7e:	601c      	str	r4, [r3, #0]
 8015f80:	9b04      	ldr	r3, [sp, #16]
 8015f82:	601d      	str	r5, [r3, #0]
 8015f84:	e695      	b.n	8015cb2 <__gethex+0x12a>
 8015f86:	4299      	cmp	r1, r3
 8015f88:	f843 cc04 	str.w	ip, [r3, #-4]
 8015f8c:	d8d8      	bhi.n	8015f40 <__gethex+0x3b8>
 8015f8e:	68a3      	ldr	r3, [r4, #8]
 8015f90:	459b      	cmp	fp, r3
 8015f92:	db19      	blt.n	8015fc8 <__gethex+0x440>
 8015f94:	6861      	ldr	r1, [r4, #4]
 8015f96:	ee18 0a10 	vmov	r0, s16
 8015f9a:	3101      	adds	r1, #1
 8015f9c:	f000 f93e 	bl	801621c <_Balloc>
 8015fa0:	4681      	mov	r9, r0
 8015fa2:	b918      	cbnz	r0, 8015fac <__gethex+0x424>
 8015fa4:	4b1a      	ldr	r3, [pc, #104]	; (8016010 <__gethex+0x488>)
 8015fa6:	4602      	mov	r2, r0
 8015fa8:	2184      	movs	r1, #132	; 0x84
 8015faa:	e6a8      	b.n	8015cfe <__gethex+0x176>
 8015fac:	6922      	ldr	r2, [r4, #16]
 8015fae:	3202      	adds	r2, #2
 8015fb0:	f104 010c 	add.w	r1, r4, #12
 8015fb4:	0092      	lsls	r2, r2, #2
 8015fb6:	300c      	adds	r0, #12
 8015fb8:	f000 f922 	bl	8016200 <memcpy>
 8015fbc:	4621      	mov	r1, r4
 8015fbe:	ee18 0a10 	vmov	r0, s16
 8015fc2:	f000 f96b 	bl	801629c <_Bfree>
 8015fc6:	464c      	mov	r4, r9
 8015fc8:	6923      	ldr	r3, [r4, #16]
 8015fca:	1c5a      	adds	r2, r3, #1
 8015fcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015fd0:	6122      	str	r2, [r4, #16]
 8015fd2:	2201      	movs	r2, #1
 8015fd4:	615a      	str	r2, [r3, #20]
 8015fd6:	e7bb      	b.n	8015f50 <__gethex+0x3c8>
 8015fd8:	6922      	ldr	r2, [r4, #16]
 8015fda:	455a      	cmp	r2, fp
 8015fdc:	dd0b      	ble.n	8015ff6 <__gethex+0x46e>
 8015fde:	2101      	movs	r1, #1
 8015fe0:	4620      	mov	r0, r4
 8015fe2:	f7ff fd6a 	bl	8015aba <rshift>
 8015fe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015fea:	3501      	adds	r5, #1
 8015fec:	42ab      	cmp	r3, r5
 8015fee:	f6ff aed0 	blt.w	8015d92 <__gethex+0x20a>
 8015ff2:	2701      	movs	r7, #1
 8015ff4:	e7c0      	b.n	8015f78 <__gethex+0x3f0>
 8015ff6:	f016 061f 	ands.w	r6, r6, #31
 8015ffa:	d0fa      	beq.n	8015ff2 <__gethex+0x46a>
 8015ffc:	449a      	add	sl, r3
 8015ffe:	f1c6 0620 	rsb	r6, r6, #32
 8016002:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016006:	f000 f9ff 	bl	8016408 <__hi0bits>
 801600a:	42b0      	cmp	r0, r6
 801600c:	dbe7      	blt.n	8015fde <__gethex+0x456>
 801600e:	e7f0      	b.n	8015ff2 <__gethex+0x46a>
 8016010:	0801a6f4 	.word	0x0801a6f4

08016014 <L_shift>:
 8016014:	f1c2 0208 	rsb	r2, r2, #8
 8016018:	0092      	lsls	r2, r2, #2
 801601a:	b570      	push	{r4, r5, r6, lr}
 801601c:	f1c2 0620 	rsb	r6, r2, #32
 8016020:	6843      	ldr	r3, [r0, #4]
 8016022:	6804      	ldr	r4, [r0, #0]
 8016024:	fa03 f506 	lsl.w	r5, r3, r6
 8016028:	432c      	orrs	r4, r5
 801602a:	40d3      	lsrs	r3, r2
 801602c:	6004      	str	r4, [r0, #0]
 801602e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016032:	4288      	cmp	r0, r1
 8016034:	d3f4      	bcc.n	8016020 <L_shift+0xc>
 8016036:	bd70      	pop	{r4, r5, r6, pc}

08016038 <__match>:
 8016038:	b530      	push	{r4, r5, lr}
 801603a:	6803      	ldr	r3, [r0, #0]
 801603c:	3301      	adds	r3, #1
 801603e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016042:	b914      	cbnz	r4, 801604a <__match+0x12>
 8016044:	6003      	str	r3, [r0, #0]
 8016046:	2001      	movs	r0, #1
 8016048:	bd30      	pop	{r4, r5, pc}
 801604a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801604e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016052:	2d19      	cmp	r5, #25
 8016054:	bf98      	it	ls
 8016056:	3220      	addls	r2, #32
 8016058:	42a2      	cmp	r2, r4
 801605a:	d0f0      	beq.n	801603e <__match+0x6>
 801605c:	2000      	movs	r0, #0
 801605e:	e7f3      	b.n	8016048 <__match+0x10>

08016060 <__hexnan>:
 8016060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016064:	680b      	ldr	r3, [r1, #0]
 8016066:	6801      	ldr	r1, [r0, #0]
 8016068:	115e      	asrs	r6, r3, #5
 801606a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801606e:	f013 031f 	ands.w	r3, r3, #31
 8016072:	b087      	sub	sp, #28
 8016074:	bf18      	it	ne
 8016076:	3604      	addne	r6, #4
 8016078:	2500      	movs	r5, #0
 801607a:	1f37      	subs	r7, r6, #4
 801607c:	4682      	mov	sl, r0
 801607e:	4690      	mov	r8, r2
 8016080:	9301      	str	r3, [sp, #4]
 8016082:	f846 5c04 	str.w	r5, [r6, #-4]
 8016086:	46b9      	mov	r9, r7
 8016088:	463c      	mov	r4, r7
 801608a:	9502      	str	r5, [sp, #8]
 801608c:	46ab      	mov	fp, r5
 801608e:	784a      	ldrb	r2, [r1, #1]
 8016090:	1c4b      	adds	r3, r1, #1
 8016092:	9303      	str	r3, [sp, #12]
 8016094:	b342      	cbz	r2, 80160e8 <__hexnan+0x88>
 8016096:	4610      	mov	r0, r2
 8016098:	9105      	str	r1, [sp, #20]
 801609a:	9204      	str	r2, [sp, #16]
 801609c:	f7ff fd5f 	bl	8015b5e <__hexdig_fun>
 80160a0:	2800      	cmp	r0, #0
 80160a2:	d14f      	bne.n	8016144 <__hexnan+0xe4>
 80160a4:	9a04      	ldr	r2, [sp, #16]
 80160a6:	9905      	ldr	r1, [sp, #20]
 80160a8:	2a20      	cmp	r2, #32
 80160aa:	d818      	bhi.n	80160de <__hexnan+0x7e>
 80160ac:	9b02      	ldr	r3, [sp, #8]
 80160ae:	459b      	cmp	fp, r3
 80160b0:	dd13      	ble.n	80160da <__hexnan+0x7a>
 80160b2:	454c      	cmp	r4, r9
 80160b4:	d206      	bcs.n	80160c4 <__hexnan+0x64>
 80160b6:	2d07      	cmp	r5, #7
 80160b8:	dc04      	bgt.n	80160c4 <__hexnan+0x64>
 80160ba:	462a      	mov	r2, r5
 80160bc:	4649      	mov	r1, r9
 80160be:	4620      	mov	r0, r4
 80160c0:	f7ff ffa8 	bl	8016014 <L_shift>
 80160c4:	4544      	cmp	r4, r8
 80160c6:	d950      	bls.n	801616a <__hexnan+0x10a>
 80160c8:	2300      	movs	r3, #0
 80160ca:	f1a4 0904 	sub.w	r9, r4, #4
 80160ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80160d2:	f8cd b008 	str.w	fp, [sp, #8]
 80160d6:	464c      	mov	r4, r9
 80160d8:	461d      	mov	r5, r3
 80160da:	9903      	ldr	r1, [sp, #12]
 80160dc:	e7d7      	b.n	801608e <__hexnan+0x2e>
 80160de:	2a29      	cmp	r2, #41	; 0x29
 80160e0:	d156      	bne.n	8016190 <__hexnan+0x130>
 80160e2:	3102      	adds	r1, #2
 80160e4:	f8ca 1000 	str.w	r1, [sl]
 80160e8:	f1bb 0f00 	cmp.w	fp, #0
 80160ec:	d050      	beq.n	8016190 <__hexnan+0x130>
 80160ee:	454c      	cmp	r4, r9
 80160f0:	d206      	bcs.n	8016100 <__hexnan+0xa0>
 80160f2:	2d07      	cmp	r5, #7
 80160f4:	dc04      	bgt.n	8016100 <__hexnan+0xa0>
 80160f6:	462a      	mov	r2, r5
 80160f8:	4649      	mov	r1, r9
 80160fa:	4620      	mov	r0, r4
 80160fc:	f7ff ff8a 	bl	8016014 <L_shift>
 8016100:	4544      	cmp	r4, r8
 8016102:	d934      	bls.n	801616e <__hexnan+0x10e>
 8016104:	f1a8 0204 	sub.w	r2, r8, #4
 8016108:	4623      	mov	r3, r4
 801610a:	f853 1b04 	ldr.w	r1, [r3], #4
 801610e:	f842 1f04 	str.w	r1, [r2, #4]!
 8016112:	429f      	cmp	r7, r3
 8016114:	d2f9      	bcs.n	801610a <__hexnan+0xaa>
 8016116:	1b3b      	subs	r3, r7, r4
 8016118:	f023 0303 	bic.w	r3, r3, #3
 801611c:	3304      	adds	r3, #4
 801611e:	3401      	adds	r4, #1
 8016120:	3e03      	subs	r6, #3
 8016122:	42b4      	cmp	r4, r6
 8016124:	bf88      	it	hi
 8016126:	2304      	movhi	r3, #4
 8016128:	4443      	add	r3, r8
 801612a:	2200      	movs	r2, #0
 801612c:	f843 2b04 	str.w	r2, [r3], #4
 8016130:	429f      	cmp	r7, r3
 8016132:	d2fb      	bcs.n	801612c <__hexnan+0xcc>
 8016134:	683b      	ldr	r3, [r7, #0]
 8016136:	b91b      	cbnz	r3, 8016140 <__hexnan+0xe0>
 8016138:	4547      	cmp	r7, r8
 801613a:	d127      	bne.n	801618c <__hexnan+0x12c>
 801613c:	2301      	movs	r3, #1
 801613e:	603b      	str	r3, [r7, #0]
 8016140:	2005      	movs	r0, #5
 8016142:	e026      	b.n	8016192 <__hexnan+0x132>
 8016144:	3501      	adds	r5, #1
 8016146:	2d08      	cmp	r5, #8
 8016148:	f10b 0b01 	add.w	fp, fp, #1
 801614c:	dd06      	ble.n	801615c <__hexnan+0xfc>
 801614e:	4544      	cmp	r4, r8
 8016150:	d9c3      	bls.n	80160da <__hexnan+0x7a>
 8016152:	2300      	movs	r3, #0
 8016154:	f844 3c04 	str.w	r3, [r4, #-4]
 8016158:	2501      	movs	r5, #1
 801615a:	3c04      	subs	r4, #4
 801615c:	6822      	ldr	r2, [r4, #0]
 801615e:	f000 000f 	and.w	r0, r0, #15
 8016162:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016166:	6022      	str	r2, [r4, #0]
 8016168:	e7b7      	b.n	80160da <__hexnan+0x7a>
 801616a:	2508      	movs	r5, #8
 801616c:	e7b5      	b.n	80160da <__hexnan+0x7a>
 801616e:	9b01      	ldr	r3, [sp, #4]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d0df      	beq.n	8016134 <__hexnan+0xd4>
 8016174:	f04f 32ff 	mov.w	r2, #4294967295
 8016178:	f1c3 0320 	rsb	r3, r3, #32
 801617c:	fa22 f303 	lsr.w	r3, r2, r3
 8016180:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016184:	401a      	ands	r2, r3
 8016186:	f846 2c04 	str.w	r2, [r6, #-4]
 801618a:	e7d3      	b.n	8016134 <__hexnan+0xd4>
 801618c:	3f04      	subs	r7, #4
 801618e:	e7d1      	b.n	8016134 <__hexnan+0xd4>
 8016190:	2004      	movs	r0, #4
 8016192:	b007      	add	sp, #28
 8016194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016198 <_localeconv_r>:
 8016198:	4800      	ldr	r0, [pc, #0]	; (801619c <_localeconv_r+0x4>)
 801619a:	4770      	bx	lr
 801619c:	200002f4 	.word	0x200002f4

080161a0 <__retarget_lock_init_recursive>:
 80161a0:	4770      	bx	lr

080161a2 <__retarget_lock_acquire_recursive>:
 80161a2:	4770      	bx	lr

080161a4 <__retarget_lock_release_recursive>:
 80161a4:	4770      	bx	lr
	...

080161a8 <_lseek_r>:
 80161a8:	b538      	push	{r3, r4, r5, lr}
 80161aa:	4d07      	ldr	r5, [pc, #28]	; (80161c8 <_lseek_r+0x20>)
 80161ac:	4604      	mov	r4, r0
 80161ae:	4608      	mov	r0, r1
 80161b0:	4611      	mov	r1, r2
 80161b2:	2200      	movs	r2, #0
 80161b4:	602a      	str	r2, [r5, #0]
 80161b6:	461a      	mov	r2, r3
 80161b8:	f7ed f940 	bl	800343c <_lseek>
 80161bc:	1c43      	adds	r3, r0, #1
 80161be:	d102      	bne.n	80161c6 <_lseek_r+0x1e>
 80161c0:	682b      	ldr	r3, [r5, #0]
 80161c2:	b103      	cbz	r3, 80161c6 <_lseek_r+0x1e>
 80161c4:	6023      	str	r3, [r4, #0]
 80161c6:	bd38      	pop	{r3, r4, r5, pc}
 80161c8:	2000337c 	.word	0x2000337c

080161cc <malloc>:
 80161cc:	4b02      	ldr	r3, [pc, #8]	; (80161d8 <malloc+0xc>)
 80161ce:	4601      	mov	r1, r0
 80161d0:	6818      	ldr	r0, [r3, #0]
 80161d2:	f000 bd3d 	b.w	8016c50 <_malloc_r>
 80161d6:	bf00      	nop
 80161d8:	2000019c 	.word	0x2000019c

080161dc <__ascii_mbtowc>:
 80161dc:	b082      	sub	sp, #8
 80161de:	b901      	cbnz	r1, 80161e2 <__ascii_mbtowc+0x6>
 80161e0:	a901      	add	r1, sp, #4
 80161e2:	b142      	cbz	r2, 80161f6 <__ascii_mbtowc+0x1a>
 80161e4:	b14b      	cbz	r3, 80161fa <__ascii_mbtowc+0x1e>
 80161e6:	7813      	ldrb	r3, [r2, #0]
 80161e8:	600b      	str	r3, [r1, #0]
 80161ea:	7812      	ldrb	r2, [r2, #0]
 80161ec:	1e10      	subs	r0, r2, #0
 80161ee:	bf18      	it	ne
 80161f0:	2001      	movne	r0, #1
 80161f2:	b002      	add	sp, #8
 80161f4:	4770      	bx	lr
 80161f6:	4610      	mov	r0, r2
 80161f8:	e7fb      	b.n	80161f2 <__ascii_mbtowc+0x16>
 80161fa:	f06f 0001 	mvn.w	r0, #1
 80161fe:	e7f8      	b.n	80161f2 <__ascii_mbtowc+0x16>

08016200 <memcpy>:
 8016200:	440a      	add	r2, r1
 8016202:	4291      	cmp	r1, r2
 8016204:	f100 33ff 	add.w	r3, r0, #4294967295
 8016208:	d100      	bne.n	801620c <memcpy+0xc>
 801620a:	4770      	bx	lr
 801620c:	b510      	push	{r4, lr}
 801620e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016212:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016216:	4291      	cmp	r1, r2
 8016218:	d1f9      	bne.n	801620e <memcpy+0xe>
 801621a:	bd10      	pop	{r4, pc}

0801621c <_Balloc>:
 801621c:	b570      	push	{r4, r5, r6, lr}
 801621e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016220:	4604      	mov	r4, r0
 8016222:	460d      	mov	r5, r1
 8016224:	b976      	cbnz	r6, 8016244 <_Balloc+0x28>
 8016226:	2010      	movs	r0, #16
 8016228:	f7ff ffd0 	bl	80161cc <malloc>
 801622c:	4602      	mov	r2, r0
 801622e:	6260      	str	r0, [r4, #36]	; 0x24
 8016230:	b920      	cbnz	r0, 801623c <_Balloc+0x20>
 8016232:	4b18      	ldr	r3, [pc, #96]	; (8016294 <_Balloc+0x78>)
 8016234:	4818      	ldr	r0, [pc, #96]	; (8016298 <_Balloc+0x7c>)
 8016236:	2166      	movs	r1, #102	; 0x66
 8016238:	f001 fbdc 	bl	80179f4 <__assert_func>
 801623c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016240:	6006      	str	r6, [r0, #0]
 8016242:	60c6      	str	r6, [r0, #12]
 8016244:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016246:	68f3      	ldr	r3, [r6, #12]
 8016248:	b183      	cbz	r3, 801626c <_Balloc+0x50>
 801624a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801624c:	68db      	ldr	r3, [r3, #12]
 801624e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016252:	b9b8      	cbnz	r0, 8016284 <_Balloc+0x68>
 8016254:	2101      	movs	r1, #1
 8016256:	fa01 f605 	lsl.w	r6, r1, r5
 801625a:	1d72      	adds	r2, r6, #5
 801625c:	0092      	lsls	r2, r2, #2
 801625e:	4620      	mov	r0, r4
 8016260:	f000 fc97 	bl	8016b92 <_calloc_r>
 8016264:	b160      	cbz	r0, 8016280 <_Balloc+0x64>
 8016266:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801626a:	e00e      	b.n	801628a <_Balloc+0x6e>
 801626c:	2221      	movs	r2, #33	; 0x21
 801626e:	2104      	movs	r1, #4
 8016270:	4620      	mov	r0, r4
 8016272:	f000 fc8e 	bl	8016b92 <_calloc_r>
 8016276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016278:	60f0      	str	r0, [r6, #12]
 801627a:	68db      	ldr	r3, [r3, #12]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d1e4      	bne.n	801624a <_Balloc+0x2e>
 8016280:	2000      	movs	r0, #0
 8016282:	bd70      	pop	{r4, r5, r6, pc}
 8016284:	6802      	ldr	r2, [r0, #0]
 8016286:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801628a:	2300      	movs	r3, #0
 801628c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016290:	e7f7      	b.n	8016282 <_Balloc+0x66>
 8016292:	bf00      	nop
 8016294:	0801a67e 	.word	0x0801a67e
 8016298:	0801a7e8 	.word	0x0801a7e8

0801629c <_Bfree>:
 801629c:	b570      	push	{r4, r5, r6, lr}
 801629e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80162a0:	4605      	mov	r5, r0
 80162a2:	460c      	mov	r4, r1
 80162a4:	b976      	cbnz	r6, 80162c4 <_Bfree+0x28>
 80162a6:	2010      	movs	r0, #16
 80162a8:	f7ff ff90 	bl	80161cc <malloc>
 80162ac:	4602      	mov	r2, r0
 80162ae:	6268      	str	r0, [r5, #36]	; 0x24
 80162b0:	b920      	cbnz	r0, 80162bc <_Bfree+0x20>
 80162b2:	4b09      	ldr	r3, [pc, #36]	; (80162d8 <_Bfree+0x3c>)
 80162b4:	4809      	ldr	r0, [pc, #36]	; (80162dc <_Bfree+0x40>)
 80162b6:	218a      	movs	r1, #138	; 0x8a
 80162b8:	f001 fb9c 	bl	80179f4 <__assert_func>
 80162bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80162c0:	6006      	str	r6, [r0, #0]
 80162c2:	60c6      	str	r6, [r0, #12]
 80162c4:	b13c      	cbz	r4, 80162d6 <_Bfree+0x3a>
 80162c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80162c8:	6862      	ldr	r2, [r4, #4]
 80162ca:	68db      	ldr	r3, [r3, #12]
 80162cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80162d0:	6021      	str	r1, [r4, #0]
 80162d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80162d6:	bd70      	pop	{r4, r5, r6, pc}
 80162d8:	0801a67e 	.word	0x0801a67e
 80162dc:	0801a7e8 	.word	0x0801a7e8

080162e0 <__multadd>:
 80162e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162e4:	690e      	ldr	r6, [r1, #16]
 80162e6:	4607      	mov	r7, r0
 80162e8:	4698      	mov	r8, r3
 80162ea:	460c      	mov	r4, r1
 80162ec:	f101 0014 	add.w	r0, r1, #20
 80162f0:	2300      	movs	r3, #0
 80162f2:	6805      	ldr	r5, [r0, #0]
 80162f4:	b2a9      	uxth	r1, r5
 80162f6:	fb02 8101 	mla	r1, r2, r1, r8
 80162fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80162fe:	0c2d      	lsrs	r5, r5, #16
 8016300:	fb02 c505 	mla	r5, r2, r5, ip
 8016304:	b289      	uxth	r1, r1
 8016306:	3301      	adds	r3, #1
 8016308:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801630c:	429e      	cmp	r6, r3
 801630e:	f840 1b04 	str.w	r1, [r0], #4
 8016312:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8016316:	dcec      	bgt.n	80162f2 <__multadd+0x12>
 8016318:	f1b8 0f00 	cmp.w	r8, #0
 801631c:	d022      	beq.n	8016364 <__multadd+0x84>
 801631e:	68a3      	ldr	r3, [r4, #8]
 8016320:	42b3      	cmp	r3, r6
 8016322:	dc19      	bgt.n	8016358 <__multadd+0x78>
 8016324:	6861      	ldr	r1, [r4, #4]
 8016326:	4638      	mov	r0, r7
 8016328:	3101      	adds	r1, #1
 801632a:	f7ff ff77 	bl	801621c <_Balloc>
 801632e:	4605      	mov	r5, r0
 8016330:	b928      	cbnz	r0, 801633e <__multadd+0x5e>
 8016332:	4602      	mov	r2, r0
 8016334:	4b0d      	ldr	r3, [pc, #52]	; (801636c <__multadd+0x8c>)
 8016336:	480e      	ldr	r0, [pc, #56]	; (8016370 <__multadd+0x90>)
 8016338:	21b5      	movs	r1, #181	; 0xb5
 801633a:	f001 fb5b 	bl	80179f4 <__assert_func>
 801633e:	6922      	ldr	r2, [r4, #16]
 8016340:	3202      	adds	r2, #2
 8016342:	f104 010c 	add.w	r1, r4, #12
 8016346:	0092      	lsls	r2, r2, #2
 8016348:	300c      	adds	r0, #12
 801634a:	f7ff ff59 	bl	8016200 <memcpy>
 801634e:	4621      	mov	r1, r4
 8016350:	4638      	mov	r0, r7
 8016352:	f7ff ffa3 	bl	801629c <_Bfree>
 8016356:	462c      	mov	r4, r5
 8016358:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801635c:	3601      	adds	r6, #1
 801635e:	f8c3 8014 	str.w	r8, [r3, #20]
 8016362:	6126      	str	r6, [r4, #16]
 8016364:	4620      	mov	r0, r4
 8016366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801636a:	bf00      	nop
 801636c:	0801a6f4 	.word	0x0801a6f4
 8016370:	0801a7e8 	.word	0x0801a7e8

08016374 <__s2b>:
 8016374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016378:	460c      	mov	r4, r1
 801637a:	4615      	mov	r5, r2
 801637c:	461f      	mov	r7, r3
 801637e:	2209      	movs	r2, #9
 8016380:	3308      	adds	r3, #8
 8016382:	4606      	mov	r6, r0
 8016384:	fb93 f3f2 	sdiv	r3, r3, r2
 8016388:	2100      	movs	r1, #0
 801638a:	2201      	movs	r2, #1
 801638c:	429a      	cmp	r2, r3
 801638e:	db09      	blt.n	80163a4 <__s2b+0x30>
 8016390:	4630      	mov	r0, r6
 8016392:	f7ff ff43 	bl	801621c <_Balloc>
 8016396:	b940      	cbnz	r0, 80163aa <__s2b+0x36>
 8016398:	4602      	mov	r2, r0
 801639a:	4b19      	ldr	r3, [pc, #100]	; (8016400 <__s2b+0x8c>)
 801639c:	4819      	ldr	r0, [pc, #100]	; (8016404 <__s2b+0x90>)
 801639e:	21ce      	movs	r1, #206	; 0xce
 80163a0:	f001 fb28 	bl	80179f4 <__assert_func>
 80163a4:	0052      	lsls	r2, r2, #1
 80163a6:	3101      	adds	r1, #1
 80163a8:	e7f0      	b.n	801638c <__s2b+0x18>
 80163aa:	9b08      	ldr	r3, [sp, #32]
 80163ac:	6143      	str	r3, [r0, #20]
 80163ae:	2d09      	cmp	r5, #9
 80163b0:	f04f 0301 	mov.w	r3, #1
 80163b4:	6103      	str	r3, [r0, #16]
 80163b6:	dd16      	ble.n	80163e6 <__s2b+0x72>
 80163b8:	f104 0909 	add.w	r9, r4, #9
 80163bc:	46c8      	mov	r8, r9
 80163be:	442c      	add	r4, r5
 80163c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80163c4:	4601      	mov	r1, r0
 80163c6:	3b30      	subs	r3, #48	; 0x30
 80163c8:	220a      	movs	r2, #10
 80163ca:	4630      	mov	r0, r6
 80163cc:	f7ff ff88 	bl	80162e0 <__multadd>
 80163d0:	45a0      	cmp	r8, r4
 80163d2:	d1f5      	bne.n	80163c0 <__s2b+0x4c>
 80163d4:	f1a5 0408 	sub.w	r4, r5, #8
 80163d8:	444c      	add	r4, r9
 80163da:	1b2d      	subs	r5, r5, r4
 80163dc:	1963      	adds	r3, r4, r5
 80163de:	42bb      	cmp	r3, r7
 80163e0:	db04      	blt.n	80163ec <__s2b+0x78>
 80163e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163e6:	340a      	adds	r4, #10
 80163e8:	2509      	movs	r5, #9
 80163ea:	e7f6      	b.n	80163da <__s2b+0x66>
 80163ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80163f0:	4601      	mov	r1, r0
 80163f2:	3b30      	subs	r3, #48	; 0x30
 80163f4:	220a      	movs	r2, #10
 80163f6:	4630      	mov	r0, r6
 80163f8:	f7ff ff72 	bl	80162e0 <__multadd>
 80163fc:	e7ee      	b.n	80163dc <__s2b+0x68>
 80163fe:	bf00      	nop
 8016400:	0801a6f4 	.word	0x0801a6f4
 8016404:	0801a7e8 	.word	0x0801a7e8

08016408 <__hi0bits>:
 8016408:	0c03      	lsrs	r3, r0, #16
 801640a:	041b      	lsls	r3, r3, #16
 801640c:	b9d3      	cbnz	r3, 8016444 <__hi0bits+0x3c>
 801640e:	0400      	lsls	r0, r0, #16
 8016410:	2310      	movs	r3, #16
 8016412:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016416:	bf04      	itt	eq
 8016418:	0200      	lsleq	r0, r0, #8
 801641a:	3308      	addeq	r3, #8
 801641c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016420:	bf04      	itt	eq
 8016422:	0100      	lsleq	r0, r0, #4
 8016424:	3304      	addeq	r3, #4
 8016426:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801642a:	bf04      	itt	eq
 801642c:	0080      	lsleq	r0, r0, #2
 801642e:	3302      	addeq	r3, #2
 8016430:	2800      	cmp	r0, #0
 8016432:	db05      	blt.n	8016440 <__hi0bits+0x38>
 8016434:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016438:	f103 0301 	add.w	r3, r3, #1
 801643c:	bf08      	it	eq
 801643e:	2320      	moveq	r3, #32
 8016440:	4618      	mov	r0, r3
 8016442:	4770      	bx	lr
 8016444:	2300      	movs	r3, #0
 8016446:	e7e4      	b.n	8016412 <__hi0bits+0xa>

08016448 <__lo0bits>:
 8016448:	6803      	ldr	r3, [r0, #0]
 801644a:	f013 0207 	ands.w	r2, r3, #7
 801644e:	4601      	mov	r1, r0
 8016450:	d00b      	beq.n	801646a <__lo0bits+0x22>
 8016452:	07da      	lsls	r2, r3, #31
 8016454:	d424      	bmi.n	80164a0 <__lo0bits+0x58>
 8016456:	0798      	lsls	r0, r3, #30
 8016458:	bf49      	itett	mi
 801645a:	085b      	lsrmi	r3, r3, #1
 801645c:	089b      	lsrpl	r3, r3, #2
 801645e:	2001      	movmi	r0, #1
 8016460:	600b      	strmi	r3, [r1, #0]
 8016462:	bf5c      	itt	pl
 8016464:	600b      	strpl	r3, [r1, #0]
 8016466:	2002      	movpl	r0, #2
 8016468:	4770      	bx	lr
 801646a:	b298      	uxth	r0, r3
 801646c:	b9b0      	cbnz	r0, 801649c <__lo0bits+0x54>
 801646e:	0c1b      	lsrs	r3, r3, #16
 8016470:	2010      	movs	r0, #16
 8016472:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016476:	bf04      	itt	eq
 8016478:	0a1b      	lsreq	r3, r3, #8
 801647a:	3008      	addeq	r0, #8
 801647c:	071a      	lsls	r2, r3, #28
 801647e:	bf04      	itt	eq
 8016480:	091b      	lsreq	r3, r3, #4
 8016482:	3004      	addeq	r0, #4
 8016484:	079a      	lsls	r2, r3, #30
 8016486:	bf04      	itt	eq
 8016488:	089b      	lsreq	r3, r3, #2
 801648a:	3002      	addeq	r0, #2
 801648c:	07da      	lsls	r2, r3, #31
 801648e:	d403      	bmi.n	8016498 <__lo0bits+0x50>
 8016490:	085b      	lsrs	r3, r3, #1
 8016492:	f100 0001 	add.w	r0, r0, #1
 8016496:	d005      	beq.n	80164a4 <__lo0bits+0x5c>
 8016498:	600b      	str	r3, [r1, #0]
 801649a:	4770      	bx	lr
 801649c:	4610      	mov	r0, r2
 801649e:	e7e8      	b.n	8016472 <__lo0bits+0x2a>
 80164a0:	2000      	movs	r0, #0
 80164a2:	4770      	bx	lr
 80164a4:	2020      	movs	r0, #32
 80164a6:	4770      	bx	lr

080164a8 <__i2b>:
 80164a8:	b510      	push	{r4, lr}
 80164aa:	460c      	mov	r4, r1
 80164ac:	2101      	movs	r1, #1
 80164ae:	f7ff feb5 	bl	801621c <_Balloc>
 80164b2:	4602      	mov	r2, r0
 80164b4:	b928      	cbnz	r0, 80164c2 <__i2b+0x1a>
 80164b6:	4b05      	ldr	r3, [pc, #20]	; (80164cc <__i2b+0x24>)
 80164b8:	4805      	ldr	r0, [pc, #20]	; (80164d0 <__i2b+0x28>)
 80164ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80164be:	f001 fa99 	bl	80179f4 <__assert_func>
 80164c2:	2301      	movs	r3, #1
 80164c4:	6144      	str	r4, [r0, #20]
 80164c6:	6103      	str	r3, [r0, #16]
 80164c8:	bd10      	pop	{r4, pc}
 80164ca:	bf00      	nop
 80164cc:	0801a6f4 	.word	0x0801a6f4
 80164d0:	0801a7e8 	.word	0x0801a7e8

080164d4 <__multiply>:
 80164d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164d8:	4614      	mov	r4, r2
 80164da:	690a      	ldr	r2, [r1, #16]
 80164dc:	6923      	ldr	r3, [r4, #16]
 80164de:	429a      	cmp	r2, r3
 80164e0:	bfb8      	it	lt
 80164e2:	460b      	movlt	r3, r1
 80164e4:	460d      	mov	r5, r1
 80164e6:	bfbc      	itt	lt
 80164e8:	4625      	movlt	r5, r4
 80164ea:	461c      	movlt	r4, r3
 80164ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80164f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80164f4:	68ab      	ldr	r3, [r5, #8]
 80164f6:	6869      	ldr	r1, [r5, #4]
 80164f8:	eb0a 0709 	add.w	r7, sl, r9
 80164fc:	42bb      	cmp	r3, r7
 80164fe:	b085      	sub	sp, #20
 8016500:	bfb8      	it	lt
 8016502:	3101      	addlt	r1, #1
 8016504:	f7ff fe8a 	bl	801621c <_Balloc>
 8016508:	b930      	cbnz	r0, 8016518 <__multiply+0x44>
 801650a:	4602      	mov	r2, r0
 801650c:	4b42      	ldr	r3, [pc, #264]	; (8016618 <__multiply+0x144>)
 801650e:	4843      	ldr	r0, [pc, #268]	; (801661c <__multiply+0x148>)
 8016510:	f240 115d 	movw	r1, #349	; 0x15d
 8016514:	f001 fa6e 	bl	80179f4 <__assert_func>
 8016518:	f100 0614 	add.w	r6, r0, #20
 801651c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016520:	4633      	mov	r3, r6
 8016522:	2200      	movs	r2, #0
 8016524:	4543      	cmp	r3, r8
 8016526:	d31e      	bcc.n	8016566 <__multiply+0x92>
 8016528:	f105 0c14 	add.w	ip, r5, #20
 801652c:	f104 0314 	add.w	r3, r4, #20
 8016530:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8016534:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016538:	9202      	str	r2, [sp, #8]
 801653a:	ebac 0205 	sub.w	r2, ip, r5
 801653e:	3a15      	subs	r2, #21
 8016540:	f022 0203 	bic.w	r2, r2, #3
 8016544:	3204      	adds	r2, #4
 8016546:	f105 0115 	add.w	r1, r5, #21
 801654a:	458c      	cmp	ip, r1
 801654c:	bf38      	it	cc
 801654e:	2204      	movcc	r2, #4
 8016550:	9201      	str	r2, [sp, #4]
 8016552:	9a02      	ldr	r2, [sp, #8]
 8016554:	9303      	str	r3, [sp, #12]
 8016556:	429a      	cmp	r2, r3
 8016558:	d808      	bhi.n	801656c <__multiply+0x98>
 801655a:	2f00      	cmp	r7, #0
 801655c:	dc55      	bgt.n	801660a <__multiply+0x136>
 801655e:	6107      	str	r7, [r0, #16]
 8016560:	b005      	add	sp, #20
 8016562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016566:	f843 2b04 	str.w	r2, [r3], #4
 801656a:	e7db      	b.n	8016524 <__multiply+0x50>
 801656c:	f8b3 a000 	ldrh.w	sl, [r3]
 8016570:	f1ba 0f00 	cmp.w	sl, #0
 8016574:	d020      	beq.n	80165b8 <__multiply+0xe4>
 8016576:	f105 0e14 	add.w	lr, r5, #20
 801657a:	46b1      	mov	r9, r6
 801657c:	2200      	movs	r2, #0
 801657e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8016582:	f8d9 b000 	ldr.w	fp, [r9]
 8016586:	b2a1      	uxth	r1, r4
 8016588:	fa1f fb8b 	uxth.w	fp, fp
 801658c:	fb0a b101 	mla	r1, sl, r1, fp
 8016590:	4411      	add	r1, r2
 8016592:	f8d9 2000 	ldr.w	r2, [r9]
 8016596:	0c24      	lsrs	r4, r4, #16
 8016598:	0c12      	lsrs	r2, r2, #16
 801659a:	fb0a 2404 	mla	r4, sl, r4, r2
 801659e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80165a2:	b289      	uxth	r1, r1
 80165a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80165a8:	45f4      	cmp	ip, lr
 80165aa:	f849 1b04 	str.w	r1, [r9], #4
 80165ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80165b2:	d8e4      	bhi.n	801657e <__multiply+0xaa>
 80165b4:	9901      	ldr	r1, [sp, #4]
 80165b6:	5072      	str	r2, [r6, r1]
 80165b8:	9a03      	ldr	r2, [sp, #12]
 80165ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80165be:	3304      	adds	r3, #4
 80165c0:	f1b9 0f00 	cmp.w	r9, #0
 80165c4:	d01f      	beq.n	8016606 <__multiply+0x132>
 80165c6:	6834      	ldr	r4, [r6, #0]
 80165c8:	f105 0114 	add.w	r1, r5, #20
 80165cc:	46b6      	mov	lr, r6
 80165ce:	f04f 0a00 	mov.w	sl, #0
 80165d2:	880a      	ldrh	r2, [r1, #0]
 80165d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80165d8:	fb09 b202 	mla	r2, r9, r2, fp
 80165dc:	4492      	add	sl, r2
 80165de:	b2a4      	uxth	r4, r4
 80165e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80165e4:	f84e 4b04 	str.w	r4, [lr], #4
 80165e8:	f851 4b04 	ldr.w	r4, [r1], #4
 80165ec:	f8be 2000 	ldrh.w	r2, [lr]
 80165f0:	0c24      	lsrs	r4, r4, #16
 80165f2:	fb09 2404 	mla	r4, r9, r4, r2
 80165f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80165fa:	458c      	cmp	ip, r1
 80165fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016600:	d8e7      	bhi.n	80165d2 <__multiply+0xfe>
 8016602:	9a01      	ldr	r2, [sp, #4]
 8016604:	50b4      	str	r4, [r6, r2]
 8016606:	3604      	adds	r6, #4
 8016608:	e7a3      	b.n	8016552 <__multiply+0x7e>
 801660a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801660e:	2b00      	cmp	r3, #0
 8016610:	d1a5      	bne.n	801655e <__multiply+0x8a>
 8016612:	3f01      	subs	r7, #1
 8016614:	e7a1      	b.n	801655a <__multiply+0x86>
 8016616:	bf00      	nop
 8016618:	0801a6f4 	.word	0x0801a6f4
 801661c:	0801a7e8 	.word	0x0801a7e8

08016620 <__pow5mult>:
 8016620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016624:	4615      	mov	r5, r2
 8016626:	f012 0203 	ands.w	r2, r2, #3
 801662a:	4606      	mov	r6, r0
 801662c:	460f      	mov	r7, r1
 801662e:	d007      	beq.n	8016640 <__pow5mult+0x20>
 8016630:	4c25      	ldr	r4, [pc, #148]	; (80166c8 <__pow5mult+0xa8>)
 8016632:	3a01      	subs	r2, #1
 8016634:	2300      	movs	r3, #0
 8016636:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801663a:	f7ff fe51 	bl	80162e0 <__multadd>
 801663e:	4607      	mov	r7, r0
 8016640:	10ad      	asrs	r5, r5, #2
 8016642:	d03d      	beq.n	80166c0 <__pow5mult+0xa0>
 8016644:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016646:	b97c      	cbnz	r4, 8016668 <__pow5mult+0x48>
 8016648:	2010      	movs	r0, #16
 801664a:	f7ff fdbf 	bl	80161cc <malloc>
 801664e:	4602      	mov	r2, r0
 8016650:	6270      	str	r0, [r6, #36]	; 0x24
 8016652:	b928      	cbnz	r0, 8016660 <__pow5mult+0x40>
 8016654:	4b1d      	ldr	r3, [pc, #116]	; (80166cc <__pow5mult+0xac>)
 8016656:	481e      	ldr	r0, [pc, #120]	; (80166d0 <__pow5mult+0xb0>)
 8016658:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801665c:	f001 f9ca 	bl	80179f4 <__assert_func>
 8016660:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016664:	6004      	str	r4, [r0, #0]
 8016666:	60c4      	str	r4, [r0, #12]
 8016668:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801666c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016670:	b94c      	cbnz	r4, 8016686 <__pow5mult+0x66>
 8016672:	f240 2171 	movw	r1, #625	; 0x271
 8016676:	4630      	mov	r0, r6
 8016678:	f7ff ff16 	bl	80164a8 <__i2b>
 801667c:	2300      	movs	r3, #0
 801667e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016682:	4604      	mov	r4, r0
 8016684:	6003      	str	r3, [r0, #0]
 8016686:	f04f 0900 	mov.w	r9, #0
 801668a:	07eb      	lsls	r3, r5, #31
 801668c:	d50a      	bpl.n	80166a4 <__pow5mult+0x84>
 801668e:	4639      	mov	r1, r7
 8016690:	4622      	mov	r2, r4
 8016692:	4630      	mov	r0, r6
 8016694:	f7ff ff1e 	bl	80164d4 <__multiply>
 8016698:	4639      	mov	r1, r7
 801669a:	4680      	mov	r8, r0
 801669c:	4630      	mov	r0, r6
 801669e:	f7ff fdfd 	bl	801629c <_Bfree>
 80166a2:	4647      	mov	r7, r8
 80166a4:	106d      	asrs	r5, r5, #1
 80166a6:	d00b      	beq.n	80166c0 <__pow5mult+0xa0>
 80166a8:	6820      	ldr	r0, [r4, #0]
 80166aa:	b938      	cbnz	r0, 80166bc <__pow5mult+0x9c>
 80166ac:	4622      	mov	r2, r4
 80166ae:	4621      	mov	r1, r4
 80166b0:	4630      	mov	r0, r6
 80166b2:	f7ff ff0f 	bl	80164d4 <__multiply>
 80166b6:	6020      	str	r0, [r4, #0]
 80166b8:	f8c0 9000 	str.w	r9, [r0]
 80166bc:	4604      	mov	r4, r0
 80166be:	e7e4      	b.n	801668a <__pow5mult+0x6a>
 80166c0:	4638      	mov	r0, r7
 80166c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166c6:	bf00      	nop
 80166c8:	0801a938 	.word	0x0801a938
 80166cc:	0801a67e 	.word	0x0801a67e
 80166d0:	0801a7e8 	.word	0x0801a7e8

080166d4 <__lshift>:
 80166d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166d8:	460c      	mov	r4, r1
 80166da:	6849      	ldr	r1, [r1, #4]
 80166dc:	6923      	ldr	r3, [r4, #16]
 80166de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80166e2:	68a3      	ldr	r3, [r4, #8]
 80166e4:	4607      	mov	r7, r0
 80166e6:	4691      	mov	r9, r2
 80166e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80166ec:	f108 0601 	add.w	r6, r8, #1
 80166f0:	42b3      	cmp	r3, r6
 80166f2:	db0b      	blt.n	801670c <__lshift+0x38>
 80166f4:	4638      	mov	r0, r7
 80166f6:	f7ff fd91 	bl	801621c <_Balloc>
 80166fa:	4605      	mov	r5, r0
 80166fc:	b948      	cbnz	r0, 8016712 <__lshift+0x3e>
 80166fe:	4602      	mov	r2, r0
 8016700:	4b28      	ldr	r3, [pc, #160]	; (80167a4 <__lshift+0xd0>)
 8016702:	4829      	ldr	r0, [pc, #164]	; (80167a8 <__lshift+0xd4>)
 8016704:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016708:	f001 f974 	bl	80179f4 <__assert_func>
 801670c:	3101      	adds	r1, #1
 801670e:	005b      	lsls	r3, r3, #1
 8016710:	e7ee      	b.n	80166f0 <__lshift+0x1c>
 8016712:	2300      	movs	r3, #0
 8016714:	f100 0114 	add.w	r1, r0, #20
 8016718:	f100 0210 	add.w	r2, r0, #16
 801671c:	4618      	mov	r0, r3
 801671e:	4553      	cmp	r3, sl
 8016720:	db33      	blt.n	801678a <__lshift+0xb6>
 8016722:	6920      	ldr	r0, [r4, #16]
 8016724:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016728:	f104 0314 	add.w	r3, r4, #20
 801672c:	f019 091f 	ands.w	r9, r9, #31
 8016730:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016734:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016738:	d02b      	beq.n	8016792 <__lshift+0xbe>
 801673a:	f1c9 0e20 	rsb	lr, r9, #32
 801673e:	468a      	mov	sl, r1
 8016740:	2200      	movs	r2, #0
 8016742:	6818      	ldr	r0, [r3, #0]
 8016744:	fa00 f009 	lsl.w	r0, r0, r9
 8016748:	4302      	orrs	r2, r0
 801674a:	f84a 2b04 	str.w	r2, [sl], #4
 801674e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016752:	459c      	cmp	ip, r3
 8016754:	fa22 f20e 	lsr.w	r2, r2, lr
 8016758:	d8f3      	bhi.n	8016742 <__lshift+0x6e>
 801675a:	ebac 0304 	sub.w	r3, ip, r4
 801675e:	3b15      	subs	r3, #21
 8016760:	f023 0303 	bic.w	r3, r3, #3
 8016764:	3304      	adds	r3, #4
 8016766:	f104 0015 	add.w	r0, r4, #21
 801676a:	4584      	cmp	ip, r0
 801676c:	bf38      	it	cc
 801676e:	2304      	movcc	r3, #4
 8016770:	50ca      	str	r2, [r1, r3]
 8016772:	b10a      	cbz	r2, 8016778 <__lshift+0xa4>
 8016774:	f108 0602 	add.w	r6, r8, #2
 8016778:	3e01      	subs	r6, #1
 801677a:	4638      	mov	r0, r7
 801677c:	612e      	str	r6, [r5, #16]
 801677e:	4621      	mov	r1, r4
 8016780:	f7ff fd8c 	bl	801629c <_Bfree>
 8016784:	4628      	mov	r0, r5
 8016786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801678a:	f842 0f04 	str.w	r0, [r2, #4]!
 801678e:	3301      	adds	r3, #1
 8016790:	e7c5      	b.n	801671e <__lshift+0x4a>
 8016792:	3904      	subs	r1, #4
 8016794:	f853 2b04 	ldr.w	r2, [r3], #4
 8016798:	f841 2f04 	str.w	r2, [r1, #4]!
 801679c:	459c      	cmp	ip, r3
 801679e:	d8f9      	bhi.n	8016794 <__lshift+0xc0>
 80167a0:	e7ea      	b.n	8016778 <__lshift+0xa4>
 80167a2:	bf00      	nop
 80167a4:	0801a6f4 	.word	0x0801a6f4
 80167a8:	0801a7e8 	.word	0x0801a7e8

080167ac <__mcmp>:
 80167ac:	b530      	push	{r4, r5, lr}
 80167ae:	6902      	ldr	r2, [r0, #16]
 80167b0:	690c      	ldr	r4, [r1, #16]
 80167b2:	1b12      	subs	r2, r2, r4
 80167b4:	d10e      	bne.n	80167d4 <__mcmp+0x28>
 80167b6:	f100 0314 	add.w	r3, r0, #20
 80167ba:	3114      	adds	r1, #20
 80167bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80167c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80167c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80167c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80167cc:	42a5      	cmp	r5, r4
 80167ce:	d003      	beq.n	80167d8 <__mcmp+0x2c>
 80167d0:	d305      	bcc.n	80167de <__mcmp+0x32>
 80167d2:	2201      	movs	r2, #1
 80167d4:	4610      	mov	r0, r2
 80167d6:	bd30      	pop	{r4, r5, pc}
 80167d8:	4283      	cmp	r3, r0
 80167da:	d3f3      	bcc.n	80167c4 <__mcmp+0x18>
 80167dc:	e7fa      	b.n	80167d4 <__mcmp+0x28>
 80167de:	f04f 32ff 	mov.w	r2, #4294967295
 80167e2:	e7f7      	b.n	80167d4 <__mcmp+0x28>

080167e4 <__mdiff>:
 80167e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167e8:	460c      	mov	r4, r1
 80167ea:	4606      	mov	r6, r0
 80167ec:	4611      	mov	r1, r2
 80167ee:	4620      	mov	r0, r4
 80167f0:	4617      	mov	r7, r2
 80167f2:	f7ff ffdb 	bl	80167ac <__mcmp>
 80167f6:	1e05      	subs	r5, r0, #0
 80167f8:	d110      	bne.n	801681c <__mdiff+0x38>
 80167fa:	4629      	mov	r1, r5
 80167fc:	4630      	mov	r0, r6
 80167fe:	f7ff fd0d 	bl	801621c <_Balloc>
 8016802:	b930      	cbnz	r0, 8016812 <__mdiff+0x2e>
 8016804:	4b39      	ldr	r3, [pc, #228]	; (80168ec <__mdiff+0x108>)
 8016806:	4602      	mov	r2, r0
 8016808:	f240 2132 	movw	r1, #562	; 0x232
 801680c:	4838      	ldr	r0, [pc, #224]	; (80168f0 <__mdiff+0x10c>)
 801680e:	f001 f8f1 	bl	80179f4 <__assert_func>
 8016812:	2301      	movs	r3, #1
 8016814:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801681c:	bfa4      	itt	ge
 801681e:	463b      	movge	r3, r7
 8016820:	4627      	movge	r7, r4
 8016822:	4630      	mov	r0, r6
 8016824:	6879      	ldr	r1, [r7, #4]
 8016826:	bfa6      	itte	ge
 8016828:	461c      	movge	r4, r3
 801682a:	2500      	movge	r5, #0
 801682c:	2501      	movlt	r5, #1
 801682e:	f7ff fcf5 	bl	801621c <_Balloc>
 8016832:	b920      	cbnz	r0, 801683e <__mdiff+0x5a>
 8016834:	4b2d      	ldr	r3, [pc, #180]	; (80168ec <__mdiff+0x108>)
 8016836:	4602      	mov	r2, r0
 8016838:	f44f 7110 	mov.w	r1, #576	; 0x240
 801683c:	e7e6      	b.n	801680c <__mdiff+0x28>
 801683e:	693e      	ldr	r6, [r7, #16]
 8016840:	60c5      	str	r5, [r0, #12]
 8016842:	6925      	ldr	r5, [r4, #16]
 8016844:	f107 0114 	add.w	r1, r7, #20
 8016848:	f104 0914 	add.w	r9, r4, #20
 801684c:	f100 0e14 	add.w	lr, r0, #20
 8016850:	f107 0210 	add.w	r2, r7, #16
 8016854:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016858:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801685c:	46f2      	mov	sl, lr
 801685e:	2700      	movs	r7, #0
 8016860:	f859 3b04 	ldr.w	r3, [r9], #4
 8016864:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016868:	fa1f f883 	uxth.w	r8, r3
 801686c:	fa17 f78b 	uxtah	r7, r7, fp
 8016870:	0c1b      	lsrs	r3, r3, #16
 8016872:	eba7 0808 	sub.w	r8, r7, r8
 8016876:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801687a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801687e:	fa1f f888 	uxth.w	r8, r8
 8016882:	141f      	asrs	r7, r3, #16
 8016884:	454d      	cmp	r5, r9
 8016886:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801688a:	f84a 3b04 	str.w	r3, [sl], #4
 801688e:	d8e7      	bhi.n	8016860 <__mdiff+0x7c>
 8016890:	1b2b      	subs	r3, r5, r4
 8016892:	3b15      	subs	r3, #21
 8016894:	f023 0303 	bic.w	r3, r3, #3
 8016898:	3304      	adds	r3, #4
 801689a:	3415      	adds	r4, #21
 801689c:	42a5      	cmp	r5, r4
 801689e:	bf38      	it	cc
 80168a0:	2304      	movcc	r3, #4
 80168a2:	4419      	add	r1, r3
 80168a4:	4473      	add	r3, lr
 80168a6:	469e      	mov	lr, r3
 80168a8:	460d      	mov	r5, r1
 80168aa:	4565      	cmp	r5, ip
 80168ac:	d30e      	bcc.n	80168cc <__mdiff+0xe8>
 80168ae:	f10c 0203 	add.w	r2, ip, #3
 80168b2:	1a52      	subs	r2, r2, r1
 80168b4:	f022 0203 	bic.w	r2, r2, #3
 80168b8:	3903      	subs	r1, #3
 80168ba:	458c      	cmp	ip, r1
 80168bc:	bf38      	it	cc
 80168be:	2200      	movcc	r2, #0
 80168c0:	441a      	add	r2, r3
 80168c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80168c6:	b17b      	cbz	r3, 80168e8 <__mdiff+0x104>
 80168c8:	6106      	str	r6, [r0, #16]
 80168ca:	e7a5      	b.n	8016818 <__mdiff+0x34>
 80168cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80168d0:	fa17 f488 	uxtah	r4, r7, r8
 80168d4:	1422      	asrs	r2, r4, #16
 80168d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80168da:	b2a4      	uxth	r4, r4
 80168dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80168e0:	f84e 4b04 	str.w	r4, [lr], #4
 80168e4:	1417      	asrs	r7, r2, #16
 80168e6:	e7e0      	b.n	80168aa <__mdiff+0xc6>
 80168e8:	3e01      	subs	r6, #1
 80168ea:	e7ea      	b.n	80168c2 <__mdiff+0xde>
 80168ec:	0801a6f4 	.word	0x0801a6f4
 80168f0:	0801a7e8 	.word	0x0801a7e8

080168f4 <__ulp>:
 80168f4:	b082      	sub	sp, #8
 80168f6:	ed8d 0b00 	vstr	d0, [sp]
 80168fa:	9b01      	ldr	r3, [sp, #4]
 80168fc:	4912      	ldr	r1, [pc, #72]	; (8016948 <__ulp+0x54>)
 80168fe:	4019      	ands	r1, r3
 8016900:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016904:	2900      	cmp	r1, #0
 8016906:	dd05      	ble.n	8016914 <__ulp+0x20>
 8016908:	2200      	movs	r2, #0
 801690a:	460b      	mov	r3, r1
 801690c:	ec43 2b10 	vmov	d0, r2, r3
 8016910:	b002      	add	sp, #8
 8016912:	4770      	bx	lr
 8016914:	4249      	negs	r1, r1
 8016916:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801691a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801691e:	f04f 0200 	mov.w	r2, #0
 8016922:	f04f 0300 	mov.w	r3, #0
 8016926:	da04      	bge.n	8016932 <__ulp+0x3e>
 8016928:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801692c:	fa41 f300 	asr.w	r3, r1, r0
 8016930:	e7ec      	b.n	801690c <__ulp+0x18>
 8016932:	f1a0 0114 	sub.w	r1, r0, #20
 8016936:	291e      	cmp	r1, #30
 8016938:	bfda      	itte	le
 801693a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801693e:	fa20 f101 	lsrle.w	r1, r0, r1
 8016942:	2101      	movgt	r1, #1
 8016944:	460a      	mov	r2, r1
 8016946:	e7e1      	b.n	801690c <__ulp+0x18>
 8016948:	7ff00000 	.word	0x7ff00000

0801694c <__b2d>:
 801694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801694e:	6905      	ldr	r5, [r0, #16]
 8016950:	f100 0714 	add.w	r7, r0, #20
 8016954:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016958:	1f2e      	subs	r6, r5, #4
 801695a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801695e:	4620      	mov	r0, r4
 8016960:	f7ff fd52 	bl	8016408 <__hi0bits>
 8016964:	f1c0 0320 	rsb	r3, r0, #32
 8016968:	280a      	cmp	r0, #10
 801696a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80169e8 <__b2d+0x9c>
 801696e:	600b      	str	r3, [r1, #0]
 8016970:	dc14      	bgt.n	801699c <__b2d+0x50>
 8016972:	f1c0 0e0b 	rsb	lr, r0, #11
 8016976:	fa24 f10e 	lsr.w	r1, r4, lr
 801697a:	42b7      	cmp	r7, r6
 801697c:	ea41 030c 	orr.w	r3, r1, ip
 8016980:	bf34      	ite	cc
 8016982:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016986:	2100      	movcs	r1, #0
 8016988:	3015      	adds	r0, #21
 801698a:	fa04 f000 	lsl.w	r0, r4, r0
 801698e:	fa21 f10e 	lsr.w	r1, r1, lr
 8016992:	ea40 0201 	orr.w	r2, r0, r1
 8016996:	ec43 2b10 	vmov	d0, r2, r3
 801699a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801699c:	42b7      	cmp	r7, r6
 801699e:	bf3a      	itte	cc
 80169a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80169a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80169a8:	2100      	movcs	r1, #0
 80169aa:	380b      	subs	r0, #11
 80169ac:	d017      	beq.n	80169de <__b2d+0x92>
 80169ae:	f1c0 0c20 	rsb	ip, r0, #32
 80169b2:	fa04 f500 	lsl.w	r5, r4, r0
 80169b6:	42be      	cmp	r6, r7
 80169b8:	fa21 f40c 	lsr.w	r4, r1, ip
 80169bc:	ea45 0504 	orr.w	r5, r5, r4
 80169c0:	bf8c      	ite	hi
 80169c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80169c6:	2400      	movls	r4, #0
 80169c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80169cc:	fa01 f000 	lsl.w	r0, r1, r0
 80169d0:	fa24 f40c 	lsr.w	r4, r4, ip
 80169d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80169d8:	ea40 0204 	orr.w	r2, r0, r4
 80169dc:	e7db      	b.n	8016996 <__b2d+0x4a>
 80169de:	ea44 030c 	orr.w	r3, r4, ip
 80169e2:	460a      	mov	r2, r1
 80169e4:	e7d7      	b.n	8016996 <__b2d+0x4a>
 80169e6:	bf00      	nop
 80169e8:	3ff00000 	.word	0x3ff00000

080169ec <__d2b>:
 80169ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80169f0:	4689      	mov	r9, r1
 80169f2:	2101      	movs	r1, #1
 80169f4:	ec57 6b10 	vmov	r6, r7, d0
 80169f8:	4690      	mov	r8, r2
 80169fa:	f7ff fc0f 	bl	801621c <_Balloc>
 80169fe:	4604      	mov	r4, r0
 8016a00:	b930      	cbnz	r0, 8016a10 <__d2b+0x24>
 8016a02:	4602      	mov	r2, r0
 8016a04:	4b25      	ldr	r3, [pc, #148]	; (8016a9c <__d2b+0xb0>)
 8016a06:	4826      	ldr	r0, [pc, #152]	; (8016aa0 <__d2b+0xb4>)
 8016a08:	f240 310a 	movw	r1, #778	; 0x30a
 8016a0c:	f000 fff2 	bl	80179f4 <__assert_func>
 8016a10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016a14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016a18:	bb35      	cbnz	r5, 8016a68 <__d2b+0x7c>
 8016a1a:	2e00      	cmp	r6, #0
 8016a1c:	9301      	str	r3, [sp, #4]
 8016a1e:	d028      	beq.n	8016a72 <__d2b+0x86>
 8016a20:	4668      	mov	r0, sp
 8016a22:	9600      	str	r6, [sp, #0]
 8016a24:	f7ff fd10 	bl	8016448 <__lo0bits>
 8016a28:	9900      	ldr	r1, [sp, #0]
 8016a2a:	b300      	cbz	r0, 8016a6e <__d2b+0x82>
 8016a2c:	9a01      	ldr	r2, [sp, #4]
 8016a2e:	f1c0 0320 	rsb	r3, r0, #32
 8016a32:	fa02 f303 	lsl.w	r3, r2, r3
 8016a36:	430b      	orrs	r3, r1
 8016a38:	40c2      	lsrs	r2, r0
 8016a3a:	6163      	str	r3, [r4, #20]
 8016a3c:	9201      	str	r2, [sp, #4]
 8016a3e:	9b01      	ldr	r3, [sp, #4]
 8016a40:	61a3      	str	r3, [r4, #24]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	bf14      	ite	ne
 8016a46:	2202      	movne	r2, #2
 8016a48:	2201      	moveq	r2, #1
 8016a4a:	6122      	str	r2, [r4, #16]
 8016a4c:	b1d5      	cbz	r5, 8016a84 <__d2b+0x98>
 8016a4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016a52:	4405      	add	r5, r0
 8016a54:	f8c9 5000 	str.w	r5, [r9]
 8016a58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016a5c:	f8c8 0000 	str.w	r0, [r8]
 8016a60:	4620      	mov	r0, r4
 8016a62:	b003      	add	sp, #12
 8016a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016a6c:	e7d5      	b.n	8016a1a <__d2b+0x2e>
 8016a6e:	6161      	str	r1, [r4, #20]
 8016a70:	e7e5      	b.n	8016a3e <__d2b+0x52>
 8016a72:	a801      	add	r0, sp, #4
 8016a74:	f7ff fce8 	bl	8016448 <__lo0bits>
 8016a78:	9b01      	ldr	r3, [sp, #4]
 8016a7a:	6163      	str	r3, [r4, #20]
 8016a7c:	2201      	movs	r2, #1
 8016a7e:	6122      	str	r2, [r4, #16]
 8016a80:	3020      	adds	r0, #32
 8016a82:	e7e3      	b.n	8016a4c <__d2b+0x60>
 8016a84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016a88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016a8c:	f8c9 0000 	str.w	r0, [r9]
 8016a90:	6918      	ldr	r0, [r3, #16]
 8016a92:	f7ff fcb9 	bl	8016408 <__hi0bits>
 8016a96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016a9a:	e7df      	b.n	8016a5c <__d2b+0x70>
 8016a9c:	0801a6f4 	.word	0x0801a6f4
 8016aa0:	0801a7e8 	.word	0x0801a7e8

08016aa4 <__ratio>:
 8016aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aa8:	4688      	mov	r8, r1
 8016aaa:	4669      	mov	r1, sp
 8016aac:	4681      	mov	r9, r0
 8016aae:	f7ff ff4d 	bl	801694c <__b2d>
 8016ab2:	a901      	add	r1, sp, #4
 8016ab4:	4640      	mov	r0, r8
 8016ab6:	ec55 4b10 	vmov	r4, r5, d0
 8016aba:	f7ff ff47 	bl	801694c <__b2d>
 8016abe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016ac2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016ac6:	eba3 0c02 	sub.w	ip, r3, r2
 8016aca:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016ace:	1a9b      	subs	r3, r3, r2
 8016ad0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016ad4:	ec51 0b10 	vmov	r0, r1, d0
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	bfd6      	itet	le
 8016adc:	460a      	movle	r2, r1
 8016ade:	462a      	movgt	r2, r5
 8016ae0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016ae4:	468b      	mov	fp, r1
 8016ae6:	462f      	mov	r7, r5
 8016ae8:	bfd4      	ite	le
 8016aea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016aee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016af2:	4620      	mov	r0, r4
 8016af4:	ee10 2a10 	vmov	r2, s0
 8016af8:	465b      	mov	r3, fp
 8016afa:	4639      	mov	r1, r7
 8016afc:	f7e9 fea6 	bl	800084c <__aeabi_ddiv>
 8016b00:	ec41 0b10 	vmov	d0, r0, r1
 8016b04:	b003      	add	sp, #12
 8016b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b0a <__copybits>:
 8016b0a:	3901      	subs	r1, #1
 8016b0c:	b570      	push	{r4, r5, r6, lr}
 8016b0e:	1149      	asrs	r1, r1, #5
 8016b10:	6914      	ldr	r4, [r2, #16]
 8016b12:	3101      	adds	r1, #1
 8016b14:	f102 0314 	add.w	r3, r2, #20
 8016b18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016b1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016b20:	1f05      	subs	r5, r0, #4
 8016b22:	42a3      	cmp	r3, r4
 8016b24:	d30c      	bcc.n	8016b40 <__copybits+0x36>
 8016b26:	1aa3      	subs	r3, r4, r2
 8016b28:	3b11      	subs	r3, #17
 8016b2a:	f023 0303 	bic.w	r3, r3, #3
 8016b2e:	3211      	adds	r2, #17
 8016b30:	42a2      	cmp	r2, r4
 8016b32:	bf88      	it	hi
 8016b34:	2300      	movhi	r3, #0
 8016b36:	4418      	add	r0, r3
 8016b38:	2300      	movs	r3, #0
 8016b3a:	4288      	cmp	r0, r1
 8016b3c:	d305      	bcc.n	8016b4a <__copybits+0x40>
 8016b3e:	bd70      	pop	{r4, r5, r6, pc}
 8016b40:	f853 6b04 	ldr.w	r6, [r3], #4
 8016b44:	f845 6f04 	str.w	r6, [r5, #4]!
 8016b48:	e7eb      	b.n	8016b22 <__copybits+0x18>
 8016b4a:	f840 3b04 	str.w	r3, [r0], #4
 8016b4e:	e7f4      	b.n	8016b3a <__copybits+0x30>

08016b50 <__any_on>:
 8016b50:	f100 0214 	add.w	r2, r0, #20
 8016b54:	6900      	ldr	r0, [r0, #16]
 8016b56:	114b      	asrs	r3, r1, #5
 8016b58:	4298      	cmp	r0, r3
 8016b5a:	b510      	push	{r4, lr}
 8016b5c:	db11      	blt.n	8016b82 <__any_on+0x32>
 8016b5e:	dd0a      	ble.n	8016b76 <__any_on+0x26>
 8016b60:	f011 011f 	ands.w	r1, r1, #31
 8016b64:	d007      	beq.n	8016b76 <__any_on+0x26>
 8016b66:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016b6a:	fa24 f001 	lsr.w	r0, r4, r1
 8016b6e:	fa00 f101 	lsl.w	r1, r0, r1
 8016b72:	428c      	cmp	r4, r1
 8016b74:	d10b      	bne.n	8016b8e <__any_on+0x3e>
 8016b76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016b7a:	4293      	cmp	r3, r2
 8016b7c:	d803      	bhi.n	8016b86 <__any_on+0x36>
 8016b7e:	2000      	movs	r0, #0
 8016b80:	bd10      	pop	{r4, pc}
 8016b82:	4603      	mov	r3, r0
 8016b84:	e7f7      	b.n	8016b76 <__any_on+0x26>
 8016b86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016b8a:	2900      	cmp	r1, #0
 8016b8c:	d0f5      	beq.n	8016b7a <__any_on+0x2a>
 8016b8e:	2001      	movs	r0, #1
 8016b90:	e7f6      	b.n	8016b80 <__any_on+0x30>

08016b92 <_calloc_r>:
 8016b92:	b513      	push	{r0, r1, r4, lr}
 8016b94:	434a      	muls	r2, r1
 8016b96:	4611      	mov	r1, r2
 8016b98:	9201      	str	r2, [sp, #4]
 8016b9a:	f000 f859 	bl	8016c50 <_malloc_r>
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	b118      	cbz	r0, 8016baa <_calloc_r+0x18>
 8016ba2:	9a01      	ldr	r2, [sp, #4]
 8016ba4:	2100      	movs	r1, #0
 8016ba6:	f7fc f9f9 	bl	8012f9c <memset>
 8016baa:	4620      	mov	r0, r4
 8016bac:	b002      	add	sp, #8
 8016bae:	bd10      	pop	{r4, pc}

08016bb0 <_free_r>:
 8016bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016bb2:	2900      	cmp	r1, #0
 8016bb4:	d048      	beq.n	8016c48 <_free_r+0x98>
 8016bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016bba:	9001      	str	r0, [sp, #4]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	f1a1 0404 	sub.w	r4, r1, #4
 8016bc2:	bfb8      	it	lt
 8016bc4:	18e4      	addlt	r4, r4, r3
 8016bc6:	f001 f885 	bl	8017cd4 <__malloc_lock>
 8016bca:	4a20      	ldr	r2, [pc, #128]	; (8016c4c <_free_r+0x9c>)
 8016bcc:	9801      	ldr	r0, [sp, #4]
 8016bce:	6813      	ldr	r3, [r2, #0]
 8016bd0:	4615      	mov	r5, r2
 8016bd2:	b933      	cbnz	r3, 8016be2 <_free_r+0x32>
 8016bd4:	6063      	str	r3, [r4, #4]
 8016bd6:	6014      	str	r4, [r2, #0]
 8016bd8:	b003      	add	sp, #12
 8016bda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016bde:	f001 b87f 	b.w	8017ce0 <__malloc_unlock>
 8016be2:	42a3      	cmp	r3, r4
 8016be4:	d90b      	bls.n	8016bfe <_free_r+0x4e>
 8016be6:	6821      	ldr	r1, [r4, #0]
 8016be8:	1862      	adds	r2, r4, r1
 8016bea:	4293      	cmp	r3, r2
 8016bec:	bf04      	itt	eq
 8016bee:	681a      	ldreq	r2, [r3, #0]
 8016bf0:	685b      	ldreq	r3, [r3, #4]
 8016bf2:	6063      	str	r3, [r4, #4]
 8016bf4:	bf04      	itt	eq
 8016bf6:	1852      	addeq	r2, r2, r1
 8016bf8:	6022      	streq	r2, [r4, #0]
 8016bfa:	602c      	str	r4, [r5, #0]
 8016bfc:	e7ec      	b.n	8016bd8 <_free_r+0x28>
 8016bfe:	461a      	mov	r2, r3
 8016c00:	685b      	ldr	r3, [r3, #4]
 8016c02:	b10b      	cbz	r3, 8016c08 <_free_r+0x58>
 8016c04:	42a3      	cmp	r3, r4
 8016c06:	d9fa      	bls.n	8016bfe <_free_r+0x4e>
 8016c08:	6811      	ldr	r1, [r2, #0]
 8016c0a:	1855      	adds	r5, r2, r1
 8016c0c:	42a5      	cmp	r5, r4
 8016c0e:	d10b      	bne.n	8016c28 <_free_r+0x78>
 8016c10:	6824      	ldr	r4, [r4, #0]
 8016c12:	4421      	add	r1, r4
 8016c14:	1854      	adds	r4, r2, r1
 8016c16:	42a3      	cmp	r3, r4
 8016c18:	6011      	str	r1, [r2, #0]
 8016c1a:	d1dd      	bne.n	8016bd8 <_free_r+0x28>
 8016c1c:	681c      	ldr	r4, [r3, #0]
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	6053      	str	r3, [r2, #4]
 8016c22:	4421      	add	r1, r4
 8016c24:	6011      	str	r1, [r2, #0]
 8016c26:	e7d7      	b.n	8016bd8 <_free_r+0x28>
 8016c28:	d902      	bls.n	8016c30 <_free_r+0x80>
 8016c2a:	230c      	movs	r3, #12
 8016c2c:	6003      	str	r3, [r0, #0]
 8016c2e:	e7d3      	b.n	8016bd8 <_free_r+0x28>
 8016c30:	6825      	ldr	r5, [r4, #0]
 8016c32:	1961      	adds	r1, r4, r5
 8016c34:	428b      	cmp	r3, r1
 8016c36:	bf04      	itt	eq
 8016c38:	6819      	ldreq	r1, [r3, #0]
 8016c3a:	685b      	ldreq	r3, [r3, #4]
 8016c3c:	6063      	str	r3, [r4, #4]
 8016c3e:	bf04      	itt	eq
 8016c40:	1949      	addeq	r1, r1, r5
 8016c42:	6021      	streq	r1, [r4, #0]
 8016c44:	6054      	str	r4, [r2, #4]
 8016c46:	e7c7      	b.n	8016bd8 <_free_r+0x28>
 8016c48:	b003      	add	sp, #12
 8016c4a:	bd30      	pop	{r4, r5, pc}
 8016c4c:	200008a4 	.word	0x200008a4

08016c50 <_malloc_r>:
 8016c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c52:	1ccd      	adds	r5, r1, #3
 8016c54:	f025 0503 	bic.w	r5, r5, #3
 8016c58:	3508      	adds	r5, #8
 8016c5a:	2d0c      	cmp	r5, #12
 8016c5c:	bf38      	it	cc
 8016c5e:	250c      	movcc	r5, #12
 8016c60:	2d00      	cmp	r5, #0
 8016c62:	4606      	mov	r6, r0
 8016c64:	db01      	blt.n	8016c6a <_malloc_r+0x1a>
 8016c66:	42a9      	cmp	r1, r5
 8016c68:	d903      	bls.n	8016c72 <_malloc_r+0x22>
 8016c6a:	230c      	movs	r3, #12
 8016c6c:	6033      	str	r3, [r6, #0]
 8016c6e:	2000      	movs	r0, #0
 8016c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c72:	f001 f82f 	bl	8017cd4 <__malloc_lock>
 8016c76:	4921      	ldr	r1, [pc, #132]	; (8016cfc <_malloc_r+0xac>)
 8016c78:	680a      	ldr	r2, [r1, #0]
 8016c7a:	4614      	mov	r4, r2
 8016c7c:	b99c      	cbnz	r4, 8016ca6 <_malloc_r+0x56>
 8016c7e:	4f20      	ldr	r7, [pc, #128]	; (8016d00 <_malloc_r+0xb0>)
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	b923      	cbnz	r3, 8016c8e <_malloc_r+0x3e>
 8016c84:	4621      	mov	r1, r4
 8016c86:	4630      	mov	r0, r6
 8016c88:	f000 fcd2 	bl	8017630 <_sbrk_r>
 8016c8c:	6038      	str	r0, [r7, #0]
 8016c8e:	4629      	mov	r1, r5
 8016c90:	4630      	mov	r0, r6
 8016c92:	f000 fccd 	bl	8017630 <_sbrk_r>
 8016c96:	1c43      	adds	r3, r0, #1
 8016c98:	d123      	bne.n	8016ce2 <_malloc_r+0x92>
 8016c9a:	230c      	movs	r3, #12
 8016c9c:	6033      	str	r3, [r6, #0]
 8016c9e:	4630      	mov	r0, r6
 8016ca0:	f001 f81e 	bl	8017ce0 <__malloc_unlock>
 8016ca4:	e7e3      	b.n	8016c6e <_malloc_r+0x1e>
 8016ca6:	6823      	ldr	r3, [r4, #0]
 8016ca8:	1b5b      	subs	r3, r3, r5
 8016caa:	d417      	bmi.n	8016cdc <_malloc_r+0x8c>
 8016cac:	2b0b      	cmp	r3, #11
 8016cae:	d903      	bls.n	8016cb8 <_malloc_r+0x68>
 8016cb0:	6023      	str	r3, [r4, #0]
 8016cb2:	441c      	add	r4, r3
 8016cb4:	6025      	str	r5, [r4, #0]
 8016cb6:	e004      	b.n	8016cc2 <_malloc_r+0x72>
 8016cb8:	6863      	ldr	r3, [r4, #4]
 8016cba:	42a2      	cmp	r2, r4
 8016cbc:	bf0c      	ite	eq
 8016cbe:	600b      	streq	r3, [r1, #0]
 8016cc0:	6053      	strne	r3, [r2, #4]
 8016cc2:	4630      	mov	r0, r6
 8016cc4:	f001 f80c 	bl	8017ce0 <__malloc_unlock>
 8016cc8:	f104 000b 	add.w	r0, r4, #11
 8016ccc:	1d23      	adds	r3, r4, #4
 8016cce:	f020 0007 	bic.w	r0, r0, #7
 8016cd2:	1ac2      	subs	r2, r0, r3
 8016cd4:	d0cc      	beq.n	8016c70 <_malloc_r+0x20>
 8016cd6:	1a1b      	subs	r3, r3, r0
 8016cd8:	50a3      	str	r3, [r4, r2]
 8016cda:	e7c9      	b.n	8016c70 <_malloc_r+0x20>
 8016cdc:	4622      	mov	r2, r4
 8016cde:	6864      	ldr	r4, [r4, #4]
 8016ce0:	e7cc      	b.n	8016c7c <_malloc_r+0x2c>
 8016ce2:	1cc4      	adds	r4, r0, #3
 8016ce4:	f024 0403 	bic.w	r4, r4, #3
 8016ce8:	42a0      	cmp	r0, r4
 8016cea:	d0e3      	beq.n	8016cb4 <_malloc_r+0x64>
 8016cec:	1a21      	subs	r1, r4, r0
 8016cee:	4630      	mov	r0, r6
 8016cf0:	f000 fc9e 	bl	8017630 <_sbrk_r>
 8016cf4:	3001      	adds	r0, #1
 8016cf6:	d1dd      	bne.n	8016cb4 <_malloc_r+0x64>
 8016cf8:	e7cf      	b.n	8016c9a <_malloc_r+0x4a>
 8016cfa:	bf00      	nop
 8016cfc:	200008a4 	.word	0x200008a4
 8016d00:	200008a8 	.word	0x200008a8

08016d04 <__ssputs_r>:
 8016d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d08:	688e      	ldr	r6, [r1, #8]
 8016d0a:	429e      	cmp	r6, r3
 8016d0c:	4682      	mov	sl, r0
 8016d0e:	460c      	mov	r4, r1
 8016d10:	4690      	mov	r8, r2
 8016d12:	461f      	mov	r7, r3
 8016d14:	d838      	bhi.n	8016d88 <__ssputs_r+0x84>
 8016d16:	898a      	ldrh	r2, [r1, #12]
 8016d18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016d1c:	d032      	beq.n	8016d84 <__ssputs_r+0x80>
 8016d1e:	6825      	ldr	r5, [r4, #0]
 8016d20:	6909      	ldr	r1, [r1, #16]
 8016d22:	eba5 0901 	sub.w	r9, r5, r1
 8016d26:	6965      	ldr	r5, [r4, #20]
 8016d28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016d30:	3301      	adds	r3, #1
 8016d32:	444b      	add	r3, r9
 8016d34:	106d      	asrs	r5, r5, #1
 8016d36:	429d      	cmp	r5, r3
 8016d38:	bf38      	it	cc
 8016d3a:	461d      	movcc	r5, r3
 8016d3c:	0553      	lsls	r3, r2, #21
 8016d3e:	d531      	bpl.n	8016da4 <__ssputs_r+0xa0>
 8016d40:	4629      	mov	r1, r5
 8016d42:	f7ff ff85 	bl	8016c50 <_malloc_r>
 8016d46:	4606      	mov	r6, r0
 8016d48:	b950      	cbnz	r0, 8016d60 <__ssputs_r+0x5c>
 8016d4a:	230c      	movs	r3, #12
 8016d4c:	f8ca 3000 	str.w	r3, [sl]
 8016d50:	89a3      	ldrh	r3, [r4, #12]
 8016d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d56:	81a3      	strh	r3, [r4, #12]
 8016d58:	f04f 30ff 	mov.w	r0, #4294967295
 8016d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d60:	6921      	ldr	r1, [r4, #16]
 8016d62:	464a      	mov	r2, r9
 8016d64:	f7ff fa4c 	bl	8016200 <memcpy>
 8016d68:	89a3      	ldrh	r3, [r4, #12]
 8016d6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d72:	81a3      	strh	r3, [r4, #12]
 8016d74:	6126      	str	r6, [r4, #16]
 8016d76:	6165      	str	r5, [r4, #20]
 8016d78:	444e      	add	r6, r9
 8016d7a:	eba5 0509 	sub.w	r5, r5, r9
 8016d7e:	6026      	str	r6, [r4, #0]
 8016d80:	60a5      	str	r5, [r4, #8]
 8016d82:	463e      	mov	r6, r7
 8016d84:	42be      	cmp	r6, r7
 8016d86:	d900      	bls.n	8016d8a <__ssputs_r+0x86>
 8016d88:	463e      	mov	r6, r7
 8016d8a:	4632      	mov	r2, r6
 8016d8c:	6820      	ldr	r0, [r4, #0]
 8016d8e:	4641      	mov	r1, r8
 8016d90:	f000 ff86 	bl	8017ca0 <memmove>
 8016d94:	68a3      	ldr	r3, [r4, #8]
 8016d96:	6822      	ldr	r2, [r4, #0]
 8016d98:	1b9b      	subs	r3, r3, r6
 8016d9a:	4432      	add	r2, r6
 8016d9c:	60a3      	str	r3, [r4, #8]
 8016d9e:	6022      	str	r2, [r4, #0]
 8016da0:	2000      	movs	r0, #0
 8016da2:	e7db      	b.n	8016d5c <__ssputs_r+0x58>
 8016da4:	462a      	mov	r2, r5
 8016da6:	f000 ffa1 	bl	8017cec <_realloc_r>
 8016daa:	4606      	mov	r6, r0
 8016dac:	2800      	cmp	r0, #0
 8016dae:	d1e1      	bne.n	8016d74 <__ssputs_r+0x70>
 8016db0:	6921      	ldr	r1, [r4, #16]
 8016db2:	4650      	mov	r0, sl
 8016db4:	f7ff fefc 	bl	8016bb0 <_free_r>
 8016db8:	e7c7      	b.n	8016d4a <__ssputs_r+0x46>
	...

08016dbc <_svfiprintf_r>:
 8016dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dc0:	4698      	mov	r8, r3
 8016dc2:	898b      	ldrh	r3, [r1, #12]
 8016dc4:	061b      	lsls	r3, r3, #24
 8016dc6:	b09d      	sub	sp, #116	; 0x74
 8016dc8:	4607      	mov	r7, r0
 8016dca:	460d      	mov	r5, r1
 8016dcc:	4614      	mov	r4, r2
 8016dce:	d50e      	bpl.n	8016dee <_svfiprintf_r+0x32>
 8016dd0:	690b      	ldr	r3, [r1, #16]
 8016dd2:	b963      	cbnz	r3, 8016dee <_svfiprintf_r+0x32>
 8016dd4:	2140      	movs	r1, #64	; 0x40
 8016dd6:	f7ff ff3b 	bl	8016c50 <_malloc_r>
 8016dda:	6028      	str	r0, [r5, #0]
 8016ddc:	6128      	str	r0, [r5, #16]
 8016dde:	b920      	cbnz	r0, 8016dea <_svfiprintf_r+0x2e>
 8016de0:	230c      	movs	r3, #12
 8016de2:	603b      	str	r3, [r7, #0]
 8016de4:	f04f 30ff 	mov.w	r0, #4294967295
 8016de8:	e0d1      	b.n	8016f8e <_svfiprintf_r+0x1d2>
 8016dea:	2340      	movs	r3, #64	; 0x40
 8016dec:	616b      	str	r3, [r5, #20]
 8016dee:	2300      	movs	r3, #0
 8016df0:	9309      	str	r3, [sp, #36]	; 0x24
 8016df2:	2320      	movs	r3, #32
 8016df4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016df8:	f8cd 800c 	str.w	r8, [sp, #12]
 8016dfc:	2330      	movs	r3, #48	; 0x30
 8016dfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016fa8 <_svfiprintf_r+0x1ec>
 8016e02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e06:	f04f 0901 	mov.w	r9, #1
 8016e0a:	4623      	mov	r3, r4
 8016e0c:	469a      	mov	sl, r3
 8016e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e12:	b10a      	cbz	r2, 8016e18 <_svfiprintf_r+0x5c>
 8016e14:	2a25      	cmp	r2, #37	; 0x25
 8016e16:	d1f9      	bne.n	8016e0c <_svfiprintf_r+0x50>
 8016e18:	ebba 0b04 	subs.w	fp, sl, r4
 8016e1c:	d00b      	beq.n	8016e36 <_svfiprintf_r+0x7a>
 8016e1e:	465b      	mov	r3, fp
 8016e20:	4622      	mov	r2, r4
 8016e22:	4629      	mov	r1, r5
 8016e24:	4638      	mov	r0, r7
 8016e26:	f7ff ff6d 	bl	8016d04 <__ssputs_r>
 8016e2a:	3001      	adds	r0, #1
 8016e2c:	f000 80aa 	beq.w	8016f84 <_svfiprintf_r+0x1c8>
 8016e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e32:	445a      	add	r2, fp
 8016e34:	9209      	str	r2, [sp, #36]	; 0x24
 8016e36:	f89a 3000 	ldrb.w	r3, [sl]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	f000 80a2 	beq.w	8016f84 <_svfiprintf_r+0x1c8>
 8016e40:	2300      	movs	r3, #0
 8016e42:	f04f 32ff 	mov.w	r2, #4294967295
 8016e46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e4a:	f10a 0a01 	add.w	sl, sl, #1
 8016e4e:	9304      	str	r3, [sp, #16]
 8016e50:	9307      	str	r3, [sp, #28]
 8016e52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e56:	931a      	str	r3, [sp, #104]	; 0x68
 8016e58:	4654      	mov	r4, sl
 8016e5a:	2205      	movs	r2, #5
 8016e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e60:	4851      	ldr	r0, [pc, #324]	; (8016fa8 <_svfiprintf_r+0x1ec>)
 8016e62:	f7e9 f9bd 	bl	80001e0 <memchr>
 8016e66:	9a04      	ldr	r2, [sp, #16]
 8016e68:	b9d8      	cbnz	r0, 8016ea2 <_svfiprintf_r+0xe6>
 8016e6a:	06d0      	lsls	r0, r2, #27
 8016e6c:	bf44      	itt	mi
 8016e6e:	2320      	movmi	r3, #32
 8016e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e74:	0711      	lsls	r1, r2, #28
 8016e76:	bf44      	itt	mi
 8016e78:	232b      	movmi	r3, #43	; 0x2b
 8016e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8016e82:	2b2a      	cmp	r3, #42	; 0x2a
 8016e84:	d015      	beq.n	8016eb2 <_svfiprintf_r+0xf6>
 8016e86:	9a07      	ldr	r2, [sp, #28]
 8016e88:	4654      	mov	r4, sl
 8016e8a:	2000      	movs	r0, #0
 8016e8c:	f04f 0c0a 	mov.w	ip, #10
 8016e90:	4621      	mov	r1, r4
 8016e92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e96:	3b30      	subs	r3, #48	; 0x30
 8016e98:	2b09      	cmp	r3, #9
 8016e9a:	d94e      	bls.n	8016f3a <_svfiprintf_r+0x17e>
 8016e9c:	b1b0      	cbz	r0, 8016ecc <_svfiprintf_r+0x110>
 8016e9e:	9207      	str	r2, [sp, #28]
 8016ea0:	e014      	b.n	8016ecc <_svfiprintf_r+0x110>
 8016ea2:	eba0 0308 	sub.w	r3, r0, r8
 8016ea6:	fa09 f303 	lsl.w	r3, r9, r3
 8016eaa:	4313      	orrs	r3, r2
 8016eac:	9304      	str	r3, [sp, #16]
 8016eae:	46a2      	mov	sl, r4
 8016eb0:	e7d2      	b.n	8016e58 <_svfiprintf_r+0x9c>
 8016eb2:	9b03      	ldr	r3, [sp, #12]
 8016eb4:	1d19      	adds	r1, r3, #4
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	9103      	str	r1, [sp, #12]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	bfbb      	ittet	lt
 8016ebe:	425b      	neglt	r3, r3
 8016ec0:	f042 0202 	orrlt.w	r2, r2, #2
 8016ec4:	9307      	strge	r3, [sp, #28]
 8016ec6:	9307      	strlt	r3, [sp, #28]
 8016ec8:	bfb8      	it	lt
 8016eca:	9204      	strlt	r2, [sp, #16]
 8016ecc:	7823      	ldrb	r3, [r4, #0]
 8016ece:	2b2e      	cmp	r3, #46	; 0x2e
 8016ed0:	d10c      	bne.n	8016eec <_svfiprintf_r+0x130>
 8016ed2:	7863      	ldrb	r3, [r4, #1]
 8016ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8016ed6:	d135      	bne.n	8016f44 <_svfiprintf_r+0x188>
 8016ed8:	9b03      	ldr	r3, [sp, #12]
 8016eda:	1d1a      	adds	r2, r3, #4
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	9203      	str	r2, [sp, #12]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	bfb8      	it	lt
 8016ee4:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ee8:	3402      	adds	r4, #2
 8016eea:	9305      	str	r3, [sp, #20]
 8016eec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016fb8 <_svfiprintf_r+0x1fc>
 8016ef0:	7821      	ldrb	r1, [r4, #0]
 8016ef2:	2203      	movs	r2, #3
 8016ef4:	4650      	mov	r0, sl
 8016ef6:	f7e9 f973 	bl	80001e0 <memchr>
 8016efa:	b140      	cbz	r0, 8016f0e <_svfiprintf_r+0x152>
 8016efc:	2340      	movs	r3, #64	; 0x40
 8016efe:	eba0 000a 	sub.w	r0, r0, sl
 8016f02:	fa03 f000 	lsl.w	r0, r3, r0
 8016f06:	9b04      	ldr	r3, [sp, #16]
 8016f08:	4303      	orrs	r3, r0
 8016f0a:	3401      	adds	r4, #1
 8016f0c:	9304      	str	r3, [sp, #16]
 8016f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f12:	4826      	ldr	r0, [pc, #152]	; (8016fac <_svfiprintf_r+0x1f0>)
 8016f14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016f18:	2206      	movs	r2, #6
 8016f1a:	f7e9 f961 	bl	80001e0 <memchr>
 8016f1e:	2800      	cmp	r0, #0
 8016f20:	d038      	beq.n	8016f94 <_svfiprintf_r+0x1d8>
 8016f22:	4b23      	ldr	r3, [pc, #140]	; (8016fb0 <_svfiprintf_r+0x1f4>)
 8016f24:	bb1b      	cbnz	r3, 8016f6e <_svfiprintf_r+0x1b2>
 8016f26:	9b03      	ldr	r3, [sp, #12]
 8016f28:	3307      	adds	r3, #7
 8016f2a:	f023 0307 	bic.w	r3, r3, #7
 8016f2e:	3308      	adds	r3, #8
 8016f30:	9303      	str	r3, [sp, #12]
 8016f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f34:	4433      	add	r3, r6
 8016f36:	9309      	str	r3, [sp, #36]	; 0x24
 8016f38:	e767      	b.n	8016e0a <_svfiprintf_r+0x4e>
 8016f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f3e:	460c      	mov	r4, r1
 8016f40:	2001      	movs	r0, #1
 8016f42:	e7a5      	b.n	8016e90 <_svfiprintf_r+0xd4>
 8016f44:	2300      	movs	r3, #0
 8016f46:	3401      	adds	r4, #1
 8016f48:	9305      	str	r3, [sp, #20]
 8016f4a:	4619      	mov	r1, r3
 8016f4c:	f04f 0c0a 	mov.w	ip, #10
 8016f50:	4620      	mov	r0, r4
 8016f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f56:	3a30      	subs	r2, #48	; 0x30
 8016f58:	2a09      	cmp	r2, #9
 8016f5a:	d903      	bls.n	8016f64 <_svfiprintf_r+0x1a8>
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d0c5      	beq.n	8016eec <_svfiprintf_r+0x130>
 8016f60:	9105      	str	r1, [sp, #20]
 8016f62:	e7c3      	b.n	8016eec <_svfiprintf_r+0x130>
 8016f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f68:	4604      	mov	r4, r0
 8016f6a:	2301      	movs	r3, #1
 8016f6c:	e7f0      	b.n	8016f50 <_svfiprintf_r+0x194>
 8016f6e:	ab03      	add	r3, sp, #12
 8016f70:	9300      	str	r3, [sp, #0]
 8016f72:	462a      	mov	r2, r5
 8016f74:	4b0f      	ldr	r3, [pc, #60]	; (8016fb4 <_svfiprintf_r+0x1f8>)
 8016f76:	a904      	add	r1, sp, #16
 8016f78:	4638      	mov	r0, r7
 8016f7a:	f7fc f8b7 	bl	80130ec <_printf_float>
 8016f7e:	1c42      	adds	r2, r0, #1
 8016f80:	4606      	mov	r6, r0
 8016f82:	d1d6      	bne.n	8016f32 <_svfiprintf_r+0x176>
 8016f84:	89ab      	ldrh	r3, [r5, #12]
 8016f86:	065b      	lsls	r3, r3, #25
 8016f88:	f53f af2c 	bmi.w	8016de4 <_svfiprintf_r+0x28>
 8016f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f8e:	b01d      	add	sp, #116	; 0x74
 8016f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f94:	ab03      	add	r3, sp, #12
 8016f96:	9300      	str	r3, [sp, #0]
 8016f98:	462a      	mov	r2, r5
 8016f9a:	4b06      	ldr	r3, [pc, #24]	; (8016fb4 <_svfiprintf_r+0x1f8>)
 8016f9c:	a904      	add	r1, sp, #16
 8016f9e:	4638      	mov	r0, r7
 8016fa0:	f7fc fb48 	bl	8013634 <_printf_i>
 8016fa4:	e7eb      	b.n	8016f7e <_svfiprintf_r+0x1c2>
 8016fa6:	bf00      	nop
 8016fa8:	0801a944 	.word	0x0801a944
 8016fac:	0801a94e 	.word	0x0801a94e
 8016fb0:	080130ed 	.word	0x080130ed
 8016fb4:	08016d05 	.word	0x08016d05
 8016fb8:	0801a94a 	.word	0x0801a94a

08016fbc <_sungetc_r>:
 8016fbc:	b538      	push	{r3, r4, r5, lr}
 8016fbe:	1c4b      	adds	r3, r1, #1
 8016fc0:	4614      	mov	r4, r2
 8016fc2:	d103      	bne.n	8016fcc <_sungetc_r+0x10>
 8016fc4:	f04f 35ff 	mov.w	r5, #4294967295
 8016fc8:	4628      	mov	r0, r5
 8016fca:	bd38      	pop	{r3, r4, r5, pc}
 8016fcc:	8993      	ldrh	r3, [r2, #12]
 8016fce:	f023 0320 	bic.w	r3, r3, #32
 8016fd2:	8193      	strh	r3, [r2, #12]
 8016fd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016fd6:	6852      	ldr	r2, [r2, #4]
 8016fd8:	b2cd      	uxtb	r5, r1
 8016fda:	b18b      	cbz	r3, 8017000 <_sungetc_r+0x44>
 8016fdc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016fde:	4293      	cmp	r3, r2
 8016fe0:	dd08      	ble.n	8016ff4 <_sungetc_r+0x38>
 8016fe2:	6823      	ldr	r3, [r4, #0]
 8016fe4:	1e5a      	subs	r2, r3, #1
 8016fe6:	6022      	str	r2, [r4, #0]
 8016fe8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016fec:	6863      	ldr	r3, [r4, #4]
 8016fee:	3301      	adds	r3, #1
 8016ff0:	6063      	str	r3, [r4, #4]
 8016ff2:	e7e9      	b.n	8016fc8 <_sungetc_r+0xc>
 8016ff4:	4621      	mov	r1, r4
 8016ff6:	f000 fbf5 	bl	80177e4 <__submore>
 8016ffa:	2800      	cmp	r0, #0
 8016ffc:	d0f1      	beq.n	8016fe2 <_sungetc_r+0x26>
 8016ffe:	e7e1      	b.n	8016fc4 <_sungetc_r+0x8>
 8017000:	6921      	ldr	r1, [r4, #16]
 8017002:	6823      	ldr	r3, [r4, #0]
 8017004:	b151      	cbz	r1, 801701c <_sungetc_r+0x60>
 8017006:	4299      	cmp	r1, r3
 8017008:	d208      	bcs.n	801701c <_sungetc_r+0x60>
 801700a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801700e:	42a9      	cmp	r1, r5
 8017010:	d104      	bne.n	801701c <_sungetc_r+0x60>
 8017012:	3b01      	subs	r3, #1
 8017014:	3201      	adds	r2, #1
 8017016:	6023      	str	r3, [r4, #0]
 8017018:	6062      	str	r2, [r4, #4]
 801701a:	e7d5      	b.n	8016fc8 <_sungetc_r+0xc>
 801701c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017024:	6363      	str	r3, [r4, #52]	; 0x34
 8017026:	2303      	movs	r3, #3
 8017028:	63a3      	str	r3, [r4, #56]	; 0x38
 801702a:	4623      	mov	r3, r4
 801702c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017030:	6023      	str	r3, [r4, #0]
 8017032:	2301      	movs	r3, #1
 8017034:	e7dc      	b.n	8016ff0 <_sungetc_r+0x34>

08017036 <__ssrefill_r>:
 8017036:	b510      	push	{r4, lr}
 8017038:	460c      	mov	r4, r1
 801703a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801703c:	b169      	cbz	r1, 801705a <__ssrefill_r+0x24>
 801703e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017042:	4299      	cmp	r1, r3
 8017044:	d001      	beq.n	801704a <__ssrefill_r+0x14>
 8017046:	f7ff fdb3 	bl	8016bb0 <_free_r>
 801704a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801704c:	6063      	str	r3, [r4, #4]
 801704e:	2000      	movs	r0, #0
 8017050:	6360      	str	r0, [r4, #52]	; 0x34
 8017052:	b113      	cbz	r3, 801705a <__ssrefill_r+0x24>
 8017054:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017056:	6023      	str	r3, [r4, #0]
 8017058:	bd10      	pop	{r4, pc}
 801705a:	6923      	ldr	r3, [r4, #16]
 801705c:	6023      	str	r3, [r4, #0]
 801705e:	2300      	movs	r3, #0
 8017060:	6063      	str	r3, [r4, #4]
 8017062:	89a3      	ldrh	r3, [r4, #12]
 8017064:	f043 0320 	orr.w	r3, r3, #32
 8017068:	81a3      	strh	r3, [r4, #12]
 801706a:	f04f 30ff 	mov.w	r0, #4294967295
 801706e:	e7f3      	b.n	8017058 <__ssrefill_r+0x22>

08017070 <__ssvfiscanf_r>:
 8017070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017074:	460c      	mov	r4, r1
 8017076:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801707a:	2100      	movs	r1, #0
 801707c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017080:	49b2      	ldr	r1, [pc, #712]	; (801734c <__ssvfiscanf_r+0x2dc>)
 8017082:	91a0      	str	r1, [sp, #640]	; 0x280
 8017084:	f10d 0804 	add.w	r8, sp, #4
 8017088:	49b1      	ldr	r1, [pc, #708]	; (8017350 <__ssvfiscanf_r+0x2e0>)
 801708a:	4fb2      	ldr	r7, [pc, #712]	; (8017354 <__ssvfiscanf_r+0x2e4>)
 801708c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8017358 <__ssvfiscanf_r+0x2e8>
 8017090:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017094:	4606      	mov	r6, r0
 8017096:	91a1      	str	r1, [sp, #644]	; 0x284
 8017098:	9300      	str	r3, [sp, #0]
 801709a:	f892 a000 	ldrb.w	sl, [r2]
 801709e:	f1ba 0f00 	cmp.w	sl, #0
 80170a2:	f000 8151 	beq.w	8017348 <__ssvfiscanf_r+0x2d8>
 80170a6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80170aa:	f013 0308 	ands.w	r3, r3, #8
 80170ae:	f102 0501 	add.w	r5, r2, #1
 80170b2:	d019      	beq.n	80170e8 <__ssvfiscanf_r+0x78>
 80170b4:	6863      	ldr	r3, [r4, #4]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	dd0f      	ble.n	80170da <__ssvfiscanf_r+0x6a>
 80170ba:	6823      	ldr	r3, [r4, #0]
 80170bc:	781a      	ldrb	r2, [r3, #0]
 80170be:	5cba      	ldrb	r2, [r7, r2]
 80170c0:	0712      	lsls	r2, r2, #28
 80170c2:	d401      	bmi.n	80170c8 <__ssvfiscanf_r+0x58>
 80170c4:	462a      	mov	r2, r5
 80170c6:	e7e8      	b.n	801709a <__ssvfiscanf_r+0x2a>
 80170c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80170ca:	3201      	adds	r2, #1
 80170cc:	9245      	str	r2, [sp, #276]	; 0x114
 80170ce:	6862      	ldr	r2, [r4, #4]
 80170d0:	3301      	adds	r3, #1
 80170d2:	3a01      	subs	r2, #1
 80170d4:	6062      	str	r2, [r4, #4]
 80170d6:	6023      	str	r3, [r4, #0]
 80170d8:	e7ec      	b.n	80170b4 <__ssvfiscanf_r+0x44>
 80170da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80170dc:	4621      	mov	r1, r4
 80170de:	4630      	mov	r0, r6
 80170e0:	4798      	blx	r3
 80170e2:	2800      	cmp	r0, #0
 80170e4:	d0e9      	beq.n	80170ba <__ssvfiscanf_r+0x4a>
 80170e6:	e7ed      	b.n	80170c4 <__ssvfiscanf_r+0x54>
 80170e8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80170ec:	f040 8083 	bne.w	80171f6 <__ssvfiscanf_r+0x186>
 80170f0:	9341      	str	r3, [sp, #260]	; 0x104
 80170f2:	9343      	str	r3, [sp, #268]	; 0x10c
 80170f4:	7853      	ldrb	r3, [r2, #1]
 80170f6:	2b2a      	cmp	r3, #42	; 0x2a
 80170f8:	bf02      	ittt	eq
 80170fa:	2310      	moveq	r3, #16
 80170fc:	1c95      	addeq	r5, r2, #2
 80170fe:	9341      	streq	r3, [sp, #260]	; 0x104
 8017100:	220a      	movs	r2, #10
 8017102:	46ab      	mov	fp, r5
 8017104:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8017108:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801710c:	2b09      	cmp	r3, #9
 801710e:	d91d      	bls.n	801714c <__ssvfiscanf_r+0xdc>
 8017110:	4891      	ldr	r0, [pc, #580]	; (8017358 <__ssvfiscanf_r+0x2e8>)
 8017112:	2203      	movs	r2, #3
 8017114:	f7e9 f864 	bl	80001e0 <memchr>
 8017118:	b140      	cbz	r0, 801712c <__ssvfiscanf_r+0xbc>
 801711a:	2301      	movs	r3, #1
 801711c:	eba0 0009 	sub.w	r0, r0, r9
 8017120:	fa03 f000 	lsl.w	r0, r3, r0
 8017124:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017126:	4318      	orrs	r0, r3
 8017128:	9041      	str	r0, [sp, #260]	; 0x104
 801712a:	465d      	mov	r5, fp
 801712c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017130:	2b78      	cmp	r3, #120	; 0x78
 8017132:	d806      	bhi.n	8017142 <__ssvfiscanf_r+0xd2>
 8017134:	2b57      	cmp	r3, #87	; 0x57
 8017136:	d810      	bhi.n	801715a <__ssvfiscanf_r+0xea>
 8017138:	2b25      	cmp	r3, #37	; 0x25
 801713a:	d05c      	beq.n	80171f6 <__ssvfiscanf_r+0x186>
 801713c:	d856      	bhi.n	80171ec <__ssvfiscanf_r+0x17c>
 801713e:	2b00      	cmp	r3, #0
 8017140:	d074      	beq.n	801722c <__ssvfiscanf_r+0x1bc>
 8017142:	2303      	movs	r3, #3
 8017144:	9347      	str	r3, [sp, #284]	; 0x11c
 8017146:	230a      	movs	r3, #10
 8017148:	9342      	str	r3, [sp, #264]	; 0x108
 801714a:	e081      	b.n	8017250 <__ssvfiscanf_r+0x1e0>
 801714c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801714e:	fb02 1303 	mla	r3, r2, r3, r1
 8017152:	3b30      	subs	r3, #48	; 0x30
 8017154:	9343      	str	r3, [sp, #268]	; 0x10c
 8017156:	465d      	mov	r5, fp
 8017158:	e7d3      	b.n	8017102 <__ssvfiscanf_r+0x92>
 801715a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801715e:	2a20      	cmp	r2, #32
 8017160:	d8ef      	bhi.n	8017142 <__ssvfiscanf_r+0xd2>
 8017162:	a101      	add	r1, pc, #4	; (adr r1, 8017168 <__ssvfiscanf_r+0xf8>)
 8017164:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017168:	0801723b 	.word	0x0801723b
 801716c:	08017143 	.word	0x08017143
 8017170:	08017143 	.word	0x08017143
 8017174:	08017299 	.word	0x08017299
 8017178:	08017143 	.word	0x08017143
 801717c:	08017143 	.word	0x08017143
 8017180:	08017143 	.word	0x08017143
 8017184:	08017143 	.word	0x08017143
 8017188:	08017143 	.word	0x08017143
 801718c:	08017143 	.word	0x08017143
 8017190:	08017143 	.word	0x08017143
 8017194:	080172af 	.word	0x080172af
 8017198:	08017285 	.word	0x08017285
 801719c:	080171f3 	.word	0x080171f3
 80171a0:	080171f3 	.word	0x080171f3
 80171a4:	080171f3 	.word	0x080171f3
 80171a8:	08017143 	.word	0x08017143
 80171ac:	08017289 	.word	0x08017289
 80171b0:	08017143 	.word	0x08017143
 80171b4:	08017143 	.word	0x08017143
 80171b8:	08017143 	.word	0x08017143
 80171bc:	08017143 	.word	0x08017143
 80171c0:	080172bf 	.word	0x080172bf
 80171c4:	08017291 	.word	0x08017291
 80171c8:	08017233 	.word	0x08017233
 80171cc:	08017143 	.word	0x08017143
 80171d0:	08017143 	.word	0x08017143
 80171d4:	080172bb 	.word	0x080172bb
 80171d8:	08017143 	.word	0x08017143
 80171dc:	08017285 	.word	0x08017285
 80171e0:	08017143 	.word	0x08017143
 80171e4:	08017143 	.word	0x08017143
 80171e8:	0801723b 	.word	0x0801723b
 80171ec:	3b45      	subs	r3, #69	; 0x45
 80171ee:	2b02      	cmp	r3, #2
 80171f0:	d8a7      	bhi.n	8017142 <__ssvfiscanf_r+0xd2>
 80171f2:	2305      	movs	r3, #5
 80171f4:	e02b      	b.n	801724e <__ssvfiscanf_r+0x1de>
 80171f6:	6863      	ldr	r3, [r4, #4]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	dd0d      	ble.n	8017218 <__ssvfiscanf_r+0x1a8>
 80171fc:	6823      	ldr	r3, [r4, #0]
 80171fe:	781a      	ldrb	r2, [r3, #0]
 8017200:	4552      	cmp	r2, sl
 8017202:	f040 80a1 	bne.w	8017348 <__ssvfiscanf_r+0x2d8>
 8017206:	3301      	adds	r3, #1
 8017208:	6862      	ldr	r2, [r4, #4]
 801720a:	6023      	str	r3, [r4, #0]
 801720c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801720e:	3a01      	subs	r2, #1
 8017210:	3301      	adds	r3, #1
 8017212:	6062      	str	r2, [r4, #4]
 8017214:	9345      	str	r3, [sp, #276]	; 0x114
 8017216:	e755      	b.n	80170c4 <__ssvfiscanf_r+0x54>
 8017218:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801721a:	4621      	mov	r1, r4
 801721c:	4630      	mov	r0, r6
 801721e:	4798      	blx	r3
 8017220:	2800      	cmp	r0, #0
 8017222:	d0eb      	beq.n	80171fc <__ssvfiscanf_r+0x18c>
 8017224:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017226:	2800      	cmp	r0, #0
 8017228:	f040 8084 	bne.w	8017334 <__ssvfiscanf_r+0x2c4>
 801722c:	f04f 30ff 	mov.w	r0, #4294967295
 8017230:	e086      	b.n	8017340 <__ssvfiscanf_r+0x2d0>
 8017232:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017234:	f042 0220 	orr.w	r2, r2, #32
 8017238:	9241      	str	r2, [sp, #260]	; 0x104
 801723a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801723c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017240:	9241      	str	r2, [sp, #260]	; 0x104
 8017242:	2210      	movs	r2, #16
 8017244:	2b6f      	cmp	r3, #111	; 0x6f
 8017246:	9242      	str	r2, [sp, #264]	; 0x108
 8017248:	bf34      	ite	cc
 801724a:	2303      	movcc	r3, #3
 801724c:	2304      	movcs	r3, #4
 801724e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017250:	6863      	ldr	r3, [r4, #4]
 8017252:	2b00      	cmp	r3, #0
 8017254:	dd41      	ble.n	80172da <__ssvfiscanf_r+0x26a>
 8017256:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017258:	0659      	lsls	r1, r3, #25
 801725a:	d404      	bmi.n	8017266 <__ssvfiscanf_r+0x1f6>
 801725c:	6823      	ldr	r3, [r4, #0]
 801725e:	781a      	ldrb	r2, [r3, #0]
 8017260:	5cba      	ldrb	r2, [r7, r2]
 8017262:	0712      	lsls	r2, r2, #28
 8017264:	d440      	bmi.n	80172e8 <__ssvfiscanf_r+0x278>
 8017266:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017268:	2b02      	cmp	r3, #2
 801726a:	dc4f      	bgt.n	801730c <__ssvfiscanf_r+0x29c>
 801726c:	466b      	mov	r3, sp
 801726e:	4622      	mov	r2, r4
 8017270:	a941      	add	r1, sp, #260	; 0x104
 8017272:	4630      	mov	r0, r6
 8017274:	f000 f874 	bl	8017360 <_scanf_chars>
 8017278:	2801      	cmp	r0, #1
 801727a:	d065      	beq.n	8017348 <__ssvfiscanf_r+0x2d8>
 801727c:	2802      	cmp	r0, #2
 801727e:	f47f af21 	bne.w	80170c4 <__ssvfiscanf_r+0x54>
 8017282:	e7cf      	b.n	8017224 <__ssvfiscanf_r+0x1b4>
 8017284:	220a      	movs	r2, #10
 8017286:	e7dd      	b.n	8017244 <__ssvfiscanf_r+0x1d4>
 8017288:	2300      	movs	r3, #0
 801728a:	9342      	str	r3, [sp, #264]	; 0x108
 801728c:	2303      	movs	r3, #3
 801728e:	e7de      	b.n	801724e <__ssvfiscanf_r+0x1de>
 8017290:	2308      	movs	r3, #8
 8017292:	9342      	str	r3, [sp, #264]	; 0x108
 8017294:	2304      	movs	r3, #4
 8017296:	e7da      	b.n	801724e <__ssvfiscanf_r+0x1de>
 8017298:	4629      	mov	r1, r5
 801729a:	4640      	mov	r0, r8
 801729c:	f000 f9d8 	bl	8017650 <__sccl>
 80172a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80172a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172a6:	9341      	str	r3, [sp, #260]	; 0x104
 80172a8:	4605      	mov	r5, r0
 80172aa:	2301      	movs	r3, #1
 80172ac:	e7cf      	b.n	801724e <__ssvfiscanf_r+0x1de>
 80172ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80172b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172b4:	9341      	str	r3, [sp, #260]	; 0x104
 80172b6:	2300      	movs	r3, #0
 80172b8:	e7c9      	b.n	801724e <__ssvfiscanf_r+0x1de>
 80172ba:	2302      	movs	r3, #2
 80172bc:	e7c7      	b.n	801724e <__ssvfiscanf_r+0x1de>
 80172be:	9841      	ldr	r0, [sp, #260]	; 0x104
 80172c0:	06c3      	lsls	r3, r0, #27
 80172c2:	f53f aeff 	bmi.w	80170c4 <__ssvfiscanf_r+0x54>
 80172c6:	9b00      	ldr	r3, [sp, #0]
 80172c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80172ca:	1d19      	adds	r1, r3, #4
 80172cc:	9100      	str	r1, [sp, #0]
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	07c0      	lsls	r0, r0, #31
 80172d2:	bf4c      	ite	mi
 80172d4:	801a      	strhmi	r2, [r3, #0]
 80172d6:	601a      	strpl	r2, [r3, #0]
 80172d8:	e6f4      	b.n	80170c4 <__ssvfiscanf_r+0x54>
 80172da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80172dc:	4621      	mov	r1, r4
 80172de:	4630      	mov	r0, r6
 80172e0:	4798      	blx	r3
 80172e2:	2800      	cmp	r0, #0
 80172e4:	d0b7      	beq.n	8017256 <__ssvfiscanf_r+0x1e6>
 80172e6:	e79d      	b.n	8017224 <__ssvfiscanf_r+0x1b4>
 80172e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80172ea:	3201      	adds	r2, #1
 80172ec:	9245      	str	r2, [sp, #276]	; 0x114
 80172ee:	6862      	ldr	r2, [r4, #4]
 80172f0:	3a01      	subs	r2, #1
 80172f2:	2a00      	cmp	r2, #0
 80172f4:	6062      	str	r2, [r4, #4]
 80172f6:	dd02      	ble.n	80172fe <__ssvfiscanf_r+0x28e>
 80172f8:	3301      	adds	r3, #1
 80172fa:	6023      	str	r3, [r4, #0]
 80172fc:	e7ae      	b.n	801725c <__ssvfiscanf_r+0x1ec>
 80172fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017300:	4621      	mov	r1, r4
 8017302:	4630      	mov	r0, r6
 8017304:	4798      	blx	r3
 8017306:	2800      	cmp	r0, #0
 8017308:	d0a8      	beq.n	801725c <__ssvfiscanf_r+0x1ec>
 801730a:	e78b      	b.n	8017224 <__ssvfiscanf_r+0x1b4>
 801730c:	2b04      	cmp	r3, #4
 801730e:	dc06      	bgt.n	801731e <__ssvfiscanf_r+0x2ae>
 8017310:	466b      	mov	r3, sp
 8017312:	4622      	mov	r2, r4
 8017314:	a941      	add	r1, sp, #260	; 0x104
 8017316:	4630      	mov	r0, r6
 8017318:	f000 f87a 	bl	8017410 <_scanf_i>
 801731c:	e7ac      	b.n	8017278 <__ssvfiscanf_r+0x208>
 801731e:	4b0f      	ldr	r3, [pc, #60]	; (801735c <__ssvfiscanf_r+0x2ec>)
 8017320:	2b00      	cmp	r3, #0
 8017322:	f43f aecf 	beq.w	80170c4 <__ssvfiscanf_r+0x54>
 8017326:	466b      	mov	r3, sp
 8017328:	4622      	mov	r2, r4
 801732a:	a941      	add	r1, sp, #260	; 0x104
 801732c:	4630      	mov	r0, r6
 801732e:	f7fc faa7 	bl	8013880 <_scanf_float>
 8017332:	e7a1      	b.n	8017278 <__ssvfiscanf_r+0x208>
 8017334:	89a3      	ldrh	r3, [r4, #12]
 8017336:	f013 0f40 	tst.w	r3, #64	; 0x40
 801733a:	bf18      	it	ne
 801733c:	f04f 30ff 	movne.w	r0, #4294967295
 8017340:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8017344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017348:	9844      	ldr	r0, [sp, #272]	; 0x110
 801734a:	e7f9      	b.n	8017340 <__ssvfiscanf_r+0x2d0>
 801734c:	08016fbd 	.word	0x08016fbd
 8017350:	08017037 	.word	0x08017037
 8017354:	0801a571 	.word	0x0801a571
 8017358:	0801a94a 	.word	0x0801a94a
 801735c:	08013881 	.word	0x08013881

08017360 <_scanf_chars>:
 8017360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017364:	4615      	mov	r5, r2
 8017366:	688a      	ldr	r2, [r1, #8]
 8017368:	4680      	mov	r8, r0
 801736a:	460c      	mov	r4, r1
 801736c:	b932      	cbnz	r2, 801737c <_scanf_chars+0x1c>
 801736e:	698a      	ldr	r2, [r1, #24]
 8017370:	2a00      	cmp	r2, #0
 8017372:	bf0c      	ite	eq
 8017374:	2201      	moveq	r2, #1
 8017376:	f04f 32ff 	movne.w	r2, #4294967295
 801737a:	608a      	str	r2, [r1, #8]
 801737c:	6822      	ldr	r2, [r4, #0]
 801737e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801740c <_scanf_chars+0xac>
 8017382:	06d1      	lsls	r1, r2, #27
 8017384:	bf5f      	itttt	pl
 8017386:	681a      	ldrpl	r2, [r3, #0]
 8017388:	1d11      	addpl	r1, r2, #4
 801738a:	6019      	strpl	r1, [r3, #0]
 801738c:	6816      	ldrpl	r6, [r2, #0]
 801738e:	2700      	movs	r7, #0
 8017390:	69a0      	ldr	r0, [r4, #24]
 8017392:	b188      	cbz	r0, 80173b8 <_scanf_chars+0x58>
 8017394:	2801      	cmp	r0, #1
 8017396:	d107      	bne.n	80173a8 <_scanf_chars+0x48>
 8017398:	682b      	ldr	r3, [r5, #0]
 801739a:	781a      	ldrb	r2, [r3, #0]
 801739c:	6963      	ldr	r3, [r4, #20]
 801739e:	5c9b      	ldrb	r3, [r3, r2]
 80173a0:	b953      	cbnz	r3, 80173b8 <_scanf_chars+0x58>
 80173a2:	bb27      	cbnz	r7, 80173ee <_scanf_chars+0x8e>
 80173a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173a8:	2802      	cmp	r0, #2
 80173aa:	d120      	bne.n	80173ee <_scanf_chars+0x8e>
 80173ac:	682b      	ldr	r3, [r5, #0]
 80173ae:	781b      	ldrb	r3, [r3, #0]
 80173b0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80173b4:	071b      	lsls	r3, r3, #28
 80173b6:	d41a      	bmi.n	80173ee <_scanf_chars+0x8e>
 80173b8:	6823      	ldr	r3, [r4, #0]
 80173ba:	06da      	lsls	r2, r3, #27
 80173bc:	bf5e      	ittt	pl
 80173be:	682b      	ldrpl	r3, [r5, #0]
 80173c0:	781b      	ldrbpl	r3, [r3, #0]
 80173c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80173c6:	682a      	ldr	r2, [r5, #0]
 80173c8:	686b      	ldr	r3, [r5, #4]
 80173ca:	3201      	adds	r2, #1
 80173cc:	602a      	str	r2, [r5, #0]
 80173ce:	68a2      	ldr	r2, [r4, #8]
 80173d0:	3b01      	subs	r3, #1
 80173d2:	3a01      	subs	r2, #1
 80173d4:	606b      	str	r3, [r5, #4]
 80173d6:	3701      	adds	r7, #1
 80173d8:	60a2      	str	r2, [r4, #8]
 80173da:	b142      	cbz	r2, 80173ee <_scanf_chars+0x8e>
 80173dc:	2b00      	cmp	r3, #0
 80173de:	dcd7      	bgt.n	8017390 <_scanf_chars+0x30>
 80173e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80173e4:	4629      	mov	r1, r5
 80173e6:	4640      	mov	r0, r8
 80173e8:	4798      	blx	r3
 80173ea:	2800      	cmp	r0, #0
 80173ec:	d0d0      	beq.n	8017390 <_scanf_chars+0x30>
 80173ee:	6823      	ldr	r3, [r4, #0]
 80173f0:	f013 0310 	ands.w	r3, r3, #16
 80173f4:	d105      	bne.n	8017402 <_scanf_chars+0xa2>
 80173f6:	68e2      	ldr	r2, [r4, #12]
 80173f8:	3201      	adds	r2, #1
 80173fa:	60e2      	str	r2, [r4, #12]
 80173fc:	69a2      	ldr	r2, [r4, #24]
 80173fe:	b102      	cbz	r2, 8017402 <_scanf_chars+0xa2>
 8017400:	7033      	strb	r3, [r6, #0]
 8017402:	6923      	ldr	r3, [r4, #16]
 8017404:	441f      	add	r7, r3
 8017406:	6127      	str	r7, [r4, #16]
 8017408:	2000      	movs	r0, #0
 801740a:	e7cb      	b.n	80173a4 <_scanf_chars+0x44>
 801740c:	0801a571 	.word	0x0801a571

08017410 <_scanf_i>:
 8017410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017414:	4698      	mov	r8, r3
 8017416:	4b74      	ldr	r3, [pc, #464]	; (80175e8 <_scanf_i+0x1d8>)
 8017418:	460c      	mov	r4, r1
 801741a:	4682      	mov	sl, r0
 801741c:	4616      	mov	r6, r2
 801741e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017422:	b087      	sub	sp, #28
 8017424:	ab03      	add	r3, sp, #12
 8017426:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801742a:	4b70      	ldr	r3, [pc, #448]	; (80175ec <_scanf_i+0x1dc>)
 801742c:	69a1      	ldr	r1, [r4, #24]
 801742e:	4a70      	ldr	r2, [pc, #448]	; (80175f0 <_scanf_i+0x1e0>)
 8017430:	2903      	cmp	r1, #3
 8017432:	bf18      	it	ne
 8017434:	461a      	movne	r2, r3
 8017436:	68a3      	ldr	r3, [r4, #8]
 8017438:	9201      	str	r2, [sp, #4]
 801743a:	1e5a      	subs	r2, r3, #1
 801743c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017440:	bf88      	it	hi
 8017442:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017446:	4627      	mov	r7, r4
 8017448:	bf82      	ittt	hi
 801744a:	eb03 0905 	addhi.w	r9, r3, r5
 801744e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017452:	60a3      	strhi	r3, [r4, #8]
 8017454:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017458:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801745c:	bf98      	it	ls
 801745e:	f04f 0900 	movls.w	r9, #0
 8017462:	6023      	str	r3, [r4, #0]
 8017464:	463d      	mov	r5, r7
 8017466:	f04f 0b00 	mov.w	fp, #0
 801746a:	6831      	ldr	r1, [r6, #0]
 801746c:	ab03      	add	r3, sp, #12
 801746e:	7809      	ldrb	r1, [r1, #0]
 8017470:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017474:	2202      	movs	r2, #2
 8017476:	f7e8 feb3 	bl	80001e0 <memchr>
 801747a:	b328      	cbz	r0, 80174c8 <_scanf_i+0xb8>
 801747c:	f1bb 0f01 	cmp.w	fp, #1
 8017480:	d159      	bne.n	8017536 <_scanf_i+0x126>
 8017482:	6862      	ldr	r2, [r4, #4]
 8017484:	b92a      	cbnz	r2, 8017492 <_scanf_i+0x82>
 8017486:	6822      	ldr	r2, [r4, #0]
 8017488:	2308      	movs	r3, #8
 801748a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801748e:	6063      	str	r3, [r4, #4]
 8017490:	6022      	str	r2, [r4, #0]
 8017492:	6822      	ldr	r2, [r4, #0]
 8017494:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017498:	6022      	str	r2, [r4, #0]
 801749a:	68a2      	ldr	r2, [r4, #8]
 801749c:	1e51      	subs	r1, r2, #1
 801749e:	60a1      	str	r1, [r4, #8]
 80174a0:	b192      	cbz	r2, 80174c8 <_scanf_i+0xb8>
 80174a2:	6832      	ldr	r2, [r6, #0]
 80174a4:	1c51      	adds	r1, r2, #1
 80174a6:	6031      	str	r1, [r6, #0]
 80174a8:	7812      	ldrb	r2, [r2, #0]
 80174aa:	f805 2b01 	strb.w	r2, [r5], #1
 80174ae:	6872      	ldr	r2, [r6, #4]
 80174b0:	3a01      	subs	r2, #1
 80174b2:	2a00      	cmp	r2, #0
 80174b4:	6072      	str	r2, [r6, #4]
 80174b6:	dc07      	bgt.n	80174c8 <_scanf_i+0xb8>
 80174b8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80174bc:	4631      	mov	r1, r6
 80174be:	4650      	mov	r0, sl
 80174c0:	4790      	blx	r2
 80174c2:	2800      	cmp	r0, #0
 80174c4:	f040 8085 	bne.w	80175d2 <_scanf_i+0x1c2>
 80174c8:	f10b 0b01 	add.w	fp, fp, #1
 80174cc:	f1bb 0f03 	cmp.w	fp, #3
 80174d0:	d1cb      	bne.n	801746a <_scanf_i+0x5a>
 80174d2:	6863      	ldr	r3, [r4, #4]
 80174d4:	b90b      	cbnz	r3, 80174da <_scanf_i+0xca>
 80174d6:	230a      	movs	r3, #10
 80174d8:	6063      	str	r3, [r4, #4]
 80174da:	6863      	ldr	r3, [r4, #4]
 80174dc:	4945      	ldr	r1, [pc, #276]	; (80175f4 <_scanf_i+0x1e4>)
 80174de:	6960      	ldr	r0, [r4, #20]
 80174e0:	1ac9      	subs	r1, r1, r3
 80174e2:	f000 f8b5 	bl	8017650 <__sccl>
 80174e6:	f04f 0b00 	mov.w	fp, #0
 80174ea:	68a3      	ldr	r3, [r4, #8]
 80174ec:	6822      	ldr	r2, [r4, #0]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d03d      	beq.n	801756e <_scanf_i+0x15e>
 80174f2:	6831      	ldr	r1, [r6, #0]
 80174f4:	6960      	ldr	r0, [r4, #20]
 80174f6:	f891 c000 	ldrb.w	ip, [r1]
 80174fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80174fe:	2800      	cmp	r0, #0
 8017500:	d035      	beq.n	801756e <_scanf_i+0x15e>
 8017502:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017506:	d124      	bne.n	8017552 <_scanf_i+0x142>
 8017508:	0510      	lsls	r0, r2, #20
 801750a:	d522      	bpl.n	8017552 <_scanf_i+0x142>
 801750c:	f10b 0b01 	add.w	fp, fp, #1
 8017510:	f1b9 0f00 	cmp.w	r9, #0
 8017514:	d003      	beq.n	801751e <_scanf_i+0x10e>
 8017516:	3301      	adds	r3, #1
 8017518:	f109 39ff 	add.w	r9, r9, #4294967295
 801751c:	60a3      	str	r3, [r4, #8]
 801751e:	6873      	ldr	r3, [r6, #4]
 8017520:	3b01      	subs	r3, #1
 8017522:	2b00      	cmp	r3, #0
 8017524:	6073      	str	r3, [r6, #4]
 8017526:	dd1b      	ble.n	8017560 <_scanf_i+0x150>
 8017528:	6833      	ldr	r3, [r6, #0]
 801752a:	3301      	adds	r3, #1
 801752c:	6033      	str	r3, [r6, #0]
 801752e:	68a3      	ldr	r3, [r4, #8]
 8017530:	3b01      	subs	r3, #1
 8017532:	60a3      	str	r3, [r4, #8]
 8017534:	e7d9      	b.n	80174ea <_scanf_i+0xda>
 8017536:	f1bb 0f02 	cmp.w	fp, #2
 801753a:	d1ae      	bne.n	801749a <_scanf_i+0x8a>
 801753c:	6822      	ldr	r2, [r4, #0]
 801753e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017542:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017546:	d1bf      	bne.n	80174c8 <_scanf_i+0xb8>
 8017548:	2310      	movs	r3, #16
 801754a:	6063      	str	r3, [r4, #4]
 801754c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017550:	e7a2      	b.n	8017498 <_scanf_i+0x88>
 8017552:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017556:	6022      	str	r2, [r4, #0]
 8017558:	780b      	ldrb	r3, [r1, #0]
 801755a:	f805 3b01 	strb.w	r3, [r5], #1
 801755e:	e7de      	b.n	801751e <_scanf_i+0x10e>
 8017560:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017564:	4631      	mov	r1, r6
 8017566:	4650      	mov	r0, sl
 8017568:	4798      	blx	r3
 801756a:	2800      	cmp	r0, #0
 801756c:	d0df      	beq.n	801752e <_scanf_i+0x11e>
 801756e:	6823      	ldr	r3, [r4, #0]
 8017570:	05d9      	lsls	r1, r3, #23
 8017572:	d50d      	bpl.n	8017590 <_scanf_i+0x180>
 8017574:	42bd      	cmp	r5, r7
 8017576:	d909      	bls.n	801758c <_scanf_i+0x17c>
 8017578:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801757c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017580:	4632      	mov	r2, r6
 8017582:	4650      	mov	r0, sl
 8017584:	4798      	blx	r3
 8017586:	f105 39ff 	add.w	r9, r5, #4294967295
 801758a:	464d      	mov	r5, r9
 801758c:	42bd      	cmp	r5, r7
 801758e:	d028      	beq.n	80175e2 <_scanf_i+0x1d2>
 8017590:	6822      	ldr	r2, [r4, #0]
 8017592:	f012 0210 	ands.w	r2, r2, #16
 8017596:	d113      	bne.n	80175c0 <_scanf_i+0x1b0>
 8017598:	702a      	strb	r2, [r5, #0]
 801759a:	6863      	ldr	r3, [r4, #4]
 801759c:	9e01      	ldr	r6, [sp, #4]
 801759e:	4639      	mov	r1, r7
 80175a0:	4650      	mov	r0, sl
 80175a2:	47b0      	blx	r6
 80175a4:	f8d8 3000 	ldr.w	r3, [r8]
 80175a8:	6821      	ldr	r1, [r4, #0]
 80175aa:	1d1a      	adds	r2, r3, #4
 80175ac:	f8c8 2000 	str.w	r2, [r8]
 80175b0:	f011 0f20 	tst.w	r1, #32
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	d00f      	beq.n	80175d8 <_scanf_i+0x1c8>
 80175b8:	6018      	str	r0, [r3, #0]
 80175ba:	68e3      	ldr	r3, [r4, #12]
 80175bc:	3301      	adds	r3, #1
 80175be:	60e3      	str	r3, [r4, #12]
 80175c0:	1bed      	subs	r5, r5, r7
 80175c2:	44ab      	add	fp, r5
 80175c4:	6925      	ldr	r5, [r4, #16]
 80175c6:	445d      	add	r5, fp
 80175c8:	6125      	str	r5, [r4, #16]
 80175ca:	2000      	movs	r0, #0
 80175cc:	b007      	add	sp, #28
 80175ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175d2:	f04f 0b00 	mov.w	fp, #0
 80175d6:	e7ca      	b.n	801756e <_scanf_i+0x15e>
 80175d8:	07ca      	lsls	r2, r1, #31
 80175da:	bf4c      	ite	mi
 80175dc:	8018      	strhmi	r0, [r3, #0]
 80175de:	6018      	strpl	r0, [r3, #0]
 80175e0:	e7eb      	b.n	80175ba <_scanf_i+0x1aa>
 80175e2:	2001      	movs	r0, #1
 80175e4:	e7f2      	b.n	80175cc <_scanf_i+0x1bc>
 80175e6:	bf00      	nop
 80175e8:	08018b0c 	.word	0x08018b0c
 80175ec:	080177e1 	.word	0x080177e1
 80175f0:	08014b99 	.word	0x08014b99
 80175f4:	0801a96e 	.word	0x0801a96e

080175f8 <_read_r>:
 80175f8:	b538      	push	{r3, r4, r5, lr}
 80175fa:	4d07      	ldr	r5, [pc, #28]	; (8017618 <_read_r+0x20>)
 80175fc:	4604      	mov	r4, r0
 80175fe:	4608      	mov	r0, r1
 8017600:	4611      	mov	r1, r2
 8017602:	2200      	movs	r2, #0
 8017604:	602a      	str	r2, [r5, #0]
 8017606:	461a      	mov	r2, r3
 8017608:	f7eb feb8 	bl	800337c <_read>
 801760c:	1c43      	adds	r3, r0, #1
 801760e:	d102      	bne.n	8017616 <_read_r+0x1e>
 8017610:	682b      	ldr	r3, [r5, #0]
 8017612:	b103      	cbz	r3, 8017616 <_read_r+0x1e>
 8017614:	6023      	str	r3, [r4, #0]
 8017616:	bd38      	pop	{r3, r4, r5, pc}
 8017618:	2000337c 	.word	0x2000337c
 801761c:	00000000 	.word	0x00000000

08017620 <nan>:
 8017620:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017628 <nan+0x8>
 8017624:	4770      	bx	lr
 8017626:	bf00      	nop
 8017628:	00000000 	.word	0x00000000
 801762c:	7ff80000 	.word	0x7ff80000

08017630 <_sbrk_r>:
 8017630:	b538      	push	{r3, r4, r5, lr}
 8017632:	4d06      	ldr	r5, [pc, #24]	; (801764c <_sbrk_r+0x1c>)
 8017634:	2300      	movs	r3, #0
 8017636:	4604      	mov	r4, r0
 8017638:	4608      	mov	r0, r1
 801763a:	602b      	str	r3, [r5, #0]
 801763c:	f7eb ff0c 	bl	8003458 <_sbrk>
 8017640:	1c43      	adds	r3, r0, #1
 8017642:	d102      	bne.n	801764a <_sbrk_r+0x1a>
 8017644:	682b      	ldr	r3, [r5, #0]
 8017646:	b103      	cbz	r3, 801764a <_sbrk_r+0x1a>
 8017648:	6023      	str	r3, [r4, #0]
 801764a:	bd38      	pop	{r3, r4, r5, pc}
 801764c:	2000337c 	.word	0x2000337c

08017650 <__sccl>:
 8017650:	b570      	push	{r4, r5, r6, lr}
 8017652:	780b      	ldrb	r3, [r1, #0]
 8017654:	4604      	mov	r4, r0
 8017656:	2b5e      	cmp	r3, #94	; 0x5e
 8017658:	bf0b      	itete	eq
 801765a:	784b      	ldrbeq	r3, [r1, #1]
 801765c:	1c48      	addne	r0, r1, #1
 801765e:	1c88      	addeq	r0, r1, #2
 8017660:	2200      	movne	r2, #0
 8017662:	bf08      	it	eq
 8017664:	2201      	moveq	r2, #1
 8017666:	1e61      	subs	r1, r4, #1
 8017668:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801766c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017670:	42a9      	cmp	r1, r5
 8017672:	d1fb      	bne.n	801766c <__sccl+0x1c>
 8017674:	b90b      	cbnz	r3, 801767a <__sccl+0x2a>
 8017676:	3801      	subs	r0, #1
 8017678:	bd70      	pop	{r4, r5, r6, pc}
 801767a:	f082 0101 	eor.w	r1, r2, #1
 801767e:	54e1      	strb	r1, [r4, r3]
 8017680:	1c42      	adds	r2, r0, #1
 8017682:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8017686:	2d2d      	cmp	r5, #45	; 0x2d
 8017688:	f102 36ff 	add.w	r6, r2, #4294967295
 801768c:	4610      	mov	r0, r2
 801768e:	d006      	beq.n	801769e <__sccl+0x4e>
 8017690:	2d5d      	cmp	r5, #93	; 0x5d
 8017692:	d0f1      	beq.n	8017678 <__sccl+0x28>
 8017694:	b90d      	cbnz	r5, 801769a <__sccl+0x4a>
 8017696:	4630      	mov	r0, r6
 8017698:	e7ee      	b.n	8017678 <__sccl+0x28>
 801769a:	462b      	mov	r3, r5
 801769c:	e7ef      	b.n	801767e <__sccl+0x2e>
 801769e:	7816      	ldrb	r6, [r2, #0]
 80176a0:	2e5d      	cmp	r6, #93	; 0x5d
 80176a2:	d0fa      	beq.n	801769a <__sccl+0x4a>
 80176a4:	42b3      	cmp	r3, r6
 80176a6:	dcf8      	bgt.n	801769a <__sccl+0x4a>
 80176a8:	4618      	mov	r0, r3
 80176aa:	3001      	adds	r0, #1
 80176ac:	4286      	cmp	r6, r0
 80176ae:	5421      	strb	r1, [r4, r0]
 80176b0:	dcfb      	bgt.n	80176aa <__sccl+0x5a>
 80176b2:	43d8      	mvns	r0, r3
 80176b4:	4430      	add	r0, r6
 80176b6:	1c5d      	adds	r5, r3, #1
 80176b8:	42b3      	cmp	r3, r6
 80176ba:	bfa8      	it	ge
 80176bc:	2000      	movge	r0, #0
 80176be:	182b      	adds	r3, r5, r0
 80176c0:	3202      	adds	r2, #2
 80176c2:	e7de      	b.n	8017682 <__sccl+0x32>

080176c4 <strncmp>:
 80176c4:	b510      	push	{r4, lr}
 80176c6:	b16a      	cbz	r2, 80176e4 <strncmp+0x20>
 80176c8:	3901      	subs	r1, #1
 80176ca:	1884      	adds	r4, r0, r2
 80176cc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80176d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80176d4:	4293      	cmp	r3, r2
 80176d6:	d103      	bne.n	80176e0 <strncmp+0x1c>
 80176d8:	42a0      	cmp	r0, r4
 80176da:	d001      	beq.n	80176e0 <strncmp+0x1c>
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d1f5      	bne.n	80176cc <strncmp+0x8>
 80176e0:	1a98      	subs	r0, r3, r2
 80176e2:	bd10      	pop	{r4, pc}
 80176e4:	4610      	mov	r0, r2
 80176e6:	e7fc      	b.n	80176e2 <strncmp+0x1e>

080176e8 <_strtoul_l.isra.0>:
 80176e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80176ec:	4e3b      	ldr	r6, [pc, #236]	; (80177dc <_strtoul_l.isra.0+0xf4>)
 80176ee:	4686      	mov	lr, r0
 80176f0:	468c      	mov	ip, r1
 80176f2:	4660      	mov	r0, ip
 80176f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80176f8:	5da5      	ldrb	r5, [r4, r6]
 80176fa:	f015 0508 	ands.w	r5, r5, #8
 80176fe:	d1f8      	bne.n	80176f2 <_strtoul_l.isra.0+0xa>
 8017700:	2c2d      	cmp	r4, #45	; 0x2d
 8017702:	d134      	bne.n	801776e <_strtoul_l.isra.0+0x86>
 8017704:	f89c 4000 	ldrb.w	r4, [ip]
 8017708:	f04f 0801 	mov.w	r8, #1
 801770c:	f100 0c02 	add.w	ip, r0, #2
 8017710:	2b00      	cmp	r3, #0
 8017712:	d05e      	beq.n	80177d2 <_strtoul_l.isra.0+0xea>
 8017714:	2b10      	cmp	r3, #16
 8017716:	d10c      	bne.n	8017732 <_strtoul_l.isra.0+0x4a>
 8017718:	2c30      	cmp	r4, #48	; 0x30
 801771a:	d10a      	bne.n	8017732 <_strtoul_l.isra.0+0x4a>
 801771c:	f89c 0000 	ldrb.w	r0, [ip]
 8017720:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017724:	2858      	cmp	r0, #88	; 0x58
 8017726:	d14f      	bne.n	80177c8 <_strtoul_l.isra.0+0xe0>
 8017728:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801772c:	2310      	movs	r3, #16
 801772e:	f10c 0c02 	add.w	ip, ip, #2
 8017732:	f04f 37ff 	mov.w	r7, #4294967295
 8017736:	2500      	movs	r5, #0
 8017738:	fbb7 f7f3 	udiv	r7, r7, r3
 801773c:	fb03 f907 	mul.w	r9, r3, r7
 8017740:	ea6f 0909 	mvn.w	r9, r9
 8017744:	4628      	mov	r0, r5
 8017746:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801774a:	2e09      	cmp	r6, #9
 801774c:	d818      	bhi.n	8017780 <_strtoul_l.isra.0+0x98>
 801774e:	4634      	mov	r4, r6
 8017750:	42a3      	cmp	r3, r4
 8017752:	dd24      	ble.n	801779e <_strtoul_l.isra.0+0xb6>
 8017754:	2d00      	cmp	r5, #0
 8017756:	db1f      	blt.n	8017798 <_strtoul_l.isra.0+0xb0>
 8017758:	4287      	cmp	r7, r0
 801775a:	d31d      	bcc.n	8017798 <_strtoul_l.isra.0+0xb0>
 801775c:	d101      	bne.n	8017762 <_strtoul_l.isra.0+0x7a>
 801775e:	45a1      	cmp	r9, r4
 8017760:	db1a      	blt.n	8017798 <_strtoul_l.isra.0+0xb0>
 8017762:	fb00 4003 	mla	r0, r0, r3, r4
 8017766:	2501      	movs	r5, #1
 8017768:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801776c:	e7eb      	b.n	8017746 <_strtoul_l.isra.0+0x5e>
 801776e:	2c2b      	cmp	r4, #43	; 0x2b
 8017770:	bf08      	it	eq
 8017772:	f89c 4000 	ldrbeq.w	r4, [ip]
 8017776:	46a8      	mov	r8, r5
 8017778:	bf08      	it	eq
 801777a:	f100 0c02 	addeq.w	ip, r0, #2
 801777e:	e7c7      	b.n	8017710 <_strtoul_l.isra.0+0x28>
 8017780:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8017784:	2e19      	cmp	r6, #25
 8017786:	d801      	bhi.n	801778c <_strtoul_l.isra.0+0xa4>
 8017788:	3c37      	subs	r4, #55	; 0x37
 801778a:	e7e1      	b.n	8017750 <_strtoul_l.isra.0+0x68>
 801778c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8017790:	2e19      	cmp	r6, #25
 8017792:	d804      	bhi.n	801779e <_strtoul_l.isra.0+0xb6>
 8017794:	3c57      	subs	r4, #87	; 0x57
 8017796:	e7db      	b.n	8017750 <_strtoul_l.isra.0+0x68>
 8017798:	f04f 35ff 	mov.w	r5, #4294967295
 801779c:	e7e4      	b.n	8017768 <_strtoul_l.isra.0+0x80>
 801779e:	2d00      	cmp	r5, #0
 80177a0:	da07      	bge.n	80177b2 <_strtoul_l.isra.0+0xca>
 80177a2:	2322      	movs	r3, #34	; 0x22
 80177a4:	f8ce 3000 	str.w	r3, [lr]
 80177a8:	f04f 30ff 	mov.w	r0, #4294967295
 80177ac:	b942      	cbnz	r2, 80177c0 <_strtoul_l.isra.0+0xd8>
 80177ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177b2:	f1b8 0f00 	cmp.w	r8, #0
 80177b6:	d000      	beq.n	80177ba <_strtoul_l.isra.0+0xd2>
 80177b8:	4240      	negs	r0, r0
 80177ba:	2a00      	cmp	r2, #0
 80177bc:	d0f7      	beq.n	80177ae <_strtoul_l.isra.0+0xc6>
 80177be:	b10d      	cbz	r5, 80177c4 <_strtoul_l.isra.0+0xdc>
 80177c0:	f10c 31ff 	add.w	r1, ip, #4294967295
 80177c4:	6011      	str	r1, [r2, #0]
 80177c6:	e7f2      	b.n	80177ae <_strtoul_l.isra.0+0xc6>
 80177c8:	2430      	movs	r4, #48	; 0x30
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d1b1      	bne.n	8017732 <_strtoul_l.isra.0+0x4a>
 80177ce:	2308      	movs	r3, #8
 80177d0:	e7af      	b.n	8017732 <_strtoul_l.isra.0+0x4a>
 80177d2:	2c30      	cmp	r4, #48	; 0x30
 80177d4:	d0a2      	beq.n	801771c <_strtoul_l.isra.0+0x34>
 80177d6:	230a      	movs	r3, #10
 80177d8:	e7ab      	b.n	8017732 <_strtoul_l.isra.0+0x4a>
 80177da:	bf00      	nop
 80177dc:	0801a571 	.word	0x0801a571

080177e0 <_strtoul_r>:
 80177e0:	f7ff bf82 	b.w	80176e8 <_strtoul_l.isra.0>

080177e4 <__submore>:
 80177e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177e8:	460c      	mov	r4, r1
 80177ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80177ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80177f0:	4299      	cmp	r1, r3
 80177f2:	d11d      	bne.n	8017830 <__submore+0x4c>
 80177f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80177f8:	f7ff fa2a 	bl	8016c50 <_malloc_r>
 80177fc:	b918      	cbnz	r0, 8017806 <__submore+0x22>
 80177fe:	f04f 30ff 	mov.w	r0, #4294967295
 8017802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801780a:	63a3      	str	r3, [r4, #56]	; 0x38
 801780c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017810:	6360      	str	r0, [r4, #52]	; 0x34
 8017812:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017816:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801781a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801781e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017822:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017826:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801782a:	6020      	str	r0, [r4, #0]
 801782c:	2000      	movs	r0, #0
 801782e:	e7e8      	b.n	8017802 <__submore+0x1e>
 8017830:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017832:	0077      	lsls	r7, r6, #1
 8017834:	463a      	mov	r2, r7
 8017836:	f000 fa59 	bl	8017cec <_realloc_r>
 801783a:	4605      	mov	r5, r0
 801783c:	2800      	cmp	r0, #0
 801783e:	d0de      	beq.n	80177fe <__submore+0x1a>
 8017840:	eb00 0806 	add.w	r8, r0, r6
 8017844:	4601      	mov	r1, r0
 8017846:	4632      	mov	r2, r6
 8017848:	4640      	mov	r0, r8
 801784a:	f7fe fcd9 	bl	8016200 <memcpy>
 801784e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017852:	f8c4 8000 	str.w	r8, [r4]
 8017856:	e7e9      	b.n	801782c <__submore+0x48>

08017858 <__swbuf_r>:
 8017858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801785a:	460e      	mov	r6, r1
 801785c:	4614      	mov	r4, r2
 801785e:	4605      	mov	r5, r0
 8017860:	b118      	cbz	r0, 801786a <__swbuf_r+0x12>
 8017862:	6983      	ldr	r3, [r0, #24]
 8017864:	b90b      	cbnz	r3, 801786a <__swbuf_r+0x12>
 8017866:	f7fe f88b 	bl	8015980 <__sinit>
 801786a:	4b21      	ldr	r3, [pc, #132]	; (80178f0 <__swbuf_r+0x98>)
 801786c:	429c      	cmp	r4, r3
 801786e:	d12b      	bne.n	80178c8 <__swbuf_r+0x70>
 8017870:	686c      	ldr	r4, [r5, #4]
 8017872:	69a3      	ldr	r3, [r4, #24]
 8017874:	60a3      	str	r3, [r4, #8]
 8017876:	89a3      	ldrh	r3, [r4, #12]
 8017878:	071a      	lsls	r2, r3, #28
 801787a:	d52f      	bpl.n	80178dc <__swbuf_r+0x84>
 801787c:	6923      	ldr	r3, [r4, #16]
 801787e:	b36b      	cbz	r3, 80178dc <__swbuf_r+0x84>
 8017880:	6923      	ldr	r3, [r4, #16]
 8017882:	6820      	ldr	r0, [r4, #0]
 8017884:	1ac0      	subs	r0, r0, r3
 8017886:	6963      	ldr	r3, [r4, #20]
 8017888:	b2f6      	uxtb	r6, r6
 801788a:	4283      	cmp	r3, r0
 801788c:	4637      	mov	r7, r6
 801788e:	dc04      	bgt.n	801789a <__swbuf_r+0x42>
 8017890:	4621      	mov	r1, r4
 8017892:	4628      	mov	r0, r5
 8017894:	f000 f952 	bl	8017b3c <_fflush_r>
 8017898:	bb30      	cbnz	r0, 80178e8 <__swbuf_r+0x90>
 801789a:	68a3      	ldr	r3, [r4, #8]
 801789c:	3b01      	subs	r3, #1
 801789e:	60a3      	str	r3, [r4, #8]
 80178a0:	6823      	ldr	r3, [r4, #0]
 80178a2:	1c5a      	adds	r2, r3, #1
 80178a4:	6022      	str	r2, [r4, #0]
 80178a6:	701e      	strb	r6, [r3, #0]
 80178a8:	6963      	ldr	r3, [r4, #20]
 80178aa:	3001      	adds	r0, #1
 80178ac:	4283      	cmp	r3, r0
 80178ae:	d004      	beq.n	80178ba <__swbuf_r+0x62>
 80178b0:	89a3      	ldrh	r3, [r4, #12]
 80178b2:	07db      	lsls	r3, r3, #31
 80178b4:	d506      	bpl.n	80178c4 <__swbuf_r+0x6c>
 80178b6:	2e0a      	cmp	r6, #10
 80178b8:	d104      	bne.n	80178c4 <__swbuf_r+0x6c>
 80178ba:	4621      	mov	r1, r4
 80178bc:	4628      	mov	r0, r5
 80178be:	f000 f93d 	bl	8017b3c <_fflush_r>
 80178c2:	b988      	cbnz	r0, 80178e8 <__swbuf_r+0x90>
 80178c4:	4638      	mov	r0, r7
 80178c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178c8:	4b0a      	ldr	r3, [pc, #40]	; (80178f4 <__swbuf_r+0x9c>)
 80178ca:	429c      	cmp	r4, r3
 80178cc:	d101      	bne.n	80178d2 <__swbuf_r+0x7a>
 80178ce:	68ac      	ldr	r4, [r5, #8]
 80178d0:	e7cf      	b.n	8017872 <__swbuf_r+0x1a>
 80178d2:	4b09      	ldr	r3, [pc, #36]	; (80178f8 <__swbuf_r+0xa0>)
 80178d4:	429c      	cmp	r4, r3
 80178d6:	bf08      	it	eq
 80178d8:	68ec      	ldreq	r4, [r5, #12]
 80178da:	e7ca      	b.n	8017872 <__swbuf_r+0x1a>
 80178dc:	4621      	mov	r1, r4
 80178de:	4628      	mov	r0, r5
 80178e0:	f000 f81a 	bl	8017918 <__swsetup_r>
 80178e4:	2800      	cmp	r0, #0
 80178e6:	d0cb      	beq.n	8017880 <__swbuf_r+0x28>
 80178e8:	f04f 37ff 	mov.w	r7, #4294967295
 80178ec:	e7ea      	b.n	80178c4 <__swbuf_r+0x6c>
 80178ee:	bf00      	nop
 80178f0:	0801a728 	.word	0x0801a728
 80178f4:	0801a748 	.word	0x0801a748
 80178f8:	0801a708 	.word	0x0801a708

080178fc <__ascii_wctomb>:
 80178fc:	b149      	cbz	r1, 8017912 <__ascii_wctomb+0x16>
 80178fe:	2aff      	cmp	r2, #255	; 0xff
 8017900:	bf85      	ittet	hi
 8017902:	238a      	movhi	r3, #138	; 0x8a
 8017904:	6003      	strhi	r3, [r0, #0]
 8017906:	700a      	strbls	r2, [r1, #0]
 8017908:	f04f 30ff 	movhi.w	r0, #4294967295
 801790c:	bf98      	it	ls
 801790e:	2001      	movls	r0, #1
 8017910:	4770      	bx	lr
 8017912:	4608      	mov	r0, r1
 8017914:	4770      	bx	lr
	...

08017918 <__swsetup_r>:
 8017918:	4b32      	ldr	r3, [pc, #200]	; (80179e4 <__swsetup_r+0xcc>)
 801791a:	b570      	push	{r4, r5, r6, lr}
 801791c:	681d      	ldr	r5, [r3, #0]
 801791e:	4606      	mov	r6, r0
 8017920:	460c      	mov	r4, r1
 8017922:	b125      	cbz	r5, 801792e <__swsetup_r+0x16>
 8017924:	69ab      	ldr	r3, [r5, #24]
 8017926:	b913      	cbnz	r3, 801792e <__swsetup_r+0x16>
 8017928:	4628      	mov	r0, r5
 801792a:	f7fe f829 	bl	8015980 <__sinit>
 801792e:	4b2e      	ldr	r3, [pc, #184]	; (80179e8 <__swsetup_r+0xd0>)
 8017930:	429c      	cmp	r4, r3
 8017932:	d10f      	bne.n	8017954 <__swsetup_r+0x3c>
 8017934:	686c      	ldr	r4, [r5, #4]
 8017936:	89a3      	ldrh	r3, [r4, #12]
 8017938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801793c:	0719      	lsls	r1, r3, #28
 801793e:	d42c      	bmi.n	801799a <__swsetup_r+0x82>
 8017940:	06dd      	lsls	r5, r3, #27
 8017942:	d411      	bmi.n	8017968 <__swsetup_r+0x50>
 8017944:	2309      	movs	r3, #9
 8017946:	6033      	str	r3, [r6, #0]
 8017948:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801794c:	81a3      	strh	r3, [r4, #12]
 801794e:	f04f 30ff 	mov.w	r0, #4294967295
 8017952:	e03e      	b.n	80179d2 <__swsetup_r+0xba>
 8017954:	4b25      	ldr	r3, [pc, #148]	; (80179ec <__swsetup_r+0xd4>)
 8017956:	429c      	cmp	r4, r3
 8017958:	d101      	bne.n	801795e <__swsetup_r+0x46>
 801795a:	68ac      	ldr	r4, [r5, #8]
 801795c:	e7eb      	b.n	8017936 <__swsetup_r+0x1e>
 801795e:	4b24      	ldr	r3, [pc, #144]	; (80179f0 <__swsetup_r+0xd8>)
 8017960:	429c      	cmp	r4, r3
 8017962:	bf08      	it	eq
 8017964:	68ec      	ldreq	r4, [r5, #12]
 8017966:	e7e6      	b.n	8017936 <__swsetup_r+0x1e>
 8017968:	0758      	lsls	r0, r3, #29
 801796a:	d512      	bpl.n	8017992 <__swsetup_r+0x7a>
 801796c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801796e:	b141      	cbz	r1, 8017982 <__swsetup_r+0x6a>
 8017970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017974:	4299      	cmp	r1, r3
 8017976:	d002      	beq.n	801797e <__swsetup_r+0x66>
 8017978:	4630      	mov	r0, r6
 801797a:	f7ff f919 	bl	8016bb0 <_free_r>
 801797e:	2300      	movs	r3, #0
 8017980:	6363      	str	r3, [r4, #52]	; 0x34
 8017982:	89a3      	ldrh	r3, [r4, #12]
 8017984:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017988:	81a3      	strh	r3, [r4, #12]
 801798a:	2300      	movs	r3, #0
 801798c:	6063      	str	r3, [r4, #4]
 801798e:	6923      	ldr	r3, [r4, #16]
 8017990:	6023      	str	r3, [r4, #0]
 8017992:	89a3      	ldrh	r3, [r4, #12]
 8017994:	f043 0308 	orr.w	r3, r3, #8
 8017998:	81a3      	strh	r3, [r4, #12]
 801799a:	6923      	ldr	r3, [r4, #16]
 801799c:	b94b      	cbnz	r3, 80179b2 <__swsetup_r+0x9a>
 801799e:	89a3      	ldrh	r3, [r4, #12]
 80179a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80179a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80179a8:	d003      	beq.n	80179b2 <__swsetup_r+0x9a>
 80179aa:	4621      	mov	r1, r4
 80179ac:	4630      	mov	r0, r6
 80179ae:	f000 f937 	bl	8017c20 <__smakebuf_r>
 80179b2:	89a0      	ldrh	r0, [r4, #12]
 80179b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80179b8:	f010 0301 	ands.w	r3, r0, #1
 80179bc:	d00a      	beq.n	80179d4 <__swsetup_r+0xbc>
 80179be:	2300      	movs	r3, #0
 80179c0:	60a3      	str	r3, [r4, #8]
 80179c2:	6963      	ldr	r3, [r4, #20]
 80179c4:	425b      	negs	r3, r3
 80179c6:	61a3      	str	r3, [r4, #24]
 80179c8:	6923      	ldr	r3, [r4, #16]
 80179ca:	b943      	cbnz	r3, 80179de <__swsetup_r+0xc6>
 80179cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80179d0:	d1ba      	bne.n	8017948 <__swsetup_r+0x30>
 80179d2:	bd70      	pop	{r4, r5, r6, pc}
 80179d4:	0781      	lsls	r1, r0, #30
 80179d6:	bf58      	it	pl
 80179d8:	6963      	ldrpl	r3, [r4, #20]
 80179da:	60a3      	str	r3, [r4, #8]
 80179dc:	e7f4      	b.n	80179c8 <__swsetup_r+0xb0>
 80179de:	2000      	movs	r0, #0
 80179e0:	e7f7      	b.n	80179d2 <__swsetup_r+0xba>
 80179e2:	bf00      	nop
 80179e4:	2000019c 	.word	0x2000019c
 80179e8:	0801a728 	.word	0x0801a728
 80179ec:	0801a748 	.word	0x0801a748
 80179f0:	0801a708 	.word	0x0801a708

080179f4 <__assert_func>:
 80179f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80179f6:	4614      	mov	r4, r2
 80179f8:	461a      	mov	r2, r3
 80179fa:	4b09      	ldr	r3, [pc, #36]	; (8017a20 <__assert_func+0x2c>)
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	4605      	mov	r5, r0
 8017a00:	68d8      	ldr	r0, [r3, #12]
 8017a02:	b14c      	cbz	r4, 8017a18 <__assert_func+0x24>
 8017a04:	4b07      	ldr	r3, [pc, #28]	; (8017a24 <__assert_func+0x30>)
 8017a06:	9100      	str	r1, [sp, #0]
 8017a08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017a0c:	4906      	ldr	r1, [pc, #24]	; (8017a28 <__assert_func+0x34>)
 8017a0e:	462b      	mov	r3, r5
 8017a10:	f000 f8d0 	bl	8017bb4 <fiprintf>
 8017a14:	f000 faea 	bl	8017fec <abort>
 8017a18:	4b04      	ldr	r3, [pc, #16]	; (8017a2c <__assert_func+0x38>)
 8017a1a:	461c      	mov	r4, r3
 8017a1c:	e7f3      	b.n	8017a06 <__assert_func+0x12>
 8017a1e:	bf00      	nop
 8017a20:	2000019c 	.word	0x2000019c
 8017a24:	0801a970 	.word	0x0801a970
 8017a28:	0801a97d 	.word	0x0801a97d
 8017a2c:	0801a9ab 	.word	0x0801a9ab

08017a30 <__sflush_r>:
 8017a30:	898a      	ldrh	r2, [r1, #12]
 8017a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a36:	4605      	mov	r5, r0
 8017a38:	0710      	lsls	r0, r2, #28
 8017a3a:	460c      	mov	r4, r1
 8017a3c:	d458      	bmi.n	8017af0 <__sflush_r+0xc0>
 8017a3e:	684b      	ldr	r3, [r1, #4]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	dc05      	bgt.n	8017a50 <__sflush_r+0x20>
 8017a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	dc02      	bgt.n	8017a50 <__sflush_r+0x20>
 8017a4a:	2000      	movs	r0, #0
 8017a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a52:	2e00      	cmp	r6, #0
 8017a54:	d0f9      	beq.n	8017a4a <__sflush_r+0x1a>
 8017a56:	2300      	movs	r3, #0
 8017a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017a5c:	682f      	ldr	r7, [r5, #0]
 8017a5e:	602b      	str	r3, [r5, #0]
 8017a60:	d032      	beq.n	8017ac8 <__sflush_r+0x98>
 8017a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017a64:	89a3      	ldrh	r3, [r4, #12]
 8017a66:	075a      	lsls	r2, r3, #29
 8017a68:	d505      	bpl.n	8017a76 <__sflush_r+0x46>
 8017a6a:	6863      	ldr	r3, [r4, #4]
 8017a6c:	1ac0      	subs	r0, r0, r3
 8017a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017a70:	b10b      	cbz	r3, 8017a76 <__sflush_r+0x46>
 8017a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017a74:	1ac0      	subs	r0, r0, r3
 8017a76:	2300      	movs	r3, #0
 8017a78:	4602      	mov	r2, r0
 8017a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017a7c:	6a21      	ldr	r1, [r4, #32]
 8017a7e:	4628      	mov	r0, r5
 8017a80:	47b0      	blx	r6
 8017a82:	1c43      	adds	r3, r0, #1
 8017a84:	89a3      	ldrh	r3, [r4, #12]
 8017a86:	d106      	bne.n	8017a96 <__sflush_r+0x66>
 8017a88:	6829      	ldr	r1, [r5, #0]
 8017a8a:	291d      	cmp	r1, #29
 8017a8c:	d82c      	bhi.n	8017ae8 <__sflush_r+0xb8>
 8017a8e:	4a2a      	ldr	r2, [pc, #168]	; (8017b38 <__sflush_r+0x108>)
 8017a90:	40ca      	lsrs	r2, r1
 8017a92:	07d6      	lsls	r6, r2, #31
 8017a94:	d528      	bpl.n	8017ae8 <__sflush_r+0xb8>
 8017a96:	2200      	movs	r2, #0
 8017a98:	6062      	str	r2, [r4, #4]
 8017a9a:	04d9      	lsls	r1, r3, #19
 8017a9c:	6922      	ldr	r2, [r4, #16]
 8017a9e:	6022      	str	r2, [r4, #0]
 8017aa0:	d504      	bpl.n	8017aac <__sflush_r+0x7c>
 8017aa2:	1c42      	adds	r2, r0, #1
 8017aa4:	d101      	bne.n	8017aaa <__sflush_r+0x7a>
 8017aa6:	682b      	ldr	r3, [r5, #0]
 8017aa8:	b903      	cbnz	r3, 8017aac <__sflush_r+0x7c>
 8017aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8017aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017aae:	602f      	str	r7, [r5, #0]
 8017ab0:	2900      	cmp	r1, #0
 8017ab2:	d0ca      	beq.n	8017a4a <__sflush_r+0x1a>
 8017ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ab8:	4299      	cmp	r1, r3
 8017aba:	d002      	beq.n	8017ac2 <__sflush_r+0x92>
 8017abc:	4628      	mov	r0, r5
 8017abe:	f7ff f877 	bl	8016bb0 <_free_r>
 8017ac2:	2000      	movs	r0, #0
 8017ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8017ac6:	e7c1      	b.n	8017a4c <__sflush_r+0x1c>
 8017ac8:	6a21      	ldr	r1, [r4, #32]
 8017aca:	2301      	movs	r3, #1
 8017acc:	4628      	mov	r0, r5
 8017ace:	47b0      	blx	r6
 8017ad0:	1c41      	adds	r1, r0, #1
 8017ad2:	d1c7      	bne.n	8017a64 <__sflush_r+0x34>
 8017ad4:	682b      	ldr	r3, [r5, #0]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d0c4      	beq.n	8017a64 <__sflush_r+0x34>
 8017ada:	2b1d      	cmp	r3, #29
 8017adc:	d001      	beq.n	8017ae2 <__sflush_r+0xb2>
 8017ade:	2b16      	cmp	r3, #22
 8017ae0:	d101      	bne.n	8017ae6 <__sflush_r+0xb6>
 8017ae2:	602f      	str	r7, [r5, #0]
 8017ae4:	e7b1      	b.n	8017a4a <__sflush_r+0x1a>
 8017ae6:	89a3      	ldrh	r3, [r4, #12]
 8017ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017aec:	81a3      	strh	r3, [r4, #12]
 8017aee:	e7ad      	b.n	8017a4c <__sflush_r+0x1c>
 8017af0:	690f      	ldr	r7, [r1, #16]
 8017af2:	2f00      	cmp	r7, #0
 8017af4:	d0a9      	beq.n	8017a4a <__sflush_r+0x1a>
 8017af6:	0793      	lsls	r3, r2, #30
 8017af8:	680e      	ldr	r6, [r1, #0]
 8017afa:	bf08      	it	eq
 8017afc:	694b      	ldreq	r3, [r1, #20]
 8017afe:	600f      	str	r7, [r1, #0]
 8017b00:	bf18      	it	ne
 8017b02:	2300      	movne	r3, #0
 8017b04:	eba6 0807 	sub.w	r8, r6, r7
 8017b08:	608b      	str	r3, [r1, #8]
 8017b0a:	f1b8 0f00 	cmp.w	r8, #0
 8017b0e:	dd9c      	ble.n	8017a4a <__sflush_r+0x1a>
 8017b10:	6a21      	ldr	r1, [r4, #32]
 8017b12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017b14:	4643      	mov	r3, r8
 8017b16:	463a      	mov	r2, r7
 8017b18:	4628      	mov	r0, r5
 8017b1a:	47b0      	blx	r6
 8017b1c:	2800      	cmp	r0, #0
 8017b1e:	dc06      	bgt.n	8017b2e <__sflush_r+0xfe>
 8017b20:	89a3      	ldrh	r3, [r4, #12]
 8017b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b26:	81a3      	strh	r3, [r4, #12]
 8017b28:	f04f 30ff 	mov.w	r0, #4294967295
 8017b2c:	e78e      	b.n	8017a4c <__sflush_r+0x1c>
 8017b2e:	4407      	add	r7, r0
 8017b30:	eba8 0800 	sub.w	r8, r8, r0
 8017b34:	e7e9      	b.n	8017b0a <__sflush_r+0xda>
 8017b36:	bf00      	nop
 8017b38:	20400001 	.word	0x20400001

08017b3c <_fflush_r>:
 8017b3c:	b538      	push	{r3, r4, r5, lr}
 8017b3e:	690b      	ldr	r3, [r1, #16]
 8017b40:	4605      	mov	r5, r0
 8017b42:	460c      	mov	r4, r1
 8017b44:	b913      	cbnz	r3, 8017b4c <_fflush_r+0x10>
 8017b46:	2500      	movs	r5, #0
 8017b48:	4628      	mov	r0, r5
 8017b4a:	bd38      	pop	{r3, r4, r5, pc}
 8017b4c:	b118      	cbz	r0, 8017b56 <_fflush_r+0x1a>
 8017b4e:	6983      	ldr	r3, [r0, #24]
 8017b50:	b90b      	cbnz	r3, 8017b56 <_fflush_r+0x1a>
 8017b52:	f7fd ff15 	bl	8015980 <__sinit>
 8017b56:	4b14      	ldr	r3, [pc, #80]	; (8017ba8 <_fflush_r+0x6c>)
 8017b58:	429c      	cmp	r4, r3
 8017b5a:	d11b      	bne.n	8017b94 <_fflush_r+0x58>
 8017b5c:	686c      	ldr	r4, [r5, #4]
 8017b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d0ef      	beq.n	8017b46 <_fflush_r+0xa>
 8017b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017b68:	07d0      	lsls	r0, r2, #31
 8017b6a:	d404      	bmi.n	8017b76 <_fflush_r+0x3a>
 8017b6c:	0599      	lsls	r1, r3, #22
 8017b6e:	d402      	bmi.n	8017b76 <_fflush_r+0x3a>
 8017b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b72:	f7fe fb16 	bl	80161a2 <__retarget_lock_acquire_recursive>
 8017b76:	4628      	mov	r0, r5
 8017b78:	4621      	mov	r1, r4
 8017b7a:	f7ff ff59 	bl	8017a30 <__sflush_r>
 8017b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017b80:	07da      	lsls	r2, r3, #31
 8017b82:	4605      	mov	r5, r0
 8017b84:	d4e0      	bmi.n	8017b48 <_fflush_r+0xc>
 8017b86:	89a3      	ldrh	r3, [r4, #12]
 8017b88:	059b      	lsls	r3, r3, #22
 8017b8a:	d4dd      	bmi.n	8017b48 <_fflush_r+0xc>
 8017b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017b8e:	f7fe fb09 	bl	80161a4 <__retarget_lock_release_recursive>
 8017b92:	e7d9      	b.n	8017b48 <_fflush_r+0xc>
 8017b94:	4b05      	ldr	r3, [pc, #20]	; (8017bac <_fflush_r+0x70>)
 8017b96:	429c      	cmp	r4, r3
 8017b98:	d101      	bne.n	8017b9e <_fflush_r+0x62>
 8017b9a:	68ac      	ldr	r4, [r5, #8]
 8017b9c:	e7df      	b.n	8017b5e <_fflush_r+0x22>
 8017b9e:	4b04      	ldr	r3, [pc, #16]	; (8017bb0 <_fflush_r+0x74>)
 8017ba0:	429c      	cmp	r4, r3
 8017ba2:	bf08      	it	eq
 8017ba4:	68ec      	ldreq	r4, [r5, #12]
 8017ba6:	e7da      	b.n	8017b5e <_fflush_r+0x22>
 8017ba8:	0801a728 	.word	0x0801a728
 8017bac:	0801a748 	.word	0x0801a748
 8017bb0:	0801a708 	.word	0x0801a708

08017bb4 <fiprintf>:
 8017bb4:	b40e      	push	{r1, r2, r3}
 8017bb6:	b503      	push	{r0, r1, lr}
 8017bb8:	4601      	mov	r1, r0
 8017bba:	ab03      	add	r3, sp, #12
 8017bbc:	4805      	ldr	r0, [pc, #20]	; (8017bd4 <fiprintf+0x20>)
 8017bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8017bc2:	6800      	ldr	r0, [r0, #0]
 8017bc4:	9301      	str	r3, [sp, #4]
 8017bc6:	f000 f8e1 	bl	8017d8c <_vfiprintf_r>
 8017bca:	b002      	add	sp, #8
 8017bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017bd0:	b003      	add	sp, #12
 8017bd2:	4770      	bx	lr
 8017bd4:	2000019c 	.word	0x2000019c

08017bd8 <__swhatbuf_r>:
 8017bd8:	b570      	push	{r4, r5, r6, lr}
 8017bda:	460e      	mov	r6, r1
 8017bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017be0:	2900      	cmp	r1, #0
 8017be2:	b096      	sub	sp, #88	; 0x58
 8017be4:	4614      	mov	r4, r2
 8017be6:	461d      	mov	r5, r3
 8017be8:	da07      	bge.n	8017bfa <__swhatbuf_r+0x22>
 8017bea:	2300      	movs	r3, #0
 8017bec:	602b      	str	r3, [r5, #0]
 8017bee:	89b3      	ldrh	r3, [r6, #12]
 8017bf0:	061a      	lsls	r2, r3, #24
 8017bf2:	d410      	bmi.n	8017c16 <__swhatbuf_r+0x3e>
 8017bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017bf8:	e00e      	b.n	8017c18 <__swhatbuf_r+0x40>
 8017bfa:	466a      	mov	r2, sp
 8017bfc:	f000 f9fe 	bl	8017ffc <_fstat_r>
 8017c00:	2800      	cmp	r0, #0
 8017c02:	dbf2      	blt.n	8017bea <__swhatbuf_r+0x12>
 8017c04:	9a01      	ldr	r2, [sp, #4]
 8017c06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017c0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017c0e:	425a      	negs	r2, r3
 8017c10:	415a      	adcs	r2, r3
 8017c12:	602a      	str	r2, [r5, #0]
 8017c14:	e7ee      	b.n	8017bf4 <__swhatbuf_r+0x1c>
 8017c16:	2340      	movs	r3, #64	; 0x40
 8017c18:	2000      	movs	r0, #0
 8017c1a:	6023      	str	r3, [r4, #0]
 8017c1c:	b016      	add	sp, #88	; 0x58
 8017c1e:	bd70      	pop	{r4, r5, r6, pc}

08017c20 <__smakebuf_r>:
 8017c20:	898b      	ldrh	r3, [r1, #12]
 8017c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017c24:	079d      	lsls	r5, r3, #30
 8017c26:	4606      	mov	r6, r0
 8017c28:	460c      	mov	r4, r1
 8017c2a:	d507      	bpl.n	8017c3c <__smakebuf_r+0x1c>
 8017c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017c30:	6023      	str	r3, [r4, #0]
 8017c32:	6123      	str	r3, [r4, #16]
 8017c34:	2301      	movs	r3, #1
 8017c36:	6163      	str	r3, [r4, #20]
 8017c38:	b002      	add	sp, #8
 8017c3a:	bd70      	pop	{r4, r5, r6, pc}
 8017c3c:	ab01      	add	r3, sp, #4
 8017c3e:	466a      	mov	r2, sp
 8017c40:	f7ff ffca 	bl	8017bd8 <__swhatbuf_r>
 8017c44:	9900      	ldr	r1, [sp, #0]
 8017c46:	4605      	mov	r5, r0
 8017c48:	4630      	mov	r0, r6
 8017c4a:	f7ff f801 	bl	8016c50 <_malloc_r>
 8017c4e:	b948      	cbnz	r0, 8017c64 <__smakebuf_r+0x44>
 8017c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c54:	059a      	lsls	r2, r3, #22
 8017c56:	d4ef      	bmi.n	8017c38 <__smakebuf_r+0x18>
 8017c58:	f023 0303 	bic.w	r3, r3, #3
 8017c5c:	f043 0302 	orr.w	r3, r3, #2
 8017c60:	81a3      	strh	r3, [r4, #12]
 8017c62:	e7e3      	b.n	8017c2c <__smakebuf_r+0xc>
 8017c64:	4b0d      	ldr	r3, [pc, #52]	; (8017c9c <__smakebuf_r+0x7c>)
 8017c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8017c68:	89a3      	ldrh	r3, [r4, #12]
 8017c6a:	6020      	str	r0, [r4, #0]
 8017c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c70:	81a3      	strh	r3, [r4, #12]
 8017c72:	9b00      	ldr	r3, [sp, #0]
 8017c74:	6163      	str	r3, [r4, #20]
 8017c76:	9b01      	ldr	r3, [sp, #4]
 8017c78:	6120      	str	r0, [r4, #16]
 8017c7a:	b15b      	cbz	r3, 8017c94 <__smakebuf_r+0x74>
 8017c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c80:	4630      	mov	r0, r6
 8017c82:	f000 f9cd 	bl	8018020 <_isatty_r>
 8017c86:	b128      	cbz	r0, 8017c94 <__smakebuf_r+0x74>
 8017c88:	89a3      	ldrh	r3, [r4, #12]
 8017c8a:	f023 0303 	bic.w	r3, r3, #3
 8017c8e:	f043 0301 	orr.w	r3, r3, #1
 8017c92:	81a3      	strh	r3, [r4, #12]
 8017c94:	89a0      	ldrh	r0, [r4, #12]
 8017c96:	4305      	orrs	r5, r0
 8017c98:	81a5      	strh	r5, [r4, #12]
 8017c9a:	e7cd      	b.n	8017c38 <__smakebuf_r+0x18>
 8017c9c:	08015919 	.word	0x08015919

08017ca0 <memmove>:
 8017ca0:	4288      	cmp	r0, r1
 8017ca2:	b510      	push	{r4, lr}
 8017ca4:	eb01 0402 	add.w	r4, r1, r2
 8017ca8:	d902      	bls.n	8017cb0 <memmove+0x10>
 8017caa:	4284      	cmp	r4, r0
 8017cac:	4623      	mov	r3, r4
 8017cae:	d807      	bhi.n	8017cc0 <memmove+0x20>
 8017cb0:	1e43      	subs	r3, r0, #1
 8017cb2:	42a1      	cmp	r1, r4
 8017cb4:	d008      	beq.n	8017cc8 <memmove+0x28>
 8017cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017cba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017cbe:	e7f8      	b.n	8017cb2 <memmove+0x12>
 8017cc0:	4402      	add	r2, r0
 8017cc2:	4601      	mov	r1, r0
 8017cc4:	428a      	cmp	r2, r1
 8017cc6:	d100      	bne.n	8017cca <memmove+0x2a>
 8017cc8:	bd10      	pop	{r4, pc}
 8017cca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017cce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017cd2:	e7f7      	b.n	8017cc4 <memmove+0x24>

08017cd4 <__malloc_lock>:
 8017cd4:	4801      	ldr	r0, [pc, #4]	; (8017cdc <__malloc_lock+0x8>)
 8017cd6:	f7fe ba64 	b.w	80161a2 <__retarget_lock_acquire_recursive>
 8017cda:	bf00      	nop
 8017cdc:	20003370 	.word	0x20003370

08017ce0 <__malloc_unlock>:
 8017ce0:	4801      	ldr	r0, [pc, #4]	; (8017ce8 <__malloc_unlock+0x8>)
 8017ce2:	f7fe ba5f 	b.w	80161a4 <__retarget_lock_release_recursive>
 8017ce6:	bf00      	nop
 8017ce8:	20003370 	.word	0x20003370

08017cec <_realloc_r>:
 8017cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cee:	4607      	mov	r7, r0
 8017cf0:	4614      	mov	r4, r2
 8017cf2:	460e      	mov	r6, r1
 8017cf4:	b921      	cbnz	r1, 8017d00 <_realloc_r+0x14>
 8017cf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017cfa:	4611      	mov	r1, r2
 8017cfc:	f7fe bfa8 	b.w	8016c50 <_malloc_r>
 8017d00:	b922      	cbnz	r2, 8017d0c <_realloc_r+0x20>
 8017d02:	f7fe ff55 	bl	8016bb0 <_free_r>
 8017d06:	4625      	mov	r5, r4
 8017d08:	4628      	mov	r0, r5
 8017d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d0c:	f000 f998 	bl	8018040 <_malloc_usable_size_r>
 8017d10:	42a0      	cmp	r0, r4
 8017d12:	d20f      	bcs.n	8017d34 <_realloc_r+0x48>
 8017d14:	4621      	mov	r1, r4
 8017d16:	4638      	mov	r0, r7
 8017d18:	f7fe ff9a 	bl	8016c50 <_malloc_r>
 8017d1c:	4605      	mov	r5, r0
 8017d1e:	2800      	cmp	r0, #0
 8017d20:	d0f2      	beq.n	8017d08 <_realloc_r+0x1c>
 8017d22:	4631      	mov	r1, r6
 8017d24:	4622      	mov	r2, r4
 8017d26:	f7fe fa6b 	bl	8016200 <memcpy>
 8017d2a:	4631      	mov	r1, r6
 8017d2c:	4638      	mov	r0, r7
 8017d2e:	f7fe ff3f 	bl	8016bb0 <_free_r>
 8017d32:	e7e9      	b.n	8017d08 <_realloc_r+0x1c>
 8017d34:	4635      	mov	r5, r6
 8017d36:	e7e7      	b.n	8017d08 <_realloc_r+0x1c>

08017d38 <__sfputc_r>:
 8017d38:	6893      	ldr	r3, [r2, #8]
 8017d3a:	3b01      	subs	r3, #1
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	b410      	push	{r4}
 8017d40:	6093      	str	r3, [r2, #8]
 8017d42:	da08      	bge.n	8017d56 <__sfputc_r+0x1e>
 8017d44:	6994      	ldr	r4, [r2, #24]
 8017d46:	42a3      	cmp	r3, r4
 8017d48:	db01      	blt.n	8017d4e <__sfputc_r+0x16>
 8017d4a:	290a      	cmp	r1, #10
 8017d4c:	d103      	bne.n	8017d56 <__sfputc_r+0x1e>
 8017d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d52:	f7ff bd81 	b.w	8017858 <__swbuf_r>
 8017d56:	6813      	ldr	r3, [r2, #0]
 8017d58:	1c58      	adds	r0, r3, #1
 8017d5a:	6010      	str	r0, [r2, #0]
 8017d5c:	7019      	strb	r1, [r3, #0]
 8017d5e:	4608      	mov	r0, r1
 8017d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d64:	4770      	bx	lr

08017d66 <__sfputs_r>:
 8017d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d68:	4606      	mov	r6, r0
 8017d6a:	460f      	mov	r7, r1
 8017d6c:	4614      	mov	r4, r2
 8017d6e:	18d5      	adds	r5, r2, r3
 8017d70:	42ac      	cmp	r4, r5
 8017d72:	d101      	bne.n	8017d78 <__sfputs_r+0x12>
 8017d74:	2000      	movs	r0, #0
 8017d76:	e007      	b.n	8017d88 <__sfputs_r+0x22>
 8017d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d7c:	463a      	mov	r2, r7
 8017d7e:	4630      	mov	r0, r6
 8017d80:	f7ff ffda 	bl	8017d38 <__sfputc_r>
 8017d84:	1c43      	adds	r3, r0, #1
 8017d86:	d1f3      	bne.n	8017d70 <__sfputs_r+0xa>
 8017d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017d8c <_vfiprintf_r>:
 8017d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d90:	460d      	mov	r5, r1
 8017d92:	b09d      	sub	sp, #116	; 0x74
 8017d94:	4614      	mov	r4, r2
 8017d96:	4698      	mov	r8, r3
 8017d98:	4606      	mov	r6, r0
 8017d9a:	b118      	cbz	r0, 8017da4 <_vfiprintf_r+0x18>
 8017d9c:	6983      	ldr	r3, [r0, #24]
 8017d9e:	b90b      	cbnz	r3, 8017da4 <_vfiprintf_r+0x18>
 8017da0:	f7fd fdee 	bl	8015980 <__sinit>
 8017da4:	4b89      	ldr	r3, [pc, #548]	; (8017fcc <_vfiprintf_r+0x240>)
 8017da6:	429d      	cmp	r5, r3
 8017da8:	d11b      	bne.n	8017de2 <_vfiprintf_r+0x56>
 8017daa:	6875      	ldr	r5, [r6, #4]
 8017dac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017dae:	07d9      	lsls	r1, r3, #31
 8017db0:	d405      	bmi.n	8017dbe <_vfiprintf_r+0x32>
 8017db2:	89ab      	ldrh	r3, [r5, #12]
 8017db4:	059a      	lsls	r2, r3, #22
 8017db6:	d402      	bmi.n	8017dbe <_vfiprintf_r+0x32>
 8017db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017dba:	f7fe f9f2 	bl	80161a2 <__retarget_lock_acquire_recursive>
 8017dbe:	89ab      	ldrh	r3, [r5, #12]
 8017dc0:	071b      	lsls	r3, r3, #28
 8017dc2:	d501      	bpl.n	8017dc8 <_vfiprintf_r+0x3c>
 8017dc4:	692b      	ldr	r3, [r5, #16]
 8017dc6:	b9eb      	cbnz	r3, 8017e04 <_vfiprintf_r+0x78>
 8017dc8:	4629      	mov	r1, r5
 8017dca:	4630      	mov	r0, r6
 8017dcc:	f7ff fda4 	bl	8017918 <__swsetup_r>
 8017dd0:	b1c0      	cbz	r0, 8017e04 <_vfiprintf_r+0x78>
 8017dd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017dd4:	07dc      	lsls	r4, r3, #31
 8017dd6:	d50e      	bpl.n	8017df6 <_vfiprintf_r+0x6a>
 8017dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8017ddc:	b01d      	add	sp, #116	; 0x74
 8017dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017de2:	4b7b      	ldr	r3, [pc, #492]	; (8017fd0 <_vfiprintf_r+0x244>)
 8017de4:	429d      	cmp	r5, r3
 8017de6:	d101      	bne.n	8017dec <_vfiprintf_r+0x60>
 8017de8:	68b5      	ldr	r5, [r6, #8]
 8017dea:	e7df      	b.n	8017dac <_vfiprintf_r+0x20>
 8017dec:	4b79      	ldr	r3, [pc, #484]	; (8017fd4 <_vfiprintf_r+0x248>)
 8017dee:	429d      	cmp	r5, r3
 8017df0:	bf08      	it	eq
 8017df2:	68f5      	ldreq	r5, [r6, #12]
 8017df4:	e7da      	b.n	8017dac <_vfiprintf_r+0x20>
 8017df6:	89ab      	ldrh	r3, [r5, #12]
 8017df8:	0598      	lsls	r0, r3, #22
 8017dfa:	d4ed      	bmi.n	8017dd8 <_vfiprintf_r+0x4c>
 8017dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017dfe:	f7fe f9d1 	bl	80161a4 <__retarget_lock_release_recursive>
 8017e02:	e7e9      	b.n	8017dd8 <_vfiprintf_r+0x4c>
 8017e04:	2300      	movs	r3, #0
 8017e06:	9309      	str	r3, [sp, #36]	; 0x24
 8017e08:	2320      	movs	r3, #32
 8017e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017e12:	2330      	movs	r3, #48	; 0x30
 8017e14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017fd8 <_vfiprintf_r+0x24c>
 8017e18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017e1c:	f04f 0901 	mov.w	r9, #1
 8017e20:	4623      	mov	r3, r4
 8017e22:	469a      	mov	sl, r3
 8017e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017e28:	b10a      	cbz	r2, 8017e2e <_vfiprintf_r+0xa2>
 8017e2a:	2a25      	cmp	r2, #37	; 0x25
 8017e2c:	d1f9      	bne.n	8017e22 <_vfiprintf_r+0x96>
 8017e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8017e32:	d00b      	beq.n	8017e4c <_vfiprintf_r+0xc0>
 8017e34:	465b      	mov	r3, fp
 8017e36:	4622      	mov	r2, r4
 8017e38:	4629      	mov	r1, r5
 8017e3a:	4630      	mov	r0, r6
 8017e3c:	f7ff ff93 	bl	8017d66 <__sfputs_r>
 8017e40:	3001      	adds	r0, #1
 8017e42:	f000 80aa 	beq.w	8017f9a <_vfiprintf_r+0x20e>
 8017e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e48:	445a      	add	r2, fp
 8017e4a:	9209      	str	r2, [sp, #36]	; 0x24
 8017e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	f000 80a2 	beq.w	8017f9a <_vfiprintf_r+0x20e>
 8017e56:	2300      	movs	r3, #0
 8017e58:	f04f 32ff 	mov.w	r2, #4294967295
 8017e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e60:	f10a 0a01 	add.w	sl, sl, #1
 8017e64:	9304      	str	r3, [sp, #16]
 8017e66:	9307      	str	r3, [sp, #28]
 8017e68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017e6c:	931a      	str	r3, [sp, #104]	; 0x68
 8017e6e:	4654      	mov	r4, sl
 8017e70:	2205      	movs	r2, #5
 8017e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e76:	4858      	ldr	r0, [pc, #352]	; (8017fd8 <_vfiprintf_r+0x24c>)
 8017e78:	f7e8 f9b2 	bl	80001e0 <memchr>
 8017e7c:	9a04      	ldr	r2, [sp, #16]
 8017e7e:	b9d8      	cbnz	r0, 8017eb8 <_vfiprintf_r+0x12c>
 8017e80:	06d1      	lsls	r1, r2, #27
 8017e82:	bf44      	itt	mi
 8017e84:	2320      	movmi	r3, #32
 8017e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e8a:	0713      	lsls	r3, r2, #28
 8017e8c:	bf44      	itt	mi
 8017e8e:	232b      	movmi	r3, #43	; 0x2b
 8017e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e94:	f89a 3000 	ldrb.w	r3, [sl]
 8017e98:	2b2a      	cmp	r3, #42	; 0x2a
 8017e9a:	d015      	beq.n	8017ec8 <_vfiprintf_r+0x13c>
 8017e9c:	9a07      	ldr	r2, [sp, #28]
 8017e9e:	4654      	mov	r4, sl
 8017ea0:	2000      	movs	r0, #0
 8017ea2:	f04f 0c0a 	mov.w	ip, #10
 8017ea6:	4621      	mov	r1, r4
 8017ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017eac:	3b30      	subs	r3, #48	; 0x30
 8017eae:	2b09      	cmp	r3, #9
 8017eb0:	d94e      	bls.n	8017f50 <_vfiprintf_r+0x1c4>
 8017eb2:	b1b0      	cbz	r0, 8017ee2 <_vfiprintf_r+0x156>
 8017eb4:	9207      	str	r2, [sp, #28]
 8017eb6:	e014      	b.n	8017ee2 <_vfiprintf_r+0x156>
 8017eb8:	eba0 0308 	sub.w	r3, r0, r8
 8017ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8017ec0:	4313      	orrs	r3, r2
 8017ec2:	9304      	str	r3, [sp, #16]
 8017ec4:	46a2      	mov	sl, r4
 8017ec6:	e7d2      	b.n	8017e6e <_vfiprintf_r+0xe2>
 8017ec8:	9b03      	ldr	r3, [sp, #12]
 8017eca:	1d19      	adds	r1, r3, #4
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	9103      	str	r1, [sp, #12]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	bfbb      	ittet	lt
 8017ed4:	425b      	neglt	r3, r3
 8017ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8017eda:	9307      	strge	r3, [sp, #28]
 8017edc:	9307      	strlt	r3, [sp, #28]
 8017ede:	bfb8      	it	lt
 8017ee0:	9204      	strlt	r2, [sp, #16]
 8017ee2:	7823      	ldrb	r3, [r4, #0]
 8017ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8017ee6:	d10c      	bne.n	8017f02 <_vfiprintf_r+0x176>
 8017ee8:	7863      	ldrb	r3, [r4, #1]
 8017eea:	2b2a      	cmp	r3, #42	; 0x2a
 8017eec:	d135      	bne.n	8017f5a <_vfiprintf_r+0x1ce>
 8017eee:	9b03      	ldr	r3, [sp, #12]
 8017ef0:	1d1a      	adds	r2, r3, #4
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	9203      	str	r2, [sp, #12]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	bfb8      	it	lt
 8017efa:	f04f 33ff 	movlt.w	r3, #4294967295
 8017efe:	3402      	adds	r4, #2
 8017f00:	9305      	str	r3, [sp, #20]
 8017f02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017fe8 <_vfiprintf_r+0x25c>
 8017f06:	7821      	ldrb	r1, [r4, #0]
 8017f08:	2203      	movs	r2, #3
 8017f0a:	4650      	mov	r0, sl
 8017f0c:	f7e8 f968 	bl	80001e0 <memchr>
 8017f10:	b140      	cbz	r0, 8017f24 <_vfiprintf_r+0x198>
 8017f12:	2340      	movs	r3, #64	; 0x40
 8017f14:	eba0 000a 	sub.w	r0, r0, sl
 8017f18:	fa03 f000 	lsl.w	r0, r3, r0
 8017f1c:	9b04      	ldr	r3, [sp, #16]
 8017f1e:	4303      	orrs	r3, r0
 8017f20:	3401      	adds	r4, #1
 8017f22:	9304      	str	r3, [sp, #16]
 8017f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f28:	482c      	ldr	r0, [pc, #176]	; (8017fdc <_vfiprintf_r+0x250>)
 8017f2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017f2e:	2206      	movs	r2, #6
 8017f30:	f7e8 f956 	bl	80001e0 <memchr>
 8017f34:	2800      	cmp	r0, #0
 8017f36:	d03f      	beq.n	8017fb8 <_vfiprintf_r+0x22c>
 8017f38:	4b29      	ldr	r3, [pc, #164]	; (8017fe0 <_vfiprintf_r+0x254>)
 8017f3a:	bb1b      	cbnz	r3, 8017f84 <_vfiprintf_r+0x1f8>
 8017f3c:	9b03      	ldr	r3, [sp, #12]
 8017f3e:	3307      	adds	r3, #7
 8017f40:	f023 0307 	bic.w	r3, r3, #7
 8017f44:	3308      	adds	r3, #8
 8017f46:	9303      	str	r3, [sp, #12]
 8017f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f4a:	443b      	add	r3, r7
 8017f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8017f4e:	e767      	b.n	8017e20 <_vfiprintf_r+0x94>
 8017f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f54:	460c      	mov	r4, r1
 8017f56:	2001      	movs	r0, #1
 8017f58:	e7a5      	b.n	8017ea6 <_vfiprintf_r+0x11a>
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	3401      	adds	r4, #1
 8017f5e:	9305      	str	r3, [sp, #20]
 8017f60:	4619      	mov	r1, r3
 8017f62:	f04f 0c0a 	mov.w	ip, #10
 8017f66:	4620      	mov	r0, r4
 8017f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f6c:	3a30      	subs	r2, #48	; 0x30
 8017f6e:	2a09      	cmp	r2, #9
 8017f70:	d903      	bls.n	8017f7a <_vfiprintf_r+0x1ee>
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d0c5      	beq.n	8017f02 <_vfiprintf_r+0x176>
 8017f76:	9105      	str	r1, [sp, #20]
 8017f78:	e7c3      	b.n	8017f02 <_vfiprintf_r+0x176>
 8017f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f7e:	4604      	mov	r4, r0
 8017f80:	2301      	movs	r3, #1
 8017f82:	e7f0      	b.n	8017f66 <_vfiprintf_r+0x1da>
 8017f84:	ab03      	add	r3, sp, #12
 8017f86:	9300      	str	r3, [sp, #0]
 8017f88:	462a      	mov	r2, r5
 8017f8a:	4b16      	ldr	r3, [pc, #88]	; (8017fe4 <_vfiprintf_r+0x258>)
 8017f8c:	a904      	add	r1, sp, #16
 8017f8e:	4630      	mov	r0, r6
 8017f90:	f7fb f8ac 	bl	80130ec <_printf_float>
 8017f94:	4607      	mov	r7, r0
 8017f96:	1c78      	adds	r0, r7, #1
 8017f98:	d1d6      	bne.n	8017f48 <_vfiprintf_r+0x1bc>
 8017f9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f9c:	07d9      	lsls	r1, r3, #31
 8017f9e:	d405      	bmi.n	8017fac <_vfiprintf_r+0x220>
 8017fa0:	89ab      	ldrh	r3, [r5, #12]
 8017fa2:	059a      	lsls	r2, r3, #22
 8017fa4:	d402      	bmi.n	8017fac <_vfiprintf_r+0x220>
 8017fa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017fa8:	f7fe f8fc 	bl	80161a4 <__retarget_lock_release_recursive>
 8017fac:	89ab      	ldrh	r3, [r5, #12]
 8017fae:	065b      	lsls	r3, r3, #25
 8017fb0:	f53f af12 	bmi.w	8017dd8 <_vfiprintf_r+0x4c>
 8017fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017fb6:	e711      	b.n	8017ddc <_vfiprintf_r+0x50>
 8017fb8:	ab03      	add	r3, sp, #12
 8017fba:	9300      	str	r3, [sp, #0]
 8017fbc:	462a      	mov	r2, r5
 8017fbe:	4b09      	ldr	r3, [pc, #36]	; (8017fe4 <_vfiprintf_r+0x258>)
 8017fc0:	a904      	add	r1, sp, #16
 8017fc2:	4630      	mov	r0, r6
 8017fc4:	f7fb fb36 	bl	8013634 <_printf_i>
 8017fc8:	e7e4      	b.n	8017f94 <_vfiprintf_r+0x208>
 8017fca:	bf00      	nop
 8017fcc:	0801a728 	.word	0x0801a728
 8017fd0:	0801a748 	.word	0x0801a748
 8017fd4:	0801a708 	.word	0x0801a708
 8017fd8:	0801a944 	.word	0x0801a944
 8017fdc:	0801a94e 	.word	0x0801a94e
 8017fe0:	080130ed 	.word	0x080130ed
 8017fe4:	08017d67 	.word	0x08017d67
 8017fe8:	0801a94a 	.word	0x0801a94a

08017fec <abort>:
 8017fec:	b508      	push	{r3, lr}
 8017fee:	2006      	movs	r0, #6
 8017ff0:	f000 f856 	bl	80180a0 <raise>
 8017ff4:	2001      	movs	r0, #1
 8017ff6:	f7eb f9b7 	bl	8003368 <_exit>
	...

08017ffc <_fstat_r>:
 8017ffc:	b538      	push	{r3, r4, r5, lr}
 8017ffe:	4d07      	ldr	r5, [pc, #28]	; (801801c <_fstat_r+0x20>)
 8018000:	2300      	movs	r3, #0
 8018002:	4604      	mov	r4, r0
 8018004:	4608      	mov	r0, r1
 8018006:	4611      	mov	r1, r2
 8018008:	602b      	str	r3, [r5, #0]
 801800a:	f7eb f9fc 	bl	8003406 <_fstat>
 801800e:	1c43      	adds	r3, r0, #1
 8018010:	d102      	bne.n	8018018 <_fstat_r+0x1c>
 8018012:	682b      	ldr	r3, [r5, #0]
 8018014:	b103      	cbz	r3, 8018018 <_fstat_r+0x1c>
 8018016:	6023      	str	r3, [r4, #0]
 8018018:	bd38      	pop	{r3, r4, r5, pc}
 801801a:	bf00      	nop
 801801c:	2000337c 	.word	0x2000337c

08018020 <_isatty_r>:
 8018020:	b538      	push	{r3, r4, r5, lr}
 8018022:	4d06      	ldr	r5, [pc, #24]	; (801803c <_isatty_r+0x1c>)
 8018024:	2300      	movs	r3, #0
 8018026:	4604      	mov	r4, r0
 8018028:	4608      	mov	r0, r1
 801802a:	602b      	str	r3, [r5, #0]
 801802c:	f7eb f9fb 	bl	8003426 <_isatty>
 8018030:	1c43      	adds	r3, r0, #1
 8018032:	d102      	bne.n	801803a <_isatty_r+0x1a>
 8018034:	682b      	ldr	r3, [r5, #0]
 8018036:	b103      	cbz	r3, 801803a <_isatty_r+0x1a>
 8018038:	6023      	str	r3, [r4, #0]
 801803a:	bd38      	pop	{r3, r4, r5, pc}
 801803c:	2000337c 	.word	0x2000337c

08018040 <_malloc_usable_size_r>:
 8018040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018044:	1f18      	subs	r0, r3, #4
 8018046:	2b00      	cmp	r3, #0
 8018048:	bfbc      	itt	lt
 801804a:	580b      	ldrlt	r3, [r1, r0]
 801804c:	18c0      	addlt	r0, r0, r3
 801804e:	4770      	bx	lr

08018050 <_raise_r>:
 8018050:	291f      	cmp	r1, #31
 8018052:	b538      	push	{r3, r4, r5, lr}
 8018054:	4604      	mov	r4, r0
 8018056:	460d      	mov	r5, r1
 8018058:	d904      	bls.n	8018064 <_raise_r+0x14>
 801805a:	2316      	movs	r3, #22
 801805c:	6003      	str	r3, [r0, #0]
 801805e:	f04f 30ff 	mov.w	r0, #4294967295
 8018062:	bd38      	pop	{r3, r4, r5, pc}
 8018064:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018066:	b112      	cbz	r2, 801806e <_raise_r+0x1e>
 8018068:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801806c:	b94b      	cbnz	r3, 8018082 <_raise_r+0x32>
 801806e:	4620      	mov	r0, r4
 8018070:	f000 f830 	bl	80180d4 <_getpid_r>
 8018074:	462a      	mov	r2, r5
 8018076:	4601      	mov	r1, r0
 8018078:	4620      	mov	r0, r4
 801807a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801807e:	f000 b817 	b.w	80180b0 <_kill_r>
 8018082:	2b01      	cmp	r3, #1
 8018084:	d00a      	beq.n	801809c <_raise_r+0x4c>
 8018086:	1c59      	adds	r1, r3, #1
 8018088:	d103      	bne.n	8018092 <_raise_r+0x42>
 801808a:	2316      	movs	r3, #22
 801808c:	6003      	str	r3, [r0, #0]
 801808e:	2001      	movs	r0, #1
 8018090:	e7e7      	b.n	8018062 <_raise_r+0x12>
 8018092:	2400      	movs	r4, #0
 8018094:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018098:	4628      	mov	r0, r5
 801809a:	4798      	blx	r3
 801809c:	2000      	movs	r0, #0
 801809e:	e7e0      	b.n	8018062 <_raise_r+0x12>

080180a0 <raise>:
 80180a0:	4b02      	ldr	r3, [pc, #8]	; (80180ac <raise+0xc>)
 80180a2:	4601      	mov	r1, r0
 80180a4:	6818      	ldr	r0, [r3, #0]
 80180a6:	f7ff bfd3 	b.w	8018050 <_raise_r>
 80180aa:	bf00      	nop
 80180ac:	2000019c 	.word	0x2000019c

080180b0 <_kill_r>:
 80180b0:	b538      	push	{r3, r4, r5, lr}
 80180b2:	4d07      	ldr	r5, [pc, #28]	; (80180d0 <_kill_r+0x20>)
 80180b4:	2300      	movs	r3, #0
 80180b6:	4604      	mov	r4, r0
 80180b8:	4608      	mov	r0, r1
 80180ba:	4611      	mov	r1, r2
 80180bc:	602b      	str	r3, [r5, #0]
 80180be:	f7eb f943 	bl	8003348 <_kill>
 80180c2:	1c43      	adds	r3, r0, #1
 80180c4:	d102      	bne.n	80180cc <_kill_r+0x1c>
 80180c6:	682b      	ldr	r3, [r5, #0]
 80180c8:	b103      	cbz	r3, 80180cc <_kill_r+0x1c>
 80180ca:	6023      	str	r3, [r4, #0]
 80180cc:	bd38      	pop	{r3, r4, r5, pc}
 80180ce:	bf00      	nop
 80180d0:	2000337c 	.word	0x2000337c

080180d4 <_getpid_r>:
 80180d4:	f7eb b930 	b.w	8003338 <_getpid>

080180d8 <round>:
 80180d8:	ec51 0b10 	vmov	r0, r1, d0
 80180dc:	b570      	push	{r4, r5, r6, lr}
 80180de:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80180e2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 80180e6:	2c13      	cmp	r4, #19
 80180e8:	ee10 2a10 	vmov	r2, s0
 80180ec:	460b      	mov	r3, r1
 80180ee:	dc19      	bgt.n	8018124 <round+0x4c>
 80180f0:	2c00      	cmp	r4, #0
 80180f2:	da09      	bge.n	8018108 <round+0x30>
 80180f4:	3401      	adds	r4, #1
 80180f6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80180fa:	d103      	bne.n	8018104 <round+0x2c>
 80180fc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8018100:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018104:	2100      	movs	r1, #0
 8018106:	e028      	b.n	801815a <round+0x82>
 8018108:	4d15      	ldr	r5, [pc, #84]	; (8018160 <round+0x88>)
 801810a:	4125      	asrs	r5, r4
 801810c:	ea01 0605 	and.w	r6, r1, r5
 8018110:	4332      	orrs	r2, r6
 8018112:	d00e      	beq.n	8018132 <round+0x5a>
 8018114:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018118:	fa42 f404 	asr.w	r4, r2, r4
 801811c:	4423      	add	r3, r4
 801811e:	ea23 0305 	bic.w	r3, r3, r5
 8018122:	e7ef      	b.n	8018104 <round+0x2c>
 8018124:	2c33      	cmp	r4, #51	; 0x33
 8018126:	dd07      	ble.n	8018138 <round+0x60>
 8018128:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801812c:	d101      	bne.n	8018132 <round+0x5a>
 801812e:	f7e8 f8ad 	bl	800028c <__adddf3>
 8018132:	ec41 0b10 	vmov	d0, r0, r1
 8018136:	bd70      	pop	{r4, r5, r6, pc}
 8018138:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801813c:	f04f 35ff 	mov.w	r5, #4294967295
 8018140:	40f5      	lsrs	r5, r6
 8018142:	4228      	tst	r0, r5
 8018144:	d0f5      	beq.n	8018132 <round+0x5a>
 8018146:	2101      	movs	r1, #1
 8018148:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801814c:	fa01 f404 	lsl.w	r4, r1, r4
 8018150:	1912      	adds	r2, r2, r4
 8018152:	bf28      	it	cs
 8018154:	185b      	addcs	r3, r3, r1
 8018156:	ea22 0105 	bic.w	r1, r2, r5
 801815a:	4608      	mov	r0, r1
 801815c:	4619      	mov	r1, r3
 801815e:	e7e8      	b.n	8018132 <round+0x5a>
 8018160:	000fffff 	.word	0x000fffff
 8018164:	00000000 	.word	0x00000000

08018168 <exp>:
 8018168:	b538      	push	{r3, r4, r5, lr}
 801816a:	ed2d 8b02 	vpush	{d8}
 801816e:	ec55 4b10 	vmov	r4, r5, d0
 8018172:	f000 f885 	bl	8018280 <__ieee754_exp>
 8018176:	4b22      	ldr	r3, [pc, #136]	; (8018200 <exp+0x98>)
 8018178:	eeb0 8a40 	vmov.f32	s16, s0
 801817c:	eef0 8a60 	vmov.f32	s17, s1
 8018180:	f993 3000 	ldrsb.w	r3, [r3]
 8018184:	3301      	adds	r3, #1
 8018186:	d012      	beq.n	80181ae <exp+0x46>
 8018188:	ec45 4b10 	vmov	d0, r4, r5
 801818c:	f000 fb04 	bl	8018798 <finite>
 8018190:	b168      	cbz	r0, 80181ae <exp+0x46>
 8018192:	a313      	add	r3, pc, #76	; (adr r3, 80181e0 <exp+0x78>)
 8018194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018198:	4620      	mov	r0, r4
 801819a:	4629      	mov	r1, r5
 801819c:	f7e8 fcbc 	bl	8000b18 <__aeabi_dcmpgt>
 80181a0:	b160      	cbz	r0, 80181bc <exp+0x54>
 80181a2:	f7fa fed1 	bl	8012f48 <__errno>
 80181a6:	ed9f 8b10 	vldr	d8, [pc, #64]	; 80181e8 <exp+0x80>
 80181aa:	2322      	movs	r3, #34	; 0x22
 80181ac:	6003      	str	r3, [r0, #0]
 80181ae:	eeb0 0a48 	vmov.f32	s0, s16
 80181b2:	eef0 0a68 	vmov.f32	s1, s17
 80181b6:	ecbd 8b02 	vpop	{d8}
 80181ba:	bd38      	pop	{r3, r4, r5, pc}
 80181bc:	a30c      	add	r3, pc, #48	; (adr r3, 80181f0 <exp+0x88>)
 80181be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181c2:	4620      	mov	r0, r4
 80181c4:	4629      	mov	r1, r5
 80181c6:	f7e8 fc89 	bl	8000adc <__aeabi_dcmplt>
 80181ca:	2800      	cmp	r0, #0
 80181cc:	d0ef      	beq.n	80181ae <exp+0x46>
 80181ce:	f7fa febb 	bl	8012f48 <__errno>
 80181d2:	2322      	movs	r3, #34	; 0x22
 80181d4:	ed9f 8b08 	vldr	d8, [pc, #32]	; 80181f8 <exp+0x90>
 80181d8:	6003      	str	r3, [r0, #0]
 80181da:	e7e8      	b.n	80181ae <exp+0x46>
 80181dc:	f3af 8000 	nop.w
 80181e0:	fefa39ef 	.word	0xfefa39ef
 80181e4:	40862e42 	.word	0x40862e42
 80181e8:	00000000 	.word	0x00000000
 80181ec:	7ff00000 	.word	0x7ff00000
 80181f0:	d52d3051 	.word	0xd52d3051
 80181f4:	c0874910 	.word	0xc0874910
	...
 8018200:	20000370 	.word	0x20000370

08018204 <fmod>:
 8018204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018206:	ed2d 8b02 	vpush	{d8}
 801820a:	ec57 6b10 	vmov	r6, r7, d0
 801820e:	ec55 4b11 	vmov	r4, r5, d1
 8018212:	f000 f9af 	bl	8018574 <__ieee754_fmod>
 8018216:	4b18      	ldr	r3, [pc, #96]	; (8018278 <fmod+0x74>)
 8018218:	eeb0 8a40 	vmov.f32	s16, s0
 801821c:	eef0 8a60 	vmov.f32	s17, s1
 8018220:	f993 3000 	ldrsb.w	r3, [r3]
 8018224:	3301      	adds	r3, #1
 8018226:	d020      	beq.n	801826a <fmod+0x66>
 8018228:	4622      	mov	r2, r4
 801822a:	462b      	mov	r3, r5
 801822c:	4620      	mov	r0, r4
 801822e:	4629      	mov	r1, r5
 8018230:	f7e8 fc7c 	bl	8000b2c <__aeabi_dcmpun>
 8018234:	b9c8      	cbnz	r0, 801826a <fmod+0x66>
 8018236:	4632      	mov	r2, r6
 8018238:	463b      	mov	r3, r7
 801823a:	4630      	mov	r0, r6
 801823c:	4639      	mov	r1, r7
 801823e:	f7e8 fc75 	bl	8000b2c <__aeabi_dcmpun>
 8018242:	b990      	cbnz	r0, 801826a <fmod+0x66>
 8018244:	2200      	movs	r2, #0
 8018246:	2300      	movs	r3, #0
 8018248:	4620      	mov	r0, r4
 801824a:	4629      	mov	r1, r5
 801824c:	f7e8 fc3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8018250:	b158      	cbz	r0, 801826a <fmod+0x66>
 8018252:	f7fa fe79 	bl	8012f48 <__errno>
 8018256:	2321      	movs	r3, #33	; 0x21
 8018258:	6003      	str	r3, [r0, #0]
 801825a:	2200      	movs	r2, #0
 801825c:	2300      	movs	r3, #0
 801825e:	4610      	mov	r0, r2
 8018260:	4619      	mov	r1, r3
 8018262:	f7e8 faf3 	bl	800084c <__aeabi_ddiv>
 8018266:	ec41 0b18 	vmov	d8, r0, r1
 801826a:	eeb0 0a48 	vmov.f32	s0, s16
 801826e:	eef0 0a68 	vmov.f32	s1, s17
 8018272:	ecbd 8b02 	vpop	{d8}
 8018276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018278:	20000370 	.word	0x20000370
 801827c:	00000000 	.word	0x00000000

08018280 <__ieee754_exp>:
 8018280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018284:	ec55 4b10 	vmov	r4, r5, d0
 8018288:	49b1      	ldr	r1, [pc, #708]	; (8018550 <__ieee754_exp+0x2d0>)
 801828a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801828e:	428b      	cmp	r3, r1
 8018290:	ed2d 8b04 	vpush	{d8-d9}
 8018294:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8018298:	d937      	bls.n	801830a <__ieee754_exp+0x8a>
 801829a:	49ae      	ldr	r1, [pc, #696]	; (8018554 <__ieee754_exp+0x2d4>)
 801829c:	428b      	cmp	r3, r1
 801829e:	d916      	bls.n	80182ce <__ieee754_exp+0x4e>
 80182a0:	ee10 3a10 	vmov	r3, s0
 80182a4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80182a8:	4313      	orrs	r3, r2
 80182aa:	d009      	beq.n	80182c0 <__ieee754_exp+0x40>
 80182ac:	ee10 2a10 	vmov	r2, s0
 80182b0:	462b      	mov	r3, r5
 80182b2:	4620      	mov	r0, r4
 80182b4:	4629      	mov	r1, r5
 80182b6:	f7e7 ffe9 	bl	800028c <__adddf3>
 80182ba:	4604      	mov	r4, r0
 80182bc:	460d      	mov	r5, r1
 80182be:	e000      	b.n	80182c2 <__ieee754_exp+0x42>
 80182c0:	bb06      	cbnz	r6, 8018304 <__ieee754_exp+0x84>
 80182c2:	ecbd 8b04 	vpop	{d8-d9}
 80182c6:	ec45 4b10 	vmov	d0, r4, r5
 80182ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182ce:	a38a      	add	r3, pc, #552	; (adr r3, 80184f8 <__ieee754_exp+0x278>)
 80182d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182d4:	ee10 0a10 	vmov	r0, s0
 80182d8:	4629      	mov	r1, r5
 80182da:	f7e8 fc1d 	bl	8000b18 <__aeabi_dcmpgt>
 80182de:	b138      	cbz	r0, 80182f0 <__ieee754_exp+0x70>
 80182e0:	a387      	add	r3, pc, #540	; (adr r3, 8018500 <__ieee754_exp+0x280>)
 80182e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182e6:	4610      	mov	r0, r2
 80182e8:	4619      	mov	r1, r3
 80182ea:	f7e8 f985 	bl	80005f8 <__aeabi_dmul>
 80182ee:	e7e4      	b.n	80182ba <__ieee754_exp+0x3a>
 80182f0:	a385      	add	r3, pc, #532	; (adr r3, 8018508 <__ieee754_exp+0x288>)
 80182f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182f6:	4620      	mov	r0, r4
 80182f8:	4629      	mov	r1, r5
 80182fa:	f7e8 fbef 	bl	8000adc <__aeabi_dcmplt>
 80182fe:	2800      	cmp	r0, #0
 8018300:	f000 8087 	beq.w	8018412 <__ieee754_exp+0x192>
 8018304:	2400      	movs	r4, #0
 8018306:	2500      	movs	r5, #0
 8018308:	e7db      	b.n	80182c2 <__ieee754_exp+0x42>
 801830a:	4a93      	ldr	r2, [pc, #588]	; (8018558 <__ieee754_exp+0x2d8>)
 801830c:	4293      	cmp	r3, r2
 801830e:	f240 80ac 	bls.w	801846a <__ieee754_exp+0x1ea>
 8018312:	4a92      	ldr	r2, [pc, #584]	; (801855c <__ieee754_exp+0x2dc>)
 8018314:	4293      	cmp	r3, r2
 8018316:	d87c      	bhi.n	8018412 <__ieee754_exp+0x192>
 8018318:	4b91      	ldr	r3, [pc, #580]	; (8018560 <__ieee754_exp+0x2e0>)
 801831a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801831e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018322:	ee10 0a10 	vmov	r0, s0
 8018326:	4629      	mov	r1, r5
 8018328:	f7e7 ffae 	bl	8000288 <__aeabi_dsub>
 801832c:	4b8d      	ldr	r3, [pc, #564]	; (8018564 <__ieee754_exp+0x2e4>)
 801832e:	00f7      	lsls	r7, r6, #3
 8018330:	443b      	add	r3, r7
 8018332:	ed93 7b00 	vldr	d7, [r3]
 8018336:	f1c6 0a01 	rsb	sl, r6, #1
 801833a:	4680      	mov	r8, r0
 801833c:	4689      	mov	r9, r1
 801833e:	ebaa 0a06 	sub.w	sl, sl, r6
 8018342:	eeb0 8a47 	vmov.f32	s16, s14
 8018346:	eef0 8a67 	vmov.f32	s17, s15
 801834a:	ec53 2b18 	vmov	r2, r3, d8
 801834e:	4640      	mov	r0, r8
 8018350:	4649      	mov	r1, r9
 8018352:	f7e7 ff99 	bl	8000288 <__aeabi_dsub>
 8018356:	4604      	mov	r4, r0
 8018358:	460d      	mov	r5, r1
 801835a:	4622      	mov	r2, r4
 801835c:	462b      	mov	r3, r5
 801835e:	4620      	mov	r0, r4
 8018360:	4629      	mov	r1, r5
 8018362:	f7e8 f949 	bl	80005f8 <__aeabi_dmul>
 8018366:	a36a      	add	r3, pc, #424	; (adr r3, 8018510 <__ieee754_exp+0x290>)
 8018368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801836c:	4606      	mov	r6, r0
 801836e:	460f      	mov	r7, r1
 8018370:	f7e8 f942 	bl	80005f8 <__aeabi_dmul>
 8018374:	a368      	add	r3, pc, #416	; (adr r3, 8018518 <__ieee754_exp+0x298>)
 8018376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801837a:	f7e7 ff85 	bl	8000288 <__aeabi_dsub>
 801837e:	4632      	mov	r2, r6
 8018380:	463b      	mov	r3, r7
 8018382:	f7e8 f939 	bl	80005f8 <__aeabi_dmul>
 8018386:	a366      	add	r3, pc, #408	; (adr r3, 8018520 <__ieee754_exp+0x2a0>)
 8018388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801838c:	f7e7 ff7e 	bl	800028c <__adddf3>
 8018390:	4632      	mov	r2, r6
 8018392:	463b      	mov	r3, r7
 8018394:	f7e8 f930 	bl	80005f8 <__aeabi_dmul>
 8018398:	a363      	add	r3, pc, #396	; (adr r3, 8018528 <__ieee754_exp+0x2a8>)
 801839a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801839e:	f7e7 ff73 	bl	8000288 <__aeabi_dsub>
 80183a2:	4632      	mov	r2, r6
 80183a4:	463b      	mov	r3, r7
 80183a6:	f7e8 f927 	bl	80005f8 <__aeabi_dmul>
 80183aa:	a361      	add	r3, pc, #388	; (adr r3, 8018530 <__ieee754_exp+0x2b0>)
 80183ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183b0:	f7e7 ff6c 	bl	800028c <__adddf3>
 80183b4:	4632      	mov	r2, r6
 80183b6:	463b      	mov	r3, r7
 80183b8:	f7e8 f91e 	bl	80005f8 <__aeabi_dmul>
 80183bc:	4602      	mov	r2, r0
 80183be:	460b      	mov	r3, r1
 80183c0:	4620      	mov	r0, r4
 80183c2:	4629      	mov	r1, r5
 80183c4:	f7e7 ff60 	bl	8000288 <__aeabi_dsub>
 80183c8:	4602      	mov	r2, r0
 80183ca:	460b      	mov	r3, r1
 80183cc:	4606      	mov	r6, r0
 80183ce:	460f      	mov	r7, r1
 80183d0:	4620      	mov	r0, r4
 80183d2:	4629      	mov	r1, r5
 80183d4:	f7e8 f910 	bl	80005f8 <__aeabi_dmul>
 80183d8:	ec41 0b19 	vmov	d9, r0, r1
 80183dc:	f1ba 0f00 	cmp.w	sl, #0
 80183e0:	d15d      	bne.n	801849e <__ieee754_exp+0x21e>
 80183e2:	2200      	movs	r2, #0
 80183e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80183e8:	4630      	mov	r0, r6
 80183ea:	4639      	mov	r1, r7
 80183ec:	f7e7 ff4c 	bl	8000288 <__aeabi_dsub>
 80183f0:	4602      	mov	r2, r0
 80183f2:	460b      	mov	r3, r1
 80183f4:	ec51 0b19 	vmov	r0, r1, d9
 80183f8:	f7e8 fa28 	bl	800084c <__aeabi_ddiv>
 80183fc:	4622      	mov	r2, r4
 80183fe:	462b      	mov	r3, r5
 8018400:	f7e7 ff42 	bl	8000288 <__aeabi_dsub>
 8018404:	4602      	mov	r2, r0
 8018406:	460b      	mov	r3, r1
 8018408:	2000      	movs	r0, #0
 801840a:	4957      	ldr	r1, [pc, #348]	; (8018568 <__ieee754_exp+0x2e8>)
 801840c:	f7e7 ff3c 	bl	8000288 <__aeabi_dsub>
 8018410:	e753      	b.n	80182ba <__ieee754_exp+0x3a>
 8018412:	4856      	ldr	r0, [pc, #344]	; (801856c <__ieee754_exp+0x2ec>)
 8018414:	a348      	add	r3, pc, #288	; (adr r3, 8018538 <__ieee754_exp+0x2b8>)
 8018416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801841a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801841e:	4629      	mov	r1, r5
 8018420:	4620      	mov	r0, r4
 8018422:	f7e8 f8e9 	bl	80005f8 <__aeabi_dmul>
 8018426:	e9d6 2300 	ldrd	r2, r3, [r6]
 801842a:	f7e7 ff2f 	bl	800028c <__adddf3>
 801842e:	f7e8 fb93 	bl	8000b58 <__aeabi_d2iz>
 8018432:	4682      	mov	sl, r0
 8018434:	f7e8 f876 	bl	8000524 <__aeabi_i2d>
 8018438:	a341      	add	r3, pc, #260	; (adr r3, 8018540 <__ieee754_exp+0x2c0>)
 801843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801843e:	4606      	mov	r6, r0
 8018440:	460f      	mov	r7, r1
 8018442:	f7e8 f8d9 	bl	80005f8 <__aeabi_dmul>
 8018446:	4602      	mov	r2, r0
 8018448:	460b      	mov	r3, r1
 801844a:	4620      	mov	r0, r4
 801844c:	4629      	mov	r1, r5
 801844e:	f7e7 ff1b 	bl	8000288 <__aeabi_dsub>
 8018452:	a33d      	add	r3, pc, #244	; (adr r3, 8018548 <__ieee754_exp+0x2c8>)
 8018454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018458:	4680      	mov	r8, r0
 801845a:	4689      	mov	r9, r1
 801845c:	4630      	mov	r0, r6
 801845e:	4639      	mov	r1, r7
 8018460:	f7e8 f8ca 	bl	80005f8 <__aeabi_dmul>
 8018464:	ec41 0b18 	vmov	d8, r0, r1
 8018468:	e76f      	b.n	801834a <__ieee754_exp+0xca>
 801846a:	4a41      	ldr	r2, [pc, #260]	; (8018570 <__ieee754_exp+0x2f0>)
 801846c:	4293      	cmp	r3, r2
 801846e:	d811      	bhi.n	8018494 <__ieee754_exp+0x214>
 8018470:	a323      	add	r3, pc, #140	; (adr r3, 8018500 <__ieee754_exp+0x280>)
 8018472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018476:	ee10 0a10 	vmov	r0, s0
 801847a:	4629      	mov	r1, r5
 801847c:	f7e7 ff06 	bl	800028c <__adddf3>
 8018480:	4b39      	ldr	r3, [pc, #228]	; (8018568 <__ieee754_exp+0x2e8>)
 8018482:	2200      	movs	r2, #0
 8018484:	f7e8 fb48 	bl	8000b18 <__aeabi_dcmpgt>
 8018488:	b138      	cbz	r0, 801849a <__ieee754_exp+0x21a>
 801848a:	4b37      	ldr	r3, [pc, #220]	; (8018568 <__ieee754_exp+0x2e8>)
 801848c:	2200      	movs	r2, #0
 801848e:	4620      	mov	r0, r4
 8018490:	4629      	mov	r1, r5
 8018492:	e710      	b.n	80182b6 <__ieee754_exp+0x36>
 8018494:	f04f 0a00 	mov.w	sl, #0
 8018498:	e75f      	b.n	801835a <__ieee754_exp+0xda>
 801849a:	4682      	mov	sl, r0
 801849c:	e75d      	b.n	801835a <__ieee754_exp+0xda>
 801849e:	4632      	mov	r2, r6
 80184a0:	463b      	mov	r3, r7
 80184a2:	2000      	movs	r0, #0
 80184a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80184a8:	f7e7 feee 	bl	8000288 <__aeabi_dsub>
 80184ac:	4602      	mov	r2, r0
 80184ae:	460b      	mov	r3, r1
 80184b0:	ec51 0b19 	vmov	r0, r1, d9
 80184b4:	f7e8 f9ca 	bl	800084c <__aeabi_ddiv>
 80184b8:	4602      	mov	r2, r0
 80184ba:	460b      	mov	r3, r1
 80184bc:	ec51 0b18 	vmov	r0, r1, d8
 80184c0:	f7e7 fee2 	bl	8000288 <__aeabi_dsub>
 80184c4:	4642      	mov	r2, r8
 80184c6:	464b      	mov	r3, r9
 80184c8:	f7e7 fede 	bl	8000288 <__aeabi_dsub>
 80184cc:	4602      	mov	r2, r0
 80184ce:	460b      	mov	r3, r1
 80184d0:	2000      	movs	r0, #0
 80184d2:	4925      	ldr	r1, [pc, #148]	; (8018568 <__ieee754_exp+0x2e8>)
 80184d4:	f7e7 fed8 	bl	8000288 <__aeabi_dsub>
 80184d8:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80184dc:	4592      	cmp	sl, r2
 80184de:	db02      	blt.n	80184e6 <__ieee754_exp+0x266>
 80184e0:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80184e4:	e6e9      	b.n	80182ba <__ieee754_exp+0x3a>
 80184e6:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80184ea:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80184ee:	2200      	movs	r2, #0
 80184f0:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80184f4:	e6f9      	b.n	80182ea <__ieee754_exp+0x6a>
 80184f6:	bf00      	nop
 80184f8:	fefa39ef 	.word	0xfefa39ef
 80184fc:	40862e42 	.word	0x40862e42
 8018500:	8800759c 	.word	0x8800759c
 8018504:	7e37e43c 	.word	0x7e37e43c
 8018508:	d52d3051 	.word	0xd52d3051
 801850c:	c0874910 	.word	0xc0874910
 8018510:	72bea4d0 	.word	0x72bea4d0
 8018514:	3e663769 	.word	0x3e663769
 8018518:	c5d26bf1 	.word	0xc5d26bf1
 801851c:	3ebbbd41 	.word	0x3ebbbd41
 8018520:	af25de2c 	.word	0xaf25de2c
 8018524:	3f11566a 	.word	0x3f11566a
 8018528:	16bebd93 	.word	0x16bebd93
 801852c:	3f66c16c 	.word	0x3f66c16c
 8018530:	5555553e 	.word	0x5555553e
 8018534:	3fc55555 	.word	0x3fc55555
 8018538:	652b82fe 	.word	0x652b82fe
 801853c:	3ff71547 	.word	0x3ff71547
 8018540:	fee00000 	.word	0xfee00000
 8018544:	3fe62e42 	.word	0x3fe62e42
 8018548:	35793c76 	.word	0x35793c76
 801854c:	3dea39ef 	.word	0x3dea39ef
 8018550:	40862e41 	.word	0x40862e41
 8018554:	7fefffff 	.word	0x7fefffff
 8018558:	3fd62e42 	.word	0x3fd62e42
 801855c:	3ff0a2b1 	.word	0x3ff0a2b1
 8018560:	0801a9c0 	.word	0x0801a9c0
 8018564:	0801a9d0 	.word	0x0801a9d0
 8018568:	3ff00000 	.word	0x3ff00000
 801856c:	0801a9b0 	.word	0x0801a9b0
 8018570:	3e2fffff 	.word	0x3e2fffff

08018574 <__ieee754_fmod>:
 8018574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018578:	ec53 2b11 	vmov	r2, r3, d1
 801857c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8018580:	ea5e 0402 	orrs.w	r4, lr, r2
 8018584:	ec51 0b10 	vmov	r0, r1, d0
 8018588:	ee11 7a10 	vmov	r7, s2
 801858c:	ee11 ca10 	vmov	ip, s2
 8018590:	461e      	mov	r6, r3
 8018592:	d00d      	beq.n	80185b0 <__ieee754_fmod+0x3c>
 8018594:	4c7a      	ldr	r4, [pc, #488]	; (8018780 <__ieee754_fmod+0x20c>)
 8018596:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 801859a:	45a0      	cmp	r8, r4
 801859c:	4689      	mov	r9, r1
 801859e:	dc07      	bgt.n	80185b0 <__ieee754_fmod+0x3c>
 80185a0:	4254      	negs	r4, r2
 80185a2:	4d78      	ldr	r5, [pc, #480]	; (8018784 <__ieee754_fmod+0x210>)
 80185a4:	4314      	orrs	r4, r2
 80185a6:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 80185aa:	42ac      	cmp	r4, r5
 80185ac:	46ab      	mov	fp, r5
 80185ae:	d909      	bls.n	80185c4 <__ieee754_fmod+0x50>
 80185b0:	f7e8 f822 	bl	80005f8 <__aeabi_dmul>
 80185b4:	4602      	mov	r2, r0
 80185b6:	460b      	mov	r3, r1
 80185b8:	f7e8 f948 	bl	800084c <__aeabi_ddiv>
 80185bc:	ec41 0b10 	vmov	d0, r0, r1
 80185c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185c4:	45f0      	cmp	r8, lr
 80185c6:	ee10 aa10 	vmov	sl, s0
 80185ca:	ee10 4a10 	vmov	r4, s0
 80185ce:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80185d2:	dc0a      	bgt.n	80185ea <__ieee754_fmod+0x76>
 80185d4:	dbf2      	blt.n	80185bc <__ieee754_fmod+0x48>
 80185d6:	4290      	cmp	r0, r2
 80185d8:	d3f0      	bcc.n	80185bc <__ieee754_fmod+0x48>
 80185da:	d106      	bne.n	80185ea <__ieee754_fmod+0x76>
 80185dc:	4a6a      	ldr	r2, [pc, #424]	; (8018788 <__ieee754_fmod+0x214>)
 80185de:	0fed      	lsrs	r5, r5, #31
 80185e0:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80185e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80185e8:	e7e8      	b.n	80185bc <__ieee754_fmod+0x48>
 80185ea:	ea19 0f0b 	tst.w	r9, fp
 80185ee:	d14a      	bne.n	8018686 <__ieee754_fmod+0x112>
 80185f0:	f1b8 0f00 	cmp.w	r8, #0
 80185f4:	d13f      	bne.n	8018676 <__ieee754_fmod+0x102>
 80185f6:	4965      	ldr	r1, [pc, #404]	; (801878c <__ieee754_fmod+0x218>)
 80185f8:	4653      	mov	r3, sl
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	dc38      	bgt.n	8018670 <__ieee754_fmod+0xfc>
 80185fe:	4b61      	ldr	r3, [pc, #388]	; (8018784 <__ieee754_fmod+0x210>)
 8018600:	4033      	ands	r3, r6
 8018602:	2b00      	cmp	r3, #0
 8018604:	d14f      	bne.n	80186a6 <__ieee754_fmod+0x132>
 8018606:	f1be 0f00 	cmp.w	lr, #0
 801860a:	d144      	bne.n	8018696 <__ieee754_fmod+0x122>
 801860c:	4a5f      	ldr	r2, [pc, #380]	; (801878c <__ieee754_fmod+0x218>)
 801860e:	463b      	mov	r3, r7
 8018610:	2b00      	cmp	r3, #0
 8018612:	dc3d      	bgt.n	8018690 <__ieee754_fmod+0x11c>
 8018614:	4b5e      	ldr	r3, [pc, #376]	; (8018790 <__ieee754_fmod+0x21c>)
 8018616:	4299      	cmp	r1, r3
 8018618:	db4a      	blt.n	80186b0 <__ieee754_fmod+0x13c>
 801861a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801861e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018622:	485b      	ldr	r0, [pc, #364]	; (8018790 <__ieee754_fmod+0x21c>)
 8018624:	4282      	cmp	r2, r0
 8018626:	db57      	blt.n	80186d8 <__ieee754_fmod+0x164>
 8018628:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801862c:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8018630:	1a89      	subs	r1, r1, r2
 8018632:	1b98      	subs	r0, r3, r6
 8018634:	eba4 070c 	sub.w	r7, r4, ip
 8018638:	2900      	cmp	r1, #0
 801863a:	d164      	bne.n	8018706 <__ieee754_fmod+0x192>
 801863c:	4564      	cmp	r4, ip
 801863e:	bf38      	it	cc
 8018640:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8018644:	2800      	cmp	r0, #0
 8018646:	bfa4      	itt	ge
 8018648:	463c      	movge	r4, r7
 801864a:	4603      	movge	r3, r0
 801864c:	ea53 0104 	orrs.w	r1, r3, r4
 8018650:	d0c4      	beq.n	80185dc <__ieee754_fmod+0x68>
 8018652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018656:	db6b      	blt.n	8018730 <__ieee754_fmod+0x1bc>
 8018658:	494d      	ldr	r1, [pc, #308]	; (8018790 <__ieee754_fmod+0x21c>)
 801865a:	428a      	cmp	r2, r1
 801865c:	db6e      	blt.n	801873c <__ieee754_fmod+0x1c8>
 801865e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018662:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8018666:	431d      	orrs	r5, r3
 8018668:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 801866c:	4620      	mov	r0, r4
 801866e:	e7a5      	b.n	80185bc <__ieee754_fmod+0x48>
 8018670:	3901      	subs	r1, #1
 8018672:	005b      	lsls	r3, r3, #1
 8018674:	e7c1      	b.n	80185fa <__ieee754_fmod+0x86>
 8018676:	4946      	ldr	r1, [pc, #280]	; (8018790 <__ieee754_fmod+0x21c>)
 8018678:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801867c:	2b00      	cmp	r3, #0
 801867e:	ddbe      	ble.n	80185fe <__ieee754_fmod+0x8a>
 8018680:	3901      	subs	r1, #1
 8018682:	005b      	lsls	r3, r3, #1
 8018684:	e7fa      	b.n	801867c <__ieee754_fmod+0x108>
 8018686:	ea4f 5128 	mov.w	r1, r8, asr #20
 801868a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801868e:	e7b6      	b.n	80185fe <__ieee754_fmod+0x8a>
 8018690:	3a01      	subs	r2, #1
 8018692:	005b      	lsls	r3, r3, #1
 8018694:	e7bc      	b.n	8018610 <__ieee754_fmod+0x9c>
 8018696:	4a3e      	ldr	r2, [pc, #248]	; (8018790 <__ieee754_fmod+0x21c>)
 8018698:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 801869c:	2b00      	cmp	r3, #0
 801869e:	ddb9      	ble.n	8018614 <__ieee754_fmod+0xa0>
 80186a0:	3a01      	subs	r2, #1
 80186a2:	005b      	lsls	r3, r3, #1
 80186a4:	e7fa      	b.n	801869c <__ieee754_fmod+0x128>
 80186a6:	ea4f 522e 	mov.w	r2, lr, asr #20
 80186aa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80186ae:	e7b1      	b.n	8018614 <__ieee754_fmod+0xa0>
 80186b0:	1a5c      	subs	r4, r3, r1
 80186b2:	2c1f      	cmp	r4, #31
 80186b4:	dc0a      	bgt.n	80186cc <__ieee754_fmod+0x158>
 80186b6:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80186ba:	fa08 f804 	lsl.w	r8, r8, r4
 80186be:	fa2a f303 	lsr.w	r3, sl, r3
 80186c2:	ea43 0308 	orr.w	r3, r3, r8
 80186c6:	fa0a f404 	lsl.w	r4, sl, r4
 80186ca:	e7aa      	b.n	8018622 <__ieee754_fmod+0xae>
 80186cc:	4b31      	ldr	r3, [pc, #196]	; (8018794 <__ieee754_fmod+0x220>)
 80186ce:	1a5b      	subs	r3, r3, r1
 80186d0:	fa0a f303 	lsl.w	r3, sl, r3
 80186d4:	2400      	movs	r4, #0
 80186d6:	e7a4      	b.n	8018622 <__ieee754_fmod+0xae>
 80186d8:	eba0 0c02 	sub.w	ip, r0, r2
 80186dc:	f1bc 0f1f 	cmp.w	ip, #31
 80186e0:	dc0a      	bgt.n	80186f8 <__ieee754_fmod+0x184>
 80186e2:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80186e6:	fa0e fe0c 	lsl.w	lr, lr, ip
 80186ea:	fa27 f606 	lsr.w	r6, r7, r6
 80186ee:	ea46 060e 	orr.w	r6, r6, lr
 80186f2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80186f6:	e79b      	b.n	8018630 <__ieee754_fmod+0xbc>
 80186f8:	4e26      	ldr	r6, [pc, #152]	; (8018794 <__ieee754_fmod+0x220>)
 80186fa:	1ab6      	subs	r6, r6, r2
 80186fc:	fa07 f606 	lsl.w	r6, r7, r6
 8018700:	f04f 0c00 	mov.w	ip, #0
 8018704:	e794      	b.n	8018630 <__ieee754_fmod+0xbc>
 8018706:	4564      	cmp	r4, ip
 8018708:	bf38      	it	cc
 801870a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801870e:	2800      	cmp	r0, #0
 8018710:	da05      	bge.n	801871e <__ieee754_fmod+0x1aa>
 8018712:	0fe0      	lsrs	r0, r4, #31
 8018714:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018718:	0064      	lsls	r4, r4, #1
 801871a:	3901      	subs	r1, #1
 801871c:	e789      	b.n	8018632 <__ieee754_fmod+0xbe>
 801871e:	ea50 0307 	orrs.w	r3, r0, r7
 8018722:	f43f af5b 	beq.w	80185dc <__ieee754_fmod+0x68>
 8018726:	0ffb      	lsrs	r3, r7, #31
 8018728:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801872c:	007c      	lsls	r4, r7, #1
 801872e:	e7f4      	b.n	801871a <__ieee754_fmod+0x1a6>
 8018730:	0fe1      	lsrs	r1, r4, #31
 8018732:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018736:	0064      	lsls	r4, r4, #1
 8018738:	3a01      	subs	r2, #1
 801873a:	e78a      	b.n	8018652 <__ieee754_fmod+0xde>
 801873c:	1a89      	subs	r1, r1, r2
 801873e:	2914      	cmp	r1, #20
 8018740:	dc0a      	bgt.n	8018758 <__ieee754_fmod+0x1e4>
 8018742:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8018746:	fa03 f202 	lsl.w	r2, r3, r2
 801874a:	40cc      	lsrs	r4, r1
 801874c:	4322      	orrs	r2, r4
 801874e:	410b      	asrs	r3, r1
 8018750:	ea43 0105 	orr.w	r1, r3, r5
 8018754:	4610      	mov	r0, r2
 8018756:	e731      	b.n	80185bc <__ieee754_fmod+0x48>
 8018758:	291f      	cmp	r1, #31
 801875a:	dc07      	bgt.n	801876c <__ieee754_fmod+0x1f8>
 801875c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8018760:	40cc      	lsrs	r4, r1
 8018762:	fa03 f202 	lsl.w	r2, r3, r2
 8018766:	4322      	orrs	r2, r4
 8018768:	462b      	mov	r3, r5
 801876a:	e7f1      	b.n	8018750 <__ieee754_fmod+0x1dc>
 801876c:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8018770:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018774:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8018778:	32e2      	adds	r2, #226	; 0xe2
 801877a:	fa43 f202 	asr.w	r2, r3, r2
 801877e:	e7f3      	b.n	8018768 <__ieee754_fmod+0x1f4>
 8018780:	7fefffff 	.word	0x7fefffff
 8018784:	7ff00000 	.word	0x7ff00000
 8018788:	0801a9e0 	.word	0x0801a9e0
 801878c:	fffffbed 	.word	0xfffffbed
 8018790:	fffffc02 	.word	0xfffffc02
 8018794:	fffffbe2 	.word	0xfffffbe2

08018798 <finite>:
 8018798:	b082      	sub	sp, #8
 801879a:	ed8d 0b00 	vstr	d0, [sp]
 801879e:	9801      	ldr	r0, [sp, #4]
 80187a0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80187a4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80187a8:	0fc0      	lsrs	r0, r0, #31
 80187aa:	b002      	add	sp, #8
 80187ac:	4770      	bx	lr
	...

080187b0 <_init>:
 80187b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187b2:	bf00      	nop
 80187b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187b6:	bc08      	pop	{r3}
 80187b8:	469e      	mov	lr, r3
 80187ba:	4770      	bx	lr

080187bc <_fini>:
 80187bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187be:	bf00      	nop
 80187c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80187c2:	bc08      	pop	{r3}
 80187c4:	469e      	mov	lr, r3
 80187c6:	4770      	bx	lr
