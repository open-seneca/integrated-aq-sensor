
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018220  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021f8  080183b0  080183b0  000283b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a5a8  0801a5a8  00030374  2**0
                  CONTENTS
  4 .ARM          00000008  0801a5a8  0801a5a8  0002a5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a5b0  0801a5b0  00030374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a5b0  0801a5b0  0002a5b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a5b4  0801a5b4  0002a5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000374  20000000  0801a5b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003008  20000378  0801a92c  00030378  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003380  0801a92c  00033380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030374  2**0
                  CONTENTS, READONLY
 12 .debug_info   000956f6  00000000  00000000  000303a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000855c  00000000  00000000  000c5a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003b58  00000000  00000000  000cdff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000037d8  00000000  00000000  000d1b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2e7  00000000  00000000  000d5328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003930b  00000000  00000000  0010060f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea99d  00000000  00000000  0013991a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002242b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011668  00000000  00000000  0022430c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000378 	.word	0x20000378
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018398 	.word	0x08018398

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000037c 	.word	0x2000037c
 80001cc:	08018398 	.word	0x08018398

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <convertDegMinToDecDeg>:
#include <math.h>

GPS_t GPS;
//##################################################################################################################
double convertDegMinToDecDeg (float degMin)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	ed87 0a01 	vstr	s0, [r7, #4]
  double min = 0.0;
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double decDeg = 0.0;
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 
  //get the minutes, fmod() requires double
  min = fmod((double)degMin, 100.0);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fa98 	bl	8000548 <__aeabi_f2d>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8001088 <convertDegMinToDecDeg+0x98>
 8001020:	ec43 2b10 	vmov	d0, r2, r3
 8001024:	f016 fee2 	bl	8017dec <fmod>
 8001028:	ed87 0b04 	vstr	d0, [r7, #16]
 
  //rebuild coordinates in decimal degrees
  degMin = (int) ( degMin / 100 );
 800102c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001030:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001090 <convertDegMinToDecDeg+0xa0>
 8001034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001040:	edc7 7a01 	vstr	s15, [r7, #4]
  decDeg = degMin + ( min / 60 );
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff fa7f 	bl	8000548 <__aeabi_f2d>
 800104a:	4604      	mov	r4, r0
 800104c:	460d      	mov	r5, r1
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <convertDegMinToDecDeg+0xa4>)
 8001054:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001058:	f7ff fbf8 	bl	800084c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4620      	mov	r0, r4
 8001062:	4629      	mov	r1, r5
 8001064:	f7ff f912 	bl	800028c <__adddf3>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 
  return decDeg;
 8001070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001074:	ec43 2b17 	vmov	d7, r2, r3
}
 8001078:	eeb0 0a47 	vmov.f32	s0, s14
 800107c:	eef0 0a67 	vmov.f32	s1, s15
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bdb0      	pop	{r4, r5, r7, pc}
 8001086:	bf00      	nop
 8001088:	00000000 	.word	0x00000000
 800108c:	40590000 	.word	0x40590000
 8001090:	42c80000 	.word	0x42c80000
 8001094:	404e0000 	.word	0x404e0000

08001098 <GPS_Init>:
//##################################################################################################################
void	GPS_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	// Note: GPS_NRST sets the GPS LED, not the reset apparently
	memset(&GPS.GPGGA,0,sizeof(GPS.GPGGA));  // resets GPGGA to 0
 800109c:	2268      	movs	r2, #104	; 0x68
 800109e:	2100      	movs	r1, #0
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <GPS_Init+0x24>)
 80010a2:	f011 fd7f 	bl	8012ba4 <memset>
	GPS.rxIndex=0;
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <GPS_Init+0x28>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);	
 80010ae:	2201      	movs	r2, #1
 80010b0:	4904      	ldr	r1, [pc, #16]	; (80010c4 <GPS_Init+0x2c>)
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <GPS_Init+0x30>)
 80010b4:	f00a fa7b 	bl	800b5ae <HAL_UART_Receive_IT>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000cb8 	.word	0x20000cb8
 80010c0:	200008b0 	.word	0x200008b0
 80010c4:	20000cb2 	.word	0x20000cb2
 80010c8:	200015e0 	.word	0x200015e0

080010cc <GPS_CallBack>:
//##################################################################################################################
void	GPS_CallBack(void) /* Receiving GPS UART buffer byte by byte until it starts repeating */
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&_GPS_USART,&GPS.rxTmp,1);
 80010d0:	2201      	movs	r2, #1
 80010d2:	4915      	ldr	r1, [pc, #84]	; (8001128 <GPS_CallBack+0x5c>)
 80010d4:	4815      	ldr	r0, [pc, #84]	; (800112c <GPS_CallBack+0x60>)
 80010d6:	f00a fa6a 	bl	800b5ae <HAL_UART_Receive_IT>

	/* We expect 14 NMEA sentences separated by a $ symbol */
	GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <GPS_CallBack+0x64>)
 80010dc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <GPS_CallBack+0x64>)
 80010e4:	f893 1402 	ldrb.w	r1, [r3, #1026]	; 0x402
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <GPS_CallBack+0x64>)
 80010ea:	5499      	strb	r1, [r3, r2]
	if (GPS.rxTmp == 36) GPS.nmeaCounter++; // 36 is '$' in UTF8
 80010ec:	4b10      	ldr	r3, [pc, #64]	; (8001130 <GPS_CallBack+0x64>)
 80010ee:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80010f2:	2b24      	cmp	r3, #36	; 0x24
 80010f4:	d107      	bne.n	8001106 <GPS_CallBack+0x3a>
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <GPS_CallBack+0x64>)
 80010f8:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 80010fc:	3301      	adds	r3, #1
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <GPS_CallBack+0x64>)
 8001102:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	GPS.rxIndex++;
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <GPS_CallBack+0x64>)
 8001108:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800110c:	3301      	adds	r3, #1
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <GPS_CallBack+0x64>)
 8001112:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	if (GPS.nmeaCounter >= 13) GPS_Process();
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <GPS_CallBack+0x64>)
 8001118:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 800111c:	2b0c      	cmp	r3, #12
 800111e:	d901      	bls.n	8001124 <GPS_CallBack+0x58>
 8001120:	f000 f808 	bl	8001134 <GPS_Process>
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000cb2 	.word	0x20000cb2
 800112c:	200015e0 	.word	0x200015e0
 8001130:	200008b0 	.word	0x200008b0

08001134 <GPS_Process>:
//##################################################################################################################
void	GPS_Process(void)
{
 8001134:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001138:	b090      	sub	sp, #64	; 0x40
 800113a:	af08      	add	r7, sp, #32
	char	*str2;
	char	*str3;
	#if (_GPS_DEBUG==1)
	printf("%s",GPS.rxBuffer);
	#endif
	GPS.GPGGA.Buffer_Size = strlen(GPS.rxBuffer);
 800113c:	48bb      	ldr	r0, [pc, #748]	; (800142c <GPS_Process+0x2f8>)
 800113e:	f7ff f847 	bl	80001d0 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	b29a      	uxth	r2, r3
 8001146:	4bb9      	ldr	r3, [pc, #740]	; (800142c <GPS_Process+0x2f8>)
 8001148:	f8a3 246c 	strh.w	r2, [r3, #1132]	; 0x46c
	str=strstr((char*)GPS.rxBuffer,"GNGGA,"); // GNZDA for where the date is in the buffer
 800114c:	49b8      	ldr	r1, [pc, #736]	; (8001430 <GPS_Process+0x2fc>)
 800114e:	48b7      	ldr	r0, [pc, #732]	; (800142c <GPS_Process+0x2f8>)
 8001150:	f012 fc41 	bl	80139d6 <strstr>
 8001154:	61f8      	str	r0, [r7, #28]
	if(str!=NULL)
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 81a5 	beq.w	80014a8 <GPS_Process+0x374>
	{
		memset(&GPS.GPGGA,0,sizeof(GPS.GPGGA));  // resets GPGGA to 0
 800115e:	2268      	movs	r2, #104	; 0x68
 8001160:	2100      	movs	r1, #0
 8001162:	48b4      	ldr	r0, [pc, #720]	; (8001434 <GPS_Process+0x300>)
 8001164:	f011 fd1e 	bl	8012ba4 <memset>
		// GNGGA for where the position is in the buffer
		sscanf(str,"GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f",&GPS.GPGGA.HHMMSS,&GPS.GPGGA.Latitude,&GPS.GPGGA.NS_Indicator,&GPS.GPGGA.Longitude,&GPS.GPGGA.EW_Indicator,&GPS.GPGGA.PositionFixIndicator,&GPS.GPGGA.SatellitesUsed,&GPS.GPGGA.HDOP,&GPS.GPGGA.MSL_Altitude);  // GNGGA instead of GPGGA
 8001168:	4bb3      	ldr	r3, [pc, #716]	; (8001438 <GPS_Process+0x304>)
 800116a:	9306      	str	r3, [sp, #24]
 800116c:	4bb3      	ldr	r3, [pc, #716]	; (800143c <GPS_Process+0x308>)
 800116e:	9305      	str	r3, [sp, #20]
 8001170:	4bb3      	ldr	r3, [pc, #716]	; (8001440 <GPS_Process+0x30c>)
 8001172:	9304      	str	r3, [sp, #16]
 8001174:	4bb3      	ldr	r3, [pc, #716]	; (8001444 <GPS_Process+0x310>)
 8001176:	9303      	str	r3, [sp, #12]
 8001178:	4bb3      	ldr	r3, [pc, #716]	; (8001448 <GPS_Process+0x314>)
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	4bb3      	ldr	r3, [pc, #716]	; (800144c <GPS_Process+0x318>)
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	4bb3      	ldr	r3, [pc, #716]	; (8001450 <GPS_Process+0x31c>)
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	4bb3      	ldr	r3, [pc, #716]	; (8001454 <GPS_Process+0x320>)
 8001186:	4ab4      	ldr	r2, [pc, #720]	; (8001458 <GPS_Process+0x324>)
 8001188:	49b4      	ldr	r1, [pc, #720]	; (800145c <GPS_Process+0x328>)
 800118a:	69f8      	ldr	r0, [r7, #28]
 800118c:	f012 fbb2 	bl	80138f4 <siscanf>
		if(GPS.GPGGA.PositionFixIndicator>0)
 8001190:	4ba6      	ldr	r3, [pc, #664]	; (800142c <GPS_Process+0x2f8>)
 8001192:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 8001196:	2b00      	cmp	r3, #0
 8001198:	dd03      	ble.n	80011a2 <GPS_Process+0x6e>
			GPS.GPGGA.PositionFixIndicator=1;
 800119a:	4ba4      	ldr	r3, [pc, #656]	; (800142c <GPS_Process+0x2f8>)
 800119c:	2201      	movs	r2, #1
 800119e:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
		if(GPS.GPGGA.NS_Indicator==0)
 80011a2:	4ba2      	ldr	r3, [pc, #648]	; (800142c <GPS_Process+0x2f8>)
 80011a4:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d103      	bne.n	80011b4 <GPS_Process+0x80>
			GPS.GPGGA.NS_Indicator='-';
 80011ac:	4b9f      	ldr	r3, [pc, #636]	; (800142c <GPS_Process+0x2f8>)
 80011ae:	222d      	movs	r2, #45	; 0x2d
 80011b0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
		if(GPS.GPGGA.EW_Indicator==0)
 80011b4:	4b9d      	ldr	r3, [pc, #628]	; (800142c <GPS_Process+0x2f8>)
 80011b6:	f893 3430 	ldrb.w	r3, [r3, #1072]	; 0x430
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d103      	bne.n	80011c6 <GPS_Process+0x92>
			GPS.GPGGA.EW_Indicator='-';
 80011be:	4b9b      	ldr	r3, [pc, #620]	; (800142c <GPS_Process+0x2f8>)
 80011c0:	222d      	movs	r2, #45	; 0x2d
 80011c2:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
		if(GPS.GPGGA.Geoid_Units==0)
 80011c6:	4b99      	ldr	r3, [pc, #612]	; (800142c <GPS_Process+0x2f8>)
 80011c8:	f893 344c 	ldrb.w	r3, [r3, #1100]	; 0x44c
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d103      	bne.n	80011d8 <GPS_Process+0xa4>
			GPS.GPGGA.Geoid_Units='-';
 80011d0:	4b96      	ldr	r3, [pc, #600]	; (800142c <GPS_Process+0x2f8>)
 80011d2:	222d      	movs	r2, #45	; 0x2d
 80011d4:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
		if(GPS.GPGGA.MSL_Units==0)
 80011d8:	4b94      	ldr	r3, [pc, #592]	; (800142c <GPS_Process+0x2f8>)
 80011da:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d103      	bne.n	80011ea <GPS_Process+0xb6>
			GPS.GPGGA.MSL_Units='-';
 80011e2:	4b92      	ldr	r3, [pc, #584]	; (800142c <GPS_Process+0x2f8>)
 80011e4:	222d      	movs	r2, #45	; 0x2d
 80011e6:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
		if (GPS.GPGGA.Latitude == 0.0f || GPS.GPGGA.Longitude == 0.0f) {
 80011ea:	4b90      	ldr	r3, [pc, #576]	; (800142c <GPS_Process+0x2f8>)
 80011ec:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d009      	beq.n	8001212 <GPS_Process+0xde>
 80011fe:	4b8b      	ldr	r3, [pc, #556]	; (800142c <GPS_Process+0x2f8>)
 8001200:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	eef5 7a40 	vcmp.f32	s15, #0.0
 800120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001210:	d112      	bne.n	8001238 <GPS_Process+0x104>
			GPS.GPGGA.LatitudeDecimal = 0.0f;
 8001212:	4b86      	ldr	r3, [pc, #536]	; (800142c <GPS_Process+0x2f8>)
 8001214:	f503 6183 	add.w	r1, r3, #1048	; 0x418
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	e9c1 2300 	strd	r2, r3, [r1]
			GPS.GPGGA.LongitudeDecimal = 0.0f;
 8001224:	4b81      	ldr	r3, [pc, #516]	; (800142c <GPS_Process+0x2f8>)
 8001226:	f503 6185 	add.w	r1, r3, #1064	; 0x428
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	e9c1 2300 	strd	r2, r3, [r1]
 8001236:	e047      	b.n	80012c8 <GPS_Process+0x194>
		} else {
			GPS.GPGGA.LatitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Latitude);
 8001238:	4b7c      	ldr	r3, [pc, #496]	; (800142c <GPS_Process+0x2f8>)
 800123a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	eeb0 0a67 	vmov.f32	s0, s15
 8001246:	f7ff fed3 	bl	8000ff0 <convertDegMinToDecDeg>
 800124a:	eeb0 7a40 	vmov.f32	s14, s0
 800124e:	eef0 7a60 	vmov.f32	s15, s1
 8001252:	4b76      	ldr	r3, [pc, #472]	; (800142c <GPS_Process+0x2f8>)
 8001254:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8001258:	ed83 7b00 	vstr	d7, [r3]
			if (GPS.GPGGA.NS_Indicator!=78) { // 78 equals "N"
 800125c:	4b73      	ldr	r3, [pc, #460]	; (800142c <GPS_Process+0x2f8>)
 800125e:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8001262:	2b4e      	cmp	r3, #78	; 0x4e
 8001264:	d00c      	beq.n	8001280 <GPS_Process+0x14c>
				GPS.GPGGA.LatitudeDecimal *= -1; // subject to testing 21/04/2021
 8001266:	4b71      	ldr	r3, [pc, #452]	; (800142c <GPS_Process+0x2f8>)
 8001268:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	4690      	mov	r8, r2
 8001272:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001276:	4b6d      	ldr	r3, [pc, #436]	; (800142c <GPS_Process+0x2f8>)
 8001278:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800127c:	e9c3 8900 	strd	r8, r9, [r3]
			}
			GPS.GPGGA.LongitudeDecimal=convertDegMinToDecDeg(GPS.GPGGA.Longitude);
 8001280:	4b6a      	ldr	r3, [pc, #424]	; (800142c <GPS_Process+0x2f8>)
 8001282:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	eeb0 0a67 	vmov.f32	s0, s15
 800128e:	f7ff feaf 	bl	8000ff0 <convertDegMinToDecDeg>
 8001292:	eeb0 7a40 	vmov.f32	s14, s0
 8001296:	eef0 7a60 	vmov.f32	s15, s1
 800129a:	4b64      	ldr	r3, [pc, #400]	; (800142c <GPS_Process+0x2f8>)
 800129c:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80012a0:	ed83 7b00 	vstr	d7, [r3]
			if (GPS.GPGGA.EW_Indicator!=69) { // 69 equals "E"
 80012a4:	4b61      	ldr	r3, [pc, #388]	; (800142c <GPS_Process+0x2f8>)
 80012a6:	f893 3430 	ldrb.w	r3, [r3, #1072]	; 0x430
 80012aa:	2b45      	cmp	r3, #69	; 0x45
 80012ac:	d00c      	beq.n	80012c8 <GPS_Process+0x194>
				GPS.GPGGA.LongitudeDecimal *= -1; // subject to testing 21/04/2021
 80012ae:	4b5f      	ldr	r3, [pc, #380]	; (800142c <GPS_Process+0x2f8>)
 80012b0:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	4614      	mov	r4, r2
 80012ba:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012be:	4b5b      	ldr	r3, [pc, #364]	; (800142c <GPS_Process+0x2f8>)
 80012c0:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 80012c4:	e9c3 4500 	strd	r4, r5, [r3]
			}
		}
		str2=strstr((char*)GPS.rxBuffer,"GNZDA,"); // GNZDA for where the date is in the buffer
 80012c8:	4965      	ldr	r1, [pc, #404]	; (8001460 <GPS_Process+0x32c>)
 80012ca:	4858      	ldr	r0, [pc, #352]	; (800142c <GPS_Process+0x2f8>)
 80012cc:	f012 fb83 	bl	80139d6 <strstr>
 80012d0:	61b8      	str	r0, [r7, #24]
		if(str2!=NULL) {
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d078      	beq.n	80013ca <GPS_Process+0x296>
			// format: GNZDA,181815.000,03,02,2021
			sscanf(str2,"GNZDA,%f,%d,%d,%d",&GPS.GPGGA.HHMMSS,&GPS.GPGGA.UTC_Day,&GPS.GPGGA.UTC_Month,&GPS.GPGGA.UTC_Year);
 80012d8:	4b62      	ldr	r3, [pc, #392]	; (8001464 <GPS_Process+0x330>)
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	4b62      	ldr	r3, [pc, #392]	; (8001468 <GPS_Process+0x334>)
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	4b62      	ldr	r3, [pc, #392]	; (800146c <GPS_Process+0x338>)
 80012e2:	4a5d      	ldr	r2, [pc, #372]	; (8001458 <GPS_Process+0x324>)
 80012e4:	4962      	ldr	r1, [pc, #392]	; (8001470 <GPS_Process+0x33c>)
 80012e6:	69b8      	ldr	r0, [r7, #24]
 80012e8:	f012 fb04 	bl	80138f4 <siscanf>
			GPS.GPGGA.UTC_Hour = (int)(GPS.GPGGA.HHMMSS/10000.f);
 80012ec:	4b4f      	ldr	r3, [pc, #316]	; (800142c <GPS_Process+0x2f8>)
 80012ee:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 80012f2:	ed93 7a00 	vldr	s14, [r3]
 80012f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001474 <GPS_Process+0x340>
 80012fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	edc7 7a01 	vstr	s15, [r7, #4]
 8001306:	793a      	ldrb	r2, [r7, #4]
 8001308:	4b48      	ldr	r3, [pc, #288]	; (800142c <GPS_Process+0x2f8>)
 800130a:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			GPS.GPGGA.UTC_Min = (int)GPS.GPGGA.HHMMSS%10000/100.f;
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <GPS_Process+0x2f8>)
 8001310:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131c:	ee17 2a90 	vmov	r2, s15
 8001320:	4b55      	ldr	r3, [pc, #340]	; (8001478 <GPS_Process+0x344>)
 8001322:	fb83 1302 	smull	r1, r3, r3, r2
 8001326:	1319      	asrs	r1, r3, #12
 8001328:	17d3      	asrs	r3, r2, #31
 800132a:	1acb      	subs	r3, r1, r3
 800132c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001330:	fb01 f303 	mul.w	r3, r1, r3
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800147c <GPS_Process+0x348>
 8001342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134a:	edc7 7a01 	vstr	s15, [r7, #4]
 800134e:	793b      	ldrb	r3, [r7, #4]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <GPS_Process+0x2f8>)
 8001354:	f883 2409 	strb.w	r2, [r3, #1033]	; 0x409
			GPS.GPGGA.UTC_Sec = (int)GPS.GPGGA.HHMMSS%100;
 8001358:	4b34      	ldr	r3, [pc, #208]	; (800142c <GPS_Process+0x2f8>)
 800135a:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001366:	ee17 2a90 	vmov	r2, s15
 800136a:	4b45      	ldr	r3, [pc, #276]	; (8001480 <GPS_Process+0x34c>)
 800136c:	fb83 1302 	smull	r1, r3, r3, r2
 8001370:	1159      	asrs	r1, r3, #5
 8001372:	17d3      	asrs	r3, r2, #31
 8001374:	1acb      	subs	r3, r1, r3
 8001376:	2164      	movs	r1, #100	; 0x64
 8001378:	fb01 f303 	mul.w	r3, r1, r3
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b2a      	ldr	r3, [pc, #168]	; (800142c <GPS_Process+0x2f8>)
 8001382:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
			GPS.GPGGA.YYYYMMDD = 10000*GPS.GPGGA.UTC_Year+100*GPS.GPGGA.UTC_Month+GPS.GPGGA.UTC_Day;
 8001386:	4b29      	ldr	r3, [pc, #164]	; (800142c <GPS_Process+0x2f8>)
 8001388:	f8b3 3466 	ldrh.w	r3, [r3, #1126]	; 0x466
 800138c:	461a      	mov	r2, r3
 800138e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001392:	fb03 f202 	mul.w	r2, r3, r2
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <GPS_Process+0x2f8>)
 8001398:	f893 3465 	ldrb.w	r3, [r3, #1125]	; 0x465
 800139c:	4619      	mov	r1, r3
 800139e:	2364      	movs	r3, #100	; 0x64
 80013a0:	fb03 f301 	mul.w	r3, r3, r1
 80013a4:	4413      	add	r3, r2
 80013a6:	4a21      	ldr	r2, [pc, #132]	; (800142c <GPS_Process+0x2f8>)
 80013a8:	f892 2464 	ldrb.w	r2, [r2, #1124]	; 0x464
 80013ac:	4413      	add	r3, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <GPS_Process+0x2f8>)
 80013b2:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
			if (GPS.GPGGA.YYYYMMDD < 19700000) GPS.GPGGA.YYYYMMDD = 0;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	; (800142c <GPS_Process+0x2f8>)
 80013b8:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 80013bc:	4a31      	ldr	r2, [pc, #196]	; (8001484 <GPS_Process+0x350>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d803      	bhi.n	80013ca <GPS_Process+0x296>
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <GPS_Process+0x2f8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
		}
		str3=strstr((char*)GPS.rxBuffer,"GNRMC,"); // GNRMC for where the speed is in the buffer
 80013ca:	492f      	ldr	r1, [pc, #188]	; (8001488 <GPS_Process+0x354>)
 80013cc:	4817      	ldr	r0, [pc, #92]	; (800142c <GPS_Process+0x2f8>)
 80013ce:	f012 fb02 	bl	80139d6 <strstr>
 80013d2:	6178      	str	r0, [r7, #20]
		if(str3!=NULL) {
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d066      	beq.n	80014a8 <GPS_Process+0x374>
			uint8_t speed[5];
			if (sscanf(str3,"GNRMC,%*f,%*c,%*f,%*c,%*f,%*c,%4s,",&speed) > 0) {
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	461a      	mov	r2, r3
 80013e0:	492a      	ldr	r1, [pc, #168]	; (800148c <GPS_Process+0x358>)
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f012 fa86 	bl	80138f4 <siscanf>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dd52      	ble.n	8001494 <GPS_Process+0x360>
				GPS.GPGGA.Speed_KTS = atof(speed);
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4618      	mov	r0, r3
 80013f4:	f011 fba8 	bl	8012b48 <atof>
 80013f8:	ec53 2b10 	vmov	r2, r3, d0
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fbf2 	bl	8000be8 <__aeabi_d2f>
 8001404:	4602      	mov	r2, r0
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <GPS_Process+0x2f8>)
 8001408:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800140c:	601a      	str	r2, [r3, #0]
				GPS.GPGGA.Speed_KMH = 1.852f * GPS.GPGGA.Speed_KTS; // conversion from knots to km/h
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <GPS_Process+0x2f8>)
 8001410:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001490 <GPS_Process+0x35c>
 800141c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <GPS_Process+0x2f8>)
 8001422:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8001426:	edc3 7a00 	vstr	s15, [r3]
 800142a:	e03d      	b.n	80014a8 <GPS_Process+0x374>
 800142c:	200008b0 	.word	0x200008b0
 8001430:	080183b0 	.word	0x080183b0
 8001434:	20000cb8 	.word	0x20000cb8
 8001438:	20000cf0 	.word	0x20000cf0
 800143c:	20000cec 	.word	0x20000cec
 8001440:	20000ce8 	.word	0x20000ce8
 8001444:	20000ce4 	.word	0x20000ce4
 8001448:	20000ce0 	.word	0x20000ce0
 800144c:	20000cd4 	.word	0x20000cd4
 8001450:	20000cd0 	.word	0x20000cd0
 8001454:	20000cc0 	.word	0x20000cc0
 8001458:	20000d10 	.word	0x20000d10
 800145c:	080183b8 	.word	0x080183b8
 8001460:	080183dc 	.word	0x080183dc
 8001464:	20000d16 	.word	0x20000d16
 8001468:	20000d15 	.word	0x20000d15
 800146c:	20000d14 	.word	0x20000d14
 8001470:	080183e4 	.word	0x080183e4
 8001474:	461c4000 	.word	0x461c4000
 8001478:	68db8bad 	.word	0x68db8bad
 800147c:	42c80000 	.word	0x42c80000
 8001480:	51eb851f 	.word	0x51eb851f
 8001484:	012c991f 	.word	0x012c991f
 8001488:	080183f8 	.word	0x080183f8
 800148c:	08018400 	.word	0x08018400
 8001490:	3fed0e56 	.word	0x3fed0e56
			}
			else {
				GPS.GPGGA.Speed_KTS = -1;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <GPS_Process+0x3a8>)
 8001496:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <GPS_Process+0x3ac>)
 800149c:	601a      	str	r2, [r3, #0]
				GPS.GPGGA.Speed_KMH = -1;
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <GPS_Process+0x3a8>)
 80014a0:	f203 4354 	addw	r3, r3, #1108	; 0x454
 80014a4:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <GPS_Process+0x3ac>)
 80014a6:	601a      	str	r2, [r3, #0]
			}
		}
	}
	memset(GPS.rxBuffer,0,sizeof(GPS.rxBuffer)); // resets rxBuffer
 80014a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ac:	2100      	movs	r1, #0
 80014ae:	480b      	ldr	r0, [pc, #44]	; (80014dc <GPS_Process+0x3a8>)
 80014b0:	f011 fb78 	bl	8012ba4 <memset>
	GPS.rxIndex=0;
 80014b4:	4b09      	ldr	r3, [pc, #36]	; (80014dc <GPS_Process+0x3a8>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	GPS.nmeaCounter=0;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <GPS_Process+0x3a8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	GPS.LastTime=HAL_GetTick();
 80014c4:	f004 fdda 	bl	800607c <HAL_GetTick>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <GPS_Process+0x3a8>)
 80014cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014da:	bf00      	nop
 80014dc:	200008b0 	.word	0x200008b0
 80014e0:	bf800000 	.word	0xbf800000

080014e4 <CalcCrc>:

SPS30_t SPS30;

//##################################################################################################################
// Calculating checksum. Function provided in SPS30 datasheet
uint8_t CalcCrc(uint8_t data[2]) {
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	uint8_t crc = 0xFF;
 80014ec:	23ff      	movs	r3, #255	; 0xff
 80014ee:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i < 2; i++) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	e020      	b.n	8001538 <CalcCrc+0x54>
	crc ^= data[i];
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	781a      	ldrb	r2, [r3, #0]
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	4053      	eors	r3, r2
 8001502:	75fb      	strb	r3, [r7, #23]
	for(uint8_t bit = 8; bit > 0; --bit) {
 8001504:	2308      	movs	r3, #8
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	e010      	b.n	800152c <CalcCrc+0x48>
	  if(crc & 0x80) {
 800150a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800150e:	2b00      	cmp	r3, #0
 8001510:	da06      	bge.n	8001520 <CalcCrc+0x3c>
	  crc = (crc << 1) ^ 0x31u;
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 800151c:	75fb      	strb	r3, [r7, #23]
 800151e:	e002      	b.n	8001526 <CalcCrc+0x42>
	  } else {
		crc = (crc << 1);
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	75fb      	strb	r3, [r7, #23]
	for(uint8_t bit = 8; bit > 0; --bit) {
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	3b01      	subs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1eb      	bne.n	800150a <CalcCrc+0x26>
	for(int i = 0; i < 2; i++) {
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	3301      	adds	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b01      	cmp	r3, #1
 800153c:	dddb      	ble.n	80014f6 <CalcCrc+0x12>
	   }
	 }
	}
	return crc;
 800153e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001540:	4618      	mov	r0, r3
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <SPS30_start_measurement>:

//##################################################################################################################
void SPS30_start_measurement(void){
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af02      	add	r7, sp, #8
	uint8_t arg[2] = {0x03, 0x00};
 8001552:	2303      	movs	r3, #3
 8001554:	81bb      	strh	r3, [r7, #12]
	uint8_t txBuf[5] = {0x00, 0x10, 0x03, 0x00, CalcCrc(arg)};
 8001556:	2300      	movs	r3, #0
 8001558:	713b      	strb	r3, [r7, #4]
 800155a:	2310      	movs	r3, #16
 800155c:	717b      	strb	r3, [r7, #5]
 800155e:	2303      	movs	r3, #3
 8001560:	71bb      	strb	r3, [r7, #6]
 8001562:	2300      	movs	r3, #0
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ffba 	bl	80014e4 <CalcCrc>
 8001570:	4603      	mov	r3, r0
 8001572:	723b      	strb	r3, [r7, #8]
	memset(&SPS30.spsData,0,sizeof(SPS30.spsData));
 8001574:	2228      	movs	r2, #40	; 0x28
 8001576:	2100      	movs	r1, #0
 8001578:	4808      	ldr	r0, [pc, #32]	; (800159c <SPS30_start_measurement+0x50>)
 800157a:	f011 fb13 	bl	8012ba4 <memset>
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 5, HAL_MAX_DELAY);
 800157e:	1d3a      	adds	r2, r7, #4
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2305      	movs	r3, #5
 8001588:	21d2      	movs	r1, #210	; 0xd2
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <SPS30_start_measurement+0x54>)
 800158c:	f006 f980 	bl	8007890 <HAL_I2C_Master_Transmit>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]

}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000d20 	.word	0x20000d20
 80015a0:	20000db0 	.word	0x20000db0

080015a4 <SPS30_read_data>:
	uint8_t txBuf[2] = {0x01, 0x04};
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);
}

//##################################################################################################################
uint8_t SPS30_read_data(){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b096      	sub	sp, #88	; 0x58
 80015a8:	af02      	add	r7, sp, #8
	uint8_t txBuf[2] = {0x03, 0x00};
 80015aa:	2303      	movs	r3, #3
 80015ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	uint8_t rxBuf[60];
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);
 80015b0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2302      	movs	r3, #2
 80015bc:	21d2      	movs	r1, #210	; 0xd2
 80015be:	483c      	ldr	r0, [pc, #240]	; (80016b0 <SPS30_read_data+0x10c>)
 80015c0:	f006 f966 	bl	8007890 <HAL_I2C_Master_Transmit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	status = HAL_I2C_Master_Receive(&_SPS30_I2C, (_SPS30_addr<<1), &rxBuf, sizeof(rxBuf), HAL_MAX_DELAY);
 80015ca:	f107 0208 	add.w	r2, r7, #8
 80015ce:	f04f 33ff 	mov.w	r3, #4294967295
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	233c      	movs	r3, #60	; 0x3c
 80015d6:	21d2      	movs	r1, #210	; 0xd2
 80015d8:	4835      	ldr	r0, [pc, #212]	; (80016b0 <SPS30_read_data+0x10c>)
 80015da:	f006 fa57 	bl	8007a8c <HAL_I2C_Master_Receive>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for (int i=0; i<10; i++) { // 60 register buffer with 6 registers per float value
 80015e4:	2300      	movs	r3, #0
 80015e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015e8:	e04b      	b.n	8001682 <SPS30_read_data+0xde>
		uint8_t b1 = rxBuf[i*6];
 80015ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80015f8:	4413      	add	r3, r2
 80015fa:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80015fe:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
		uint8_t b2 = rxBuf[i*6+1]; // rxBuf[i*6+2] is checksum byte
 8001602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	3301      	adds	r3, #1
 800160e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001612:	4413      	add	r3, r2
 8001614:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001618:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
		uint8_t b3 = rxBuf[i*6+3];
 800161c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800161e:	4613      	mov	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	3303      	adds	r3, #3
 8001628:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800162c:	4413      	add	r3, r2
 800162e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8001632:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		uint8_t b4 = rxBuf[i*6+4]; // rxBuf[i*6+5] is checksum byte
 8001636:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	3304      	adds	r3, #4
 8001642:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001646:	4413      	add	r3, r2
 8001648:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800164c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		uint32_t value = (b1<<24)|(b2<<16)|(b3<<8)|(b4<<0); // merge bytes in correct order
 8001650:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001654:	061a      	lsls	r2, r3, #24
 8001656:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800165a:	041b      	lsls	r3, r3, #16
 800165c:	431a      	orrs	r2, r3
 800165e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	431a      	orrs	r2, r3
 8001666:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800166a:	4313      	orrs	r3, r2
 800166c:	607b      	str	r3, [r7, #4]
		SPS30.spsData[i] = *(float*)&value; // convert to float
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4910      	ldr	r1, [pc, #64]	; (80016b4 <SPS30_read_data+0x110>)
 8001674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	601a      	str	r2, [r3, #0]
	for (int i=0; i<10; i++) { // 60 register buffer with 6 registers per float value
 800167c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800167e:	3301      	adds	r3, #1
 8001680:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001684:	2b09      	cmp	r3, #9
 8001686:	ddb0      	ble.n	80015ea <SPS30_read_data+0x46>
	}
	if (status == HAL_OK && SPS30.spsData[1] > 0.0f) return 1;
 8001688:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <SPS30_read_data+0x100>
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <SPS30_read_data+0x110>)
 8001692:	edd3 7a01 	vldr	s15, [r3, #4]
 8001696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169e:	dd01      	ble.n	80016a4 <SPS30_read_data+0x100>
 80016a0:	2301      	movs	r3, #1
 80016a2:	e000      	b.n	80016a6 <SPS30_read_data+0x102>
	return 0;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3750      	adds	r7, #80	; 0x50
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000db0 	.word	0x20000db0
 80016b4:	20000d20 	.word	0x20000d20

080016b8 <SPS30_clean_fan>:
	status = HAL_I2C_Master_Receive(&_SPS30_I2C, (_SPS30_addr<<1), &rxBuf, sizeof(rxBuf), HAL_MAX_DELAY);
	return rxBuf[1]; // 0x01 if data is ready, 0x00 if not
 }

//##################################################################################################################
void SPS30_clean_fan(void){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af02      	add	r7, sp, #8
	uint8_t txBuf[2] = {0x56, 0x07};
 80016be:	f240 7356 	movw	r3, #1878	; 0x756
 80016c2:	80bb      	strh	r3, [r7, #4]
 	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);
 80016c4:	1d3a      	adds	r2, r7, #4
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2302      	movs	r3, #2
 80016ce:	21d2      	movs	r1, #210	; 0xd2
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <SPS30_clean_fan+0x2c>)
 80016d2:	f006 f8dd 	bl	8007890 <HAL_I2C_Master_Transmit>
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000db0 	.word	0x20000db0

080016e8 <SPS30_read_serialnumber>:
 	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);

}

//##################################################################################################################
void SPS30_read_serialnumber(void){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b092      	sub	sp, #72	; 0x48
 80016ec:	af02      	add	r7, sp, #8
	uint8_t txBuf[2] = {0xD0, 0x33};
 80016ee:	f243 33d0 	movw	r3, #13264	; 0x33d0
 80016f2:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint8_t rxBuf[48];
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&_SPS30_I2C, (_SPS30_addr<<1), &txBuf, 2, HAL_MAX_DELAY);
 80016f4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2302      	movs	r3, #2
 8001700:	21d2      	movs	r1, #210	; 0xd2
 8001702:	4833      	ldr	r0, [pc, #204]	; (80017d0 <SPS30_read_serialnumber+0xe8>)
 8001704:	f006 f8c4 	bl	8007890 <HAL_I2C_Master_Transmit>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	status = HAL_I2C_Master_Receive(&_SPS30_I2C, (_SPS30_addr<<1), &rxBuf, sizeof(rxBuf), HAL_MAX_DELAY);
 800170e:	1d3a      	adds	r2, r7, #4
 8001710:	f04f 33ff 	mov.w	r3, #4294967295
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2330      	movs	r3, #48	; 0x30
 8001718:	21d2      	movs	r1, #210	; 0xd2
 800171a:	482d      	ldr	r0, [pc, #180]	; (80017d0 <SPS30_read_serialnumber+0xe8>)
 800171c:	f006 f9b6 	bl	8007a8c <HAL_I2C_Master_Receive>
 8001720:	4603      	mov	r3, r0
 8001722:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (status == HAL_ERROR) {
 8001726:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800172a:	2b01      	cmp	r3, #1
 800172c:	d104      	bne.n	8001738 <SPS30_read_serialnumber+0x50>
		sprintf(SPS30.serial, "AQ-SENSOR");
 800172e:	4929      	ldr	r1, [pc, #164]	; (80017d4 <SPS30_read_serialnumber+0xec>)
 8001730:	4829      	ldr	r0, [pc, #164]	; (80017d8 <SPS30_read_serialnumber+0xf0>)
 8001732:	f012 f8bf 	bl	80138b4 <siprintf>
		return;
 8001736:	e047      	b.n	80017c8 <SPS30_read_serialnumber+0xe0>
	}
	uint8_t k=0;
 8001738:	2300      	movs	r3, #0
 800173a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for (int i=0; i<sizeof(rxBuf); i++) { // every 3 bytes there is a checksum
 800173e:	2300      	movs	r3, #0
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
 8001742:	e03e      	b.n	80017c2 <SPS30_read_serialnumber+0xda>
		if (i%3==0) {
 8001744:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001746:	4b25      	ldr	r3, [pc, #148]	; (80017dc <SPS30_read_serialnumber+0xf4>)
 8001748:	fb83 3201 	smull	r3, r2, r3, r1
 800174c:	17cb      	asrs	r3, r1, #31
 800174e:	1ad2      	subs	r2, r2, r3
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	1aca      	subs	r2, r1, r3
 8001758:	2a00      	cmp	r2, #0
 800175a:	d11c      	bne.n	8001796 <SPS30_read_serialnumber+0xae>
			uint8_t arg[2] = {rxBuf[i],rxBuf[i+1]};
 800175c:	1d3a      	adds	r2, r7, #4
 800175e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	703b      	strb	r3, [r7, #0]
 8001766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001768:	3301      	adds	r3, #1
 800176a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800176e:	4413      	add	r3, r2
 8001770:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001774:	707b      	strb	r3, [r7, #1]
			if (CalcCrc(arg) != rxBuf[i+2])
 8001776:	463b      	mov	r3, r7
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff feb3 	bl	80014e4 <CalcCrc>
 800177e:	4603      	mov	r3, r0
 8001780:	461a      	mov	r2, r3
 8001782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001784:	3302      	adds	r3, #2
 8001786:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800178a:	440b      	add	r3, r1
 800178c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001790:	429a      	cmp	r2, r3
 8001792:	d013      	beq.n	80017bc <SPS30_read_serialnumber+0xd4>
				return 0;
 8001794:	e018      	b.n	80017c8 <SPS30_read_serialnumber+0xe0>
		} else {
		SPS30.serial[k] = rxBuf[i-1];
 8001796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001798:	1e5a      	subs	r2, r3, #1
 800179a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800179e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80017a2:	440a      	add	r2, r1
 80017a4:	f812 1c3c 	ldrb.w	r1, [r2, #-60]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <SPS30_read_serialnumber+0xf8>)
 80017aa:	4413      	add	r3, r2
 80017ac:	460a      	mov	r2, r1
 80017ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		k++;
 80017b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017b6:	3301      	adds	r3, #1
 80017b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for (int i=0; i<sizeof(rxBuf); i++) { // every 3 bytes there is a checksum
 80017bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017be:	3301      	adds	r3, #1
 80017c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80017c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c4:	2b2f      	cmp	r3, #47	; 0x2f
 80017c6:	d9bd      	bls.n	8001744 <SPS30_read_serialnumber+0x5c>
		}
	}
 }
 80017c8:	3740      	adds	r7, #64	; 0x40
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000db0 	.word	0x20000db0
 80017d4:	08018424 	.word	0x08018424
 80017d8:	20000d48 	.word	0x20000d48
 80017dc:	55555556 	.word	0x55555556
 80017e0:	20000d20 	.word	0x20000d20

080017e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ea:	463b      	mov	r3, r7
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <MX_ADC1_Init+0x98>)
 80017f8:	4a21      	ldr	r2, [pc, #132]	; (8001880 <MX_ADC1_Init+0x9c>)
 80017fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_ADC1_Init+0x98>)
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001802:	4b1e      	ldr	r3, [pc, #120]	; (800187c <MX_ADC1_Init+0x98>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001808:	4b1c      	ldr	r3, [pc, #112]	; (800187c <MX_ADC1_Init+0x98>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <MX_ADC1_Init+0x98>)
 8001810:	2200      	movs	r2, #0
 8001812:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <MX_ADC1_Init+0x98>)
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_ADC1_Init+0x98>)
 800181e:	2200      	movs	r2, #0
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_ADC1_Init+0x98>)
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <MX_ADC1_Init+0xa0>)
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_ADC1_Init+0x98>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_ADC1_Init+0x98>)
 8001830:	2201      	movs	r2, #1
 8001832:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001834:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_ADC1_Init+0x98>)
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_ADC1_Init+0x98>)
 800183e:	2201      	movs	r2, #1
 8001840:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <MX_ADC1_Init+0x98>)
 8001844:	f004 fc4a 	bl	80060dc <HAL_ADC_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800184e:	f001 fb95 	bl	8002f7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001856:	2301      	movs	r3, #1
 8001858:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800185e:	463b      	mov	r3, r7
 8001860:	4619      	mov	r1, r3
 8001862:	4806      	ldr	r0, [pc, #24]	; (800187c <MX_ADC1_Init+0x98>)
 8001864:	f004 fde8 	bl	8006438 <HAL_ADC_ConfigChannel>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800186e:	f001 fb85 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000d68 	.word	0x20000d68
 8001880:	40012000 	.word	0x40012000
 8001884:	0f000001 	.word	0x0f000001

08001888 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_ADC_MspInit+0x7c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d127      	bne.n	80018fa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a15      	ldr	r2, [pc, #84]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_ADC_MspInit+0x80>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80018e2:	2313      	movs	r3, #19
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e6:	2303      	movs	r3, #3
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <HAL_ADC_MspInit+0x84>)
 80018f6:	f005 fcd1 	bl	800729c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018fa:	bf00      	nop
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40012000 	.word	0x40012000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000

08001910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_DMA_Init+0x3c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a0b      	ldr	r2, [pc, #44]	; (800194c <MX_DMA_Init+0x3c>)
 8001920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_DMA_Init+0x3c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	203a      	movs	r0, #58	; 0x3a
 8001938:	f005 f877 	bl	8006a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800193c:	203a      	movs	r0, #58	; 0x3a
 800193e:	f005 f890 	bl	8006a62 <HAL_NVIC_EnableIRQ>

}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800

08001950 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <MX_GPIO_Init+0x138>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a46      	ldr	r2, [pc, #280]	; (8001a88 <MX_GPIO_Init+0x138>)
 8001970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <MX_GPIO_Init+0x138>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <MX_GPIO_Init+0x138>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a3f      	ldr	r2, [pc, #252]	; (8001a88 <MX_GPIO_Init+0x138>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <MX_GPIO_Init+0x138>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <MX_GPIO_Init+0x138>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a38      	ldr	r2, [pc, #224]	; (8001a88 <MX_GPIO_Init+0x138>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <MX_GPIO_Init+0x138>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b32      	ldr	r3, [pc, #200]	; (8001a88 <MX_GPIO_Init+0x138>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <MX_GPIO_Init+0x138>)
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <MX_GPIO_Init+0x138>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_NRST_GPIO_Port, GPS_NRST_Pin, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2120      	movs	r1, #32
 80019da:	482c      	ldr	r0, [pc, #176]	; (8001a8c <MX_GPIO_Init+0x13c>)
 80019dc:	f005 fdfa 	bl	80075d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NCS_GPIO_Port, SPI2_NCS_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e6:	482a      	ldr	r0, [pc, #168]	; (8001a90 <MX_GPIO_Init+0x140>)
 80019e8:	f005 fdf4 	bl	80075d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BT_RESET_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80019f2:	4828      	ldr	r0, [pc, #160]	; (8001a94 <MX_GPIO_Init+0x144>)
 80019f4:	f005 fdee 	bl	80075d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACC_INT_Pin;
 80019f8:	2304      	movs	r3, #4
 80019fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <MX_GPIO_Init+0x148>)
 80019fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4820      	ldr	r0, [pc, #128]	; (8001a8c <MX_GPIO_Init+0x13c>)
 8001a0c:	f005 fc46 	bl	800729c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8001a10:	2310      	movs	r3, #16
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	481a      	ldr	r0, [pc, #104]	; (8001a8c <MX_GPIO_Init+0x13c>)
 8001a24:	f005 fc3a 	bl	800729c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_NRST_Pin;
 8001a28:	2320      	movs	r3, #32
 8001a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_NRST_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4813      	ldr	r0, [pc, #76]	; (8001a8c <MX_GPIO_Init+0x13c>)
 8001a40:	f005 fc2c 	bl	800729c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NCS_Pin;
 8001a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NCS_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_GPIO_Init+0x140>)
 8001a5e:	f005 fc1d 	bl	800729c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BT_RESET_Pin|SD_CS_Pin;
 8001a62:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4806      	ldr	r0, [pc, #24]	; (8001a94 <MX_GPIO_Init+0x144>)
 8001a7c:	f005 fc0e 	bl	800729c <HAL_GPIO_Init>

}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020000 	.word	0x40020000
 8001a98:	10110000 	.word	0x10110000

08001a9c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aa2:	4a13      	ldr	r2, [pc, #76]	; (8001af0 <MX_I2C1_Init+0x54>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <MX_I2C1_Init+0x58>)
 8001aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_I2C1_Init+0x50>)
 8001aba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001abe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <MX_I2C1_Init+0x50>)
 8001ada:	f005 fd95 	bl	8007608 <HAL_I2C_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ae4:	f001 fa4a 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000e04 	.word	0x20000e04
 8001af0:	40005400 	.word	0x40005400
 8001af4:	000186a0 	.word	0x000186a0

08001af8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001afe:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <MX_I2C2_Init+0x54>)
 8001b00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b04:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <MX_I2C2_Init+0x58>)
 8001b06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b34:	4804      	ldr	r0, [pc, #16]	; (8001b48 <MX_I2C2_Init+0x50>)
 8001b36:	f005 fd67 	bl	8007608 <HAL_I2C_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b40:	f001 fa1c 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000db0 	.word	0x20000db0
 8001b4c:	40005800 	.word	0x40005800
 8001b50:	000186a0 	.word	0x000186a0

08001b54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	; 0x30
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a32      	ldr	r2, [pc, #200]	; (8001c3c <HAL_I2C_MspInit+0xe8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d12c      	bne.n	8001bd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a30      	ldr	r2, [pc, #192]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b2e      	ldr	r3, [pc, #184]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b92:	23c0      	movs	r3, #192	; 0xc0
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b96:	2312      	movs	r3, #18
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	4825      	ldr	r0, [pc, #148]	; (8001c44 <HAL_I2C_MspInit+0xf0>)
 8001bae:	f005 fb75 	bl	800729c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	4a21      	ldr	r2, [pc, #132]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001bce:	e031      	b.n	8001c34 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <HAL_I2C_MspInit+0xf4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12c      	bne.n	8001c34 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bf6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfc:	2312      	movs	r3, #18
 8001bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0c:	f107 031c 	add.w	r3, r7, #28
 8001c10:	4619      	mov	r1, r3
 8001c12:	480c      	ldr	r0, [pc, #48]	; (8001c44 <HAL_I2C_MspInit+0xf0>)
 8001c14:	f005 fb42 	bl	800729c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001c22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_I2C_MspInit+0xec>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	bf00      	nop
 8001c36:	3730      	adds	r7, #48	; 0x30
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40005400 	.word	0x40005400
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020400 	.word	0x40020400
 8001c48:	40005800 	.word	0x40005800

08001c4c <HAL_UART_RxCpltCallback>:
extern uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr);

static u8g2_t u8g2;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	GPS_CallBack();
 8001c54:	f7ff fa3a 	bl	80010cc <GPS_CallBack>
//	HAL_UART_Receive_DMA(&huart1, readBuf, 8);
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <screen_format>:

char * screen_format(int val) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
	if (val < 99 && val >= -9) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b62      	cmp	r3, #98	; 0x62
 8001c6c:	dc12      	bgt.n	8001c94 <screen_format+0x34>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f113 0f09 	cmn.w	r3, #9
 8001c74:	db0e      	blt.n	8001c94 <screen_format+0x34>
		if (val <= 9) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	dc05      	bgt.n	8001c88 <screen_format+0x28>
			sprintf(screen_str, " %d", val);
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	490a      	ldr	r1, [pc, #40]	; (8001ca8 <screen_format+0x48>)
 8001c80:	480a      	ldr	r0, [pc, #40]	; (8001cac <screen_format+0x4c>)
 8001c82:	f011 fe17 	bl	80138b4 <siprintf>
		if (val <= 9) {
 8001c86:	e00a      	b.n	8001c9e <screen_format+0x3e>
		} else {
			sprintf(screen_str, "%d", val);
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4909      	ldr	r1, [pc, #36]	; (8001cb0 <screen_format+0x50>)
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <screen_format+0x4c>)
 8001c8e:	f011 fe11 	bl	80138b4 <siprintf>
		if (val <= 9) {
 8001c92:	e004      	b.n	8001c9e <screen_format+0x3e>
		}

	} else {
		sprintf(screen_str, "%d", 99);
 8001c94:	2263      	movs	r2, #99	; 0x63
 8001c96:	4906      	ldr	r1, [pc, #24]	; (8001cb0 <screen_format+0x50>)
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <screen_format+0x4c>)
 8001c9a:	f011 fe0b 	bl	80138b4 <siprintf>
	}

	return screen_str;
 8001c9e:	4b03      	ldr	r3, [pc, #12]	; (8001cac <screen_format+0x4c>)
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	08018430 	.word	0x08018430
 8001cac:	200013a0 	.word	0x200013a0
 8001cb0:	08018434 	.word	0x08018434

08001cb4 <Linear>:

int Linear(int AQIhigh, int AQIlow, float Conchigh, float Conclow, float Conc) {
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6178      	str	r0, [r7, #20]
 8001cbc:	6139      	str	r1, [r7, #16]
 8001cbe:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cc2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cc6:	ed87 1a01 	vstr	s2, [r7, #4]
	return ((Conc-Conclow)/(Conchigh-Conclow))*(AQIhigh-AQIlow)+AQIlow;
 8001cca:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cce:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cd6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d0a:	ee17 3a90 	vmov	r3, s15
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	0000      	movs	r0, r0
 8001d1c:	0000      	movs	r0, r0
	...

08001d20 <AQIPM25>:


int AQIPM25(float c) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	ed87 0a01 	vstr	s0, [r7, #4]

	if (c>=0 && c<12.1)
 8001d2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	db16      	blt.n	8001d66 <AQIPM25+0x46>
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7fe fc05 	bl	8000548 <__aeabi_f2d>
 8001d3e:	a35a      	add	r3, pc, #360	; (adr r3, 8001ea8 <AQIPM25+0x188>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe feca 	bl	8000adc <__aeabi_dcmplt>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <AQIPM25+0x46>
	{
		return(Linear(50,0,12,0,c));
 8001d4e:	ed97 1a01 	vldr	s2, [r7, #4]
 8001d52:	eddf 0a57 	vldr	s1, [pc, #348]	; 8001eb0 <AQIPM25+0x190>
 8001d56:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2032      	movs	r0, #50	; 0x32
 8001d5e:	f7ff ffa9 	bl	8001cb4 <Linear>
 8001d62:	4603      	mov	r3, r0
 8001d64:	e09c      	b.n	8001ea0 <AQIPM25+0x180>
	}
	else if (c>=12.1 && c<35.5)
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe fbee 	bl	8000548 <__aeabi_f2d>
 8001d6c:	a34e      	add	r3, pc, #312	; (adr r3, 8001ea8 <AQIPM25+0x188>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fec7 	bl	8000b04 <__aeabi_dcmpge>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d014      	beq.n	8001da6 <AQIPM25+0x86>
 8001d7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d80:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001eb4 <AQIPM25+0x194>
 8001d84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8c:	d50b      	bpl.n	8001da6 <AQIPM25+0x86>
	{
		return(Linear(100,51,35.4,12.1,c));
 8001d8e:	ed97 1a01 	vldr	s2, [r7, #4]
 8001d92:	eddf 0a49 	vldr	s1, [pc, #292]	; 8001eb8 <AQIPM25+0x198>
 8001d96:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8001ebc <AQIPM25+0x19c>
 8001d9a:	2133      	movs	r1, #51	; 0x33
 8001d9c:	2064      	movs	r0, #100	; 0x64
 8001d9e:	f7ff ff89 	bl	8001cb4 <Linear>
 8001da2:	4603      	mov	r3, r0
 8001da4:	e07c      	b.n	8001ea0 <AQIPM25+0x180>
	}
	else if (c>=35.5 && c<55.5)
 8001da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001daa:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001eb4 <AQIPM25+0x194>
 8001dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db6:	db14      	blt.n	8001de2 <AQIPM25+0xc2>
 8001db8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dbc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001ec0 <AQIPM25+0x1a0>
 8001dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	d50b      	bpl.n	8001de2 <AQIPM25+0xc2>
	{
		return(Linear(150,101,55.4,35.5,c));
 8001dca:	ed97 1a01 	vldr	s2, [r7, #4]
 8001dce:	eddf 0a39 	vldr	s1, [pc, #228]	; 8001eb4 <AQIPM25+0x194>
 8001dd2:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001ec4 <AQIPM25+0x1a4>
 8001dd6:	2165      	movs	r1, #101	; 0x65
 8001dd8:	2096      	movs	r0, #150	; 0x96
 8001dda:	f7ff ff6b 	bl	8001cb4 <Linear>
 8001dde:	4603      	mov	r3, r0
 8001de0:	e05e      	b.n	8001ea0 <AQIPM25+0x180>
	}
	else if (c>=55.5 && c<150.5)
 8001de2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001ec0 <AQIPM25+0x1a0>
 8001dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	db14      	blt.n	8001e1e <AQIPM25+0xfe>
 8001df4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001df8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001ec8 <AQIPM25+0x1a8>
 8001dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	d50b      	bpl.n	8001e1e <AQIPM25+0xfe>
	{
		return(Linear(200,151,150.4,55.5,c));
 8001e06:	ed97 1a01 	vldr	s2, [r7, #4]
 8001e0a:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8001ec0 <AQIPM25+0x1a0>
 8001e0e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8001ecc <AQIPM25+0x1ac>
 8001e12:	2197      	movs	r1, #151	; 0x97
 8001e14:	20c8      	movs	r0, #200	; 0xc8
 8001e16:	f7ff ff4d 	bl	8001cb4 <Linear>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	e040      	b.n	8001ea0 <AQIPM25+0x180>
	}
	else if (c>=150.5 && c<250.5)
 8001e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e22:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001ec8 <AQIPM25+0x1a8>
 8001e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	db15      	blt.n	8001e5c <AQIPM25+0x13c>
 8001e30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e34:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001ed0 <AQIPM25+0x1b0>
 8001e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e40:	d50c      	bpl.n	8001e5c <AQIPM25+0x13c>
	{
		return(Linear(300,201,250.4,150.5,c));
 8001e42:	ed97 1a01 	vldr	s2, [r7, #4]
 8001e46:	eddf 0a20 	vldr	s1, [pc, #128]	; 8001ec8 <AQIPM25+0x1a8>
 8001e4a:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001ed4 <AQIPM25+0x1b4>
 8001e4e:	21c9      	movs	r1, #201	; 0xc9
 8001e50:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001e54:	f7ff ff2e 	bl	8001cb4 <Linear>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	e021      	b.n	8001ea0 <AQIPM25+0x180>
	}
	else if (c>=250.5 && c<500)
 8001e5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e60:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001ed0 <AQIPM25+0x1b0>
 8001e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6c:	db16      	blt.n	8001e9c <AQIPM25+0x17c>
 8001e6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e72:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001ed8 <AQIPM25+0x1b8>
 8001e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	d50d      	bpl.n	8001e9c <AQIPM25+0x17c>
	{
		return(Linear(500,301,500.4,250.5,c));
 8001e80:	ed97 1a01 	vldr	s2, [r7, #4]
 8001e84:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001ed0 <AQIPM25+0x1b0>
 8001e88:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001edc <AQIPM25+0x1bc>
 8001e8c:	f240 112d 	movw	r1, #301	; 0x12d
 8001e90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e94:	f7ff ff0e 	bl	8001cb4 <Linear>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	e001      	b.n	8001ea0 <AQIPM25+0x180>
	}
	else return 500;
 8001e9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	33333333 	.word	0x33333333
 8001eac:	40283333 	.word	0x40283333
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	420e0000 	.word	0x420e0000
 8001eb8:	4141999a 	.word	0x4141999a
 8001ebc:	420d999a 	.word	0x420d999a
 8001ec0:	425e0000 	.word	0x425e0000
 8001ec4:	425d999a 	.word	0x425d999a
 8001ec8:	43168000 	.word	0x43168000
 8001ecc:	43166666 	.word	0x43166666
 8001ed0:	437a8000 	.word	0x437a8000
 8001ed4:	437a6666 	.word	0x437a6666
 8001ed8:	43fa0000 	.word	0x43fa0000
 8001edc:	43fa3333 	.word	0x43fa3333

08001ee0 <gps_dots>:

void gps_dots(int gps_satellites, int fix) {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
	if (gps_satellites > 0) u8g2_DrawRBox(&u8g2, 126, 11, 2, 2, 1); // any fix = 1 bar
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	dd09      	ble.n	8001f04 <gps_dots+0x24>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2302      	movs	r3, #2
 8001efa:	220b      	movs	r2, #11
 8001efc:	217e      	movs	r1, #126	; 0x7e
 8001efe:	4817      	ldr	r0, [pc, #92]	; (8001f5c <gps_dots+0x7c>)
 8001f00:	f001 fe7a 	bl	8003bf8 <u8g2_DrawRBox>
	if (gps_satellites > 3) u8g2_DrawRBox(&u8g2, 123, 11, 2, 4, 1); // indoors I typically have 4-5 sats
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	dd09      	ble.n	8001f1e <gps_dots+0x3e>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	2304      	movs	r3, #4
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2302      	movs	r3, #2
 8001f14:	220b      	movs	r2, #11
 8001f16:	217b      	movs	r1, #123	; 0x7b
 8001f18:	4810      	ldr	r0, [pc, #64]	; (8001f5c <gps_dots+0x7c>)
 8001f1a:	f001 fe6d 	bl	8003bf8 <u8g2_DrawRBox>
	if (gps_satellites > 4) u8g2_DrawRBox(&u8g2, 120, 11, 2, 6, 1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	dd09      	ble.n	8001f38 <gps_dots+0x58>
 8001f24:	2301      	movs	r3, #1
 8001f26:	9301      	str	r3, [sp, #4]
 8001f28:	2306      	movs	r3, #6
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	220b      	movs	r2, #11
 8001f30:	2178      	movs	r1, #120	; 0x78
 8001f32:	480a      	ldr	r0, [pc, #40]	; (8001f5c <gps_dots+0x7c>)
 8001f34:	f001 fe60 	bl	8003bf8 <u8g2_DrawRBox>
	if (gps_satellites > 5) u8g2_DrawRBox(&u8g2, 117, 11, 2, 8, 1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	dd09      	ble.n	8001f52 <gps_dots+0x72>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	2308      	movs	r3, #8
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2302      	movs	r3, #2
 8001f48:	220b      	movs	r2, #11
 8001f4a:	2175      	movs	r1, #117	; 0x75
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <gps_dots+0x7c>)
 8001f4e:	f001 fe53 	bl	8003bf8 <u8g2_DrawRBox>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000039c 	.word	0x2000039c

08001f60 <battery_dots_vert>:

void battery_dots_vert(float voltage) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	ed87 0a01 	vstr	s0, [r7, #4]
    if (voltage < 3.2) // then battery has ~30min remaining
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe faec 	bl	8000548 <__aeabi_f2d>
 8001f70:	a349      	add	r3, pc, #292	; (adr r3, 8002098 <battery_dots_vert+0x138>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fdb1 	bl	8000adc <__aeabi_dcmplt>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <battery_dots_vert+0x2e>
		if (counter%2 == 0) return;
 8001f80:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <battery_dots_vert+0x160>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d07d      	beq.n	800208a <battery_dots_vert+0x12a>
    u8g2_DrawRFrame(&u8g2, 117-0, 0, 11, 8, 1);
 8001f8e:	2301      	movs	r3, #1
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	2308      	movs	r3, #8
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	230b      	movs	r3, #11
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2175      	movs	r1, #117	; 0x75
 8001f9c:	4849      	ldr	r0, [pc, #292]	; (80020c4 <battery_dots_vert+0x164>)
 8001f9e:	f001 fedb 	bl	8003d58 <u8g2_DrawRFrame>
    u8g2_DrawRBox(&u8g2, 116-0, 3, 2, 2, 1);
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2302      	movs	r3, #2
 8001fac:	2203      	movs	r2, #3
 8001fae:	2174      	movs	r1, #116	; 0x74
 8001fb0:	4844      	ldr	r0, [pc, #272]	; (80020c4 <battery_dots_vert+0x164>)
 8001fb2:	f001 fe21 	bl	8003bf8 <u8g2_DrawRBox>
	if (voltage > 3.2) u8g2_DrawRBox(&u8g2, 127-0, 2, 2, 4, 1); // -62
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7fe fac6 	bl	8000548 <__aeabi_f2d>
 8001fbc:	a336      	add	r3, pc, #216	; (adr r3, 8002098 <battery_dots_vert+0x138>)
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	f7fe fda9 	bl	8000b18 <__aeabi_dcmpgt>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d009      	beq.n	8001fe0 <battery_dots_vert+0x80>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	217f      	movs	r1, #127	; 0x7f
 8001fda:	483a      	ldr	r0, [pc, #232]	; (80020c4 <battery_dots_vert+0x164>)
 8001fdc:	f001 fe0c 	bl	8003bf8 <u8g2_DrawRBox>
	if (voltage > 3.35) u8g2_DrawRBox(&u8g2, 125-0, 2, 2, 4, 1);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7fe fab1 	bl	8000548 <__aeabi_f2d>
 8001fe6:	a32e      	add	r3, pc, #184	; (adr r3, 80020a0 <battery_dots_vert+0x140>)
 8001fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fec:	f7fe fd94 	bl	8000b18 <__aeabi_dcmpgt>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <battery_dots_vert+0xaa>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2302      	movs	r3, #2
 8002000:	2202      	movs	r2, #2
 8002002:	217d      	movs	r1, #125	; 0x7d
 8002004:	482f      	ldr	r0, [pc, #188]	; (80020c4 <battery_dots_vert+0x164>)
 8002006:	f001 fdf7 	bl	8003bf8 <u8g2_DrawRBox>
	if (voltage > 3.45) u8g2_DrawRBox(&u8g2, 123-0, 2, 2, 4, 1);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7fe fa9c 	bl	8000548 <__aeabi_f2d>
 8002010:	a325      	add	r3, pc, #148	; (adr r3, 80020a8 <battery_dots_vert+0x148>)
 8002012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002016:	f7fe fd7f 	bl	8000b18 <__aeabi_dcmpgt>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <battery_dots_vert+0xd4>
 8002020:	2301      	movs	r3, #1
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2304      	movs	r3, #4
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2302      	movs	r3, #2
 800202a:	2202      	movs	r2, #2
 800202c:	217b      	movs	r1, #123	; 0x7b
 800202e:	4825      	ldr	r0, [pc, #148]	; (80020c4 <battery_dots_vert+0x164>)
 8002030:	f001 fde2 	bl	8003bf8 <u8g2_DrawRBox>
	if (voltage > 3.55) u8g2_DrawRBox(&u8g2, 121-0, 2, 2, 4, 1);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7fe fa87 	bl	8000548 <__aeabi_f2d>
 800203a:	a31d      	add	r3, pc, #116	; (adr r3, 80020b0 <battery_dots_vert+0x150>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fd6a 	bl	8000b18 <__aeabi_dcmpgt>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <battery_dots_vert+0xfe>
 800204a:	2301      	movs	r3, #1
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	2304      	movs	r3, #4
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2302      	movs	r3, #2
 8002054:	2202      	movs	r2, #2
 8002056:	2179      	movs	r1, #121	; 0x79
 8002058:	481a      	ldr	r0, [pc, #104]	; (80020c4 <battery_dots_vert+0x164>)
 800205a:	f001 fdcd 	bl	8003bf8 <u8g2_DrawRBox>
	if (voltage > 3.65) u8g2_DrawRBox(&u8g2, 119-0, 2, 2, 4, 1);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7fe fa72 	bl	8000548 <__aeabi_f2d>
 8002064:	a314      	add	r3, pc, #80	; (adr r3, 80020b8 <battery_dots_vert+0x158>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	f7fe fd55 	bl	8000b18 <__aeabi_dcmpgt>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00b      	beq.n	800208c <battery_dots_vert+0x12c>
 8002074:	2301      	movs	r3, #1
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	2304      	movs	r3, #4
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	2302      	movs	r3, #2
 800207e:	2202      	movs	r2, #2
 8002080:	2177      	movs	r1, #119	; 0x77
 8002082:	4810      	ldr	r0, [pc, #64]	; (80020c4 <battery_dots_vert+0x164>)
 8002084:	f001 fdb8 	bl	8003bf8 <u8g2_DrawRBox>
 8002088:	e000      	b.n	800208c <battery_dots_vert+0x12c>
		if (counter%2 == 0) return;
 800208a:	bf00      	nop
}
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	f3af 8000 	nop.w
 8002098:	9999999a 	.word	0x9999999a
 800209c:	40099999 	.word	0x40099999
 80020a0:	cccccccd 	.word	0xcccccccd
 80020a4:	400acccc 	.word	0x400acccc
 80020a8:	9999999a 	.word	0x9999999a
 80020ac:	400b9999 	.word	0x400b9999
 80020b0:	66666666 	.word	0x66666666
 80020b4:	400c6666 	.word	0x400c6666
 80020b8:	33333333 	.word	0x33333333
 80020bc:	400d3333 	.word	0x400d3333
 80020c0:	20000394 	.word	0x20000394
 80020c4:	2000039c 	.word	0x2000039c

080020c8 <initDisplay>:

void initDisplay() {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0

	  /* I2C Interface */
	  u8g2_Setup_ssd1306_i2c_128x32_univision_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_i2c, u8x8_stm32_gpio_and_delay);
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <initDisplay+0x2c>)
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <initDisplay+0x30>)
 80020d0:	490a      	ldr	r1, [pc, #40]	; (80020fc <initDisplay+0x34>)
 80020d2:	480b      	ldr	r0, [pc, #44]	; (8002100 <initDisplay+0x38>)
 80020d4:	f002 fa12 	bl	80044fc <u8g2_Setup_ssd1306_i2c_128x32_univision_f>
//	  u8g2_setBusClock

	  /* Initialize Display */
	  u8g2_InitDisplay(&u8g2);
 80020d8:	4809      	ldr	r0, [pc, #36]	; (8002100 <initDisplay+0x38>)
 80020da:	f003 fe9d 	bl	8005e18 <u8x8_InitDisplay>
	  u8g2_SetPowerSave(&u8g2, 0);
 80020de:	2100      	movs	r1, #0
 80020e0:	4807      	ldr	r0, [pc, #28]	; (8002100 <initDisplay+0x38>)
 80020e2:	f003 fea8 	bl	8005e36 <u8x8_SetPowerSave>
	  u8g2_SetFontDirection(&u8g2, 2);
 80020e6:	2102      	movs	r1, #2
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <initDisplay+0x38>)
 80020ea:	f002 ffb7 	bl	800505c <u8g2_SetFontDirection>

}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	08003879 	.word	0x08003879
 80020f8:	080038ad 	.word	0x080038ad
 80020fc:	08019f98 	.word	0x08019f98
 8002100:	2000039c 	.word	0x2000039c

08002104 <updateDisplay>:

void updateDisplay() {
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	; 0x30
 8002108:	af02      	add	r7, sp, #8

	  float pm25 = SPS30.spsData[1];
 800210a:	4b88      	ldr	r3, [pc, #544]	; (800232c <updateDisplay+0x228>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
	  char screen_str[16];

	  float aqi = AQIPM25(pm25);
 8002110:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002114:	f7ff fe04 	bl	8001d20 <AQIPM25>
 8002118:	ee07 0a90 	vmov	s15, r0
 800211c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002120:	edc7 7a08 	vstr	s15, [r7, #32]
	  int barwidth = (128-55);
 8002124:	2349      	movs	r3, #73	; 0x49
 8002126:	61fb      	str	r3, [r7, #28]
	  int aqi_width = barwidth*aqi/500. +2;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002132:	edd7 7a08 	vldr	s15, [r7, #32]
 8002136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213a:	ee17 0a90 	vmov	r0, s15
 800213e:	f7fe fa03 	bl	8000548 <__aeabi_f2d>
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	4b7a      	ldr	r3, [pc, #488]	; (8002330 <updateDisplay+0x22c>)
 8002148:	f7fe fb80 	bl	800084c <__aeabi_ddiv>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800215c:	f7fe f896 	bl	800028c <__adddf3>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fcf6 	bl	8000b58 <__aeabi_d2iz>
 800216c:	4603      	mov	r3, r0
 800216e:	61bb      	str	r3, [r7, #24]

	  int gps_satellites = GPS.GPGGA.SatellitesUsed;
 8002170:	4b70      	ldr	r3, [pc, #448]	; (8002334 <updateDisplay+0x230>)
 8002172:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8002176:	617b      	str	r3, [r7, #20]

	  float vbat = batteryVoltage;
 8002178:	4b6f      	ldr	r3, [pc, #444]	; (8002338 <updateDisplay+0x234>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	613b      	str	r3, [r7, #16]

	  u8g2_FirstPage(&u8g2);
 800217e:	486f      	ldr	r0, [pc, #444]	; (800233c <updateDisplay+0x238>)
 8002180:	f001 ff2a 	bl	8003fd8 <u8g2_FirstPage>
	  		do
	  		{
	  			u8g2_ClearBuffer(&u8g2);
 8002184:	486d      	ldr	r0, [pc, #436]	; (800233c <updateDisplay+0x238>)
 8002186:	f001 fe9c 	bl	8003ec2 <u8g2_ClearBuffer>

	  			// numbers
	  	  u8g2_SetFont(&u8g2, u8g2_font_logisoso30_tn);
 800218a:	496d      	ldr	r1, [pc, #436]	; (8002340 <updateDisplay+0x23c>)
 800218c:	486b      	ldr	r0, [pc, #428]	; (800233c <updateDisplay+0x238>)
 800218e:	f002 ff4b 	bl	8005028 <u8g2_SetFont>
          u8g2_DrawStr(&u8g2, 50, 0, screen_format((int)pm25));
 8002192:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800219a:	ee17 0a90 	vmov	r0, s15
 800219e:	f7ff fd5f 	bl	8001c60 <screen_format>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2200      	movs	r2, #0
 80021a6:	2132      	movs	r1, #50	; 0x32
 80021a8:	4864      	ldr	r0, [pc, #400]	; (800233c <updateDisplay+0x238>)
 80021aa:	f002 fe9b 	bl	8004ee4 <u8g2_DrawStr>
          u8g2_SetFont(&u8g2, u8g2_font_logisoso16_tn);
 80021ae:	4965      	ldr	r1, [pc, #404]	; (8002344 <updateDisplay+0x240>)
 80021b0:	4862      	ldr	r0, [pc, #392]	; (800233c <updateDisplay+0x238>)
 80021b2:	f002 ff39 	bl	8005028 <u8g2_SetFont>
          if (pm25<100) sprintf(screen_str, ".%d", (int)(pm25*10)%10);
 80021b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021ba:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002348 <updateDisplay+0x244>
 80021be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	d51a      	bpl.n	80021fe <updateDisplay+0xfa>
 80021c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80021d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021d8:	ee17 1a90 	vmov	r1, s15
 80021dc:	4b5b      	ldr	r3, [pc, #364]	; (800234c <updateDisplay+0x248>)
 80021de:	fb83 2301 	smull	r2, r3, r3, r1
 80021e2:	109a      	asrs	r2, r3, #2
 80021e4:	17cb      	asrs	r3, r1, #31
 80021e6:	1ad2      	subs	r2, r2, r3
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	1aca      	subs	r2, r1, r3
 80021f2:	463b      	mov	r3, r7
 80021f4:	4956      	ldr	r1, [pc, #344]	; (8002350 <updateDisplay+0x24c>)
 80021f6:	4618      	mov	r0, r3
 80021f8:	f011 fb5c 	bl	80138b4 <siprintf>
 80021fc:	e005      	b.n	800220a <updateDisplay+0x106>
          else sprintf(screen_str, ".%d", 9);
 80021fe:	463b      	mov	r3, r7
 8002200:	2209      	movs	r2, #9
 8002202:	4953      	ldr	r1, [pc, #332]	; (8002350 <updateDisplay+0x24c>)
 8002204:	4618      	mov	r0, r3
 8002206:	f011 fb55 	bl	80138b4 <siprintf>
          u8g2_DrawStr(&u8g2, 14, 14, screen_str);
 800220a:	463b      	mov	r3, r7
 800220c:	220e      	movs	r2, #14
 800220e:	210e      	movs	r1, #14
 8002210:	484a      	ldr	r0, [pc, #296]	; (800233c <updateDisplay+0x238>)
 8002212:	f002 fe67 	bl	8004ee4 <u8g2_DrawStr>
          if (noSD == 1) {
 8002216:	4b4f      	ldr	r3, [pc, #316]	; (8002354 <updateDisplay+0x250>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d111      	bne.n	8002242 <updateDisplay+0x13e>
        	  u8g2_SetFont(&u8g2, u8g2_font_profont17_tf);
 800221e:	494e      	ldr	r1, [pc, #312]	; (8002358 <updateDisplay+0x254>)
 8002220:	4846      	ldr	r0, [pc, #280]	; (800233c <updateDisplay+0x238>)
 8002222:	f002 ff01 	bl	8005028 <u8g2_SetFont>
        	  if (counter%2 == 0) u8g2_DrawStr(&u8g2, 128-24+0, 0, "No SD");
 8002226:	4b4d      	ldr	r3, [pc, #308]	; (800235c <updateDisplay+0x258>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d140      	bne.n	80022b6 <updateDisplay+0x1b2>
 8002234:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <updateDisplay+0x25c>)
 8002236:	2200      	movs	r2, #0
 8002238:	2168      	movs	r1, #104	; 0x68
 800223a:	4840      	ldr	r0, [pc, #256]	; (800233c <updateDisplay+0x238>)
 800223c:	f002 fe52 	bl	8004ee4 <u8g2_DrawStr>
 8002240:	e039      	b.n	80022b6 <updateDisplay+0x1b2>
          }
          else { /* we compensate for the board temperature heating by offsetting the shown value by -4C */
              u8g2_SetFont(&u8g2, u8g2_font_logisoso18_tn);
 8002242:	4948      	ldr	r1, [pc, #288]	; (8002364 <updateDisplay+0x260>)
 8002244:	483d      	ldr	r0, [pc, #244]	; (800233c <updateDisplay+0x238>)
 8002246:	f002 feef 	bl	8005028 <u8g2_SetFont>
        	  u8g2_DrawStr(&u8g2, 128-50+0, 0, screen_format(round(comp_rh))); // GPS.GPGGA.UTC_Min
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <updateDisplay+0x264>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f97a 	bl	8000548 <__aeabi_f2d>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	ec43 2b10 	vmov	d0, r2, r3
 800225c:	f015 fd30 	bl	8017cc0 <round>
 8002260:	ec53 2b10 	vmov	r2, r3, d0
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f7fe fc76 	bl	8000b58 <__aeabi_d2iz>
 800226c:	4603      	mov	r3, r0
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fcf6 	bl	8001c60 <screen_format>
 8002274:	4603      	mov	r3, r0
 8002276:	2200      	movs	r2, #0
 8002278:	214e      	movs	r1, #78	; 0x4e
 800227a:	4830      	ldr	r0, [pc, #192]	; (800233c <updateDisplay+0x238>)
 800227c:	f002 fe32 	bl	8004ee4 <u8g2_DrawStr>
        	  u8g2_DrawStr(&u8g2, 128-20+0, 0, screen_format(round(comp_t))); // GPS.GPGGA.UTC_Hour
 8002280:	4b3a      	ldr	r3, [pc, #232]	; (800236c <updateDisplay+0x268>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f95f 	bl	8000548 <__aeabi_f2d>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	ec43 2b10 	vmov	d0, r2, r3
 8002292:	f015 fd15 	bl	8017cc0 <round>
 8002296:	ec53 2b10 	vmov	r2, r3, d0
 800229a:	4610      	mov	r0, r2
 800229c:	4619      	mov	r1, r3
 800229e:	f7fe fc5b 	bl	8000b58 <__aeabi_d2iz>
 80022a2:	4603      	mov	r3, r0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fcdb 	bl	8001c60 <screen_format>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2200      	movs	r2, #0
 80022ae:	216c      	movs	r1, #108	; 0x6c
 80022b0:	4822      	ldr	r0, [pc, #136]	; (800233c <updateDisplay+0x238>)
 80022b2:	f002 fe17 	bl	8004ee4 <u8g2_DrawStr>
          }
          u8g2_SetFont(&u8g2, u8g2_font_profont10_tf);
 80022b6:	492e      	ldr	r1, [pc, #184]	; (8002370 <updateDisplay+0x26c>)
 80022b8:	4820      	ldr	r0, [pc, #128]	; (800233c <updateDisplay+0x238>)
 80022ba:	f002 feb5 	bl	8005028 <u8g2_SetFont>

          // gps
          gps_dots(gps_satellites, GPS.GPGGA.PositionFixIndicator);
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <updateDisplay+0x230>)
 80022c0:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 80022c4:	4619      	mov	r1, r3
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f7ff fe0a 	bl	8001ee0 <gps_dots>

          // battery
          battery_dots_vert(vbat);
 80022cc:	ed97 0a04 	vldr	s0, [r7, #16]
 80022d0:	f7ff fe46 	bl	8001f60 <battery_dots_vert>

          // air quality indicator
          u8g2_DrawRFrame(&u8g2, 128-barwidth, 27, barwidth, 7, 1);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	b2d9      	uxtb	r1, r3
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2201      	movs	r2, #1
 80022e6:	9201      	str	r2, [sp, #4]
 80022e8:	2207      	movs	r2, #7
 80022ea:	9200      	str	r2, [sp, #0]
 80022ec:	221b      	movs	r2, #27
 80022ee:	4813      	ldr	r0, [pc, #76]	; (800233c <updateDisplay+0x238>)
 80022f0:	f001 fd32 	bl	8003d58 <u8g2_DrawRFrame>
          u8g2_DrawRBox(&u8g2, 128-aqi_width, 27, aqi_width, 5, 1);
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	b2d9      	uxtb	r1, r3
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2201      	movs	r2, #1
 8002306:	9201      	str	r2, [sp, #4]
 8002308:	2205      	movs	r2, #5
 800230a:	9200      	str	r2, [sp, #0]
 800230c:	221b      	movs	r2, #27
 800230e:	480b      	ldr	r0, [pc, #44]	; (800233c <updateDisplay+0x238>)
 8002310:	f001 fc72 	bl	8003bf8 <u8g2_DrawRBox>

	  		} while (u8g2_NextPage(&u8g2));
 8002314:	4809      	ldr	r0, [pc, #36]	; (800233c <updateDisplay+0x238>)
 8002316:	f001 fe73 	bl	8004000 <u8g2_NextPage>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	f47f af31 	bne.w	8002184 <updateDisplay+0x80>
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	3728      	adds	r7, #40	; 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000d20 	.word	0x20000d20
 8002330:	407f4000 	.word	0x407f4000
 8002334:	200008b0 	.word	0x200008b0
 8002338:	200012e0 	.word	0x200012e0
 800233c:	2000039c 	.word	0x2000039c
 8002340:	08019db8 	.word	0x08019db8
 8002344:	08019b48 	.word	0x08019b48
 8002348:	42c80000 	.word	0x42c80000
 800234c:	66666667 	.word	0x66666667
 8002350:	08018438 	.word	0x08018438
 8002354:	20000000 	.word	0x20000000
 8002358:	08018ec0 	.word	0x08018ec0
 800235c:	20000394 	.word	0x20000394
 8002360:	0801843c 	.word	0x0801843c
 8002364:	08019c68 	.word	0x08019c68
 8002368:	200012d0 	.word	0x200012d0
 800236c:	20000e5c 	.word	0x20000e5c
 8002370:	080186e8 	.word	0x080186e8

08002374 <welcomeDisplay>:

void welcomeDisplay() {
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0

	u8g2_FirstPage(&u8g2);
 8002378:	4811      	ldr	r0, [pc, #68]	; (80023c0 <welcomeDisplay+0x4c>)
 800237a:	f001 fe2d 	bl	8003fd8 <u8g2_FirstPage>
	do
	{
		u8g2_ClearBuffer(&u8g2);
 800237e:	4810      	ldr	r0, [pc, #64]	; (80023c0 <welcomeDisplay+0x4c>)
 8002380:	f001 fd9f 	bl	8003ec2 <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_profont17_tf);
 8002384:	490f      	ldr	r1, [pc, #60]	; (80023c4 <welcomeDisplay+0x50>)
 8002386:	480e      	ldr	r0, [pc, #56]	; (80023c0 <welcomeDisplay+0x4c>)
 8002388:	f002 fe4e 	bl	8005028 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 127, 20, "open-seneca");
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <welcomeDisplay+0x54>)
 800238e:	2214      	movs	r2, #20
 8002390:	217f      	movs	r1, #127	; 0x7f
 8002392:	480b      	ldr	r0, [pc, #44]	; (80023c0 <welcomeDisplay+0x4c>)
 8002394:	f002 fda6 	bl	8004ee4 <u8g2_DrawStr>
		u8g2_SetFont(&u8g2, u8g2_font_profont10_tf);
 8002398:	490c      	ldr	r1, [pc, #48]	; (80023cc <welcomeDisplay+0x58>)
 800239a:	4809      	ldr	r0, [pc, #36]	; (80023c0 <welcomeDisplay+0x4c>)
 800239c:	f002 fe44 	bl	8005028 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 127, 4, "air quality sensor ...");
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <welcomeDisplay+0x5c>)
 80023a2:	2204      	movs	r2, #4
 80023a4:	217f      	movs	r1, #127	; 0x7f
 80023a6:	4806      	ldr	r0, [pc, #24]	; (80023c0 <welcomeDisplay+0x4c>)
 80023a8:	f002 fd9c 	bl	8004ee4 <u8g2_DrawStr>
	} while (u8g2_NextPage(&u8g2));
 80023ac:	4804      	ldr	r0, [pc, #16]	; (80023c0 <welcomeDisplay+0x4c>)
 80023ae:	f001 fe27 	bl	8004000 <u8g2_NextPage>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e2      	bne.n	800237e <welcomeDisplay+0xa>

}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000039c 	.word	0x2000039c
 80023c4:	08018ec0 	.word	0x08018ec0
 80023c8:	08018444 	.word	0x08018444
 80023cc:	080186e8 	.word	0x080186e8
 80023d0:	08018450 	.word	0x08018450

080023d4 <SHTC3_read_data>:
	u8g2_NextPage(&u8g2);
	HAL_Delay(1000);

}

int SHTC3_read_data() { // for sht21
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af02      	add	r7, sp, #8

	  /* Clock stretching enabled, read T first */
	  uint8_t txBuf[2] = {0x7C, 0xA2};
 80023da:	f24a 237c 	movw	r3, #41596	; 0xa27c
 80023de:	813b      	strh	r3, [r7, #8]
	  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, (0x70<<1), &txBuf, 2, HAL_MAX_DELAY);
 80023e0:	f107 0208 	add.w	r2, r7, #8
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2302      	movs	r3, #2
 80023ec:	21e0      	movs	r1, #224	; 0xe0
 80023ee:	482c      	ldr	r0, [pc, #176]	; (80024a0 <SHTC3_read_data+0xcc>)
 80023f0:	f005 fa4e 	bl	8007890 <HAL_I2C_Master_Transmit>
 80023f4:	4603      	mov	r3, r0
 80023f6:	73fb      	strb	r3, [r7, #15]


	  if (status != HAL_OK) {
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <SHTC3_read_data+0x30>
		  return -1;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	e049      	b.n	8002498 <SHTC3_read_data+0xc4>
	  }

	  /* Read both t and rh */
	  uint8_t rxBuf[6];

	  status = HAL_I2C_Master_Receive(&hi2c1, (0x70 << 1), (uint8_t *) rxBuf, 6, HAL_MAX_DELAY);
 8002404:	463a      	mov	r2, r7
 8002406:	f04f 33ff 	mov.w	r3, #4294967295
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2306      	movs	r3, #6
 800240e:	21e0      	movs	r1, #224	; 0xe0
 8002410:	4823      	ldr	r0, [pc, #140]	; (80024a0 <SHTC3_read_data+0xcc>)
 8002412:	f005 fb3b 	bl	8007a8c <HAL_I2C_Master_Receive>
 8002416:	4603      	mov	r3, r0
 8002418:	73fb      	strb	r3, [r7, #15]

	  if (status != HAL_OK) {
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <SHTC3_read_data+0x52>
		  return -1;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
 8002424:	e038      	b.n	8002498 <SHTC3_read_data+0xc4>
	  }

	  /* Test checksum with first 2 bytes */
	  if (CalcCrc(rxBuf) != rxBuf[2]) return -1;
 8002426:	463b      	mov	r3, r7
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff f85b 	bl	80014e4 <CalcCrc>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	78bb      	ldrb	r3, [r7, #2]
 8002434:	429a      	cmp	r2, r3
 8002436:	d002      	beq.n	800243e <SHTC3_read_data+0x6a>
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	e02c      	b.n	8002498 <SHTC3_read_data+0xc4>

	  uint16_t val = (int16_t) ((rxBuf[0] << 8) | rxBuf[1]);
 800243e:	783b      	ldrb	r3, [r7, #0]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	b21a      	sxth	r2, r3
 8002444:	787b      	ldrb	r3, [r7, #1]
 8002446:	b21b      	sxth	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	b21b      	sxth	r3, r3
 800244c:	81bb      	strh	r3, [r7, #12]
	  temp = 0.00267028808f * val - 45.0f;
 800244e:	89bb      	ldrh	r3, [r7, #12]
 8002450:	ee07 3a90 	vmov	s15, r3
 8002454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002458:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80024a4 <SHTC3_read_data+0xd0>
 800245c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002460:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80024a8 <SHTC3_read_data+0xd4>
 8002464:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <SHTC3_read_data+0xd8>)
 800246a:	edc3 7a00 	vstr	s15, [r3]

	  val = (int16_t) ((rxBuf[3] << 8) | rxBuf[4]);
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	b21a      	sxth	r2, r3
 8002474:	793b      	ldrb	r3, [r7, #4]
 8002476:	b21b      	sxth	r3, r3
 8002478:	4313      	orrs	r3, r2
 800247a:	b21b      	sxth	r3, r3
 800247c:	81bb      	strh	r3, [r7, #12]

	  rh = 0.0015258789f * val;
 800247e:	89bb      	ldrh	r3, [r7, #12]
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002488:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80024b0 <SHTC3_read_data+0xdc>
 800248c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <SHTC3_read_data+0xe0>)
 8002492:	edc3 7a00 	vstr	s15, [r3]

	  return 1;
 8002496:	2301      	movs	r3, #1

}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000e04 	.word	0x20000e04
 80024a4:	3b2f0000 	.word	0x3b2f0000
 80024a8:	42340000 	.word	0x42340000
 80024ac:	20000e58 	.word	0x20000e58
 80024b0:	3ac80000 	.word	0x3ac80000
 80024b4:	200013b0 	.word	0x200013b0

080024b8 <compensateRH>:

float compensateRH(float RH_sensor, float T_sensor, float dT) {
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0
 80024be:	ed87 0a03 	vstr	s0, [r7, #12]
 80024c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80024c6:	ed87 1a01 	vstr	s2, [r7, #4]
	float c1 = 17.62;
 80024ca:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <compensateRH+0xe8>)
 80024cc:	61fb      	str	r3, [r7, #28]
	float c2 = 243.12;
 80024ce:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <compensateRH+0xec>)
 80024d0:	61bb      	str	r3, [r7, #24]
	float c3 = 275.15;
 80024d2:	4b35      	ldr	r3, [pc, #212]	; (80025a8 <compensateRH+0xf0>)
 80024d4:	617b      	str	r3, [r7, #20]

	float T_real = T_sensor + dT;
 80024d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80024da:	edd7 7a01 	vldr	s15, [r7, #4]
 80024de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e2:	edc7 7a04 	vstr	s15, [r7, #16]

	return ((c3 + T_real) * RH_sensor * exp( c1 * ((T_sensor/(c2 + T_sensor)) - (T_real/(c2 + T_real))) )) / (c3 + T_sensor);
 80024e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80024ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80024f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fa:	ee17 0a90 	vmov	r0, s15
 80024fe:	f7fe f823 	bl	8000548 <__aeabi_f2d>
 8002502:	4604      	mov	r4, r0
 8002504:	460d      	mov	r5, r1
 8002506:	ed97 7a06 	vldr	s14, [r7, #24]
 800250a:	edd7 7a02 	vldr	s15, [r7, #8]
 800250e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002512:	edd7 6a02 	vldr	s13, [r7, #8]
 8002516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800251a:	edd7 6a06 	vldr	s13, [r7, #24]
 800251e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002522:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002526:	ed97 6a04 	vldr	s12, [r7, #16]
 800252a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800252e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002532:	edd7 7a07 	vldr	s15, [r7, #28]
 8002536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253a:	ee17 0a90 	vmov	r0, s15
 800253e:	f7fe f803 	bl	8000548 <__aeabi_f2d>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	ec43 2b10 	vmov	d0, r2, r3
 800254a:	f015 fc01 	bl	8017d50 <exp>
 800254e:	ec53 2b10 	vmov	r2, r3, d0
 8002552:	4620      	mov	r0, r4
 8002554:	4629      	mov	r1, r5
 8002556:	f7fe f84f 	bl	80005f8 <__aeabi_dmul>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4614      	mov	r4, r2
 8002560:	461d      	mov	r5, r3
 8002562:	ed97 7a05 	vldr	s14, [r7, #20]
 8002566:	edd7 7a02 	vldr	s15, [r7, #8]
 800256a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256e:	ee17 0a90 	vmov	r0, s15
 8002572:	f7fd ffe9 	bl	8000548 <__aeabi_f2d>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4620      	mov	r0, r4
 800257c:	4629      	mov	r1, r5
 800257e:	f7fe f965 	bl	800084c <__aeabi_ddiv>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	4610      	mov	r0, r2
 8002588:	4619      	mov	r1, r3
 800258a:	f7fe fb2d 	bl	8000be8 <__aeabi_d2f>
 800258e:	4603      	mov	r3, r0
 8002590:	ee07 3a90 	vmov	s15, r3
}
 8002594:	eeb0 0a67 	vmov.f32	s0, s15
 8002598:	3720      	adds	r7, #32
 800259a:	46bd      	mov	sp, r7
 800259c:	bdb0      	pop	{r4, r5, r7, pc}
 800259e:	bf00      	nop
 80025a0:	418cf5c3 	.word	0x418cf5c3
 80025a4:	43731eb8 	.word	0x43731eb8
 80025a8:	43899333 	.word	0x43899333

080025ac <compensateT>:

float compensateT(float T_sensor, float dT) {
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80025b6:	edc7 0a00 	vstr	s1, [r7]
	return T_sensor+dT;
 80025ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80025be:	edd7 7a00 	vldr	s15, [r7]
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80025c6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <initRGBLED>:

	status = HAL_I2C_Mem_Read(&hi2c1, (addr << 1), TSPP, 2, &rxBuf, 8, HAL_MAX_DELAY);
	status = HAL_I2C_Mem_Read(&hi2c1, (addr << 1), 0x00, 2, &rxBuf, 8, HAL_MAX_DELAY);
}

void initRGBLED() {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80025d8:	2100      	movs	r1, #0
 80025da:	4811      	ldr	r0, [pc, #68]	; (8002620 <initRGBLED+0x4c>)
 80025dc:	f008 f932 	bl	800a844 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80025e0:	2100      	movs	r1, #0
 80025e2:	4810      	ldr	r0, [pc, #64]	; (8002624 <initRGBLED+0x50>)
 80025e4:	f008 f92e 	bl	800a844 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80025e8:	2104      	movs	r1, #4
 80025ea:	480e      	ldr	r0, [pc, #56]	; (8002624 <initRGBLED+0x50>)
 80025ec:	f008 f92a 	bl	800a844 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80025f0:	2108      	movs	r1, #8
 80025f2:	480c      	ldr	r0, [pc, #48]	; (8002624 <initRGBLED+0x50>)
 80025f4:	f008 f926 	bl	800a844 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80025f8:	210c      	movs	r1, #12
 80025fa:	480a      	ldr	r0, [pc, #40]	; (8002624 <initRGBLED+0x50>)
 80025fc:	f008 f922 	bl	800a844 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002600:	2108      	movs	r1, #8
 8002602:	4809      	ldr	r0, [pc, #36]	; (8002628 <initRGBLED+0x54>)
 8002604:	f008 f91e 	bl	800a844 <HAL_TIM_PWM_Start>

	setAirLED(100, 100, 100);
 8002608:	2264      	movs	r2, #100	; 0x64
 800260a:	2164      	movs	r1, #100	; 0x64
 800260c:	2064      	movs	r0, #100	; 0x64
 800260e:	f000 f841 	bl	8002694 <setAirLED>
	setStatLED(100, 100, 100);
 8002612:	2264      	movs	r2, #100	; 0x64
 8002614:	2164      	movs	r1, #100	; 0x64
 8002616:	2064      	movs	r0, #100	; 0x64
 8002618:	f000 f808 	bl	800262c <setStatLED>

}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200014ac 	.word	0x200014ac
 8002624:	200014f4 	.word	0x200014f4
 8002628:	20001464 	.word	0x20001464

0800262c <setStatLED>:

void setStatLED(int r, int g, int b) { // values 0-100
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]

	htim2.Instance->CCR1 = r;
 8002638:	4b08      	ldr	r3, [pc, #32]	; (800265c <setStatLED+0x30>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR1 = g;
 8002640:	4b07      	ldr	r3, [pc, #28]	; (8002660 <setStatLED+0x34>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = b;
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <setStatLED+0x34>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	200014ac 	.word	0x200014ac
 8002660:	200014f4 	.word	0x200014f4

08002664 <flashStatLED>:


void flashStatLED(int r, int g, int b) { // values 0-100
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]

	setStatLED(r, g, b);
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68b9      	ldr	r1, [r7, #8]
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7ff ffd9 	bl	800262c <setStatLED>
	HAL_Delay(200);
 800267a:	20c8      	movs	r0, #200	; 0xc8
 800267c:	f003 fd0a 	bl	8006094 <HAL_Delay>
	setStatLED(100, 100, 100);
 8002680:	2264      	movs	r2, #100	; 0x64
 8002682:	2164      	movs	r1, #100	; 0x64
 8002684:	2064      	movs	r0, #100	; 0x64
 8002686:	f7ff ffd1 	bl	800262c <setStatLED>

}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <setAirLED>:

void setAirLED(int r, int g, int b) { // values 0-100
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]

	htim3.Instance->CCR3 = r;
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <setAirLED+0x30>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	63da      	str	r2, [r3, #60]	; 0x3c
	htim3.Instance->CCR4 = g;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <setAirLED+0x30>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
	htim4.Instance->CCR3 = b;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <setAirLED+0x34>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	63da      	str	r2, [r3, #60]	; 0x3c

}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	200014f4 	.word	0x200014f4
 80026c8:	20001464 	.word	0x20001464

080026cc <AirLED_on>:

void AirLED_on() {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
	if (SPS30.spsData[1] > 30) setAirLED(0, 100, 100); // red
 80026d0:	4b13      	ldr	r3, [pc, #76]	; (8002720 <AirLED_on+0x54>)
 80026d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80026d6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80026da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e2:	dd05      	ble.n	80026f0 <AirLED_on+0x24>
 80026e4:	2264      	movs	r2, #100	; 0x64
 80026e6:	2164      	movs	r1, #100	; 0x64
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7ff ffd3 	bl	8002694 <setAirLED>
	else if (SPS30.spsData[1] > 10) setAirLED(0, 0, 100); // yellow
	else setAirLED(100, 0, 100); // green
}
 80026ee:	e014      	b.n	800271a <AirLED_on+0x4e>
	else if (SPS30.spsData[1] > 10) setAirLED(0, 0, 100); // yellow
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <AirLED_on+0x54>)
 80026f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80026f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80026fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002702:	dd05      	ble.n	8002710 <AirLED_on+0x44>
 8002704:	2264      	movs	r2, #100	; 0x64
 8002706:	2100      	movs	r1, #0
 8002708:	2000      	movs	r0, #0
 800270a:	f7ff ffc3 	bl	8002694 <setAirLED>
}
 800270e:	e004      	b.n	800271a <AirLED_on+0x4e>
	else setAirLED(100, 0, 100); // green
 8002710:	2264      	movs	r2, #100	; 0x64
 8002712:	2100      	movs	r1, #0
 8002714:	2064      	movs	r0, #100	; 0x64
 8002716:	f7ff ffbd 	bl	8002694 <setAirLED>
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000d20 	.word	0x20000d20

08002724 <AirLED_off>:

void AirLED_off() {
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
	setAirLED(100, 100, 100);
 8002728:	2264      	movs	r2, #100	; 0x64
 800272a:	2164      	movs	r1, #100	; 0x64
 800272c:	2064      	movs	r0, #100	; 0x64
 800272e:	f7ff ffb1 	bl	8002694 <setAirLED>
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <renameBT>:
//	HAL_UART_Receive_IT(&huart1,&readBuf,1);
//	if (strcmp(readBuf_old, readBuf) != 0)
//		count++;
//}

void renameBT() {
 8002738:	b580      	push	{r7, lr}
 800273a:	b08c      	sub	sp, #48	; 0x30
 800273c:	af02      	add	r7, sp, #8

	/* max length of hm11 name is 12, BT05-A module requires \r\n at the end of every command */
	sprintf(btname, "%s%c%c%c", "OPEN-SENE", SPS30.serial[13], SPS30.serial[14], SPS30.serial[15]);
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <renameBT+0x80>)
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002744:	4619      	mov	r1, r3
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <renameBT+0x80>)
 8002748:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800274c:	461a      	mov	r2, r3
 800274e:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <renameBT+0x80>)
 8002750:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	9200      	str	r2, [sp, #0]
 8002758:	460b      	mov	r3, r1
 800275a:	4a18      	ldr	r2, [pc, #96]	; (80027bc <renameBT+0x84>)
 800275c:	4918      	ldr	r1, [pc, #96]	; (80027c0 <renameBT+0x88>)
 800275e:	4819      	ldr	r0, [pc, #100]	; (80027c4 <renameBT+0x8c>)
 8002760:	f011 f8a8 	bl	80138b4 <siprintf>
	uint8_t btcmd[32];
	uint8_t btlen = sprintf(btcmd, "%s%s%s", "AT+NAME", btname, "\r\n");
 8002764:	1d38      	adds	r0, r7, #4
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <renameBT+0x90>)
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <renameBT+0x8c>)
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <renameBT+0x94>)
 800276e:	4918      	ldr	r1, [pc, #96]	; (80027d0 <renameBT+0x98>)
 8002770:	f011 f8a0 	bl	80138b4 <siprintf>
 8002774:	4603      	mov	r3, r0
 8002776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_UART_Transmit(&huart1, btcmd, btlen, HAL_MAX_DELAY);
 800277a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800277e:	b29a      	uxth	r2, r3
 8002780:	1d39      	adds	r1, r7, #4
 8002782:	f04f 33ff 	mov.w	r3, #4294967295
 8002786:	4813      	ldr	r0, [pc, #76]	; (80027d4 <renameBT+0x9c>)
 8002788:	f008 fe7f 	bl	800b48a <HAL_UART_Transmit>
	// reboot module with set changes
	HAL_Delay(50);
 800278c:	2032      	movs	r0, #50	; 0x32
 800278e:	f003 fc81 	bl	8006094 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, BT_RESET_Pin, GPIO_PIN_RESET);
 8002792:	2200      	movs	r2, #0
 8002794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002798:	480f      	ldr	r0, [pc, #60]	; (80027d8 <renameBT+0xa0>)
 800279a:	f004 ff1b 	bl	80075d4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800279e:	2032      	movs	r0, #50	; 0x32
 80027a0:	f003 fc78 	bl	8006094 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, BT_RESET_Pin, GPIO_PIN_SET);
 80027a4:	2201      	movs	r2, #1
 80027a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027aa:	480b      	ldr	r0, [pc, #44]	; (80027d8 <renameBT+0xa0>)
 80027ac:	f004 ff12 	bl	80075d4 <HAL_GPIO_WritePin>

}
 80027b0:	bf00      	nop
 80027b2:	3728      	adds	r7, #40	; 0x28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000d20 	.word	0x20000d20
 80027bc:	08018468 	.word	0x08018468
 80027c0:	08018474 	.word	0x08018474
 80027c4:	20000e60 	.word	0x20000e60
 80027c8:	08018490 	.word	0x08018490
 80027cc:	08018480 	.word	0x08018480
 80027d0:	08018488 	.word	0x08018488
 80027d4:	2000159c 	.word	0x2000159c
 80027d8:	40020000 	.word	0x40020000

080027dc <checkBTconn>:

void checkBTconn() {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08e      	sub	sp, #56	; 0x38
 80027e0:	af00      	add	r7, sp, #0
	uint8_t btcmd[32];
	uint8_t btresp[16];
	uint8_t btlen = sprintf(btcmd, "%s", "AT+DISC\r\n");
 80027e2:	f107 0314 	add.w	r3, r7, #20
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <checkBTconn+0x54>)
 80027e8:	4912      	ldr	r1, [pc, #72]	; (8002834 <checkBTconn+0x58>)
 80027ea:	4618      	mov	r0, r3
 80027ec:	f011 f862 	bl	80138b4 <siprintf>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	HAL_Delay(50);
 80027f6:	2032      	movs	r0, #50	; 0x32
 80027f8:	f003 fc4c 	bl	8006094 <HAL_Delay>
	HAL_UART_Transmit(&huart1, btcmd, btlen, HAL_MAX_DELAY);
 80027fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002800:	b29a      	uxth	r2, r3
 8002802:	f107 0114 	add.w	r1, r7, #20
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
 800280a:	480b      	ldr	r0, [pc, #44]	; (8002838 <checkBTconn+0x5c>)
 800280c:	f008 fe3d 	bl	800b48a <HAL_UART_Transmit>
	HAL_Delay(50);
 8002810:	2032      	movs	r0, #50	; 0x32
 8002812:	f003 fc3f 	bl	8006094 <HAL_Delay>
	HAL_UART_Receive_DMA(&huart1, btresp, 16);
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	2210      	movs	r2, #16
 800281a:	4619      	mov	r1, r3
 800281c:	4806      	ldr	r0, [pc, #24]	; (8002838 <checkBTconn+0x5c>)
 800281e:	f008 fef6 	bl	800b60e <HAL_UART_Receive_DMA>
	HAL_Delay(50);
 8002822:	2032      	movs	r0, #50	; 0x32
 8002824:	f003 fc36 	bl	8006094 <HAL_Delay>
}
 8002828:	bf00      	nop
 800282a:	3738      	adds	r7, #56	; 0x38
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	08018494 	.word	0x08018494
 8002834:	080184a0 	.word	0x080184a0
 8002838:	2000159c 	.word	0x2000159c

0800283c <generateFilename>:

void generateFilename() {
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af02      	add	r7, sp, #8
	int filenumber = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
	FRESULT res;
	/* first 3 digits from SPS SN, then 4 digit file counter */
	while (res == FR_OK) {
 8002846:	e021      	b.n	800288c <generateFilename+0x50>
		sprintf(filename, "%c%c%c%04d.csv", SPS30.serial[13], SPS30.serial[14], SPS30.serial[15], filenumber);
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <generateFilename+0x60>)
 800284a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800284e:	4619      	mov	r1, r3
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <generateFilename+0x60>)
 8002852:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002856:	4618      	mov	r0, r3
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <generateFilename+0x60>)
 800285a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800285e:	461a      	mov	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	9200      	str	r2, [sp, #0]
 8002866:	4603      	mov	r3, r0
 8002868:	460a      	mov	r2, r1
 800286a:	490d      	ldr	r1, [pc, #52]	; (80028a0 <generateFilename+0x64>)
 800286c:	480d      	ldr	r0, [pc, #52]	; (80028a4 <generateFilename+0x68>)
 800286e:	f011 f821 	bl	80138b4 <siprintf>
		res = f_open(&fil, filename, FA_READ);
 8002872:	2201      	movs	r2, #1
 8002874:	490b      	ldr	r1, [pc, #44]	; (80028a4 <generateFilename+0x68>)
 8002876:	480c      	ldr	r0, [pc, #48]	; (80028a8 <generateFilename+0x6c>)
 8002878:	f00f f814 	bl	80118a4 <f_open>
 800287c:	4603      	mov	r3, r0
 800287e:	70fb      	strb	r3, [r7, #3]
		f_close(&fil);
 8002880:	4809      	ldr	r0, [pc, #36]	; (80028a8 <generateFilename+0x6c>)
 8002882:	f00f fbc0 	bl	8012006 <f_close>
		filenumber++;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3301      	adds	r3, #1
 800288a:	607b      	str	r3, [r7, #4]
	while (res == FR_OK) {
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0da      	beq.n	8002848 <generateFilename+0xc>
	}
}
 8002892:	bf00      	nop
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000d20 	.word	0x20000d20
 80028a0:	080184a4 	.word	0x080184a4
 80028a4:	200012d4 	.word	0x200012d4
 80028a8:	20000e6c 	.word	0x20000e6c

080028ac <saveToSD>:

int saveToSD(uint8_t *dBuf, uint8_t dBufLen) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	70fb      	strb	r3, [r7, #3]

	//Open a file for writing
	if (f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND) != FR_OK) return -1;
 80028b8:	2232      	movs	r2, #50	; 0x32
 80028ba:	4912      	ldr	r1, [pc, #72]	; (8002904 <saveToSD+0x58>)
 80028bc:	4812      	ldr	r0, [pc, #72]	; (8002908 <saveToSD+0x5c>)
 80028be:	f00e fff1 	bl	80118a4 <f_open>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <saveToSD+0x22>
 80028c8:	f04f 33ff 	mov.w	r3, #4294967295
 80028cc:	e016      	b.n	80028fc <saveToSD+0x50>

	UINT bytesWrote;//Number of bytes written
	if (f_write(&fil, dBuf, dBufLen, &bytesWrote) != FR_OK) return -1;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	480c      	ldr	r0, [pc, #48]	; (8002908 <saveToSD+0x5c>)
 80028d8:	f00f f9a2 	bl	8011c20 <f_write>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d002      	beq.n	80028e8 <saveToSD+0x3c>
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	e009      	b.n	80028fc <saveToSD+0x50>

	//Close the file after writing
	if (f_close(&fil) != FR_OK) return -1;
 80028e8:	4807      	ldr	r0, [pc, #28]	; (8002908 <saveToSD+0x5c>)
 80028ea:	f00f fb8c 	bl	8012006 <f_close>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <saveToSD+0x4e>
 80028f4:	f04f 33ff 	mov.w	r3, #4294967295
 80028f8:	e000      	b.n	80028fc <saveToSD+0x50>

//	//De-mount the drive
//	if (f_mount(NULL, "", 0) != FR_OK) return -1;

	return bytesWrote;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200012d4 	.word	0x200012d4
 8002908:	20000e6c 	.word	0x20000e6c

0800290c <writeFileHeader>:

int writeFileHeader() {
 800290c:	b580      	push	{r7, lr}
 800290e:	b0be      	sub	sp, #248	; 0xf8
 8002910:	af00      	add	r7, sp, #0

	//Open a file for writing
	if (f_open(&fil, filename, FA_WRITE | FA_OPEN_APPEND) != FR_OK) return -1;
 8002912:	2232      	movs	r2, #50	; 0x32
 8002914:	4922      	ldr	r1, [pc, #136]	; (80029a0 <writeFileHeader+0x94>)
 8002916:	4823      	ldr	r0, [pc, #140]	; (80029a4 <writeFileHeader+0x98>)
 8002918:	f00e ffc4 	bl	80118a4 <f_open>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <writeFileHeader+0x1c>
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	e037      	b.n	8002998 <writeFileHeader+0x8c>

	UINT bytesWrote;//Number of bytes written
	uint8_t details[39];
	uint8_t length = sprintf(details, "STM32_v0.2,,,SPS30_SN:%s\n", SPS30.serial);
 8002928:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800292c:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <writeFileHeader+0x9c>)
 800292e:	491f      	ldr	r1, [pc, #124]	; (80029ac <writeFileHeader+0xa0>)
 8002930:	4618      	mov	r0, r3
 8002932:	f010 ffbf 	bl	80138b4 <siprintf>
 8002936:	4603      	mov	r3, r0
 8002938:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	if (f_write(&fil, details, length, &bytesWrote) != FR_OK) return -1;
 800293c:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8002940:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002944:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002948:	4816      	ldr	r0, [pc, #88]	; (80029a4 <writeFileHeader+0x98>)
 800294a:	f00f f969 	bl	8011c20 <f_write>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <writeFileHeader+0x4e>
 8002954:	f04f 33ff 	mov.w	r3, #4294967295
 8002958:	e01e      	b.n	8002998 <writeFileHeader+0x8c>

	uint8_t header[195];
	length = sprintf(header, "Counter,Latitude,Longitude,gpsUpdated,Speed,Altitude,Satellites,Date,Time,Millis,PM1.0,PM2.5,PM4.0,PM10,Temperature,Humidity,NC0.5,NC1.0,NC2.5,NC4.0,NC10,TypicalParticleSize,TVOC,eCO2,BatteryVIN,compensatedT,compensatedRH,UID\n");
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	4914      	ldr	r1, [pc, #80]	; (80029b0 <writeFileHeader+0xa4>)
 800295e:	4618      	mov	r0, r3
 8002960:	f010 ffa8 	bl	80138b4 <siprintf>
 8002964:	4603      	mov	r3, r0
 8002966:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	if (f_write(&fil, header, length, &bytesWrote) != FR_OK) return -1;
 800296a:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 800296e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002972:	1d39      	adds	r1, r7, #4
 8002974:	480b      	ldr	r0, [pc, #44]	; (80029a4 <writeFileHeader+0x98>)
 8002976:	f00f f953 	bl	8011c20 <f_write>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <writeFileHeader+0x7a>
 8002980:	f04f 33ff 	mov.w	r3, #4294967295
 8002984:	e008      	b.n	8002998 <writeFileHeader+0x8c>

	//Close the file after writing
	if (f_close(&fil) != FR_OK) return -1;
 8002986:	4807      	ldr	r0, [pc, #28]	; (80029a4 <writeFileHeader+0x98>)
 8002988:	f00f fb3d 	bl	8012006 <f_close>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <writeFileHeader+0x8c>
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	e7ff      	b.n	8002998 <writeFileHeader+0x8c>

}
 8002998:	4618      	mov	r0, r3
 800299a:	37f8      	adds	r7, #248	; 0xf8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200012d4 	.word	0x200012d4
 80029a4:	20000e6c 	.word	0x20000e6c
 80029a8:	20000d48 	.word	0x20000d48
 80029ac:	080184b4 	.word	0x080184b4
 80029b0:	080184d0 	.word	0x080184d0

080029b4 <updateADC>:

void updateADC() {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0

	  HAL_ADC_Start(&hadc1);
 80029b8:	480e      	ldr	r0, [pc, #56]	; (80029f4 <updateADC+0x40>)
 80029ba:	f003 fbd3 	bl	8006164 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80029be:	f04f 31ff 	mov.w	r1, #4294967295
 80029c2:	480c      	ldr	r0, [pc, #48]	; (80029f4 <updateADC+0x40>)
 80029c4:	f003 fca0 	bl	8006308 <HAL_ADC_PollForConversion>
	  adcData[0] = HAL_ADC_GetValue(&hadc1);
 80029c8:	480a      	ldr	r0, [pc, #40]	; (80029f4 <updateADC+0x40>)
 80029ca:	f003 fd28 	bl	800641e <HAL_ADC_GetValue>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <updateADC+0x44>)
 80029d4:	801a      	strh	r2, [r3, #0]
	  batteryVoltage = adcData[0] * 0.00112556008f;
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <updateADC+0x44>)
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80029fc <updateADC+0x48>
 80029e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ea:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <updateADC+0x4c>)
 80029ec:	edc3 7a00 	vstr	s15, [r3]

}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000d68 	.word	0x20000d68
 80029f8:	2000109c 	.word	0x2000109c
 80029fc:	3a938787 	.word	0x3a938787
 8002a00:	200012e0 	.word	0x200012e0
 8002a04:	00000000 	.word	0x00000000

08002a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a0c:	ed2d 8b04 	vpush	{d8-d9}
 8002a10:	b0d9      	sub	sp, #356	; 0x164
 8002a12:	af34      	add	r7, sp, #208	; 0xd0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a14:	f003 facc 	bl	8005fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a18:	f000 fa48 	bl	8002eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a1c:	f7fe ff98 	bl	8001950 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a20:	f7fe ff76 	bl	8001910 <MX_DMA_Init>
  MX_I2C1_Init();
 8002a24:	f7ff f83a 	bl	8001a9c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002a28:	f7ff f866 	bl	8001af8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002a2c:	f000 ffa4 	bl	8003978 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002a30:	f7fe fed8 	bl	80017e4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002a34:	f000 fcdc 	bl	80033f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002a38:	f000 fd32 	bl	80034a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002a3c:	f000 fdaa 	bl	8003594 <MX_TIM4_Init>
  MX_SPI1_Init();
 8002a40:	f000 faa2 	bl	8002f88 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002a44:	f000 fad6 	bl	8002ff4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002a48:	f000 ffc0 	bl	80039cc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8002a4c:	f00f fb62 	bl	8012114 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 8002a50:	f00a ffc0 	bl	800d9d4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(50);
 8002a54:	2032      	movs	r0, #50	; 0x32
 8002a56:	f003 fb1d 	bl	8006094 <HAL_Delay>
  updateADC(); // if battery voltage is too low, prevent boot
 8002a5a:	f7ff ffab 	bl	80029b4 <updateADC>
  HAL_Delay(50);
 8002a5e:	2032      	movs	r0, #50	; 0x32
 8002a60:	f003 fb18 	bl	8006094 <HAL_Delay>
  initDisplay();
 8002a64:	f7ff fb30 	bl	80020c8 <initDisplay>
//  if (batteryVoltage < 2.75f) while(1) lowBatteryDisplay();
  welcomeDisplay();
 8002a68:	f7ff fc84 	bl	8002374 <welcomeDisplay>

  HAL_GPIO_WritePin(GPIOA, BT_RESET_Pin, GPIO_PIN_SET);
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a72:	4817      	ldr	r0, [pc, #92]	; (8002ad0 <main+0xc8>)
 8002a74:	f004 fdae 	bl	80075d4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8002a78:	2032      	movs	r0, #50	; 0x32
 8002a7a:	f003 fb0b 	bl	8006094 <HAL_Delay>
  GPS_Init();
 8002a7e:	f7fe fb0b 	bl	8001098 <GPS_Init>
  HAL_Delay(50);
 8002a82:	2032      	movs	r0, #50	; 0x32
 8002a84:	f003 fb06 	bl	8006094 <HAL_Delay>
  initRGBLED();
 8002a88:	f7ff fda4 	bl	80025d4 <initRGBLED>
  HAL_Delay(50);
 8002a8c:	2032      	movs	r0, #50	; 0x32
 8002a8e:	f003 fb01 	bl	8006094 <HAL_Delay>
  MX_I2C2_Init(); // reset i2c2 again (needed for it to work!)
 8002a92:	f7ff f831 	bl	8001af8 <MX_I2C2_Init>
  HAL_Delay(50);
 8002a96:	2032      	movs	r0, #50	; 0x32
 8002a98:	f003 fafc 	bl	8006094 <HAL_Delay>
  SPS30_start_measurement();
 8002a9c:	f7fe fd56 	bl	800154c <SPS30_start_measurement>
  HAL_Delay(50);
 8002aa0:	2032      	movs	r0, #50	; 0x32
 8002aa2:	f003 faf7 	bl	8006094 <HAL_Delay>
  SPS30_read_serialnumber();
 8002aa6:	f7fe fe1f 	bl	80016e8 <SPS30_read_serialnumber>
  HAL_Delay(50);
 8002aaa:	2032      	movs	r0, #50	; 0x32
 8002aac:	f003 faf2 	bl	8006094 <HAL_Delay>
  renameBT();
 8002ab0:	f7ff fe42 	bl	8002738 <renameBT>
  checkBTconn();
 8002ab4:	f7ff fe92 	bl	80027dc <checkBTconn>
  SPS30_clean_fan();
 8002ab8:	f7fe fdfe 	bl	80016b8 <SPS30_clean_fan>

  //Mount the file system
  f_mount(&FatFs, "", 1);
 8002abc:	2201      	movs	r2, #1
 8002abe:	4905      	ldr	r1, [pc, #20]	; (8002ad4 <main+0xcc>)
 8002ac0:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <main+0xd0>)
 8002ac2:	f00e fea9 	bl	8011818 <f_mount>
  generateFilename();
 8002ac6:	f7ff feb9 	bl	800283c <generateFilename>
  writeFileHeader();
 8002aca:	f7ff ff1f 	bl	800290c <writeFileHeader>
//		}
//		if (readBuf) HAL_UART_Transmit(&huart1, "AT+CONNL", 8, HAL_MAX_DELAY); // for HM11 module
// if lost restart module

	  /* Show boot screen until values first become none-zero */
	  while (SPS30_read_data() != 1) {
 8002ace:	e00d      	b.n	8002aec <main+0xe4>
 8002ad0:	40020000 	.word	0x40020000
 8002ad4:	080185b4 	.word	0x080185b4
 8002ad8:	200010a0 	.word	0x200010a0
		  setStatLED(100, 0, 50); // SPS error: cyan LED
 8002adc:	2232      	movs	r2, #50	; 0x32
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2064      	movs	r0, #100	; 0x64
 8002ae2:	f7ff fda3 	bl	800262c <setStatLED>
		  HAL_Delay(100);
 8002ae6:	2064      	movs	r0, #100	; 0x64
 8002ae8:	f003 fad4 	bl	8006094 <HAL_Delay>
	  while (SPS30_read_data() != 1) {
 8002aec:	f7fe fd5a 	bl	80015a4 <SPS30_read_data>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d1f2      	bne.n	8002adc <main+0xd4>
	  }
	  setStatLED(100, 100, 100);
 8002af6:	2264      	movs	r2, #100	; 0x64
 8002af8:	2164      	movs	r1, #100	; 0x64
 8002afa:	2064      	movs	r0, #100	; 0x64
 8002afc:	f7ff fd96 	bl	800262c <setStatLED>
	  HAL_Delay(50);
 8002b00:	2032      	movs	r0, #50	; 0x32
 8002b02:	f003 fac7 	bl	8006094 <HAL_Delay>
	  SHTC3_read_data();
 8002b06:	f7ff fc65 	bl	80023d4 <SHTC3_read_data>
	  comp_t = compensateT(temp, -4);
 8002b0a:	4bae      	ldr	r3, [pc, #696]	; (8002dc4 <main+0x3bc>)
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	eef9 0a00 	vmov.f32	s1, #144	; 0xc0800000 -4.0
 8002b14:	eeb0 0a67 	vmov.f32	s0, s15
 8002b18:	f7ff fd48 	bl	80025ac <compensateT>
 8002b1c:	eef0 7a40 	vmov.f32	s15, s0
 8002b20:	4ba9      	ldr	r3, [pc, #676]	; (8002dc8 <main+0x3c0>)
 8002b22:	edc3 7a00 	vstr	s15, [r3]
	  comp_rh = compensateRH(rh, temp, -4);
 8002b26:	4ba9      	ldr	r3, [pc, #676]	; (8002dcc <main+0x3c4>)
 8002b28:	edd3 7a00 	vldr	s15, [r3]
 8002b2c:	4ba5      	ldr	r3, [pc, #660]	; (8002dc4 <main+0x3bc>)
 8002b2e:	ed93 7a00 	vldr	s14, [r3]
 8002b32:	eeb9 1a00 	vmov.f32	s2, #144	; 0xc0800000 -4.0
 8002b36:	eef0 0a47 	vmov.f32	s1, s14
 8002b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3e:	f7ff fcbb 	bl	80024b8 <compensateRH>
 8002b42:	eef0 7a40 	vmov.f32	s15, s0
 8002b46:	4ba2      	ldr	r3, [pc, #648]	; (8002dd0 <main+0x3c8>)
 8002b48:	edc3 7a00 	vstr	s15, [r3]
	  updateADC();
 8002b4c:	f7ff ff32 	bl	80029b4 <updateADC>
	  millis = HAL_GetTick();
 8002b50:	f003 fa94 	bl	800607c <HAL_GetTick>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4a9f      	ldr	r2, [pc, #636]	; (8002dd4 <main+0x3cc>)
 8002b58:	6013      	str	r3, [r2, #0]

	  /* Format output data string */
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002b5a:	4b9f      	ldr	r3, [pc, #636]	; (8002dd8 <main+0x3d0>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b62:	4b9e      	ldr	r3, [pc, #632]	; (8002ddc <main+0x3d4>)
 8002b64:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8002b68:	ed93 8b00 	vldr	d8, [r3]
 8002b6c:	4b9b      	ldr	r3, [pc, #620]	; (8002ddc <main+0x3d4>)
 8002b6e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8002b72:	ed93 9b00 	vldr	d9, [r3]
 8002b76:	4b99      	ldr	r3, [pc, #612]	; (8002ddc <main+0x3d4>)
 8002b78:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
 8002b7c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
			  "%.1f,%.1f,%d,%d,%06.0f,%d," // speed, alt, sat, date, time, millis
			  "%.2f,%.2f,%.2f,%.2f,%.1f,%.1f," // pm1, pm25, pm4, pm10, t, rh
			  "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%d,%d,%.2f,%.1f,%.1f,%c%c%c\n", // nc0.5, nc1.0, nc2.5, nc4.0, nc10, psize, tvoc, eco2, vbat
			  counter, GPS.GPGGA.LatitudeDecimal, GPS.GPGGA.LongitudeDecimal, GPS.GPGGA.PositionFixIndicator,
			  GPS.GPGGA.Speed_KMH, GPS.GPGGA.MSL_Altitude, GPS.GPGGA.SatellitesUsed, GPS.GPGGA.YYYYMMDD, GPS.GPGGA.HHMMSS, millis,
 8002b80:	4b96      	ldr	r3, [pc, #600]	; (8002ddc <main+0x3d4>)
 8002b82:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8002b86:	681b      	ldr	r3, [r3, #0]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fcdd 	bl	8000548 <__aeabi_f2d>
 8002b8e:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
			  GPS.GPGGA.Speed_KMH, GPS.GPGGA.MSL_Altitude, GPS.GPGGA.SatellitesUsed, GPS.GPGGA.YYYYMMDD, GPS.GPGGA.HHMMSS, millis,
 8002b92:	4b92      	ldr	r3, [pc, #584]	; (8002ddc <main+0x3d4>)
 8002b94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b98:	681b      	ldr	r3, [r3, #0]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fcd4 	bl	8000548 <__aeabi_f2d>
 8002ba0:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
			  GPS.GPGGA.Speed_KMH, GPS.GPGGA.MSL_Altitude, GPS.GPGGA.SatellitesUsed, GPS.GPGGA.YYYYMMDD, GPS.GPGGA.HHMMSS, millis,
 8002ba4:	4b8d      	ldr	r3, [pc, #564]	; (8002ddc <main+0x3d4>)
 8002ba6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002baa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bac:	4b8b      	ldr	r3, [pc, #556]	; (8002ddc <main+0x3d4>)
 8002bae:	f8d3 4468 	ldr.w	r4, [r3, #1128]	; 0x468
 8002bb2:	66bc      	str	r4, [r7, #104]	; 0x68
			  GPS.GPGGA.Speed_KMH, GPS.GPGGA.MSL_Altitude, GPS.GPGGA.SatellitesUsed, GPS.GPGGA.YYYYMMDD, GPS.GPGGA.HHMMSS, millis,
 8002bb4:	4b89      	ldr	r3, [pc, #548]	; (8002ddc <main+0x3d4>)
 8002bb6:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8002bba:	681b      	ldr	r3, [r3, #0]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fcc3 	bl	8000548 <__aeabi_f2d>
 8002bc2:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 8002bc6:	4b83      	ldr	r3, [pc, #524]	; (8002dd4 <main+0x3cc>)
 8002bc8:	681d      	ldr	r5, [r3, #0]
 8002bca:	65fd      	str	r5, [r7, #92]	; 0x5c
			  SPS30.spsData[0], SPS30.spsData[1], SPS30.spsData[2], SPS30.spsData[3], temp, rh,
 8002bcc:	4b84      	ldr	r3, [pc, #528]	; (8002de0 <main+0x3d8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fcb9 	bl	8000548 <__aeabi_f2d>
 8002bd6:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
			  SPS30.spsData[0], SPS30.spsData[1], SPS30.spsData[2], SPS30.spsData[3], temp, rh,
 8002bda:	4b81      	ldr	r3, [pc, #516]	; (8002de0 <main+0x3d8>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fcb2 	bl	8000548 <__aeabi_f2d>
 8002be4:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
			  SPS30.spsData[0], SPS30.spsData[1], SPS30.spsData[2], SPS30.spsData[3], temp, rh,
 8002be8:	4b7d      	ldr	r3, [pc, #500]	; (8002de0 <main+0x3d8>)
 8002bea:	689b      	ldr	r3, [r3, #8]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fcab 	bl	8000548 <__aeabi_f2d>
 8002bf2:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
			  SPS30.spsData[0], SPS30.spsData[1], SPS30.spsData[2], SPS30.spsData[3], temp, rh,
 8002bf6:	4b7a      	ldr	r3, [pc, #488]	; (8002de0 <main+0x3d8>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fca4 	bl	8000548 <__aeabi_f2d>
 8002c00:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8002c04:	4b6f      	ldr	r3, [pc, #444]	; (8002dc4 <main+0x3bc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fc9d 	bl	8000548 <__aeabi_f2d>
 8002c0e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8002c12:	4b6e      	ldr	r3, [pc, #440]	; (8002dcc <main+0x3c4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fc96 	bl	8000548 <__aeabi_f2d>
 8002c1c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002c20:	4b6f      	ldr	r3, [pc, #444]	; (8002de0 <main+0x3d8>)
 8002c22:	691b      	ldr	r3, [r3, #16]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fd fc8f 	bl	8000548 <__aeabi_f2d>
 8002c2a:	e9c7 0108 	strd	r0, r1, [r7, #32]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002c2e:	4b6c      	ldr	r3, [pc, #432]	; (8002de0 <main+0x3d8>)
 8002c30:	695b      	ldr	r3, [r3, #20]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fc88 	bl	8000548 <__aeabi_f2d>
 8002c38:	e9c7 0106 	strd	r0, r1, [r7, #24]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002c3c:	4b68      	ldr	r3, [pc, #416]	; (8002de0 <main+0x3d8>)
 8002c3e:	699b      	ldr	r3, [r3, #24]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fc81 	bl	8000548 <__aeabi_f2d>
 8002c46:	e9c7 0104 	strd	r0, r1, [r7, #16]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002c4a:	4b65      	ldr	r3, [pc, #404]	; (8002de0 <main+0x3d8>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fc7a 	bl	8000548 <__aeabi_f2d>
 8002c54:	e9c7 0102 	strd	r0, r1, [r7, #8]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002c58:	4b61      	ldr	r3, [pc, #388]	; (8002de0 <main+0x3d8>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc73 	bl	8000548 <__aeabi_f2d>
 8002c62:	e9c7 0100 	strd	r0, r1, [r7]
			  SPS30.spsData[4], SPS30.spsData[5], SPS30.spsData[6], SPS30.spsData[7], SPS30.spsData[8], SPS30.spsData[9],
 8002c66:	4b5e      	ldr	r3, [pc, #376]	; (8002de0 <main+0x3d8>)
 8002c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc6c 	bl	8000548 <__aeabi_f2d>
 8002c70:	4682      	mov	sl, r0
 8002c72:	468b      	mov	fp, r1
 8002c74:	4b5b      	ldr	r3, [pc, #364]	; (8002de4 <main+0x3dc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc65 	bl	8000548 <__aeabi_f2d>
 8002c7e:	4680      	mov	r8, r0
 8002c80:	4689      	mov	r9, r1
 8002c82:	4b51      	ldr	r3, [pc, #324]	; (8002dc8 <main+0x3c0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc5e 	bl	8000548 <__aeabi_f2d>
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	460d      	mov	r5, r1
 8002c90:	4b4f      	ldr	r3, [pc, #316]	; (8002dd0 <main+0x3c8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fc57 	bl	8000548 <__aeabi_f2d>
			  0, 0, batteryVoltage, comp_t, comp_rh, SPS30.serial[13], SPS30.serial[14], SPS30.serial[15]);
 8002c9a:	4b51      	ldr	r3, [pc, #324]	; (8002de0 <main+0x3d8>)
 8002c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002ca0:	461e      	mov	r6, r3
			  0, 0, batteryVoltage, comp_t, comp_rh, SPS30.serial[13], SPS30.serial[14], SPS30.serial[15]);
 8002ca2:	4b4f      	ldr	r3, [pc, #316]	; (8002de0 <main+0x3d8>)
 8002ca4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002ca8:	461a      	mov	r2, r3
			  0, 0, batteryVoltage, comp_t, comp_rh, SPS30.serial[13], SPS30.serial[14], SPS30.serial[15]);
 8002caa:	4b4d      	ldr	r3, [pc, #308]	; (8002de0 <main+0x3d8>)
 8002cac:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
	  uint8_t length = sprintf(data, "%d,%f,%f,%d," // counter, lat, lon, fix
 8002cb0:	9332      	str	r3, [sp, #200]	; 0xc8
 8002cb2:	9231      	str	r2, [sp, #196]	; 0xc4
 8002cb4:	9630      	str	r6, [sp, #192]	; 0xc0
 8002cb6:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
 8002cba:	e9cd 452c 	strd	r4, r5, [sp, #176]	; 0xb0
 8002cbe:	e9cd 892a 	strd	r8, r9, [sp, #168]	; 0xa8
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9329      	str	r3, [sp, #164]	; 0xa4
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9328      	str	r3, [sp, #160]	; 0xa0
 8002cca:	e9cd ab26 	strd	sl, fp, [sp, #152]	; 0x98
 8002cce:	ed97 7b00 	vldr	d7, [r7]
 8002cd2:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8002cd6:	ed97 7b02 	vldr	d7, [r7, #8]
 8002cda:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8002cde:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ce2:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8002ce6:	ed97 7b06 	vldr	d7, [r7, #24]
 8002cea:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8002cee:	ed97 7b08 	vldr	d7, [r7, #32]
 8002cf2:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8002cf6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002cfa:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8002cfe:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002d02:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8002d06:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002d0a:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8002d0e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002d12:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002d16:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002d1a:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002d1e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002d22:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002d26:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8002d28:	950e      	str	r5, [sp, #56]	; 0x38
 8002d2a:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002d2e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002d32:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8002d34:	940b      	str	r4, [sp, #44]	; 0x2c
 8002d36:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8002d38:	940a      	str	r4, [sp, #40]	; 0x28
 8002d3a:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002d3e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002d42:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002d46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002d4a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002d4e:	9104      	str	r1, [sp, #16]
 8002d50:	ed8d 9b02 	vstr	d9, [sp, #8]
 8002d54:	ed8d 8b00 	vstr	d8, [sp]
 8002d58:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d5c:	4922      	ldr	r1, [pc, #136]	; (8002de8 <main+0x3e0>)
 8002d5e:	4823      	ldr	r0, [pc, #140]	; (8002dec <main+0x3e4>)
 8002d60:	f010 fda8 	bl	80138b4 <siprintf>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f


	  /* Send data via BT and COM, save to SD */
	  AirLED_on();
 8002d6a:	f7ff fcaf 	bl	80026cc <AirLED_on>
	  CDC_Transmit_FS(data, length); // required for COM port
 8002d6e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002d72:	4619      	mov	r1, r3
 8002d74:	481d      	ldr	r0, [pc, #116]	; (8002dec <main+0x3e4>)
 8002d76:	f00f fa8b 	bl	8012290 <CDC_Transmit_FS>
	  HAL_UART_Transmit(&huart1, data, length, HAL_MAX_DELAY);
 8002d7a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	f04f 33ff 	mov.w	r3, #4294967295
 8002d84:	4919      	ldr	r1, [pc, #100]	; (8002dec <main+0x3e4>)
 8002d86:	481a      	ldr	r0, [pc, #104]	; (8002df0 <main+0x3e8>)
 8002d88:	f008 fb7f 	bl	800b48a <HAL_UART_Transmit>
	  if (saveToSD(&data, length) == -1) noSD = 1;
 8002d8c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002d90:	4619      	mov	r1, r3
 8002d92:	4816      	ldr	r0, [pc, #88]	; (8002dec <main+0x3e4>)
 8002d94:	f7ff fd8a 	bl	80028ac <saveToSD>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9e:	d103      	bne.n	8002da8 <main+0x3a0>
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <main+0x3ec>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e002      	b.n	8002dae <main+0x3a6>
	  else noSD = 0;
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <main+0x3ec>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
	  AirLED_off();
 8002dae:	f7ff fcb9 	bl	8002724 <AirLED_off>

	  /* Update the display */
	  updateDisplay();
 8002db2:	f7ff f9a7 	bl	8002104 <updateDisplay>

	  /* Increase counter and wait */
	  counter++;
 8002db6:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <main+0x3d0>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <main+0x3d0>)
 8002dc0:	801a      	strh	r2, [r3, #0]
	  while (HAL_GetTick()-millis < 1000) {
 8002dc2:	e01c      	b.n	8002dfe <main+0x3f6>
 8002dc4:	20000e58 	.word	0x20000e58
 8002dc8:	20000e5c 	.word	0x20000e5c
 8002dcc:	200013b0 	.word	0x200013b0
 8002dd0:	200012d0 	.word	0x200012d0
 8002dd4:	20000398 	.word	0x20000398
 8002dd8:	20000394 	.word	0x20000394
 8002ddc:	200008b0 	.word	0x200008b0
 8002de0:	20000d20 	.word	0x20000d20
 8002de4:	200012e0 	.word	0x200012e0
 8002de8:	080185b8 	.word	0x080185b8
 8002dec:	200012e8 	.word	0x200012e8
 8002df0:	2000159c 	.word	0x2000159c
 8002df4:	20000000 	.word	0x20000000
		  HAL_Delay(10); // does increasing this delay save power?
 8002df8:	200a      	movs	r0, #10
 8002dfa:	f003 f94b 	bl	8006094 <HAL_Delay>
	  while (HAL_GetTick()-millis < 1000) {
 8002dfe:	f003 f93d 	bl	800607c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <main+0x490>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e0e:	d3f3      	bcc.n	8002df8 <main+0x3f0>
	  }

	  /* Set debug LED */
	  if (rh > 100 || rh < 0) flashStatLED(100, 100, 0); // SHT errors: blue LED
 8002e10:	4b22      	ldr	r3, [pc, #136]	; (8002e9c <main+0x494>)
 8002e12:	edd3 7a00 	vldr	s15, [r3]
 8002e16:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002ea0 <main+0x498>
 8002e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e22:	dc07      	bgt.n	8002e34 <main+0x42c>
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <main+0x494>)
 8002e26:	edd3 7a00 	vldr	s15, [r3]
 8002e2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e32:	d504      	bpl.n	8002e3e <main+0x436>
 8002e34:	2200      	movs	r2, #0
 8002e36:	2164      	movs	r1, #100	; 0x64
 8002e38:	2064      	movs	r0, #100	; 0x64
 8002e3a:	f7ff fc13 	bl	8002664 <flashStatLED>
	  if (noSD == 1) flashStatLED(0, 100, 0); // SD errors: purple LED
 8002e3e:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <main+0x49c>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d104      	bne.n	8002e50 <main+0x448>
 8002e46:	2200      	movs	r2, #0
 8002e48:	2164      	movs	r1, #100	; 0x64
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7ff fc0a 	bl	8002664 <flashStatLED>
	  if (batteryVoltage < 2.6 || batteryVoltage > 5) flashStatLED(0, 100, 100); // Battery errors: red LED
 8002e50:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <main+0x4a0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fb77 	bl	8000548 <__aeabi_f2d>
 8002e5a:	a30d      	add	r3, pc, #52	; (adr r3, 8002e90 <main+0x488>)
 8002e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e60:	f7fd fe3c 	bl	8000adc <__aeabi_dcmplt>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <main+0x476>
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <main+0x4a0>)
 8002e6c:	edd3 7a00 	vldr	s15, [r3]
 8002e70:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	dd04      	ble.n	8002e88 <main+0x480>
 8002e7e:	2264      	movs	r2, #100	; 0x64
 8002e80:	2164      	movs	r1, #100	; 0x64
 8002e82:	2000      	movs	r0, #0
 8002e84:	f7ff fbee 	bl	8002664 <flashStatLED>
  {
 8002e88:	e621      	b.n	8002ace <main+0xc6>
 8002e8a:	bf00      	nop
 8002e8c:	f3af 8000 	nop.w
 8002e90:	cccccccd 	.word	0xcccccccd
 8002e94:	4004cccc 	.word	0x4004cccc
 8002e98:	20000398 	.word	0x20000398
 8002e9c:	200013b0 	.word	0x200013b0
 8002ea0:	42c80000 	.word	0x42c80000
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	200012e0 	.word	0x200012e0

08002eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b094      	sub	sp, #80	; 0x50
 8002eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eb2:	f107 0320 	add.w	r3, r7, #32
 8002eb6:	2230      	movs	r2, #48	; 0x30
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f00f fe72 	bl	8012ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <SystemClock_Config+0xc8>)
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <SystemClock_Config+0xc8>)
 8002eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee0:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <SystemClock_Config+0xc8>)
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eec:	2300      	movs	r3, #0
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <SystemClock_Config+0xcc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <SystemClock_Config+0xcc>)
 8002ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <SystemClock_Config+0xcc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f04:	607b      	str	r3, [r7, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f12:	2302      	movs	r3, #2
 8002f14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002f20:	2348      	movs	r3, #72	; 0x48
 8002f22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f24:	2302      	movs	r3, #2
 8002f26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f2c:	f107 0320 	add.w	r3, r7, #32
 8002f30:	4618      	mov	r0, r3
 8002f32:	f006 fc81 	bl	8009838 <HAL_RCC_OscConfig>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f3c:	f000 f81e 	bl	8002f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f40:	230f      	movs	r3, #15
 8002f42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f44:	2302      	movs	r3, #2
 8002f46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f56:	f107 030c 	add.w	r3, r7, #12
 8002f5a:	2102      	movs	r1, #2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f006 fee3 	bl	8009d28 <HAL_RCC_ClockConfig>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002f68:	f000 f808 	bl	8002f7c <Error_Handler>
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	3750      	adds	r7, #80	; 0x50
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40007000 	.word	0x40007000

08002f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f80:	b672      	cpsid	i
}
 8002f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f84:	e7fe      	b.n	8002f84 <Error_Handler+0x8>
	...

08002f88 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <MX_SPI1_Init+0x64>)
 8002f8e:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <MX_SPI1_Init+0x68>)
 8002f90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <MX_SPI1_Init+0x64>)
 8002f94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f9a:	4b14      	ldr	r3, [pc, #80]	; (8002fec <MX_SPI1_Init+0x64>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <MX_SPI1_Init+0x64>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fa6:	4b11      	ldr	r3, [pc, #68]	; (8002fec <MX_SPI1_Init+0x64>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <MX_SPI1_Init+0x64>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <MX_SPI1_Init+0x64>)
 8002fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <MX_SPI1_Init+0x64>)
 8002fbc:	2230      	movs	r2, #48	; 0x30
 8002fbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <MX_SPI1_Init+0x64>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <MX_SPI1_Init+0x64>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <MX_SPI1_Init+0x64>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <MX_SPI1_Init+0x64>)
 8002fd4:	220a      	movs	r2, #10
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fd8:	4804      	ldr	r0, [pc, #16]	; (8002fec <MX_SPI1_Init+0x64>)
 8002fda:	f007 f89f 	bl	800a11c <HAL_SPI_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002fe4:	f7ff ffca 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fe8:	bf00      	nop
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	2000140c 	.word	0x2000140c
 8002ff0:	40013000 	.word	0x40013000

08002ff4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002ff8:	4b17      	ldr	r3, [pc, #92]	; (8003058 <MX_SPI2_Init+0x64>)
 8002ffa:	4a18      	ldr	r2, [pc, #96]	; (800305c <MX_SPI2_Init+0x68>)
 8002ffc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ffe:	4b16      	ldr	r3, [pc, #88]	; (8003058 <MX_SPI2_Init+0x64>)
 8003000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003004:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <MX_SPI2_Init+0x64>)
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <MX_SPI2_Init+0x64>)
 800300e:	2200      	movs	r2, #0
 8003010:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <MX_SPI2_Init+0x64>)
 8003014:	2200      	movs	r2, #0
 8003016:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <MX_SPI2_Init+0x64>)
 800301a:	2200      	movs	r2, #0
 800301c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <MX_SPI2_Init+0x64>)
 8003020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003024:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003026:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <MX_SPI2_Init+0x64>)
 8003028:	2230      	movs	r2, #48	; 0x30
 800302a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <MX_SPI2_Init+0x64>)
 800302e:	2200      	movs	r2, #0
 8003030:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <MX_SPI2_Init+0x64>)
 8003034:	2200      	movs	r2, #0
 8003036:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003038:	4b07      	ldr	r3, [pc, #28]	; (8003058 <MX_SPI2_Init+0x64>)
 800303a:	2200      	movs	r2, #0
 800303c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <MX_SPI2_Init+0x64>)
 8003040:	220a      	movs	r2, #10
 8003042:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003044:	4804      	ldr	r0, [pc, #16]	; (8003058 <MX_SPI2_Init+0x64>)
 8003046:	f007 f869 	bl	800a11c <HAL_SPI_Init>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003050:	f7ff ff94 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003054:	bf00      	nop
 8003056:	bd80      	pop	{r7, pc}
 8003058:	200013b4 	.word	0x200013b4
 800305c:	40003800 	.word	0x40003800

08003060 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08c      	sub	sp, #48	; 0x30
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003068:	f107 031c 	add.w	r3, r7, #28
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	605a      	str	r2, [r3, #4]
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a32      	ldr	r2, [pc, #200]	; (8003148 <HAL_SPI_MspInit+0xe8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d12c      	bne.n	80030dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	4b31      	ldr	r3, [pc, #196]	; (800314c <HAL_SPI_MspInit+0xec>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	4a30      	ldr	r2, [pc, #192]	; (800314c <HAL_SPI_MspInit+0xec>)
 800308c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003090:	6453      	str	r3, [r2, #68]	; 0x44
 8003092:	4b2e      	ldr	r3, [pc, #184]	; (800314c <HAL_SPI_MspInit+0xec>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	4b2a      	ldr	r3, [pc, #168]	; (800314c <HAL_SPI_MspInit+0xec>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	4a29      	ldr	r2, [pc, #164]	; (800314c <HAL_SPI_MspInit+0xec>)
 80030a8:	f043 0302 	orr.w	r3, r3, #2
 80030ac:	6313      	str	r3, [r2, #48]	; 0x30
 80030ae:	4b27      	ldr	r3, [pc, #156]	; (800314c <HAL_SPI_MspInit+0xec>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80030ba:	2338      	movs	r3, #56	; 0x38
 80030bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030be:	2302      	movs	r3, #2
 80030c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c6:	2303      	movs	r3, #3
 80030c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030ca:	2305      	movs	r3, #5
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ce:	f107 031c 	add.w	r3, r7, #28
 80030d2:	4619      	mov	r1, r3
 80030d4:	481e      	ldr	r0, [pc, #120]	; (8003150 <HAL_SPI_MspInit+0xf0>)
 80030d6:	f004 f8e1 	bl	800729c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80030da:	e031      	b.n	8003140 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <HAL_SPI_MspInit+0xf4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d12c      	bne.n	8003140 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <HAL_SPI_MspInit+0xec>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	4a17      	ldr	r2, [pc, #92]	; (800314c <HAL_SPI_MspInit+0xec>)
 80030f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f4:	6413      	str	r3, [r2, #64]	; 0x40
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <HAL_SPI_MspInit+0xec>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_SPI_MspInit+0xec>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	4a10      	ldr	r2, [pc, #64]	; (800314c <HAL_SPI_MspInit+0xec>)
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	6313      	str	r3, [r2, #48]	; 0x30
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_SPI_MspInit+0xec>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800311e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003130:	2305      	movs	r3, #5
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003134:	f107 031c 	add.w	r3, r7, #28
 8003138:	4619      	mov	r1, r3
 800313a:	4805      	ldr	r0, [pc, #20]	; (8003150 <HAL_SPI_MspInit+0xf0>)
 800313c:	f004 f8ae 	bl	800729c <HAL_GPIO_Init>
}
 8003140:	bf00      	nop
 8003142:	3730      	adds	r7, #48	; 0x30
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40013000 	.word	0x40013000
 800314c:	40023800 	.word	0x40023800
 8003150:	40020400 	.word	0x40020400
 8003154:	40003800 	.word	0x40003800

08003158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_MspInit+0x4c>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	4a0f      	ldr	r2, [pc, #60]	; (80031a4 <HAL_MspInit+0x4c>)
 8003168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800316c:	6453      	str	r3, [r2, #68]	; 0x44
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <HAL_MspInit+0x4c>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <HAL_MspInit+0x4c>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <HAL_MspInit+0x4c>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003188:	6413      	str	r3, [r2, #64]	; 0x40
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_MspInit+0x4c>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800

080031a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031ac:	e7fe      	b.n	80031ac <NMI_Handler+0x4>

080031ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b2:	e7fe      	b.n	80031b2 <HardFault_Handler+0x4>

080031b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031b8:	e7fe      	b.n	80031b8 <MemManage_Handler+0x4>

080031ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031be:	e7fe      	b.n	80031be <BusFault_Handler+0x4>

080031c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c4:	e7fe      	b.n	80031c4 <UsageFault_Handler+0x4>

080031c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031f4:	f002 ff2e 	bl	8006054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031f8:	bf00      	nop
 80031fa:	bd80      	pop	{r7, pc}

080031fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <USART2_IRQHandler+0x10>)
 8003202:	f008 fa35 	bl	800b670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	200015e0 	.word	0x200015e0

08003210 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <DMA2_Stream2_IRQHandler+0x10>)
 8003216:	f003 fdd7 	bl	8006dc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	2000153c 	.word	0x2000153c

08003224 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003228:	4802      	ldr	r0, [pc, #8]	; (8003234 <OTG_FS_IRQHandler+0x10>)
 800322a:	f005 fad2 	bl	80087d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20002f68 	.word	0x20002f68

08003238 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
	return 1;
 800323c:	2301      	movs	r3, #1
}
 800323e:	4618      	mov	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <_kill>:

int _kill(int pid, int sig)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003252:	f00f fc7d 	bl	8012b50 <__errno>
 8003256:	4603      	mov	r3, r0
 8003258:	2216      	movs	r2, #22
 800325a:	601a      	str	r2, [r3, #0]
	return -1;
 800325c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <_exit>:

void _exit (int status)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003270:	f04f 31ff 	mov.w	r1, #4294967295
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f7ff ffe7 	bl	8003248 <_kill>
	while (1) {}		/* Make sure we hang here */
 800327a:	e7fe      	b.n	800327a <_exit+0x12>

0800327c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	e00a      	b.n	80032a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800328e:	f3af 8000 	nop.w
 8003292:	4601      	mov	r1, r0
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	60ba      	str	r2, [r7, #8]
 800329a:	b2ca      	uxtb	r2, r1
 800329c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	3301      	adds	r3, #1
 80032a2:	617b      	str	r3, [r7, #20]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	dbf0      	blt.n	800328e <_read+0x12>
	}

return len;
 80032ac:	687b      	ldr	r3, [r7, #4]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b086      	sub	sp, #24
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	e009      	b.n	80032dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	60ba      	str	r2, [r7, #8]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	3301      	adds	r3, #1
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	dbf1      	blt.n	80032c8 <_write+0x12>
	}
	return len;
 80032e4:	687b      	ldr	r3, [r7, #4]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <_close>:

int _close(int file)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
	return -1;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003316:	605a      	str	r2, [r3, #4]
	return 0;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <_isatty>:

int _isatty(int file)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
	return 1;
 800332e:	2301      	movs	r3, #1
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
	return 0;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003360:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <_sbrk+0x5c>)
 8003362:	4b15      	ldr	r3, [pc, #84]	; (80033b8 <_sbrk+0x60>)
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <_sbrk+0x64>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d102      	bne.n	800337a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <_sbrk+0x64>)
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <_sbrk+0x68>)
 8003378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <_sbrk+0x64>)
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4413      	add	r3, r2
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	429a      	cmp	r2, r3
 8003386:	d207      	bcs.n	8003398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003388:	f00f fbe2 	bl	8012b50 <__errno>
 800338c:	4603      	mov	r3, r0
 800338e:	220c      	movs	r2, #12
 8003390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003392:	f04f 33ff 	mov.w	r3, #4294967295
 8003396:	e009      	b.n	80033ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003398:	4b08      	ldr	r3, [pc, #32]	; (80033bc <_sbrk+0x64>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800339e:	4b07      	ldr	r3, [pc, #28]	; (80033bc <_sbrk+0x64>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4413      	add	r3, r2
 80033a6:	4a05      	ldr	r2, [pc, #20]	; (80033bc <_sbrk+0x64>)
 80033a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033aa:	68fb      	ldr	r3, [r7, #12]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20020000 	.word	0x20020000
 80033b8:	00000400 	.word	0x00000400
 80033bc:	20000424 	.word	0x20000424
 80033c0:	20003380 	.word	0x20003380

080033c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033c8:	4b08      	ldr	r3, [pc, #32]	; (80033ec <SystemInit+0x28>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	4a07      	ldr	r2, [pc, #28]	; (80033ec <SystemInit+0x28>)
 80033d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <SystemInit+0x28>)
 80033da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033de:	609a      	str	r2, [r3, #8]
#endif
}
 80033e0:	bf00      	nop
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f6:	f107 0320 	add.w	r3, r7, #32
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003400:	1d3b      	adds	r3, r7, #4
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	609a      	str	r2, [r3, #8]
 800340a:	60da      	str	r2, [r3, #12]
 800340c:	611a      	str	r2, [r3, #16]
 800340e:	615a      	str	r2, [r3, #20]
 8003410:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003412:	4b22      	ldr	r3, [pc, #136]	; (800349c <MX_TIM2_Init+0xac>)
 8003414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003418:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200-1;
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <MX_TIM2_Init+0xac>)
 800341c:	f640 427f 	movw	r2, #3199	; 0xc7f
 8003420:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003422:	4b1e      	ldr	r3, [pc, #120]	; (800349c <MX_TIM2_Init+0xac>)
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003428:	4b1c      	ldr	r3, [pc, #112]	; (800349c <MX_TIM2_Init+0xac>)
 800342a:	2263      	movs	r2, #99	; 0x63
 800342c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <MX_TIM2_Init+0xac>)
 8003430:	2200      	movs	r2, #0
 8003432:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <MX_TIM2_Init+0xac>)
 8003436:	2200      	movs	r2, #0
 8003438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800343a:	4818      	ldr	r0, [pc, #96]	; (800349c <MX_TIM2_Init+0xac>)
 800343c:	f007 f9b3 	bl	800a7a6 <HAL_TIM_PWM_Init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003446:	f7ff fd99 	bl	8002f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800344e:	2300      	movs	r3, #0
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003452:	f107 0320 	add.w	r3, r7, #32
 8003456:	4619      	mov	r1, r3
 8003458:	4810      	ldr	r0, [pc, #64]	; (800349c <MX_TIM2_Init+0xac>)
 800345a:	f007 ff4d 	bl	800b2f8 <HAL_TIMEx_MasterConfigSynchronization>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003464:	f7ff fd8a 	bl	8002f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003468:	2360      	movs	r3, #96	; 0x60
 800346a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003478:	1d3b      	adds	r3, r7, #4
 800347a:	2200      	movs	r2, #0
 800347c:	4619      	mov	r1, r3
 800347e:	4807      	ldr	r0, [pc, #28]	; (800349c <MX_TIM2_Init+0xac>)
 8003480:	f007 faa8 	bl	800a9d4 <HAL_TIM_PWM_ConfigChannel>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800348a:	f7ff fd77 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800348e:	4803      	ldr	r0, [pc, #12]	; (800349c <MX_TIM2_Init+0xac>)
 8003490:	f000 f94e 	bl	8003730 <HAL_TIM_MspPostInit>

}
 8003494:	bf00      	nop
 8003496:	3728      	adds	r7, #40	; 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	200014ac 	.word	0x200014ac

080034a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a6:	f107 0320 	add.w	r3, r7, #32
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034b0:	1d3b      	adds	r3, r7, #4
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	605a      	str	r2, [r3, #4]
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	611a      	str	r2, [r3, #16]
 80034be:	615a      	str	r2, [r3, #20]
 80034c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80034c2:	4b32      	ldr	r3, [pc, #200]	; (800358c <MX_TIM3_Init+0xec>)
 80034c4:	4a32      	ldr	r2, [pc, #200]	; (8003590 <MX_TIM3_Init+0xf0>)
 80034c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3200-1;
 80034c8:	4b30      	ldr	r3, [pc, #192]	; (800358c <MX_TIM3_Init+0xec>)
 80034ca:	f640 427f 	movw	r2, #3199	; 0xc7f
 80034ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d0:	4b2e      	ldr	r3, [pc, #184]	; (800358c <MX_TIM3_Init+0xec>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80034d6:	4b2d      	ldr	r3, [pc, #180]	; (800358c <MX_TIM3_Init+0xec>)
 80034d8:	2263      	movs	r2, #99	; 0x63
 80034da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034dc:	4b2b      	ldr	r3, [pc, #172]	; (800358c <MX_TIM3_Init+0xec>)
 80034de:	2200      	movs	r2, #0
 80034e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e2:	4b2a      	ldr	r3, [pc, #168]	; (800358c <MX_TIM3_Init+0xec>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80034e8:	4828      	ldr	r0, [pc, #160]	; (800358c <MX_TIM3_Init+0xec>)
 80034ea:	f007 f95c 	bl	800a7a6 <HAL_TIM_PWM_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80034f4:	f7ff fd42 	bl	8002f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003500:	f107 0320 	add.w	r3, r7, #32
 8003504:	4619      	mov	r1, r3
 8003506:	4821      	ldr	r0, [pc, #132]	; (800358c <MX_TIM3_Init+0xec>)
 8003508:	f007 fef6 	bl	800b2f8 <HAL_TIMEx_MasterConfigSynchronization>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003512:	f7ff fd33 	bl	8002f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003516:	2360      	movs	r3, #96	; 0x60
 8003518:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	2200      	movs	r2, #0
 800352a:	4619      	mov	r1, r3
 800352c:	4817      	ldr	r0, [pc, #92]	; (800358c <MX_TIM3_Init+0xec>)
 800352e:	f007 fa51 	bl	800a9d4 <HAL_TIM_PWM_ConfigChannel>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003538:	f7ff fd20 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	2204      	movs	r2, #4
 8003540:	4619      	mov	r1, r3
 8003542:	4812      	ldr	r0, [pc, #72]	; (800358c <MX_TIM3_Init+0xec>)
 8003544:	f007 fa46 	bl	800a9d4 <HAL_TIM_PWM_ConfigChannel>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800354e:	f7ff fd15 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	2208      	movs	r2, #8
 8003556:	4619      	mov	r1, r3
 8003558:	480c      	ldr	r0, [pc, #48]	; (800358c <MX_TIM3_Init+0xec>)
 800355a:	f007 fa3b 	bl	800a9d4 <HAL_TIM_PWM_ConfigChannel>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8003564:	f7ff fd0a 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	220c      	movs	r2, #12
 800356c:	4619      	mov	r1, r3
 800356e:	4807      	ldr	r0, [pc, #28]	; (800358c <MX_TIM3_Init+0xec>)
 8003570:	f007 fa30 	bl	800a9d4 <HAL_TIM_PWM_ConfigChannel>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800357a:	f7ff fcff 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800357e:	4803      	ldr	r0, [pc, #12]	; (800358c <MX_TIM3_Init+0xec>)
 8003580:	f000 f8d6 	bl	8003730 <HAL_TIM_MspPostInit>

}
 8003584:	bf00      	nop
 8003586:	3728      	adds	r7, #40	; 0x28
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200014f4 	.word	0x200014f4
 8003590:	40000400 	.word	0x40000400

08003594 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08e      	sub	sp, #56	; 0x38
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800359a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035a8:	f107 0320 	add.w	r3, r7, #32
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
 80035c0:	615a      	str	r2, [r3, #20]
 80035c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80035c4:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <MX_TIM4_Init+0xe4>)
 80035c6:	4a2d      	ldr	r2, [pc, #180]	; (800367c <MX_TIM4_Init+0xe8>)
 80035c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32000-1;
 80035ca:	4b2b      	ldr	r3, [pc, #172]	; (8003678 <MX_TIM4_Init+0xe4>)
 80035cc:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80035d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d2:	4b29      	ldr	r3, [pc, #164]	; (8003678 <MX_TIM4_Init+0xe4>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 80035d8:	4b27      	ldr	r3, [pc, #156]	; (8003678 <MX_TIM4_Init+0xe4>)
 80035da:	2209      	movs	r2, #9
 80035dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035de:	4b26      	ldr	r3, [pc, #152]	; (8003678 <MX_TIM4_Init+0xe4>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e4:	4b24      	ldr	r3, [pc, #144]	; (8003678 <MX_TIM4_Init+0xe4>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80035ea:	4823      	ldr	r0, [pc, #140]	; (8003678 <MX_TIM4_Init+0xe4>)
 80035ec:	f007 f88c 	bl	800a708 <HAL_TIM_Base_Init>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80035f6:	f7ff fcc1 	bl	8002f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003600:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003604:	4619      	mov	r1, r3
 8003606:	481c      	ldr	r0, [pc, #112]	; (8003678 <MX_TIM4_Init+0xe4>)
 8003608:	f007 faa2 	bl	800ab50 <HAL_TIM_ConfigClockSource>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003612:	f7ff fcb3 	bl	8002f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003616:	4818      	ldr	r0, [pc, #96]	; (8003678 <MX_TIM4_Init+0xe4>)
 8003618:	f007 f8c5 	bl	800a7a6 <HAL_TIM_PWM_Init>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003622:	f7ff fcab 	bl	8002f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003626:	2320      	movs	r3, #32
 8003628:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800362e:	f107 0320 	add.w	r3, r7, #32
 8003632:	4619      	mov	r1, r3
 8003634:	4810      	ldr	r0, [pc, #64]	; (8003678 <MX_TIM4_Init+0xe4>)
 8003636:	f007 fe5f 	bl	800b2f8 <HAL_TIMEx_MasterConfigSynchronization>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003640:	f7ff fc9c 	bl	8002f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003644:	2360      	movs	r3, #96	; 0x60
 8003646:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003654:	1d3b      	adds	r3, r7, #4
 8003656:	2208      	movs	r2, #8
 8003658:	4619      	mov	r1, r3
 800365a:	4807      	ldr	r0, [pc, #28]	; (8003678 <MX_TIM4_Init+0xe4>)
 800365c:	f007 f9ba 	bl	800a9d4 <HAL_TIM_PWM_ConfigChannel>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003666:	f7ff fc89 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800366a:	4803      	ldr	r0, [pc, #12]	; (8003678 <MX_TIM4_Init+0xe4>)
 800366c:	f000 f860 	bl	8003730 <HAL_TIM_MspPostInit>

}
 8003670:	bf00      	nop
 8003672:	3738      	adds	r7, #56	; 0x38
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20001464 	.word	0x20001464
 800367c:	40000800 	.word	0x40000800

08003680 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003690:	d10e      	bne.n	80036b0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_TIM_PWM_MspInit+0x64>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <HAL_TIM_PWM_MspInit+0x64>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <HAL_TIM_PWM_MspInit+0x64>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80036ae:	e012      	b.n	80036d6 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <HAL_TIM_PWM_MspInit+0x68>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d10d      	bne.n	80036d6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_TIM_PWM_MspInit+0x64>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	4a08      	ldr	r2, [pc, #32]	; (80036e4 <HAL_TIM_PWM_MspInit+0x64>)
 80036c4:	f043 0302 	orr.w	r3, r3, #2
 80036c8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_TIM_PWM_MspInit+0x64>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]
}
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40000400 	.word	0x40000400

080036ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <HAL_TIM_Base_MspInit+0x3c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d10d      	bne.n	800371a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <HAL_TIM_Base_MspInit+0x40>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	4a09      	ldr	r2, [pc, #36]	; (800372c <HAL_TIM_Base_MspInit+0x40>)
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	6413      	str	r3, [r2, #64]	; 0x40
 800370e:	4b07      	ldr	r3, [pc, #28]	; (800372c <HAL_TIM_Base_MspInit+0x40>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40000800 	.word	0x40000800
 800372c:	40023800 	.word	0x40023800

08003730 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b08c      	sub	sp, #48	; 0x30
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003738:	f107 031c 	add.w	r3, r7, #28
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003750:	d11e      	bne.n	8003790 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	4b43      	ldr	r3, [pc, #268]	; (8003864 <HAL_TIM_MspPostInit+0x134>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	4a42      	ldr	r2, [pc, #264]	; (8003864 <HAL_TIM_MspPostInit+0x134>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6313      	str	r3, [r2, #48]	; 0x30
 8003762:	4b40      	ldr	r3, [pc, #256]	; (8003864 <HAL_TIM_MspPostInit+0x134>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800376e:	2320      	movs	r3, #32
 8003770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003772:	2302      	movs	r3, #2
 8003774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003776:	2300      	movs	r3, #0
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377a:	2300      	movs	r3, #0
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800377e:	2301      	movs	r3, #1
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003782:	f107 031c 	add.w	r3, r7, #28
 8003786:	4619      	mov	r1, r3
 8003788:	4837      	ldr	r0, [pc, #220]	; (8003868 <HAL_TIM_MspPostInit+0x138>)
 800378a:	f003 fd87 	bl	800729c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800378e:	e065      	b.n	800385c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM3)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a35      	ldr	r2, [pc, #212]	; (800386c <HAL_TIM_MspPostInit+0x13c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d13c      	bne.n	8003814 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_TIM_MspPostInit+0x134>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	4a30      	ldr	r2, [pc, #192]	; (8003864 <HAL_TIM_MspPostInit+0x134>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6313      	str	r3, [r2, #48]	; 0x30
 80037aa:	4b2e      	ldr	r3, [pc, #184]	; (8003864 <HAL_TIM_MspPostInit+0x134>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <HAL_TIM_MspPostInit+0x134>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a29      	ldr	r2, [pc, #164]	; (8003864 <HAL_TIM_MspPostInit+0x134>)
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_TIM_MspPostInit+0x134>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037d2:	23c0      	movs	r3, #192	; 0xc0
 80037d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d6:	2302      	movs	r3, #2
 80037d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037de:	2300      	movs	r3, #0
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037e2:	2302      	movs	r3, #2
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e6:	f107 031c 	add.w	r3, r7, #28
 80037ea:	4619      	mov	r1, r3
 80037ec:	481e      	ldr	r0, [pc, #120]	; (8003868 <HAL_TIM_MspPostInit+0x138>)
 80037ee:	f003 fd55 	bl	800729c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037f2:	2303      	movs	r3, #3
 80037f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f6:	2302      	movs	r3, #2
 80037f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fe:	2300      	movs	r3, #0
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003802:	2302      	movs	r3, #2
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003806:	f107 031c 	add.w	r3, r7, #28
 800380a:	4619      	mov	r1, r3
 800380c:	4818      	ldr	r0, [pc, #96]	; (8003870 <HAL_TIM_MspPostInit+0x140>)
 800380e:	f003 fd45 	bl	800729c <HAL_GPIO_Init>
}
 8003812:	e023      	b.n	800385c <HAL_TIM_MspPostInit+0x12c>
  else if(timHandle->Instance==TIM4)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a16      	ldr	r2, [pc, #88]	; (8003874 <HAL_TIM_MspPostInit+0x144>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d11e      	bne.n	800385c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_TIM_MspPostInit+0x134>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a0f      	ldr	r2, [pc, #60]	; (8003864 <HAL_TIM_MspPostInit+0x134>)
 8003828:	f043 0302 	orr.w	r3, r3, #2
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <HAL_TIM_MspPostInit+0x134>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800383a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800383e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003840:	2302      	movs	r3, #2
 8003842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003848:	2300      	movs	r3, #0
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800384c:	2302      	movs	r3, #2
 800384e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	4619      	mov	r1, r3
 8003856:	4806      	ldr	r0, [pc, #24]	; (8003870 <HAL_TIM_MspPostInit+0x140>)
 8003858:	f003 fd20 	bl	800729c <HAL_GPIO_Init>
}
 800385c:	bf00      	nop
 800385e:	3730      	adds	r7, #48	; 0x30
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	40020000 	.word	0x40020000
 800386c:	40000400 	.word	0x40000400
 8003870:	40020400 	.word	0x40020400
 8003874:	40000800 	.word	0x40000800

08003878 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern I2C_HandleTypeDef hi2c2;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	607b      	str	r3, [r7, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	72fb      	strb	r3, [r7, #11]
 8003886:	4613      	mov	r3, r2
 8003888:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 800388a:	7afb      	ldrb	r3, [r7, #11]
 800388c:	2b28      	cmp	r3, #40	; 0x28
 800388e:	d006      	beq.n	800389e <u8x8_stm32_gpio_and_delay+0x26>
 8003890:	2b29      	cmp	r3, #41	; 0x29
 8003892:	d105      	bne.n	80038a0 <u8x8_stm32_gpio_and_delay+0x28>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8003894:	7abb      	ldrb	r3, [r7, #10]
 8003896:	4618      	mov	r0, r3
 8003898:	f002 fbfc 	bl	8006094 <HAL_Delay>
		break;
 800389c:	e000      	b.n	80038a0 <u8x8_stm32_gpio_and_delay+0x28>
		break;
 800389e:	bf00      	nop
	}
	return 1;
 80038a0:	2301      	movs	r3, #1
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <u8x8_byte_stm32_hw_i2c>:


uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	607b      	str	r3, [r7, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	72fb      	strb	r3, [r7, #11]
 80038ba:	4613      	mov	r3, r2
 80038bc:	72bb      	strb	r3, [r7, #10]
	/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch(msg)
 80038be:	7afb      	ldrb	r3, [r7, #11]
 80038c0:	3b14      	subs	r3, #20
 80038c2:	2b0c      	cmp	r3, #12
 80038c4:	d847      	bhi.n	8003956 <u8x8_byte_stm32_hw_i2c+0xaa>
 80038c6:	a201      	add	r2, pc, #4	; (adr r2, 80038cc <u8x8_byte_stm32_hw_i2c+0x20>)
 80038c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038cc:	0800395b 	.word	0x0800395b
 80038d0:	08003957 	.word	0x08003957
 80038d4:	08003957 	.word	0x08003957
 80038d8:	08003901 	.word	0x08003901
 80038dc:	08003931 	.word	0x08003931
 80038e0:	08003939 	.word	0x08003939
 80038e4:	08003957 	.word	0x08003957
 80038e8:	08003957 	.word	0x08003957
 80038ec:	08003957 	.word	0x08003957
 80038f0:	08003957 	.word	0x08003957
 80038f4:	08003957 	.word	0x08003957
 80038f8:	08003957 	.word	0x08003957
 80038fc:	0800395b 	.word	0x0800395b
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	617b      	str	r3, [r7, #20]
		while( arg_int > 0 )
 8003904:	e010      	b.n	8003928 <u8x8_byte_stm32_hw_i2c+0x7c>
		{
			buffer[buf_idx++] = *data;
 8003906:	4b19      	ldr	r3, [pc, #100]	; (800396c <u8x8_byte_stm32_hw_i2c+0xc0>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	b2d1      	uxtb	r1, r2
 800390e:	4a17      	ldr	r2, [pc, #92]	; (800396c <u8x8_byte_stm32_hw_i2c+0xc0>)
 8003910:	7011      	strb	r1, [r2, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	7819      	ldrb	r1, [r3, #0]
 8003918:	4b15      	ldr	r3, [pc, #84]	; (8003970 <u8x8_byte_stm32_hw_i2c+0xc4>)
 800391a:	5499      	strb	r1, [r3, r2]
			data++;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3301      	adds	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
			arg_int--;
 8003922:	7abb      	ldrb	r3, [r7, #10]
 8003924:	3b01      	subs	r3, #1
 8003926:	72bb      	strb	r3, [r7, #10]
		while( arg_int > 0 )
 8003928:	7abb      	ldrb	r3, [r7, #10]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1eb      	bne.n	8003906 <u8x8_byte_stm32_hw_i2c+0x5a>
		}
		break;
 800392e:	e017      	b.n	8003960 <u8x8_byte_stm32_hw_i2c+0xb4>
		/* add your custom code to init i2c subsystem */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <u8x8_byte_stm32_hw_i2c+0xc0>)
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
		break;
 8003936:	e013      	b.n	8003960 <u8x8_byte_stm32_hw_i2c+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		if(HAL_I2C_Master_Transmit(&hi2c2, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <u8x8_byte_stm32_hw_i2c+0xc0>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	b29b      	uxth	r3, r3
 800393e:	2264      	movs	r2, #100	; 0x64
 8003940:	9200      	str	r2, [sp, #0]
 8003942:	4a0b      	ldr	r2, [pc, #44]	; (8003970 <u8x8_byte_stm32_hw_i2c+0xc4>)
 8003944:	2178      	movs	r1, #120	; 0x78
 8003946:	480b      	ldr	r0, [pc, #44]	; (8003974 <u8x8_byte_stm32_hw_i2c+0xc8>)
 8003948:	f003 ffa2 	bl	8007890 <HAL_I2C_Master_Transmit>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <u8x8_byte_stm32_hw_i2c+0xb2>
 8003952:	2300      	movs	r3, #0
 8003954:	e005      	b.n	8003962 <u8x8_byte_stm32_hw_i2c+0xb6>
		break;
	default:
		return 0;
 8003956:	2300      	movs	r3, #0
 8003958:	e003      	b.n	8003962 <u8x8_byte_stm32_hw_i2c+0xb6>
		break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <u8x8_byte_stm32_hw_i2c+0xb4>
		break;
 800395e:	bf00      	nop
	}
	return 1;
 8003960:	2301      	movs	r3, #1
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000428 	.word	0x20000428
 8003970:	2000042c 	.word	0x2000042c
 8003974:	20000db0 	.word	0x20000db0

08003978 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800397c:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <MX_USART1_UART_Init+0x4c>)
 800397e:	4a12      	ldr	r2, [pc, #72]	; (80039c8 <MX_USART1_UART_Init+0x50>)
 8003980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003982:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <MX_USART1_UART_Init+0x4c>)
 8003984:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800398a:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <MX_USART1_UART_Init+0x4c>)
 800398c:	2200      	movs	r2, #0
 800398e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <MX_USART1_UART_Init+0x4c>)
 8003992:	2200      	movs	r2, #0
 8003994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003996:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <MX_USART1_UART_Init+0x4c>)
 8003998:	2200      	movs	r2, #0
 800399a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <MX_USART1_UART_Init+0x4c>)
 800399e:	220c      	movs	r2, #12
 80039a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039a2:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <MX_USART1_UART_Init+0x4c>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <MX_USART1_UART_Init+0x4c>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039ae:	4805      	ldr	r0, [pc, #20]	; (80039c4 <MX_USART1_UART_Init+0x4c>)
 80039b0:	f007 fd1e 	bl	800b3f0 <HAL_UART_Init>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80039ba:	f7ff fadf 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000159c 	.word	0x2000159c
 80039c8:	40011000 	.word	0x40011000

080039cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039d2:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <MX_USART2_UART_Init+0x50>)
 80039d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80039dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039f0:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039f2:	220c      	movs	r2, #12
 80039f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <MX_USART2_UART_Init+0x4c>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a02:	4805      	ldr	r0, [pc, #20]	; (8003a18 <MX_USART2_UART_Init+0x4c>)
 8003a04:	f007 fcf4 	bl	800b3f0 <HAL_UART_Init>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a0e:	f7ff fab5 	bl	8002f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200015e0 	.word	0x200015e0
 8003a1c:	40004400 	.word	0x40004400

08003a20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08c      	sub	sp, #48	; 0x30
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a28:	f107 031c 	add.w	r3, r7, #28
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	60da      	str	r2, [r3, #12]
 8003a36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a4d      	ldr	r2, [pc, #308]	; (8003b74 <HAL_UART_MspInit+0x154>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d15b      	bne.n	8003afa <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	4b4c      	ldr	r3, [pc, #304]	; (8003b78 <HAL_UART_MspInit+0x158>)
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	4a4b      	ldr	r2, [pc, #300]	; (8003b78 <HAL_UART_MspInit+0x158>)
 8003a4c:	f043 0310 	orr.w	r3, r3, #16
 8003a50:	6453      	str	r3, [r2, #68]	; 0x44
 8003a52:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <HAL_UART_MspInit+0x158>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]
 8003a62:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <HAL_UART_MspInit+0x158>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	4a44      	ldr	r2, [pc, #272]	; (8003b78 <HAL_UART_MspInit+0x158>)
 8003a68:	f043 0301 	orr.w	r3, r3, #1
 8003a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6e:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <HAL_UART_MspInit+0x158>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003a7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a80:	2302      	movs	r3, #2
 8003a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a8c:	2307      	movs	r3, #7
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a90:	f107 031c 	add.w	r3, r7, #28
 8003a94:	4619      	mov	r1, r3
 8003a96:	4839      	ldr	r0, [pc, #228]	; (8003b7c <HAL_UART_MspInit+0x15c>)
 8003a98:	f003 fc00 	bl	800729c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003a9c:	4b38      	ldr	r3, [pc, #224]	; (8003b80 <HAL_UART_MspInit+0x160>)
 8003a9e:	4a39      	ldr	r2, [pc, #228]	; (8003b84 <HAL_UART_MspInit+0x164>)
 8003aa0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003aa2:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <HAL_UART_MspInit+0x160>)
 8003aa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003aa8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aaa:	4b35      	ldr	r3, [pc, #212]	; (8003b80 <HAL_UART_MspInit+0x160>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ab0:	4b33      	ldr	r3, [pc, #204]	; (8003b80 <HAL_UART_MspInit+0x160>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ab6:	4b32      	ldr	r3, [pc, #200]	; (8003b80 <HAL_UART_MspInit+0x160>)
 8003ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003abc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003abe:	4b30      	ldr	r3, [pc, #192]	; (8003b80 <HAL_UART_MspInit+0x160>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ac4:	4b2e      	ldr	r3, [pc, #184]	; (8003b80 <HAL_UART_MspInit+0x160>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003aca:	4b2d      	ldr	r3, [pc, #180]	; (8003b80 <HAL_UART_MspInit+0x160>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ad0:	4b2b      	ldr	r3, [pc, #172]	; (8003b80 <HAL_UART_MspInit+0x160>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ad6:	4b2a      	ldr	r3, [pc, #168]	; (8003b80 <HAL_UART_MspInit+0x160>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003adc:	4828      	ldr	r0, [pc, #160]	; (8003b80 <HAL_UART_MspInit+0x160>)
 8003ade:	f002 ffdb 	bl	8006a98 <HAL_DMA_Init>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003ae8:	f7ff fa48 	bl	8002f7c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <HAL_UART_MspInit+0x160>)
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38
 8003af2:	4a23      	ldr	r2, [pc, #140]	; (8003b80 <HAL_UART_MspInit+0x160>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003af8:	e038      	b.n	8003b6c <HAL_UART_MspInit+0x14c>
  else if(uartHandle->Instance==USART2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a22      	ldr	r2, [pc, #136]	; (8003b88 <HAL_UART_MspInit+0x168>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d133      	bne.n	8003b6c <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_UART_MspInit+0x158>)
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	4a1a      	ldr	r2, [pc, #104]	; (8003b78 <HAL_UART_MspInit+0x158>)
 8003b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b12:	6413      	str	r3, [r2, #64]	; 0x40
 8003b14:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <HAL_UART_MspInit+0x158>)
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <HAL_UART_MspInit+0x158>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <HAL_UART_MspInit+0x158>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_UART_MspInit+0x158>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b40:	2302      	movs	r3, #2
 8003b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b4c:	2307      	movs	r3, #7
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b50:	f107 031c 	add.w	r3, r7, #28
 8003b54:	4619      	mov	r1, r3
 8003b56:	4809      	ldr	r0, [pc, #36]	; (8003b7c <HAL_UART_MspInit+0x15c>)
 8003b58:	f003 fba0 	bl	800729c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2100      	movs	r1, #0
 8003b60:	2026      	movs	r0, #38	; 0x26
 8003b62:	f002 ff62 	bl	8006a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b66:	2026      	movs	r0, #38	; 0x26
 8003b68:	f002 ff7b 	bl	8006a62 <HAL_NVIC_EnableIRQ>
}
 8003b6c:	bf00      	nop
 8003b6e:	3730      	adds	r7, #48	; 0x30
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40011000 	.word	0x40011000
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40020000 	.word	0x40020000
 8003b80:	2000153c 	.word	0x2000153c
 8003b84:	40026440 	.word	0x40026440
 8003b88:	40004400 	.word	0x40004400

08003b8c <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	4608      	mov	r0, r1
 8003b96:	4611      	mov	r1, r2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	70fb      	strb	r3, [r7, #3]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	70bb      	strb	r3, [r7, #2]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	707b      	strb	r3, [r7, #1]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	787b      	ldrb	r3, [r7, #1]
 8003baa:	4413      	add	r3, r2
 8003bac:	b2d8      	uxtb	r0, r3
 8003bae:	78ba      	ldrb	r2, [r7, #2]
 8003bb0:	7c3b      	ldrb	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	78ba      	ldrb	r2, [r7, #2]
 8003bb8:	78f9      	ldrb	r1, [r7, #3]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f001 fbe6 	bl	8005390 <u8g2_IsIntersection>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d012      	beq.n	8003bf0 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8003bca:	e00d      	b.n	8003be8 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8003bcc:	787b      	ldrb	r3, [r7, #1]
 8003bce:	78ba      	ldrb	r2, [r7, #2]
 8003bd0:	78f9      	ldrb	r1, [r7, #3]
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	9000      	str	r0, [sp, #0]
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f001 fabf 	bl	800515a <u8g2_DrawHVLine>
    y++;    
 8003bdc:	78bb      	ldrb	r3, [r7, #2]
 8003bde:	3301      	adds	r3, #1
 8003be0:	70bb      	strb	r3, [r7, #2]
    h--;
 8003be2:	7c3b      	ldrb	r3, [r7, #16]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	743b      	strb	r3, [r7, #16]
  while( h != 0 )
 8003be8:	7c3b      	ldrb	r3, [r7, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1ee      	bne.n	8003bcc <u8g2_DrawBox+0x40>
 8003bee:	e000      	b.n	8003bf2 <u8g2_DrawBox+0x66>
    return;
 8003bf0:	bf00      	nop
  }
}
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <u8g2_DrawRBox>:




void u8g2_DrawRBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	4608      	mov	r0, r1
 8003c02:	4611      	mov	r1, r2
 8003c04:	461a      	mov	r2, r3
 8003c06:	4603      	mov	r3, r0
 8003c08:	70fb      	strb	r3, [r7, #3]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	70bb      	strb	r3, [r7, #2]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;
  u8g2_uint_t yl, xr;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	787b      	ldrb	r3, [r7, #1]
 8003c16:	4413      	add	r3, r2
 8003c18:	b2d8      	uxtb	r0, r3
 8003c1a:	78ba      	ldrb	r2, [r7, #2]
 8003c1c:	7e3b      	ldrb	r3, [r7, #24]
 8003c1e:	4413      	add	r3, r2
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	78ba      	ldrb	r2, [r7, #2]
 8003c24:	78f9      	ldrb	r1, [r7, #3]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	4603      	mov	r3, r0
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f001 fbb0 	bl	8005390 <u8g2_IsIntersection>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 808c 	beq.w	8003d50 <u8g2_DrawRBox+0x158>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	73fb      	strb	r3, [r7, #15]
  xl += r;
 8003c3c:	7bfa      	ldrb	r2, [r7, #15]
 8003c3e:	7f3b      	ldrb	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8003c44:	78bb      	ldrb	r3, [r7, #2]
 8003c46:	73bb      	strb	r3, [r7, #14]
  yu += r;
 8003c48:	7bba      	ldrb	r2, [r7, #14]
 8003c4a:	7f3b      	ldrb	r3, [r7, #28]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	73bb      	strb	r3, [r7, #14]
 
  xr = x;
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	737b      	strb	r3, [r7, #13]
  xr += w;
 8003c54:	7b7a      	ldrb	r2, [r7, #13]
 8003c56:	787b      	ldrb	r3, [r7, #1]
 8003c58:	4413      	add	r3, r2
 8003c5a:	737b      	strb	r3, [r7, #13]
  xr -= r;
 8003c5c:	7b7a      	ldrb	r2, [r7, #13]
 8003c5e:	7f3b      	ldrb	r3, [r7, #28]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	737b      	strb	r3, [r7, #13]
  xr -= 1;
 8003c64:	7b7b      	ldrb	r3, [r7, #13]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	737b      	strb	r3, [r7, #13]
  
  yl = y;
 8003c6a:	78bb      	ldrb	r3, [r7, #2]
 8003c6c:	733b      	strb	r3, [r7, #12]
  yl += h;
 8003c6e:	7b3a      	ldrb	r2, [r7, #12]
 8003c70:	7e3b      	ldrb	r3, [r7, #24]
 8003c72:	4413      	add	r3, r2
 8003c74:	733b      	strb	r3, [r7, #12]
  yl -= r; 
 8003c76:	7b3a      	ldrb	r2, [r7, #12]
 8003c78:	7f3b      	ldrb	r3, [r7, #28]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	733b      	strb	r3, [r7, #12]
  yl -= 1;
 8003c7e:	7b3b      	ldrb	r3, [r7, #12]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	733b      	strb	r3, [r7, #12]

  u8g2_DrawDisc(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8003c84:	7f3b      	ldrb	r3, [r7, #28]
 8003c86:	7bba      	ldrb	r2, [r7, #14]
 8003c88:	7bf9      	ldrb	r1, [r7, #15]
 8003c8a:	2002      	movs	r0, #2
 8003c8c:	9000      	str	r0, [sp, #0]
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fbec 	bl	800446c <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8003c94:	7f3b      	ldrb	r3, [r7, #28]
 8003c96:	7bba      	ldrb	r2, [r7, #14]
 8003c98:	7b79      	ldrb	r1, [r7, #13]
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	9000      	str	r0, [sp, #0]
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fbe4 	bl	800446c <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8003ca4:	7f3b      	ldrb	r3, [r7, #28]
 8003ca6:	7b3a      	ldrb	r2, [r7, #12]
 8003ca8:	7bf9      	ldrb	r1, [r7, #15]
 8003caa:	2004      	movs	r0, #4
 8003cac:	9000      	str	r0, [sp, #0]
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fbdc 	bl	800446c <u8g2_DrawDisc>
  u8g2_DrawDisc(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8003cb4:	7f3b      	ldrb	r3, [r7, #28]
 8003cb6:	7b3a      	ldrb	r2, [r7, #12]
 8003cb8:	7b79      	ldrb	r1, [r7, #13]
 8003cba:	2008      	movs	r0, #8
 8003cbc:	9000      	str	r0, [sp, #0]
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fbd4 	bl	800446c <u8g2_DrawDisc>

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8003cc4:	787b      	ldrb	r3, [r7, #1]
 8003cc6:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003cc8:	7afa      	ldrb	r2, [r7, #11]
 8003cca:	7f3b      	ldrb	r3, [r7, #28]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003cd0:	7afa      	ldrb	r2, [r7, #11]
 8003cd2:	7f3b      	ldrb	r3, [r7, #28]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	72fb      	strb	r3, [r7, #11]
    xl++;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	73fb      	strb	r3, [r7, #15]
    yu++;
 8003cde:	7bbb      	ldrb	r3, [r7, #14]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 8003ce4:	7afb      	ldrb	r3, [r7, #11]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d918      	bls.n	8003d1c <u8g2_DrawRBox+0x124>
    {
      ww -= 2;
 8003cea:	7afb      	ldrb	r3, [r7, #11]
 8003cec:	3b02      	subs	r3, #2
 8003cee:	72fb      	strb	r3, [r7, #11]
      u8g2_DrawBox(u8g2, xl, y, ww, r+1);
 8003cf0:	7f3b      	ldrb	r3, [r7, #28]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	7af8      	ldrb	r0, [r7, #11]
 8003cf8:	78ba      	ldrb	r2, [r7, #2]
 8003cfa:	7bf9      	ldrb	r1, [r7, #15]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	4603      	mov	r3, r0
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff43 	bl	8003b8c <u8g2_DrawBox>
      u8g2_DrawBox(u8g2, xl, yl, ww, r+1);
 8003d06:	7f3b      	ldrb	r3, [r7, #28]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	7af8      	ldrb	r0, [r7, #11]
 8003d0e:	7b3a      	ldrb	r2, [r7, #12]
 8003d10:	7bf9      	ldrb	r1, [r7, #15]
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	4603      	mov	r3, r0
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff ff38 	bl	8003b8c <u8g2_DrawBox>
    }
    
    hh = h;
 8003d1c:	7e3b      	ldrb	r3, [r7, #24]
 8003d1e:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003d20:	7aba      	ldrb	r2, [r7, #10]
 8003d22:	7f3b      	ldrb	r3, [r7, #28]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003d28:	7aba      	ldrb	r2, [r7, #10]
 8003d2a:	7f3b      	ldrb	r3, [r7, #28]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	72bb      	strb	r3, [r7, #10]
    //h--;
    if ( hh >= 3 )
 8003d30:	7abb      	ldrb	r3, [r7, #10]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d90d      	bls.n	8003d52 <u8g2_DrawRBox+0x15a>
    {
      hh -= 2;
 8003d36:	7abb      	ldrb	r3, [r7, #10]
 8003d38:	3b02      	subs	r3, #2
 8003d3a:	72bb      	strb	r3, [r7, #10]
      u8g2_DrawBox(u8g2, x, yu, w, hh);
 8003d3c:	7878      	ldrb	r0, [r7, #1]
 8003d3e:	7bba      	ldrb	r2, [r7, #14]
 8003d40:	78f9      	ldrb	r1, [r7, #3]
 8003d42:	7abb      	ldrb	r3, [r7, #10]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	4603      	mov	r3, r0
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ff1f 	bl	8003b8c <u8g2_DrawBox>
 8003d4e:	e000      	b.n	8003d52 <u8g2_DrawRBox+0x15a>
    return;
 8003d50:	bf00      	nop
    }
  }
}
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <u8g2_DrawRFrame>:


void u8g2_DrawRFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	4608      	mov	r0, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	461a      	mov	r2, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	70fb      	strb	r3, [r7, #3]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	70bb      	strb	r3, [r7, #2]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t xl, yu;

#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	787b      	ldrb	r3, [r7, #1]
 8003d76:	4413      	add	r3, r2
 8003d78:	b2d8      	uxtb	r0, r3
 8003d7a:	78ba      	ldrb	r2, [r7, #2]
 8003d7c:	7e3b      	ldrb	r3, [r7, #24]
 8003d7e:	4413      	add	r3, r2
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	78ba      	ldrb	r2, [r7, #2]
 8003d84:	78f9      	ldrb	r1, [r7, #3]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	4603      	mov	r3, r0
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f001 fb00 	bl	8005390 <u8g2_IsIntersection>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8091 	beq.w	8003eba <u8g2_DrawRFrame+0x162>
    return;
#endif /* U8G2_WITH_INTERSECTION */

  xl = x;
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	73fb      	strb	r3, [r7, #15]
  xl += r;
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	7f3b      	ldrb	r3, [r7, #28]
 8003da0:	4413      	add	r3, r2
 8003da2:	73fb      	strb	r3, [r7, #15]
  yu = y;
 8003da4:	78bb      	ldrb	r3, [r7, #2]
 8003da6:	73bb      	strb	r3, [r7, #14]
  yu += r;
 8003da8:	7bba      	ldrb	r2, [r7, #14]
 8003daa:	7f3b      	ldrb	r3, [r7, #28]
 8003dac:	4413      	add	r3, r2
 8003dae:	73bb      	strb	r3, [r7, #14]
 
  {
    u8g2_uint_t yl, xr;
      
    xr = x;
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	737b      	strb	r3, [r7, #13]
    xr += w;
 8003db4:	7b7a      	ldrb	r2, [r7, #13]
 8003db6:	787b      	ldrb	r3, [r7, #1]
 8003db8:	4413      	add	r3, r2
 8003dba:	737b      	strb	r3, [r7, #13]
    xr -= r;
 8003dbc:	7b7a      	ldrb	r2, [r7, #13]
 8003dbe:	7f3b      	ldrb	r3, [r7, #28]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	737b      	strb	r3, [r7, #13]
    xr -= 1;
 8003dc4:	7b7b      	ldrb	r3, [r7, #13]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	737b      	strb	r3, [r7, #13]
    
    yl = y;
 8003dca:	78bb      	ldrb	r3, [r7, #2]
 8003dcc:	733b      	strb	r3, [r7, #12]
    yl += h;
 8003dce:	7b3a      	ldrb	r2, [r7, #12]
 8003dd0:	7e3b      	ldrb	r3, [r7, #24]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	733b      	strb	r3, [r7, #12]
    yl -= r; 
 8003dd6:	7b3a      	ldrb	r2, [r7, #12]
 8003dd8:	7f3b      	ldrb	r3, [r7, #28]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	733b      	strb	r3, [r7, #12]
    yl -= 1;
 8003dde:	7b3b      	ldrb	r3, [r7, #12]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	733b      	strb	r3, [r7, #12]

    u8g2_DrawCircle(u8g2, xl, yu, r, U8G2_DRAW_UPPER_LEFT);
 8003de4:	7f3b      	ldrb	r3, [r7, #28]
 8003de6:	7bba      	ldrb	r2, [r7, #14]
 8003de8:	7bf9      	ldrb	r1, [r7, #15]
 8003dea:	2002      	movs	r0, #2
 8003dec:	9000      	str	r0, [sp, #0]
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fa1a 	bl	8004228 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yu, r, U8G2_DRAW_UPPER_RIGHT);
 8003df4:	7f3b      	ldrb	r3, [r7, #28]
 8003df6:	7bba      	ldrb	r2, [r7, #14]
 8003df8:	7b79      	ldrb	r1, [r7, #13]
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	9000      	str	r0, [sp, #0]
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fa12 	bl	8004228 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xl, yl, r, U8G2_DRAW_LOWER_LEFT);
 8003e04:	7f3b      	ldrb	r3, [r7, #28]
 8003e06:	7b3a      	ldrb	r2, [r7, #12]
 8003e08:	7bf9      	ldrb	r1, [r7, #15]
 8003e0a:	2004      	movs	r0, #4
 8003e0c:	9000      	str	r0, [sp, #0]
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fa0a 	bl	8004228 <u8g2_DrawCircle>
    u8g2_DrawCircle(u8g2, xr, yl, r, U8G2_DRAW_LOWER_RIGHT);
 8003e14:	7f3b      	ldrb	r3, [r7, #28]
 8003e16:	7b3a      	ldrb	r2, [r7, #12]
 8003e18:	7b79      	ldrb	r1, [r7, #13]
 8003e1a:	2008      	movs	r0, #8
 8003e1c:	9000      	str	r0, [sp, #0]
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fa02 	bl	8004228 <u8g2_DrawCircle>
  }

  {
    u8g2_uint_t ww, hh;

    ww = w;
 8003e24:	787b      	ldrb	r3, [r7, #1]
 8003e26:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003e28:	7afa      	ldrb	r2, [r7, #11]
 8003e2a:	7f3b      	ldrb	r3, [r7, #28]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	72fb      	strb	r3, [r7, #11]
    ww -= r;
 8003e30:	7afa      	ldrb	r2, [r7, #11]
 8003e32:	7f3b      	ldrb	r3, [r7, #28]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	72fb      	strb	r3, [r7, #11]
    hh = h;
 8003e38:	7e3b      	ldrb	r3, [r7, #24]
 8003e3a:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003e3c:	7aba      	ldrb	r2, [r7, #10]
 8003e3e:	7f3b      	ldrb	r3, [r7, #28]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	72bb      	strb	r3, [r7, #10]
    hh -= r;
 8003e44:	7aba      	ldrb	r2, [r7, #10]
 8003e46:	7f3b      	ldrb	r3, [r7, #28]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	72bb      	strb	r3, [r7, #10]
    
    xl++;
 8003e4c:	7bfb      	ldrb	r3, [r7, #15]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
    yu++;
 8003e52:	7bbb      	ldrb	r3, [r7, #14]
 8003e54:	3301      	adds	r3, #1
 8003e56:	73bb      	strb	r3, [r7, #14]
    
    if ( ww >= 3 )
 8003e58:	7afb      	ldrb	r3, [r7, #11]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d914      	bls.n	8003e88 <u8g2_DrawRFrame+0x130>
    {
      ww -= 2;
 8003e5e:	7afb      	ldrb	r3, [r7, #11]
 8003e60:	3b02      	subs	r3, #2
 8003e62:	72fb      	strb	r3, [r7, #11]
      h--;
 8003e64:	7e3b      	ldrb	r3, [r7, #24]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	763b      	strb	r3, [r7, #24]
      u8g2_DrawHLine(u8g2, xl, y, ww);
 8003e6a:	7afb      	ldrb	r3, [r7, #11]
 8003e6c:	78ba      	ldrb	r2, [r7, #2]
 8003e6e:	7bf9      	ldrb	r1, [r7, #15]
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f001 f9f5 	bl	8005260 <u8g2_DrawHLine>
      u8g2_DrawHLine(u8g2, xl, y+h, ww);
 8003e76:	78ba      	ldrb	r2, [r7, #2]
 8003e78:	7e3b      	ldrb	r3, [r7, #24]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	7afb      	ldrb	r3, [r7, #11]
 8003e80:	7bf9      	ldrb	r1, [r7, #15]
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f001 f9ec 	bl	8005260 <u8g2_DrawHLine>
    }
    
    if ( hh >= 3 )
 8003e88:	7abb      	ldrb	r3, [r7, #10]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d916      	bls.n	8003ebc <u8g2_DrawRFrame+0x164>
    {
      hh -= 2;
 8003e8e:	7abb      	ldrb	r3, [r7, #10]
 8003e90:	3b02      	subs	r3, #2
 8003e92:	72bb      	strb	r3, [r7, #10]
      w--;
 8003e94:	787b      	ldrb	r3, [r7, #1]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	707b      	strb	r3, [r7, #1]
      u8g2_DrawVLine(u8g2, x, yu, hh);
 8003e9a:	7abb      	ldrb	r3, [r7, #10]
 8003e9c:	7bba      	ldrb	r2, [r7, #14]
 8003e9e:	78f9      	ldrb	r1, [r7, #3]
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f001 f9f6 	bl	8005292 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x+w, yu, hh);
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	787b      	ldrb	r3, [r7, #1]
 8003eaa:	4413      	add	r3, r2
 8003eac:	b2d9      	uxtb	r1, r3
 8003eae:	7abb      	ldrb	r3, [r7, #10]
 8003eb0:	7bba      	ldrb	r2, [r7, #14]
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f001 f9ed 	bl	8005292 <u8g2_DrawVLine>
 8003eb8:	e000      	b.n	8003ebc <u8g2_DrawRFrame+0x164>
    return;
 8003eba:	bf00      	nop
    }
  }
}
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	7c1b      	ldrb	r3, [r3, #16]
 8003ed0:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed8:	461a      	mov	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	fb02 f303 	mul.w	r3, r2, r3
 8003ee0:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f00e fe57 	bl	8012ba4 <memset>
}
 8003ef6:	bf00      	nop
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af02      	add	r7, sp, #8
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	70fb      	strb	r3, [r7, #3]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	7c1b      	ldrb	r3, [r3, #16]
 8003f14:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	89ba      	ldrh	r2, [r7, #12]
 8003f26:	fb12 f303 	smulbb	r3, r2, r3
 8003f2a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8003f2c:	89bb      	ldrh	r3, [r7, #12]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003f32:	89bb      	ldrh	r3, [r7, #12]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	4413      	add	r3, r2
 8003f38:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8003f3a:	7bf9      	ldrb	r1, [r7, #15]
 8003f3c:	78ba      	ldrb	r2, [r7, #2]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	460b      	mov	r3, r1
 8003f44:	2100      	movs	r1, #0
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f001 ff35 	bl	8005db6 <u8x8_DrawTile>
}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f66:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	7c5b      	ldrb	r3, [r3, #17]
 8003f76:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8003f78:	7bba      	ldrb	r2, [r7, #14]
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff ffbd 	bl	8003efe <u8g2_send_tile_row>
    src_row++;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	3301      	adds	r3, #1
 8003f88:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003f8a:	7bbb      	ldrb	r3, [r7, #14]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	7b7b      	ldrb	r3, [r7, #13]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d203      	bcs.n	8003fa0 <u8g2_send_buffer+0x4c>
 8003f98:	7bba      	ldrb	r2, [r7, #14]
 8003f9a:	7b3b      	ldrb	r3, [r7, #12]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d3eb      	bcc.n	8003f78 <u8g2_send_buffer+0x24>
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ff69 	bl	8003ec2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff ffd8 	bl	8003fa8 <u8g2_SetBufferCurrTileRow>
}
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff ffa3 	bl	8003f54 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004014:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	4413      	add	r3, r2
 8004020:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	7c5b      	ldrb	r3, [r3, #17]
 8004028:	7bfa      	ldrb	r2, [r7, #15]
 800402a:	429a      	cmp	r2, r3
 800402c:	d304      	bcc.n	8004038 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f001 ff12 	bl	8005e58 <u8x8_RefreshDisplay>
    return 0;
 8004034:	2300      	movs	r3, #0
 8004036:	e00d      	b.n	8004054 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff ff3d 	bl	8003ec2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	4619      	mov	r1, r3
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f7ff ffab 	bl	8003fa8 <u8g2_SetBufferCurrTileRow>
  return 1;
 8004052:	2301      	movs	r3, #1
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	4608      	mov	r0, r1
 8004066:	4611      	mov	r1, r2
 8004068:	461a      	mov	r2, r3
 800406a:	4603      	mov	r3, r0
 800406c:	70fb      	strb	r3, [r7, #3]
 800406e:	460b      	mov	r3, r1
 8004070:	70bb      	strb	r3, [r7, #2]
 8004072:	4613      	mov	r3, r2
 8004074:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 8004076:	7d3b      	ldrb	r3, [r7, #20]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d017      	beq.n	80040b0 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8004080:	787a      	ldrb	r2, [r7, #1]
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	4413      	add	r3, r2
 8004086:	b2d9      	uxtb	r1, r3
 8004088:	7c3a      	ldrb	r2, [r7, #16]
 800408a:	78bb      	ldrb	r3, [r7, #2]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	461a      	mov	r2, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f001 f916 	bl	80052c4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 8004098:	787a      	ldrb	r2, [r7, #1]
 800409a:	78bb      	ldrb	r3, [r7, #2]
 800409c:	4413      	add	r3, r2
 800409e:	b2d9      	uxtb	r1, r3
 80040a0:	7c3a      	ldrb	r2, [r7, #16]
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f001 f90a 	bl	80052c4 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 80040b0:	7d3b      	ldrb	r3, [r7, #20]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d017      	beq.n	80040ea <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 80040ba:	787a      	ldrb	r2, [r7, #1]
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	b2d9      	uxtb	r1, r3
 80040c2:	7c3a      	ldrb	r2, [r7, #16]
 80040c4:	78bb      	ldrb	r3, [r7, #2]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f001 f8f9 	bl	80052c4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 80040d2:	787a      	ldrb	r2, [r7, #1]
 80040d4:	78bb      	ldrb	r3, [r7, #2]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	b2d9      	uxtb	r1, r3
 80040da:	7c3a      	ldrb	r2, [r7, #16]
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	461a      	mov	r2, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f001 f8ed 	bl	80052c4 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 80040ea:	7d3b      	ldrb	r3, [r7, #20]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d017      	beq.n	8004124 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 80040f4:	787a      	ldrb	r2, [r7, #1]
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	4413      	add	r3, r2
 80040fa:	b2d9      	uxtb	r1, r3
 80040fc:	7c3a      	ldrb	r2, [r7, #16]
 80040fe:	78bb      	ldrb	r3, [r7, #2]
 8004100:	4413      	add	r3, r2
 8004102:	b2db      	uxtb	r3, r3
 8004104:	461a      	mov	r2, r3
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f001 f8dc 	bl	80052c4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 800410c:	787a      	ldrb	r2, [r7, #1]
 800410e:	78bb      	ldrb	r3, [r7, #2]
 8004110:	4413      	add	r3, r2
 8004112:	b2d9      	uxtb	r1, r3
 8004114:	7c3a      	ldrb	r2, [r7, #16]
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	4413      	add	r3, r2
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f001 f8d0 	bl	80052c4 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 8004124:	7d3b      	ldrb	r3, [r7, #20]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d017      	beq.n	800415e <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 800412e:	787a      	ldrb	r2, [r7, #1]
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	b2d9      	uxtb	r1, r3
 8004136:	7c3a      	ldrb	r2, [r7, #16]
 8004138:	78bb      	ldrb	r3, [r7, #2]
 800413a:	4413      	add	r3, r2
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f001 f8bf 	bl	80052c4 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 8004146:	787a      	ldrb	r2, [r7, #1]
 8004148:	78bb      	ldrb	r3, [r7, #2]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	b2d9      	uxtb	r1, r3
 800414e:	7c3a      	ldrb	r2, [r7, #16]
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	4413      	add	r3, r2
 8004154:	b2db      	uxtb	r3, r3
 8004156:	461a      	mov	r2, r3
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f001 f8b3 	bl	80052c4 <u8g2_DrawPixel>
    }
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b086      	sub	sp, #24
 800416a:	af02      	add	r7, sp, #8
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	4608      	mov	r0, r1
 8004170:	4611      	mov	r1, r2
 8004172:	461a      	mov	r2, r3
 8004174:	4603      	mov	r3, r0
 8004176:	70fb      	strb	r3, [r7, #3]
 8004178:	460b      	mov	r3, r1
 800417a:	70bb      	strb	r3, [r7, #2]
 800417c:	4613      	mov	r3, r2
 800417e:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8004180:	2301      	movs	r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8004184:	7bfa      	ldrb	r2, [r7, #15]
 8004186:	787b      	ldrb	r3, [r7, #1]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	b2db      	uxtb	r3, r3
 800418c:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 800418e:	2301      	movs	r3, #1
 8004190:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 8004196:	7b7a      	ldrb	r2, [r7, #13]
 8004198:	787b      	ldrb	r3, [r7, #1]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	b2db      	uxtb	r3, r3
 800419e:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 80041a0:	7b7b      	ldrb	r3, [r7, #13]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	737b      	strb	r3, [r7, #13]
    x = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	733b      	strb	r3, [r7, #12]
    y = rad;
 80041ac:	787b      	ldrb	r3, [r7, #1]
 80041ae:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 80041b0:	78f8      	ldrb	r0, [r7, #3]
 80041b2:	7afa      	ldrb	r2, [r7, #11]
 80041b4:	7b39      	ldrb	r1, [r7, #12]
 80041b6:	7e3b      	ldrb	r3, [r7, #24]
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	78bb      	ldrb	r3, [r7, #2]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	4603      	mov	r3, r0
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ff4b 	bl	800405c <u8g2_draw_circle_section>
    
    while ( x < y )
 80041c6:	e026      	b.n	8004216 <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 80041c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	db0b      	blt.n	80041e8 <u8g2_draw_circle+0x82>
      {
        y--;
 80041d0:	7afb      	ldrb	r3, [r7, #11]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 80041d6:	7b7b      	ldrb	r3, [r7, #13]
 80041d8:	3302      	adds	r3, #2
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 80041de:	7bfa      	ldrb	r2, [r7, #15]
 80041e0:	7b7b      	ldrb	r3, [r7, #13]
 80041e2:	4413      	add	r3, r2
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 80041e8:	7b3b      	ldrb	r3, [r7, #12]
 80041ea:	3301      	adds	r3, #1
 80041ec:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 80041ee:	7bbb      	ldrb	r3, [r7, #14]
 80041f0:	3302      	adds	r3, #2
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 80041f6:	7bfa      	ldrb	r2, [r7, #15]
 80041f8:	7bbb      	ldrb	r3, [r7, #14]
 80041fa:	4413      	add	r3, r2
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 8004200:	78f8      	ldrb	r0, [r7, #3]
 8004202:	7afa      	ldrb	r2, [r7, #11]
 8004204:	7b39      	ldrb	r1, [r7, #12]
 8004206:	7e3b      	ldrb	r3, [r7, #24]
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	78bb      	ldrb	r3, [r7, #2]
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	4603      	mov	r3, r0
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff23 	bl	800405c <u8g2_draw_circle_section>
    while ( x < y )
 8004216:	7b3a      	ldrb	r2, [r7, #12]
 8004218:	7afb      	ldrb	r3, [r7, #11]
 800421a:	429a      	cmp	r2, r3
 800421c:	d3d4      	bcc.n	80041c8 <u8g2_draw_circle+0x62>
    }
}
 800421e:	bf00      	nop
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 8004228:	b590      	push	{r4, r7, lr}
 800422a:	b085      	sub	sp, #20
 800422c:	af02      	add	r7, sp, #8
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	4608      	mov	r0, r1
 8004232:	4611      	mov	r1, r2
 8004234:	461a      	mov	r2, r3
 8004236:	4603      	mov	r3, r0
 8004238:	70fb      	strb	r3, [r7, #3]
 800423a:	460b      	mov	r3, r1
 800423c:	70bb      	strb	r3, [r7, #2]
 800423e:	4613      	mov	r3, r2
 8004240:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8004242:	78fa      	ldrb	r2, [r7, #3]
 8004244:	787b      	ldrb	r3, [r7, #1]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	b2d9      	uxtb	r1, r3
 800424a:	78ba      	ldrb	r2, [r7, #2]
 800424c:	787b      	ldrb	r3, [r7, #1]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	b2d8      	uxtb	r0, r3
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	787b      	ldrb	r3, [r7, #1]
 8004256:	4413      	add	r3, r2
 8004258:	b2db      	uxtb	r3, r3
 800425a:	3301      	adds	r3, #1
 800425c:	b2dc      	uxtb	r4, r3
 800425e:	78ba      	ldrb	r2, [r7, #2]
 8004260:	787b      	ldrb	r3, [r7, #1]
 8004262:	4413      	add	r3, r2
 8004264:	b2db      	uxtb	r3, r3
 8004266:	3301      	adds	r3, #1
 8004268:	b2db      	uxtb	r3, r3
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	4623      	mov	r3, r4
 800426e:	4602      	mov	r2, r0
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f001 f88d 	bl	8005390 <u8g2_IsIntersection>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d009      	beq.n	8004290 <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 800427c:	7878      	ldrb	r0, [r7, #1]
 800427e:	78ba      	ldrb	r2, [r7, #2]
 8004280:	78f9      	ldrb	r1, [r7, #3]
 8004282:	7e3b      	ldrb	r3, [r7, #24]
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	4603      	mov	r3, r0
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff ff6c 	bl	8004166 <u8g2_draw_circle>
 800428e:	e000      	b.n	8004292 <u8g2_DrawCircle+0x6a>
      return;
 8004290:	bf00      	nop
}
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bd90      	pop	{r4, r7, pc}

08004298 <u8g2_draw_disc_section>:
/* Disk */

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	4608      	mov	r0, r1
 80042a2:	4611      	mov	r1, r2
 80042a4:	461a      	mov	r2, r3
 80042a6:	4603      	mov	r3, r0
 80042a8:	70fb      	strb	r3, [r7, #3]
 80042aa:	460b      	mov	r3, r1
 80042ac:	70bb      	strb	r3, [r7, #2]
 80042ae:	4613      	mov	r3, r2
 80042b0:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 80042b2:	7d3b      	ldrb	r3, [r7, #20]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01b      	beq.n	80042f4 <u8g2_draw_disc_section+0x5c>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 80042bc:	787a      	ldrb	r2, [r7, #1]
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	4413      	add	r3, r2
 80042c2:	b2d9      	uxtb	r1, r3
 80042c4:	7c3a      	ldrb	r2, [r7, #16]
 80042c6:	78bb      	ldrb	r3, [r7, #2]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	78bb      	ldrb	r3, [r7, #2]
 80042ce:	3301      	adds	r3, #1
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 ffdd 	bl	8005292 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 80042d8:	787a      	ldrb	r2, [r7, #1]
 80042da:	78bb      	ldrb	r3, [r7, #2]
 80042dc:	4413      	add	r3, r2
 80042de:	b2d9      	uxtb	r1, r3
 80042e0:	7c3a      	ldrb	r2, [r7, #16]
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	3301      	adds	r3, #1
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 ffcf 	bl	8005292 <u8g2_DrawVLine>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 80042f4:	7d3b      	ldrb	r3, [r7, #20]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01b      	beq.n	8004336 <u8g2_draw_disc_section+0x9e>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 80042fe:	787a      	ldrb	r2, [r7, #1]
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	b2d9      	uxtb	r1, r3
 8004306:	7c3a      	ldrb	r2, [r7, #16]
 8004308:	78bb      	ldrb	r3, [r7, #2]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	b2da      	uxtb	r2, r3
 800430e:	78bb      	ldrb	r3, [r7, #2]
 8004310:	3301      	adds	r3, #1
 8004312:	b2db      	uxtb	r3, r3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 ffbc 	bl	8005292 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 800431a:	787a      	ldrb	r2, [r7, #1]
 800431c:	78bb      	ldrb	r3, [r7, #2]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	b2d9      	uxtb	r1, r3
 8004322:	7c3a      	ldrb	r2, [r7, #16]
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	b2da      	uxtb	r2, r3
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	3301      	adds	r3, #1
 800432e:	b2db      	uxtb	r3, r3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 ffae 	bl	8005292 <u8g2_DrawVLine>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 8004336:	7d3b      	ldrb	r3, [r7, #20]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <u8g2_draw_disc_section+0xd4>
    {
      u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 8004340:	787a      	ldrb	r2, [r7, #1]
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	4413      	add	r3, r2
 8004346:	b2d9      	uxtb	r1, r3
 8004348:	78bb      	ldrb	r3, [r7, #2]
 800434a:	3301      	adds	r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	7c3a      	ldrb	r2, [r7, #16]
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 ff9e 	bl	8005292 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 8004356:	787a      	ldrb	r2, [r7, #1]
 8004358:	78bb      	ldrb	r3, [r7, #2]
 800435a:	4413      	add	r3, r2
 800435c:	b2d9      	uxtb	r1, r3
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	3301      	adds	r3, #1
 8004362:	b2db      	uxtb	r3, r3
 8004364:	7c3a      	ldrb	r2, [r7, #16]
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 ff93 	bl	8005292 <u8g2_DrawVLine>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 800436c:	7d3b      	ldrb	r3, [r7, #20]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d015      	beq.n	80043a2 <u8g2_draw_disc_section+0x10a>
    {
      u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 8004376:	787a      	ldrb	r2, [r7, #1]
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	b2d9      	uxtb	r1, r3
 800437e:	78bb      	ldrb	r3, [r7, #2]
 8004380:	3301      	adds	r3, #1
 8004382:	b2db      	uxtb	r3, r3
 8004384:	7c3a      	ldrb	r2, [r7, #16]
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 ff83 	bl	8005292 <u8g2_DrawVLine>
      u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 800438c:	787a      	ldrb	r2, [r7, #1]
 800438e:	78bb      	ldrb	r3, [r7, #2]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	b2d9      	uxtb	r1, r3
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	3301      	adds	r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	7c3a      	ldrb	r2, [r7, #16]
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 ff78 	bl	8005292 <u8g2_DrawVLine>
    }
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <u8g2_draw_disc>:

static void u8g2_draw_disc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b086      	sub	sp, #24
 80043ae:	af02      	add	r7, sp, #8
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	4608      	mov	r0, r1
 80043b4:	4611      	mov	r1, r2
 80043b6:	461a      	mov	r2, r3
 80043b8:	4603      	mov	r3, r0
 80043ba:	70fb      	strb	r3, [r7, #3]
 80043bc:	460b      	mov	r3, r1
 80043be:	70bb      	strb	r3, [r7, #2]
 80043c0:	4613      	mov	r3, r2
 80043c2:	707b      	strb	r3, [r7, #1]
  u8g2_int_t ddF_x;
  u8g2_int_t ddF_y;
  u8g2_uint_t x;
  u8g2_uint_t y;

  f = 1;
 80043c4:	2301      	movs	r3, #1
 80043c6:	73fb      	strb	r3, [r7, #15]
  f -= rad;
 80043c8:	7bfa      	ldrb	r2, [r7, #15]
 80043ca:	787b      	ldrb	r3, [r7, #1]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	73fb      	strb	r3, [r7, #15]
  ddF_x = 1;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73bb      	strb	r3, [r7, #14]
  ddF_y = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	737b      	strb	r3, [r7, #13]
  ddF_y -= rad;
 80043da:	7b7a      	ldrb	r2, [r7, #13]
 80043dc:	787b      	ldrb	r3, [r7, #1]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	737b      	strb	r3, [r7, #13]
  ddF_y *= 2;
 80043e4:	7b7b      	ldrb	r3, [r7, #13]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	737b      	strb	r3, [r7, #13]
  x = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	733b      	strb	r3, [r7, #12]
  y = rad;
 80043f0:	787b      	ldrb	r3, [r7, #1]
 80043f2:	72fb      	strb	r3, [r7, #11]

  u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 80043f4:	78f8      	ldrb	r0, [r7, #3]
 80043f6:	7afa      	ldrb	r2, [r7, #11]
 80043f8:	7b39      	ldrb	r1, [r7, #12]
 80043fa:	7e3b      	ldrb	r3, [r7, #24]
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	78bb      	ldrb	r3, [r7, #2]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	4603      	mov	r3, r0
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff ff47 	bl	8004298 <u8g2_draw_disc_section>
  
  while ( x < y )
 800440a:	e026      	b.n	800445a <u8g2_draw_disc+0xb0>
  {
    if (f >= 0) 
 800440c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004410:	2b00      	cmp	r3, #0
 8004412:	db0b      	blt.n	800442c <u8g2_draw_disc+0x82>
    {
      y--;
 8004414:	7afb      	ldrb	r3, [r7, #11]
 8004416:	3b01      	subs	r3, #1
 8004418:	72fb      	strb	r3, [r7, #11]
      ddF_y += 2;
 800441a:	7b7b      	ldrb	r3, [r7, #13]
 800441c:	3302      	adds	r3, #2
 800441e:	b2db      	uxtb	r3, r3
 8004420:	737b      	strb	r3, [r7, #13]
      f += ddF_y;
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	7b7b      	ldrb	r3, [r7, #13]
 8004426:	4413      	add	r3, r2
 8004428:	b2db      	uxtb	r3, r3
 800442a:	73fb      	strb	r3, [r7, #15]
    }
    x++;
 800442c:	7b3b      	ldrb	r3, [r7, #12]
 800442e:	3301      	adds	r3, #1
 8004430:	733b      	strb	r3, [r7, #12]
    ddF_x += 2;
 8004432:	7bbb      	ldrb	r3, [r7, #14]
 8004434:	3302      	adds	r3, #2
 8004436:	b2db      	uxtb	r3, r3
 8004438:	73bb      	strb	r3, [r7, #14]
    f += ddF_x;
 800443a:	7bfa      	ldrb	r2, [r7, #15]
 800443c:	7bbb      	ldrb	r3, [r7, #14]
 800443e:	4413      	add	r3, r2
 8004440:	b2db      	uxtb	r3, r3
 8004442:	73fb      	strb	r3, [r7, #15]

    u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 8004444:	78f8      	ldrb	r0, [r7, #3]
 8004446:	7afa      	ldrb	r2, [r7, #11]
 8004448:	7b39      	ldrb	r1, [r7, #12]
 800444a:	7e3b      	ldrb	r3, [r7, #24]
 800444c:	9301      	str	r3, [sp, #4]
 800444e:	78bb      	ldrb	r3, [r7, #2]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	4603      	mov	r3, r0
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff ff1f 	bl	8004298 <u8g2_draw_disc_section>
  while ( x < y )
 800445a:	7b3a      	ldrb	r2, [r7, #12]
 800445c:	7afb      	ldrb	r3, [r7, #11]
 800445e:	429a      	cmp	r2, r3
 8004460:	d3d4      	bcc.n	800440c <u8g2_draw_disc+0x62>
  }
}
 8004462:	bf00      	nop
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <u8g2_DrawDisc>:

void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b085      	sub	sp, #20
 8004470:	af02      	add	r7, sp, #8
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	4608      	mov	r0, r1
 8004476:	4611      	mov	r1, r2
 8004478:	461a      	mov	r2, r3
 800447a:	4603      	mov	r3, r0
 800447c:	70fb      	strb	r3, [r7, #3]
 800447e:	460b      	mov	r3, r1
 8004480:	70bb      	strb	r3, [r7, #2]
 8004482:	4613      	mov	r3, r2
 8004484:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	787b      	ldrb	r3, [r7, #1]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	b2d9      	uxtb	r1, r3
 800448e:	78ba      	ldrb	r2, [r7, #2]
 8004490:	787b      	ldrb	r3, [r7, #1]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	b2d8      	uxtb	r0, r3
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	787b      	ldrb	r3, [r7, #1]
 800449a:	4413      	add	r3, r2
 800449c:	b2db      	uxtb	r3, r3
 800449e:	3301      	adds	r3, #1
 80044a0:	b2dc      	uxtb	r4, r3
 80044a2:	78ba      	ldrb	r2, [r7, #2]
 80044a4:	787b      	ldrb	r3, [r7, #1]
 80044a6:	4413      	add	r3, r2
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	3301      	adds	r3, #1
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	4623      	mov	r3, r4
 80044b2:	4602      	mov	r2, r0
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 ff6b 	bl	8005390 <u8g2_IsIntersection>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <u8g2_DrawDisc+0x68>
      return;
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  /* draw disc */
  u8g2_draw_disc(u8g2, x0, y0, rad, option);
 80044c0:	7878      	ldrb	r0, [r7, #1]
 80044c2:	78ba      	ldrb	r2, [r7, #2]
 80044c4:	78f9      	ldrb	r1, [r7, #3]
 80044c6:	7e3b      	ldrb	r3, [r7, #24]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	4603      	mov	r3, r0
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff6c 	bl	80043aa <u8g2_draw_disc>
 80044d2:	e000      	b.n	80044d6 <u8g2_DrawDisc+0x6a>
      return;
 80044d4:	bf00      	nop
}
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd90      	pop	{r4, r7, pc}

080044dc <u8g2_m_16_4_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  static uint8_t buf[512];
  *page_cnt = 4;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2204      	movs	r2, #4
 80044e8:	701a      	strb	r2, [r3, #0]
  return buf;
 80044ea:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <u8g2_m_16_4_f+0x1c>)
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	2000044c 	.word	0x2000044c

080044fc <u8g2_Setup_ssd1306_i2c_128x32_univision_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x32_univision_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af02      	add	r7, sp, #8
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a0b      	ldr	r2, [pc, #44]	; (8004540 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x44>)
 8004512:	490c      	ldr	r1, [pc, #48]	; (8004544 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x48>)
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f001 fd03 	bl	8005f20 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 800451a:	f107 0313 	add.w	r3, r7, #19
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff ffdc 	bl	80044dc <u8g2_m_16_4_f>
 8004524:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8004526:	7cfa      	ldrb	r2, [r7, #19]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <u8g2_Setup_ssd1306_i2c_128x32_univision_f+0x4c>)
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f001 f816 	bl	8005562 <u8g2_SetupBuffer>
}
 8004536:	bf00      	nop
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	08005a69 	.word	0x08005a69
 8004544:	08005cd5 	.word	0x08005cd5
 8004548:	080053e7 	.word	0x080053e7

0800454c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	781b      	ldrb	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	4413      	add	r3, r2
 8004582:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	81fb      	strh	r3, [r7, #14]
    font++;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3301      	adds	r3, #1
 800458e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8004590:	89fb      	ldrh	r3, [r7, #14]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	b29a      	uxth	r2, r3
 800459c:	89fb      	ldrh	r3, [r7, #14]
 800459e:	4413      	add	r3, r2
 80045a0:	81fb      	strh	r3, [r7, #14]
    return pos;
 80045a2:	89fb      	ldrh	r3, [r7, #14]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80045ba:	2100      	movs	r1, #0
 80045bc:	6838      	ldr	r0, [r7, #0]
 80045be:	f7ff ffc5 	bl	800454c <u8g2_font_get_byte>
 80045c2:	4603      	mov	r3, r0
 80045c4:	461a      	mov	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80045ca:	2101      	movs	r1, #1
 80045cc:	6838      	ldr	r0, [r7, #0]
 80045ce:	f7ff ffbd 	bl	800454c <u8g2_font_get_byte>
 80045d2:	4603      	mov	r3, r0
 80045d4:	461a      	mov	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80045da:	2102      	movs	r1, #2
 80045dc:	6838      	ldr	r0, [r7, #0]
 80045de:	f7ff ffb5 	bl	800454c <u8g2_font_get_byte>
 80045e2:	4603      	mov	r3, r0
 80045e4:	461a      	mov	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80045ea:	2103      	movs	r1, #3
 80045ec:	6838      	ldr	r0, [r7, #0]
 80045ee:	f7ff ffad 	bl	800454c <u8g2_font_get_byte>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80045fa:	2104      	movs	r1, #4
 80045fc:	6838      	ldr	r0, [r7, #0]
 80045fe:	f7ff ffa5 	bl	800454c <u8g2_font_get_byte>
 8004602:	4603      	mov	r3, r0
 8004604:	461a      	mov	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800460a:	2105      	movs	r1, #5
 800460c:	6838      	ldr	r0, [r7, #0]
 800460e:	f7ff ff9d 	bl	800454c <u8g2_font_get_byte>
 8004612:	4603      	mov	r3, r0
 8004614:	461a      	mov	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800461a:	2106      	movs	r1, #6
 800461c:	6838      	ldr	r0, [r7, #0]
 800461e:	f7ff ff95 	bl	800454c <u8g2_font_get_byte>
 8004622:	4603      	mov	r3, r0
 8004624:	461a      	mov	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800462a:	2107      	movs	r1, #7
 800462c:	6838      	ldr	r0, [r7, #0]
 800462e:	f7ff ff8d 	bl	800454c <u8g2_font_get_byte>
 8004632:	4603      	mov	r3, r0
 8004634:	461a      	mov	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800463a:	2108      	movs	r1, #8
 800463c:	6838      	ldr	r0, [r7, #0]
 800463e:	f7ff ff85 	bl	800454c <u8g2_font_get_byte>
 8004642:	4603      	mov	r3, r0
 8004644:	461a      	mov	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800464a:	2109      	movs	r1, #9
 800464c:	6838      	ldr	r0, [r7, #0]
 800464e:	f7ff ff7d 	bl	800454c <u8g2_font_get_byte>
 8004652:	4603      	mov	r3, r0
 8004654:	b25a      	sxtb	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800465a:	210a      	movs	r1, #10
 800465c:	6838      	ldr	r0, [r7, #0]
 800465e:	f7ff ff75 	bl	800454c <u8g2_font_get_byte>
 8004662:	4603      	mov	r3, r0
 8004664:	b25a      	sxtb	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800466a:	210b      	movs	r1, #11
 800466c:	6838      	ldr	r0, [r7, #0]
 800466e:	f7ff ff6d 	bl	800454c <u8g2_font_get_byte>
 8004672:	4603      	mov	r3, r0
 8004674:	b25a      	sxtb	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800467a:	210c      	movs	r1, #12
 800467c:	6838      	ldr	r0, [r7, #0]
 800467e:	f7ff ff65 	bl	800454c <u8g2_font_get_byte>
 8004682:	4603      	mov	r3, r0
 8004684:	b25a      	sxtb	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800468a:	210d      	movs	r1, #13
 800468c:	6838      	ldr	r0, [r7, #0]
 800468e:	f7ff ff5d 	bl	800454c <u8g2_font_get_byte>
 8004692:	4603      	mov	r3, r0
 8004694:	b25a      	sxtb	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800469a:	210e      	movs	r1, #14
 800469c:	6838      	ldr	r0, [r7, #0]
 800469e:	f7ff ff55 	bl	800454c <u8g2_font_get_byte>
 80046a2:	4603      	mov	r3, r0
 80046a4:	b25a      	sxtb	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80046aa:	210f      	movs	r1, #15
 80046ac:	6838      	ldr	r0, [r7, #0]
 80046ae:	f7ff ff4d 	bl	800454c <u8g2_font_get_byte>
 80046b2:	4603      	mov	r3, r0
 80046b4:	b25a      	sxtb	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80046ba:	2110      	movs	r1, #16
 80046bc:	6838      	ldr	r0, [r7, #0]
 80046be:	f7ff ff45 	bl	800454c <u8g2_font_get_byte>
 80046c2:	4603      	mov	r3, r0
 80046c4:	b25a      	sxtb	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80046ca:	2111      	movs	r1, #17
 80046cc:	6838      	ldr	r0, [r7, #0]
 80046ce:	f7ff ff4f 	bl	8004570 <u8g2_font_get_word>
 80046d2:	4603      	mov	r3, r0
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80046da:	2113      	movs	r1, #19
 80046dc:	6838      	ldr	r0, [r7, #0]
 80046de:	f7ff ff47 	bl	8004570 <u8g2_font_get_word>
 80046e2:	4603      	mov	r3, r0
 80046e4:	461a      	mov	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80046ea:	2115      	movs	r1, #21
 80046ec:	6838      	ldr	r0, [r7, #0]
 80046ee:	f7ff ff3f 	bl	8004570 <u8g2_font_get_word>
 80046f2:	4603      	mov	r3, r0
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	82da      	strh	r2, [r3, #22]
#endif
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	460b      	mov	r3, r1
 800470c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	7a9b      	ldrb	r3, [r3, #10]
 8004712:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800471c:	7bfa      	ldrb	r2, [r7, #15]
 800471e:	7b7b      	ldrb	r3, [r7, #13]
 8004720:	fa42 f303 	asr.w	r3, r2, r3
 8004724:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8004726:	7b7b      	ldrb	r3, [r7, #13]
 8004728:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800472a:	7bba      	ldrb	r2, [r7, #14]
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	4413      	add	r3, r2
 8004730:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8004732:	7bbb      	ldrb	r3, [r7, #14]
 8004734:	2b07      	cmp	r3, #7
 8004736:	d91a      	bls.n	800476e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8004738:	2308      	movs	r3, #8
 800473a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800473c:	7b3a      	ldrb	r2, [r7, #12]
 800473e:	7b7b      	ldrb	r3, [r7, #13]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	7b3b      	ldrb	r3, [r7, #12]
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	b25a      	sxtb	r2, r3
 800475e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004762:	4313      	orrs	r3, r2
 8004764:	b25b      	sxtb	r3, r3
 8004766:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8004768:	7bbb      	ldrb	r3, [r7, #14]
 800476a:	3b08      	subs	r3, #8
 800476c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800476e:	78fb      	ldrb	r3, [r7, #3]
 8004770:	f04f 32ff 	mov.w	r2, #4294967295
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	b2db      	uxtb	r3, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	b2da      	uxtb	r2, r3
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	4013      	ands	r3, r2
 8004782:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	7bba      	ldrb	r2, [r7, #14]
 8004788:	729a      	strb	r2, [r3, #10]
  return val;
 800478a:	7bfb      	ldrb	r3, [r7, #15]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	4619      	mov	r1, r3
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ffaa 	bl	8004702 <u8g2_font_decode_get_unsigned_bits>
 80047ae:	4603      	mov	r3, r0
 80047b0:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80047bc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80047c8:	7bfa      	ldrb	r2, [r7, #15]
 80047ca:	7bbb      	ldrb	r3, [r7, #14]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	73fb      	strb	r3, [r7, #15]
  return v;
 80047d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80047de:	b490      	push	{r4, r7}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	4604      	mov	r4, r0
 80047e6:	4608      	mov	r0, r1
 80047e8:	4611      	mov	r1, r2
 80047ea:	461a      	mov	r2, r3
 80047ec:	4623      	mov	r3, r4
 80047ee:	71fb      	strb	r3, [r7, #7]
 80047f0:	4603      	mov	r3, r0
 80047f2:	71bb      	strb	r3, [r7, #6]
 80047f4:	460b      	mov	r3, r1
 80047f6:	717b      	strb	r3, [r7, #5]
 80047f8:	4613      	mov	r3, r2
 80047fa:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80047fc:	793b      	ldrb	r3, [r7, #4]
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d010      	beq.n	8004824 <u8g2_add_vector_y+0x46>
 8004802:	2b02      	cmp	r3, #2
 8004804:	dc13      	bgt.n	800482e <u8g2_add_vector_y+0x50>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <u8g2_add_vector_y+0x32>
 800480a:	2b01      	cmp	r3, #1
 800480c:	d005      	beq.n	800481a <u8g2_add_vector_y+0x3c>
 800480e:	e00e      	b.n	800482e <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 8004810:	797a      	ldrb	r2, [r7, #5]
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	4413      	add	r3, r2
 8004816:	71fb      	strb	r3, [r7, #7]
      break;
 8004818:	e00e      	b.n	8004838 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 800481a:	79ba      	ldrb	r2, [r7, #6]
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	4413      	add	r3, r2
 8004820:	71fb      	strb	r3, [r7, #7]
      break;
 8004822:	e009      	b.n	8004838 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 8004824:	797b      	ldrb	r3, [r7, #5]
 8004826:	79fa      	ldrb	r2, [r7, #7]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	71fb      	strb	r3, [r7, #7]
      break;
 800482c:	e004      	b.n	8004838 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 800482e:	79bb      	ldrb	r3, [r7, #6]
 8004830:	79fa      	ldrb	r2, [r7, #7]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	71fb      	strb	r3, [r7, #7]
      break;      
 8004836:	bf00      	nop
  }
  return dy;
 8004838:	79fb      	ldrb	r3, [r7, #7]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bc90      	pop	{r4, r7}
 8004842:	4770      	bx	lr

08004844 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8004844:	b490      	push	{r4, r7}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	4604      	mov	r4, r0
 800484c:	4608      	mov	r0, r1
 800484e:	4611      	mov	r1, r2
 8004850:	461a      	mov	r2, r3
 8004852:	4623      	mov	r3, r4
 8004854:	71fb      	strb	r3, [r7, #7]
 8004856:	4603      	mov	r3, r0
 8004858:	71bb      	strb	r3, [r7, #6]
 800485a:	460b      	mov	r3, r1
 800485c:	717b      	strb	r3, [r7, #5]
 800485e:	4613      	mov	r3, r2
 8004860:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8004862:	793b      	ldrb	r3, [r7, #4]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d010      	beq.n	800488a <u8g2_add_vector_x+0x46>
 8004868:	2b02      	cmp	r3, #2
 800486a:	dc13      	bgt.n	8004894 <u8g2_add_vector_x+0x50>
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <u8g2_add_vector_x+0x32>
 8004870:	2b01      	cmp	r3, #1
 8004872:	d005      	beq.n	8004880 <u8g2_add_vector_x+0x3c>
 8004874:	e00e      	b.n	8004894 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8004876:	79ba      	ldrb	r2, [r7, #6]
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	4413      	add	r3, r2
 800487c:	71fb      	strb	r3, [r7, #7]
      break;
 800487e:	e00e      	b.n	800489e <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 8004880:	797b      	ldrb	r3, [r7, #5]
 8004882:	79fa      	ldrb	r2, [r7, #7]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	71fb      	strb	r3, [r7, #7]
      break;
 8004888:	e009      	b.n	800489e <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 800488a:	79bb      	ldrb	r3, [r7, #6]
 800488c:	79fa      	ldrb	r2, [r7, #7]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	71fb      	strb	r3, [r7, #7]
      break;
 8004892:	e004      	b.n	800489e <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8004894:	797a      	ldrb	r2, [r7, #5]
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	4413      	add	r3, r2
 800489a:	71fb      	strb	r3, [r7, #7]
      break;      
 800489c:	bf00      	nop
  }
  return dx;
 800489e:	79fb      	ldrb	r3, [r7, #7]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc90      	pop	{r4, r7}
 80048a8:	4770      	bx	lr

080048aa <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b088      	sub	sp, #32
 80048ae:	af02      	add	r7, sp, #8
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70fb      	strb	r3, [r7, #3]
 80048b6:	4613      	mov	r3, r2
 80048b8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3358      	adds	r3, #88	; 0x58
 80048be:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80048ca:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80048d2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80048da:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80048dc:	7bfa      	ldrb	r2, [r7, #15]
 80048de:	7d7b      	ldrb	r3, [r7, #21]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80048e8:	7dfa      	ldrb	r2, [r7, #23]
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d201      	bcs.n	80048f4 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
 80048f2:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	791b      	ldrb	r3, [r3, #4]
 80048f8:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	795b      	ldrb	r3, [r3, #5]
 80048fe:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8004900:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004904:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	7b9b      	ldrb	r3, [r3, #14]
 800490c:	7bb8      	ldrb	r0, [r7, #14]
 800490e:	f7ff ff99 	bl	8004844 <u8g2_add_vector_x>
 8004912:	4603      	mov	r3, r0
 8004914:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8004916:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800491a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	7b9b      	ldrb	r3, [r3, #14]
 8004922:	7b78      	ldrb	r0, [r7, #13]
 8004924:	f7ff ff5b 	bl	80047de <u8g2_add_vector_y>
 8004928:	4603      	mov	r3, r0
 800492a:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800492c:	78bb      	ldrb	r3, [r7, #2]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00f      	beq.n	8004952 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	7b1a      	ldrb	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	7b9b      	ldrb	r3, [r3, #14]
 8004940:	7db8      	ldrb	r0, [r7, #22]
 8004942:	7b7a      	ldrb	r2, [r7, #13]
 8004944:	7bb9      	ldrb	r1, [r7, #14]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	4603      	mov	r3, r0
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fc05 	bl	800515a <u8g2_DrawHVLine>
 8004950:	e012      	b.n	8004978 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	7adb      	ldrb	r3, [r3, #11]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10e      	bne.n	8004978 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	7b5a      	ldrb	r2, [r3, #13]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	7b9b      	ldrb	r3, [r3, #14]
 8004968:	7db8      	ldrb	r0, [r7, #22]
 800496a:	7b7a      	ldrb	r2, [r7, #13]
 800496c:	7bb9      	ldrb	r1, [r7, #14]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	4603      	mov	r3, r0
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fbf1 	bl	800515a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8004978:	7dfa      	ldrb	r2, [r7, #23]
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	429a      	cmp	r2, r3
 800497e:	d309      	bcc.n	8004994 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 8004980:	7dfa      	ldrb	r2, [r7, #23]
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	757b      	strb	r3, [r7, #21]
    ly++;
 800498c:	7d3b      	ldrb	r3, [r7, #20]
 800498e:	3301      	adds	r3, #1
 8004990:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8004992:	e79f      	b.n	80048d4 <u8g2_font_decode_len+0x2a>
      break;
 8004994:	bf00      	nop
  }
  lx += cnt;
 8004996:	7d7a      	ldrb	r2, [r7, #21]
 8004998:	7dfb      	ldrb	r3, [r7, #23]
 800499a:	4413      	add	r3, r2
 800499c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800499e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 80049a6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	71da      	strb	r2, [r3, #7]
  
}
 80049ae:	bf00      	nop
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b084      	sub	sp, #16
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3358      	adds	r3, #88	; 0x58
 80049c4:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80049d8:	4619      	mov	r1, r3
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff fe91 	bl	8004702 <u8g2_font_decode_get_unsigned_bits>
 80049e0:	4603      	mov	r3, r0
 80049e2:	b25a      	sxtb	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80049ee:	4619      	mov	r1, r3
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f7ff fe86 	bl	8004702 <u8g2_font_decode_get_unsigned_bits>
 80049f6:	4603      	mov	r3, r0
 80049f8:	b25a      	sxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	7b1b      	ldrb	r3, [r3, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	735a      	strb	r2, [r3, #13]
}
 8004a1c:	bf00      	nop
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3358      	adds	r3, #88	; 0x58
 8004a32:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8004a34:	6839      	ldr	r1, [r7, #0]
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff ffbd 	bl	80049b6 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004a42:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6938      	ldr	r0, [r7, #16]
 8004a4e:	f7ff fea3 	bl	8004798 <u8g2_font_decode_get_signed_bits>
 8004a52:	4603      	mov	r3, r0
 8004a54:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	6938      	ldr	r0, [r7, #16]
 8004a60:	f7ff fe9a 	bl	8004798 <u8g2_font_decode_get_signed_bits>
 8004a64:	4603      	mov	r3, r0
 8004a66:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6938      	ldr	r0, [r7, #16]
 8004a72:	f7ff fe91 	bl	8004798 <u8g2_font_decode_get_signed_bits>
 8004a76:	4603      	mov	r3, r0
 8004a78:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f340 80cf 	ble.w	8004c24 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	7918      	ldrb	r0, [r3, #4]
 8004a8a:	7bfa      	ldrb	r2, [r7, #15]
 8004a8c:	7b7b      	ldrb	r3, [r7, #13]
 8004a8e:	4413      	add	r3, r2
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	425b      	negs	r3, r3
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	b25a      	sxtb	r2, r3
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	7b9b      	ldrb	r3, [r3, #14]
 8004a9c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004aa0:	f7ff fed0 	bl	8004844 <u8g2_add_vector_x>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	7958      	ldrb	r0, [r3, #5]
 8004ab0:	7bfa      	ldrb	r2, [r7, #15]
 8004ab2:	7b7b      	ldrb	r3, [r7, #13]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	425b      	negs	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	b25a      	sxtb	r2, r3
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	7b9b      	ldrb	r3, [r3, #14]
 8004ac2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8004ac6:	f7ff fe8a 	bl	80047de <u8g2_add_vector_y>
 8004aca:	4603      	mov	r3, r0
 8004acc:	461a      	mov	r2, r3
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	791b      	ldrb	r3, [r3, #4]
 8004ad6:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	795b      	ldrb	r3, [r3, #5]
 8004adc:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
 8004ae0:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8004ae2:	7d7b      	ldrb	r3, [r7, #21]
 8004ae4:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	7b9b      	ldrb	r3, [r3, #14]
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d852      	bhi.n	8004b94 <u8g2_font_decode_glyph+0x170>
 8004aee:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <u8g2_font_decode_glyph+0xd0>)
 8004af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af4:	08004b05 	.word	0x08004b05
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b41 	.word	0x08004b41
 8004b00:	08004b71 	.word	0x08004b71
      {
	case 0:
	    x1 += decode->glyph_width;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	7dbb      	ldrb	r3, [r7, #22]
 8004b0e:	4413      	add	r3, r2
 8004b10:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8004b12:	7bfa      	ldrb	r2, [r7, #15]
 8004b14:	7d3b      	ldrb	r3, [r7, #20]
 8004b16:	4413      	add	r3, r2
 8004b18:	753b      	strb	r3, [r7, #20]
	    break;
 8004b1a:	e03b      	b.n	8004b94 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8004b1c:	7bfb      	ldrb	r3, [r7, #15]
 8004b1e:	7dfa      	ldrb	r2, [r7, #23]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
 8004b26:	3301      	adds	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8004b2a:	7dbb      	ldrb	r3, [r7, #22]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	7d3b      	ldrb	r3, [r7, #20]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	753b      	strb	r3, [r7, #20]
	    break;
 8004b3e:	e029      	b.n	8004b94 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	7dfa      	ldrb	r2, [r7, #23]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
 8004b50:	3301      	adds	r3, #1
 8004b52:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8004b54:	7dbb      	ldrb	r3, [r7, #22]
 8004b56:	3301      	adds	r3, #1
 8004b58:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	7d7a      	ldrb	r2, [r7, #21]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004b62:	7d7b      	ldrb	r3, [r7, #21]
 8004b64:	3301      	adds	r3, #1
 8004b66:	757b      	strb	r3, [r7, #21]
	    y1++;
 8004b68:	7d3b      	ldrb	r3, [r7, #20]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8004b6e:	e011      	b.n	8004b94 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8004b70:	7bfa      	ldrb	r2, [r7, #15]
 8004b72:	7dbb      	ldrb	r3, [r7, #22]
 8004b74:	4413      	add	r3, r2
 8004b76:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	7d7a      	ldrb	r2, [r7, #21]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004b86:	7d7b      	ldrb	r3, [r7, #21]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	757b      	strb	r3, [r7, #21]
	    y1++;
 8004b8c:	7d3b      	ldrb	r3, [r7, #20]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	753b      	strb	r3, [r7, #20]
	    break;	  
 8004b92:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004b94:	7db8      	ldrb	r0, [r7, #22]
 8004b96:	7d7a      	ldrb	r2, [r7, #21]
 8004b98:	7df9      	ldrb	r1, [r7, #23]
 8004b9a:	7d3b      	ldrb	r3, [r7, #20]
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fbf5 	bl	8005390 <u8g2_IsIntersection>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <u8g2_font_decode_glyph+0x18e>
	return d;
 8004bac:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8004bb0:	e03a      	b.n	8004c28 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6938      	ldr	r0, [r7, #16]
 8004bc8:	f7ff fd9b 	bl	8004702 <u8g2_font_decode_get_unsigned_bits>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6938      	ldr	r0, [r7, #16]
 8004bda:	f7ff fd92 	bl	8004702 <u8g2_font_decode_get_unsigned_bits>
 8004bde:	4603      	mov	r3, r0
 8004be0:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8004be2:	7afb      	ldrb	r3, [r7, #11]
 8004be4:	2200      	movs	r2, #0
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff fe5e 	bl	80048aa <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8004bee:	7abb      	ldrb	r3, [r7, #10]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff fe58 	bl	80048aa <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	6938      	ldr	r0, [r7, #16]
 8004bfe:	f7ff fd80 	bl	8004702 <u8g2_font_decode_get_unsigned_bits>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1ec      	bne.n	8004be2 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8004c0e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	dd00      	ble.n	8004c18 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004c16:	e7d2      	b.n	8004bbe <u8g2_font_decode_glyph+0x19a>
	break;
 8004c18:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	7b1a      	ldrb	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8004c24:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c40:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	3317      	adds	r3, #23
 8004c46:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8004c48:	887b      	ldrh	r3, [r7, #2]
 8004c4a:	2bff      	cmp	r3, #255	; 0xff
 8004c4c:	d82a      	bhi.n	8004ca4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8004c4e:	887b      	ldrh	r3, [r7, #2]
 8004c50:	2b60      	cmp	r3, #96	; 0x60
 8004c52:	d907      	bls.n	8004c64 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	4413      	add	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e009      	b.n	8004c78 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8004c64:	887b      	ldrh	r3, [r7, #2]
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d906      	bls.n	8004c78 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8004c70:	461a      	mov	r2, r3
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	4413      	add	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d04e      	beq.n	8004d20 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	887a      	ldrh	r2, [r7, #2]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d102      	bne.n	8004c94 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	3302      	adds	r3, #2
 8004c92:	e049      	b.n	8004d28 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	3301      	adds	r3, #1
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004ca2:	e7e9      	b.n	8004c78 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8004caa:	461a      	mov	r2, r3
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	4413      	add	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	6938      	ldr	r0, [r7, #16]
 8004cba:	f7ff fc59 	bl	8004570 <u8g2_font_get_word>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8004cc8:	2102      	movs	r1, #2
 8004cca:	6938      	ldr	r0, [r7, #16]
 8004ccc:	f7ff fc50 	bl	8004570 <u8g2_font_get_word>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8004cda:	89fa      	ldrh	r2, [r7, #14]
 8004cdc:	887b      	ldrh	r3, [r7, #2]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d3e9      	bcc.n	8004cb6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8004ce8:	89fb      	ldrh	r3, [r7, #14]
 8004cea:	021b      	lsls	r3, r3, #8
 8004cec:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	89fb      	ldrh	r3, [r7, #14]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8004cfc:	89fb      	ldrh	r3, [r7, #14]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d010      	beq.n	8004d24 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8004d02:	89fa      	ldrh	r2, [r7, #14]
 8004d04:	887b      	ldrh	r3, [r7, #2]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d102      	bne.n	8004d10 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	3303      	adds	r3, #3
 8004d0e:	e00b      	b.n	8004d28 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	3302      	adds	r3, #2
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8004d1e:	e7e0      	b.n	8004ce2 <u8g2_font_get_glyph_data+0xb2>
	break;
 8004d20:	bf00      	nop
 8004d22:	e000      	b.n	8004d26 <u8g2_font_get_glyph_data+0xf6>
	break;
 8004d24:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	4608      	mov	r0, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4603      	mov	r3, r0
 8004d40:	70fb      	strb	r3, [r7, #3]
 8004d42:	460b      	mov	r3, r1
 8004d44:	70bb      	strb	r3, [r7, #2]
 8004d46:	4613      	mov	r3, r2
 8004d48:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	78fa      	ldrb	r2, [r7, #3]
 8004d52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	78ba      	ldrb	r2, [r7, #2]
 8004d5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004d5e:	883b      	ldrh	r3, [r7, #0]
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff ff64 	bl	8004c30 <u8g2_font_get_glyph_data>
 8004d68:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff fe56 	bl	8004a24 <u8g2_font_decode_glyph>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	4608      	mov	r0, r1
 8004d92:	4611      	mov	r1, r2
 8004d94:	461a      	mov	r2, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	70fb      	strb	r3, [r7, #3]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	70bb      	strb	r3, [r7, #2]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	d833      	bhi.n	8004e14 <u8g2_DrawGlyph+0x8c>
 8004dac:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <u8g2_DrawGlyph+0x2c>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004dc5 	.word	0x08004dc5
 8004db8:	08004dd9 	.word	0x08004dd9
 8004dbc:	08004ded 	.word	0x08004ded
 8004dc0:	08004e01 	.word	0x08004e01
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	4798      	blx	r3
 8004dcc:	4603      	mov	r3, r0
 8004dce:	461a      	mov	r2, r3
 8004dd0:	78bb      	ldrb	r3, [r7, #2]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	70bb      	strb	r3, [r7, #2]
      break;
 8004dd6:	e01d      	b.n	8004e14 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
 8004de0:	4603      	mov	r3, r0
 8004de2:	461a      	mov	r2, r3
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	70fb      	strb	r3, [r7, #3]
      break;
 8004dea:	e013      	b.n	8004e14 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	4798      	blx	r3
 8004df4:	4603      	mov	r3, r0
 8004df6:	461a      	mov	r2, r3
 8004df8:	78bb      	ldrb	r3, [r7, #2]
 8004dfa:	1a9b      	subs	r3, r3, r2
 8004dfc:	70bb      	strb	r3, [r7, #2]
      break;
 8004dfe:	e009      	b.n	8004e14 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	4798      	blx	r3
 8004e08:	4603      	mov	r3, r0
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	4413      	add	r3, r2
 8004e10:	70fb      	strb	r3, [r7, #3]
      break;
 8004e12:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8004e14:	883b      	ldrh	r3, [r7, #0]
 8004e16:	78ba      	ldrb	r2, [r7, #2]
 8004e18:	78f9      	ldrb	r1, [r7, #3]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff ff88 	bl	8004d30 <u8g2_font_draw_glyph>
 8004e20:	4603      	mov	r3, r0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop

08004e2c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	607b      	str	r3, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	72fb      	strb	r3, [r7, #11]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fce3 	bl	800580a <u8x8_utf8_init>
  sum = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	7812      	ldrb	r2, [r2, #0]
 8004e50:	4611      	mov	r1, r2
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	4798      	blx	r3
 8004e56:	4603      	mov	r3, r0
 8004e58:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8004e5a:	8abb      	ldrh	r3, [r7, #20]
 8004e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d038      	beq.n	8004ed6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3301      	adds	r3, #1
 8004e68:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8004e6a:	8abb      	ldrh	r3, [r7, #20]
 8004e6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d0e9      	beq.n	8004e48 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8004e74:	8abb      	ldrh	r3, [r7, #20]
 8004e76:	7aba      	ldrb	r2, [r7, #10]
 8004e78:	7af9      	ldrb	r1, [r7, #11]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7ff ff84 	bl	8004d88 <u8g2_DrawGlyph>
 8004e80:	4603      	mov	r3, r0
 8004e82:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d81e      	bhi.n	8004ecc <u8g2_draw_string+0xa0>
 8004e8e:	a201      	add	r2, pc, #4	; (adr r2, 8004e94 <u8g2_draw_string+0x68>)
 8004e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e94:	08004ea5 	.word	0x08004ea5
 8004e98:	08004eaf 	.word	0x08004eaf
 8004e9c:	08004eb9 	.word	0x08004eb9
 8004ea0:	08004ec3 	.word	0x08004ec3
      {
	case 0:
	  x += delta;
 8004ea4:	7afa      	ldrb	r2, [r7, #11]
 8004ea6:	7cfb      	ldrb	r3, [r7, #19]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	72fb      	strb	r3, [r7, #11]
	  break;
 8004eac:	e00e      	b.n	8004ecc <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8004eae:	7aba      	ldrb	r2, [r7, #10]
 8004eb0:	7cfb      	ldrb	r3, [r7, #19]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	72bb      	strb	r3, [r7, #10]
	  break;
 8004eb6:	e009      	b.n	8004ecc <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8004eb8:	7afa      	ldrb	r2, [r7, #11]
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	72fb      	strb	r3, [r7, #11]
	  break;
 8004ec0:	e004      	b.n	8004ecc <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8004ec2:	7aba      	ldrb	r2, [r7, #10]
 8004ec4:	7cfb      	ldrb	r3, [r7, #19]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	72bb      	strb	r3, [r7, #10]
	  break;
 8004eca:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8004ecc:	7dfa      	ldrb	r2, [r7, #23]
 8004ece:	7cfb      	ldrb	r3, [r7, #19]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004ed4:	e7b8      	b.n	8004e48 <u8g2_draw_string+0x1c>
      break;
 8004ed6:	bf00      	nop
    }
  }
  return sum;
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop

08004ee4 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	72fb      	strb	r3, [r7, #11]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4a06      	ldr	r2, [pc, #24]	; (8004f14 <u8g2_DrawStr+0x30>)
 8004efa:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8004efc:	7aba      	ldrb	r2, [r7, #10]
 8004efe:	7af9      	ldrb	r1, [r7, #11]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f7ff ff92 	bl	8004e2c <u8g2_draw_string>
 8004f08:	4603      	mov	r3, r0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	08005827 	.word	0x08005827

08004f18 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d05d      	beq.n	8004fe4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d04d      	beq.n	8004fe6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d11c      	bne.n	8004f8e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 8004f60:	429a      	cmp	r2, r3
 8004f62:	da05      	bge.n	8004f70 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	dd32      	ble.n	8004fe6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8004f8c:	e02b      	b.n	8004fe6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8004f94:	461a      	mov	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8004fa4:	440b      	add	r3, r1
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	da0d      	bge.n	8004fc6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	b25a      	sxtb	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	dd07      	ble.n	8004fe6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8004fe2:	e000      	b.n	8004fe6 <u8g2_UpdateRefHeight+0xce>
    return;
 8004fe4:	bf00      	nop
  }  
}
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  return 0;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
	...

08005008 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a04      	ldr	r2, [pc, #16]	; (8005024 <u8g2_SetFontPosBaseline+0x1c>)
 8005014:	655a      	str	r2, [r3, #84]	; 0x54
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	08004ff1 	.word	0x08004ff1

08005028 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d00b      	beq.n	8005054 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3368      	adds	r3, #104	; 0x68
 8005046:	6839      	ldr	r1, [r7, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fab1 	bl	80045b0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff ff62 	bl	8004f18 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <u8g2_SetFontDirection>:
}



void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	78fa      	ldrb	r2, [r7, #3]
 800506c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	4611      	mov	r1, r2
 8005088:	461a      	mov	r2, r3
 800508a:	460b      	mov	r3, r1
 800508c:	71fb      	strb	r3, [r7, #7]
 800508e:	4613      	mov	r3, r2
 8005090:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8005098:	7dfb      	ldrb	r3, [r7, #23]
 800509a:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	781a      	ldrb	r2, [r3, #0]
 80050a0:	7dbb      	ldrb	r3, [r7, #22]
 80050a2:	4413      	add	r3, r2
 80050a4:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80050a6:	7dfa      	ldrb	r2, [r7, #23]
 80050a8:	7dbb      	ldrb	r3, [r7, #22]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d90b      	bls.n	80050c6 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80050ae:	7dfa      	ldrb	r2, [r7, #23]
 80050b0:	79bb      	ldrb	r3, [r7, #6]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d205      	bcs.n	80050c2 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80050b6:	79bb      	ldrb	r3, [r7, #6]
 80050b8:	75bb      	strb	r3, [r7, #22]
      b--;
 80050ba:	7dbb      	ldrb	r3, [r7, #22]
 80050bc:	3b01      	subs	r3, #1
 80050be:	75bb      	strb	r3, [r7, #22]
 80050c0:	e001      	b.n	80050c6 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80050c6:	7dfa      	ldrb	r2, [r7, #23]
 80050c8:	79bb      	ldrb	r3, [r7, #6]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d301      	bcc.n	80050d2 <u8g2_clip_intersection2+0x56>
    return 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e01c      	b.n	800510c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80050d2:	7dba      	ldrb	r2, [r7, #22]
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d801      	bhi.n	80050de <u8g2_clip_intersection2+0x62>
    return 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	e016      	b.n	800510c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80050de:	7dfa      	ldrb	r2, [r7, #23]
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d201      	bcs.n	80050ea <u8g2_clip_intersection2+0x6e>
    a = c;
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 80050ea:	7dba      	ldrb	r2, [r7, #22]
 80050ec:	79bb      	ldrb	r3, [r7, #6]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d901      	bls.n	80050f6 <u8g2_clip_intersection2+0x7a>
    b = d;
 80050f2:	79bb      	ldrb	r3, [r7, #6]
 80050f4:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	7dfa      	ldrb	r2, [r7, #23]
 80050fa:	701a      	strb	r2, [r3, #0]
  b -= a;
 80050fc:	7dba      	ldrb	r2, [r7, #22]
 80050fe:	7dfb      	ldrb	r3, [r7, #23]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	7dba      	ldrb	r2, [r7, #22]
 8005108:	701a      	strb	r2, [r3, #0]
  return 1;
 800510a:	2301      	movs	r3, #1
}
 800510c:	4618      	mov	r0, r3
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b085      	sub	sp, #20
 800511c:	af02      	add	r7, sp, #8
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	4608      	mov	r0, r1
 8005122:	4611      	mov	r1, r2
 8005124:	461a      	mov	r2, r3
 8005126:	4603      	mov	r3, r0
 8005128:	70fb      	strb	r3, [r7, #3]
 800512a:	460b      	mov	r3, r1
 800512c:	70bb      	strb	r3, [r7, #2]
 800512e:	4613      	mov	r3, r2
 8005130:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005138:	78ba      	ldrb	r2, [r7, #2]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005142:	7878      	ldrb	r0, [r7, #1]
 8005144:	78ba      	ldrb	r2, [r7, #2]
 8005146:	78f9      	ldrb	r1, [r7, #3]
 8005148:	7e3b      	ldrb	r3, [r7, #24]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	4603      	mov	r3, r0
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	47a0      	blx	r4
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	bd90      	pop	{r4, r7, pc}

0800515a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800515a:	b590      	push	{r4, r7, lr}
 800515c:	b085      	sub	sp, #20
 800515e:	af02      	add	r7, sp, #8
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	4608      	mov	r0, r1
 8005164:	4611      	mov	r1, r2
 8005166:	461a      	mov	r2, r3
 8005168:	4603      	mov	r3, r0
 800516a:	70fb      	strb	r3, [r7, #3]
 800516c:	460b      	mov	r3, r1
 800516e:	70bb      	strb	r3, [r7, #2]
 8005170:	4613      	mov	r3, r2
 8005172:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800517a:	2b00      	cmp	r3, #0
 800517c:	d06d      	beq.n	800525a <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800517e:	787b      	ldrb	r3, [r7, #1]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d06a      	beq.n	800525a <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8005184:	787b      	ldrb	r3, [r7, #1]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d918      	bls.n	80051bc <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800518a:	7e3b      	ldrb	r3, [r7, #24]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d109      	bne.n	80051a4 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	787b      	ldrb	r3, [r7, #1]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	b2db      	uxtb	r3, r3
 8005198:	70fb      	strb	r3, [r7, #3]
	  x++;
 800519a:	78fb      	ldrb	r3, [r7, #3]
 800519c:	3301      	adds	r3, #1
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	70fb      	strb	r3, [r7, #3]
 80051a2:	e00b      	b.n	80051bc <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80051a4:	7e3b      	ldrb	r3, [r7, #24]
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	d108      	bne.n	80051bc <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80051aa:	78ba      	ldrb	r2, [r7, #2]
 80051ac:	787b      	ldrb	r3, [r7, #1]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	70bb      	strb	r3, [r7, #2]
	  y++;
 80051b4:	78bb      	ldrb	r3, [r7, #2]
 80051b6:	3301      	adds	r3, #1
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80051bc:	7e3b      	ldrb	r3, [r7, #24]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80051c4:	7e3b      	ldrb	r3, [r7, #24]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d119      	bne.n	80051fe <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80051d0:	78bb      	ldrb	r3, [r7, #2]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d838      	bhi.n	8005248 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80051dc:	78bb      	ldrb	r3, [r7, #2]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d934      	bls.n	800524c <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80051ee:	1c79      	adds	r1, r7, #1
 80051f0:	1cf8      	adds	r0, r7, #3
 80051f2:	f7ff ff43 	bl	800507c <u8g2_clip_intersection2>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d119      	bne.n	8005230 <u8g2_DrawHVLine+0xd6>
	  return;
 80051fc:	e02d      	b.n	800525a <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	429a      	cmp	r2, r3
 8005208:	d822      	bhi.n	8005250 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	429a      	cmp	r2, r3
 8005214:	d91e      	bls.n	8005254 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005222:	1c79      	adds	r1, r7, #1
 8005224:	1cb8      	adds	r0, r7, #2
 8005226:	f7ff ff29 	bl	800507c <u8g2_clip_intersection2>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d013      	beq.n	8005258 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	689c      	ldr	r4, [r3, #8]
 8005236:	78f9      	ldrb	r1, [r7, #3]
 8005238:	78ba      	ldrb	r2, [r7, #2]
 800523a:	7878      	ldrb	r0, [r7, #1]
 800523c:	7e3b      	ldrb	r3, [r7, #24]
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	4603      	mov	r3, r0
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	47a0      	blx	r4
 8005246:	e008      	b.n	800525a <u8g2_DrawHVLine+0x100>
	  return;
 8005248:	bf00      	nop
 800524a:	e006      	b.n	800525a <u8g2_DrawHVLine+0x100>
	  return;
 800524c:	bf00      	nop
 800524e:	e004      	b.n	800525a <u8g2_DrawHVLine+0x100>
	  return;
 8005250:	bf00      	nop
 8005252:	e002      	b.n	800525a <u8g2_DrawHVLine+0x100>
	  return;
 8005254:	bf00      	nop
 8005256:	e000      	b.n	800525a <u8g2_DrawHVLine+0x100>
	  return;
 8005258:	bf00      	nop
    }
}
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	bd90      	pop	{r4, r7, pc}

08005260 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af02      	add	r7, sp, #8
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	461a      	mov	r2, r3
 800526e:	4603      	mov	r3, r0
 8005270:	70fb      	strb	r3, [r7, #3]
 8005272:	460b      	mov	r3, r1
 8005274:	70bb      	strb	r3, [r7, #2]
 8005276:	4613      	mov	r3, r2
 8005278:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800527a:	787b      	ldrb	r3, [r7, #1]
 800527c:	78ba      	ldrb	r2, [r7, #2]
 800527e:	78f9      	ldrb	r1, [r7, #3]
 8005280:	2000      	movs	r0, #0
 8005282:	9000      	str	r0, [sp, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff ff68 	bl	800515a <u8g2_DrawHVLine>
}
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af02      	add	r7, sp, #8
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	4608      	mov	r0, r1
 800529c:	4611      	mov	r1, r2
 800529e:	461a      	mov	r2, r3
 80052a0:	4603      	mov	r3, r0
 80052a2:	70fb      	strb	r3, [r7, #3]
 80052a4:	460b      	mov	r3, r1
 80052a6:	70bb      	strb	r3, [r7, #2]
 80052a8:	4613      	mov	r3, r2
 80052aa:	707b      	strb	r3, [r7, #1]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 80052ac:	787b      	ldrb	r3, [r7, #1]
 80052ae:	78ba      	ldrb	r2, [r7, #2]
 80052b0:	78f9      	ldrb	r1, [r7, #3]
 80052b2:	2001      	movs	r0, #1
 80052b4:	9000      	str	r0, [sp, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff ff4f 	bl	800515a <u8g2_DrawHVLine>
}
 80052bc:	bf00      	nop
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	70fb      	strb	r3, [r7, #3]
 80052d0:	4613      	mov	r3, r2
 80052d2:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80052da:	78ba      	ldrb	r2, [r7, #2]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d31a      	bcc.n	8005316 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80052e6:	78ba      	ldrb	r2, [r7, #2]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d216      	bcs.n	800531a <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052f2:	78fa      	ldrb	r2, [r7, #3]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d312      	bcc.n	800531e <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	429a      	cmp	r2, r3
 8005302:	d20e      	bcs.n	8005322 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8005304:	78ba      	ldrb	r2, [r7, #2]
 8005306:	78f9      	ldrb	r1, [r7, #3]
 8005308:	2300      	movs	r3, #0
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	2301      	movs	r3, #1
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff ff23 	bl	800515a <u8g2_DrawHVLine>
 8005314:	e006      	b.n	8005324 <u8g2_DrawPixel+0x60>
    return;
 8005316:	bf00      	nop
 8005318:	e004      	b.n	8005324 <u8g2_DrawPixel+0x60>
    return;
 800531a:	bf00      	nop
 800531c:	e002      	b.n	8005324 <u8g2_DrawPixel+0x60>
    return;
 800531e:	bf00      	nop
 8005320:	e000      	b.n	8005324 <u8g2_DrawPixel+0x60>
    return;
 8005322:	bf00      	nop
}
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800532a:	b490      	push	{r4, r7}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	4604      	mov	r4, r0
 8005332:	4608      	mov	r0, r1
 8005334:	4611      	mov	r1, r2
 8005336:	461a      	mov	r2, r3
 8005338:	4623      	mov	r3, r4
 800533a:	71fb      	strb	r3, [r7, #7]
 800533c:	4603      	mov	r3, r0
 800533e:	71bb      	strb	r3, [r7, #6]
 8005340:	460b      	mov	r3, r1
 8005342:	717b      	strb	r3, [r7, #5]
 8005344:	4613      	mov	r3, r2
 8005346:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8005348:	797a      	ldrb	r2, [r7, #5]
 800534a:	79bb      	ldrb	r3, [r7, #6]
 800534c:	429a      	cmp	r2, r3
 800534e:	d20d      	bcs.n	800536c <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8005350:	793a      	ldrb	r2, [r7, #4]
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	429a      	cmp	r2, r3
 8005356:	d901      	bls.n	800535c <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8005358:	2301      	movs	r3, #1
 800535a:	e014      	b.n	8005386 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800535c:	797a      	ldrb	r2, [r7, #5]
 800535e:	793b      	ldrb	r3, [r7, #4]
 8005360:	429a      	cmp	r2, r3
 8005362:	d901      	bls.n	8005368 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8005364:	2301      	movs	r3, #1
 8005366:	e00e      	b.n	8005386 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8005368:	2300      	movs	r3, #0
 800536a:	e00c      	b.n	8005386 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800536c:	793a      	ldrb	r2, [r7, #4]
 800536e:	79fb      	ldrb	r3, [r7, #7]
 8005370:	429a      	cmp	r2, r3
 8005372:	d907      	bls.n	8005384 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8005374:	797a      	ldrb	r2, [r7, #5]
 8005376:	793b      	ldrb	r3, [r7, #4]
 8005378:	429a      	cmp	r2, r3
 800537a:	d901      	bls.n	8005380 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800537c:	2301      	movs	r3, #1
 800537e:	e002      	b.n	8005386 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8005380:	2300      	movs	r3, #0
 8005382:	e000      	b.n	8005386 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8005384:	2300      	movs	r3, #0
    }
  }
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bc90      	pop	{r4, r7}
 800538e:	4770      	bx	lr

08005390 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	461a      	mov	r2, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	70fb      	strb	r3, [r7, #3]
 80053a2:	460b      	mov	r3, r1
 80053a4:	70bb      	strb	r3, [r7, #2]
 80053a6:	4613      	mov	r3, r2
 80053a8:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80053b6:	7c3b      	ldrb	r3, [r7, #16]
 80053b8:	78ba      	ldrb	r2, [r7, #2]
 80053ba:	f7ff ffb6 	bl	800532a <u8g2_is_intersection_decision_tree>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <u8g2_IsIntersection+0x38>
    return 0; 
 80053c4:	2300      	movs	r3, #0
 80053c6:	e00a      	b.n	80053de <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 80053d4:	787b      	ldrb	r3, [r7, #1]
 80053d6:	78fa      	ldrb	r2, [r7, #3]
 80053d8:	f7ff ffa7 	bl	800532a <u8g2_is_intersection_decision_tree>
 80053dc:	4603      	mov	r3, r0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b087      	sub	sp, #28
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	4608      	mov	r0, r1
 80053f0:	4611      	mov	r1, r2
 80053f2:	461a      	mov	r2, r3
 80053f4:	4603      	mov	r3, r0
 80053f6:	70fb      	strb	r3, [r7, #3]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70bb      	strb	r3, [r7, #2]
 80053fc:	4613      	mov	r3, r2
 80053fe:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8005400:	78bb      	ldrb	r3, [r7, #2]
 8005402:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005404:	7cfb      	ldrb	r3, [r7, #19]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 800540c:	2301      	movs	r3, #1
 800540e:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8005410:	7c3a      	ldrb	r2, [r7, #16]
 8005412:	7cfb      	ldrb	r3, [r7, #19]
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 800541a:	2300      	movs	r3, #0
 800541c:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005428:	2b01      	cmp	r3, #1
 800542a:	d801      	bhi.n	8005430 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800542c:	7c3b      	ldrb	r3, [r7, #16]
 800542e:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005436:	2b01      	cmp	r3, #1
 8005438:	d001      	beq.n	800543e <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800543a:	7c3b      	ldrb	r3, [r7, #16]
 800543c:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800543e:	78bb      	ldrb	r3, [r7, #2]
 8005440:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8005442:	89fb      	ldrh	r3, [r7, #14]
 8005444:	f023 0307 	bic.w	r3, r3, #7
 8005448:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	7c1b      	ldrb	r3, [r3, #16]
 8005450:	b29b      	uxth	r3, r3
 8005452:	89fa      	ldrh	r2, [r7, #14]
 8005454:	fb12 f303 	smulbb	r3, r2, r3
 8005458:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8005460:	89fb      	ldrh	r3, [r7, #14]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4413      	add	r3, r2
 8005466:	617b      	str	r3, [r7, #20]
  ptr += x;
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4413      	add	r3, r2
 800546e:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8005470:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d117      	bne.n	80054a8 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	781a      	ldrb	r2, [r3, #0]
 800547c:	7cbb      	ldrb	r3, [r7, #18]
 800547e:	4313      	orrs	r3, r2
 8005480:	b2da      	uxtb	r2, r3
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	781a      	ldrb	r2, [r3, #0]
 800548a:	7c7b      	ldrb	r3, [r7, #17]
 800548c:	4053      	eors	r3, r2
 800548e:	b2da      	uxtb	r2, r3
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	701a      	strb	r2, [r3, #0]
	ptr++;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	3301      	adds	r3, #1
 8005498:	617b      	str	r3, [r7, #20]
	len--;
 800549a:	787b      	ldrb	r3, [r7, #1]
 800549c:	3b01      	subs	r3, #1
 800549e:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 80054a0:	787b      	ldrb	r3, [r7, #1]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e8      	bne.n	8005478 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80054a6:	e039      	b.n	800551c <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	781a      	ldrb	r2, [r3, #0]
 80054ac:	7cbb      	ldrb	r3, [r7, #18]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	781a      	ldrb	r2, [r3, #0]
 80054ba:	7c7b      	ldrb	r3, [r7, #17]
 80054bc:	4053      	eors	r3, r2
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	3301      	adds	r3, #1
 80054c8:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80054ca:	7cfb      	ldrb	r3, [r7, #19]
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	74fb      	strb	r3, [r7, #19]
      len--;
 80054d2:	787b      	ldrb	r3, [r7, #1]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d115      	bne.n	800550a <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054e4:	461a      	mov	r2, r3
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	4413      	add	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d801      	bhi.n	80054fa <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80054f6:	2301      	movs	r3, #1
 80054f8:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8005500:	2b01      	cmp	r3, #1
 8005502:	d008      	beq.n	8005516 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8005504:	2301      	movs	r3, #1
 8005506:	747b      	strb	r3, [r7, #17]
 8005508:	e005      	b.n	8005516 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 800550a:	7cbb      	ldrb	r3, [r7, #18]
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8005510:	7c7b      	ldrb	r3, [r7, #17]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8005516:	787b      	ldrb	r3, [r7, #1]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1c5      	bne.n	80054a8 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	22ff      	movs	r2, #255	; 0xff
 8005544:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	22ff      	movs	r2, #255	; 0xff
 800554c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	4613      	mov	r3, r2
 8005570:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	79fa      	ldrb	r2, [r7, #7]
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f7ff ffaf 	bl	8005528 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f7ff fd1c 	bl	8005008 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 80055d8:	bf00      	nop
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	7bfa      	ldrb	r2, [r7, #15]
 8005600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	7c1b      	ldrb	r3, [r3, #16]
 8005608:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	2b1f      	cmp	r3, #31
 800560e:	d901      	bls.n	8005614 <u8g2_update_dimension_common+0x34>
    t = 31;
 8005610:	231f      	movs	r3, #31
 8005612:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	7bfa      	ldrb	r2, [r7, #15]
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005628:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	7bfa      	ldrb	r2, [r7, #15]
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563e:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8005648:	4413      	add	r3, r2
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	7c52      	ldrb	r2, [r2, #17]
 800564e:	4293      	cmp	r3, r2
 8005650:	dd06      	ble.n	8005660 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	7c5a      	ldrb	r2, [r3, #17]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	4413      	add	r3, r2
 8005688:	b2da      	uxtb	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	22f0      	movs	r2, #240	; 0xf0
 8005694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	8a9b      	ldrh	r3, [r3, #20]
 800569c:	2bf0      	cmp	r3, #240	; 0xf0
 800569e:	d805      	bhi.n	80056ac <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	8a9b      	ldrh	r3, [r3, #20]
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	8adb      	ldrh	r3, [r3, #22]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	4603      	mov	r3, r0
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fe51 	bl	8005390 <u8g2_IsIntersection>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d104      	bne.n	80056fe <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80056fc:	e03b      	b.n	8005776 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005712:	429a      	cmp	r2, r3
 8005714:	d205      	bcs.n	8005722 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800572e:	429a      	cmp	r2, r3
 8005730:	d905      	bls.n	800573e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800574a:	429a      	cmp	r2, r3
 800574c:	d205      	bcs.n	800575a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005766:	429a      	cmp	r2, r3
 8005768:	d905      	bls.n	8005776 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b082      	sub	sp, #8
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff ff2a 	bl	80055e0 <u8g2_update_dimension_common>
}
 800578c:	bf00      	nop
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff ff7b 	bl	80056c4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af02      	add	r7, sp, #8
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	4608      	mov	r0, r1
 80057e0:	4611      	mov	r1, r2
 80057e2:	461a      	mov	r2, r3
 80057e4:	4603      	mov	r3, r0
 80057e6:	70fb      	strb	r3, [r7, #3]
 80057e8:	460b      	mov	r3, r1
 80057ea:	70bb      	strb	r3, [r7, #2]
 80057ec:	4613      	mov	r3, r2
 80057ee:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80057f0:	7878      	ldrb	r0, [r7, #1]
 80057f2:	78ba      	ldrb	r2, [r7, #2]
 80057f4:	78f9      	ldrb	r1, [r7, #3]
 80057f6:	7c3b      	ldrb	r3, [r7, #16]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	4603      	mov	r3, r0
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff fc8b 	bl	8005118 <u8g2_draw_hv_line_2dir>
}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	460b      	mov	r3, r1
 8005830:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <u8x8_ascii_next+0x18>
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	2b0a      	cmp	r3, #10
 800583c:	d102      	bne.n	8005844 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800583e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005842:	e001      	b.n	8005848 <u8x8_ascii_next+0x22>
  return b;
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	b29b      	uxth	r3, r3
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	460b      	mov	r3, r1
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	691c      	ldr	r4, [r3, #16]
 8005866:	7afa      	ldrb	r2, [r7, #11]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2117      	movs	r1, #23
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	47a0      	blx	r4
 8005870:	4603      	mov	r3, r0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	bd90      	pop	{r4, r7, pc}

0800587a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8005886:	1cfb      	adds	r3, r7, #3
 8005888:	461a      	mov	r2, r3
 800588a:	2101      	movs	r1, #1
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff ffe1 	bl	8005854 <u8x8_byte_SendBytes>
 8005892:	4603      	mov	r3, r0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800589c:	b590      	push	{r4, r7, lr}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691c      	ldr	r4, [r3, #16]
 80058a8:	2300      	movs	r3, #0
 80058aa:	2200      	movs	r2, #0
 80058ac:	2118      	movs	r1, #24
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	47a0      	blx	r4
 80058b2:	4603      	mov	r3, r0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd90      	pop	{r4, r7, pc}

080058bc <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691c      	ldr	r4, [r3, #16]
 80058c8:	2300      	movs	r3, #0
 80058ca:	2200      	movs	r2, #0
 80058cc:	2119      	movs	r1, #25
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	47a0      	blx	r4
 80058d2:	4603      	mov	r3, r0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd90      	pop	{r4, r7, pc}

080058dc <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80058dc:	b590      	push	{r4, r7, lr}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68dc      	ldr	r4, [r3, #12]
 80058ec:	78fa      	ldrb	r2, [r7, #3]
 80058ee:	2300      	movs	r3, #0
 80058f0:	2115      	movs	r1, #21
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	47a0      	blx	r4
 80058f6:	4603      	mov	r3, r0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd90      	pop	{r4, r7, pc}

08005900 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8005900:	b590      	push	{r4, r7, lr}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68dc      	ldr	r4, [r3, #12]
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	2300      	movs	r3, #0
 8005914:	2116      	movs	r1, #22
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	47a0      	blx	r4
 800591a:	4603      	mov	r3, r0
}
 800591c:	4618      	mov	r0, r3
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	bd90      	pop	{r4, r7, pc}

08005924 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005924:	b590      	push	{r4, r7, lr}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	460b      	mov	r3, r1
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68dc      	ldr	r4, [r3, #12]
 8005936:	7afa      	ldrb	r2, [r7, #11]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2117      	movs	r1, #23
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	47a0      	blx	r4
 8005940:	4603      	mov	r3, r0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	bd90      	pop	{r4, r7, pc}

0800594a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800594a:	b590      	push	{r4, r7, lr}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68dc      	ldr	r4, [r3, #12]
 8005956:	2300      	movs	r3, #0
 8005958:	2200      	movs	r2, #0
 800595a:	2118      	movs	r1, #24
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	47a0      	blx	r4
 8005960:	4603      	mov	r3, r0
}
 8005962:	4618      	mov	r0, r3
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	bd90      	pop	{r4, r7, pc}

0800596a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800596a:	b590      	push	{r4, r7, lr}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68dc      	ldr	r4, [r3, #12]
 8005976:	2300      	movs	r3, #0
 8005978:	2200      	movs	r2, #0
 800597a:	2119      	movs	r1, #25
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	47a0      	blx	r4
 8005980:	4603      	mov	r3, r0
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bd90      	pop	{r4, r7, pc}

0800598a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800598a:	b590      	push	{r4, r7, lr}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	73fb      	strb	r3, [r7, #15]
    data++;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	3301      	adds	r3, #1
 800599e:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	2bfe      	cmp	r3, #254	; 0xfe
 80059a4:	d031      	beq.n	8005a0a <u8x8_cad_SendSequence+0x80>
 80059a6:	2bfe      	cmp	r3, #254	; 0xfe
 80059a8:	dc3d      	bgt.n	8005a26 <u8x8_cad_SendSequence+0x9c>
 80059aa:	2b19      	cmp	r3, #25
 80059ac:	dc3b      	bgt.n	8005a26 <u8x8_cad_SendSequence+0x9c>
 80059ae:	2b18      	cmp	r3, #24
 80059b0:	da23      	bge.n	80059fa <u8x8_cad_SendSequence+0x70>
 80059b2:	2b16      	cmp	r3, #22
 80059b4:	dc02      	bgt.n	80059bc <u8x8_cad_SendSequence+0x32>
 80059b6:	2b15      	cmp	r3, #21
 80059b8:	da03      	bge.n	80059c2 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80059ba:	e034      	b.n	8005a26 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80059bc:	2b17      	cmp	r3, #23
 80059be:	d00e      	beq.n	80059de <u8x8_cad_SendSequence+0x54>
	return;
 80059c0:	e031      	b.n	8005a26 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68dc      	ldr	r4, [r3, #12]
 80059cc:	7bba      	ldrb	r2, [r7, #14]
 80059ce:	7bf9      	ldrb	r1, [r7, #15]
 80059d0:	2300      	movs	r3, #0
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	47a0      	blx	r4
	  data++;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	3301      	adds	r3, #1
 80059da:	603b      	str	r3, [r7, #0]
	  break;
 80059dc:	e022      	b.n	8005a24 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80059e4:	f107 030e 	add.w	r3, r7, #14
 80059e8:	461a      	mov	r2, r3
 80059ea:	2101      	movs	r1, #1
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff ff99 	bl	8005924 <u8x8_cad_SendData>
	  data++;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	3301      	adds	r3, #1
 80059f6:	603b      	str	r3, [r7, #0]
	  break;
 80059f8:	e014      	b.n	8005a24 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68dc      	ldr	r4, [r3, #12]
 80059fe:	7bf9      	ldrb	r1, [r7, #15]
 8005a00:	2300      	movs	r3, #0
 8005a02:	2200      	movs	r2, #0
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	47a0      	blx	r4
	  break;
 8005a08:	e00c      	b.n	8005a24 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8005a10:	7bbb      	ldrb	r3, [r7, #14]
 8005a12:	461a      	mov	r2, r3
 8005a14:	2129      	movs	r1, #41	; 0x29
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fa2d 	bl	8005e76 <u8x8_gpio_call>
	  data++;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	603b      	str	r3, [r7, #0]
	  break;
 8005a22:	bf00      	nop
    cmd = *data;
 8005a24:	e7b6      	b.n	8005994 <u8x8_cad_SendSequence+0xa>
	return;
 8005a26:	bf00      	nop
    }
  }
}
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd90      	pop	{r4, r7, pc}

08005a2e <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8005a2e:	b590      	push	{r4, r7, lr}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	460b      	mov	r3, r1
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7ff ff2d 	bl	800589c <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8005a42:	2140      	movs	r1, #64	; 0x40
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff ff18 	bl	800587a <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	691c      	ldr	r4, [r3, #16]
 8005a4e:	7afa      	ldrb	r2, [r7, #11]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2117      	movs	r1, #23
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f7ff ff2f 	bl	80058bc <u8x8_byte_EndTransfer>
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd90      	pop	{r4, r7, pc}
	...

08005a68 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005a68:	b590      	push	{r4, r7, lr}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	607b      	str	r3, [r7, #4]
 8005a72:	460b      	mov	r3, r1
 8005a74:	72fb      	strb	r3, [r7, #11]
 8005a76:	4613      	mov	r3, r2
 8005a78:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8005a7a:	7afb      	ldrb	r3, [r7, #11]
 8005a7c:	3b14      	subs	r3, #20
 8005a7e:	2b05      	cmp	r3, #5
 8005a80:	d86e      	bhi.n	8005b60 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8005a82:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005b1f 	.word	0x08005b1f
 8005a8c:	08005aa1 	.word	0x08005aa1
 8005a90:	08005acf 	.word	0x08005acf
 8005a94:	08005adb 	.word	0x08005adb
 8005a98:	08005b43 	.word	0x08005b43
 8005a9c:	08005b4b 	.word	0x08005b4b
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8005aa0:	4b33      	ldr	r3, [pc, #204]	; (8005b70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f7ff ff07 	bl	80058bc <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f7ff fef4 	bl	800589c <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7ff fedf 	bl	800587a <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005abc:	7abb      	ldrb	r3, [r7, #10]
 8005abe:	4619      	mov	r1, r3
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff feda 	bl	800587a <u8x8_byte_SendByte>
      in_transfer = 1;
 8005ac6:	4b2a      	ldr	r3, [pc, #168]	; (8005b70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005ac8:	2201      	movs	r2, #1
 8005aca:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8005acc:	e04a      	b.n	8005b64 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8005ace:	7abb      	ldrb	r3, [r7, #10]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f7ff fed1 	bl	800587a <u8x8_byte_SendByte>
      break;      
 8005ad8:	e044      	b.n	8005b64 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8005ada:	4b25      	ldr	r3, [pc, #148]	; (8005b70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f7ff feea 	bl	80058bc <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8005aec:	e00a      	b.n	8005b04 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	2118      	movs	r1, #24
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f7ff ff9b 	bl	8005a2e <u8x8_i2c_data_transfer>
	arg_int-=24;
 8005af8:	7abb      	ldrb	r3, [r7, #10]
 8005afa:	3b18      	subs	r3, #24
 8005afc:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	3318      	adds	r3, #24
 8005b02:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8005b04:	7abb      	ldrb	r3, [r7, #10]
 8005b06:	2b18      	cmp	r3, #24
 8005b08:	d8f1      	bhi.n	8005aee <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8005b0a:	7abb      	ldrb	r3, [r7, #10]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4619      	mov	r1, r3
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7ff ff8c 	bl	8005a2e <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8005b16:	4b16      	ldr	r3, [pc, #88]	; (8005b70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]
      break;
 8005b1c:	e022      	b.n	8005b64 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b24:	2bff      	cmp	r3, #255	; 0xff
 8005b26:	d103      	bne.n	8005b30 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2278      	movs	r2, #120	; 0x78
 8005b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	691c      	ldr	r4, [r3, #16]
 8005b34:	7aba      	ldrb	r2, [r7, #10]
 8005b36:	7af9      	ldrb	r1, [r7, #11]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	47a0      	blx	r4
 8005b3e:	4603      	mov	r3, r0
 8005b40:	e011      	b.n	8005b66 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]
      break;
 8005b48:	e00c      	b.n	8005b64 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8005b4a:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff feb2 	bl	80058bc <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	701a      	strb	r2, [r3, #0]
      break;
 8005b5e:	e001      	b.n	8005b64 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	e000      	b.n	8005b66 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8005b64:	2301      	movs	r3, #1
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd90      	pop	{r4, r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	2000064c 	.word	0x2000064c

08005b74 <u8x8_d_ssd1306_128x32_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	607b      	str	r3, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	72fb      	strb	r3, [r7, #11]
 8005b82:	4613      	mov	r3, r2
 8005b84:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8005b86:	7afb      	ldrb	r3, [r7, #11]
 8005b88:	3b0a      	subs	r3, #10
 8005b8a:	2b05      	cmp	r3, #5
 8005b8c:	f200 8090 	bhi.w	8005cb0 <u8x8_d_ssd1306_128x32_generic+0x13c>
 8005b90:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <u8x8_d_ssd1306_128x32_generic+0x24>)
 8005b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b96:	bf00      	nop
 8005b98:	08005bb1 	.word	0x08005bb1
 8005b9c:	08005bc1 	.word	0x08005bc1
 8005ba0:	08005cb1 	.word	0x08005cb1
 8005ba4:	08005bdb 	.word	0x08005bdb
 8005ba8:	08005c0d 	.word	0x08005c0d
 8005bac:	08005c2d 	.word	0x08005c2d
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f8c3 	bl	8005d3c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
 8005bb6:	4942      	ldr	r1, [pc, #264]	; (8005cc0 <u8x8_d_ssd1306_128x32_generic+0x14c>)
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7ff fee6 	bl	800598a <u8x8_cad_SendSequence>
      break;
 8005bbe:	e079      	b.n	8005cb4 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8005bc0:	7abb      	ldrb	r3, [r7, #10]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <u8x8_d_ssd1306_128x32_generic+0x5c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
 8005bc6:	493f      	ldr	r1, [pc, #252]	; (8005cc4 <u8x8_d_ssd1306_128x32_generic+0x150>)
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7ff fede 	bl	800598a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
      break;
 8005bce:	e071      	b.n	8005cb4 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 8005bd0:	493d      	ldr	r1, [pc, #244]	; (8005cc8 <u8x8_d_ssd1306_128x32_generic+0x154>)
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f7ff fed9 	bl	800598a <u8x8_cad_SendSequence>
      break;
 8005bd8:	e06c      	b.n	8005cb4 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8005bda:	7abb      	ldrb	r3, [r7, #10]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10a      	bne.n	8005bf6 <u8x8_d_ssd1306_128x32_generic+0x82>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
 8005be0:	493a      	ldr	r1, [pc, #232]	; (8005ccc <u8x8_d_ssd1306_128x32_generic+0x158>)
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff fed1 	bl	800598a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	7c9a      	ldrb	r2, [r3, #18]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8005bf4:	e05e      	b.n	8005cb4 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
 8005bf6:	4936      	ldr	r1, [pc, #216]	; (8005cd0 <u8x8_d_ssd1306_128x32_generic+0x15c>)
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff fec6 	bl	800598a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	7cda      	ldrb	r2, [r3, #19]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8005c0a:	e053      	b.n	8005cb4 <u8x8_d_ssd1306_128x32_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f7ff fe9c 	bl	800594a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8005c12:	2181      	movs	r1, #129	; 0x81
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff fe61 	bl	80058dc <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8005c1a:	7abb      	ldrb	r3, [r7, #10]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff fe6e 	bl	8005900 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff fea0 	bl	800596a <u8x8_cad_EndTransfer>
      break;
 8005c2a:	e043      	b.n	8005cb4 <u8x8_d_ssd1306_128x32_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7ff fe8c 	bl	800594a <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	795b      	ldrb	r3, [r3, #5]
 8005c36:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	4413      	add	r3, r2
 8005c48:	75fb      	strb	r3, [r7, #23]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	f043 0310 	orr.w	r3, r3, #16
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	4619      	mov	r1, r3
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7ff fe3f 	bl	80058dc <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	4619      	mov	r1, r3
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f7ff fe37 	bl	80058dc <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	799b      	ldrb	r3, [r3, #6]
 8005c72:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	4619      	mov	r1, r3
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f7ff fe2e 	bl	80058dc <u8x8_cad_SendCmd>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	791b      	ldrb	r3, [r3, #4]
 8005c84:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8005c8c:	7dbb      	ldrb	r3, [r7, #22]
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4619      	mov	r1, r3
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f7ff fe44 	bl	8005924 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8005c9c:	7abb      	ldrb	r3, [r7, #10]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8005ca2:	7abb      	ldrb	r3, [r7, #10]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1eb      	bne.n	8005c80 <u8x8_d_ssd1306_128x32_generic+0x10c>
      
      u8x8_cad_EndTransfer(u8x8);
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f7ff fe5e 	bl	800596a <u8x8_cad_EndTransfer>
      break;
 8005cae:	e001      	b.n	8005cb4 <u8x8_d_ssd1306_128x32_generic+0x140>
    default:
      return 0;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e000      	b.n	8005cb6 <u8x8_d_ssd1306_128x32_generic+0x142>
  }
  return 1;
 8005cb4:	2301      	movs	r3, #1
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	08019fa4 	.word	0x08019fa4
 8005cc4:	08019fdc 	.word	0x08019fdc
 8005cc8:	08019fe4 	.word	0x08019fe4
 8005ccc:	08019fec 	.word	0x08019fec
 8005cd0:	08019ff4 	.word	0x08019ff4

08005cd4 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	607b      	str	r3, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	72fb      	strb	r3, [r7, #11]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	2b09      	cmp	r3, #9
 8005cea:	d105      	bne.n	8005cf8 <u8x8_d_ssd1306_128x32_univision+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
 8005cec:	4908      	ldr	r1, [pc, #32]	; (8005d10 <u8x8_d_ssd1306_128x32_univision+0x3c>)
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f810 	bl	8005d14 <u8x8_d_helper_display_setup_memory>
      return 1;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e006      	b.n	8005d06 <u8x8_d_ssd1306_128x32_univision+0x32>
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
 8005cf8:	7aba      	ldrb	r2, [r7, #10]
 8005cfa:	7af9      	ldrb	r1, [r7, #11]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f7ff ff38 	bl	8005b74 <u8x8_d_ssd1306_128x32_generic>
 8005d04:	4603      	mov	r3, r0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	08019ffc 	.word	0x08019ffc

08005d14 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	7c9a      	ldrb	r2, [r3, #18]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695c      	ldr	r4, [r3, #20]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2128      	movs	r1, #40	; 0x28
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68dc      	ldr	r4, [r3, #12]
 8005d56:	2300      	movs	r3, #0
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2114      	movs	r1, #20
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8005d60:	2201      	movs	r2, #1
 8005d62:	214b      	movs	r1, #75	; 0x4b
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f886 	bl	8005e76 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	791b      	ldrb	r3, [r3, #4]
 8005d70:	461a      	mov	r2, r3
 8005d72:	2129      	movs	r1, #41	; 0x29
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f87e 	bl	8005e76 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	214b      	movs	r1, #75	; 0x4b
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f879 	bl	8005e76 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	791b      	ldrb	r3, [r3, #4]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2129      	movs	r1, #41	; 0x29
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f871 	bl	8005e76 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8005d94:	2201      	movs	r2, #1
 8005d96:	214b      	movs	r1, #75	; 0x4b
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f86c 	bl	8005e76 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	795b      	ldrb	r3, [r3, #5]
 8005da4:	461a      	mov	r2, r3
 8005da6:	2129      	movs	r1, #41	; 0x29
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f864 	bl	8005e76 <u8x8_gpio_call>
}    
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd90      	pop	{r4, r7, pc}

08005db6 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8005db6:	b590      	push	{r4, r7, lr}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	4608      	mov	r0, r1
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	70fb      	strb	r3, [r7, #3]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	70bb      	strb	r3, [r7, #2]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8005dd4:	78bb      	ldrb	r3, [r7, #2]
 8005dd6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8005dd8:	787b      	ldrb	r3, [r7, #1]
 8005dda:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689c      	ldr	r4, [r3, #8]
 8005de4:	f107 0308 	add.w	r3, r7, #8
 8005de8:	2201      	movs	r2, #1
 8005dea:	210f      	movs	r1, #15
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	47a0      	blx	r4
 8005df0:	4603      	mov	r3, r0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd90      	pop	{r4, r7, pc}

08005dfa <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8005dfa:	b590      	push	{r4, r7, lr}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689c      	ldr	r4, [r3, #8]
 8005e06:	2300      	movs	r3, #0
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2109      	movs	r1, #9
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	47a0      	blx	r4
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd90      	pop	{r4, r7, pc}

08005e18 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8005e18:	b590      	push	{r4, r7, lr}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689c      	ldr	r4, [r3, #8]
 8005e24:	2300      	movs	r3, #0
 8005e26:	2200      	movs	r2, #0
 8005e28:	210a      	movs	r1, #10
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	47a0      	blx	r4
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd90      	pop	{r4, r7, pc}

08005e36 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8005e36:	b590      	push	{r4, r7, lr}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689c      	ldr	r4, [r3, #8]
 8005e46:	78fa      	ldrb	r2, [r7, #3]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	210b      	movs	r1, #11
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	47a0      	blx	r4
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd90      	pop	{r4, r7, pc}

08005e58 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8005e58:	b590      	push	{r4, r7, lr}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689c      	ldr	r4, [r3, #8]
 8005e64:	2300      	movs	r3, #0
 8005e66:	2200      	movs	r2, #0
 8005e68:	2110      	movs	r1, #16
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	47a0      	blx	r4
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd90      	pop	{r4, r7, pc}

08005e76 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8005e76:	b590      	push	{r4, r7, lr}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	460b      	mov	r3, r1
 8005e80:	70fb      	strb	r3, [r7, #3]
 8005e82:	4613      	mov	r3, r2
 8005e84:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	695c      	ldr	r4, [r3, #20]
 8005e8a:	78ba      	ldrb	r2, [r7, #2]
 8005e8c:	78f9      	ldrb	r1, [r7, #3]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	47a0      	blx	r4
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd90      	pop	{r4, r7, pc}

08005e9c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	607b      	str	r3, [r7, #4]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	72fb      	strb	r3, [r7, #11]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <u8x8_SetupDefaults+0x60>)
 8005ece:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a12      	ldr	r2, [pc, #72]	; (8005f1c <u8x8_SetupDefaults+0x60>)
 8005ed4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a10      	ldr	r2, [pc, #64]	; (8005f1c <u8x8_SetupDefaults+0x60>)
 8005eda:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a0f      	ldr	r2, [pc, #60]	; (8005f1c <u8x8_SetupDefaults+0x60>)
 8005ee0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	22ff      	movs	r2, #255	; 0xff
 8005f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	22ff      	movs	r2, #255	; 0xff
 8005f0c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	08005e9d 	.word	0x08005e9d

08005f20 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f7ff ffc4 	bl	8005ebc <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f7ff ff54 	bl	8005dfa <u8x8_SetupMemory>
}
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005f60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005f62:	e003      	b.n	8005f6c <LoopCopyDataInit>

08005f64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005f64:	4b0c      	ldr	r3, [pc, #48]	; (8005f98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005f66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005f68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005f6a:	3104      	adds	r1, #4

08005f6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005f6c:	480b      	ldr	r0, [pc, #44]	; (8005f9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005f70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005f72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005f74:	d3f6      	bcc.n	8005f64 <CopyDataInit>
  ldr  r2, =_sbss
 8005f76:	4a0b      	ldr	r2, [pc, #44]	; (8005fa4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005f78:	e002      	b.n	8005f80 <LoopFillZerobss>

08005f7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005f7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005f7c:	f842 3b04 	str.w	r3, [r2], #4

08005f80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005f80:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005f82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005f84:	d3f9      	bcc.n	8005f7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005f86:	f7fd fa1d 	bl	80033c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f8a:	f00c fde7 	bl	8012b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f8e:	f7fc fd3b 	bl	8002a08 <main>
  bx  lr    
 8005f92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005f94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005f98:	0801a5b8 	.word	0x0801a5b8
  ldr  r0, =_sdata
 8005f9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005fa0:	20000374 	.word	0x20000374
  ldr  r2, =_sbss
 8005fa4:	20000378 	.word	0x20000378
  ldr  r3, = _ebss
 8005fa8:	20003380 	.word	0x20003380

08005fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fac:	e7fe      	b.n	8005fac <ADC_IRQHandler>
	...

08005fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ff0 <HAL_Init+0x40>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a0d      	ldr	r2, [pc, #52]	; (8005ff0 <HAL_Init+0x40>)
 8005fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <HAL_Init+0x40>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a0a      	ldr	r2, [pc, #40]	; (8005ff0 <HAL_Init+0x40>)
 8005fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fcc:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <HAL_Init+0x40>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a07      	ldr	r2, [pc, #28]	; (8005ff0 <HAL_Init+0x40>)
 8005fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fd8:	2003      	movs	r0, #3
 8005fda:	f000 fd1b 	bl	8006a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005fde:	2000      	movs	r0, #0
 8005fe0:	f000 f808 	bl	8005ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fe4:	f7fd f8b8 	bl	8003158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40023c00 	.word	0x40023c00

08005ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ffc:	4b12      	ldr	r3, [pc, #72]	; (8006048 <HAL_InitTick+0x54>)
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	4b12      	ldr	r3, [pc, #72]	; (800604c <HAL_InitTick+0x58>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	4619      	mov	r1, r3
 8006006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800600a:	fbb3 f3f1 	udiv	r3, r3, r1
 800600e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fd33 	bl	8006a7e <HAL_SYSTICK_Config>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e00e      	b.n	8006040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b0f      	cmp	r3, #15
 8006026:	d80a      	bhi.n	800603e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006028:	2200      	movs	r2, #0
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	f04f 30ff 	mov.w	r0, #4294967295
 8006030:	f000 fcfb 	bl	8006a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006034:	4a06      	ldr	r2, [pc, #24]	; (8006050 <HAL_InitTick+0x5c>)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	e000      	b.n	8006040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20000004 	.word	0x20000004
 800604c:	2000000c 	.word	0x2000000c
 8006050:	20000008 	.word	0x20000008

08006054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006058:	4b06      	ldr	r3, [pc, #24]	; (8006074 <HAL_IncTick+0x20>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	461a      	mov	r2, r3
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <HAL_IncTick+0x24>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4413      	add	r3, r2
 8006064:	4a04      	ldr	r2, [pc, #16]	; (8006078 <HAL_IncTick+0x24>)
 8006066:	6013      	str	r3, [r2, #0]
}
 8006068:	bf00      	nop
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	2000000c 	.word	0x2000000c
 8006078:	20001624 	.word	0x20001624

0800607c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
  return uwTick;
 8006080:	4b03      	ldr	r3, [pc, #12]	; (8006090 <HAL_GetTick+0x14>)
 8006082:	681b      	ldr	r3, [r3, #0]
}
 8006084:	4618      	mov	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20001624 	.word	0x20001624

08006094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800609c:	f7ff ffee 	bl	800607c <HAL_GetTick>
 80060a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ac:	d005      	beq.n	80060ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80060ae:	4b0a      	ldr	r3, [pc, #40]	; (80060d8 <HAL_Delay+0x44>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80060ba:	bf00      	nop
 80060bc:	f7ff ffde 	bl	800607c <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d8f7      	bhi.n	80060bc <HAL_Delay+0x28>
  {
  }
}
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	2000000c 	.word	0x2000000c

080060dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e033      	b.n	800615a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fb fbc4 	bl	8001888 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b00      	cmp	r3, #0
 8006118:	d118      	bne.n	800614c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006122:	f023 0302 	bic.w	r3, r3, #2
 8006126:	f043 0202 	orr.w	r2, r3, #2
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 faa4 	bl	800667c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f023 0303 	bic.w	r3, r3, #3
 8006142:	f043 0201 	orr.w	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	641a      	str	r2, [r3, #64]	; 0x40
 800614a:	e001      	b.n	8006150 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006158:	7bfb      	ldrb	r3, [r7, #15]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_ADC_Start+0x1a>
 800617a:	2302      	movs	r3, #2
 800617c:	e0b2      	b.n	80062e4 <HAL_ADC_Start+0x180>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b01      	cmp	r3, #1
 8006192:	d018      	beq.n	80061c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f042 0201 	orr.w	r2, r2, #1
 80061a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80061a4:	4b52      	ldr	r3, [pc, #328]	; (80062f0 <HAL_ADC_Start+0x18c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a52      	ldr	r2, [pc, #328]	; (80062f4 <HAL_ADC_Start+0x190>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	0c9a      	lsrs	r2, r3, #18
 80061b0:	4613      	mov	r3, r2
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	4413      	add	r3, r2
 80061b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80061b8:	e002      	b.n	80061c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	3b01      	subs	r3, #1
 80061be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1f9      	bne.n	80061ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 0301 	and.w	r3, r3, #1
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d17a      	bne.n	80062ca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80061fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006212:	d106      	bne.n	8006222 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006218:	f023 0206 	bic.w	r2, r3, #6
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	645a      	str	r2, [r3, #68]	; 0x44
 8006220:	e002      	b.n	8006228 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006230:	4b31      	ldr	r3, [pc, #196]	; (80062f8 <HAL_ADC_Start+0x194>)
 8006232:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800623c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	2b00      	cmp	r3, #0
 8006248:	d12a      	bne.n	80062a0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a2b      	ldr	r2, [pc, #172]	; (80062fc <HAL_ADC_Start+0x198>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d015      	beq.n	8006280 <HAL_ADC_Start+0x11c>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a29      	ldr	r2, [pc, #164]	; (8006300 <HAL_ADC_Start+0x19c>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d105      	bne.n	800626a <HAL_ADC_Start+0x106>
 800625e:	4b26      	ldr	r3, [pc, #152]	; (80062f8 <HAL_ADC_Start+0x194>)
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a25      	ldr	r2, [pc, #148]	; (8006304 <HAL_ADC_Start+0x1a0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d136      	bne.n	80062e2 <HAL_ADC_Start+0x17e>
 8006274:	4b20      	ldr	r3, [pc, #128]	; (80062f8 <HAL_ADC_Start+0x194>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f003 0310 	and.w	r3, r3, #16
 800627c:	2b00      	cmp	r3, #0
 800627e:	d130      	bne.n	80062e2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d129      	bne.n	80062e2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800629c:	609a      	str	r2, [r3, #8]
 800629e:	e020      	b.n	80062e2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a15      	ldr	r2, [pc, #84]	; (80062fc <HAL_ADC_Start+0x198>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d11b      	bne.n	80062e2 <HAL_ADC_Start+0x17e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d114      	bne.n	80062e2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80062c6:	609a      	str	r2, [r3, #8]
 80062c8:	e00b      	b.n	80062e2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	f043 0210 	orr.w	r2, r3, #16
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062da:	f043 0201 	orr.w	r2, r3, #1
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	20000004 	.word	0x20000004
 80062f4:	431bde83 	.word	0x431bde83
 80062f8:	40012300 	.word	0x40012300
 80062fc:	40012000 	.word	0x40012000
 8006300:	40012100 	.word	0x40012100
 8006304:	40012200 	.word	0x40012200

08006308 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006324:	d113      	bne.n	800634e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006334:	d10b      	bne.n	800634e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f043 0220 	orr.w	r2, r3, #32
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e063      	b.n	8006416 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800634e:	f7ff fe95 	bl	800607c <HAL_GetTick>
 8006352:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006354:	e021      	b.n	800639a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635c:	d01d      	beq.n	800639a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <HAL_ADC_PollForConversion+0x6c>
 8006364:	f7ff fe8a 	bl	800607c <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d212      	bcs.n	800639a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b02      	cmp	r3, #2
 8006380:	d00b      	beq.n	800639a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	f043 0204 	orr.w	r2, r3, #4
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e03d      	b.n	8006416 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d1d6      	bne.n	8006356 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f06f 0212 	mvn.w	r2, #18
 80063b0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d123      	bne.n	8006414 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d11f      	bne.n	8006414 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d006      	beq.n	80063f0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d111      	bne.n	8006414 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d105      	bne.n	8006414 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	f043 0201 	orr.w	r2, r3, #1
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_ADC_ConfigChannel+0x1c>
 8006450:	2302      	movs	r3, #2
 8006452:	e105      	b.n	8006660 <HAL_ADC_ConfigChannel+0x228>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b09      	cmp	r3, #9
 8006462:	d925      	bls.n	80064b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68d9      	ldr	r1, [r3, #12]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	461a      	mov	r2, r3
 8006472:	4613      	mov	r3, r2
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	4413      	add	r3, r2
 8006478:	3b1e      	subs	r3, #30
 800647a:	2207      	movs	r2, #7
 800647c:	fa02 f303 	lsl.w	r3, r2, r3
 8006480:	43da      	mvns	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	400a      	ands	r2, r1
 8006488:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68d9      	ldr	r1, [r3, #12]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	4618      	mov	r0, r3
 800649c:	4603      	mov	r3, r0
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	4403      	add	r3, r0
 80064a2:	3b1e      	subs	r3, #30
 80064a4:	409a      	lsls	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	60da      	str	r2, [r3, #12]
 80064ae:	e022      	b.n	80064f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6919      	ldr	r1, [r3, #16]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	4613      	mov	r3, r2
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	4413      	add	r3, r2
 80064c4:	2207      	movs	r2, #7
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	43da      	mvns	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	400a      	ands	r2, r1
 80064d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6919      	ldr	r1, [r3, #16]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	4618      	mov	r0, r3
 80064e6:	4603      	mov	r3, r0
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	4403      	add	r3, r0
 80064ec:	409a      	lsls	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b06      	cmp	r3, #6
 80064fc:	d824      	bhi.n	8006548 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	3b05      	subs	r3, #5
 8006510:	221f      	movs	r2, #31
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	43da      	mvns	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	400a      	ands	r2, r1
 800651e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	b29b      	uxth	r3, r3
 800652c:	4618      	mov	r0, r3
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	3b05      	subs	r3, #5
 800653a:	fa00 f203 	lsl.w	r2, r0, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	635a      	str	r2, [r3, #52]	; 0x34
 8006546:	e04c      	b.n	80065e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b0c      	cmp	r3, #12
 800654e:	d824      	bhi.n	800659a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	3b23      	subs	r3, #35	; 0x23
 8006562:	221f      	movs	r2, #31
 8006564:	fa02 f303 	lsl.w	r3, r2, r3
 8006568:	43da      	mvns	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	400a      	ands	r2, r1
 8006570:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	4618      	mov	r0, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	3b23      	subs	r3, #35	; 0x23
 800658c:	fa00 f203 	lsl.w	r2, r0, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
 8006598:	e023      	b.n	80065e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	4613      	mov	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	3b41      	subs	r3, #65	; 0x41
 80065ac:	221f      	movs	r2, #31
 80065ae:	fa02 f303 	lsl.w	r3, r2, r3
 80065b2:	43da      	mvns	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	400a      	ands	r2, r1
 80065ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	4618      	mov	r0, r3
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	3b41      	subs	r3, #65	; 0x41
 80065d6:	fa00 f203 	lsl.w	r2, r0, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065e2:	4b22      	ldr	r3, [pc, #136]	; (800666c <HAL_ADC_ConfigChannel+0x234>)
 80065e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a21      	ldr	r2, [pc, #132]	; (8006670 <HAL_ADC_ConfigChannel+0x238>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d109      	bne.n	8006604 <HAL_ADC_ConfigChannel+0x1cc>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b12      	cmp	r3, #18
 80065f6:	d105      	bne.n	8006604 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a19      	ldr	r2, [pc, #100]	; (8006670 <HAL_ADC_ConfigChannel+0x238>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d123      	bne.n	8006656 <HAL_ADC_ConfigChannel+0x21e>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b10      	cmp	r3, #16
 8006614:	d003      	beq.n	800661e <HAL_ADC_ConfigChannel+0x1e6>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b11      	cmp	r3, #17
 800661c:	d11b      	bne.n	8006656 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b10      	cmp	r3, #16
 8006630:	d111      	bne.n	8006656 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006632:	4b10      	ldr	r3, [pc, #64]	; (8006674 <HAL_ADC_ConfigChannel+0x23c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a10      	ldr	r2, [pc, #64]	; (8006678 <HAL_ADC_ConfigChannel+0x240>)
 8006638:	fba2 2303 	umull	r2, r3, r2, r3
 800663c:	0c9a      	lsrs	r2, r3, #18
 800663e:	4613      	mov	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006648:	e002      	b.n	8006650 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	3b01      	subs	r3, #1
 800664e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1f9      	bne.n	800664a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	40012300 	.word	0x40012300
 8006670:	40012000 	.word	0x40012000
 8006674:	20000004 	.word	0x20000004
 8006678:	431bde83 	.word	0x431bde83

0800667c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006684:	4b79      	ldr	r3, [pc, #484]	; (800686c <ADC_Init+0x1f0>)
 8006686:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	431a      	orrs	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6859      	ldr	r1, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	021a      	lsls	r2, r3, #8
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80066d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6859      	ldr	r1, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6899      	ldr	r1, [r3, #8]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	4a58      	ldr	r2, [pc, #352]	; (8006870 <ADC_Init+0x1f4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d022      	beq.n	800675a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689a      	ldr	r2, [r3, #8]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006722:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6899      	ldr	r1, [r3, #8]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006744:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	6899      	ldr	r1, [r3, #8]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	609a      	str	r2, [r3, #8]
 8006758:	e00f      	b.n	800677a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006768:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006778:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0202 	bic.w	r2, r2, #2
 8006788:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6899      	ldr	r1, [r3, #8]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	7e1b      	ldrb	r3, [r3, #24]
 8006794:	005a      	lsls	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d01b      	beq.n	80067e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80067c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	3b01      	subs	r3, #1
 80067d4:	035a      	lsls	r2, r3, #13
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	605a      	str	r2, [r3, #4]
 80067de:	e007      	b.n	80067f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80067fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	3b01      	subs	r3, #1
 800680c:	051a      	lsls	r2, r3, #20
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006824:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6899      	ldr	r1, [r3, #8]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006832:	025a      	lsls	r2, r3, #9
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800684a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6899      	ldr	r1, [r3, #8]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	029a      	lsls	r2, r3, #10
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	609a      	str	r2, [r3, #8]
}
 8006860:	bf00      	nop
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	40012300 	.word	0x40012300
 8006870:	0f000001 	.word	0x0f000001

08006874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006884:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006890:	4013      	ands	r3, r2
 8006892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800689c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80068a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068a6:	4a04      	ldr	r2, [pc, #16]	; (80068b8 <__NVIC_SetPriorityGrouping+0x44>)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	60d3      	str	r3, [r2, #12]
}
 80068ac:	bf00      	nop
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	e000ed00 	.word	0xe000ed00

080068bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068c0:	4b04      	ldr	r3, [pc, #16]	; (80068d4 <__NVIC_GetPriorityGrouping+0x18>)
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	0a1b      	lsrs	r3, r3, #8
 80068c6:	f003 0307 	and.w	r3, r3, #7
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	e000ed00 	.word	0xe000ed00

080068d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	4603      	mov	r3, r0
 80068e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	db0b      	blt.n	8006902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	f003 021f 	and.w	r2, r3, #31
 80068f0:	4907      	ldr	r1, [pc, #28]	; (8006910 <__NVIC_EnableIRQ+0x38>)
 80068f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	2001      	movs	r0, #1
 80068fa:	fa00 f202 	lsl.w	r2, r0, r2
 80068fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006902:	bf00      	nop
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	e000e100 	.word	0xe000e100

08006914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	4603      	mov	r3, r0
 800691c:	6039      	str	r1, [r7, #0]
 800691e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006924:	2b00      	cmp	r3, #0
 8006926:	db0a      	blt.n	800693e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	b2da      	uxtb	r2, r3
 800692c:	490c      	ldr	r1, [pc, #48]	; (8006960 <__NVIC_SetPriority+0x4c>)
 800692e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006932:	0112      	lsls	r2, r2, #4
 8006934:	b2d2      	uxtb	r2, r2
 8006936:	440b      	add	r3, r1
 8006938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800693c:	e00a      	b.n	8006954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	b2da      	uxtb	r2, r3
 8006942:	4908      	ldr	r1, [pc, #32]	; (8006964 <__NVIC_SetPriority+0x50>)
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	3b04      	subs	r3, #4
 800694c:	0112      	lsls	r2, r2, #4
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	440b      	add	r3, r1
 8006952:	761a      	strb	r2, [r3, #24]
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	e000e100 	.word	0xe000e100
 8006964:	e000ed00 	.word	0xe000ed00

08006968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006968:	b480      	push	{r7}
 800696a:	b089      	sub	sp, #36	; 0x24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f1c3 0307 	rsb	r3, r3, #7
 8006982:	2b04      	cmp	r3, #4
 8006984:	bf28      	it	cs
 8006986:	2304      	movcs	r3, #4
 8006988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	3304      	adds	r3, #4
 800698e:	2b06      	cmp	r3, #6
 8006990:	d902      	bls.n	8006998 <NVIC_EncodePriority+0x30>
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	3b03      	subs	r3, #3
 8006996:	e000      	b.n	800699a <NVIC_EncodePriority+0x32>
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800699c:	f04f 32ff 	mov.w	r2, #4294967295
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	fa02 f303 	lsl.w	r3, r2, r3
 80069a6:	43da      	mvns	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	401a      	ands	r2, r3
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069b0:	f04f 31ff 	mov.w	r1, #4294967295
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ba:	43d9      	mvns	r1, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069c0:	4313      	orrs	r3, r2
         );
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3724      	adds	r7, #36	; 0x24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3b01      	subs	r3, #1
 80069dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069e0:	d301      	bcc.n	80069e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80069e2:	2301      	movs	r3, #1
 80069e4:	e00f      	b.n	8006a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069e6:	4a0a      	ldr	r2, [pc, #40]	; (8006a10 <SysTick_Config+0x40>)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80069ee:	210f      	movs	r1, #15
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	f7ff ff8e 	bl	8006914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <SysTick_Config+0x40>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069fe:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <SysTick_Config+0x40>)
 8006a00:	2207      	movs	r2, #7
 8006a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	e000e010 	.word	0xe000e010

08006a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7ff ff29 	bl	8006874 <__NVIC_SetPriorityGrouping>
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b086      	sub	sp, #24
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	4603      	mov	r3, r0
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
 8006a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a3c:	f7ff ff3e 	bl	80068bc <__NVIC_GetPriorityGrouping>
 8006a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	68b9      	ldr	r1, [r7, #8]
 8006a46:	6978      	ldr	r0, [r7, #20]
 8006a48:	f7ff ff8e 	bl	8006968 <NVIC_EncodePriority>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a52:	4611      	mov	r1, r2
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7ff ff5d 	bl	8006914 <__NVIC_SetPriority>
}
 8006a5a:	bf00      	nop
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	4603      	mov	r3, r0
 8006a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff ff31 	bl	80068d8 <__NVIC_EnableIRQ>
}
 8006a76:	bf00      	nop
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b082      	sub	sp, #8
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff ffa2 	bl	80069d0 <SysTick_Config>
 8006a8c:	4603      	mov	r3, r0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006aa4:	f7ff faea 	bl	800607c <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e099      	b.n	8006be8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0201 	bic.w	r2, r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ad4:	e00f      	b.n	8006af6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ad6:	f7ff fad1 	bl	800607c <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b05      	cmp	r3, #5
 8006ae2:	d908      	bls.n	8006af6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2203      	movs	r2, #3
 8006aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e078      	b.n	8006be8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e8      	bne.n	8006ad6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4b38      	ldr	r3, [pc, #224]	; (8006bf0 <HAL_DMA_Init+0x158>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d107      	bne.n	8006b60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	f023 0307 	bic.w	r3, r3, #7
 8006b76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d117      	bne.n	8006bba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00e      	beq.n	8006bba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fb01 	bl	80071a4 <DMA_CheckFifoParam>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d008      	beq.n	8006bba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2240      	movs	r2, #64	; 0x40
 8006bac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e016      	b.n	8006be8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fab8 	bl	8007138 <DMA_CalcBaseAndBitshift>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd0:	223f      	movs	r2, #63	; 0x3f
 8006bd2:	409a      	lsls	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	f010803f 	.word	0xf010803f

08006bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_DMA_Start_IT+0x26>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e040      	b.n	8006c9c <HAL_DMA_Start_IT+0xa8>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d12f      	bne.n	8006c8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2202      	movs	r2, #2
 8006c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	68b9      	ldr	r1, [r7, #8]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 fa4a 	bl	80070dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4c:	223f      	movs	r2, #63	; 0x3f
 8006c4e:	409a      	lsls	r2, r3
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f042 0216 	orr.w	r2, r2, #22
 8006c62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0208 	orr.w	r2, r2, #8
 8006c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0201 	orr.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e005      	b.n	8006c9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006c96:	2302      	movs	r3, #2
 8006c98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006cb2:	f7ff f9e3 	bl	800607c <HAL_GetTick>
 8006cb6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d008      	beq.n	8006cd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2280      	movs	r2, #128	; 0x80
 8006cc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e052      	b.n	8006d7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0216 	bic.w	r2, r2, #22
 8006ce4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695a      	ldr	r2, [r3, #20]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cf4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d103      	bne.n	8006d06 <HAL_DMA_Abort+0x62>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d007      	beq.n	8006d16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0208 	bic.w	r2, r2, #8
 8006d14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0201 	bic.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d26:	e013      	b.n	8006d50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d28:	f7ff f9a8 	bl	800607c <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b05      	cmp	r3, #5
 8006d34:	d90c      	bls.n	8006d50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2203      	movs	r2, #3
 8006d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e015      	b.n	8006d7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1e4      	bne.n	8006d28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d62:	223f      	movs	r2, #63	; 0x3f
 8006d64:	409a      	lsls	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d004      	beq.n	8006da2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2280      	movs	r2, #128	; 0x80
 8006d9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e00c      	b.n	8006dbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2205      	movs	r2, #5
 8006da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 0201 	bic.w	r2, r2, #1
 8006db8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006dd4:	4b92      	ldr	r3, [pc, #584]	; (8007020 <HAL_DMA_IRQHandler+0x258>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a92      	ldr	r2, [pc, #584]	; (8007024 <HAL_DMA_IRQHandler+0x25c>)
 8006dda:	fba2 2303 	umull	r2, r3, r2, r3
 8006dde:	0a9b      	lsrs	r3, r3, #10
 8006de0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df2:	2208      	movs	r2, #8
 8006df4:	409a      	lsls	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d01a      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0304 	and.w	r3, r3, #4
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d013      	beq.n	8006e34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0204 	bic.w	r2, r2, #4
 8006e1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e20:	2208      	movs	r2, #8
 8006e22:	409a      	lsls	r2, r3
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2c:	f043 0201 	orr.w	r2, r3, #1
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e38:	2201      	movs	r2, #1
 8006e3a:	409a      	lsls	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d012      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00b      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e56:	2201      	movs	r2, #1
 8006e58:	409a      	lsls	r2, r3
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	f043 0202 	orr.w	r2, r3, #2
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e6e:	2204      	movs	r2, #4
 8006e70:	409a      	lsls	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4013      	ands	r3, r2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d012      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e8c:	2204      	movs	r2, #4
 8006e8e:	409a      	lsls	r2, r3
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e98:	f043 0204 	orr.w	r2, r3, #4
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea4:	2210      	movs	r2, #16
 8006ea6:	409a      	lsls	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d043      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0308 	and.w	r3, r3, #8
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d03c      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec2:	2210      	movs	r2, #16
 8006ec4:	409a      	lsls	r2, r3
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d018      	beq.n	8006f0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d108      	bne.n	8006ef8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d024      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	4798      	blx	r3
 8006ef6:	e01f      	b.n	8006f38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d01b      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	4798      	blx	r3
 8006f08:	e016      	b.n	8006f38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d107      	bne.n	8006f28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0208 	bic.w	r2, r2, #8
 8006f26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	409a      	lsls	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4013      	ands	r3, r2
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 808e 	beq.w	8007066 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0310 	and.w	r3, r3, #16
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8086 	beq.w	8007066 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f5e:	2220      	movs	r2, #32
 8006f60:	409a      	lsls	r2, r3
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b05      	cmp	r3, #5
 8006f70:	d136      	bne.n	8006fe0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0216 	bic.w	r2, r2, #22
 8006f80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	695a      	ldr	r2, [r3, #20]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d103      	bne.n	8006fa2 <HAL_DMA_IRQHandler+0x1da>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d007      	beq.n	8006fb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0208 	bic.w	r2, r2, #8
 8006fb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fb6:	223f      	movs	r2, #63	; 0x3f
 8006fb8:	409a      	lsls	r2, r3
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d07d      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	4798      	blx	r3
        }
        return;
 8006fde:	e078      	b.n	80070d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d01c      	beq.n	8007028 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d108      	bne.n	800700e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007000:	2b00      	cmp	r3, #0
 8007002:	d030      	beq.n	8007066 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	4798      	blx	r3
 800700c:	e02b      	b.n	8007066 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d027      	beq.n	8007066 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	4798      	blx	r3
 800701e:	e022      	b.n	8007066 <HAL_DMA_IRQHandler+0x29e>
 8007020:	20000004 	.word	0x20000004
 8007024:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10f      	bne.n	8007056 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0210 	bic.w	r2, r2, #16
 8007044:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706a:	2b00      	cmp	r3, #0
 800706c:	d032      	beq.n	80070d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d022      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2205      	movs	r2, #5
 800707e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0201 	bic.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	3301      	adds	r3, #1
 8007096:	60bb      	str	r3, [r7, #8]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	429a      	cmp	r2, r3
 800709c:	d307      	bcc.n	80070ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1f2      	bne.n	8007092 <HAL_DMA_IRQHandler+0x2ca>
 80070ac:	e000      	b.n	80070b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80070ae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4798      	blx	r3
 80070d0:	e000      	b.n	80070d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80070d2:	bf00      	nop
    }
  }
}
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop

080070dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b40      	cmp	r3, #64	; 0x40
 8007108:	d108      	bne.n	800711c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800711a:	e007      	b.n	800712c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	60da      	str	r2, [r3, #12]
}
 800712c:	bf00      	nop
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	3b10      	subs	r3, #16
 8007148:	4a14      	ldr	r2, [pc, #80]	; (800719c <DMA_CalcBaseAndBitshift+0x64>)
 800714a:	fba2 2303 	umull	r2, r3, r2, r3
 800714e:	091b      	lsrs	r3, r3, #4
 8007150:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007152:	4a13      	ldr	r2, [pc, #76]	; (80071a0 <DMA_CalcBaseAndBitshift+0x68>)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4413      	add	r3, r2
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b03      	cmp	r3, #3
 8007164:	d909      	bls.n	800717a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800716e:	f023 0303 	bic.w	r3, r3, #3
 8007172:	1d1a      	adds	r2, r3, #4
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	659a      	str	r2, [r3, #88]	; 0x58
 8007178:	e007      	b.n	800718a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007182:	f023 0303 	bic.w	r3, r3, #3
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	aaaaaaab 	.word	0xaaaaaaab
 80071a0:	0801a014 	.word	0x0801a014

080071a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d11f      	bne.n	80071fe <DMA_CheckFifoParam+0x5a>
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d856      	bhi.n	8007272 <DMA_CheckFifoParam+0xce>
 80071c4:	a201      	add	r2, pc, #4	; (adr r2, 80071cc <DMA_CheckFifoParam+0x28>)
 80071c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ca:	bf00      	nop
 80071cc:	080071dd 	.word	0x080071dd
 80071d0:	080071ef 	.word	0x080071ef
 80071d4:	080071dd 	.word	0x080071dd
 80071d8:	08007273 	.word	0x08007273
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d046      	beq.n	8007276 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071ec:	e043      	b.n	8007276 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071f6:	d140      	bne.n	800727a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071fc:	e03d      	b.n	800727a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007206:	d121      	bne.n	800724c <DMA_CheckFifoParam+0xa8>
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b03      	cmp	r3, #3
 800720c:	d837      	bhi.n	800727e <DMA_CheckFifoParam+0xda>
 800720e:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <DMA_CheckFifoParam+0x70>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	08007225 	.word	0x08007225
 8007218:	0800722b 	.word	0x0800722b
 800721c:	08007225 	.word	0x08007225
 8007220:	0800723d 	.word	0x0800723d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
      break;
 8007228:	e030      	b.n	800728c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d025      	beq.n	8007282 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800723a:	e022      	b.n	8007282 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007244:	d11f      	bne.n	8007286 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800724a:	e01c      	b.n	8007286 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d903      	bls.n	800725a <DMA_CheckFifoParam+0xb6>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b03      	cmp	r3, #3
 8007256:	d003      	beq.n	8007260 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007258:	e018      	b.n	800728c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	73fb      	strb	r3, [r7, #15]
      break;
 800725e:	e015      	b.n	800728c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00e      	beq.n	800728a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	73fb      	strb	r3, [r7, #15]
      break;
 8007270:	e00b      	b.n	800728a <DMA_CheckFifoParam+0xe6>
      break;
 8007272:	bf00      	nop
 8007274:	e00a      	b.n	800728c <DMA_CheckFifoParam+0xe8>
      break;
 8007276:	bf00      	nop
 8007278:	e008      	b.n	800728c <DMA_CheckFifoParam+0xe8>
      break;
 800727a:	bf00      	nop
 800727c:	e006      	b.n	800728c <DMA_CheckFifoParam+0xe8>
      break;
 800727e:	bf00      	nop
 8007280:	e004      	b.n	800728c <DMA_CheckFifoParam+0xe8>
      break;
 8007282:	bf00      	nop
 8007284:	e002      	b.n	800728c <DMA_CheckFifoParam+0xe8>
      break;   
 8007286:	bf00      	nop
 8007288:	e000      	b.n	800728c <DMA_CheckFifoParam+0xe8>
      break;
 800728a:	bf00      	nop
    }
  } 
  
  return status; 
 800728c:	7bfb      	ldrb	r3, [r7, #15]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop

0800729c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800729c:	b480      	push	{r7}
 800729e:	b089      	sub	sp, #36	; 0x24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072b2:	2300      	movs	r3, #0
 80072b4:	61fb      	str	r3, [r7, #28]
 80072b6:	e16b      	b.n	8007590 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80072b8:	2201      	movs	r2, #1
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	fa02 f303 	lsl.w	r3, r2, r3
 80072c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4013      	ands	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	f040 815a 	bne.w	800758a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d005      	beq.n	80072ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d130      	bne.n	8007350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	2203      	movs	r2, #3
 80072fa:	fa02 f303 	lsl.w	r3, r2, r3
 80072fe:	43db      	mvns	r3, r3
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	4013      	ands	r3, r2
 8007304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	fa02 f303 	lsl.w	r3, r2, r3
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	4313      	orrs	r3, r2
 8007316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007324:	2201      	movs	r2, #1
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	fa02 f303 	lsl.w	r3, r2, r3
 800732c:	43db      	mvns	r3, r3
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	4013      	ands	r3, r2
 8007332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	091b      	lsrs	r3, r3, #4
 800733a:	f003 0201 	and.w	r2, r3, #1
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	fa02 f303 	lsl.w	r3, r2, r3
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	4313      	orrs	r3, r2
 8007348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f003 0303 	and.w	r3, r3, #3
 8007358:	2b03      	cmp	r3, #3
 800735a:	d017      	beq.n	800738c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	2203      	movs	r2, #3
 8007368:	fa02 f303 	lsl.w	r3, r2, r3
 800736c:	43db      	mvns	r3, r3
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	4013      	ands	r3, r2
 8007372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	fa02 f303 	lsl.w	r3, r2, r3
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	4313      	orrs	r3, r2
 8007384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d123      	bne.n	80073e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	08da      	lsrs	r2, r3, #3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	3208      	adds	r2, #8
 80073a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	f003 0307 	and.w	r3, r3, #7
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	220f      	movs	r2, #15
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	43db      	mvns	r3, r3
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	4013      	ands	r3, r2
 80073ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	691a      	ldr	r2, [r3, #16]
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	fa02 f303 	lsl.w	r3, r2, r3
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	08da      	lsrs	r2, r3, #3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	3208      	adds	r2, #8
 80073da:	69b9      	ldr	r1, [r7, #24]
 80073dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	2203      	movs	r2, #3
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	43db      	mvns	r3, r3
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	4013      	ands	r3, r2
 80073f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f003 0203 	and.w	r2, r3, #3
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	fa02 f303 	lsl.w	r3, r2, r3
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	4313      	orrs	r3, r2
 800740c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69ba      	ldr	r2, [r7, #24]
 8007412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 80b4 	beq.w	800758a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	4b60      	ldr	r3, [pc, #384]	; (80075a8 <HAL_GPIO_Init+0x30c>)
 8007428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742a:	4a5f      	ldr	r2, [pc, #380]	; (80075a8 <HAL_GPIO_Init+0x30c>)
 800742c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007430:	6453      	str	r3, [r2, #68]	; 0x44
 8007432:	4b5d      	ldr	r3, [pc, #372]	; (80075a8 <HAL_GPIO_Init+0x30c>)
 8007434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800743e:	4a5b      	ldr	r2, [pc, #364]	; (80075ac <HAL_GPIO_Init+0x310>)
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	089b      	lsrs	r3, r3, #2
 8007444:	3302      	adds	r3, #2
 8007446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800744a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	f003 0303 	and.w	r3, r3, #3
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	220f      	movs	r2, #15
 8007456:	fa02 f303 	lsl.w	r3, r2, r3
 800745a:	43db      	mvns	r3, r3
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	4013      	ands	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a52      	ldr	r2, [pc, #328]	; (80075b0 <HAL_GPIO_Init+0x314>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d02b      	beq.n	80074c2 <HAL_GPIO_Init+0x226>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a51      	ldr	r2, [pc, #324]	; (80075b4 <HAL_GPIO_Init+0x318>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d025      	beq.n	80074be <HAL_GPIO_Init+0x222>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a50      	ldr	r2, [pc, #320]	; (80075b8 <HAL_GPIO_Init+0x31c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d01f      	beq.n	80074ba <HAL_GPIO_Init+0x21e>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a4f      	ldr	r2, [pc, #316]	; (80075bc <HAL_GPIO_Init+0x320>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d019      	beq.n	80074b6 <HAL_GPIO_Init+0x21a>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a4e      	ldr	r2, [pc, #312]	; (80075c0 <HAL_GPIO_Init+0x324>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d013      	beq.n	80074b2 <HAL_GPIO_Init+0x216>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a4d      	ldr	r2, [pc, #308]	; (80075c4 <HAL_GPIO_Init+0x328>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d00d      	beq.n	80074ae <HAL_GPIO_Init+0x212>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a4c      	ldr	r2, [pc, #304]	; (80075c8 <HAL_GPIO_Init+0x32c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d007      	beq.n	80074aa <HAL_GPIO_Init+0x20e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a4b      	ldr	r2, [pc, #300]	; (80075cc <HAL_GPIO_Init+0x330>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d101      	bne.n	80074a6 <HAL_GPIO_Init+0x20a>
 80074a2:	2307      	movs	r3, #7
 80074a4:	e00e      	b.n	80074c4 <HAL_GPIO_Init+0x228>
 80074a6:	2308      	movs	r3, #8
 80074a8:	e00c      	b.n	80074c4 <HAL_GPIO_Init+0x228>
 80074aa:	2306      	movs	r3, #6
 80074ac:	e00a      	b.n	80074c4 <HAL_GPIO_Init+0x228>
 80074ae:	2305      	movs	r3, #5
 80074b0:	e008      	b.n	80074c4 <HAL_GPIO_Init+0x228>
 80074b2:	2304      	movs	r3, #4
 80074b4:	e006      	b.n	80074c4 <HAL_GPIO_Init+0x228>
 80074b6:	2303      	movs	r3, #3
 80074b8:	e004      	b.n	80074c4 <HAL_GPIO_Init+0x228>
 80074ba:	2302      	movs	r3, #2
 80074bc:	e002      	b.n	80074c4 <HAL_GPIO_Init+0x228>
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <HAL_GPIO_Init+0x228>
 80074c2:	2300      	movs	r3, #0
 80074c4:	69fa      	ldr	r2, [r7, #28]
 80074c6:	f002 0203 	and.w	r2, r2, #3
 80074ca:	0092      	lsls	r2, r2, #2
 80074cc:	4093      	lsls	r3, r2
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074d4:	4935      	ldr	r1, [pc, #212]	; (80075ac <HAL_GPIO_Init+0x310>)
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	089b      	lsrs	r3, r3, #2
 80074da:	3302      	adds	r3, #2
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074e2:	4b3b      	ldr	r3, [pc, #236]	; (80075d0 <HAL_GPIO_Init+0x334>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	43db      	mvns	r3, r3
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	4013      	ands	r3, r2
 80074f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	4313      	orrs	r3, r2
 8007504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007506:	4a32      	ldr	r2, [pc, #200]	; (80075d0 <HAL_GPIO_Init+0x334>)
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800750c:	4b30      	ldr	r3, [pc, #192]	; (80075d0 <HAL_GPIO_Init+0x334>)
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	43db      	mvns	r3, r3
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	4013      	ands	r3, r2
 800751a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d003      	beq.n	8007530 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007530:	4a27      	ldr	r2, [pc, #156]	; (80075d0 <HAL_GPIO_Init+0x334>)
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007536:	4b26      	ldr	r3, [pc, #152]	; (80075d0 <HAL_GPIO_Init+0x334>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	43db      	mvns	r3, r3
 8007540:	69ba      	ldr	r2, [r7, #24]
 8007542:	4013      	ands	r3, r2
 8007544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	4313      	orrs	r3, r2
 8007558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800755a:	4a1d      	ldr	r2, [pc, #116]	; (80075d0 <HAL_GPIO_Init+0x334>)
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007560:	4b1b      	ldr	r3, [pc, #108]	; (80075d0 <HAL_GPIO_Init+0x334>)
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	43db      	mvns	r3, r3
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	4013      	ands	r3, r2
 800756e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007584:	4a12      	ldr	r2, [pc, #72]	; (80075d0 <HAL_GPIO_Init+0x334>)
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	3301      	adds	r3, #1
 800758e:	61fb      	str	r3, [r7, #28]
 8007590:	69fb      	ldr	r3, [r7, #28]
 8007592:	2b0f      	cmp	r3, #15
 8007594:	f67f ae90 	bls.w	80072b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007598:	bf00      	nop
 800759a:	bf00      	nop
 800759c:	3724      	adds	r7, #36	; 0x24
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40023800 	.word	0x40023800
 80075ac:	40013800 	.word	0x40013800
 80075b0:	40020000 	.word	0x40020000
 80075b4:	40020400 	.word	0x40020400
 80075b8:	40020800 	.word	0x40020800
 80075bc:	40020c00 	.word	0x40020c00
 80075c0:	40021000 	.word	0x40021000
 80075c4:	40021400 	.word	0x40021400
 80075c8:	40021800 	.word	0x40021800
 80075cc:	40021c00 	.word	0x40021c00
 80075d0:	40013c00 	.word	0x40013c00

080075d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	807b      	strh	r3, [r7, #2]
 80075e0:	4613      	mov	r3, r2
 80075e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075e4:	787b      	ldrb	r3, [r7, #1]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075ea:	887a      	ldrh	r2, [r7, #2]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80075f0:	e003      	b.n	80075fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80075f2:	887b      	ldrh	r3, [r7, #2]
 80075f4:	041a      	lsls	r2, r3, #16
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	619a      	str	r2, [r3, #24]
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
	...

08007608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e12b      	b.n	8007872 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fa fa90 	bl	8001b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2224      	movs	r2, #36	; 0x24
 8007638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0201 	bic.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800765a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800766a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800766c:	f002 fd2e 	bl	800a0cc <HAL_RCC_GetPCLK1Freq>
 8007670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	4a81      	ldr	r2, [pc, #516]	; (800787c <HAL_I2C_Init+0x274>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d807      	bhi.n	800768c <HAL_I2C_Init+0x84>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4a80      	ldr	r2, [pc, #512]	; (8007880 <HAL_I2C_Init+0x278>)
 8007680:	4293      	cmp	r3, r2
 8007682:	bf94      	ite	ls
 8007684:	2301      	movls	r3, #1
 8007686:	2300      	movhi	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	e006      	b.n	800769a <HAL_I2C_Init+0x92>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4a7d      	ldr	r2, [pc, #500]	; (8007884 <HAL_I2C_Init+0x27c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	bf94      	ite	ls
 8007694:	2301      	movls	r3, #1
 8007696:	2300      	movhi	r3, #0
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e0e7      	b.n	8007872 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4a78      	ldr	r2, [pc, #480]	; (8007888 <HAL_I2C_Init+0x280>)
 80076a6:	fba2 2303 	umull	r2, r3, r2, r3
 80076aa:	0c9b      	lsrs	r3, r3, #18
 80076ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	430a      	orrs	r2, r1
 80076c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	4a6a      	ldr	r2, [pc, #424]	; (800787c <HAL_I2C_Init+0x274>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d802      	bhi.n	80076dc <HAL_I2C_Init+0xd4>
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	3301      	adds	r3, #1
 80076da:	e009      	b.n	80076f0 <HAL_I2C_Init+0xe8>
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80076e2:	fb02 f303 	mul.w	r3, r2, r3
 80076e6:	4a69      	ldr	r2, [pc, #420]	; (800788c <HAL_I2C_Init+0x284>)
 80076e8:	fba2 2303 	umull	r2, r3, r2, r3
 80076ec:	099b      	lsrs	r3, r3, #6
 80076ee:	3301      	adds	r3, #1
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	6812      	ldr	r2, [r2, #0]
 80076f4:	430b      	orrs	r3, r1
 80076f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	495c      	ldr	r1, [pc, #368]	; (800787c <HAL_I2C_Init+0x274>)
 800770c:	428b      	cmp	r3, r1
 800770e:	d819      	bhi.n	8007744 <HAL_I2C_Init+0x13c>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	1e59      	subs	r1, r3, #1
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	fbb1 f3f3 	udiv	r3, r1, r3
 800771e:	1c59      	adds	r1, r3, #1
 8007720:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007724:	400b      	ands	r3, r1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <HAL_I2C_Init+0x138>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1e59      	subs	r1, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	fbb1 f3f3 	udiv	r3, r1, r3
 8007738:	3301      	adds	r3, #1
 800773a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800773e:	e051      	b.n	80077e4 <HAL_I2C_Init+0x1dc>
 8007740:	2304      	movs	r3, #4
 8007742:	e04f      	b.n	80077e4 <HAL_I2C_Init+0x1dc>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d111      	bne.n	8007770 <HAL_I2C_Init+0x168>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	1e58      	subs	r0, r3, #1
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6859      	ldr	r1, [r3, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	440b      	add	r3, r1
 800775a:	fbb0 f3f3 	udiv	r3, r0, r3
 800775e:	3301      	adds	r3, #1
 8007760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007764:	2b00      	cmp	r3, #0
 8007766:	bf0c      	ite	eq
 8007768:	2301      	moveq	r3, #1
 800776a:	2300      	movne	r3, #0
 800776c:	b2db      	uxtb	r3, r3
 800776e:	e012      	b.n	8007796 <HAL_I2C_Init+0x18e>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	1e58      	subs	r0, r3, #1
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6859      	ldr	r1, [r3, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	440b      	add	r3, r1
 800777e:	0099      	lsls	r1, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	fbb0 f3f3 	udiv	r3, r0, r3
 8007786:	3301      	adds	r3, #1
 8007788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800778c:	2b00      	cmp	r3, #0
 800778e:	bf0c      	ite	eq
 8007790:	2301      	moveq	r3, #1
 8007792:	2300      	movne	r3, #0
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <HAL_I2C_Init+0x196>
 800779a:	2301      	movs	r3, #1
 800779c:	e022      	b.n	80077e4 <HAL_I2C_Init+0x1dc>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10e      	bne.n	80077c4 <HAL_I2C_Init+0x1bc>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	1e58      	subs	r0, r3, #1
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6859      	ldr	r1, [r3, #4]
 80077ae:	460b      	mov	r3, r1
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	440b      	add	r3, r1
 80077b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80077b8:	3301      	adds	r3, #1
 80077ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077c2:	e00f      	b.n	80077e4 <HAL_I2C_Init+0x1dc>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	1e58      	subs	r0, r3, #1
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6859      	ldr	r1, [r3, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	440b      	add	r3, r1
 80077d2:	0099      	lsls	r1, r3, #2
 80077d4:	440b      	add	r3, r1
 80077d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80077da:	3301      	adds	r3, #1
 80077dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	6809      	ldr	r1, [r1, #0]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	69da      	ldr	r2, [r3, #28]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6911      	ldr	r1, [r2, #16]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	68d2      	ldr	r2, [r2, #12]
 800781e:	4311      	orrs	r1, r2
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	430b      	orrs	r3, r1
 8007826:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695a      	ldr	r2, [r3, #20]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0201 	orr.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2220      	movs	r2, #32
 800785e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	000186a0 	.word	0x000186a0
 8007880:	001e847f 	.word	0x001e847f
 8007884:	003d08ff 	.word	0x003d08ff
 8007888:	431bde83 	.word	0x431bde83
 800788c:	10624dd3 	.word	0x10624dd3

08007890 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af02      	add	r7, sp, #8
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	607a      	str	r2, [r7, #4]
 800789a:	461a      	mov	r2, r3
 800789c:	460b      	mov	r3, r1
 800789e:	817b      	strh	r3, [r7, #10]
 80078a0:	4613      	mov	r3, r2
 80078a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078a4:	f7fe fbea 	bl	800607c <HAL_GetTick>
 80078a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	f040 80e0 	bne.w	8007a78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	2319      	movs	r3, #25
 80078be:	2201      	movs	r2, #1
 80078c0:	4970      	ldr	r1, [pc, #448]	; (8007a84 <HAL_I2C_Master_Transmit+0x1f4>)
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 fc58 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80078ce:	2302      	movs	r3, #2
 80078d0:	e0d3      	b.n	8007a7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d101      	bne.n	80078e0 <HAL_I2C_Master_Transmit+0x50>
 80078dc:	2302      	movs	r3, #2
 80078de:	e0cc      	b.n	8007a7a <HAL_I2C_Master_Transmit+0x1ea>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d007      	beq.n	8007906 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0201 	orr.w	r2, r2, #1
 8007904:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007914:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2221      	movs	r2, #33	; 0x21
 800791a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2210      	movs	r2, #16
 8007922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	893a      	ldrh	r2, [r7, #8]
 8007936:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793c:	b29a      	uxth	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	4a50      	ldr	r2, [pc, #320]	; (8007a88 <HAL_I2C_Master_Transmit+0x1f8>)
 8007946:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007948:	8979      	ldrh	r1, [r7, #10]
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	6a3a      	ldr	r2, [r7, #32]
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 fac2 	bl	8007ed8 <I2C_MasterRequestWrite>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e08d      	b.n	8007a7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800795e:	2300      	movs	r3, #0
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	613b      	str	r3, [r7, #16]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007974:	e066      	b.n	8007a44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	6a39      	ldr	r1, [r7, #32]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 fcd2 	bl	8008324 <I2C_WaitOnTXEFlagUntilTimeout>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00d      	beq.n	80079a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	2b04      	cmp	r3, #4
 800798c:	d107      	bne.n	800799e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800799c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e06b      	b.n	8007a7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	781a      	ldrb	r2, [r3, #0]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079bc:	b29b      	uxth	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ca:	3b01      	subs	r3, #1
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	f003 0304 	and.w	r3, r3, #4
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d11b      	bne.n	8007a18 <HAL_I2C_Master_Transmit+0x188>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d017      	beq.n	8007a18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	781a      	ldrb	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	3b01      	subs	r3, #1
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	6a39      	ldr	r1, [r7, #32]
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 fcc2 	bl	80083a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00d      	beq.n	8007a44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d107      	bne.n	8007a40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e01a      	b.n	8007a7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d194      	bne.n	8007976 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	e000      	b.n	8007a7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007a78:	2302      	movs	r3, #2
  }
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	00100002 	.word	0x00100002
 8007a88:	ffff0000 	.word	0xffff0000

08007a8c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08c      	sub	sp, #48	; 0x30
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	607a      	str	r2, [r7, #4]
 8007a96:	461a      	mov	r2, r3
 8007a98:	460b      	mov	r3, r1
 8007a9a:	817b      	strh	r3, [r7, #10]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007aa0:	f7fe faec 	bl	800607c <HAL_GetTick>
 8007aa4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b20      	cmp	r3, #32
 8007ab0:	f040 820b 	bne.w	8007eca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	2319      	movs	r3, #25
 8007aba:	2201      	movs	r2, #1
 8007abc:	497c      	ldr	r1, [pc, #496]	; (8007cb0 <HAL_I2C_Master_Receive+0x224>)
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 fb5a 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007aca:	2302      	movs	r3, #2
 8007acc:	e1fe      	b.n	8007ecc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_I2C_Master_Receive+0x50>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e1f7      	b.n	8007ecc <HAL_I2C_Master_Receive+0x440>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d007      	beq.n	8007b02 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0201 	orr.w	r2, r2, #1
 8007b00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2222      	movs	r2, #34	; 0x22
 8007b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2210      	movs	r2, #16
 8007b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	893a      	ldrh	r2, [r7, #8]
 8007b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4a5c      	ldr	r2, [pc, #368]	; (8007cb4 <HAL_I2C_Master_Receive+0x228>)
 8007b42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007b44:	8979      	ldrh	r1, [r7, #10]
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 fa46 	bl	8007fdc <I2C_MasterRequestRead>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e1b8      	b.n	8007ecc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d113      	bne.n	8007b8a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b62:	2300      	movs	r3, #0
 8007b64:	623b      	str	r3, [r7, #32]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	623b      	str	r3, [r7, #32]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	623b      	str	r3, [r7, #32]
 8007b76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	e18c      	b.n	8007ea4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d11b      	bne.n	8007bca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ba0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	61fb      	str	r3, [r7, #28]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	61fb      	str	r3, [r7, #28]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	61fb      	str	r3, [r7, #28]
 8007bb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	e16c      	b.n	8007ea4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d11b      	bne.n	8007c0a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007be0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	61bb      	str	r3, [r7, #24]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	61bb      	str	r3, [r7, #24]
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	e14c      	b.n	8007ea4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	617b      	str	r3, [r7, #20]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	617b      	str	r3, [r7, #20]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c30:	e138      	b.n	8007ea4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	f200 80f1 	bhi.w	8007e1e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d123      	bne.n	8007c8c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 fbed 	bl	8008428 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e139      	b.n	8007ecc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	691a      	ldr	r2, [r3, #16]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	b2d2      	uxtb	r2, r2
 8007c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c74:	3b01      	subs	r3, #1
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c8a:	e10b      	b.n	8007ea4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d14e      	bne.n	8007d32 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4906      	ldr	r1, [pc, #24]	; (8007cb8 <HAL_I2C_Master_Receive+0x22c>)
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fa6a 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d008      	beq.n	8007cbc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e10e      	b.n	8007ecc <HAL_I2C_Master_Receive+0x440>
 8007cae:	bf00      	nop
 8007cb0:	00100002 	.word	0x00100002
 8007cb4:	ffff0000 	.word	0xffff0000
 8007cb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	691a      	ldr	r2, [r3, #16]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	691a      	ldr	r2, [r3, #16]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	b2d2      	uxtb	r2, r2
 8007d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d30:	e0b8      	b.n	8007ea4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4966      	ldr	r1, [pc, #408]	; (8007ed4 <HAL_I2C_Master_Receive+0x448>)
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 fa1b 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e0bf      	b.n	8007ecc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691a      	ldr	r2, [r3, #16]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	b2d2      	uxtb	r2, r2
 8007d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	1c5a      	adds	r2, r3, #1
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	3b01      	subs	r3, #1
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	2200      	movs	r2, #0
 8007d96:	494f      	ldr	r1, [pc, #316]	; (8007ed4 <HAL_I2C_Master_Receive+0x448>)
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f9ed 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e091      	b.n	8007ecc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007db6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	691a      	ldr	r2, [r3, #16]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	b2d2      	uxtb	r2, r2
 8007dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	3b01      	subs	r3, #1
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	691a      	ldr	r2, [r3, #16]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	b2d2      	uxtb	r2, r2
 8007df6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e06:	3b01      	subs	r3, #1
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	3b01      	subs	r3, #1
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e1c:	e042      	b.n	8007ea4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 fb00 	bl	8008428 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e04c      	b.n	8007ecc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	691a      	ldr	r2, [r3, #16]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	f003 0304 	and.w	r3, r3, #4
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d118      	bne.n	8007ea4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691a      	ldr	r2, [r3, #16]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	b2d2      	uxtb	r2, r2
 8007e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f47f aec2 	bne.w	8007c32 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	e000      	b.n	8007ecc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007eca:	2302      	movs	r3, #2
  }
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3728      	adds	r7, #40	; 0x28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	00010004 	.word	0x00010004

08007ed8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	607a      	str	r2, [r7, #4]
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d006      	beq.n	8007f02 <I2C_MasterRequestWrite+0x2a>
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d003      	beq.n	8007f02 <I2C_MasterRequestWrite+0x2a>
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f00:	d108      	bne.n	8007f14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	e00b      	b.n	8007f2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f18:	2b12      	cmp	r3, #18
 8007f1a:	d107      	bne.n	8007f2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 f91d 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00d      	beq.n	8007f60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f52:	d103      	bne.n	8007f5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e035      	b.n	8007fcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f68:	d108      	bne.n	8007f7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f6a:	897b      	ldrh	r3, [r7, #10]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	461a      	mov	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f78:	611a      	str	r2, [r3, #16]
 8007f7a:	e01b      	b.n	8007fb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007f7c:	897b      	ldrh	r3, [r7, #10]
 8007f7e:	11db      	asrs	r3, r3, #7
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	f003 0306 	and.w	r3, r3, #6
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	f063 030f 	orn	r3, r3, #15
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	490e      	ldr	r1, [pc, #56]	; (8007fd4 <I2C_MasterRequestWrite+0xfc>)
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 f943 	bl	8008226 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e010      	b.n	8007fcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007faa:	897b      	ldrh	r3, [r7, #10]
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	4907      	ldr	r1, [pc, #28]	; (8007fd8 <I2C_MasterRequestWrite+0x100>)
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 f933 	bl	8008226 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e000      	b.n	8007fcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	00010008 	.word	0x00010008
 8007fd8:	00010002 	.word	0x00010002

08007fdc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af02      	add	r7, sp, #8
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	607a      	str	r2, [r7, #4]
 8007fe6:	603b      	str	r3, [r7, #0]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008000:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b08      	cmp	r3, #8
 8008006:	d006      	beq.n	8008016 <I2C_MasterRequestRead+0x3a>
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d003      	beq.n	8008016 <I2C_MasterRequestRead+0x3a>
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008014:	d108      	bne.n	8008028 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008024:	601a      	str	r2, [r3, #0]
 8008026:	e00b      	b.n	8008040 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802c:	2b11      	cmp	r3, #17
 800802e:	d107      	bne.n	8008040 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800803e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 f893 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00d      	beq.n	8008074 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008066:	d103      	bne.n	8008070 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800806e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e079      	b.n	8008168 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800807c:	d108      	bne.n	8008090 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800807e:	897b      	ldrh	r3, [r7, #10]
 8008080:	b2db      	uxtb	r3, r3
 8008082:	f043 0301 	orr.w	r3, r3, #1
 8008086:	b2da      	uxtb	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	611a      	str	r2, [r3, #16]
 800808e:	e05f      	b.n	8008150 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008090:	897b      	ldrh	r3, [r7, #10]
 8008092:	11db      	asrs	r3, r3, #7
 8008094:	b2db      	uxtb	r3, r3
 8008096:	f003 0306 	and.w	r3, r3, #6
 800809a:	b2db      	uxtb	r3, r3
 800809c:	f063 030f 	orn	r3, r3, #15
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	4930      	ldr	r1, [pc, #192]	; (8008170 <I2C_MasterRequestRead+0x194>)
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 f8b9 	bl	8008226 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e054      	b.n	8008168 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80080be:	897b      	ldrh	r3, [r7, #10]
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	4929      	ldr	r1, [pc, #164]	; (8008174 <I2C_MasterRequestRead+0x198>)
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 f8a9 	bl	8008226 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e044      	b.n	8008168 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080de:	2300      	movs	r3, #0
 80080e0:	613b      	str	r3, [r7, #16]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	613b      	str	r3, [r7, #16]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	613b      	str	r3, [r7, #16]
 80080f2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008102:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 f831 	bl	8008178 <I2C_WaitOnFlagUntilTimeout>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00d      	beq.n	8008138 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812a:	d103      	bne.n	8008134 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008132:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008134:	2303      	movs	r3, #3
 8008136:	e017      	b.n	8008168 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008138:	897b      	ldrh	r3, [r7, #10]
 800813a:	11db      	asrs	r3, r3, #7
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f003 0306 	and.w	r3, r3, #6
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f063 030e 	orn	r3, r3, #14
 8008148:	b2da      	uxtb	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	4907      	ldr	r1, [pc, #28]	; (8008174 <I2C_MasterRequestRead+0x198>)
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 f865 	bl	8008226 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e000      	b.n	8008168 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	00010008 	.word	0x00010008
 8008174:	00010002 	.word	0x00010002

08008178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	4613      	mov	r3, r2
 8008186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008188:	e025      	b.n	80081d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008190:	d021      	beq.n	80081d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008192:	f7fd ff73 	bl	800607c <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d302      	bcc.n	80081a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d116      	bne.n	80081d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2220      	movs	r2, #32
 80081b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	f043 0220 	orr.w	r2, r3, #32
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e023      	b.n	800821e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	0c1b      	lsrs	r3, r3, #16
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d10d      	bne.n	80081fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	43da      	mvns	r2, r3
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	4013      	ands	r3, r2
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	bf0c      	ite	eq
 80081f2:	2301      	moveq	r3, #1
 80081f4:	2300      	movne	r3, #0
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	e00c      	b.n	8008216 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	43da      	mvns	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4013      	ands	r3, r2
 8008208:	b29b      	uxth	r3, r3
 800820a:	2b00      	cmp	r3, #0
 800820c:	bf0c      	ite	eq
 800820e:	2301      	moveq	r3, #1
 8008210:	2300      	movne	r3, #0
 8008212:	b2db      	uxtb	r3, r3
 8008214:	461a      	mov	r2, r3
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	429a      	cmp	r2, r3
 800821a:	d0b6      	beq.n	800818a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
 8008232:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008234:	e051      	b.n	80082da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008244:	d123      	bne.n	800828e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008254:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800825e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2220      	movs	r2, #32
 800826a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	f043 0204 	orr.w	r2, r3, #4
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e046      	b.n	800831c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008294:	d021      	beq.n	80082da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008296:	f7fd fef1 	bl	800607c <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d302      	bcc.n	80082ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d116      	bne.n	80082da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	f043 0220 	orr.w	r2, r3, #32
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e020      	b.n	800831c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	0c1b      	lsrs	r3, r3, #16
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d10c      	bne.n	80082fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	43da      	mvns	r2, r3
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	4013      	ands	r3, r2
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	bf14      	ite	ne
 80082f6:	2301      	movne	r3, #1
 80082f8:	2300      	moveq	r3, #0
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	e00b      	b.n	8008316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	43da      	mvns	r2, r3
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	4013      	ands	r3, r2
 800830a:	b29b      	uxth	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	bf14      	ite	ne
 8008310:	2301      	movne	r3, #1
 8008312:	2300      	moveq	r3, #0
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b00      	cmp	r3, #0
 8008318:	d18d      	bne.n	8008236 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008330:	e02d      	b.n	800838e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f000 f8ce 	bl	80084d4 <I2C_IsAcknowledgeFailed>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e02d      	b.n	800839e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008348:	d021      	beq.n	800838e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800834a:	f7fd fe97 	bl	800607c <HAL_GetTick>
 800834e:	4602      	mov	r2, r0
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	429a      	cmp	r2, r3
 8008358:	d302      	bcc.n	8008360 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d116      	bne.n	800838e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2220      	movs	r2, #32
 800836a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	f043 0220 	orr.w	r2, r3, #32
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e007      	b.n	800839e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008398:	2b80      	cmp	r3, #128	; 0x80
 800839a:	d1ca      	bne.n	8008332 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	60f8      	str	r0, [r7, #12]
 80083ae:	60b9      	str	r1, [r7, #8]
 80083b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80083b2:	e02d      	b.n	8008410 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 f88d 	bl	80084d4 <I2C_IsAcknowledgeFailed>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e02d      	b.n	8008420 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ca:	d021      	beq.n	8008410 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083cc:	f7fd fe56 	bl	800607c <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d302      	bcc.n	80083e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d116      	bne.n	8008410 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	f043 0220 	orr.w	r2, r3, #32
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e007      	b.n	8008420 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	f003 0304 	and.w	r3, r3, #4
 800841a:	2b04      	cmp	r3, #4
 800841c:	d1ca      	bne.n	80083b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008434:	e042      	b.n	80084bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	f003 0310 	and.w	r3, r3, #16
 8008440:	2b10      	cmp	r3, #16
 8008442:	d119      	bne.n	8008478 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f06f 0210 	mvn.w	r2, #16
 800844c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2220      	movs	r2, #32
 8008458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e029      	b.n	80084cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008478:	f7fd fe00 	bl	800607c <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	429a      	cmp	r2, r3
 8008486:	d302      	bcc.n	800848e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d116      	bne.n	80084bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2220      	movs	r2, #32
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a8:	f043 0220 	orr.w	r2, r3, #32
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e007      	b.n	80084cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c6:	2b40      	cmp	r3, #64	; 0x40
 80084c8:	d1b5      	bne.n	8008436 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ea:	d11b      	bne.n	8008524 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2220      	movs	r2, #32
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	f043 0204 	orr.w	r2, r3, #4
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e000      	b.n	8008526 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008532:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008534:	b08f      	sub	sp, #60	; 0x3c
 8008536:	af0a      	add	r7, sp, #40	; 0x28
 8008538:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e10f      	b.n	8008764 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f009 ffde 	bl	8012520 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2203      	movs	r2, #3
 8008568:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008574:	2b00      	cmp	r3, #0
 8008576:	d102      	bne.n	800857e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4618      	mov	r0, r3
 8008584:	f004 f815 	bl	800c5b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	603b      	str	r3, [r7, #0]
 800858e:	687e      	ldr	r6, [r7, #4]
 8008590:	466d      	mov	r5, sp
 8008592:	f106 0410 	add.w	r4, r6, #16
 8008596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800859a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800859c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800859e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80085a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80085a6:	1d33      	adds	r3, r6, #4
 80085a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085aa:	6838      	ldr	r0, [r7, #0]
 80085ac:	f003 feec 	bl	800c388 <USB_CoreInit>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d005      	beq.n	80085c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2202      	movs	r2, #2
 80085ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e0d0      	b.n	8008764 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2100      	movs	r1, #0
 80085c8:	4618      	mov	r0, r3
 80085ca:	f004 f803 	bl	800c5d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]
 80085d2:	e04a      	b.n	800866a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80085d4:	7bfa      	ldrb	r2, [r7, #15]
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4613      	mov	r3, r2
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	1a9b      	subs	r3, r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	333d      	adds	r3, #61	; 0x3d
 80085e4:	2201      	movs	r2, #1
 80085e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80085e8:	7bfa      	ldrb	r2, [r7, #15]
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4613      	mov	r3, r2
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	1a9b      	subs	r3, r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	333c      	adds	r3, #60	; 0x3c
 80085f8:	7bfa      	ldrb	r2, [r7, #15]
 80085fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80085fc:	7bfa      	ldrb	r2, [r7, #15]
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	b298      	uxth	r0, r3
 8008602:	6879      	ldr	r1, [r7, #4]
 8008604:	4613      	mov	r3, r2
 8008606:	00db      	lsls	r3, r3, #3
 8008608:	1a9b      	subs	r3, r3, r2
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	440b      	add	r3, r1
 800860e:	3342      	adds	r3, #66	; 0x42
 8008610:	4602      	mov	r2, r0
 8008612:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008614:	7bfa      	ldrb	r2, [r7, #15]
 8008616:	6879      	ldr	r1, [r7, #4]
 8008618:	4613      	mov	r3, r2
 800861a:	00db      	lsls	r3, r3, #3
 800861c:	1a9b      	subs	r3, r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	440b      	add	r3, r1
 8008622:	333f      	adds	r3, #63	; 0x3f
 8008624:	2200      	movs	r2, #0
 8008626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008628:	7bfa      	ldrb	r2, [r7, #15]
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	4613      	mov	r3, r2
 800862e:	00db      	lsls	r3, r3, #3
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	440b      	add	r3, r1
 8008636:	3344      	adds	r3, #68	; 0x44
 8008638:	2200      	movs	r2, #0
 800863a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800863c:	7bfa      	ldrb	r2, [r7, #15]
 800863e:	6879      	ldr	r1, [r7, #4]
 8008640:	4613      	mov	r3, r2
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	1a9b      	subs	r3, r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	440b      	add	r3, r1
 800864a:	3348      	adds	r3, #72	; 0x48
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008650:	7bfa      	ldrb	r2, [r7, #15]
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	4613      	mov	r3, r2
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	1a9b      	subs	r3, r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	440b      	add	r3, r1
 800865e:	3350      	adds	r3, #80	; 0x50
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	3301      	adds	r3, #1
 8008668:	73fb      	strb	r3, [r7, #15]
 800866a:	7bfa      	ldrb	r2, [r7, #15]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	429a      	cmp	r2, r3
 8008672:	d3af      	bcc.n	80085d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008674:	2300      	movs	r3, #0
 8008676:	73fb      	strb	r3, [r7, #15]
 8008678:	e044      	b.n	8008704 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800867a:	7bfa      	ldrb	r2, [r7, #15]
 800867c:	6879      	ldr	r1, [r7, #4]
 800867e:	4613      	mov	r3, r2
 8008680:	00db      	lsls	r3, r3, #3
 8008682:	1a9b      	subs	r3, r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	440b      	add	r3, r1
 8008688:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800868c:	2200      	movs	r2, #0
 800868e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008690:	7bfa      	ldrb	r2, [r7, #15]
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	4613      	mov	r3, r2
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	1a9b      	subs	r3, r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80086a2:	7bfa      	ldrb	r2, [r7, #15]
 80086a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80086a6:	7bfa      	ldrb	r2, [r7, #15]
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	4613      	mov	r3, r2
 80086ac:	00db      	lsls	r3, r3, #3
 80086ae:	1a9b      	subs	r3, r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	440b      	add	r3, r1
 80086b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80086bc:	7bfa      	ldrb	r2, [r7, #15]
 80086be:	6879      	ldr	r1, [r7, #4]
 80086c0:	4613      	mov	r3, r2
 80086c2:	00db      	lsls	r3, r3, #3
 80086c4:	1a9b      	subs	r3, r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	440b      	add	r3, r1
 80086ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80086ce:	2200      	movs	r2, #0
 80086d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80086d2:	7bfa      	ldrb	r2, [r7, #15]
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	00db      	lsls	r3, r3, #3
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80086e4:	2200      	movs	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80086e8:	7bfa      	ldrb	r2, [r7, #15]
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	4613      	mov	r3, r2
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	1a9b      	subs	r3, r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	440b      	add	r3, r1
 80086f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	3301      	adds	r3, #1
 8008702:	73fb      	strb	r3, [r7, #15]
 8008704:	7bfa      	ldrb	r2, [r7, #15]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	429a      	cmp	r2, r3
 800870c:	d3b5      	bcc.n	800867a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	603b      	str	r3, [r7, #0]
 8008714:	687e      	ldr	r6, [r7, #4]
 8008716:	466d      	mov	r5, sp
 8008718:	f106 0410 	add.w	r4, r6, #16
 800871c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800871e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008724:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008728:	e885 0003 	stmia.w	r5, {r0, r1}
 800872c:	1d33      	adds	r3, r6, #4
 800872e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008730:	6838      	ldr	r0, [r7, #0]
 8008732:	f003 ff79 	bl	800c628 <USB_DevInit>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d005      	beq.n	8008748 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e00d      	b.n	8008764 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4618      	mov	r0, r3
 800875e:	f004 ffc1 	bl	800d6e4 <USB_DevDisconnect>

  return HAL_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800876c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_PCD_Start+0x1c>
 8008784:	2302      	movs	r3, #2
 8008786:	e020      	b.n	80087ca <HAL_PCD_Start+0x5e>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008794:	2b01      	cmp	r3, #1
 8008796:	d109      	bne.n	80087ac <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800879c:	2b01      	cmp	r3, #1
 800879e:	d005      	beq.n	80087ac <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f003 feed 	bl	800c590 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f004 ff71 	bl	800d6a2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80087d2:	b590      	push	{r4, r7, lr}
 80087d4:	b08d      	sub	sp, #52	; 0x34
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f005 f82f 	bl	800d84c <USB_GetMode>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f040 839d 	bne.w	8008f30 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f004 ff93 	bl	800d726 <USB_ReadInterrupts>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 8393 	beq.w	8008f2e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4618      	mov	r0, r3
 800880e:	f004 ff8a 	bl	800d726 <USB_ReadInterrupts>
 8008812:	4603      	mov	r3, r0
 8008814:	f003 0302 	and.w	r3, r3, #2
 8008818:	2b02      	cmp	r3, #2
 800881a:	d107      	bne.n	800882c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	695a      	ldr	r2, [r3, #20]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f002 0202 	and.w	r2, r2, #2
 800882a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4618      	mov	r0, r3
 8008832:	f004 ff78 	bl	800d726 <USB_ReadInterrupts>
 8008836:	4603      	mov	r3, r0
 8008838:	f003 0310 	and.w	r3, r3, #16
 800883c:	2b10      	cmp	r3, #16
 800883e:	d161      	bne.n	8008904 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	699a      	ldr	r2, [r3, #24]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 0210 	bic.w	r2, r2, #16
 800884e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	6a1b      	ldr	r3, [r3, #32]
 8008854:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	f003 020f 	and.w	r2, r3, #15
 800885c:	4613      	mov	r3, r2
 800885e:	00db      	lsls	r3, r3, #3
 8008860:	1a9b      	subs	r3, r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	4413      	add	r3, r2
 800886c:	3304      	adds	r3, #4
 800886e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	0c5b      	lsrs	r3, r3, #17
 8008874:	f003 030f 	and.w	r3, r3, #15
 8008878:	2b02      	cmp	r3, #2
 800887a:	d124      	bne.n	80088c6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008882:	4013      	ands	r3, r2
 8008884:	2b00      	cmp	r3, #0
 8008886:	d035      	beq.n	80088f4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	091b      	lsrs	r3, r3, #4
 8008890:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008896:	b29b      	uxth	r3, r3
 8008898:	461a      	mov	r2, r3
 800889a:	6a38      	ldr	r0, [r7, #32]
 800889c:	f004 fdde 	bl	800d45c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	68da      	ldr	r2, [r3, #12]
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	091b      	lsrs	r3, r3, #4
 80088a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088ac:	441a      	add	r2, r3
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	699a      	ldr	r2, [r3, #24]
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	091b      	lsrs	r3, r3, #4
 80088ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088be:	441a      	add	r2, r3
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	619a      	str	r2, [r3, #24]
 80088c4:	e016      	b.n	80088f4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	0c5b      	lsrs	r3, r3, #17
 80088ca:	f003 030f 	and.w	r3, r3, #15
 80088ce:	2b06      	cmp	r3, #6
 80088d0:	d110      	bne.n	80088f4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80088d8:	2208      	movs	r2, #8
 80088da:	4619      	mov	r1, r3
 80088dc:	6a38      	ldr	r0, [r7, #32]
 80088de:	f004 fdbd 	bl	800d45c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	699a      	ldr	r2, [r3, #24]
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	091b      	lsrs	r3, r3, #4
 80088ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088ee:	441a      	add	r2, r3
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	699a      	ldr	r2, [r3, #24]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f042 0210 	orr.w	r2, r2, #16
 8008902:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4618      	mov	r0, r3
 800890a:	f004 ff0c 	bl	800d726 <USB_ReadInterrupts>
 800890e:	4603      	mov	r3, r0
 8008910:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008914:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008918:	d16e      	bne.n	80089f8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4618      	mov	r0, r3
 8008924:	f004 ff12 	bl	800d74c <USB_ReadDevAllOutEpInterrupt>
 8008928:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800892a:	e062      	b.n	80089f2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d057      	beq.n	80089e6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800893c:	b2d2      	uxtb	r2, r2
 800893e:	4611      	mov	r1, r2
 8008940:	4618      	mov	r0, r3
 8008942:	f004 ff37 	bl	800d7b4 <USB_ReadDevOutEPInterrupt>
 8008946:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00c      	beq.n	800896c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	015a      	lsls	r2, r3, #5
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	4413      	add	r3, r2
 800895a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895e:	461a      	mov	r2, r3
 8008960:	2301      	movs	r3, #1
 8008962:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fdb0 	bl	80094cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	f003 0308 	and.w	r3, r3, #8
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00c      	beq.n	8008990 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008982:	461a      	mov	r2, r3
 8008984:	2308      	movs	r3, #8
 8008986:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 feaa 	bl	80096e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	f003 0310 	and.w	r3, r3, #16
 8008996:	2b00      	cmp	r3, #0
 8008998:	d008      	beq.n	80089ac <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	015a      	lsls	r2, r3, #5
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	4413      	add	r3, r2
 80089a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a6:	461a      	mov	r2, r3
 80089a8:	2310      	movs	r3, #16
 80089aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f003 0320 	and.w	r3, r3, #32
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d008      	beq.n	80089c8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c2:	461a      	mov	r2, r3
 80089c4:	2320      	movs	r3, #32
 80089c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d009      	beq.n	80089e6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	015a      	lsls	r2, r3, #5
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	4413      	add	r3, r2
 80089da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089de:	461a      	mov	r2, r3
 80089e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	3301      	adds	r3, #1
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	085b      	lsrs	r3, r3, #1
 80089f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d199      	bne.n	800892c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f004 fe92 	bl	800d726 <USB_ReadInterrupts>
 8008a02:	4603      	mov	r3, r0
 8008a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a0c:	f040 80c0 	bne.w	8008b90 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f004 feb3 	bl	800d780 <USB_ReadDevAllInEpInterrupt>
 8008a1a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008a20:	e0b2      	b.n	8008b88 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 80a7 	beq.w	8008b7c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a34:	b2d2      	uxtb	r2, r2
 8008a36:	4611      	mov	r1, r2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f004 fed9 	bl	800d7f0 <USB_ReadDevInEPInterrupt>
 8008a3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d057      	beq.n	8008afa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	f003 030f 	and.w	r3, r3, #15
 8008a50:	2201      	movs	r2, #1
 8008a52:	fa02 f303 	lsl.w	r3, r2, r3
 8008a56:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	43db      	mvns	r3, r3
 8008a64:	69f9      	ldr	r1, [r7, #28]
 8008a66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	015a      	lsls	r2, r3, #5
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	4413      	add	r3, r2
 8008a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d132      	bne.n	8008aee <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	00db      	lsls	r3, r3, #3
 8008a90:	1a9b      	subs	r3, r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	440b      	add	r3, r1
 8008a96:	3348      	adds	r3, #72	; 0x48
 8008a98:	6819      	ldr	r1, [r3, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	1a9b      	subs	r3, r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4403      	add	r3, r0
 8008aa8:	3344      	adds	r3, #68	; 0x44
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4419      	add	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	00db      	lsls	r3, r3, #3
 8008ab6:	1a9b      	subs	r3, r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4403      	add	r3, r0
 8008abc:	3348      	adds	r3, #72	; 0x48
 8008abe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d113      	bne.n	8008aee <HAL_PCD_IRQHandler+0x31c>
 8008ac6:	6879      	ldr	r1, [r7, #4]
 8008ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aca:	4613      	mov	r3, r2
 8008acc:	00db      	lsls	r3, r3, #3
 8008ace:	1a9b      	subs	r3, r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	440b      	add	r3, r1
 8008ad4:	3350      	adds	r3, #80	; 0x50
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d108      	bne.n	8008aee <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6818      	ldr	r0, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	2101      	movs	r1, #1
 8008aea:	f004 fee1 	bl	800d8b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	4619      	mov	r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f009 fd94 	bl	8012622 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f003 0308 	and.w	r3, r3, #8
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d008      	beq.n	8008b16 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b10:	461a      	mov	r2, r3
 8008b12:	2308      	movs	r3, #8
 8008b14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f003 0310 	and.w	r3, r3, #16
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d008      	beq.n	8008b32 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	2310      	movs	r3, #16
 8008b30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d008      	beq.n	8008b4e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b48:	461a      	mov	r2, r3
 8008b4a:	2340      	movs	r3, #64	; 0x40
 8008b4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	f003 0302 	and.w	r3, r3, #2
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d008      	beq.n	8008b6a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b64:	461a      	mov	r2, r3
 8008b66:	2302      	movs	r3, #2
 8008b68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008b74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fc1b 	bl	80093b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7e:	3301      	adds	r3, #1
 8008b80:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	085b      	lsrs	r3, r3, #1
 8008b86:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f47f af49 	bne.w	8008a22 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f004 fdc6 	bl	800d726 <USB_ReadInterrupts>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ba4:	d122      	bne.n	8008bec <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	69fa      	ldr	r2, [r7, #28]
 8008bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bb4:	f023 0301 	bic.w	r3, r3, #1
 8008bb8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d108      	bne.n	8008bd6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008bcc:	2100      	movs	r1, #0
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fe26 	bl	8009820 <HAL_PCDEx_LPM_Callback>
 8008bd4:	e002      	b.n	8008bdc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f009 fd9a 	bl	8012710 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	695a      	ldr	r2, [r3, #20]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f004 fd98 	bl	800d726 <USB_ReadInterrupts>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c00:	d112      	bne.n	8008c28 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d102      	bne.n	8008c18 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f009 fd56 	bl	80126c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	695a      	ldr	r2, [r3, #20]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008c26:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f004 fd7a 	bl	800d726 <USB_ReadInterrupts>
 8008c32:	4603      	mov	r3, r0
 8008c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c3c:	f040 80c7 	bne.w	8008dce <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	69fa      	ldr	r2, [r7, #28]
 8008c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c4e:	f023 0301 	bic.w	r3, r3, #1
 8008c52:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2110      	movs	r1, #16
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f003 fe48 	bl	800c8f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c60:	2300      	movs	r3, #0
 8008c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c64:	e056      	b.n	8008d14 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c72:	461a      	mov	r2, r3
 8008c74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c78:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c8a:	0151      	lsls	r1, r2, #5
 8008c8c:	69fa      	ldr	r2, [r7, #28]
 8008c8e:	440a      	add	r2, r1
 8008c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c98:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008caa:	0151      	lsls	r1, r2, #5
 8008cac:	69fa      	ldr	r2, [r7, #28]
 8008cae:	440a      	add	r2, r1
 8008cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008cb8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ccc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cde:	0151      	lsls	r1, r2, #5
 8008ce0:	69fa      	ldr	r2, [r7, #28]
 8008ce2:	440a      	add	r2, r1
 8008ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008cec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cfe:	0151      	lsls	r1, r2, #5
 8008d00:	69fa      	ldr	r2, [r7, #28]
 8008d02:	440a      	add	r2, r1
 8008d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d0c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d10:	3301      	adds	r3, #1
 8008d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d3a3      	bcc.n	8008c66 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	69fa      	ldr	r2, [r7, #28]
 8008d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d2c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008d30:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d016      	beq.n	8008d68 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d44:	69fa      	ldr	r2, [r7, #28]
 8008d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d4a:	f043 030b 	orr.w	r3, r3, #11
 8008d4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5a:	69fa      	ldr	r2, [r7, #28]
 8008d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d60:	f043 030b 	orr.w	r3, r3, #11
 8008d64:	6453      	str	r3, [r2, #68]	; 0x44
 8008d66:	e015      	b.n	8008d94 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	69fa      	ldr	r2, [r7, #28]
 8008d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008d7a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008d7e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	69fa      	ldr	r2, [r7, #28]
 8008d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d8e:	f043 030b 	orr.w	r3, r3, #11
 8008d92:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	69fa      	ldr	r2, [r7, #28]
 8008d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008da2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008da6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6818      	ldr	r0, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008db8:	461a      	mov	r2, r3
 8008dba:	f004 fd79 	bl	800d8b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	695a      	ldr	r2, [r3, #20]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f004 fca7 	bl	800d726 <USB_ReadInterrupts>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de2:	d124      	bne.n	8008e2e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f004 fd3d 	bl	800d868 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f003 fddd 	bl	800c9b2 <USB_GetDevSpeed>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681c      	ldr	r4, [r3, #0]
 8008e04:	f001 f956 	bl	800a0b4 <HAL_RCC_GetHCLKFreq>
 8008e08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	461a      	mov	r2, r3
 8008e12:	4620      	mov	r0, r4
 8008e14:	f003 fb1a 	bl	800c44c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f009 fc2a 	bl	8012672 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	695a      	ldr	r2, [r3, #20]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f004 fc77 	bl	800d726 <USB_ReadInterrupts>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	f003 0308 	and.w	r3, r3, #8
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d10a      	bne.n	8008e58 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f009 fc07 	bl	8012656 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	695a      	ldr	r2, [r3, #20]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f002 0208 	and.w	r2, r2, #8
 8008e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f004 fc62 	bl	800d726 <USB_ReadInterrupts>
 8008e62:	4603      	mov	r3, r0
 8008e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e6c:	d10f      	bne.n	8008e8e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f009 fc69 	bl	8012750 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	695a      	ldr	r2, [r3, #20]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f004 fc47 	bl	800d726 <USB_ReadInterrupts>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ea2:	d10f      	bne.n	8008ec4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f009 fc3c 	bl	801272c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	695a      	ldr	r2, [r3, #20]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f004 fc2c 	bl	800d726 <USB_ReadInterrupts>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ed8:	d10a      	bne.n	8008ef0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f009 fc4a 	bl	8012774 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	695a      	ldr	r2, [r3, #20]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f004 fc16 	bl	800d726 <USB_ReadInterrupts>
 8008efa:	4603      	mov	r3, r0
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d115      	bne.n	8008f30 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	f003 0304 	and.w	r3, r3, #4
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d002      	beq.n	8008f1c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f009 fc3a 	bl	8012790 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6859      	ldr	r1, [r3, #4]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	605a      	str	r2, [r3, #4]
 8008f2c:	e000      	b.n	8008f30 <HAL_PCD_IRQHandler+0x75e>
      return;
 8008f2e:	bf00      	nop
    }
  }
}
 8008f30:	3734      	adds	r7, #52	; 0x34
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd90      	pop	{r4, r7, pc}

08008f36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b082      	sub	sp, #8
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_PCD_SetAddress+0x1a>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e013      	b.n	8008f78 <HAL_PCD_SetAddress+0x42>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	78fa      	ldrb	r2, [r7, #3]
 8008f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	78fa      	ldrb	r2, [r7, #3]
 8008f66:	4611      	mov	r1, r2
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f004 fb74 	bl	800d656 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	4608      	mov	r0, r1
 8008f8a:	4611      	mov	r1, r2
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	4603      	mov	r3, r0
 8008f90:	70fb      	strb	r3, [r7, #3]
 8008f92:	460b      	mov	r3, r1
 8008f94:	803b      	strh	r3, [r7, #0]
 8008f96:	4613      	mov	r3, r2
 8008f98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da0f      	bge.n	8008fc6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008fa6:	78fb      	ldrb	r3, [r7, #3]
 8008fa8:	f003 020f 	and.w	r2, r3, #15
 8008fac:	4613      	mov	r3, r2
 8008fae:	00db      	lsls	r3, r3, #3
 8008fb0:	1a9b      	subs	r3, r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	3338      	adds	r3, #56	; 0x38
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	4413      	add	r3, r2
 8008fba:	3304      	adds	r3, #4
 8008fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	705a      	strb	r2, [r3, #1]
 8008fc4:	e00f      	b.n	8008fe6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fc6:	78fb      	ldrb	r3, [r7, #3]
 8008fc8:	f003 020f 	and.w	r2, r3, #15
 8008fcc:	4613      	mov	r3, r2
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	1a9b      	subs	r3, r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	4413      	add	r3, r2
 8008fdc:	3304      	adds	r3, #4
 8008fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	f003 030f 	and.w	r3, r3, #15
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008ff2:	883a      	ldrh	r2, [r7, #0]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	78ba      	ldrb	r2, [r7, #2]
 8008ffc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	785b      	ldrb	r3, [r3, #1]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d004      	beq.n	8009010 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	b29a      	uxth	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009010:	78bb      	ldrb	r3, [r7, #2]
 8009012:	2b02      	cmp	r3, #2
 8009014:	d102      	bne.n	800901c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009022:	2b01      	cmp	r3, #1
 8009024:	d101      	bne.n	800902a <HAL_PCD_EP_Open+0xaa>
 8009026:	2302      	movs	r3, #2
 8009028:	e00e      	b.n	8009048 <HAL_PCD_EP_Open+0xc8>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68f9      	ldr	r1, [r7, #12]
 8009038:	4618      	mov	r0, r3
 800903a:	f003 fcdf 	bl	800c9fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009046:	7afb      	ldrb	r3, [r7, #11]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800905c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009060:	2b00      	cmp	r3, #0
 8009062:	da0f      	bge.n	8009084 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	f003 020f 	and.w	r2, r3, #15
 800906a:	4613      	mov	r3, r2
 800906c:	00db      	lsls	r3, r3, #3
 800906e:	1a9b      	subs	r3, r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	3338      	adds	r3, #56	; 0x38
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	4413      	add	r3, r2
 8009078:	3304      	adds	r3, #4
 800907a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2201      	movs	r2, #1
 8009080:	705a      	strb	r2, [r3, #1]
 8009082:	e00f      	b.n	80090a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	f003 020f 	and.w	r2, r3, #15
 800908a:	4613      	mov	r3, r2
 800908c:	00db      	lsls	r3, r3, #3
 800908e:	1a9b      	subs	r3, r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	4413      	add	r3, r2
 800909a:	3304      	adds	r3, #4
 800909c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80090a4:	78fb      	ldrb	r3, [r7, #3]
 80090a6:	f003 030f 	and.w	r3, r3, #15
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d101      	bne.n	80090be <HAL_PCD_EP_Close+0x6e>
 80090ba:	2302      	movs	r3, #2
 80090bc:	e00e      	b.n	80090dc <HAL_PCD_EP_Close+0x8c>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68f9      	ldr	r1, [r7, #12]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f003 fd1d 	bl	800cb0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	607a      	str	r2, [r7, #4]
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	460b      	mov	r3, r1
 80090f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090f4:	7afb      	ldrb	r3, [r7, #11]
 80090f6:	f003 020f 	and.w	r2, r3, #15
 80090fa:	4613      	mov	r3, r2
 80090fc:	00db      	lsls	r3, r3, #3
 80090fe:	1a9b      	subs	r3, r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	4413      	add	r3, r2
 800910a:	3304      	adds	r3, #4
 800910c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2200      	movs	r2, #0
 800911e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2200      	movs	r2, #0
 8009124:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009126:	7afb      	ldrb	r3, [r7, #11]
 8009128:	f003 030f 	and.w	r3, r3, #15
 800912c:	b2da      	uxtb	r2, r3
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d102      	bne.n	8009140 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009140:	7afb      	ldrb	r3, [r7, #11]
 8009142:	f003 030f 	and.w	r3, r3, #15
 8009146:	2b00      	cmp	r3, #0
 8009148:	d109      	bne.n	800915e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	461a      	mov	r2, r3
 8009156:	6979      	ldr	r1, [r7, #20]
 8009158:	f003 fff8 	bl	800d14c <USB_EP0StartXfer>
 800915c:	e008      	b.n	8009170 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6818      	ldr	r0, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	b2db      	uxtb	r3, r3
 8009168:	461a      	mov	r2, r3
 800916a:	6979      	ldr	r1, [r7, #20]
 800916c:	f003 fdaa 	bl	800ccc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	460b      	mov	r3, r1
 8009184:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009186:	78fb      	ldrb	r3, [r7, #3]
 8009188:	f003 020f 	and.w	r2, r3, #15
 800918c:	6879      	ldr	r1, [r7, #4]
 800918e:	4613      	mov	r3, r2
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	1a9b      	subs	r3, r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	440b      	add	r3, r1
 8009198:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800919c:	681b      	ldr	r3, [r3, #0]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b086      	sub	sp, #24
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	603b      	str	r3, [r7, #0]
 80091b6:	460b      	mov	r3, r1
 80091b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091ba:	7afb      	ldrb	r3, [r7, #11]
 80091bc:	f003 020f 	and.w	r2, r3, #15
 80091c0:	4613      	mov	r3, r2
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	1a9b      	subs	r3, r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	3338      	adds	r3, #56	; 0x38
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	4413      	add	r3, r2
 80091ce:	3304      	adds	r3, #4
 80091d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2200      	movs	r2, #0
 80091e2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2201      	movs	r2, #1
 80091e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091ea:	7afb      	ldrb	r3, [r7, #11]
 80091ec:	f003 030f 	and.w	r3, r3, #15
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d102      	bne.n	8009204 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009204:	7afb      	ldrb	r3, [r7, #11]
 8009206:	f003 030f 	and.w	r3, r3, #15
 800920a:	2b00      	cmp	r3, #0
 800920c:	d109      	bne.n	8009222 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	461a      	mov	r2, r3
 800921a:	6979      	ldr	r1, [r7, #20]
 800921c:	f003 ff96 	bl	800d14c <USB_EP0StartXfer>
 8009220:	e008      	b.n	8009234 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6818      	ldr	r0, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	461a      	mov	r2, r3
 800922e:	6979      	ldr	r1, [r7, #20]
 8009230:	f003 fd48 	bl	800ccc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b084      	sub	sp, #16
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	460b      	mov	r3, r1
 8009248:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	f003 020f 	and.w	r2, r3, #15
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	429a      	cmp	r2, r3
 8009256:	d901      	bls.n	800925c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e050      	b.n	80092fe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800925c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009260:	2b00      	cmp	r3, #0
 8009262:	da0f      	bge.n	8009284 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	f003 020f 	and.w	r2, r3, #15
 800926a:	4613      	mov	r3, r2
 800926c:	00db      	lsls	r3, r3, #3
 800926e:	1a9b      	subs	r3, r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	3338      	adds	r3, #56	; 0x38
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	4413      	add	r3, r2
 8009278:	3304      	adds	r3, #4
 800927a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2201      	movs	r2, #1
 8009280:	705a      	strb	r2, [r3, #1]
 8009282:	e00d      	b.n	80092a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009284:	78fa      	ldrb	r2, [r7, #3]
 8009286:	4613      	mov	r3, r2
 8009288:	00db      	lsls	r3, r3, #3
 800928a:	1a9b      	subs	r3, r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	4413      	add	r3, r2
 8009296:	3304      	adds	r3, #4
 8009298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2200      	movs	r2, #0
 800929e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2201      	movs	r2, #1
 80092a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	f003 030f 	and.w	r3, r3, #15
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d101      	bne.n	80092c0 <HAL_PCD_EP_SetStall+0x82>
 80092bc:	2302      	movs	r3, #2
 80092be:	e01e      	b.n	80092fe <HAL_PCD_EP_SetStall+0xc0>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68f9      	ldr	r1, [r7, #12]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f004 f8ed 	bl	800d4ae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80092d4:	78fb      	ldrb	r3, [r7, #3]
 80092d6:	f003 030f 	and.w	r3, r3, #15
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10a      	bne.n	80092f4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6818      	ldr	r0, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	b2d9      	uxtb	r1, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80092ee:	461a      	mov	r2, r3
 80092f0:	f004 fade 	bl	800d8b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	460b      	mov	r3, r1
 8009310:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009312:	78fb      	ldrb	r3, [r7, #3]
 8009314:	f003 020f 	and.w	r2, r3, #15
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	d901      	bls.n	8009324 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e042      	b.n	80093aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009328:	2b00      	cmp	r3, #0
 800932a:	da0f      	bge.n	800934c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	f003 020f 	and.w	r2, r3, #15
 8009332:	4613      	mov	r3, r2
 8009334:	00db      	lsls	r3, r3, #3
 8009336:	1a9b      	subs	r3, r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	3338      	adds	r3, #56	; 0x38
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	4413      	add	r3, r2
 8009340:	3304      	adds	r3, #4
 8009342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	705a      	strb	r2, [r3, #1]
 800934a:	e00f      	b.n	800936c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	f003 020f 	and.w	r2, r3, #15
 8009352:	4613      	mov	r3, r2
 8009354:	00db      	lsls	r3, r3, #3
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	4413      	add	r3, r2
 8009362:	3304      	adds	r3, #4
 8009364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009372:	78fb      	ldrb	r3, [r7, #3]
 8009374:	f003 030f 	and.w	r3, r3, #15
 8009378:	b2da      	uxtb	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009384:	2b01      	cmp	r3, #1
 8009386:	d101      	bne.n	800938c <HAL_PCD_EP_ClrStall+0x86>
 8009388:	2302      	movs	r3, #2
 800938a:	e00e      	b.n	80093aa <HAL_PCD_EP_ClrStall+0xa4>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68f9      	ldr	r1, [r7, #12]
 800939a:	4618      	mov	r0, r3
 800939c:	f004 f8f5 	bl	800d58a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b08a      	sub	sp, #40	; 0x28
 80093b6:	af02      	add	r7, sp, #8
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	4613      	mov	r3, r2
 80093ca:	00db      	lsls	r3, r3, #3
 80093cc:	1a9b      	subs	r3, r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	3338      	adds	r3, #56	; 0x38
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	4413      	add	r3, r2
 80093d6:	3304      	adds	r3, #4
 80093d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	699a      	ldr	r2, [r3, #24]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d901      	bls.n	80093ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e06c      	b.n	80094c4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	695a      	ldr	r2, [r3, #20]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	69fa      	ldr	r2, [r7, #28]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d902      	bls.n	8009406 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	3303      	adds	r3, #3
 800940a:	089b      	lsrs	r3, r3, #2
 800940c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800940e:	e02b      	b.n	8009468 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	695a      	ldr	r2, [r3, #20]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	69fa      	ldr	r2, [r7, #28]
 8009422:	429a      	cmp	r2, r3
 8009424:	d902      	bls.n	800942c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	3303      	adds	r3, #3
 8009430:	089b      	lsrs	r3, r3, #2
 8009432:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	68d9      	ldr	r1, [r3, #12]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	b2da      	uxtb	r2, r3
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009444:	b2db      	uxtb	r3, r3
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	4603      	mov	r3, r0
 800944a:	6978      	ldr	r0, [r7, #20]
 800944c:	f003 ffd1 	bl	800d3f2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	68da      	ldr	r2, [r3, #12]
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	441a      	add	r2, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	699a      	ldr	r2, [r3, #24]
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	441a      	add	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	4413      	add	r3, r2
 8009470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	b29b      	uxth	r3, r3
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	429a      	cmp	r2, r3
 800947c:	d809      	bhi.n	8009492 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	699a      	ldr	r2, [r3, #24]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009486:	429a      	cmp	r2, r3
 8009488:	d203      	bcs.n	8009492 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1be      	bne.n	8009410 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	695a      	ldr	r2, [r3, #20]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	429a      	cmp	r2, r3
 800949c:	d811      	bhi.n	80094c2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	f003 030f 	and.w	r3, r3, #15
 80094a4:	2201      	movs	r2, #1
 80094a6:	fa02 f303 	lsl.w	r3, r2, r3
 80094aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	43db      	mvns	r3, r3
 80094b8:	6939      	ldr	r1, [r7, #16]
 80094ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094be:	4013      	ands	r3, r2
 80094c0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3720      	adds	r7, #32
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	333c      	adds	r3, #60	; 0x3c
 80094e4:	3304      	adds	r3, #4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	015a      	lsls	r2, r3, #5
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	4413      	add	r3, r2
 80094f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	f040 80a0 	bne.w	8009644 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	f003 0308 	and.w	r3, r3, #8
 800950a:	2b00      	cmp	r3, #0
 800950c:	d015      	beq.n	800953a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	4a72      	ldr	r2, [pc, #456]	; (80096dc <PCD_EP_OutXfrComplete_int+0x210>)
 8009512:	4293      	cmp	r3, r2
 8009514:	f240 80dd 	bls.w	80096d2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 80d7 	beq.w	80096d2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009530:	461a      	mov	r2, r3
 8009532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009536:	6093      	str	r3, [r2, #8]
 8009538:	e0cb      	b.n	80096d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f003 0320 	and.w	r3, r3, #32
 8009540:	2b00      	cmp	r3, #0
 8009542:	d009      	beq.n	8009558 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009550:	461a      	mov	r2, r3
 8009552:	2320      	movs	r3, #32
 8009554:	6093      	str	r3, [r2, #8]
 8009556:	e0bc      	b.n	80096d2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800955e:	2b00      	cmp	r3, #0
 8009560:	f040 80b7 	bne.w	80096d2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4a5d      	ldr	r2, [pc, #372]	; (80096dc <PCD_EP_OutXfrComplete_int+0x210>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d90f      	bls.n	800958c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00a      	beq.n	800958c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009582:	461a      	mov	r2, r3
 8009584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009588:	6093      	str	r3, [r2, #8]
 800958a:	e0a2      	b.n	80096d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800958c:	6879      	ldr	r1, [r7, #4]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	4613      	mov	r3, r2
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	1a9b      	subs	r3, r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	440b      	add	r3, r1
 800959a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800959e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	0159      	lsls	r1, r3, #5
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	440b      	add	r3, r1
 80095a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80095b2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	4613      	mov	r3, r2
 80095ba:	00db      	lsls	r3, r3, #3
 80095bc:	1a9b      	subs	r3, r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4403      	add	r3, r0
 80095c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80095c6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80095c8:	6879      	ldr	r1, [r7, #4]
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	4613      	mov	r3, r2
 80095ce:	00db      	lsls	r3, r3, #3
 80095d0:	1a9b      	subs	r3, r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	440b      	add	r3, r1
 80095d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80095da:	6819      	ldr	r1, [r3, #0]
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	4613      	mov	r3, r2
 80095e2:	00db      	lsls	r3, r3, #3
 80095e4:	1a9b      	subs	r3, r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4403      	add	r3, r0
 80095ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4419      	add	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	4613      	mov	r3, r2
 80095f8:	00db      	lsls	r3, r3, #3
 80095fa:	1a9b      	subs	r3, r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4403      	add	r3, r0
 8009600:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009604:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d114      	bne.n	8009636 <PCD_EP_OutXfrComplete_int+0x16a>
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	4613      	mov	r3, r2
 8009612:	00db      	lsls	r3, r3, #3
 8009614:	1a9b      	subs	r3, r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	440b      	add	r3, r1
 800961a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d108      	bne.n	8009636 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6818      	ldr	r0, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800962e:	461a      	mov	r2, r3
 8009630:	2101      	movs	r1, #1
 8009632:	f004 f93d 	bl	800d8b0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	b2db      	uxtb	r3, r3
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f008 ffd5 	bl	80125ec <HAL_PCD_DataOutStageCallback>
 8009642:	e046      	b.n	80096d2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	4a26      	ldr	r2, [pc, #152]	; (80096e0 <PCD_EP_OutXfrComplete_int+0x214>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d124      	bne.n	8009696 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00a      	beq.n	800966c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009662:	461a      	mov	r2, r3
 8009664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009668:	6093      	str	r3, [r2, #8]
 800966a:	e032      	b.n	80096d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	f003 0320 	and.w	r3, r3, #32
 8009672:	2b00      	cmp	r3, #0
 8009674:	d008      	beq.n	8009688 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	4413      	add	r3, r2
 800967e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009682:	461a      	mov	r2, r3
 8009684:	2320      	movs	r3, #32
 8009686:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	b2db      	uxtb	r3, r3
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f008 ffac 	bl	80125ec <HAL_PCD_DataOutStageCallback>
 8009694:	e01d      	b.n	80096d2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d114      	bne.n	80096c6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	4613      	mov	r3, r2
 80096a2:	00db      	lsls	r3, r3, #3
 80096a4:	1a9b      	subs	r3, r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	440b      	add	r3, r1
 80096aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d108      	bne.n	80096c6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6818      	ldr	r0, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80096be:	461a      	mov	r2, r3
 80096c0:	2100      	movs	r1, #0
 80096c2:	f004 f8f5 	bl	800d8b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f008 ff8d 	bl	80125ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	4f54300a 	.word	0x4f54300a
 80096e0:	4f54310a 	.word	0x4f54310a

080096e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	333c      	adds	r3, #60	; 0x3c
 80096fc:	3304      	adds	r3, #4
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	015a      	lsls	r2, r3, #5
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	4413      	add	r3, r2
 800970a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4a15      	ldr	r2, [pc, #84]	; (800976c <PCD_EP_OutSetupPacket_int+0x88>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d90e      	bls.n	8009738 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009720:	2b00      	cmp	r3, #0
 8009722:	d009      	beq.n	8009738 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009730:	461a      	mov	r2, r3
 8009732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009736:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f008 ff45 	bl	80125c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	4a0a      	ldr	r2, [pc, #40]	; (800976c <PCD_EP_OutSetupPacket_int+0x88>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d90c      	bls.n	8009760 <PCD_EP_OutSetupPacket_int+0x7c>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d108      	bne.n	8009760 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6818      	ldr	r0, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009758:	461a      	mov	r2, r3
 800975a:	2101      	movs	r1, #1
 800975c:	f004 f8a8 	bl	800d8b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	4f54300a 	.word	0x4f54300a

08009770 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	70fb      	strb	r3, [r7, #3]
 800977c:	4613      	mov	r3, r2
 800977e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009786:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d107      	bne.n	800979e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800978e:	883b      	ldrh	r3, [r7, #0]
 8009790:	0419      	lsls	r1, r3, #16
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	430a      	orrs	r2, r1
 800979a:	629a      	str	r2, [r3, #40]	; 0x28
 800979c:	e028      	b.n	80097f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a4:	0c1b      	lsrs	r3, r3, #16
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	4413      	add	r3, r2
 80097aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80097ac:	2300      	movs	r3, #0
 80097ae:	73fb      	strb	r3, [r7, #15]
 80097b0:	e00d      	b.n	80097ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	3340      	adds	r3, #64	; 0x40
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	0c1b      	lsrs	r3, r3, #16
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	4413      	add	r3, r2
 80097c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
 80097ca:	3301      	adds	r3, #1
 80097cc:	73fb      	strb	r3, [r7, #15]
 80097ce:	7bfa      	ldrb	r2, [r7, #15]
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d3ec      	bcc.n	80097b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80097d8:	883b      	ldrh	r3, [r7, #0]
 80097da:	0418      	lsls	r0, r3, #16
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6819      	ldr	r1, [r3, #0]
 80097e0:	78fb      	ldrb	r3, [r7, #3]
 80097e2:	3b01      	subs	r3, #1
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	4302      	orrs	r2, r0
 80097e8:	3340      	adds	r3, #64	; 0x40
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	440b      	add	r3, r1
 80097ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3714      	adds	r7, #20
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80097fe:	b480      	push	{r7}
 8009800:	b083      	sub	sp, #12
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	460b      	mov	r3, r1
 8009808:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	887a      	ldrh	r2, [r7, #2]
 8009810:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e264      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d075      	beq.n	8009942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009856:	4ba3      	ldr	r3, [pc, #652]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 030c 	and.w	r3, r3, #12
 800985e:	2b04      	cmp	r3, #4
 8009860:	d00c      	beq.n	800987c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009862:	4ba0      	ldr	r3, [pc, #640]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800986a:	2b08      	cmp	r3, #8
 800986c:	d112      	bne.n	8009894 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800986e:	4b9d      	ldr	r3, [pc, #628]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800987a:	d10b      	bne.n	8009894 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800987c:	4b99      	ldr	r3, [pc, #612]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d05b      	beq.n	8009940 <HAL_RCC_OscConfig+0x108>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d157      	bne.n	8009940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e23f      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800989c:	d106      	bne.n	80098ac <HAL_RCC_OscConfig+0x74>
 800989e:	4b91      	ldr	r3, [pc, #580]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a90      	ldr	r2, [pc, #576]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	e01d      	b.n	80098e8 <HAL_RCC_OscConfig+0xb0>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098b4:	d10c      	bne.n	80098d0 <HAL_RCC_OscConfig+0x98>
 80098b6:	4b8b      	ldr	r3, [pc, #556]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a8a      	ldr	r2, [pc, #552]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	4b88      	ldr	r3, [pc, #544]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a87      	ldr	r2, [pc, #540]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	e00b      	b.n	80098e8 <HAL_RCC_OscConfig+0xb0>
 80098d0:	4b84      	ldr	r3, [pc, #528]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a83      	ldr	r2, [pc, #524]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098da:	6013      	str	r3, [r2, #0]
 80098dc:	4b81      	ldr	r3, [pc, #516]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a80      	ldr	r2, [pc, #512]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80098e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d013      	beq.n	8009918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098f0:	f7fc fbc4 	bl	800607c <HAL_GetTick>
 80098f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098f6:	e008      	b.n	800990a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098f8:	f7fc fbc0 	bl	800607c <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	2b64      	cmp	r3, #100	; 0x64
 8009904:	d901      	bls.n	800990a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e204      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800990a:	4b76      	ldr	r3, [pc, #472]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0f0      	beq.n	80098f8 <HAL_RCC_OscConfig+0xc0>
 8009916:	e014      	b.n	8009942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009918:	f7fc fbb0 	bl	800607c <HAL_GetTick>
 800991c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800991e:	e008      	b.n	8009932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009920:	f7fc fbac 	bl	800607c <HAL_GetTick>
 8009924:	4602      	mov	r2, r0
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	2b64      	cmp	r3, #100	; 0x64
 800992c:	d901      	bls.n	8009932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e1f0      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009932:	4b6c      	ldr	r3, [pc, #432]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1f0      	bne.n	8009920 <HAL_RCC_OscConfig+0xe8>
 800993e:	e000      	b.n	8009942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0302 	and.w	r3, r3, #2
 800994a:	2b00      	cmp	r3, #0
 800994c:	d063      	beq.n	8009a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800994e:	4b65      	ldr	r3, [pc, #404]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f003 030c 	and.w	r3, r3, #12
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00b      	beq.n	8009972 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800995a:	4b62      	ldr	r3, [pc, #392]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009962:	2b08      	cmp	r3, #8
 8009964:	d11c      	bne.n	80099a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009966:	4b5f      	ldr	r3, [pc, #380]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d116      	bne.n	80099a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009972:	4b5c      	ldr	r3, [pc, #368]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	2b00      	cmp	r3, #0
 800997c:	d005      	beq.n	800998a <HAL_RCC_OscConfig+0x152>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d001      	beq.n	800998a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e1c4      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800998a:	4b56      	ldr	r3, [pc, #344]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	00db      	lsls	r3, r3, #3
 8009998:	4952      	ldr	r1, [pc, #328]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 800999a:	4313      	orrs	r3, r2
 800999c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800999e:	e03a      	b.n	8009a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d020      	beq.n	80099ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099a8:	4b4f      	ldr	r3, [pc, #316]	; (8009ae8 <HAL_RCC_OscConfig+0x2b0>)
 80099aa:	2201      	movs	r2, #1
 80099ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ae:	f7fc fb65 	bl	800607c <HAL_GetTick>
 80099b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099b4:	e008      	b.n	80099c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099b6:	f7fc fb61 	bl	800607c <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	d901      	bls.n	80099c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80099c4:	2303      	movs	r3, #3
 80099c6:	e1a5      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099c8:	4b46      	ldr	r3, [pc, #280]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0f0      	beq.n	80099b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099d4:	4b43      	ldr	r3, [pc, #268]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	4940      	ldr	r1, [pc, #256]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	600b      	str	r3, [r1, #0]
 80099e8:	e015      	b.n	8009a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099ea:	4b3f      	ldr	r3, [pc, #252]	; (8009ae8 <HAL_RCC_OscConfig+0x2b0>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f0:	f7fc fb44 	bl	800607c <HAL_GetTick>
 80099f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099f6:	e008      	b.n	8009a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099f8:	f7fc fb40 	bl	800607c <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d901      	bls.n	8009a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e184      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a0a:	4b36      	ldr	r3, [pc, #216]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0302 	and.w	r3, r3, #2
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1f0      	bne.n	80099f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 0308 	and.w	r3, r3, #8
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d030      	beq.n	8009a84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d016      	beq.n	8009a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a2a:	4b30      	ldr	r3, [pc, #192]	; (8009aec <HAL_RCC_OscConfig+0x2b4>)
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a30:	f7fc fb24 	bl	800607c <HAL_GetTick>
 8009a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a36:	e008      	b.n	8009a4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a38:	f7fc fb20 	bl	800607c <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d901      	bls.n	8009a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e164      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a4a:	4b26      	ldr	r3, [pc, #152]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a4e:	f003 0302 	and.w	r3, r3, #2
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0f0      	beq.n	8009a38 <HAL_RCC_OscConfig+0x200>
 8009a56:	e015      	b.n	8009a84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a58:	4b24      	ldr	r3, [pc, #144]	; (8009aec <HAL_RCC_OscConfig+0x2b4>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a5e:	f7fc fb0d 	bl	800607c <HAL_GetTick>
 8009a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a64:	e008      	b.n	8009a78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a66:	f7fc fb09 	bl	800607c <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d901      	bls.n	8009a78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e14d      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a78:	4b1a      	ldr	r3, [pc, #104]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a7c:	f003 0302 	and.w	r3, r3, #2
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1f0      	bne.n	8009a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0304 	and.w	r3, r3, #4
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 80a0 	beq.w	8009bd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a92:	2300      	movs	r3, #0
 8009a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a96:	4b13      	ldr	r3, [pc, #76]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10f      	bne.n	8009ac2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	60bb      	str	r3, [r7, #8]
 8009aa6:	4b0f      	ldr	r3, [pc, #60]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	4a0e      	ldr	r2, [pc, #56]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8009ab2:	4b0c      	ldr	r3, [pc, #48]	; (8009ae4 <HAL_RCC_OscConfig+0x2ac>)
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aba:	60bb      	str	r3, [r7, #8]
 8009abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ac2:	4b0b      	ldr	r3, [pc, #44]	; (8009af0 <HAL_RCC_OscConfig+0x2b8>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d121      	bne.n	8009b12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ace:	4b08      	ldr	r3, [pc, #32]	; (8009af0 <HAL_RCC_OscConfig+0x2b8>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a07      	ldr	r2, [pc, #28]	; (8009af0 <HAL_RCC_OscConfig+0x2b8>)
 8009ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ada:	f7fc facf 	bl	800607c <HAL_GetTick>
 8009ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ae0:	e011      	b.n	8009b06 <HAL_RCC_OscConfig+0x2ce>
 8009ae2:	bf00      	nop
 8009ae4:	40023800 	.word	0x40023800
 8009ae8:	42470000 	.word	0x42470000
 8009aec:	42470e80 	.word	0x42470e80
 8009af0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009af4:	f7fc fac2 	bl	800607c <HAL_GetTick>
 8009af8:	4602      	mov	r2, r0
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d901      	bls.n	8009b06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e106      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b06:	4b85      	ldr	r3, [pc, #532]	; (8009d1c <HAL_RCC_OscConfig+0x4e4>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0f0      	beq.n	8009af4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d106      	bne.n	8009b28 <HAL_RCC_OscConfig+0x2f0>
 8009b1a:	4b81      	ldr	r3, [pc, #516]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b1e:	4a80      	ldr	r2, [pc, #512]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b20:	f043 0301 	orr.w	r3, r3, #1
 8009b24:	6713      	str	r3, [r2, #112]	; 0x70
 8009b26:	e01c      	b.n	8009b62 <HAL_RCC_OscConfig+0x32a>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	2b05      	cmp	r3, #5
 8009b2e:	d10c      	bne.n	8009b4a <HAL_RCC_OscConfig+0x312>
 8009b30:	4b7b      	ldr	r3, [pc, #492]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b34:	4a7a      	ldr	r2, [pc, #488]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b36:	f043 0304 	orr.w	r3, r3, #4
 8009b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8009b3c:	4b78      	ldr	r3, [pc, #480]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b40:	4a77      	ldr	r2, [pc, #476]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b42:	f043 0301 	orr.w	r3, r3, #1
 8009b46:	6713      	str	r3, [r2, #112]	; 0x70
 8009b48:	e00b      	b.n	8009b62 <HAL_RCC_OscConfig+0x32a>
 8009b4a:	4b75      	ldr	r3, [pc, #468]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4e:	4a74      	ldr	r2, [pc, #464]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b50:	f023 0301 	bic.w	r3, r3, #1
 8009b54:	6713      	str	r3, [r2, #112]	; 0x70
 8009b56:	4b72      	ldr	r3, [pc, #456]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b5a:	4a71      	ldr	r2, [pc, #452]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b5c:	f023 0304 	bic.w	r3, r3, #4
 8009b60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d015      	beq.n	8009b96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b6a:	f7fc fa87 	bl	800607c <HAL_GetTick>
 8009b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b70:	e00a      	b.n	8009b88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b72:	f7fc fa83 	bl	800607c <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d901      	bls.n	8009b88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e0c5      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b88:	4b65      	ldr	r3, [pc, #404]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0ee      	beq.n	8009b72 <HAL_RCC_OscConfig+0x33a>
 8009b94:	e014      	b.n	8009bc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b96:	f7fc fa71 	bl	800607c <HAL_GetTick>
 8009b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b9c:	e00a      	b.n	8009bb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b9e:	f7fc fa6d 	bl	800607c <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d901      	bls.n	8009bb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e0af      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bb4:	4b5a      	ldr	r3, [pc, #360]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bb8:	f003 0302 	and.w	r3, r3, #2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1ee      	bne.n	8009b9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d105      	bne.n	8009bd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bc6:	4b56      	ldr	r3, [pc, #344]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bca:	4a55      	ldr	r2, [pc, #340]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	f000 809b 	beq.w	8009d12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009bdc:	4b50      	ldr	r3, [pc, #320]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f003 030c 	and.w	r3, r3, #12
 8009be4:	2b08      	cmp	r3, #8
 8009be6:	d05c      	beq.n	8009ca2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d141      	bne.n	8009c74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bf0:	4b4c      	ldr	r3, [pc, #304]	; (8009d24 <HAL_RCC_OscConfig+0x4ec>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009bf6:	f7fc fa41 	bl	800607c <HAL_GetTick>
 8009bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bfc:	e008      	b.n	8009c10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bfe:	f7fc fa3d 	bl	800607c <HAL_GetTick>
 8009c02:	4602      	mov	r2, r0
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d901      	bls.n	8009c10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e081      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c10:	4b43      	ldr	r3, [pc, #268]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1f0      	bne.n	8009bfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	69da      	ldr	r2, [r3, #28]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	431a      	orrs	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2a:	019b      	lsls	r3, r3, #6
 8009c2c:	431a      	orrs	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c32:	085b      	lsrs	r3, r3, #1
 8009c34:	3b01      	subs	r3, #1
 8009c36:	041b      	lsls	r3, r3, #16
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3e:	061b      	lsls	r3, r3, #24
 8009c40:	4937      	ldr	r1, [pc, #220]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c46:	4b37      	ldr	r3, [pc, #220]	; (8009d24 <HAL_RCC_OscConfig+0x4ec>)
 8009c48:	2201      	movs	r2, #1
 8009c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c4c:	f7fc fa16 	bl	800607c <HAL_GetTick>
 8009c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c52:	e008      	b.n	8009c66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c54:	f7fc fa12 	bl	800607c <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e056      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c66:	4b2e      	ldr	r3, [pc, #184]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0f0      	beq.n	8009c54 <HAL_RCC_OscConfig+0x41c>
 8009c72:	e04e      	b.n	8009d12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c74:	4b2b      	ldr	r3, [pc, #172]	; (8009d24 <HAL_RCC_OscConfig+0x4ec>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c7a:	f7fc f9ff 	bl	800607c <HAL_GetTick>
 8009c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c80:	e008      	b.n	8009c94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c82:	f7fc f9fb 	bl	800607c <HAL_GetTick>
 8009c86:	4602      	mov	r2, r0
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d901      	bls.n	8009c94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e03f      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c94:	4b22      	ldr	r3, [pc, #136]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1f0      	bne.n	8009c82 <HAL_RCC_OscConfig+0x44a>
 8009ca0:	e037      	b.n	8009d12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d101      	bne.n	8009cae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e032      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009cae:	4b1c      	ldr	r3, [pc, #112]	; (8009d20 <HAL_RCC_OscConfig+0x4e8>)
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d028      	beq.n	8009d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d121      	bne.n	8009d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d11a      	bne.n	8009d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009cde:	4013      	ands	r3, r2
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ce4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d111      	bne.n	8009d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf4:	085b      	lsrs	r3, r3, #1
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d107      	bne.n	8009d0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d001      	beq.n	8009d12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e000      	b.n	8009d14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	40007000 	.word	0x40007000
 8009d20:	40023800 	.word	0x40023800
 8009d24:	42470060 	.word	0x42470060

08009d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e0cc      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d3c:	4b68      	ldr	r3, [pc, #416]	; (8009ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 0307 	and.w	r3, r3, #7
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d90c      	bls.n	8009d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d4a:	4b65      	ldr	r3, [pc, #404]	; (8009ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	b2d2      	uxtb	r2, r2
 8009d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d52:	4b63      	ldr	r3, [pc, #396]	; (8009ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 0307 	and.w	r3, r3, #7
 8009d5a:	683a      	ldr	r2, [r7, #0]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d001      	beq.n	8009d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e0b8      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 0302 	and.w	r3, r3, #2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d020      	beq.n	8009db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f003 0304 	and.w	r3, r3, #4
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d005      	beq.n	8009d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d7c:	4b59      	ldr	r3, [pc, #356]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	4a58      	ldr	r2, [pc, #352]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 0308 	and.w	r3, r3, #8
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d005      	beq.n	8009da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d94:	4b53      	ldr	r3, [pc, #332]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	4a52      	ldr	r2, [pc, #328]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009da0:	4b50      	ldr	r3, [pc, #320]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	494d      	ldr	r1, [pc, #308]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d044      	beq.n	8009e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d107      	bne.n	8009dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009dc6:	4b47      	ldr	r3, [pc, #284]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d119      	bne.n	8009e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e07f      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d003      	beq.n	8009de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d107      	bne.n	8009df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009de6:	4b3f      	ldr	r3, [pc, #252]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d109      	bne.n	8009e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e06f      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009df6:	4b3b      	ldr	r3, [pc, #236]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0302 	and.w	r3, r3, #2
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e067      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e06:	4b37      	ldr	r3, [pc, #220]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f023 0203 	bic.w	r2, r3, #3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	4934      	ldr	r1, [pc, #208]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e14:	4313      	orrs	r3, r2
 8009e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009e18:	f7fc f930 	bl	800607c <HAL_GetTick>
 8009e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e1e:	e00a      	b.n	8009e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e20:	f7fc f92c 	bl	800607c <HAL_GetTick>
 8009e24:	4602      	mov	r2, r0
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d901      	bls.n	8009e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	e04f      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e36:	4b2b      	ldr	r3, [pc, #172]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f003 020c 	and.w	r2, r3, #12
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d1eb      	bne.n	8009e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e48:	4b25      	ldr	r3, [pc, #148]	; (8009ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0307 	and.w	r3, r3, #7
 8009e50:	683a      	ldr	r2, [r7, #0]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d20c      	bcs.n	8009e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e56:	4b22      	ldr	r3, [pc, #136]	; (8009ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e58:	683a      	ldr	r2, [r7, #0]
 8009e5a:	b2d2      	uxtb	r2, r2
 8009e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e5e:	4b20      	ldr	r3, [pc, #128]	; (8009ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d001      	beq.n	8009e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e032      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 0304 	and.w	r3, r3, #4
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d008      	beq.n	8009e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e7c:	4b19      	ldr	r3, [pc, #100]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	4916      	ldr	r1, [pc, #88]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 0308 	and.w	r3, r3, #8
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d009      	beq.n	8009eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e9a:	4b12      	ldr	r3, [pc, #72]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	490e      	ldr	r1, [pc, #56]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009eae:	f000 f821 	bl	8009ef4 <HAL_RCC_GetSysClockFreq>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	4b0b      	ldr	r3, [pc, #44]	; (8009ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	091b      	lsrs	r3, r3, #4
 8009eba:	f003 030f 	and.w	r3, r3, #15
 8009ebe:	490a      	ldr	r1, [pc, #40]	; (8009ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8009ec0:	5ccb      	ldrb	r3, [r1, r3]
 8009ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ec6:	4a09      	ldr	r2, [pc, #36]	; (8009eec <HAL_RCC_ClockConfig+0x1c4>)
 8009ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009eca:	4b09      	ldr	r3, [pc, #36]	; (8009ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fc f890 	bl	8005ff4 <HAL_InitTick>

  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	40023c00 	.word	0x40023c00
 8009ee4:	40023800 	.word	0x40023800
 8009ee8:	080186d0 	.word	0x080186d0
 8009eec:	20000004 	.word	0x20000004
 8009ef0:	20000008 	.word	0x20000008

08009ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ef4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	607b      	str	r3, [r7, #4]
 8009f00:	2300      	movs	r3, #0
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	2300      	movs	r3, #0
 8009f06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f0c:	4b67      	ldr	r3, [pc, #412]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f003 030c 	and.w	r3, r3, #12
 8009f14:	2b08      	cmp	r3, #8
 8009f16:	d00d      	beq.n	8009f34 <HAL_RCC_GetSysClockFreq+0x40>
 8009f18:	2b08      	cmp	r3, #8
 8009f1a:	f200 80bd 	bhi.w	800a098 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d002      	beq.n	8009f28 <HAL_RCC_GetSysClockFreq+0x34>
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	d003      	beq.n	8009f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8009f26:	e0b7      	b.n	800a098 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f28:	4b61      	ldr	r3, [pc, #388]	; (800a0b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009f2a:	60bb      	str	r3, [r7, #8]
       break;
 8009f2c:	e0b7      	b.n	800a09e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f2e:	4b60      	ldr	r3, [pc, #384]	; (800a0b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009f30:	60bb      	str	r3, [r7, #8]
      break;
 8009f32:	e0b4      	b.n	800a09e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f34:	4b5d      	ldr	r3, [pc, #372]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f3e:	4b5b      	ldr	r3, [pc, #364]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d04d      	beq.n	8009fe6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f4a:	4b58      	ldr	r3, [pc, #352]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	099b      	lsrs	r3, r3, #6
 8009f50:	461a      	mov	r2, r3
 8009f52:	f04f 0300 	mov.w	r3, #0
 8009f56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009f5a:	f04f 0100 	mov.w	r1, #0
 8009f5e:	ea02 0800 	and.w	r8, r2, r0
 8009f62:	ea03 0901 	and.w	r9, r3, r1
 8009f66:	4640      	mov	r0, r8
 8009f68:	4649      	mov	r1, r9
 8009f6a:	f04f 0200 	mov.w	r2, #0
 8009f6e:	f04f 0300 	mov.w	r3, #0
 8009f72:	014b      	lsls	r3, r1, #5
 8009f74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009f78:	0142      	lsls	r2, r0, #5
 8009f7a:	4610      	mov	r0, r2
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	ebb0 0008 	subs.w	r0, r0, r8
 8009f82:	eb61 0109 	sbc.w	r1, r1, r9
 8009f86:	f04f 0200 	mov.w	r2, #0
 8009f8a:	f04f 0300 	mov.w	r3, #0
 8009f8e:	018b      	lsls	r3, r1, #6
 8009f90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009f94:	0182      	lsls	r2, r0, #6
 8009f96:	1a12      	subs	r2, r2, r0
 8009f98:	eb63 0301 	sbc.w	r3, r3, r1
 8009f9c:	f04f 0000 	mov.w	r0, #0
 8009fa0:	f04f 0100 	mov.w	r1, #0
 8009fa4:	00d9      	lsls	r1, r3, #3
 8009fa6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009faa:	00d0      	lsls	r0, r2, #3
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	eb12 0208 	adds.w	r2, r2, r8
 8009fb4:	eb43 0309 	adc.w	r3, r3, r9
 8009fb8:	f04f 0000 	mov.w	r0, #0
 8009fbc:	f04f 0100 	mov.w	r1, #0
 8009fc0:	0299      	lsls	r1, r3, #10
 8009fc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009fc6:	0290      	lsls	r0, r2, #10
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4610      	mov	r0, r2
 8009fce:	4619      	mov	r1, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f04f 0300 	mov.w	r3, #0
 8009fd8:	f7f6 fe56 	bl	8000c88 <__aeabi_uldivmod>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	60fb      	str	r3, [r7, #12]
 8009fe4:	e04a      	b.n	800a07c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fe6:	4b31      	ldr	r3, [pc, #196]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	099b      	lsrs	r3, r3, #6
 8009fec:	461a      	mov	r2, r3
 8009fee:	f04f 0300 	mov.w	r3, #0
 8009ff2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009ff6:	f04f 0100 	mov.w	r1, #0
 8009ffa:	ea02 0400 	and.w	r4, r2, r0
 8009ffe:	ea03 0501 	and.w	r5, r3, r1
 800a002:	4620      	mov	r0, r4
 800a004:	4629      	mov	r1, r5
 800a006:	f04f 0200 	mov.w	r2, #0
 800a00a:	f04f 0300 	mov.w	r3, #0
 800a00e:	014b      	lsls	r3, r1, #5
 800a010:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a014:	0142      	lsls	r2, r0, #5
 800a016:	4610      	mov	r0, r2
 800a018:	4619      	mov	r1, r3
 800a01a:	1b00      	subs	r0, r0, r4
 800a01c:	eb61 0105 	sbc.w	r1, r1, r5
 800a020:	f04f 0200 	mov.w	r2, #0
 800a024:	f04f 0300 	mov.w	r3, #0
 800a028:	018b      	lsls	r3, r1, #6
 800a02a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a02e:	0182      	lsls	r2, r0, #6
 800a030:	1a12      	subs	r2, r2, r0
 800a032:	eb63 0301 	sbc.w	r3, r3, r1
 800a036:	f04f 0000 	mov.w	r0, #0
 800a03a:	f04f 0100 	mov.w	r1, #0
 800a03e:	00d9      	lsls	r1, r3, #3
 800a040:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a044:	00d0      	lsls	r0, r2, #3
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	1912      	adds	r2, r2, r4
 800a04c:	eb45 0303 	adc.w	r3, r5, r3
 800a050:	f04f 0000 	mov.w	r0, #0
 800a054:	f04f 0100 	mov.w	r1, #0
 800a058:	0299      	lsls	r1, r3, #10
 800a05a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a05e:	0290      	lsls	r0, r2, #10
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4610      	mov	r0, r2
 800a066:	4619      	mov	r1, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	461a      	mov	r2, r3
 800a06c:	f04f 0300 	mov.w	r3, #0
 800a070:	f7f6 fe0a 	bl	8000c88 <__aeabi_uldivmod>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4613      	mov	r3, r2
 800a07a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a07c:	4b0b      	ldr	r3, [pc, #44]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	0c1b      	lsrs	r3, r3, #16
 800a082:	f003 0303 	and.w	r3, r3, #3
 800a086:	3301      	adds	r3, #1
 800a088:	005b      	lsls	r3, r3, #1
 800a08a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	fbb2 f3f3 	udiv	r3, r2, r3
 800a094:	60bb      	str	r3, [r7, #8]
      break;
 800a096:	e002      	b.n	800a09e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a098:	4b05      	ldr	r3, [pc, #20]	; (800a0b0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a09a:	60bb      	str	r3, [r7, #8]
      break;
 800a09c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a09e:	68bb      	ldr	r3, [r7, #8]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a0aa:	bf00      	nop
 800a0ac:	40023800 	.word	0x40023800
 800a0b0:	00f42400 	.word	0x00f42400

0800a0b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0b8:	4b03      	ldr	r3, [pc, #12]	; (800a0c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	20000004 	.word	0x20000004

0800a0cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a0d0:	f7ff fff0 	bl	800a0b4 <HAL_RCC_GetHCLKFreq>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	0a9b      	lsrs	r3, r3, #10
 800a0dc:	f003 0307 	and.w	r3, r3, #7
 800a0e0:	4903      	ldr	r1, [pc, #12]	; (800a0f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0e2:	5ccb      	ldrb	r3, [r1, r3]
 800a0e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	40023800 	.word	0x40023800
 800a0f0:	080186e0 	.word	0x080186e0

0800a0f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a0f8:	f7ff ffdc 	bl	800a0b4 <HAL_RCC_GetHCLKFreq>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	4b05      	ldr	r3, [pc, #20]	; (800a114 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	0b5b      	lsrs	r3, r3, #13
 800a104:	f003 0307 	and.w	r3, r3, #7
 800a108:	4903      	ldr	r1, [pc, #12]	; (800a118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a10a:	5ccb      	ldrb	r3, [r1, r3]
 800a10c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a110:	4618      	mov	r0, r3
 800a112:	bd80      	pop	{r7, pc}
 800a114:	40023800 	.word	0x40023800
 800a118:	080186e0 	.word	0x080186e0

0800a11c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e07b      	b.n	800a226 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a132:	2b00      	cmp	r3, #0
 800a134:	d108      	bne.n	800a148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a13e:	d009      	beq.n	800a154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	61da      	str	r2, [r3, #28]
 800a146:	e005      	b.n	800a154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7f8 ff76 	bl	8003060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2202      	movs	r2, #2
 800a178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a18a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a19c:	431a      	orrs	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1a6:	431a      	orrs	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	f003 0302 	and.w	r3, r3, #2
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	695b      	ldr	r3, [r3, #20]
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1c4:	431a      	orrs	r2, r3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	69db      	ldr	r3, [r3, #28]
 800a1ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a1b      	ldr	r3, [r3, #32]
 800a1d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d8:	ea42 0103 	orr.w	r1, r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	430a      	orrs	r2, r1
 800a1ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	0c1b      	lsrs	r3, r3, #16
 800a1f2:	f003 0104 	and.w	r1, r3, #4
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fa:	f003 0210 	and.w	r2, r3, #16
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	430a      	orrs	r2, r1
 800a204:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	69da      	ldr	r2, [r3, #28]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a214:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b08c      	sub	sp, #48	; 0x30
 800a232:	af00      	add	r7, sp, #0
 800a234:	60f8      	str	r0, [r7, #12]
 800a236:	60b9      	str	r1, [r7, #8]
 800a238:	607a      	str	r2, [r7, #4]
 800a23a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a23c:	2301      	movs	r3, #1
 800a23e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a240:	2300      	movs	r3, #0
 800a242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d101      	bne.n	800a254 <HAL_SPI_TransmitReceive+0x26>
 800a250:	2302      	movs	r3, #2
 800a252:	e18a      	b.n	800a56a <HAL_SPI_TransmitReceive+0x33c>
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a25c:	f7fb ff0e 	bl	800607c <HAL_GetTick>
 800a260:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a272:	887b      	ldrh	r3, [r7, #2]
 800a274:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a276:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d00f      	beq.n	800a29e <HAL_SPI_TransmitReceive+0x70>
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a284:	d107      	bne.n	800a296 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d103      	bne.n	800a296 <HAL_SPI_TransmitReceive+0x68>
 800a28e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a292:	2b04      	cmp	r3, #4
 800a294:	d003      	beq.n	800a29e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a296:	2302      	movs	r3, #2
 800a298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a29c:	e15b      	b.n	800a556 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d005      	beq.n	800a2b0 <HAL_SPI_TransmitReceive+0x82>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <HAL_SPI_TransmitReceive+0x82>
 800a2aa:	887b      	ldrh	r3, [r7, #2]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d103      	bne.n	800a2b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a2b6:	e14e      	b.n	800a556 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2b04      	cmp	r3, #4
 800a2c2:	d003      	beq.n	800a2cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2205      	movs	r2, #5
 800a2c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	887a      	ldrh	r2, [r7, #2]
 800a2dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	887a      	ldrh	r2, [r7, #2]
 800a2e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	887a      	ldrh	r2, [r7, #2]
 800a2ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	887a      	ldrh	r2, [r7, #2]
 800a2f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30c:	2b40      	cmp	r3, #64	; 0x40
 800a30e:	d007      	beq.n	800a320 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a31e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a328:	d178      	bne.n	800a41c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d002      	beq.n	800a338 <HAL_SPI_TransmitReceive+0x10a>
 800a332:	8b7b      	ldrh	r3, [r7, #26]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d166      	bne.n	800a406 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a33c:	881a      	ldrh	r2, [r3, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a348:	1c9a      	adds	r2, r3, #2
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a352:	b29b      	uxth	r3, r3
 800a354:	3b01      	subs	r3, #1
 800a356:	b29a      	uxth	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a35c:	e053      	b.n	800a406 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	f003 0302 	and.w	r3, r3, #2
 800a368:	2b02      	cmp	r3, #2
 800a36a:	d11b      	bne.n	800a3a4 <HAL_SPI_TransmitReceive+0x176>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a370:	b29b      	uxth	r3, r3
 800a372:	2b00      	cmp	r3, #0
 800a374:	d016      	beq.n	800a3a4 <HAL_SPI_TransmitReceive+0x176>
 800a376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d113      	bne.n	800a3a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a380:	881a      	ldrh	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38c:	1c9a      	adds	r2, r3, #2
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a396:	b29b      	uxth	r3, r3
 800a398:	3b01      	subs	r3, #1
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	f003 0301 	and.w	r3, r3, #1
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d119      	bne.n	800a3e6 <HAL_SPI_TransmitReceive+0x1b8>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d014      	beq.n	800a3e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	68da      	ldr	r2, [r3, #12]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c6:	b292      	uxth	r2, r2
 800a3c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ce:	1c9a      	adds	r2, r3, #2
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a3e6:	f7fb fe49 	bl	800607c <HAL_GetTick>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ee:	1ad3      	subs	r3, r2, r3
 800a3f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d807      	bhi.n	800a406 <HAL_SPI_TransmitReceive+0x1d8>
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3fc:	d003      	beq.n	800a406 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a404:	e0a7      	b.n	800a556 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1a6      	bne.n	800a35e <HAL_SPI_TransmitReceive+0x130>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a414:	b29b      	uxth	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1a1      	bne.n	800a35e <HAL_SPI_TransmitReceive+0x130>
 800a41a:	e07c      	b.n	800a516 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d002      	beq.n	800a42a <HAL_SPI_TransmitReceive+0x1fc>
 800a424:	8b7b      	ldrh	r3, [r7, #26]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d16b      	bne.n	800a502 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	330c      	adds	r3, #12
 800a434:	7812      	ldrb	r2, [r2, #0]
 800a436:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43c:	1c5a      	adds	r2, r3, #1
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a446:	b29b      	uxth	r3, r3
 800a448:	3b01      	subs	r3, #1
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a450:	e057      	b.n	800a502 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	f003 0302 	and.w	r3, r3, #2
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d11c      	bne.n	800a49a <HAL_SPI_TransmitReceive+0x26c>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a464:	b29b      	uxth	r3, r3
 800a466:	2b00      	cmp	r3, #0
 800a468:	d017      	beq.n	800a49a <HAL_SPI_TransmitReceive+0x26c>
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d114      	bne.n	800a49a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	330c      	adds	r3, #12
 800a47a:	7812      	ldrb	r2, [r2, #0]
 800a47c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	3b01      	subs	r3, #1
 800a490:	b29a      	uxth	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a496:	2300      	movs	r3, #0
 800a498:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d119      	bne.n	800a4dc <HAL_SPI_TransmitReceive+0x2ae>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d014      	beq.n	800a4dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68da      	ldr	r2, [r3, #12]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4bc:	b2d2      	uxtb	r2, r2
 800a4be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a4dc:	f7fb fdce 	bl	800607c <HAL_GetTick>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d803      	bhi.n	800a4f4 <HAL_SPI_TransmitReceive+0x2c6>
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f2:	d102      	bne.n	800a4fa <HAL_SPI_TransmitReceive+0x2cc>
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d103      	bne.n	800a502 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a500:	e029      	b.n	800a556 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a506:	b29b      	uxth	r3, r3
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1a2      	bne.n	800a452 <HAL_SPI_TransmitReceive+0x224>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a510:	b29b      	uxth	r3, r3
 800a512:	2b00      	cmp	r3, #0
 800a514:	d19d      	bne.n	800a452 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a518:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 f8b2 	bl	800a684 <SPI_EndRxTxTransaction>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d006      	beq.n	800a534 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2220      	movs	r2, #32
 800a530:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a532:	e010      	b.n	800a556 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10b      	bne.n	800a554 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a53c:	2300      	movs	r3, #0
 800a53e:	617b      	str	r3, [r7, #20]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	617b      	str	r3, [r7, #20]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	e000      	b.n	800a556 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a554:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a566:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3730      	adds	r7, #48	; 0x30
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
	...

0800a574 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	603b      	str	r3, [r7, #0]
 800a580:	4613      	mov	r3, r2
 800a582:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a584:	f7fb fd7a 	bl	800607c <HAL_GetTick>
 800a588:	4602      	mov	r2, r0
 800a58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a58c:	1a9b      	subs	r3, r3, r2
 800a58e:	683a      	ldr	r2, [r7, #0]
 800a590:	4413      	add	r3, r2
 800a592:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a594:	f7fb fd72 	bl	800607c <HAL_GetTick>
 800a598:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a59a:	4b39      	ldr	r3, [pc, #228]	; (800a680 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	015b      	lsls	r3, r3, #5
 800a5a0:	0d1b      	lsrs	r3, r3, #20
 800a5a2:	69fa      	ldr	r2, [r7, #28]
 800a5a4:	fb02 f303 	mul.w	r3, r2, r3
 800a5a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5aa:	e054      	b.n	800a656 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b2:	d050      	beq.n	800a656 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a5b4:	f7fb fd62 	bl	800607c <HAL_GetTick>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	1ad3      	subs	r3, r2, r3
 800a5be:	69fa      	ldr	r2, [r7, #28]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d902      	bls.n	800a5ca <SPI_WaitFlagStateUntilTimeout+0x56>
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d13d      	bne.n	800a646 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a5d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5e2:	d111      	bne.n	800a608 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ec:	d004      	beq.n	800a5f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5f6:	d107      	bne.n	800a608 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a606:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a610:	d10f      	bne.n	800a632 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a620:	601a      	str	r2, [r3, #0]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a630:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a642:	2303      	movs	r3, #3
 800a644:	e017      	b.n	800a676 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d101      	bne.n	800a650 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a64c:	2300      	movs	r3, #0
 800a64e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	3b01      	subs	r3, #1
 800a654:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689a      	ldr	r2, [r3, #8]
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	4013      	ands	r3, r2
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	429a      	cmp	r2, r3
 800a664:	bf0c      	ite	eq
 800a666:	2301      	moveq	r3, #1
 800a668:	2300      	movne	r3, #0
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	461a      	mov	r2, r3
 800a66e:	79fb      	ldrb	r3, [r7, #7]
 800a670:	429a      	cmp	r2, r3
 800a672:	d19b      	bne.n	800a5ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3720      	adds	r7, #32
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	20000004 	.word	0x20000004

0800a684 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b088      	sub	sp, #32
 800a688:	af02      	add	r7, sp, #8
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a690:	4b1b      	ldr	r3, [pc, #108]	; (800a700 <SPI_EndRxTxTransaction+0x7c>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a1b      	ldr	r2, [pc, #108]	; (800a704 <SPI_EndRxTxTransaction+0x80>)
 800a696:	fba2 2303 	umull	r2, r3, r2, r3
 800a69a:	0d5b      	lsrs	r3, r3, #21
 800a69c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6a0:	fb02 f303 	mul.w	r3, r2, r3
 800a6a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6ae:	d112      	bne.n	800a6d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	2180      	movs	r1, #128	; 0x80
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f7ff ff5a 	bl	800a574 <SPI_WaitFlagStateUntilTimeout>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d016      	beq.n	800a6f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ca:	f043 0220 	orr.w	r2, r3, #32
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	e00f      	b.n	800a6f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00a      	beq.n	800a6f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ec:	2b80      	cmp	r3, #128	; 0x80
 800a6ee:	d0f2      	beq.n	800a6d6 <SPI_EndRxTxTransaction+0x52>
 800a6f0:	e000      	b.n	800a6f4 <SPI_EndRxTxTransaction+0x70>
        break;
 800a6f2:	bf00      	nop
  }

  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3718      	adds	r7, #24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20000004 	.word	0x20000004
 800a704:	165e9f81 	.word	0x165e9f81

0800a708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e041      	b.n	800a79e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a720:	b2db      	uxtb	r3, r3
 800a722:	2b00      	cmp	r3, #0
 800a724:	d106      	bne.n	800a734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7f8 ffdc 	bl	80036ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2202      	movs	r2, #2
 800a738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	3304      	adds	r3, #4
 800a744:	4619      	mov	r1, r3
 800a746:	4610      	mov	r0, r2
 800a748:	f000 fac6 	bl	800acd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d101      	bne.n	800a7b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	e041      	b.n	800a83c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d106      	bne.n	800a7d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7f8 ff57 	bl	8003680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	f000 fa77 	bl	800acd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2201      	movs	r2, #1
 800a80e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2201      	movs	r2, #1
 800a816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d109      	bne.n	800a868 <HAL_TIM_PWM_Start+0x24>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	bf14      	ite	ne
 800a860:	2301      	movne	r3, #1
 800a862:	2300      	moveq	r3, #0
 800a864:	b2db      	uxtb	r3, r3
 800a866:	e022      	b.n	800a8ae <HAL_TIM_PWM_Start+0x6a>
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	d109      	bne.n	800a882 <HAL_TIM_PWM_Start+0x3e>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b01      	cmp	r3, #1
 800a878:	bf14      	ite	ne
 800a87a:	2301      	movne	r3, #1
 800a87c:	2300      	moveq	r3, #0
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	e015      	b.n	800a8ae <HAL_TIM_PWM_Start+0x6a>
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	2b08      	cmp	r3, #8
 800a886:	d109      	bne.n	800a89c <HAL_TIM_PWM_Start+0x58>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	2b01      	cmp	r3, #1
 800a892:	bf14      	ite	ne
 800a894:	2301      	movne	r3, #1
 800a896:	2300      	moveq	r3, #0
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	e008      	b.n	800a8ae <HAL_TIM_PWM_Start+0x6a>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	bf14      	ite	ne
 800a8a8:	2301      	movne	r3, #1
 800a8aa:	2300      	moveq	r3, #0
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e07c      	b.n	800a9b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d104      	bne.n	800a8c6 <HAL_TIM_PWM_Start+0x82>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2202      	movs	r2, #2
 800a8c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8c4:	e013      	b.n	800a8ee <HAL_TIM_PWM_Start+0xaa>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2b04      	cmp	r3, #4
 800a8ca:	d104      	bne.n	800a8d6 <HAL_TIM_PWM_Start+0x92>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8d4:	e00b      	b.n	800a8ee <HAL_TIM_PWM_Start+0xaa>
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2b08      	cmp	r3, #8
 800a8da:	d104      	bne.n	800a8e6 <HAL_TIM_PWM_Start+0xa2>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2202      	movs	r2, #2
 800a8e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8e4:	e003      	b.n	800a8ee <HAL_TIM_PWM_Start+0xaa>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2202      	movs	r2, #2
 800a8ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 fcd8 	bl	800b2ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a2d      	ldr	r2, [pc, #180]	; (800a9b8 <HAL_TIM_PWM_Start+0x174>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d004      	beq.n	800a910 <HAL_TIM_PWM_Start+0xcc>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a2c      	ldr	r2, [pc, #176]	; (800a9bc <HAL_TIM_PWM_Start+0x178>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d101      	bne.n	800a914 <HAL_TIM_PWM_Start+0xd0>
 800a910:	2301      	movs	r3, #1
 800a912:	e000      	b.n	800a916 <HAL_TIM_PWM_Start+0xd2>
 800a914:	2300      	movs	r3, #0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d007      	beq.n	800a92a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a928:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a22      	ldr	r2, [pc, #136]	; (800a9b8 <HAL_TIM_PWM_Start+0x174>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d022      	beq.n	800a97a <HAL_TIM_PWM_Start+0x136>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a93c:	d01d      	beq.n	800a97a <HAL_TIM_PWM_Start+0x136>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a1f      	ldr	r2, [pc, #124]	; (800a9c0 <HAL_TIM_PWM_Start+0x17c>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d018      	beq.n	800a97a <HAL_TIM_PWM_Start+0x136>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a1d      	ldr	r2, [pc, #116]	; (800a9c4 <HAL_TIM_PWM_Start+0x180>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d013      	beq.n	800a97a <HAL_TIM_PWM_Start+0x136>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a1c      	ldr	r2, [pc, #112]	; (800a9c8 <HAL_TIM_PWM_Start+0x184>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d00e      	beq.n	800a97a <HAL_TIM_PWM_Start+0x136>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a16      	ldr	r2, [pc, #88]	; (800a9bc <HAL_TIM_PWM_Start+0x178>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d009      	beq.n	800a97a <HAL_TIM_PWM_Start+0x136>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a18      	ldr	r2, [pc, #96]	; (800a9cc <HAL_TIM_PWM_Start+0x188>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d004      	beq.n	800a97a <HAL_TIM_PWM_Start+0x136>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a16      	ldr	r2, [pc, #88]	; (800a9d0 <HAL_TIM_PWM_Start+0x18c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d111      	bne.n	800a99e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	f003 0307 	and.w	r3, r3, #7
 800a984:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2b06      	cmp	r3, #6
 800a98a:	d010      	beq.n	800a9ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f042 0201 	orr.w	r2, r2, #1
 800a99a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a99c:	e007      	b.n	800a9ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f042 0201 	orr.w	r2, r2, #1
 800a9ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	40010000 	.word	0x40010000
 800a9bc:	40010400 	.word	0x40010400
 800a9c0:	40000400 	.word	0x40000400
 800a9c4:	40000800 	.word	0x40000800
 800a9c8:	40000c00 	.word	0x40000c00
 800a9cc:	40014000 	.word	0x40014000
 800a9d0:	40001800 	.word	0x40001800

0800a9d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d101      	bne.n	800a9ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a9ea:	2302      	movs	r3, #2
 800a9ec:	e0ac      	b.n	800ab48 <HAL_TIM_PWM_ConfigChannel+0x174>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2b0c      	cmp	r3, #12
 800a9fa:	f200 809f 	bhi.w	800ab3c <HAL_TIM_PWM_ConfigChannel+0x168>
 800a9fe:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800aa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa04:	0800aa39 	.word	0x0800aa39
 800aa08:	0800ab3d 	.word	0x0800ab3d
 800aa0c:	0800ab3d 	.word	0x0800ab3d
 800aa10:	0800ab3d 	.word	0x0800ab3d
 800aa14:	0800aa79 	.word	0x0800aa79
 800aa18:	0800ab3d 	.word	0x0800ab3d
 800aa1c:	0800ab3d 	.word	0x0800ab3d
 800aa20:	0800ab3d 	.word	0x0800ab3d
 800aa24:	0800aabb 	.word	0x0800aabb
 800aa28:	0800ab3d 	.word	0x0800ab3d
 800aa2c:	0800ab3d 	.word	0x0800ab3d
 800aa30:	0800ab3d 	.word	0x0800ab3d
 800aa34:	0800aafb 	.word	0x0800aafb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68b9      	ldr	r1, [r7, #8]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f000 f9ea 	bl	800ae18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	699a      	ldr	r2, [r3, #24]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f042 0208 	orr.w	r2, r2, #8
 800aa52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	699a      	ldr	r2, [r3, #24]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f022 0204 	bic.w	r2, r2, #4
 800aa62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6999      	ldr	r1, [r3, #24]
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	691a      	ldr	r2, [r3, #16]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	430a      	orrs	r2, r1
 800aa74:	619a      	str	r2, [r3, #24]
      break;
 800aa76:	e062      	b.n	800ab3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68b9      	ldr	r1, [r7, #8]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 fa3a 	bl	800aef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	699a      	ldr	r2, [r3, #24]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	699a      	ldr	r2, [r3, #24]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aaa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	6999      	ldr	r1, [r3, #24]
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	021a      	lsls	r2, r3, #8
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	430a      	orrs	r2, r1
 800aab6:	619a      	str	r2, [r3, #24]
      break;
 800aab8:	e041      	b.n	800ab3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68b9      	ldr	r1, [r7, #8]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 fa8f 	bl	800afe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	69da      	ldr	r2, [r3, #28]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f042 0208 	orr.w	r2, r2, #8
 800aad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	69da      	ldr	r2, [r3, #28]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f022 0204 	bic.w	r2, r2, #4
 800aae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	69d9      	ldr	r1, [r3, #28]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	691a      	ldr	r2, [r3, #16]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	430a      	orrs	r2, r1
 800aaf6:	61da      	str	r2, [r3, #28]
      break;
 800aaf8:	e021      	b.n	800ab3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	68b9      	ldr	r1, [r7, #8]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 fae3 	bl	800b0cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	69da      	ldr	r2, [r3, #28]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	69da      	ldr	r2, [r3, #28]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	69d9      	ldr	r1, [r3, #28]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	021a      	lsls	r2, r3, #8
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	430a      	orrs	r2, r1
 800ab38:	61da      	str	r2, [r3, #28]
      break;
 800ab3a:	e000      	b.n	800ab3e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800ab3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d101      	bne.n	800ab68 <HAL_TIM_ConfigClockSource+0x18>
 800ab64:	2302      	movs	r3, #2
 800ab66:	e0b3      	b.n	800acd0 <HAL_TIM_ConfigClockSource+0x180>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2202      	movs	r2, #2
 800ab74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aba0:	d03e      	beq.n	800ac20 <HAL_TIM_ConfigClockSource+0xd0>
 800aba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aba6:	f200 8087 	bhi.w	800acb8 <HAL_TIM_ConfigClockSource+0x168>
 800abaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abae:	f000 8085 	beq.w	800acbc <HAL_TIM_ConfigClockSource+0x16c>
 800abb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abb6:	d87f      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x168>
 800abb8:	2b70      	cmp	r3, #112	; 0x70
 800abba:	d01a      	beq.n	800abf2 <HAL_TIM_ConfigClockSource+0xa2>
 800abbc:	2b70      	cmp	r3, #112	; 0x70
 800abbe:	d87b      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x168>
 800abc0:	2b60      	cmp	r3, #96	; 0x60
 800abc2:	d050      	beq.n	800ac66 <HAL_TIM_ConfigClockSource+0x116>
 800abc4:	2b60      	cmp	r3, #96	; 0x60
 800abc6:	d877      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x168>
 800abc8:	2b50      	cmp	r3, #80	; 0x50
 800abca:	d03c      	beq.n	800ac46 <HAL_TIM_ConfigClockSource+0xf6>
 800abcc:	2b50      	cmp	r3, #80	; 0x50
 800abce:	d873      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x168>
 800abd0:	2b40      	cmp	r3, #64	; 0x40
 800abd2:	d058      	beq.n	800ac86 <HAL_TIM_ConfigClockSource+0x136>
 800abd4:	2b40      	cmp	r3, #64	; 0x40
 800abd6:	d86f      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x168>
 800abd8:	2b30      	cmp	r3, #48	; 0x30
 800abda:	d064      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0x156>
 800abdc:	2b30      	cmp	r3, #48	; 0x30
 800abde:	d86b      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x168>
 800abe0:	2b20      	cmp	r3, #32
 800abe2:	d060      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0x156>
 800abe4:	2b20      	cmp	r3, #32
 800abe6:	d867      	bhi.n	800acb8 <HAL_TIM_ConfigClockSource+0x168>
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d05c      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0x156>
 800abec:	2b10      	cmp	r3, #16
 800abee:	d05a      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800abf0:	e062      	b.n	800acb8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6818      	ldr	r0, [r3, #0]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	6899      	ldr	r1, [r3, #8]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	685a      	ldr	r2, [r3, #4]
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	f000 fb33 	bl	800b26c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac14:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	609a      	str	r2, [r3, #8]
      break;
 800ac1e:	e04e      	b.n	800acbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	6899      	ldr	r1, [r3, #8]
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	f000 fb1c 	bl	800b26c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	689a      	ldr	r2, [r3, #8]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac42:	609a      	str	r2, [r3, #8]
      break;
 800ac44:	e03b      	b.n	800acbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	6859      	ldr	r1, [r3, #4]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	461a      	mov	r2, r3
 800ac54:	f000 fa90 	bl	800b178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2150      	movs	r1, #80	; 0x50
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 fae9 	bl	800b236 <TIM_ITRx_SetConfig>
      break;
 800ac64:	e02b      	b.n	800acbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6818      	ldr	r0, [r3, #0]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	6859      	ldr	r1, [r3, #4]
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	461a      	mov	r2, r3
 800ac74:	f000 faaf 	bl	800b1d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2160      	movs	r1, #96	; 0x60
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f000 fad9 	bl	800b236 <TIM_ITRx_SetConfig>
      break;
 800ac84:	e01b      	b.n	800acbe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6818      	ldr	r0, [r3, #0]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	6859      	ldr	r1, [r3, #4]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	461a      	mov	r2, r3
 800ac94:	f000 fa70 	bl	800b178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2140      	movs	r1, #64	; 0x40
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 fac9 	bl	800b236 <TIM_ITRx_SetConfig>
      break;
 800aca4:	e00b      	b.n	800acbe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4619      	mov	r1, r3
 800acb0:	4610      	mov	r0, r2
 800acb2:	f000 fac0 	bl	800b236 <TIM_ITRx_SetConfig>
        break;
 800acb6:	e002      	b.n	800acbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800acb8:	bf00      	nop
 800acba:	e000      	b.n	800acbe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800acbc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800acd8:	b480      	push	{r7}
 800acda:	b085      	sub	sp, #20
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a40      	ldr	r2, [pc, #256]	; (800adec <TIM_Base_SetConfig+0x114>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d013      	beq.n	800ad18 <TIM_Base_SetConfig+0x40>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf6:	d00f      	beq.n	800ad18 <TIM_Base_SetConfig+0x40>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a3d      	ldr	r2, [pc, #244]	; (800adf0 <TIM_Base_SetConfig+0x118>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d00b      	beq.n	800ad18 <TIM_Base_SetConfig+0x40>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a3c      	ldr	r2, [pc, #240]	; (800adf4 <TIM_Base_SetConfig+0x11c>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d007      	beq.n	800ad18 <TIM_Base_SetConfig+0x40>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a3b      	ldr	r2, [pc, #236]	; (800adf8 <TIM_Base_SetConfig+0x120>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d003      	beq.n	800ad18 <TIM_Base_SetConfig+0x40>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a3a      	ldr	r2, [pc, #232]	; (800adfc <TIM_Base_SetConfig+0x124>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d108      	bne.n	800ad2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	4a2f      	ldr	r2, [pc, #188]	; (800adec <TIM_Base_SetConfig+0x114>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d02b      	beq.n	800ad8a <TIM_Base_SetConfig+0xb2>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad38:	d027      	beq.n	800ad8a <TIM_Base_SetConfig+0xb2>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a2c      	ldr	r2, [pc, #176]	; (800adf0 <TIM_Base_SetConfig+0x118>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d023      	beq.n	800ad8a <TIM_Base_SetConfig+0xb2>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a2b      	ldr	r2, [pc, #172]	; (800adf4 <TIM_Base_SetConfig+0x11c>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d01f      	beq.n	800ad8a <TIM_Base_SetConfig+0xb2>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a2a      	ldr	r2, [pc, #168]	; (800adf8 <TIM_Base_SetConfig+0x120>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d01b      	beq.n	800ad8a <TIM_Base_SetConfig+0xb2>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a29      	ldr	r2, [pc, #164]	; (800adfc <TIM_Base_SetConfig+0x124>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d017      	beq.n	800ad8a <TIM_Base_SetConfig+0xb2>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a28      	ldr	r2, [pc, #160]	; (800ae00 <TIM_Base_SetConfig+0x128>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d013      	beq.n	800ad8a <TIM_Base_SetConfig+0xb2>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a27      	ldr	r2, [pc, #156]	; (800ae04 <TIM_Base_SetConfig+0x12c>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d00f      	beq.n	800ad8a <TIM_Base_SetConfig+0xb2>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a26      	ldr	r2, [pc, #152]	; (800ae08 <TIM_Base_SetConfig+0x130>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d00b      	beq.n	800ad8a <TIM_Base_SetConfig+0xb2>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a25      	ldr	r2, [pc, #148]	; (800ae0c <TIM_Base_SetConfig+0x134>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d007      	beq.n	800ad8a <TIM_Base_SetConfig+0xb2>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a24      	ldr	r2, [pc, #144]	; (800ae10 <TIM_Base_SetConfig+0x138>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d003      	beq.n	800ad8a <TIM_Base_SetConfig+0xb2>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a23      	ldr	r2, [pc, #140]	; (800ae14 <TIM_Base_SetConfig+0x13c>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d108      	bne.n	800ad9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	695b      	ldr	r3, [r3, #20]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a0a      	ldr	r2, [pc, #40]	; (800adec <TIM_Base_SetConfig+0x114>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d003      	beq.n	800add0 <TIM_Base_SetConfig+0xf8>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a0c      	ldr	r2, [pc, #48]	; (800adfc <TIM_Base_SetConfig+0x124>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d103      	bne.n	800add8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	691a      	ldr	r2, [r3, #16]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	615a      	str	r2, [r3, #20]
}
 800adde:	bf00      	nop
 800ade0:	3714      	adds	r7, #20
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	40010000 	.word	0x40010000
 800adf0:	40000400 	.word	0x40000400
 800adf4:	40000800 	.word	0x40000800
 800adf8:	40000c00 	.word	0x40000c00
 800adfc:	40010400 	.word	0x40010400
 800ae00:	40014000 	.word	0x40014000
 800ae04:	40014400 	.word	0x40014400
 800ae08:	40014800 	.word	0x40014800
 800ae0c:	40001800 	.word	0x40001800
 800ae10:	40001c00 	.word	0x40001c00
 800ae14:	40002000 	.word	0x40002000

0800ae18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b087      	sub	sp, #28
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	f023 0201 	bic.w	r2, r3, #1
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f023 0303 	bic.w	r3, r3, #3
 800ae4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f023 0302 	bic.w	r3, r3, #2
 800ae60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a20      	ldr	r2, [pc, #128]	; (800aef0 <TIM_OC1_SetConfig+0xd8>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d003      	beq.n	800ae7c <TIM_OC1_SetConfig+0x64>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a1f      	ldr	r2, [pc, #124]	; (800aef4 <TIM_OC1_SetConfig+0xdc>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d10c      	bne.n	800ae96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	f023 0308 	bic.w	r3, r3, #8
 800ae82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f023 0304 	bic.w	r3, r3, #4
 800ae94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a15      	ldr	r2, [pc, #84]	; (800aef0 <TIM_OC1_SetConfig+0xd8>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d003      	beq.n	800aea6 <TIM_OC1_SetConfig+0x8e>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a14      	ldr	r2, [pc, #80]	; (800aef4 <TIM_OC1_SetConfig+0xdc>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d111      	bne.n	800aeca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aeac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aeb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	695b      	ldr	r3, [r3, #20]
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	693a      	ldr	r2, [r7, #16]
 800aece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	685a      	ldr	r2, [r3, #4]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	697a      	ldr	r2, [r7, #20]
 800aee2:	621a      	str	r2, [r3, #32]
}
 800aee4:	bf00      	nop
 800aee6:	371c      	adds	r7, #28
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	40010000 	.word	0x40010000
 800aef4:	40010400 	.word	0x40010400

0800aef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	f023 0210 	bic.w	r2, r3, #16
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	699b      	ldr	r3, [r3, #24]
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	021b      	lsls	r3, r3, #8
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	4313      	orrs	r3, r2
 800af3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	f023 0320 	bic.w	r3, r3, #32
 800af42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	011b      	lsls	r3, r3, #4
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a22      	ldr	r2, [pc, #136]	; (800afdc <TIM_OC2_SetConfig+0xe4>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d003      	beq.n	800af60 <TIM_OC2_SetConfig+0x68>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a21      	ldr	r2, [pc, #132]	; (800afe0 <TIM_OC2_SetConfig+0xe8>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d10d      	bne.n	800af7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	011b      	lsls	r3, r3, #4
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	4313      	orrs	r3, r2
 800af72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a17      	ldr	r2, [pc, #92]	; (800afdc <TIM_OC2_SetConfig+0xe4>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d003      	beq.n	800af8c <TIM_OC2_SetConfig+0x94>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a16      	ldr	r2, [pc, #88]	; (800afe0 <TIM_OC2_SetConfig+0xe8>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d113      	bne.n	800afb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	695b      	ldr	r3, [r3, #20]
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	693a      	ldr	r2, [r7, #16]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	621a      	str	r2, [r3, #32]
}
 800afce:	bf00      	nop
 800afd0:	371c      	adds	r7, #28
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	40010000 	.word	0x40010000
 800afe0:	40010400 	.word	0x40010400

0800afe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b087      	sub	sp, #28
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a1b      	ldr	r3, [r3, #32]
 800aff2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	69db      	ldr	r3, [r3, #28]
 800b00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f023 0303 	bic.w	r3, r3, #3
 800b01a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	4313      	orrs	r3, r2
 800b024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b02c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	021b      	lsls	r3, r3, #8
 800b034:	697a      	ldr	r2, [r7, #20]
 800b036:	4313      	orrs	r3, r2
 800b038:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a21      	ldr	r2, [pc, #132]	; (800b0c4 <TIM_OC3_SetConfig+0xe0>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d003      	beq.n	800b04a <TIM_OC3_SetConfig+0x66>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4a20      	ldr	r2, [pc, #128]	; (800b0c8 <TIM_OC3_SetConfig+0xe4>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d10d      	bne.n	800b066 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	021b      	lsls	r3, r3, #8
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a16      	ldr	r2, [pc, #88]	; (800b0c4 <TIM_OC3_SetConfig+0xe0>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d003      	beq.n	800b076 <TIM_OC3_SetConfig+0x92>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a15      	ldr	r2, [pc, #84]	; (800b0c8 <TIM_OC3_SetConfig+0xe4>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d113      	bne.n	800b09e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b07c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	011b      	lsls	r3, r3, #4
 800b08c:	693a      	ldr	r2, [r7, #16]
 800b08e:	4313      	orrs	r3, r2
 800b090:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	011b      	lsls	r3, r3, #4
 800b098:	693a      	ldr	r2, [r7, #16]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	685a      	ldr	r2, [r3, #4]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	697a      	ldr	r2, [r7, #20]
 800b0b6:	621a      	str	r2, [r3, #32]
}
 800b0b8:	bf00      	nop
 800b0ba:	371c      	adds	r7, #28
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	40010000 	.word	0x40010000
 800b0c8:	40010400 	.word	0x40010400

0800b0cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b087      	sub	sp, #28
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a1b      	ldr	r3, [r3, #32]
 800b0da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a1b      	ldr	r3, [r3, #32]
 800b0e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	69db      	ldr	r3, [r3, #28]
 800b0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	021b      	lsls	r3, r3, #8
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	031b      	lsls	r3, r3, #12
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	4313      	orrs	r3, r2
 800b122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4a12      	ldr	r2, [pc, #72]	; (800b170 <TIM_OC4_SetConfig+0xa4>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d003      	beq.n	800b134 <TIM_OC4_SetConfig+0x68>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a11      	ldr	r2, [pc, #68]	; (800b174 <TIM_OC4_SetConfig+0xa8>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d109      	bne.n	800b148 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b13a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	019b      	lsls	r3, r3, #6
 800b142:	697a      	ldr	r2, [r7, #20]
 800b144:	4313      	orrs	r3, r2
 800b146:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	685a      	ldr	r2, [r3, #4]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	621a      	str	r2, [r3, #32]
}
 800b162:	bf00      	nop
 800b164:	371c      	adds	r7, #28
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	40010000 	.word	0x40010000
 800b174:	40010400 	.word	0x40010400

0800b178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b178:	b480      	push	{r7}
 800b17a:	b087      	sub	sp, #28
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6a1b      	ldr	r3, [r3, #32]
 800b188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	f023 0201 	bic.w	r2, r3, #1
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	011b      	lsls	r3, r3, #4
 800b1a8:	693a      	ldr	r2, [r7, #16]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	f023 030a 	bic.w	r3, r3, #10
 800b1b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b1b6:	697a      	ldr	r2, [r7, #20]
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	621a      	str	r2, [r3, #32]
}
 800b1ca:	bf00      	nop
 800b1cc:	371c      	adds	r7, #28
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b087      	sub	sp, #28
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	60f8      	str	r0, [r7, #12]
 800b1de:	60b9      	str	r1, [r7, #8]
 800b1e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	f023 0210 	bic.w	r2, r3, #16
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	699b      	ldr	r3, [r3, #24]
 800b1f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6a1b      	ldr	r3, [r3, #32]
 800b1f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b200:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	031b      	lsls	r3, r3, #12
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	4313      	orrs	r3, r2
 800b20a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b212:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	011b      	lsls	r3, r3, #4
 800b218:	693a      	ldr	r2, [r7, #16]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	697a      	ldr	r2, [r7, #20]
 800b222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	621a      	str	r2, [r3, #32]
}
 800b22a:	bf00      	nop
 800b22c:	371c      	adds	r7, #28
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b236:	b480      	push	{r7}
 800b238:	b085      	sub	sp, #20
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b24c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	4313      	orrs	r3, r2
 800b254:	f043 0307 	orr.w	r3, r3, #7
 800b258:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	609a      	str	r2, [r3, #8]
}
 800b260:	bf00      	nop
 800b262:	3714      	adds	r7, #20
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b087      	sub	sp, #28
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	607a      	str	r2, [r7, #4]
 800b278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	021a      	lsls	r2, r3, #8
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	431a      	orrs	r2, r3
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	4313      	orrs	r3, r2
 800b294:	697a      	ldr	r2, [r7, #20]
 800b296:	4313      	orrs	r3, r2
 800b298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	697a      	ldr	r2, [r7, #20]
 800b29e:	609a      	str	r2, [r3, #8]
}
 800b2a0:	bf00      	nop
 800b2a2:	371c      	adds	r7, #28
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	f003 031f 	and.w	r3, r3, #31
 800b2be:	2201      	movs	r2, #1
 800b2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6a1a      	ldr	r2, [r3, #32]
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	43db      	mvns	r3, r3
 800b2ce:	401a      	ands	r2, r3
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6a1a      	ldr	r2, [r3, #32]
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	f003 031f 	and.w	r3, r3, #31
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2e4:	431a      	orrs	r2, r3
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	621a      	str	r2, [r3, #32]
}
 800b2ea:	bf00      	nop
 800b2ec:	371c      	adds	r7, #28
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
	...

0800b2f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d101      	bne.n	800b310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b30c:	2302      	movs	r3, #2
 800b30e:	e05a      	b.n	800b3c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2202      	movs	r2, #2
 800b31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	4313      	orrs	r3, r2
 800b340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a21      	ldr	r2, [pc, #132]	; (800b3d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d022      	beq.n	800b39a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b35c:	d01d      	beq.n	800b39a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a1d      	ldr	r2, [pc, #116]	; (800b3d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d018      	beq.n	800b39a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a1b      	ldr	r2, [pc, #108]	; (800b3dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d013      	beq.n	800b39a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a1a      	ldr	r2, [pc, #104]	; (800b3e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d00e      	beq.n	800b39a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a18      	ldr	r2, [pc, #96]	; (800b3e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d009      	beq.n	800b39a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a17      	ldr	r2, [pc, #92]	; (800b3e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d004      	beq.n	800b39a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a15      	ldr	r2, [pc, #84]	; (800b3ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d10c      	bne.n	800b3b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	40010000 	.word	0x40010000
 800b3d8:	40000400 	.word	0x40000400
 800b3dc:	40000800 	.word	0x40000800
 800b3e0:	40000c00 	.word	0x40000c00
 800b3e4:	40010400 	.word	0x40010400
 800b3e8:	40014000 	.word	0x40014000
 800b3ec:	40001800 	.word	0x40001800

0800b3f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d101      	bne.n	800b402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e03f      	b.n	800b482 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d106      	bne.n	800b41c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7f8 fb02 	bl	8003a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2224      	movs	r2, #36	; 0x24
 800b420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68da      	ldr	r2, [r3, #12]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fddf 	bl	800bff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	691a      	ldr	r2, [r3, #16]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	695a      	ldr	r2, [r3, #20]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	68da      	ldr	r2, [r3, #12]
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2220      	movs	r2, #32
 800b474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2220      	movs	r2, #32
 800b47c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b08a      	sub	sp, #40	; 0x28
 800b48e:	af02      	add	r7, sp, #8
 800b490:	60f8      	str	r0, [r7, #12]
 800b492:	60b9      	str	r1, [r7, #8]
 800b494:	603b      	str	r3, [r7, #0]
 800b496:	4613      	mov	r3, r2
 800b498:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b49a:	2300      	movs	r3, #0
 800b49c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b20      	cmp	r3, #32
 800b4a8:	d17c      	bne.n	800b5a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d002      	beq.n	800b4b6 <HAL_UART_Transmit+0x2c>
 800b4b0:	88fb      	ldrh	r3, [r7, #6]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d101      	bne.n	800b4ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e075      	b.n	800b5a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d101      	bne.n	800b4c8 <HAL_UART_Transmit+0x3e>
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	e06e      	b.n	800b5a6 <HAL_UART_Transmit+0x11c>
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2221      	movs	r2, #33	; 0x21
 800b4da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b4de:	f7fa fdcd 	bl	800607c <HAL_GetTick>
 800b4e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	88fa      	ldrh	r2, [r7, #6]
 800b4e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	88fa      	ldrh	r2, [r7, #6]
 800b4ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4f8:	d108      	bne.n	800b50c <HAL_UART_Transmit+0x82>
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d104      	bne.n	800b50c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b502:	2300      	movs	r3, #0
 800b504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	61bb      	str	r3, [r7, #24]
 800b50a:	e003      	b.n	800b514 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b510:	2300      	movs	r3, #0
 800b512:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b51c:	e02a      	b.n	800b574 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	2200      	movs	r2, #0
 800b526:	2180      	movs	r1, #128	; 0x80
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f000 fb27 	bl	800bb7c <UART_WaitOnFlagUntilTimeout>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d001      	beq.n	800b538 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b534:	2303      	movs	r3, #3
 800b536:	e036      	b.n	800b5a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10b      	bne.n	800b556 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	881b      	ldrh	r3, [r3, #0]
 800b542:	461a      	mov	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b54c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	3302      	adds	r3, #2
 800b552:	61bb      	str	r3, [r7, #24]
 800b554:	e007      	b.n	800b566 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	781a      	ldrb	r2, [r3, #0]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	3301      	adds	r3, #1
 800b564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	3b01      	subs	r3, #1
 800b56e:	b29a      	uxth	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b578:	b29b      	uxth	r3, r3
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1cf      	bne.n	800b51e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	2200      	movs	r2, #0
 800b586:	2140      	movs	r1, #64	; 0x40
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 faf7 	bl	800bb7c <UART_WaitOnFlagUntilTimeout>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b594:	2303      	movs	r3, #3
 800b596:	e006      	b.n	800b5a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2220      	movs	r2, #32
 800b59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	e000      	b.n	800b5a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b5a4:	2302      	movs	r3, #2
  }
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3720      	adds	r7, #32
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b084      	sub	sp, #16
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	60f8      	str	r0, [r7, #12]
 800b5b6:	60b9      	str	r1, [r7, #8]
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	2b20      	cmp	r3, #32
 800b5c6:	d11d      	bne.n	800b604 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <HAL_UART_Receive_IT+0x26>
 800b5ce:	88fb      	ldrh	r3, [r7, #6]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e016      	b.n	800b606 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d101      	bne.n	800b5e6 <HAL_UART_Receive_IT+0x38>
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	e00f      	b.n	800b606 <HAL_UART_Receive_IT+0x58>
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800b5f4:	88fb      	ldrh	r3, [r7, #6]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	68b9      	ldr	r1, [r7, #8]
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f000 fb08 	bl	800bc10 <UART_Start_Receive_IT>
 800b600:	4603      	mov	r3, r0
 800b602:	e000      	b.n	800b606 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b604:	2302      	movs	r3, #2
  }
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b084      	sub	sp, #16
 800b612:	af00      	add	r7, sp, #0
 800b614:	60f8      	str	r0, [r7, #12]
 800b616:	60b9      	str	r1, [r7, #8]
 800b618:	4613      	mov	r3, r2
 800b61a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2b20      	cmp	r3, #32
 800b626:	d11d      	bne.n	800b664 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d002      	beq.n	800b634 <HAL_UART_Receive_DMA+0x26>
 800b62e:	88fb      	ldrh	r3, [r7, #6]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d101      	bne.n	800b638 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b634:	2301      	movs	r3, #1
 800b636:	e016      	b.n	800b666 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d101      	bne.n	800b646 <HAL_UART_Receive_DMA+0x38>
 800b642:	2302      	movs	r3, #2
 800b644:	e00f      	b.n	800b666 <HAL_UART_Receive_DMA+0x58>
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2201      	movs	r2, #1
 800b64a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800b654:	88fb      	ldrh	r3, [r7, #6]
 800b656:	461a      	mov	r2, r3
 800b658:	68b9      	ldr	r1, [r7, #8]
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f000 fb12 	bl	800bc84 <UART_Start_Receive_DMA>
 800b660:	4603      	mov	r3, r0
 800b662:	e000      	b.n	800b666 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b664:	2302      	movs	r3, #2
  }
}
 800b666:	4618      	mov	r0, r3
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
	...

0800b670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b08a      	sub	sp, #40	; 0x28
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	695b      	ldr	r3, [r3, #20]
 800b68e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800b690:	2300      	movs	r3, #0
 800b692:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800b694:	2300      	movs	r3, #0
 800b696:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	f003 030f 	and.w	r3, r3, #15
 800b69e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10d      	bne.n	800b6c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a8:	f003 0320 	and.w	r3, r3, #32
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d008      	beq.n	800b6c2 <HAL_UART_IRQHandler+0x52>
 800b6b0:	6a3b      	ldr	r3, [r7, #32]
 800b6b2:	f003 0320 	and.w	r3, r3, #32
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d003      	beq.n	800b6c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 fc05 	bl	800beca <UART_Receive_IT>
      return;
 800b6c0:	e17c      	b.n	800b9bc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 80b1 	beq.w	800b82c <HAL_UART_IRQHandler+0x1bc>
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	f003 0301 	and.w	r3, r3, #1
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d105      	bne.n	800b6e0 <HAL_UART_IRQHandler+0x70>
 800b6d4:	6a3b      	ldr	r3, [r7, #32]
 800b6d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f000 80a6 	beq.w	800b82c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	f003 0301 	and.w	r3, r3, #1
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00a      	beq.n	800b700 <HAL_UART_IRQHandler+0x90>
 800b6ea:	6a3b      	ldr	r3, [r7, #32]
 800b6ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d005      	beq.n	800b700 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f8:	f043 0201 	orr.w	r2, r3, #1
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b702:	f003 0304 	and.w	r3, r3, #4
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00a      	beq.n	800b720 <HAL_UART_IRQHandler+0xb0>
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	f003 0301 	and.w	r3, r3, #1
 800b710:	2b00      	cmp	r3, #0
 800b712:	d005      	beq.n	800b720 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b718:	f043 0202 	orr.w	r2, r3, #2
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	f003 0302 	and.w	r3, r3, #2
 800b726:	2b00      	cmp	r3, #0
 800b728:	d00a      	beq.n	800b740 <HAL_UART_IRQHandler+0xd0>
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	f003 0301 	and.w	r3, r3, #1
 800b730:	2b00      	cmp	r3, #0
 800b732:	d005      	beq.n	800b740 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b738:	f043 0204 	orr.w	r2, r3, #4
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b742:	f003 0308 	and.w	r3, r3, #8
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00f      	beq.n	800b76a <HAL_UART_IRQHandler+0xfa>
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	f003 0320 	and.w	r3, r3, #32
 800b750:	2b00      	cmp	r3, #0
 800b752:	d104      	bne.n	800b75e <HAL_UART_IRQHandler+0xee>
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	f003 0301 	and.w	r3, r3, #1
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d005      	beq.n	800b76a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b762:	f043 0208 	orr.w	r2, r3, #8
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 811f 	beq.w	800b9b2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b776:	f003 0320 	and.w	r3, r3, #32
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d007      	beq.n	800b78e <HAL_UART_IRQHandler+0x11e>
 800b77e:	6a3b      	ldr	r3, [r7, #32]
 800b780:	f003 0320 	and.w	r3, r3, #32
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 fb9e 	bl	800beca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b798:	2b40      	cmp	r3, #64	; 0x40
 800b79a:	bf0c      	ite	eq
 800b79c:	2301      	moveq	r3, #1
 800b79e:	2300      	movne	r3, #0
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a8:	f003 0308 	and.w	r3, r3, #8
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d102      	bne.n	800b7b6 <HAL_UART_IRQHandler+0x146>
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d031      	beq.n	800b81a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 fade 	bl	800bd78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	695b      	ldr	r3, [r3, #20]
 800b7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7c6:	2b40      	cmp	r3, #64	; 0x40
 800b7c8:	d123      	bne.n	800b812 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	695a      	ldr	r2, [r3, #20]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d013      	beq.n	800b80a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e6:	4a77      	ldr	r2, [pc, #476]	; (800b9c4 <HAL_UART_IRQHandler+0x354>)
 800b7e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fb fac8 	bl	8006d84 <HAL_DMA_Abort_IT>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d016      	beq.n	800b828 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b804:	4610      	mov	r0, r2
 800b806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b808:	e00e      	b.n	800b828 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 f8f0 	bl	800b9f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b810:	e00a      	b.n	800b828 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 f8ec 	bl	800b9f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b818:	e006      	b.n	800b828 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f8e8 	bl	800b9f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2200      	movs	r2, #0
 800b824:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b826:	e0c4      	b.n	800b9b2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b828:	bf00      	nop
    return;
 800b82a:	e0c2      	b.n	800b9b2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b830:	2b01      	cmp	r3, #1
 800b832:	f040 80a2 	bne.w	800b97a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b838:	f003 0310 	and.w	r3, r3, #16
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f000 809c 	beq.w	800b97a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b842:	6a3b      	ldr	r3, [r7, #32]
 800b844:	f003 0310 	and.w	r3, r3, #16
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f000 8096 	beq.w	800b97a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b84e:	2300      	movs	r3, #0
 800b850:	60fb      	str	r3, [r7, #12]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	60fb      	str	r3, [r7, #12]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	685b      	ldr	r3, [r3, #4]
 800b860:	60fb      	str	r3, [r7, #12]
 800b862:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	695b      	ldr	r3, [r3, #20]
 800b86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b86e:	2b40      	cmp	r3, #64	; 0x40
 800b870:	d14f      	bne.n	800b912 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800b87c:	8a3b      	ldrh	r3, [r7, #16]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f000 8099 	beq.w	800b9b6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b888:	8a3a      	ldrh	r2, [r7, #16]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	f080 8093 	bcs.w	800b9b6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	8a3a      	ldrh	r2, [r7, #16]
 800b894:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89a:	69db      	ldr	r3, [r3, #28]
 800b89c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a0:	d02b      	beq.n	800b8fa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68da      	ldr	r2, [r3, #12]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8b0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	695a      	ldr	r2, [r3, #20]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f022 0201 	bic.w	r2, r2, #1
 800b8c0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	695a      	ldr	r2, [r3, #20]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8d0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2220      	movs	r2, #32
 800b8d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68da      	ldr	r2, [r3, #12]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f022 0210 	bic.w	r2, r2, #16
 800b8ee:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7fb f9d5 	bl	8006ca4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b902:	b29b      	uxth	r3, r3
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	b29b      	uxth	r3, r3
 800b908:	4619      	mov	r1, r3
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f87a 	bl	800ba04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b910:	e051      	b.n	800b9b6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b924:	b29b      	uxth	r3, r3
 800b926:	2b00      	cmp	r3, #0
 800b928:	d047      	beq.n	800b9ba <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800b92a:	8a7b      	ldrh	r3, [r7, #18]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d044      	beq.n	800b9ba <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68da      	ldr	r2, [r3, #12]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b93e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	695a      	ldr	r2, [r3, #20]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f022 0201 	bic.w	r2, r2, #1
 800b94e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2220      	movs	r2, #32
 800b954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68da      	ldr	r2, [r3, #12]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f022 0210 	bic.w	r2, r2, #16
 800b96c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b96e:	8a7b      	ldrh	r3, [r7, #18]
 800b970:	4619      	mov	r1, r3
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 f846 	bl	800ba04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b978:	e01f      	b.n	800b9ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b980:	2b00      	cmp	r3, #0
 800b982:	d008      	beq.n	800b996 <HAL_UART_IRQHandler+0x326>
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d003      	beq.n	800b996 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fa33 	bl	800bdfa <UART_Transmit_IT>
    return;
 800b994:	e012      	b.n	800b9bc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00d      	beq.n	800b9bc <HAL_UART_IRQHandler+0x34c>
 800b9a0:	6a3b      	ldr	r3, [r7, #32]
 800b9a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d008      	beq.n	800b9bc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fa75 	bl	800be9a <UART_EndTransmit_IT>
    return;
 800b9b0:	e004      	b.n	800b9bc <HAL_UART_IRQHandler+0x34c>
    return;
 800b9b2:	bf00      	nop
 800b9b4:	e002      	b.n	800b9bc <HAL_UART_IRQHandler+0x34c>
      return;
 800b9b6:	bf00      	nop
 800b9b8:	e000      	b.n	800b9bc <HAL_UART_IRQHandler+0x34c>
      return;
 800b9ba:	bf00      	nop
  }
}
 800b9bc:	3728      	adds	r7, #40	; 0x28
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	0800bdd3 	.word	0x0800bdd3

0800b9c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba28:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d12a      	bne.n	800ba8e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68da      	ldr	r2, [r3, #12]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba4c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	695a      	ldr	r2, [r3, #20]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f022 0201 	bic.w	r2, r2, #1
 800ba5c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	695a      	ldr	r2, [r3, #20]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba6c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2220      	movs	r2, #32
 800ba72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d107      	bne.n	800ba8e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	68da      	ldr	r2, [r3, #12]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f022 0210 	bic.w	r2, r2, #16
 800ba8c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d106      	bne.n	800baa4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f7ff ffb1 	bl	800ba04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800baa2:	e002      	b.n	800baaa <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f7f6 f8d1 	bl	8001c4c <HAL_UART_RxCpltCallback>
}
 800baaa:	bf00      	nop
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800babe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d108      	bne.n	800bada <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bacc:	085b      	lsrs	r3, r3, #1
 800bace:	b29b      	uxth	r3, r3
 800bad0:	4619      	mov	r1, r3
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7ff ff96 	bl	800ba04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bad8:	e002      	b.n	800bae0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f7ff ff7e 	bl	800b9dc <HAL_UART_RxHalfCpltCallback>
}
 800bae0:	bf00      	nop
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800baf0:	2300      	movs	r3, #0
 800baf2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	695b      	ldr	r3, [r3, #20]
 800bb00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb04:	2b80      	cmp	r3, #128	; 0x80
 800bb06:	bf0c      	ite	eq
 800bb08:	2301      	moveq	r3, #1
 800bb0a:	2300      	movne	r3, #0
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	2b21      	cmp	r3, #33	; 0x21
 800bb1a:	d108      	bne.n	800bb2e <UART_DMAError+0x46>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d005      	beq.n	800bb2e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	2200      	movs	r2, #0
 800bb26:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bb28:	68b8      	ldr	r0, [r7, #8]
 800bb2a:	f000 f90f 	bl	800bd4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb38:	2b40      	cmp	r3, #64	; 0x40
 800bb3a:	bf0c      	ite	eq
 800bb3c:	2301      	moveq	r3, #1
 800bb3e:	2300      	movne	r3, #0
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	2b22      	cmp	r3, #34	; 0x22
 800bb4e:	d108      	bne.n	800bb62 <UART_DMAError+0x7a>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d005      	beq.n	800bb62 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bb5c:	68b8      	ldr	r0, [r7, #8]
 800bb5e:	f000 f90b 	bl	800bd78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb66:	f043 0210 	orr.w	r2, r3, #16
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb6e:	68b8      	ldr	r0, [r7, #8]
 800bb70:	f7ff ff3e 	bl	800b9f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb74:	bf00      	nop
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	603b      	str	r3, [r7, #0]
 800bb88:	4613      	mov	r3, r2
 800bb8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb8c:	e02c      	b.n	800bbe8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb94:	d028      	beq.n	800bbe8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d007      	beq.n	800bbac <UART_WaitOnFlagUntilTimeout+0x30>
 800bb9c:	f7fa fa6e 	bl	800607c <HAL_GetTick>
 800bba0:	4602      	mov	r2, r0
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	69ba      	ldr	r2, [r7, #24]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d21d      	bcs.n	800bbe8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68da      	ldr	r2, [r3, #12]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bbba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	695a      	ldr	r2, [r3, #20]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f022 0201 	bic.w	r2, r2, #1
 800bbca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2220      	movs	r2, #32
 800bbd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2220      	movs	r2, #32
 800bbd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bbe4:	2303      	movs	r3, #3
 800bbe6:	e00f      	b.n	800bc08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	bf0c      	ite	eq
 800bbf8:	2301      	moveq	r3, #1
 800bbfa:	2300      	movne	r3, #0
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	461a      	mov	r2, r3
 800bc00:	79fb      	ldrb	r3, [r7, #7]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d0c3      	beq.n	800bb8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	88fa      	ldrh	r2, [r7, #6]
 800bc28:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	88fa      	ldrh	r2, [r7, #6]
 800bc2e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2200      	movs	r2, #0
 800bc34:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2222      	movs	r2, #34	; 0x22
 800bc3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68da      	ldr	r2, [r3, #12]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc54:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	695a      	ldr	r2, [r3, #20]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f042 0201 	orr.w	r2, r2, #1
 800bc64:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68da      	ldr	r2, [r3, #12]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f042 0220 	orr.w	r2, r2, #32
 800bc74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	88fa      	ldrh	r2, [r7, #6]
 800bc9c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2222      	movs	r2, #34	; 0x22
 800bca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb0:	4a23      	ldr	r2, [pc, #140]	; (800bd40 <UART_Start_Receive_DMA+0xbc>)
 800bcb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb8:	4a22      	ldr	r2, [pc, #136]	; (800bd44 <UART_Start_Receive_DMA+0xc0>)
 800bcba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc0:	4a21      	ldr	r2, [pc, #132]	; (800bd48 <UART_Start_Receive_DMA+0xc4>)
 800bcc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc8:	2200      	movs	r2, #0
 800bcca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800bccc:	f107 0308 	add.w	r3, r7, #8
 800bcd0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3304      	adds	r3, #4
 800bcdc:	4619      	mov	r1, r3
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	88fb      	ldrh	r3, [r7, #6]
 800bce4:	f7fa ff86 	bl	8006bf4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800bce8:	2300      	movs	r3, #0
 800bcea:	613b      	str	r3, [r7, #16]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	613b      	str	r3, [r7, #16]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	613b      	str	r3, [r7, #16]
 800bcfc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	68da      	ldr	r2, [r3, #12]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd14:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	695a      	ldr	r2, [r3, #20]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f042 0201 	orr.w	r2, r2, #1
 800bd24:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	695a      	ldr	r2, [r3, #20]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd34:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3718      	adds	r7, #24
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	0800ba1d 	.word	0x0800ba1d
 800bd44:	0800bab3 	.word	0x0800bab3
 800bd48:	0800bae9 	.word	0x0800bae9

0800bd4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	68da      	ldr	r2, [r3, #12]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bd62:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2220      	movs	r2, #32
 800bd68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bd6c:	bf00      	nop
 800bd6e:	370c      	adds	r7, #12
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr

0800bd78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	68da      	ldr	r2, [r3, #12]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bd8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	695a      	ldr	r2, [r3, #20]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f022 0201 	bic.w	r2, r2, #1
 800bd9e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d107      	bne.n	800bdb8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	68da      	ldr	r2, [r3, #12]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f022 0210 	bic.w	r2, r2, #16
 800bdb6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2220      	movs	r2, #32
 800bdbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bdc6:	bf00      	nop
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b084      	sub	sp, #16
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2200      	movs	r2, #0
 800bdea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f7ff fdff 	bl	800b9f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdf2:	bf00      	nop
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	b085      	sub	sp, #20
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b21      	cmp	r3, #33	; 0x21
 800be0c:	d13e      	bne.n	800be8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be16:	d114      	bne.n	800be42 <UART_Transmit_IT+0x48>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d110      	bne.n	800be42 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a1b      	ldr	r3, [r3, #32]
 800be24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	461a      	mov	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	1c9a      	adds	r2, r3, #2
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	621a      	str	r2, [r3, #32]
 800be40:	e008      	b.n	800be54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a1b      	ldr	r3, [r3, #32]
 800be46:	1c59      	adds	r1, r3, #1
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	6211      	str	r1, [r2, #32]
 800be4c:	781a      	ldrb	r2, [r3, #0]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be58:	b29b      	uxth	r3, r3
 800be5a:	3b01      	subs	r3, #1
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	4619      	mov	r1, r3
 800be62:	84d1      	strh	r1, [r2, #38]	; 0x26
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10f      	bne.n	800be88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68da      	ldr	r2, [r3, #12]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68da      	ldr	r2, [r3, #12]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	e000      	b.n	800be8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800be8c:	2302      	movs	r3, #2
  }
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3714      	adds	r7, #20
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr

0800be9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b082      	sub	sp, #8
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68da      	ldr	r2, [r3, #12]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800beb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2220      	movs	r2, #32
 800beb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7ff fd84 	bl	800b9c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b084      	sub	sp, #16
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	2b22      	cmp	r3, #34	; 0x22
 800bedc:	f040 8087 	bne.w	800bfee <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bee8:	d117      	bne.n	800bf1a <UART_Receive_IT+0x50>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	691b      	ldr	r3, [r3, #16]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d113      	bne.n	800bf1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bef2:	2300      	movs	r3, #0
 800bef4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf12:	1c9a      	adds	r2, r3, #2
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	629a      	str	r2, [r3, #40]	; 0x28
 800bf18:	e026      	b.n	800bf68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf1e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800bf20:	2300      	movs	r3, #0
 800bf22:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf2c:	d007      	beq.n	800bf3e <UART_Receive_IT+0x74>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	689b      	ldr	r3, [r3, #8]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d10a      	bne.n	800bf4c <UART_Receive_IT+0x82>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d106      	bne.n	800bf4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	701a      	strb	r2, [r3, #0]
 800bf4a:	e008      	b.n	800bf5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf58:	b2da      	uxtb	r2, r3
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf62:	1c5a      	adds	r2, r3, #1
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	3b01      	subs	r3, #1
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	4619      	mov	r1, r3
 800bf76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d136      	bne.n	800bfea <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68da      	ldr	r2, [r3, #12]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f022 0220 	bic.w	r2, r2, #32
 800bf8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68da      	ldr	r2, [r3, #12]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	695a      	ldr	r2, [r3, #20]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f022 0201 	bic.w	r2, r2, #1
 800bfaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2220      	movs	r2, #32
 800bfb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d10e      	bne.n	800bfda <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	68da      	ldr	r2, [r3, #12]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f022 0210 	bic.w	r2, r2, #16
 800bfca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7ff fd16 	bl	800ba04 <HAL_UARTEx_RxEventCallback>
 800bfd8:	e002      	b.n	800bfe0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f7f5 fe36 	bl	8001c4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	e002      	b.n	800bff0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	e000      	b.n	800bff0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800bfee:	2302      	movs	r3, #2
  }
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffc:	b09f      	sub	sp, #124	; 0x7c
 800bffe:	af00      	add	r7, sp, #0
 800c000:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	691b      	ldr	r3, [r3, #16]
 800c008:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c00c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c00e:	68d9      	ldr	r1, [r3, #12]
 800c010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	ea40 0301 	orr.w	r3, r0, r1
 800c018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c01a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c01c:	689a      	ldr	r2, [r3, #8]
 800c01e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	431a      	orrs	r2, r3
 800c024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c026:	695b      	ldr	r3, [r3, #20]
 800c028:	431a      	orrs	r2, r3
 800c02a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c02c:	69db      	ldr	r3, [r3, #28]
 800c02e:	4313      	orrs	r3, r2
 800c030:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800c032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c03c:	f021 010c 	bic.w	r1, r1, #12
 800c040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c046:	430b      	orrs	r3, r1
 800c048:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c04a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	695b      	ldr	r3, [r3, #20]
 800c050:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c056:	6999      	ldr	r1, [r3, #24]
 800c058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	ea40 0301 	orr.w	r3, r0, r1
 800c060:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	4bc5      	ldr	r3, [pc, #788]	; (800c37c <UART_SetConfig+0x384>)
 800c068:	429a      	cmp	r2, r3
 800c06a:	d004      	beq.n	800c076 <UART_SetConfig+0x7e>
 800c06c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	4bc3      	ldr	r3, [pc, #780]	; (800c380 <UART_SetConfig+0x388>)
 800c072:	429a      	cmp	r2, r3
 800c074:	d103      	bne.n	800c07e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c076:	f7fe f83d 	bl	800a0f4 <HAL_RCC_GetPCLK2Freq>
 800c07a:	6778      	str	r0, [r7, #116]	; 0x74
 800c07c:	e002      	b.n	800c084 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c07e:	f7fe f825 	bl	800a0cc <HAL_RCC_GetPCLK1Freq>
 800c082:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c086:	69db      	ldr	r3, [r3, #28]
 800c088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c08c:	f040 80b6 	bne.w	800c1fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c090:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c092:	461c      	mov	r4, r3
 800c094:	f04f 0500 	mov.w	r5, #0
 800c098:	4622      	mov	r2, r4
 800c09a:	462b      	mov	r3, r5
 800c09c:	1891      	adds	r1, r2, r2
 800c09e:	6439      	str	r1, [r7, #64]	; 0x40
 800c0a0:	415b      	adcs	r3, r3
 800c0a2:	647b      	str	r3, [r7, #68]	; 0x44
 800c0a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c0a8:	1912      	adds	r2, r2, r4
 800c0aa:	eb45 0303 	adc.w	r3, r5, r3
 800c0ae:	f04f 0000 	mov.w	r0, #0
 800c0b2:	f04f 0100 	mov.w	r1, #0
 800c0b6:	00d9      	lsls	r1, r3, #3
 800c0b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c0bc:	00d0      	lsls	r0, r2, #3
 800c0be:	4602      	mov	r2, r0
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	1911      	adds	r1, r2, r4
 800c0c4:	6639      	str	r1, [r7, #96]	; 0x60
 800c0c6:	416b      	adcs	r3, r5
 800c0c8:	667b      	str	r3, [r7, #100]	; 0x64
 800c0ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	f04f 0300 	mov.w	r3, #0
 800c0d4:	1891      	adds	r1, r2, r2
 800c0d6:	63b9      	str	r1, [r7, #56]	; 0x38
 800c0d8:	415b      	adcs	r3, r3
 800c0da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c0e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c0e4:	f7f4 fdd0 	bl	8000c88 <__aeabi_uldivmod>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	4ba5      	ldr	r3, [pc, #660]	; (800c384 <UART_SetConfig+0x38c>)
 800c0ee:	fba3 2302 	umull	r2, r3, r3, r2
 800c0f2:	095b      	lsrs	r3, r3, #5
 800c0f4:	011e      	lsls	r6, r3, #4
 800c0f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0f8:	461c      	mov	r4, r3
 800c0fa:	f04f 0500 	mov.w	r5, #0
 800c0fe:	4622      	mov	r2, r4
 800c100:	462b      	mov	r3, r5
 800c102:	1891      	adds	r1, r2, r2
 800c104:	6339      	str	r1, [r7, #48]	; 0x30
 800c106:	415b      	adcs	r3, r3
 800c108:	637b      	str	r3, [r7, #52]	; 0x34
 800c10a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c10e:	1912      	adds	r2, r2, r4
 800c110:	eb45 0303 	adc.w	r3, r5, r3
 800c114:	f04f 0000 	mov.w	r0, #0
 800c118:	f04f 0100 	mov.w	r1, #0
 800c11c:	00d9      	lsls	r1, r3, #3
 800c11e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c122:	00d0      	lsls	r0, r2, #3
 800c124:	4602      	mov	r2, r0
 800c126:	460b      	mov	r3, r1
 800c128:	1911      	adds	r1, r2, r4
 800c12a:	65b9      	str	r1, [r7, #88]	; 0x58
 800c12c:	416b      	adcs	r3, r5
 800c12e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	461a      	mov	r2, r3
 800c136:	f04f 0300 	mov.w	r3, #0
 800c13a:	1891      	adds	r1, r2, r2
 800c13c:	62b9      	str	r1, [r7, #40]	; 0x28
 800c13e:	415b      	adcs	r3, r3
 800c140:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c146:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c14a:	f7f4 fd9d 	bl	8000c88 <__aeabi_uldivmod>
 800c14e:	4602      	mov	r2, r0
 800c150:	460b      	mov	r3, r1
 800c152:	4b8c      	ldr	r3, [pc, #560]	; (800c384 <UART_SetConfig+0x38c>)
 800c154:	fba3 1302 	umull	r1, r3, r3, r2
 800c158:	095b      	lsrs	r3, r3, #5
 800c15a:	2164      	movs	r1, #100	; 0x64
 800c15c:	fb01 f303 	mul.w	r3, r1, r3
 800c160:	1ad3      	subs	r3, r2, r3
 800c162:	00db      	lsls	r3, r3, #3
 800c164:	3332      	adds	r3, #50	; 0x32
 800c166:	4a87      	ldr	r2, [pc, #540]	; (800c384 <UART_SetConfig+0x38c>)
 800c168:	fba2 2303 	umull	r2, r3, r2, r3
 800c16c:	095b      	lsrs	r3, r3, #5
 800c16e:	005b      	lsls	r3, r3, #1
 800c170:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c174:	441e      	add	r6, r3
 800c176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c178:	4618      	mov	r0, r3
 800c17a:	f04f 0100 	mov.w	r1, #0
 800c17e:	4602      	mov	r2, r0
 800c180:	460b      	mov	r3, r1
 800c182:	1894      	adds	r4, r2, r2
 800c184:	623c      	str	r4, [r7, #32]
 800c186:	415b      	adcs	r3, r3
 800c188:	627b      	str	r3, [r7, #36]	; 0x24
 800c18a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c18e:	1812      	adds	r2, r2, r0
 800c190:	eb41 0303 	adc.w	r3, r1, r3
 800c194:	f04f 0400 	mov.w	r4, #0
 800c198:	f04f 0500 	mov.w	r5, #0
 800c19c:	00dd      	lsls	r5, r3, #3
 800c19e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c1a2:	00d4      	lsls	r4, r2, #3
 800c1a4:	4622      	mov	r2, r4
 800c1a6:	462b      	mov	r3, r5
 800c1a8:	1814      	adds	r4, r2, r0
 800c1aa:	653c      	str	r4, [r7, #80]	; 0x50
 800c1ac:	414b      	adcs	r3, r1
 800c1ae:	657b      	str	r3, [r7, #84]	; 0x54
 800c1b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	f04f 0300 	mov.w	r3, #0
 800c1ba:	1891      	adds	r1, r2, r2
 800c1bc:	61b9      	str	r1, [r7, #24]
 800c1be:	415b      	adcs	r3, r3
 800c1c0:	61fb      	str	r3, [r7, #28]
 800c1c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c1c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c1ca:	f7f4 fd5d 	bl	8000c88 <__aeabi_uldivmod>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4b6c      	ldr	r3, [pc, #432]	; (800c384 <UART_SetConfig+0x38c>)
 800c1d4:	fba3 1302 	umull	r1, r3, r3, r2
 800c1d8:	095b      	lsrs	r3, r3, #5
 800c1da:	2164      	movs	r1, #100	; 0x64
 800c1dc:	fb01 f303 	mul.w	r3, r1, r3
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	00db      	lsls	r3, r3, #3
 800c1e4:	3332      	adds	r3, #50	; 0x32
 800c1e6:	4a67      	ldr	r2, [pc, #412]	; (800c384 <UART_SetConfig+0x38c>)
 800c1e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ec:	095b      	lsrs	r3, r3, #5
 800c1ee:	f003 0207 	and.w	r2, r3, #7
 800c1f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4432      	add	r2, r6
 800c1f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c1fa:	e0b9      	b.n	800c370 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c1fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1fe:	461c      	mov	r4, r3
 800c200:	f04f 0500 	mov.w	r5, #0
 800c204:	4622      	mov	r2, r4
 800c206:	462b      	mov	r3, r5
 800c208:	1891      	adds	r1, r2, r2
 800c20a:	6139      	str	r1, [r7, #16]
 800c20c:	415b      	adcs	r3, r3
 800c20e:	617b      	str	r3, [r7, #20]
 800c210:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c214:	1912      	adds	r2, r2, r4
 800c216:	eb45 0303 	adc.w	r3, r5, r3
 800c21a:	f04f 0000 	mov.w	r0, #0
 800c21e:	f04f 0100 	mov.w	r1, #0
 800c222:	00d9      	lsls	r1, r3, #3
 800c224:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c228:	00d0      	lsls	r0, r2, #3
 800c22a:	4602      	mov	r2, r0
 800c22c:	460b      	mov	r3, r1
 800c22e:	eb12 0804 	adds.w	r8, r2, r4
 800c232:	eb43 0905 	adc.w	r9, r3, r5
 800c236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f04f 0100 	mov.w	r1, #0
 800c240:	f04f 0200 	mov.w	r2, #0
 800c244:	f04f 0300 	mov.w	r3, #0
 800c248:	008b      	lsls	r3, r1, #2
 800c24a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c24e:	0082      	lsls	r2, r0, #2
 800c250:	4640      	mov	r0, r8
 800c252:	4649      	mov	r1, r9
 800c254:	f7f4 fd18 	bl	8000c88 <__aeabi_uldivmod>
 800c258:	4602      	mov	r2, r0
 800c25a:	460b      	mov	r3, r1
 800c25c:	4b49      	ldr	r3, [pc, #292]	; (800c384 <UART_SetConfig+0x38c>)
 800c25e:	fba3 2302 	umull	r2, r3, r3, r2
 800c262:	095b      	lsrs	r3, r3, #5
 800c264:	011e      	lsls	r6, r3, #4
 800c266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c268:	4618      	mov	r0, r3
 800c26a:	f04f 0100 	mov.w	r1, #0
 800c26e:	4602      	mov	r2, r0
 800c270:	460b      	mov	r3, r1
 800c272:	1894      	adds	r4, r2, r2
 800c274:	60bc      	str	r4, [r7, #8]
 800c276:	415b      	adcs	r3, r3
 800c278:	60fb      	str	r3, [r7, #12]
 800c27a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c27e:	1812      	adds	r2, r2, r0
 800c280:	eb41 0303 	adc.w	r3, r1, r3
 800c284:	f04f 0400 	mov.w	r4, #0
 800c288:	f04f 0500 	mov.w	r5, #0
 800c28c:	00dd      	lsls	r5, r3, #3
 800c28e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c292:	00d4      	lsls	r4, r2, #3
 800c294:	4622      	mov	r2, r4
 800c296:	462b      	mov	r3, r5
 800c298:	1814      	adds	r4, r2, r0
 800c29a:	64bc      	str	r4, [r7, #72]	; 0x48
 800c29c:	414b      	adcs	r3, r1
 800c29e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c2a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f04f 0100 	mov.w	r1, #0
 800c2aa:	f04f 0200 	mov.w	r2, #0
 800c2ae:	f04f 0300 	mov.w	r3, #0
 800c2b2:	008b      	lsls	r3, r1, #2
 800c2b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c2b8:	0082      	lsls	r2, r0, #2
 800c2ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c2be:	f7f4 fce3 	bl	8000c88 <__aeabi_uldivmod>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4b2f      	ldr	r3, [pc, #188]	; (800c384 <UART_SetConfig+0x38c>)
 800c2c8:	fba3 1302 	umull	r1, r3, r3, r2
 800c2cc:	095b      	lsrs	r3, r3, #5
 800c2ce:	2164      	movs	r1, #100	; 0x64
 800c2d0:	fb01 f303 	mul.w	r3, r1, r3
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	011b      	lsls	r3, r3, #4
 800c2d8:	3332      	adds	r3, #50	; 0x32
 800c2da:	4a2a      	ldr	r2, [pc, #168]	; (800c384 <UART_SetConfig+0x38c>)
 800c2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e0:	095b      	lsrs	r3, r3, #5
 800c2e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2e6:	441e      	add	r6, r3
 800c2e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f04f 0100 	mov.w	r1, #0
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	1894      	adds	r4, r2, r2
 800c2f6:	603c      	str	r4, [r7, #0]
 800c2f8:	415b      	adcs	r3, r3
 800c2fa:	607b      	str	r3, [r7, #4]
 800c2fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c300:	1812      	adds	r2, r2, r0
 800c302:	eb41 0303 	adc.w	r3, r1, r3
 800c306:	f04f 0400 	mov.w	r4, #0
 800c30a:	f04f 0500 	mov.w	r5, #0
 800c30e:	00dd      	lsls	r5, r3, #3
 800c310:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c314:	00d4      	lsls	r4, r2, #3
 800c316:	4622      	mov	r2, r4
 800c318:	462b      	mov	r3, r5
 800c31a:	eb12 0a00 	adds.w	sl, r2, r0
 800c31e:	eb43 0b01 	adc.w	fp, r3, r1
 800c322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	4618      	mov	r0, r3
 800c328:	f04f 0100 	mov.w	r1, #0
 800c32c:	f04f 0200 	mov.w	r2, #0
 800c330:	f04f 0300 	mov.w	r3, #0
 800c334:	008b      	lsls	r3, r1, #2
 800c336:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c33a:	0082      	lsls	r2, r0, #2
 800c33c:	4650      	mov	r0, sl
 800c33e:	4659      	mov	r1, fp
 800c340:	f7f4 fca2 	bl	8000c88 <__aeabi_uldivmod>
 800c344:	4602      	mov	r2, r0
 800c346:	460b      	mov	r3, r1
 800c348:	4b0e      	ldr	r3, [pc, #56]	; (800c384 <UART_SetConfig+0x38c>)
 800c34a:	fba3 1302 	umull	r1, r3, r3, r2
 800c34e:	095b      	lsrs	r3, r3, #5
 800c350:	2164      	movs	r1, #100	; 0x64
 800c352:	fb01 f303 	mul.w	r3, r1, r3
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	011b      	lsls	r3, r3, #4
 800c35a:	3332      	adds	r3, #50	; 0x32
 800c35c:	4a09      	ldr	r2, [pc, #36]	; (800c384 <UART_SetConfig+0x38c>)
 800c35e:	fba2 2303 	umull	r2, r3, r2, r3
 800c362:	095b      	lsrs	r3, r3, #5
 800c364:	f003 020f 	and.w	r2, r3, #15
 800c368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4432      	add	r2, r6
 800c36e:	609a      	str	r2, [r3, #8]
}
 800c370:	bf00      	nop
 800c372:	377c      	adds	r7, #124	; 0x7c
 800c374:	46bd      	mov	sp, r7
 800c376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c37a:	bf00      	nop
 800c37c:	40011000 	.word	0x40011000
 800c380:	40011400 	.word	0x40011400
 800c384:	51eb851f 	.word	0x51eb851f

0800c388 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c388:	b084      	sub	sp, #16
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b084      	sub	sp, #16
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	f107 001c 	add.w	r0, r7, #28
 800c396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d122      	bne.n	800c3e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c3b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c3c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d105      	bne.n	800c3da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f001 fac6 	bl	800d96c <USB_CoreReset>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	73fb      	strb	r3, [r7, #15]
 800c3e4:	e01a      	b.n	800c41c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f001 faba 	bl	800d96c <USB_CoreReset>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c3fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d106      	bne.n	800c410 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c406:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	639a      	str	r2, [r3, #56]	; 0x38
 800c40e:	e005      	b.n	800c41c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c414:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d10b      	bne.n	800c43a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	f043 0206 	orr.w	r2, r3, #6
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	f043 0220 	orr.w	r2, r3, #32
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c43a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3710      	adds	r7, #16
 800c440:	46bd      	mov	sp, r7
 800c442:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c446:	b004      	add	sp, #16
 800c448:	4770      	bx	lr
	...

0800c44c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b087      	sub	sp, #28
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	4613      	mov	r3, r2
 800c458:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c45a:	79fb      	ldrb	r3, [r7, #7]
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d165      	bne.n	800c52c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	4a41      	ldr	r2, [pc, #260]	; (800c568 <USB_SetTurnaroundTime+0x11c>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d906      	bls.n	800c476 <USB_SetTurnaroundTime+0x2a>
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	4a40      	ldr	r2, [pc, #256]	; (800c56c <USB_SetTurnaroundTime+0x120>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d202      	bcs.n	800c476 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c470:	230f      	movs	r3, #15
 800c472:	617b      	str	r3, [r7, #20]
 800c474:	e062      	b.n	800c53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	4a3c      	ldr	r2, [pc, #240]	; (800c56c <USB_SetTurnaroundTime+0x120>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d306      	bcc.n	800c48c <USB_SetTurnaroundTime+0x40>
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	4a3b      	ldr	r2, [pc, #236]	; (800c570 <USB_SetTurnaroundTime+0x124>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d202      	bcs.n	800c48c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c486:	230e      	movs	r3, #14
 800c488:	617b      	str	r3, [r7, #20]
 800c48a:	e057      	b.n	800c53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	4a38      	ldr	r2, [pc, #224]	; (800c570 <USB_SetTurnaroundTime+0x124>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d306      	bcc.n	800c4a2 <USB_SetTurnaroundTime+0x56>
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	4a37      	ldr	r2, [pc, #220]	; (800c574 <USB_SetTurnaroundTime+0x128>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d202      	bcs.n	800c4a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c49c:	230d      	movs	r3, #13
 800c49e:	617b      	str	r3, [r7, #20]
 800c4a0:	e04c      	b.n	800c53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	4a33      	ldr	r2, [pc, #204]	; (800c574 <USB_SetTurnaroundTime+0x128>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d306      	bcc.n	800c4b8 <USB_SetTurnaroundTime+0x6c>
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	4a32      	ldr	r2, [pc, #200]	; (800c578 <USB_SetTurnaroundTime+0x12c>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d802      	bhi.n	800c4b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c4b2:	230c      	movs	r3, #12
 800c4b4:	617b      	str	r3, [r7, #20]
 800c4b6:	e041      	b.n	800c53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	4a2f      	ldr	r2, [pc, #188]	; (800c578 <USB_SetTurnaroundTime+0x12c>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d906      	bls.n	800c4ce <USB_SetTurnaroundTime+0x82>
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	4a2e      	ldr	r2, [pc, #184]	; (800c57c <USB_SetTurnaroundTime+0x130>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d802      	bhi.n	800c4ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c4c8:	230b      	movs	r3, #11
 800c4ca:	617b      	str	r3, [r7, #20]
 800c4cc:	e036      	b.n	800c53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	4a2a      	ldr	r2, [pc, #168]	; (800c57c <USB_SetTurnaroundTime+0x130>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d906      	bls.n	800c4e4 <USB_SetTurnaroundTime+0x98>
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	4a29      	ldr	r2, [pc, #164]	; (800c580 <USB_SetTurnaroundTime+0x134>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d802      	bhi.n	800c4e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c4de:	230a      	movs	r3, #10
 800c4e0:	617b      	str	r3, [r7, #20]
 800c4e2:	e02b      	b.n	800c53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	4a26      	ldr	r2, [pc, #152]	; (800c580 <USB_SetTurnaroundTime+0x134>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d906      	bls.n	800c4fa <USB_SetTurnaroundTime+0xae>
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	4a25      	ldr	r2, [pc, #148]	; (800c584 <USB_SetTurnaroundTime+0x138>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d202      	bcs.n	800c4fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c4f4:	2309      	movs	r3, #9
 800c4f6:	617b      	str	r3, [r7, #20]
 800c4f8:	e020      	b.n	800c53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	4a21      	ldr	r2, [pc, #132]	; (800c584 <USB_SetTurnaroundTime+0x138>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d306      	bcc.n	800c510 <USB_SetTurnaroundTime+0xc4>
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	4a20      	ldr	r2, [pc, #128]	; (800c588 <USB_SetTurnaroundTime+0x13c>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d802      	bhi.n	800c510 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c50a:	2308      	movs	r3, #8
 800c50c:	617b      	str	r3, [r7, #20]
 800c50e:	e015      	b.n	800c53c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	4a1d      	ldr	r2, [pc, #116]	; (800c588 <USB_SetTurnaroundTime+0x13c>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d906      	bls.n	800c526 <USB_SetTurnaroundTime+0xda>
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	4a1c      	ldr	r2, [pc, #112]	; (800c58c <USB_SetTurnaroundTime+0x140>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d202      	bcs.n	800c526 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c520:	2307      	movs	r3, #7
 800c522:	617b      	str	r3, [r7, #20]
 800c524:	e00a      	b.n	800c53c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c526:	2306      	movs	r3, #6
 800c528:	617b      	str	r3, [r7, #20]
 800c52a:	e007      	b.n	800c53c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c52c:	79fb      	ldrb	r3, [r7, #7]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d102      	bne.n	800c538 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c532:	2309      	movs	r3, #9
 800c534:	617b      	str	r3, [r7, #20]
 800c536:	e001      	b.n	800c53c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c538:	2309      	movs	r3, #9
 800c53a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	68da      	ldr	r2, [r3, #12]
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	029b      	lsls	r3, r3, #10
 800c550:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c554:	431a      	orrs	r2, r3
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	371c      	adds	r7, #28
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	00d8acbf 	.word	0x00d8acbf
 800c56c:	00e4e1c0 	.word	0x00e4e1c0
 800c570:	00f42400 	.word	0x00f42400
 800c574:	01067380 	.word	0x01067380
 800c578:	011a499f 	.word	0x011a499f
 800c57c:	01312cff 	.word	0x01312cff
 800c580:	014ca43f 	.word	0x014ca43f
 800c584:	016e3600 	.word	0x016e3600
 800c588:	01a6ab1f 	.word	0x01a6ab1f
 800c58c:	01e84800 	.word	0x01e84800

0800c590 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c590:	b480      	push	{r7}
 800c592:	b083      	sub	sp, #12
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	f043 0201 	orr.w	r2, r3, #1
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	370c      	adds	r7, #12
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr

0800c5b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	f023 0201 	bic.w	r2, r3, #1
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c5c6:	2300      	movs	r3, #0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	460b      	mov	r3, r1
 800c5de:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c5ec:	78fb      	ldrb	r3, [r7, #3]
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d106      	bne.n	800c600 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	60da      	str	r2, [r3, #12]
 800c5fe:	e00b      	b.n	800c618 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c600:	78fb      	ldrb	r3, [r7, #3]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d106      	bne.n	800c614 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	60da      	str	r2, [r3, #12]
 800c612:	e001      	b.n	800c618 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c614:	2301      	movs	r3, #1
 800c616:	e003      	b.n	800c620 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c618:	2032      	movs	r0, #50	; 0x32
 800c61a:	f7f9 fd3b 	bl	8006094 <HAL_Delay>

  return HAL_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c628:	b084      	sub	sp, #16
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b086      	sub	sp, #24
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
 800c632:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c63a:	2300      	movs	r3, #0
 800c63c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c642:	2300      	movs	r3, #0
 800c644:	613b      	str	r3, [r7, #16]
 800c646:	e009      	b.n	800c65c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c648:	687a      	ldr	r2, [r7, #4]
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	3340      	adds	r3, #64	; 0x40
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	2200      	movs	r2, #0
 800c654:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	3301      	adds	r3, #1
 800c65a:	613b      	str	r3, [r7, #16]
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	2b0e      	cmp	r3, #14
 800c660:	d9f2      	bls.n	800c648 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c664:	2b00      	cmp	r3, #0
 800c666:	d11c      	bne.n	800c6a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c66e:	685b      	ldr	r3, [r3, #4]
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c676:	f043 0302 	orr.w	r3, r3, #2
 800c67a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c680:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c698:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	639a      	str	r2, [r3, #56]	; 0x38
 800c6a0:	e00b      	b.n	800c6ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	680b      	ldr	r3, [r1, #0]
 800c6d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d10c      	bne.n	800c6fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d104      	bne.n	800c6f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 f949 	bl	800c980 <USB_SetDevSpeed>
 800c6ee:	e008      	b.n	800c702 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c6f0:	2101      	movs	r1, #1
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f944 	bl	800c980 <USB_SetDevSpeed>
 800c6f8:	e003      	b.n	800c702 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c6fa:	2103      	movs	r1, #3
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 f93f 	bl	800c980 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c702:	2110      	movs	r1, #16
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 f8f3 	bl	800c8f0 <USB_FlushTxFifo>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d001      	beq.n	800c714 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 f911 	bl	800c93c <USB_FlushRxFifo>
 800c71a:	4603      	mov	r3, r0
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d001      	beq.n	800c724 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c720:	2301      	movs	r3, #1
 800c722:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c72a:	461a      	mov	r2, r3
 800c72c:	2300      	movs	r3, #0
 800c72e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c736:	461a      	mov	r2, r3
 800c738:	2300      	movs	r3, #0
 800c73a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c742:	461a      	mov	r2, r3
 800c744:	2300      	movs	r3, #0
 800c746:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c748:	2300      	movs	r3, #0
 800c74a:	613b      	str	r3, [r7, #16]
 800c74c:	e043      	b.n	800c7d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	015a      	lsls	r2, r3, #5
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	4413      	add	r3, r2
 800c756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c760:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c764:	d118      	bne.n	800c798 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10a      	bne.n	800c782 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	015a      	lsls	r2, r3, #5
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	4413      	add	r3, r2
 800c774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c778:	461a      	mov	r2, r3
 800c77a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c77e:	6013      	str	r3, [r2, #0]
 800c780:	e013      	b.n	800c7aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	015a      	lsls	r2, r3, #5
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	4413      	add	r3, r2
 800c78a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c78e:	461a      	mov	r2, r3
 800c790:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c794:	6013      	str	r3, [r2, #0]
 800c796:	e008      	b.n	800c7aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	015a      	lsls	r2, r3, #5
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	4413      	add	r3, r2
 800c7a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	015a      	lsls	r2, r3, #5
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	015a      	lsls	r2, r3, #5
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c7ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	613b      	str	r3, [r7, #16]
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d8:	693a      	ldr	r2, [r7, #16]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d3b7      	bcc.n	800c74e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c7de:	2300      	movs	r3, #0
 800c7e0:	613b      	str	r3, [r7, #16]
 800c7e2:	e043      	b.n	800c86c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	015a      	lsls	r2, r3, #5
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	4413      	add	r3, r2
 800c7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7fa:	d118      	bne.n	800c82e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10a      	bne.n	800c818 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	015a      	lsls	r2, r3, #5
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	4413      	add	r3, r2
 800c80a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c80e:	461a      	mov	r2, r3
 800c810:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c814:	6013      	str	r3, [r2, #0]
 800c816:	e013      	b.n	800c840 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	015a      	lsls	r2, r3, #5
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	4413      	add	r3, r2
 800c820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c824:	461a      	mov	r2, r3
 800c826:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c82a:	6013      	str	r3, [r2, #0]
 800c82c:	e008      	b.n	800c840 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	015a      	lsls	r2, r3, #5
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	4413      	add	r3, r2
 800c836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c83a:	461a      	mov	r2, r3
 800c83c:	2300      	movs	r3, #0
 800c83e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	015a      	lsls	r2, r3, #5
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	4413      	add	r3, r2
 800c848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c84c:	461a      	mov	r2, r3
 800c84e:	2300      	movs	r3, #0
 800c850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	015a      	lsls	r2, r3, #5
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	4413      	add	r3, r2
 800c85a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c85e:	461a      	mov	r2, r3
 800c860:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c864:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	3301      	adds	r3, #1
 800c86a:	613b      	str	r3, [r7, #16]
 800c86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	429a      	cmp	r2, r3
 800c872:	d3b7      	bcc.n	800c7e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c87a:	691b      	ldr	r3, [r3, #16]
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c886:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c894:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d105      	bne.n	800c8a8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	699b      	ldr	r3, [r3, #24]
 800c8a0:	f043 0210 	orr.w	r2, r3, #16
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	699a      	ldr	r2, [r3, #24]
 800c8ac:	4b0f      	ldr	r3, [pc, #60]	; (800c8ec <USB_DevInit+0x2c4>)
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d005      	beq.n	800c8c6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	f043 0208 	orr.w	r2, r3, #8
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d107      	bne.n	800c8dc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	699b      	ldr	r3, [r3, #24]
 800c8d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8d4:	f043 0304 	orr.w	r3, r3, #4
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c8dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3718      	adds	r7, #24
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c8e8:	b004      	add	sp, #16
 800c8ea:	4770      	bx	lr
 800c8ec:	803c3800 	.word	0x803c3800

0800c8f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	019b      	lsls	r3, r3, #6
 800c902:	f043 0220 	orr.w	r2, r3, #32
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3301      	adds	r3, #1
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	4a09      	ldr	r2, [pc, #36]	; (800c938 <USB_FlushTxFifo+0x48>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d901      	bls.n	800c91c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c918:	2303      	movs	r3, #3
 800c91a:	e006      	b.n	800c92a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	691b      	ldr	r3, [r3, #16]
 800c920:	f003 0320 	and.w	r3, r3, #32
 800c924:	2b20      	cmp	r3, #32
 800c926:	d0f0      	beq.n	800c90a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3714      	adds	r7, #20
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	00030d40 	.word	0x00030d40

0800c93c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c944:	2300      	movs	r3, #0
 800c946:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2210      	movs	r2, #16
 800c94c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3301      	adds	r3, #1
 800c952:	60fb      	str	r3, [r7, #12]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	4a09      	ldr	r2, [pc, #36]	; (800c97c <USB_FlushRxFifo+0x40>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d901      	bls.n	800c960 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c95c:	2303      	movs	r3, #3
 800c95e:	e006      	b.n	800c96e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	691b      	ldr	r3, [r3, #16]
 800c964:	f003 0310 	and.w	r3, r3, #16
 800c968:	2b10      	cmp	r3, #16
 800c96a:	d0f0      	beq.n	800c94e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	00030d40 	.word	0x00030d40

0800c980 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c980:	b480      	push	{r7}
 800c982:	b085      	sub	sp, #20
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	460b      	mov	r3, r1
 800c98a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	78fb      	ldrb	r3, [r7, #3]
 800c99a:	68f9      	ldr	r1, [r7, #12]
 800c99c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b087      	sub	sp, #28
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9c4:	689b      	ldr	r3, [r3, #8]
 800c9c6:	f003 0306 	and.w	r3, r3, #6
 800c9ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d102      	bne.n	800c9d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	75fb      	strb	r3, [r7, #23]
 800c9d6:	e00a      	b.n	800c9ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d002      	beq.n	800c9e4 <USB_GetDevSpeed+0x32>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2b06      	cmp	r3, #6
 800c9e2:	d102      	bne.n	800c9ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	75fb      	strb	r3, [r7, #23]
 800c9e8:	e001      	b.n	800c9ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c9ea:	230f      	movs	r3, #15
 800c9ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	371c      	adds	r7, #28
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b085      	sub	sp, #20
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	785b      	ldrb	r3, [r3, #1]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d13a      	bne.n	800ca8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca1e:	69da      	ldr	r2, [r3, #28]
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	f003 030f 	and.w	r3, r3, #15
 800ca28:	2101      	movs	r1, #1
 800ca2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	68f9      	ldr	r1, [r7, #12]
 800ca32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca36:	4313      	orrs	r3, r2
 800ca38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	015a      	lsls	r2, r3, #5
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	4413      	add	r3, r2
 800ca42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d155      	bne.n	800cafc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	015a      	lsls	r2, r3, #5
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	4413      	add	r3, r2
 800ca58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	78db      	ldrb	r3, [r3, #3]
 800ca6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ca6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	059b      	lsls	r3, r3, #22
 800ca72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ca74:	4313      	orrs	r3, r2
 800ca76:	68ba      	ldr	r2, [r7, #8]
 800ca78:	0151      	lsls	r1, r2, #5
 800ca7a:	68fa      	ldr	r2, [r7, #12]
 800ca7c:	440a      	add	r2, r1
 800ca7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca8a:	6013      	str	r3, [r2, #0]
 800ca8c:	e036      	b.n	800cafc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca94:	69da      	ldr	r2, [r3, #28]
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	f003 030f 	and.w	r3, r3, #15
 800ca9e:	2101      	movs	r1, #1
 800caa0:	fa01 f303 	lsl.w	r3, r1, r3
 800caa4:	041b      	lsls	r3, r3, #16
 800caa6:	68f9      	ldr	r1, [r7, #12]
 800caa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800caac:	4313      	orrs	r3, r2
 800caae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	015a      	lsls	r2, r3, #5
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	4413      	add	r3, r2
 800cab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d11a      	bne.n	800cafc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	015a      	lsls	r2, r3, #5
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	4413      	add	r3, r2
 800cace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	78db      	ldrb	r3, [r3, #3]
 800cae0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cae2:	430b      	orrs	r3, r1
 800cae4:	4313      	orrs	r3, r2
 800cae6:	68ba      	ldr	r2, [r7, #8]
 800cae8:	0151      	lsls	r1, r2, #5
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	440a      	add	r2, r1
 800caee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800caf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cafa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3714      	adds	r7, #20
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr
	...

0800cb0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	785b      	ldrb	r3, [r3, #1]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d161      	bne.n	800cbec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	015a      	lsls	r2, r3, #5
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	4413      	add	r3, r2
 800cb30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb3e:	d11f      	bne.n	800cb80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	015a      	lsls	r2, r3, #5
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	4413      	add	r3, r2
 800cb48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	0151      	lsls	r1, r2, #5
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	440a      	add	r2, r1
 800cb56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cb5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	015a      	lsls	r2, r3, #5
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	4413      	add	r3, r2
 800cb68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	68ba      	ldr	r2, [r7, #8]
 800cb70:	0151      	lsls	r1, r2, #5
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	440a      	add	r2, r1
 800cb76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	f003 030f 	and.w	r3, r3, #15
 800cb90:	2101      	movs	r1, #1
 800cb92:	fa01 f303 	lsl.w	r3, r1, r3
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	43db      	mvns	r3, r3
 800cb9a:	68f9      	ldr	r1, [r7, #12]
 800cb9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cba0:	4013      	ands	r3, r2
 800cba2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbaa:	69da      	ldr	r2, [r3, #28]
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	f003 030f 	and.w	r3, r3, #15
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	fa01 f303 	lsl.w	r3, r1, r3
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	43db      	mvns	r3, r3
 800cbbe:	68f9      	ldr	r1, [r7, #12]
 800cbc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	015a      	lsls	r2, r3, #5
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	4413      	add	r3, r2
 800cbd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	0159      	lsls	r1, r3, #5
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	440b      	add	r3, r1
 800cbde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	4b35      	ldr	r3, [pc, #212]	; (800ccbc <USB_DeactivateEndpoint+0x1b0>)
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	600b      	str	r3, [r1, #0]
 800cbea:	e060      	b.n	800ccae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	015a      	lsls	r2, r3, #5
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc02:	d11f      	bne.n	800cc44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	015a      	lsls	r2, r3, #5
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	0151      	lsls	r1, r2, #5
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	440a      	add	r2, r1
 800cc1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	015a      	lsls	r2, r3, #5
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	4413      	add	r3, r2
 800cc2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	68ba      	ldr	r2, [r7, #8]
 800cc34:	0151      	lsls	r1, r2, #5
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	440a      	add	r2, r1
 800cc3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	f003 030f 	and.w	r3, r3, #15
 800cc54:	2101      	movs	r1, #1
 800cc56:	fa01 f303 	lsl.w	r3, r1, r3
 800cc5a:	041b      	lsls	r3, r3, #16
 800cc5c:	43db      	mvns	r3, r3
 800cc5e:	68f9      	ldr	r1, [r7, #12]
 800cc60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc64:	4013      	ands	r3, r2
 800cc66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc6e:	69da      	ldr	r2, [r3, #28]
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	f003 030f 	and.w	r3, r3, #15
 800cc78:	2101      	movs	r1, #1
 800cc7a:	fa01 f303 	lsl.w	r3, r1, r3
 800cc7e:	041b      	lsls	r3, r3, #16
 800cc80:	43db      	mvns	r3, r3
 800cc82:	68f9      	ldr	r1, [r7, #12]
 800cc84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc88:	4013      	ands	r3, r2
 800cc8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	015a      	lsls	r2, r3, #5
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	4413      	add	r3, r2
 800cc94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	0159      	lsls	r1, r3, #5
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	440b      	add	r3, r1
 800cca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cca6:	4619      	mov	r1, r3
 800cca8:	4b05      	ldr	r3, [pc, #20]	; (800ccc0 <USB_DeactivateEndpoint+0x1b4>)
 800ccaa:	4013      	ands	r3, r2
 800ccac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3714      	adds	r7, #20
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	ec337800 	.word	0xec337800
 800ccc0:	eff37800 	.word	0xeff37800

0800ccc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b08a      	sub	sp, #40	; 0x28
 800ccc8:	af02      	add	r7, sp, #8
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	785b      	ldrb	r3, [r3, #1]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	f040 815c 	bne.w	800cf9e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	695b      	ldr	r3, [r3, #20]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d132      	bne.n	800cd54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	015a      	lsls	r2, r3, #5
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfa:	691b      	ldr	r3, [r3, #16]
 800ccfc:	69ba      	ldr	r2, [r7, #24]
 800ccfe:	0151      	lsls	r1, r2, #5
 800cd00:	69fa      	ldr	r2, [r7, #28]
 800cd02:	440a      	add	r2, r1
 800cd04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cd0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cd10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cd12:	69bb      	ldr	r3, [r7, #24]
 800cd14:	015a      	lsls	r2, r3, #5
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	4413      	add	r3, r2
 800cd1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd1e:	691b      	ldr	r3, [r3, #16]
 800cd20:	69ba      	ldr	r2, [r7, #24]
 800cd22:	0151      	lsls	r1, r2, #5
 800cd24:	69fa      	ldr	r2, [r7, #28]
 800cd26:	440a      	add	r2, r1
 800cd28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	015a      	lsls	r2, r3, #5
 800cd36:	69fb      	ldr	r3, [r7, #28]
 800cd38:	4413      	add	r3, r2
 800cd3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd3e:	691b      	ldr	r3, [r3, #16]
 800cd40:	69ba      	ldr	r2, [r7, #24]
 800cd42:	0151      	lsls	r1, r2, #5
 800cd44:	69fa      	ldr	r2, [r7, #28]
 800cd46:	440a      	add	r2, r1
 800cd48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd4c:	0cdb      	lsrs	r3, r3, #19
 800cd4e:	04db      	lsls	r3, r3, #19
 800cd50:	6113      	str	r3, [r2, #16]
 800cd52:	e074      	b.n	800ce3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cd54:	69bb      	ldr	r3, [r7, #24]
 800cd56:	015a      	lsls	r2, r3, #5
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd60:	691b      	ldr	r3, [r3, #16]
 800cd62:	69ba      	ldr	r2, [r7, #24]
 800cd64:	0151      	lsls	r1, r2, #5
 800cd66:	69fa      	ldr	r2, [r7, #28]
 800cd68:	440a      	add	r2, r1
 800cd6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd6e:	0cdb      	lsrs	r3, r3, #19
 800cd70:	04db      	lsls	r3, r3, #19
 800cd72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	015a      	lsls	r2, r3, #5
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	69ba      	ldr	r2, [r7, #24]
 800cd84:	0151      	lsls	r1, r2, #5
 800cd86:	69fa      	ldr	r2, [r7, #28]
 800cd88:	440a      	add	r2, r1
 800cd8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cd92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cd96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800cd98:	69bb      	ldr	r3, [r7, #24]
 800cd9a:	015a      	lsls	r2, r3, #5
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	4413      	add	r3, r2
 800cda0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cda4:	691a      	ldr	r2, [r3, #16]
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	6959      	ldr	r1, [r3, #20]
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	440b      	add	r3, r1
 800cdb0:	1e59      	subs	r1, r3, #1
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	fbb1 f3f3 	udiv	r3, r1, r3
 800cdba:	04d9      	lsls	r1, r3, #19
 800cdbc:	4b9d      	ldr	r3, [pc, #628]	; (800d034 <USB_EPStartXfer+0x370>)
 800cdbe:	400b      	ands	r3, r1
 800cdc0:	69b9      	ldr	r1, [r7, #24]
 800cdc2:	0148      	lsls	r0, r1, #5
 800cdc4:	69f9      	ldr	r1, [r7, #28]
 800cdc6:	4401      	add	r1, r0
 800cdc8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cdd0:	69bb      	ldr	r3, [r7, #24]
 800cdd2:	015a      	lsls	r2, r3, #5
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cddc:	691a      	ldr	r2, [r3, #16]
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cde6:	69b9      	ldr	r1, [r7, #24]
 800cde8:	0148      	lsls	r0, r1, #5
 800cdea:	69f9      	ldr	r1, [r7, #28]
 800cdec:	4401      	add	r1, r0
 800cdee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	78db      	ldrb	r3, [r3, #3]
 800cdfa:	2b01      	cmp	r3, #1
 800cdfc:	d11f      	bne.n	800ce3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	015a      	lsls	r2, r3, #5
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	4413      	add	r3, r2
 800ce06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	69ba      	ldr	r2, [r7, #24]
 800ce0e:	0151      	lsls	r1, r2, #5
 800ce10:	69fa      	ldr	r2, [r7, #28]
 800ce12:	440a      	add	r2, r1
 800ce14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ce1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	015a      	lsls	r2, r3, #5
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	4413      	add	r3, r2
 800ce26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce2a:	691b      	ldr	r3, [r3, #16]
 800ce2c:	69ba      	ldr	r2, [r7, #24]
 800ce2e:	0151      	lsls	r1, r2, #5
 800ce30:	69fa      	ldr	r2, [r7, #28]
 800ce32:	440a      	add	r2, r1
 800ce34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ce3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ce3e:	79fb      	ldrb	r3, [r7, #7]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d14b      	bne.n	800cedc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d009      	beq.n	800ce60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ce4c:	69bb      	ldr	r3, [r7, #24]
 800ce4e:	015a      	lsls	r2, r3, #5
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	4413      	add	r3, r2
 800ce54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce58:	461a      	mov	r2, r3
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	78db      	ldrb	r3, [r3, #3]
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d128      	bne.n	800ceba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ce68:	69fb      	ldr	r3, [r7, #28]
 800ce6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d110      	bne.n	800ce9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	015a      	lsls	r2, r3, #5
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	4413      	add	r3, r2
 800ce80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	69ba      	ldr	r2, [r7, #24]
 800ce88:	0151      	lsls	r1, r2, #5
 800ce8a:	69fa      	ldr	r2, [r7, #28]
 800ce8c:	440a      	add	r2, r1
 800ce8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ce96:	6013      	str	r3, [r2, #0]
 800ce98:	e00f      	b.n	800ceba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	015a      	lsls	r2, r3, #5
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	4413      	add	r3, r2
 800cea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	69ba      	ldr	r2, [r7, #24]
 800ceaa:	0151      	lsls	r1, r2, #5
 800ceac:	69fa      	ldr	r2, [r7, #28]
 800ceae:	440a      	add	r2, r1
 800ceb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ceb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ceb8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	015a      	lsls	r2, r3, #5
 800cebe:	69fb      	ldr	r3, [r7, #28]
 800cec0:	4413      	add	r3, r2
 800cec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	69ba      	ldr	r2, [r7, #24]
 800ceca:	0151      	lsls	r1, r2, #5
 800cecc:	69fa      	ldr	r2, [r7, #28]
 800cece:	440a      	add	r2, r1
 800ced0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ced4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ced8:	6013      	str	r3, [r2, #0]
 800ceda:	e12f      	b.n	800d13c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	015a      	lsls	r2, r3, #5
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	4413      	add	r3, r2
 800cee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	69ba      	ldr	r2, [r7, #24]
 800ceec:	0151      	lsls	r1, r2, #5
 800ceee:	69fa      	ldr	r2, [r7, #28]
 800cef0:	440a      	add	r2, r1
 800cef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cef6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cefa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	78db      	ldrb	r3, [r3, #3]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d015      	beq.n	800cf30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	695b      	ldr	r3, [r3, #20]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f000 8117 	beq.w	800d13c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	f003 030f 	and.w	r3, r3, #15
 800cf1e:	2101      	movs	r1, #1
 800cf20:	fa01 f303 	lsl.w	r3, r1, r3
 800cf24:	69f9      	ldr	r1, [r7, #28]
 800cf26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	634b      	str	r3, [r1, #52]	; 0x34
 800cf2e:	e105      	b.n	800d13c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d110      	bne.n	800cf62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	015a      	lsls	r2, r3, #5
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	4413      	add	r3, r2
 800cf48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	69ba      	ldr	r2, [r7, #24]
 800cf50:	0151      	lsls	r1, r2, #5
 800cf52:	69fa      	ldr	r2, [r7, #28]
 800cf54:	440a      	add	r2, r1
 800cf56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf5e:	6013      	str	r3, [r2, #0]
 800cf60:	e00f      	b.n	800cf82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	015a      	lsls	r2, r3, #5
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	4413      	add	r3, r2
 800cf6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	69ba      	ldr	r2, [r7, #24]
 800cf72:	0151      	lsls	r1, r2, #5
 800cf74:	69fa      	ldr	r2, [r7, #28]
 800cf76:	440a      	add	r2, r1
 800cf78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	68d9      	ldr	r1, [r3, #12]
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	781a      	ldrb	r2, [r3, #0]
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	695b      	ldr	r3, [r3, #20]
 800cf8e:	b298      	uxth	r0, r3
 800cf90:	79fb      	ldrb	r3, [r7, #7]
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	4603      	mov	r3, r0
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	f000 fa2b 	bl	800d3f2 <USB_WritePacket>
 800cf9c:	e0ce      	b.n	800d13c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800cf9e:	69bb      	ldr	r3, [r7, #24]
 800cfa0:	015a      	lsls	r2, r3, #5
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfaa:	691b      	ldr	r3, [r3, #16]
 800cfac:	69ba      	ldr	r2, [r7, #24]
 800cfae:	0151      	lsls	r1, r2, #5
 800cfb0:	69fa      	ldr	r2, [r7, #28]
 800cfb2:	440a      	add	r2, r1
 800cfb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfb8:	0cdb      	lsrs	r3, r3, #19
 800cfba:	04db      	lsls	r3, r3, #19
 800cfbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	015a      	lsls	r2, r3, #5
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	4413      	add	r3, r2
 800cfc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfca:	691b      	ldr	r3, [r3, #16]
 800cfcc:	69ba      	ldr	r2, [r7, #24]
 800cfce:	0151      	lsls	r1, r2, #5
 800cfd0:	69fa      	ldr	r2, [r7, #28]
 800cfd2:	440a      	add	r2, r1
 800cfd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cfd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cfdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cfe0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	695b      	ldr	r3, [r3, #20]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d126      	bne.n	800d038 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	015a      	lsls	r2, r3, #5
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	4413      	add	r3, r2
 800cff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cff6:	691a      	ldr	r2, [r3, #16]
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d000:	69b9      	ldr	r1, [r7, #24]
 800d002:	0148      	lsls	r0, r1, #5
 800d004:	69f9      	ldr	r1, [r7, #28]
 800d006:	4401      	add	r1, r0
 800d008:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d00c:	4313      	orrs	r3, r2
 800d00e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	015a      	lsls	r2, r3, #5
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	4413      	add	r3, r2
 800d018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d01c:	691b      	ldr	r3, [r3, #16]
 800d01e:	69ba      	ldr	r2, [r7, #24]
 800d020:	0151      	lsls	r1, r2, #5
 800d022:	69fa      	ldr	r2, [r7, #28]
 800d024:	440a      	add	r2, r1
 800d026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d02a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d02e:	6113      	str	r3, [r2, #16]
 800d030:	e036      	b.n	800d0a0 <USB_EPStartXfer+0x3dc>
 800d032:	bf00      	nop
 800d034:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	695a      	ldr	r2, [r3, #20]
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	4413      	add	r3, r2
 800d042:	1e5a      	subs	r2, r3, #1
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	fbb2 f3f3 	udiv	r3, r2, r3
 800d04c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	015a      	lsls	r2, r3, #5
 800d052:	69fb      	ldr	r3, [r7, #28]
 800d054:	4413      	add	r3, r2
 800d056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d05a:	691a      	ldr	r2, [r3, #16]
 800d05c:	8afb      	ldrh	r3, [r7, #22]
 800d05e:	04d9      	lsls	r1, r3, #19
 800d060:	4b39      	ldr	r3, [pc, #228]	; (800d148 <USB_EPStartXfer+0x484>)
 800d062:	400b      	ands	r3, r1
 800d064:	69b9      	ldr	r1, [r7, #24]
 800d066:	0148      	lsls	r0, r1, #5
 800d068:	69f9      	ldr	r1, [r7, #28]
 800d06a:	4401      	add	r1, r0
 800d06c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d070:	4313      	orrs	r3, r2
 800d072:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	015a      	lsls	r2, r3, #5
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	4413      	add	r3, r2
 800d07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d080:	691a      	ldr	r2, [r3, #16]
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	8af9      	ldrh	r1, [r7, #22]
 800d088:	fb01 f303 	mul.w	r3, r1, r3
 800d08c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d090:	69b9      	ldr	r1, [r7, #24]
 800d092:	0148      	lsls	r0, r1, #5
 800d094:	69f9      	ldr	r1, [r7, #28]
 800d096:	4401      	add	r1, r0
 800d098:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d09c:	4313      	orrs	r3, r2
 800d09e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d0a0:	79fb      	ldrb	r3, [r7, #7]
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d10d      	bne.n	800d0c2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d009      	beq.n	800d0c2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	68d9      	ldr	r1, [r3, #12]
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	015a      	lsls	r2, r3, #5
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0be:	460a      	mov	r2, r1
 800d0c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	78db      	ldrb	r3, [r3, #3]
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d128      	bne.n	800d11c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d110      	bne.n	800d0fc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	015a      	lsls	r2, r3, #5
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	69ba      	ldr	r2, [r7, #24]
 800d0ea:	0151      	lsls	r1, r2, #5
 800d0ec:	69fa      	ldr	r2, [r7, #28]
 800d0ee:	440a      	add	r2, r1
 800d0f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d0f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d0f8:	6013      	str	r3, [r2, #0]
 800d0fa:	e00f      	b.n	800d11c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d0fc:	69bb      	ldr	r3, [r7, #24]
 800d0fe:	015a      	lsls	r2, r3, #5
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	4413      	add	r3, r2
 800d104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	69ba      	ldr	r2, [r7, #24]
 800d10c:	0151      	lsls	r1, r2, #5
 800d10e:	69fa      	ldr	r2, [r7, #28]
 800d110:	440a      	add	r2, r1
 800d112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d11a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d11c:	69bb      	ldr	r3, [r7, #24]
 800d11e:	015a      	lsls	r2, r3, #5
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	4413      	add	r3, r2
 800d124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	69ba      	ldr	r2, [r7, #24]
 800d12c:	0151      	lsls	r1, r2, #5
 800d12e:	69fa      	ldr	r2, [r7, #28]
 800d130:	440a      	add	r2, r1
 800d132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d136:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d13a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3720      	adds	r7, #32
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	1ff80000 	.word	0x1ff80000

0800d14c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b087      	sub	sp, #28
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	4613      	mov	r3, r2
 800d158:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	785b      	ldrb	r3, [r3, #1]
 800d168:	2b01      	cmp	r3, #1
 800d16a:	f040 80cd 	bne.w	800d308 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	695b      	ldr	r3, [r3, #20]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d132      	bne.n	800d1dc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	015a      	lsls	r2, r3, #5
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	4413      	add	r3, r2
 800d17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d182:	691b      	ldr	r3, [r3, #16]
 800d184:	693a      	ldr	r2, [r7, #16]
 800d186:	0151      	lsls	r1, r2, #5
 800d188:	697a      	ldr	r2, [r7, #20]
 800d18a:	440a      	add	r2, r1
 800d18c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d190:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d194:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d198:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	015a      	lsls	r2, r3, #5
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	693a      	ldr	r2, [r7, #16]
 800d1aa:	0151      	lsls	r1, r2, #5
 800d1ac:	697a      	ldr	r2, [r7, #20]
 800d1ae:	440a      	add	r2, r1
 800d1b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	015a      	lsls	r2, r3, #5
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1c6:	691b      	ldr	r3, [r3, #16]
 800d1c8:	693a      	ldr	r2, [r7, #16]
 800d1ca:	0151      	lsls	r1, r2, #5
 800d1cc:	697a      	ldr	r2, [r7, #20]
 800d1ce:	440a      	add	r2, r1
 800d1d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1d4:	0cdb      	lsrs	r3, r3, #19
 800d1d6:	04db      	lsls	r3, r3, #19
 800d1d8:	6113      	str	r3, [r2, #16]
 800d1da:	e04e      	b.n	800d27a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	015a      	lsls	r2, r3, #5
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1e8:	691b      	ldr	r3, [r3, #16]
 800d1ea:	693a      	ldr	r2, [r7, #16]
 800d1ec:	0151      	lsls	r1, r2, #5
 800d1ee:	697a      	ldr	r2, [r7, #20]
 800d1f0:	440a      	add	r2, r1
 800d1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1f6:	0cdb      	lsrs	r3, r3, #19
 800d1f8:	04db      	lsls	r3, r3, #19
 800d1fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	015a      	lsls	r2, r3, #5
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	4413      	add	r3, r2
 800d204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	693a      	ldr	r2, [r7, #16]
 800d20c:	0151      	lsls	r1, r2, #5
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	440a      	add	r2, r1
 800d212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d216:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d21a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d21e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	695a      	ldr	r2, [r3, #20]
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d903      	bls.n	800d234 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	689a      	ldr	r2, [r3, #8]
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	015a      	lsls	r2, r3, #5
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	4413      	add	r3, r2
 800d23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d240:	691b      	ldr	r3, [r3, #16]
 800d242:	693a      	ldr	r2, [r7, #16]
 800d244:	0151      	lsls	r1, r2, #5
 800d246:	697a      	ldr	r2, [r7, #20]
 800d248:	440a      	add	r2, r1
 800d24a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d24e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d252:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	015a      	lsls	r2, r3, #5
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	4413      	add	r3, r2
 800d25c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d260:	691a      	ldr	r2, [r3, #16]
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	695b      	ldr	r3, [r3, #20]
 800d266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d26a:	6939      	ldr	r1, [r7, #16]
 800d26c:	0148      	lsls	r0, r1, #5
 800d26e:	6979      	ldr	r1, [r7, #20]
 800d270:	4401      	add	r1, r0
 800d272:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d276:	4313      	orrs	r3, r2
 800d278:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d27a:	79fb      	ldrb	r3, [r7, #7]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d11e      	bne.n	800d2be <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d009      	beq.n	800d29c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	015a      	lsls	r2, r3, #5
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	4413      	add	r3, r2
 800d290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d294:	461a      	mov	r2, r3
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	691b      	ldr	r3, [r3, #16]
 800d29a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	015a      	lsls	r2, r3, #5
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	4413      	add	r3, r2
 800d2a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	693a      	ldr	r2, [r7, #16]
 800d2ac:	0151      	lsls	r1, r2, #5
 800d2ae:	697a      	ldr	r2, [r7, #20]
 800d2b0:	440a      	add	r2, r1
 800d2b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d2ba:	6013      	str	r3, [r2, #0]
 800d2bc:	e092      	b.n	800d3e4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	015a      	lsls	r2, r3, #5
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	693a      	ldr	r2, [r7, #16]
 800d2ce:	0151      	lsls	r1, r2, #5
 800d2d0:	697a      	ldr	r2, [r7, #20]
 800d2d2:	440a      	add	r2, r1
 800d2d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d2dc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	695b      	ldr	r3, [r3, #20]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d07e      	beq.n	800d3e4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	f003 030f 	and.w	r3, r3, #15
 800d2f6:	2101      	movs	r1, #1
 800d2f8:	fa01 f303 	lsl.w	r3, r1, r3
 800d2fc:	6979      	ldr	r1, [r7, #20]
 800d2fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d302:	4313      	orrs	r3, r2
 800d304:	634b      	str	r3, [r1, #52]	; 0x34
 800d306:	e06d      	b.n	800d3e4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	015a      	lsls	r2, r3, #5
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	4413      	add	r3, r2
 800d310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	693a      	ldr	r2, [r7, #16]
 800d318:	0151      	lsls	r1, r2, #5
 800d31a:	697a      	ldr	r2, [r7, #20]
 800d31c:	440a      	add	r2, r1
 800d31e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d322:	0cdb      	lsrs	r3, r3, #19
 800d324:	04db      	lsls	r3, r3, #19
 800d326:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	015a      	lsls	r2, r3, #5
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	4413      	add	r3, r2
 800d330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	0151      	lsls	r1, r2, #5
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	440a      	add	r2, r1
 800d33e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d342:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d346:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d34a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	695b      	ldr	r3, [r3, #20]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d003      	beq.n	800d35c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	689a      	ldr	r2, [r3, #8]
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	015a      	lsls	r2, r3, #5
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	4413      	add	r3, r2
 800d364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d368:	691b      	ldr	r3, [r3, #16]
 800d36a:	693a      	ldr	r2, [r7, #16]
 800d36c:	0151      	lsls	r1, r2, #5
 800d36e:	697a      	ldr	r2, [r7, #20]
 800d370:	440a      	add	r2, r1
 800d372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d37a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	015a      	lsls	r2, r3, #5
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	4413      	add	r3, r2
 800d384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d388:	691a      	ldr	r2, [r3, #16]
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d392:	6939      	ldr	r1, [r7, #16]
 800d394:	0148      	lsls	r0, r1, #5
 800d396:	6979      	ldr	r1, [r7, #20]
 800d398:	4401      	add	r1, r0
 800d39a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d3a2:	79fb      	ldrb	r3, [r7, #7]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d10d      	bne.n	800d3c4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d009      	beq.n	800d3c4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	68d9      	ldr	r1, [r3, #12]
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	015a      	lsls	r2, r3, #5
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c0:	460a      	mov	r2, r1
 800d3c2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	015a      	lsls	r2, r3, #5
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	4413      	add	r3, r2
 800d3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	693a      	ldr	r2, [r7, #16]
 800d3d4:	0151      	lsls	r1, r2, #5
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	440a      	add	r2, r1
 800d3da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d3e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	371c      	adds	r7, #28
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d3f2:	b480      	push	{r7}
 800d3f4:	b089      	sub	sp, #36	; 0x24
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	60f8      	str	r0, [r7, #12]
 800d3fa:	60b9      	str	r1, [r7, #8]
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	461a      	mov	r2, r3
 800d400:	460b      	mov	r3, r1
 800d402:	71fb      	strb	r3, [r7, #7]
 800d404:	4613      	mov	r3, r2
 800d406:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d410:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d414:	2b00      	cmp	r3, #0
 800d416:	d11a      	bne.n	800d44e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d418:	88bb      	ldrh	r3, [r7, #4]
 800d41a:	3303      	adds	r3, #3
 800d41c:	089b      	lsrs	r3, r3, #2
 800d41e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d420:	2300      	movs	r3, #0
 800d422:	61bb      	str	r3, [r7, #24]
 800d424:	e00f      	b.n	800d446 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d426:	79fb      	ldrb	r3, [r7, #7]
 800d428:	031a      	lsls	r2, r3, #12
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	4413      	add	r3, r2
 800d42e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d432:	461a      	mov	r2, r3
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	3304      	adds	r3, #4
 800d43e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	3301      	adds	r3, #1
 800d444:	61bb      	str	r3, [r7, #24]
 800d446:	69ba      	ldr	r2, [r7, #24]
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d3eb      	bcc.n	800d426 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3724      	adds	r7, #36	; 0x24
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b089      	sub	sp, #36	; 0x24
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	4613      	mov	r3, r2
 800d468:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d472:	88fb      	ldrh	r3, [r7, #6]
 800d474:	3303      	adds	r3, #3
 800d476:	089b      	lsrs	r3, r3, #2
 800d478:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d47a:	2300      	movs	r3, #0
 800d47c:	61bb      	str	r3, [r7, #24]
 800d47e:	e00b      	b.n	800d498 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d486:	681a      	ldr	r2, [r3, #0]
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	601a      	str	r2, [r3, #0]
    pDest++;
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	3304      	adds	r3, #4
 800d490:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	3301      	adds	r3, #1
 800d496:	61bb      	str	r3, [r7, #24]
 800d498:	69ba      	ldr	r2, [r7, #24]
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d3ef      	bcc.n	800d480 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d4a0:	69fb      	ldr	r3, [r7, #28]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3724      	adds	r7, #36	; 0x24
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr

0800d4ae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d4ae:	b480      	push	{r7}
 800d4b0:	b085      	sub	sp, #20
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
 800d4b6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	785b      	ldrb	r3, [r3, #1]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	d12c      	bne.n	800d524 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	015a      	lsls	r2, r3, #5
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	db12      	blt.n	800d502 <USB_EPSetStall+0x54>
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d00f      	beq.n	800d502 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	015a      	lsls	r2, r3, #5
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	68ba      	ldr	r2, [r7, #8]
 800d4f2:	0151      	lsls	r1, r2, #5
 800d4f4:	68fa      	ldr	r2, [r7, #12]
 800d4f6:	440a      	add	r2, r1
 800d4f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d500:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	015a      	lsls	r2, r3, #5
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	4413      	add	r3, r2
 800d50a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	68ba      	ldr	r2, [r7, #8]
 800d512:	0151      	lsls	r1, r2, #5
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	440a      	add	r2, r1
 800d518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d51c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d520:	6013      	str	r3, [r2, #0]
 800d522:	e02b      	b.n	800d57c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	015a      	lsls	r2, r3, #5
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	4413      	add	r3, r2
 800d52c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	db12      	blt.n	800d55c <USB_EPSetStall+0xae>
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00f      	beq.n	800d55c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	015a      	lsls	r2, r3, #5
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	4413      	add	r3, r2
 800d544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	68ba      	ldr	r2, [r7, #8]
 800d54c:	0151      	lsls	r1, r2, #5
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	440a      	add	r2, r1
 800d552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d55a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	015a      	lsls	r2, r3, #5
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	4413      	add	r3, r2
 800d564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68ba      	ldr	r2, [r7, #8]
 800d56c:	0151      	lsls	r1, r2, #5
 800d56e:	68fa      	ldr	r2, [r7, #12]
 800d570:	440a      	add	r2, r1
 800d572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d57a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d57c:	2300      	movs	r3, #0
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3714      	adds	r7, #20
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr

0800d58a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d58a:	b480      	push	{r7}
 800d58c:	b085      	sub	sp, #20
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
 800d592:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	785b      	ldrb	r3, [r3, #1]
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d128      	bne.n	800d5f8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	015a      	lsls	r2, r3, #5
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	0151      	lsls	r1, r2, #5
 800d5b8:	68fa      	ldr	r2, [r7, #12]
 800d5ba:	440a      	add	r2, r1
 800d5bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d5c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	78db      	ldrb	r3, [r3, #3]
 800d5ca:	2b03      	cmp	r3, #3
 800d5cc:	d003      	beq.n	800d5d6 <USB_EPClearStall+0x4c>
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	78db      	ldrb	r3, [r3, #3]
 800d5d2:	2b02      	cmp	r3, #2
 800d5d4:	d138      	bne.n	800d648 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	015a      	lsls	r2, r3, #5
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	4413      	add	r3, r2
 800d5de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	0151      	lsls	r1, r2, #5
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	440a      	add	r2, r1
 800d5ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5f4:	6013      	str	r3, [r2, #0]
 800d5f6:	e027      	b.n	800d648 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	015a      	lsls	r2, r3, #5
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	4413      	add	r3, r2
 800d600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	68ba      	ldr	r2, [r7, #8]
 800d608:	0151      	lsls	r1, r2, #5
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	440a      	add	r2, r1
 800d60e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d616:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	78db      	ldrb	r3, [r3, #3]
 800d61c:	2b03      	cmp	r3, #3
 800d61e:	d003      	beq.n	800d628 <USB_EPClearStall+0x9e>
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	78db      	ldrb	r3, [r3, #3]
 800d624:	2b02      	cmp	r3, #2
 800d626:	d10f      	bne.n	800d648 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	015a      	lsls	r2, r3, #5
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	4413      	add	r3, r2
 800d630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	0151      	lsls	r1, r2, #5
 800d63a:	68fa      	ldr	r2, [r7, #12]
 800d63c:	440a      	add	r2, r1
 800d63e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d646:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d648:	2300      	movs	r3, #0
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3714      	adds	r7, #20
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr

0800d656 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d656:	b480      	push	{r7}
 800d658:	b085      	sub	sp, #20
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
 800d65e:	460b      	mov	r3, r1
 800d660:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	68fa      	ldr	r2, [r7, #12]
 800d670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d674:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d678:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	78fb      	ldrb	r3, [r7, #3]
 800d684:	011b      	lsls	r3, r3, #4
 800d686:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d68a:	68f9      	ldr	r1, [r7, #12]
 800d68c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d690:	4313      	orrs	r3, r2
 800d692:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d694:	2300      	movs	r3, #0
}
 800d696:	4618      	mov	r0, r3
 800d698:	3714      	adds	r7, #20
 800d69a:	46bd      	mov	sp, r7
 800d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a0:	4770      	bx	lr

0800d6a2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d6a2:	b480      	push	{r7}
 800d6a4:	b085      	sub	sp, #20
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d6bc:	f023 0303 	bic.w	r3, r3, #3
 800d6c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d6d0:	f023 0302 	bic.w	r3, r3, #2
 800d6d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d6d6:	2300      	movs	r3, #0
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3714      	adds	r7, #20
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e2:	4770      	bx	lr

0800d6e4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d6e4:	b480      	push	{r7}
 800d6e6:	b085      	sub	sp, #20
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d6fe:	f023 0303 	bic.w	r3, r3, #3
 800d702:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d70a:	685b      	ldr	r3, [r3, #4]
 800d70c:	68fa      	ldr	r2, [r7, #12]
 800d70e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d712:	f043 0302 	orr.w	r3, r3, #2
 800d716:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d718:	2300      	movs	r3, #0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3714      	adds	r7, #20
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr

0800d726 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d726:	b480      	push	{r7}
 800d728:	b085      	sub	sp, #20
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	695b      	ldr	r3, [r3, #20]
 800d732:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	699b      	ldr	r3, [r3, #24]
 800d738:	68fa      	ldr	r2, [r7, #12]
 800d73a:	4013      	ands	r3, r2
 800d73c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d73e:	68fb      	ldr	r3, [r7, #12]
}
 800d740:	4618      	mov	r0, r3
 800d742:	3714      	adds	r7, #20
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d75e:	699b      	ldr	r3, [r3, #24]
 800d760:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d768:	69db      	ldr	r3, [r3, #28]
 800d76a:	68ba      	ldr	r2, [r7, #8]
 800d76c:	4013      	ands	r3, r2
 800d76e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	0c1b      	lsrs	r3, r3, #16
}
 800d774:	4618      	mov	r0, r3
 800d776:	3714      	adds	r7, #20
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d780:	b480      	push	{r7}
 800d782:	b085      	sub	sp, #20
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d792:	699b      	ldr	r3, [r3, #24]
 800d794:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d79c:	69db      	ldr	r3, [r3, #28]
 800d79e:	68ba      	ldr	r2, [r7, #8]
 800d7a0:	4013      	ands	r3, r2
 800d7a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	b29b      	uxth	r3, r3
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3714      	adds	r7, #20
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr

0800d7b4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b085      	sub	sp, #20
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d7c4:	78fb      	ldrb	r3, [r7, #3]
 800d7c6:	015a      	lsls	r2, r3, #5
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	4413      	add	r3, r2
 800d7cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7da:	695b      	ldr	r3, [r3, #20]
 800d7dc:	68ba      	ldr	r2, [r7, #8]
 800d7de:	4013      	ands	r3, r2
 800d7e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d7e2:	68bb      	ldr	r3, [r7, #8]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3714      	adds	r7, #20
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr

0800d7f0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b087      	sub	sp, #28
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d806:	691b      	ldr	r3, [r3, #16]
 800d808:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d812:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d814:	78fb      	ldrb	r3, [r7, #3]
 800d816:	f003 030f 	and.w	r3, r3, #15
 800d81a:	68fa      	ldr	r2, [r7, #12]
 800d81c:	fa22 f303 	lsr.w	r3, r2, r3
 800d820:	01db      	lsls	r3, r3, #7
 800d822:	b2db      	uxtb	r3, r3
 800d824:	693a      	ldr	r2, [r7, #16]
 800d826:	4313      	orrs	r3, r2
 800d828:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d82a:	78fb      	ldrb	r3, [r7, #3]
 800d82c:	015a      	lsls	r2, r3, #5
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	4413      	add	r3, r2
 800d832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	693a      	ldr	r2, [r7, #16]
 800d83a:	4013      	ands	r3, r2
 800d83c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d83e:	68bb      	ldr	r3, [r7, #8]
}
 800d840:	4618      	mov	r0, r3
 800d842:	371c      	adds	r7, #28
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	f003 0301 	and.w	r3, r3, #1
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	370c      	adds	r7, #12
 800d860:	46bd      	mov	sp, r7
 800d862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d866:	4770      	bx	lr

0800d868 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d868:	b480      	push	{r7}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68fa      	ldr	r2, [r7, #12]
 800d87e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d882:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d886:	f023 0307 	bic.w	r3, r3, #7
 800d88a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d892:	685b      	ldr	r3, [r3, #4]
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d89a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d89e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d8a0:	2300      	movs	r3, #0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3714      	adds	r7, #20
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
	...

0800d8b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b087      	sub	sp, #28
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	607a      	str	r2, [r7, #4]
 800d8bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	333c      	adds	r3, #60	; 0x3c
 800d8c6:	3304      	adds	r3, #4
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	4a26      	ldr	r2, [pc, #152]	; (800d968 <USB_EP0_OutStart+0xb8>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d90a      	bls.n	800d8ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d8e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d8e4:	d101      	bne.n	800d8ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	e037      	b.n	800d95a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	697a      	ldr	r2, [r7, #20]
 800d900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	697a      	ldr	r2, [r7, #20]
 800d914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d918:	f043 0318 	orr.w	r3, r3, #24
 800d91c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d924:	691b      	ldr	r3, [r3, #16]
 800d926:	697a      	ldr	r2, [r7, #20]
 800d928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d92c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d930:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d932:	7afb      	ldrb	r3, [r7, #11]
 800d934:	2b01      	cmp	r3, #1
 800d936:	d10f      	bne.n	800d958 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d93e:	461a      	mov	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	697a      	ldr	r2, [r7, #20]
 800d94e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d952:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d956:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d958:	2300      	movs	r3, #0
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	371c      	adds	r7, #28
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop
 800d968:	4f54300a 	.word	0x4f54300a

0800d96c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d974:	2300      	movs	r3, #0
 800d976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	3301      	adds	r3, #1
 800d97c:	60fb      	str	r3, [r7, #12]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	4a13      	ldr	r2, [pc, #76]	; (800d9d0 <USB_CoreReset+0x64>)
 800d982:	4293      	cmp	r3, r2
 800d984:	d901      	bls.n	800d98a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d986:	2303      	movs	r3, #3
 800d988:	e01b      	b.n	800d9c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	691b      	ldr	r3, [r3, #16]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	daf2      	bge.n	800d978 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d992:	2300      	movs	r3, #0
 800d994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	691b      	ldr	r3, [r3, #16]
 800d99a:	f043 0201 	orr.w	r2, r3, #1
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	60fb      	str	r3, [r7, #12]
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	4a09      	ldr	r2, [pc, #36]	; (800d9d0 <USB_CoreReset+0x64>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d901      	bls.n	800d9b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d9b0:	2303      	movs	r3, #3
 800d9b2:	e006      	b.n	800d9c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	691b      	ldr	r3, [r3, #16]
 800d9b8:	f003 0301 	and.w	r3, r3, #1
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d0f0      	beq.n	800d9a2 <USB_CoreReset+0x36>

  return HAL_OK;
 800d9c0:	2300      	movs	r3, #0
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3714      	adds	r7, #20
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr
 800d9ce:	bf00      	nop
 800d9d0:	00030d40 	.word	0x00030d40

0800d9d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d9d8:	4904      	ldr	r1, [pc, #16]	; (800d9ec <MX_FATFS_Init+0x18>)
 800d9da:	4805      	ldr	r0, [pc, #20]	; (800d9f0 <MX_FATFS_Init+0x1c>)
 800d9dc:	f004 fb8a 	bl	80120f4 <FATFS_LinkDriver>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	4b03      	ldr	r3, [pc, #12]	; (800d9f4 <MX_FATFS_Init+0x20>)
 800d9e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d9e8:	bf00      	nop
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	20001a8c 	.word	0x20001a8c
 800d9f0:	20000010 	.word	0x20000010
 800d9f4:	20001a88 	.word	0x20001a88

0800d9f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d9fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	46bd      	mov	sp, r7
 800da02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da06:	4770      	bx	lr

0800da08 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	4603      	mov	r3, r0
 800da10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800da12:	79fb      	ldrb	r3, [r7, #7]
 800da14:	4618      	mov	r0, r3
 800da16:	f000 f9dd 	bl	800ddd4 <USER_SPI_initialize>
 800da1a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3708      	adds	r7, #8
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	4603      	mov	r3, r0
 800da2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800da2e:	79fb      	ldrb	r3, [r7, #7]
 800da30:	4618      	mov	r0, r3
 800da32:	f000 fabb 	bl	800dfac <USER_SPI_status>
 800da36:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3708      	adds	r7, #8
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	60b9      	str	r1, [r7, #8]
 800da48:	607a      	str	r2, [r7, #4]
 800da4a:	603b      	str	r3, [r7, #0]
 800da4c:	4603      	mov	r3, r0
 800da4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800da50:	7bf8      	ldrb	r0, [r7, #15]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	68b9      	ldr	r1, [r7, #8]
 800da58:	f000 fabe 	bl	800dfd8 <USER_SPI_read>
 800da5c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3710      	adds	r7, #16
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}

0800da66 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800da66:	b580      	push	{r7, lr}
 800da68:	b084      	sub	sp, #16
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]
 800da70:	603b      	str	r3, [r7, #0]
 800da72:	4603      	mov	r3, r0
 800da74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800da76:	7bf8      	ldrb	r0, [r7, #15]
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	68b9      	ldr	r1, [r7, #8]
 800da7e:	f000 fb11 	bl	800e0a4 <USER_SPI_write>
 800da82:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800da84:	4618      	mov	r0, r3
 800da86:	3710      	adds	r7, #16
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	4603      	mov	r3, r0
 800da94:	603a      	str	r2, [r7, #0]
 800da96:	71fb      	strb	r3, [r7, #7]
 800da98:	460b      	mov	r3, r1
 800da9a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800da9c:	79b9      	ldrb	r1, [r7, #6]
 800da9e:	79fb      	ldrb	r3, [r7, #7]
 800daa0:	683a      	ldr	r2, [r7, #0]
 800daa2:	4618      	mov	r0, r3
 800daa4:	f000 fb7a 	bl	800e19c <USER_SPI_ioctl>
 800daa8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
	...

0800dab4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800dabc:	f7f8 fade 	bl	800607c <HAL_GetTick>
 800dac0:	4603      	mov	r3, r0
 800dac2:	4a04      	ldr	r2, [pc, #16]	; (800dad4 <SPI_Timer_On+0x20>)
 800dac4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800dac6:	4a04      	ldr	r2, [pc, #16]	; (800dad8 <SPI_Timer_On+0x24>)
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6013      	str	r3, [r2, #0]
}
 800dacc:	bf00      	nop
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	20001a94 	.word	0x20001a94
 800dad8:	20001a90 	.word	0x20001a90

0800dadc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800dadc:	b580      	push	{r7, lr}
 800dade:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800dae0:	f7f8 facc 	bl	800607c <HAL_GetTick>
 800dae4:	4602      	mov	r2, r0
 800dae6:	4b06      	ldr	r3, [pc, #24]	; (800db00 <SPI_Timer_Status+0x24>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	1ad2      	subs	r2, r2, r3
 800daec:	4b05      	ldr	r3, [pc, #20]	; (800db04 <SPI_Timer_Status+0x28>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	bf34      	ite	cc
 800daf4:	2301      	movcc	r3, #1
 800daf6:	2300      	movcs	r3, #0
 800daf8:	b2db      	uxtb	r3, r3
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	20001a94 	.word	0x20001a94
 800db04:	20001a90 	.word	0x20001a90

0800db08 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af02      	add	r7, sp, #8
 800db0e:	4603      	mov	r3, r0
 800db10:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800db12:	f107 020f 	add.w	r2, r7, #15
 800db16:	1df9      	adds	r1, r7, #7
 800db18:	2332      	movs	r3, #50	; 0x32
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	2301      	movs	r3, #1
 800db1e:	4804      	ldr	r0, [pc, #16]	; (800db30 <xchg_spi+0x28>)
 800db20:	f7fc fb85 	bl	800a22e <HAL_SPI_TransmitReceive>
    return rxDat;
 800db24:	7bfb      	ldrb	r3, [r7, #15]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	2000140c 	.word	0x2000140c

0800db34 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800db34:	b590      	push	{r4, r7, lr}
 800db36:	b085      	sub	sp, #20
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800db3e:	2300      	movs	r3, #0
 800db40:	60fb      	str	r3, [r7, #12]
 800db42:	e00a      	b.n	800db5a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	18d4      	adds	r4, r2, r3
 800db4a:	20ff      	movs	r0, #255	; 0xff
 800db4c:	f7ff ffdc 	bl	800db08 <xchg_spi>
 800db50:	4603      	mov	r3, r0
 800db52:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	3301      	adds	r3, #1
 800db58:	60fb      	str	r3, [r7, #12]
 800db5a:	68fa      	ldr	r2, [r7, #12]
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d3f0      	bcc.n	800db44 <rcvr_spi_multi+0x10>
	}
}
 800db62:	bf00      	nop
 800db64:	bf00      	nop
 800db66:	3714      	adds	r7, #20
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd90      	pop	{r4, r7, pc}

0800db6c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800db76:	2300      	movs	r3, #0
 800db78:	60fb      	str	r3, [r7, #12]
 800db7a:	e009      	b.n	800db90 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	4413      	add	r3, r2
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	4618      	mov	r0, r3
 800db86:	f7ff ffbf 	bl	800db08 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	3301      	adds	r3, #1
 800db8e:	60fb      	str	r3, [r7, #12]
 800db90:	68fa      	ldr	r2, [r7, #12]
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	429a      	cmp	r2, r3
 800db96:	d3f1      	bcc.n	800db7c <xmit_spi_multi+0x10>
	}
}
 800db98:	bf00      	nop
 800db9a:	bf00      	nop
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b086      	sub	sp, #24
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800dbaa:	f7f8 fa67 	bl	800607c <HAL_GetTick>
 800dbae:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800dbb4:	20ff      	movs	r0, #255	; 0xff
 800dbb6:	f7ff ffa7 	bl	800db08 <xchg_spi>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800dbbe:	7bfb      	ldrb	r3, [r7, #15]
 800dbc0:	2bff      	cmp	r3, #255	; 0xff
 800dbc2:	d007      	beq.n	800dbd4 <wait_ready+0x32>
 800dbc4:	f7f8 fa5a 	bl	800607c <HAL_GetTick>
 800dbc8:	4602      	mov	r2, r0
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	1ad3      	subs	r3, r2, r3
 800dbce:	693a      	ldr	r2, [r7, #16]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d8ef      	bhi.n	800dbb4 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800dbd4:	7bfb      	ldrb	r3, [r7, #15]
 800dbd6:	2bff      	cmp	r3, #255	; 0xff
 800dbd8:	bf0c      	ite	eq
 800dbda:	2301      	moveq	r3, #1
 800dbdc:	2300      	movne	r3, #0
 800dbde:	b2db      	uxtb	r3, r3
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3718      	adds	r7, #24
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800dbec:	2201      	movs	r2, #1
 800dbee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dbf2:	4804      	ldr	r0, [pc, #16]	; (800dc04 <despiselect+0x1c>)
 800dbf4:	f7f9 fcee 	bl	80075d4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800dbf8:	20ff      	movs	r0, #255	; 0xff
 800dbfa:	f7ff ff85 	bl	800db08 <xchg_spi>

}
 800dbfe:	bf00      	nop
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	40020000 	.word	0x40020000

0800dc08 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dc12:	480a      	ldr	r0, [pc, #40]	; (800dc3c <spiselect+0x34>)
 800dc14:	f7f9 fcde 	bl	80075d4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800dc18:	20ff      	movs	r0, #255	; 0xff
 800dc1a:	f7ff ff75 	bl	800db08 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800dc1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dc22:	f7ff ffbe 	bl	800dba2 <wait_ready>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d001      	beq.n	800dc30 <spiselect+0x28>
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e002      	b.n	800dc36 <spiselect+0x2e>

	despiselect();
 800dc30:	f7ff ffda 	bl	800dbe8 <despiselect>
	return 0;	/* Timeout */
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	40020000 	.word	0x40020000

0800dc40 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800dc4a:	20c8      	movs	r0, #200	; 0xc8
 800dc4c:	f7ff ff32 	bl	800dab4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800dc50:	20ff      	movs	r0, #255	; 0xff
 800dc52:	f7ff ff59 	bl	800db08 <xchg_spi>
 800dc56:	4603      	mov	r3, r0
 800dc58:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800dc5a:	7bfb      	ldrb	r3, [r7, #15]
 800dc5c:	2bff      	cmp	r3, #255	; 0xff
 800dc5e:	d104      	bne.n	800dc6a <rcvr_datablock+0x2a>
 800dc60:	f7ff ff3c 	bl	800dadc <SPI_Timer_Status>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d1f2      	bne.n	800dc50 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800dc6a:	7bfb      	ldrb	r3, [r7, #15]
 800dc6c:	2bfe      	cmp	r3, #254	; 0xfe
 800dc6e:	d001      	beq.n	800dc74 <rcvr_datablock+0x34>
 800dc70:	2300      	movs	r3, #0
 800dc72:	e00a      	b.n	800dc8a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800dc74:	6839      	ldr	r1, [r7, #0]
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f7ff ff5c 	bl	800db34 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800dc7c:	20ff      	movs	r0, #255	; 0xff
 800dc7e:	f7ff ff43 	bl	800db08 <xchg_spi>
 800dc82:	20ff      	movs	r0, #255	; 0xff
 800dc84:	f7ff ff40 	bl	800db08 <xchg_spi>

	return 1;						/* Function succeeded */
 800dc88:	2301      	movs	r3, #1
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3710      	adds	r7, #16
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b084      	sub	sp, #16
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
 800dc9a:	460b      	mov	r3, r1
 800dc9c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800dc9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dca2:	f7ff ff7e 	bl	800dba2 <wait_ready>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d101      	bne.n	800dcb0 <xmit_datablock+0x1e>
 800dcac:	2300      	movs	r3, #0
 800dcae:	e01e      	b.n	800dcee <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800dcb0:	78fb      	ldrb	r3, [r7, #3]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7ff ff28 	bl	800db08 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800dcb8:	78fb      	ldrb	r3, [r7, #3]
 800dcba:	2bfd      	cmp	r3, #253	; 0xfd
 800dcbc:	d016      	beq.n	800dcec <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800dcbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f7ff ff52 	bl	800db6c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800dcc8:	20ff      	movs	r0, #255	; 0xff
 800dcca:	f7ff ff1d 	bl	800db08 <xchg_spi>
 800dcce:	20ff      	movs	r0, #255	; 0xff
 800dcd0:	f7ff ff1a 	bl	800db08 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800dcd4:	20ff      	movs	r0, #255	; 0xff
 800dcd6:	f7ff ff17 	bl	800db08 <xchg_spi>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800dcde:	7bfb      	ldrb	r3, [r7, #15]
 800dce0:	f003 031f 	and.w	r3, r3, #31
 800dce4:	2b05      	cmp	r3, #5
 800dce6:	d001      	beq.n	800dcec <xmit_datablock+0x5a>
 800dce8:	2300      	movs	r3, #0
 800dcea:	e000      	b.n	800dcee <xmit_datablock+0x5c>
	}
	return 1;
 800dcec:	2301      	movs	r3, #1
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3710      	adds	r7, #16
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b084      	sub	sp, #16
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	6039      	str	r1, [r7, #0]
 800dd00:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800dd02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	da0e      	bge.n	800dd28 <send_cmd+0x32>
		cmd &= 0x7F;
 800dd0a:	79fb      	ldrb	r3, [r7, #7]
 800dd0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd10:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800dd12:	2100      	movs	r1, #0
 800dd14:	2037      	movs	r0, #55	; 0x37
 800dd16:	f7ff ffee 	bl	800dcf6 <send_cmd>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800dd1e:	7bbb      	ldrb	r3, [r7, #14]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d901      	bls.n	800dd28 <send_cmd+0x32>
 800dd24:	7bbb      	ldrb	r3, [r7, #14]
 800dd26:	e051      	b.n	800ddcc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800dd28:	79fb      	ldrb	r3, [r7, #7]
 800dd2a:	2b0c      	cmp	r3, #12
 800dd2c:	d008      	beq.n	800dd40 <send_cmd+0x4a>
		despiselect();
 800dd2e:	f7ff ff5b 	bl	800dbe8 <despiselect>
		if (!spiselect()) return 0xFF;
 800dd32:	f7ff ff69 	bl	800dc08 <spiselect>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d101      	bne.n	800dd40 <send_cmd+0x4a>
 800dd3c:	23ff      	movs	r3, #255	; 0xff
 800dd3e:	e045      	b.n	800ddcc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800dd40:	79fb      	ldrb	r3, [r7, #7]
 800dd42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7ff fedd 	bl	800db08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	0e1b      	lsrs	r3, r3, #24
 800dd52:	b2db      	uxtb	r3, r3
 800dd54:	4618      	mov	r0, r3
 800dd56:	f7ff fed7 	bl	800db08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	0c1b      	lsrs	r3, r3, #16
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7ff fed1 	bl	800db08 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	0a1b      	lsrs	r3, r3, #8
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7ff fecb 	bl	800db08 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7ff fec6 	bl	800db08 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800dd80:	79fb      	ldrb	r3, [r7, #7]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d101      	bne.n	800dd8a <send_cmd+0x94>
 800dd86:	2395      	movs	r3, #149	; 0x95
 800dd88:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800dd8a:	79fb      	ldrb	r3, [r7, #7]
 800dd8c:	2b08      	cmp	r3, #8
 800dd8e:	d101      	bne.n	800dd94 <send_cmd+0x9e>
 800dd90:	2387      	movs	r3, #135	; 0x87
 800dd92:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800dd94:	7bfb      	ldrb	r3, [r7, #15]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7ff feb6 	bl	800db08 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800dd9c:	79fb      	ldrb	r3, [r7, #7]
 800dd9e:	2b0c      	cmp	r3, #12
 800dda0:	d102      	bne.n	800dda8 <send_cmd+0xb2>
 800dda2:	20ff      	movs	r0, #255	; 0xff
 800dda4:	f7ff feb0 	bl	800db08 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800dda8:	230a      	movs	r3, #10
 800ddaa:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800ddac:	20ff      	movs	r0, #255	; 0xff
 800ddae:	f7ff feab 	bl	800db08 <xchg_spi>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800ddb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	da05      	bge.n	800ddca <send_cmd+0xd4>
 800ddbe:	7bfb      	ldrb	r3, [r7, #15]
 800ddc0:	3b01      	subs	r3, #1
 800ddc2:	73fb      	strb	r3, [r7, #15]
 800ddc4:	7bfb      	ldrb	r3, [r7, #15]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1f0      	bne.n	800ddac <send_cmd+0xb6>

	return res;							/* Return received response */
 800ddca:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3710      	adds	r7, #16
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800ddd4:	b590      	push	{r4, r7, lr}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	4603      	mov	r3, r0
 800dddc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800ddde:	79fb      	ldrb	r3, [r7, #7]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <USER_SPI_initialize+0x14>
 800dde4:	2301      	movs	r3, #1
 800dde6:	e0d6      	b.n	800df96 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800dde8:	4b6d      	ldr	r3, [pc, #436]	; (800dfa0 <USER_SPI_initialize+0x1cc>)
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	f003 0302 	and.w	r3, r3, #2
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d003      	beq.n	800ddfe <USER_SPI_initialize+0x2a>
 800ddf6:	4b6a      	ldr	r3, [pc, #424]	; (800dfa0 <USER_SPI_initialize+0x1cc>)
 800ddf8:	781b      	ldrb	r3, [r3, #0]
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	e0cb      	b.n	800df96 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800ddfe:	4b69      	ldr	r3, [pc, #420]	; (800dfa4 <USER_SPI_initialize+0x1d0>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800de08:	4b66      	ldr	r3, [pc, #408]	; (800dfa4 <USER_SPI_initialize+0x1d0>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800de10:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800de12:	230a      	movs	r3, #10
 800de14:	73fb      	strb	r3, [r7, #15]
 800de16:	e005      	b.n	800de24 <USER_SPI_initialize+0x50>
 800de18:	20ff      	movs	r0, #255	; 0xff
 800de1a:	f7ff fe75 	bl	800db08 <xchg_spi>
 800de1e:	7bfb      	ldrb	r3, [r7, #15]
 800de20:	3b01      	subs	r3, #1
 800de22:	73fb      	strb	r3, [r7, #15]
 800de24:	7bfb      	ldrb	r3, [r7, #15]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1f6      	bne.n	800de18 <USER_SPI_initialize+0x44>

	ty = 0;
 800de2a:	2300      	movs	r3, #0
 800de2c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800de2e:	2100      	movs	r1, #0
 800de30:	2000      	movs	r0, #0
 800de32:	f7ff ff60 	bl	800dcf6 <send_cmd>
 800de36:	4603      	mov	r3, r0
 800de38:	2b01      	cmp	r3, #1
 800de3a:	f040 808b 	bne.w	800df54 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800de3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800de42:	f7ff fe37 	bl	800dab4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800de46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800de4a:	2008      	movs	r0, #8
 800de4c:	f7ff ff53 	bl	800dcf6 <send_cmd>
 800de50:	4603      	mov	r3, r0
 800de52:	2b01      	cmp	r3, #1
 800de54:	d151      	bne.n	800defa <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800de56:	2300      	movs	r3, #0
 800de58:	73fb      	strb	r3, [r7, #15]
 800de5a:	e00d      	b.n	800de78 <USER_SPI_initialize+0xa4>
 800de5c:	7bfc      	ldrb	r4, [r7, #15]
 800de5e:	20ff      	movs	r0, #255	; 0xff
 800de60:	f7ff fe52 	bl	800db08 <xchg_spi>
 800de64:	4603      	mov	r3, r0
 800de66:	461a      	mov	r2, r3
 800de68:	f107 0310 	add.w	r3, r7, #16
 800de6c:	4423      	add	r3, r4
 800de6e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800de72:	7bfb      	ldrb	r3, [r7, #15]
 800de74:	3301      	adds	r3, #1
 800de76:	73fb      	strb	r3, [r7, #15]
 800de78:	7bfb      	ldrb	r3, [r7, #15]
 800de7a:	2b03      	cmp	r3, #3
 800de7c:	d9ee      	bls.n	800de5c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800de7e:	7abb      	ldrb	r3, [r7, #10]
 800de80:	2b01      	cmp	r3, #1
 800de82:	d167      	bne.n	800df54 <USER_SPI_initialize+0x180>
 800de84:	7afb      	ldrb	r3, [r7, #11]
 800de86:	2baa      	cmp	r3, #170	; 0xaa
 800de88:	d164      	bne.n	800df54 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800de8a:	bf00      	nop
 800de8c:	f7ff fe26 	bl	800dadc <SPI_Timer_Status>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d007      	beq.n	800dea6 <USER_SPI_initialize+0xd2>
 800de96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800de9a:	20a9      	movs	r0, #169	; 0xa9
 800de9c:	f7ff ff2b 	bl	800dcf6 <send_cmd>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1f2      	bne.n	800de8c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800dea6:	f7ff fe19 	bl	800dadc <SPI_Timer_Status>
 800deaa:	4603      	mov	r3, r0
 800deac:	2b00      	cmp	r3, #0
 800deae:	d051      	beq.n	800df54 <USER_SPI_initialize+0x180>
 800deb0:	2100      	movs	r1, #0
 800deb2:	203a      	movs	r0, #58	; 0x3a
 800deb4:	f7ff ff1f 	bl	800dcf6 <send_cmd>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d14a      	bne.n	800df54 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800debe:	2300      	movs	r3, #0
 800dec0:	73fb      	strb	r3, [r7, #15]
 800dec2:	e00d      	b.n	800dee0 <USER_SPI_initialize+0x10c>
 800dec4:	7bfc      	ldrb	r4, [r7, #15]
 800dec6:	20ff      	movs	r0, #255	; 0xff
 800dec8:	f7ff fe1e 	bl	800db08 <xchg_spi>
 800decc:	4603      	mov	r3, r0
 800dece:	461a      	mov	r2, r3
 800ded0:	f107 0310 	add.w	r3, r7, #16
 800ded4:	4423      	add	r3, r4
 800ded6:	f803 2c08 	strb.w	r2, [r3, #-8]
 800deda:	7bfb      	ldrb	r3, [r7, #15]
 800dedc:	3301      	adds	r3, #1
 800dede:	73fb      	strb	r3, [r7, #15]
 800dee0:	7bfb      	ldrb	r3, [r7, #15]
 800dee2:	2b03      	cmp	r3, #3
 800dee4:	d9ee      	bls.n	800dec4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800dee6:	7a3b      	ldrb	r3, [r7, #8]
 800dee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deec:	2b00      	cmp	r3, #0
 800deee:	d001      	beq.n	800def4 <USER_SPI_initialize+0x120>
 800def0:	230c      	movs	r3, #12
 800def2:	e000      	b.n	800def6 <USER_SPI_initialize+0x122>
 800def4:	2304      	movs	r3, #4
 800def6:	737b      	strb	r3, [r7, #13]
 800def8:	e02c      	b.n	800df54 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800defa:	2100      	movs	r1, #0
 800defc:	20a9      	movs	r0, #169	; 0xa9
 800defe:	f7ff fefa 	bl	800dcf6 <send_cmd>
 800df02:	4603      	mov	r3, r0
 800df04:	2b01      	cmp	r3, #1
 800df06:	d804      	bhi.n	800df12 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800df08:	2302      	movs	r3, #2
 800df0a:	737b      	strb	r3, [r7, #13]
 800df0c:	23a9      	movs	r3, #169	; 0xa9
 800df0e:	73bb      	strb	r3, [r7, #14]
 800df10:	e003      	b.n	800df1a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800df12:	2301      	movs	r3, #1
 800df14:	737b      	strb	r3, [r7, #13]
 800df16:	2301      	movs	r3, #1
 800df18:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800df1a:	bf00      	nop
 800df1c:	f7ff fdde 	bl	800dadc <SPI_Timer_Status>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d007      	beq.n	800df36 <USER_SPI_initialize+0x162>
 800df26:	7bbb      	ldrb	r3, [r7, #14]
 800df28:	2100      	movs	r1, #0
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7ff fee3 	bl	800dcf6 <send_cmd>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	d1f2      	bne.n	800df1c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800df36:	f7ff fdd1 	bl	800dadc <SPI_Timer_Status>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d007      	beq.n	800df50 <USER_SPI_initialize+0x17c>
 800df40:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df44:	2010      	movs	r0, #16
 800df46:	f7ff fed6 	bl	800dcf6 <send_cmd>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d001      	beq.n	800df54 <USER_SPI_initialize+0x180>
				ty = 0;
 800df50:	2300      	movs	r3, #0
 800df52:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800df54:	4a14      	ldr	r2, [pc, #80]	; (800dfa8 <USER_SPI_initialize+0x1d4>)
 800df56:	7b7b      	ldrb	r3, [r7, #13]
 800df58:	7013      	strb	r3, [r2, #0]
	despiselect();
 800df5a:	f7ff fe45 	bl	800dbe8 <despiselect>

	if (ty) {			/* OK */
 800df5e:	7b7b      	ldrb	r3, [r7, #13]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d012      	beq.n	800df8a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800df64:	4b0f      	ldr	r3, [pc, #60]	; (800dfa4 <USER_SPI_initialize+0x1d0>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800df6e:	4b0d      	ldr	r3, [pc, #52]	; (800dfa4 <USER_SPI_initialize+0x1d0>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f042 0210 	orr.w	r2, r2, #16
 800df76:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800df78:	4b09      	ldr	r3, [pc, #36]	; (800dfa0 <USER_SPI_initialize+0x1cc>)
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	b2db      	uxtb	r3, r3
 800df7e:	f023 0301 	bic.w	r3, r3, #1
 800df82:	b2da      	uxtb	r2, r3
 800df84:	4b06      	ldr	r3, [pc, #24]	; (800dfa0 <USER_SPI_initialize+0x1cc>)
 800df86:	701a      	strb	r2, [r3, #0]
 800df88:	e002      	b.n	800df90 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800df8a:	4b05      	ldr	r3, [pc, #20]	; (800dfa0 <USER_SPI_initialize+0x1cc>)
 800df8c:	2201      	movs	r2, #1
 800df8e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800df90:	4b03      	ldr	r3, [pc, #12]	; (800dfa0 <USER_SPI_initialize+0x1cc>)
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	b2db      	uxtb	r3, r3
}
 800df96:	4618      	mov	r0, r3
 800df98:	3714      	adds	r7, #20
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd90      	pop	{r4, r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	20000024 	.word	0x20000024
 800dfa4:	2000140c 	.word	0x2000140c
 800dfa8:	2000064d 	.word	0x2000064d

0800dfac <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b083      	sub	sp, #12
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800dfb6:	79fb      	ldrb	r3, [r7, #7]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d001      	beq.n	800dfc0 <USER_SPI_status+0x14>
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	e002      	b.n	800dfc6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800dfc0:	4b04      	ldr	r3, [pc, #16]	; (800dfd4 <USER_SPI_status+0x28>)
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	b2db      	uxtb	r3, r3
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	370c      	adds	r7, #12
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	20000024 	.word	0x20000024

0800dfd8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	60b9      	str	r1, [r7, #8]
 800dfe0:	607a      	str	r2, [r7, #4]
 800dfe2:	603b      	str	r3, [r7, #0]
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800dfe8:	7bfb      	ldrb	r3, [r7, #15]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d102      	bne.n	800dff4 <USER_SPI_read+0x1c>
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d101      	bne.n	800dff8 <USER_SPI_read+0x20>
 800dff4:	2304      	movs	r3, #4
 800dff6:	e04d      	b.n	800e094 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800dff8:	4b28      	ldr	r3, [pc, #160]	; (800e09c <USER_SPI_read+0xc4>)
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	f003 0301 	and.w	r3, r3, #1
 800e002:	2b00      	cmp	r3, #0
 800e004:	d001      	beq.n	800e00a <USER_SPI_read+0x32>
 800e006:	2303      	movs	r3, #3
 800e008:	e044      	b.n	800e094 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800e00a:	4b25      	ldr	r3, [pc, #148]	; (800e0a0 <USER_SPI_read+0xc8>)
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	f003 0308 	and.w	r3, r3, #8
 800e012:	2b00      	cmp	r3, #0
 800e014:	d102      	bne.n	800e01c <USER_SPI_read+0x44>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	025b      	lsls	r3, r3, #9
 800e01a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d111      	bne.n	800e046 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800e022:	6879      	ldr	r1, [r7, #4]
 800e024:	2011      	movs	r0, #17
 800e026:	f7ff fe66 	bl	800dcf6 <send_cmd>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d129      	bne.n	800e084 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800e030:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e034:	68b8      	ldr	r0, [r7, #8]
 800e036:	f7ff fe03 	bl	800dc40 <rcvr_datablock>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d021      	beq.n	800e084 <USER_SPI_read+0xac>
			count = 0;
 800e040:	2300      	movs	r3, #0
 800e042:	603b      	str	r3, [r7, #0]
 800e044:	e01e      	b.n	800e084 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800e046:	6879      	ldr	r1, [r7, #4]
 800e048:	2012      	movs	r0, #18
 800e04a:	f7ff fe54 	bl	800dcf6 <send_cmd>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d117      	bne.n	800e084 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800e054:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e058:	68b8      	ldr	r0, [r7, #8]
 800e05a:	f7ff fdf1 	bl	800dc40 <rcvr_datablock>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00a      	beq.n	800e07a <USER_SPI_read+0xa2>
				buff += 512;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e06a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	3b01      	subs	r3, #1
 800e070:	603b      	str	r3, [r7, #0]
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d1ed      	bne.n	800e054 <USER_SPI_read+0x7c>
 800e078:	e000      	b.n	800e07c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800e07a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800e07c:	2100      	movs	r1, #0
 800e07e:	200c      	movs	r0, #12
 800e080:	f7ff fe39 	bl	800dcf6 <send_cmd>
		}
	}
	despiselect();
 800e084:	f7ff fdb0 	bl	800dbe8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	bf14      	ite	ne
 800e08e:	2301      	movne	r3, #1
 800e090:	2300      	moveq	r3, #0
 800e092:	b2db      	uxtb	r3, r3
}
 800e094:	4618      	mov	r0, r3
 800e096:	3710      	adds	r7, #16
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	20000024 	.word	0x20000024
 800e0a0:	2000064d 	.word	0x2000064d

0800e0a4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60b9      	str	r1, [r7, #8]
 800e0ac:	607a      	str	r2, [r7, #4]
 800e0ae:	603b      	str	r3, [r7, #0]
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800e0b4:	7bfb      	ldrb	r3, [r7, #15]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d102      	bne.n	800e0c0 <USER_SPI_write+0x1c>
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d101      	bne.n	800e0c4 <USER_SPI_write+0x20>
 800e0c0:	2304      	movs	r3, #4
 800e0c2:	e063      	b.n	800e18c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800e0c4:	4b33      	ldr	r3, [pc, #204]	; (800e194 <USER_SPI_write+0xf0>)
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	b2db      	uxtb	r3, r3
 800e0ca:	f003 0301 	and.w	r3, r3, #1
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d001      	beq.n	800e0d6 <USER_SPI_write+0x32>
 800e0d2:	2303      	movs	r3, #3
 800e0d4:	e05a      	b.n	800e18c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800e0d6:	4b2f      	ldr	r3, [pc, #188]	; (800e194 <USER_SPI_write+0xf0>)
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	f003 0304 	and.w	r3, r3, #4
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d001      	beq.n	800e0e8 <USER_SPI_write+0x44>
 800e0e4:	2302      	movs	r3, #2
 800e0e6:	e051      	b.n	800e18c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800e0e8:	4b2b      	ldr	r3, [pc, #172]	; (800e198 <USER_SPI_write+0xf4>)
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	f003 0308 	and.w	r3, r3, #8
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d102      	bne.n	800e0fa <USER_SPI_write+0x56>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	025b      	lsls	r3, r3, #9
 800e0f8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d110      	bne.n	800e122 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800e100:	6879      	ldr	r1, [r7, #4]
 800e102:	2018      	movs	r0, #24
 800e104:	f7ff fdf7 	bl	800dcf6 <send_cmd>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d136      	bne.n	800e17c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800e10e:	21fe      	movs	r1, #254	; 0xfe
 800e110:	68b8      	ldr	r0, [r7, #8]
 800e112:	f7ff fdbe 	bl	800dc92 <xmit_datablock>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d02f      	beq.n	800e17c <USER_SPI_write+0xd8>
			count = 0;
 800e11c:	2300      	movs	r3, #0
 800e11e:	603b      	str	r3, [r7, #0]
 800e120:	e02c      	b.n	800e17c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800e122:	4b1d      	ldr	r3, [pc, #116]	; (800e198 <USER_SPI_write+0xf4>)
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	f003 0306 	and.w	r3, r3, #6
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d003      	beq.n	800e136 <USER_SPI_write+0x92>
 800e12e:	6839      	ldr	r1, [r7, #0]
 800e130:	2097      	movs	r0, #151	; 0x97
 800e132:	f7ff fde0 	bl	800dcf6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800e136:	6879      	ldr	r1, [r7, #4]
 800e138:	2019      	movs	r0, #25
 800e13a:	f7ff fddc 	bl	800dcf6 <send_cmd>
 800e13e:	4603      	mov	r3, r0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d11b      	bne.n	800e17c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800e144:	21fc      	movs	r1, #252	; 0xfc
 800e146:	68b8      	ldr	r0, [r7, #8]
 800e148:	f7ff fda3 	bl	800dc92 <xmit_datablock>
 800e14c:	4603      	mov	r3, r0
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d00a      	beq.n	800e168 <USER_SPI_write+0xc4>
				buff += 512;
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e158:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	3b01      	subs	r3, #1
 800e15e:	603b      	str	r3, [r7, #0]
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1ee      	bne.n	800e144 <USER_SPI_write+0xa0>
 800e166:	e000      	b.n	800e16a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800e168:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800e16a:	21fd      	movs	r1, #253	; 0xfd
 800e16c:	2000      	movs	r0, #0
 800e16e:	f7ff fd90 	bl	800dc92 <xmit_datablock>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <USER_SPI_write+0xd8>
 800e178:	2301      	movs	r3, #1
 800e17a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800e17c:	f7ff fd34 	bl	800dbe8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	bf14      	ite	ne
 800e186:	2301      	movne	r3, #1
 800e188:	2300      	moveq	r3, #0
 800e18a:	b2db      	uxtb	r3, r3
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3710      	adds	r7, #16
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	20000024 	.word	0x20000024
 800e198:	2000064d 	.word	0x2000064d

0800e19c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b08c      	sub	sp, #48	; 0x30
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	603a      	str	r2, [r7, #0]
 800e1a6:	71fb      	strb	r3, [r7, #7]
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800e1ac:	79fb      	ldrb	r3, [r7, #7]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <USER_SPI_ioctl+0x1a>
 800e1b2:	2304      	movs	r3, #4
 800e1b4:	e15a      	b.n	800e46c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e1b6:	4baf      	ldr	r3, [pc, #700]	; (800e474 <USER_SPI_ioctl+0x2d8>)
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	b2db      	uxtb	r3, r3
 800e1bc:	f003 0301 	and.w	r3, r3, #1
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d001      	beq.n	800e1c8 <USER_SPI_ioctl+0x2c>
 800e1c4:	2303      	movs	r3, #3
 800e1c6:	e151      	b.n	800e46c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800e1ce:	79bb      	ldrb	r3, [r7, #6]
 800e1d0:	2b04      	cmp	r3, #4
 800e1d2:	f200 8136 	bhi.w	800e442 <USER_SPI_ioctl+0x2a6>
 800e1d6:	a201      	add	r2, pc, #4	; (adr r2, 800e1dc <USER_SPI_ioctl+0x40>)
 800e1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1dc:	0800e1f1 	.word	0x0800e1f1
 800e1e0:	0800e205 	.word	0x0800e205
 800e1e4:	0800e443 	.word	0x0800e443
 800e1e8:	0800e2b1 	.word	0x0800e2b1
 800e1ec:	0800e3a7 	.word	0x0800e3a7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800e1f0:	f7ff fd0a 	bl	800dc08 <spiselect>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f000 8127 	beq.w	800e44a <USER_SPI_ioctl+0x2ae>
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800e202:	e122      	b.n	800e44a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800e204:	2100      	movs	r1, #0
 800e206:	2009      	movs	r0, #9
 800e208:	f7ff fd75 	bl	800dcf6 <send_cmd>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	f040 811d 	bne.w	800e44e <USER_SPI_ioctl+0x2b2>
 800e214:	f107 030c 	add.w	r3, r7, #12
 800e218:	2110      	movs	r1, #16
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7ff fd10 	bl	800dc40 <rcvr_datablock>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	f000 8113 	beq.w	800e44e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800e228:	7b3b      	ldrb	r3, [r7, #12]
 800e22a:	099b      	lsrs	r3, r3, #6
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d111      	bne.n	800e256 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800e232:	7d7b      	ldrb	r3, [r7, #21]
 800e234:	461a      	mov	r2, r3
 800e236:	7d3b      	ldrb	r3, [r7, #20]
 800e238:	021b      	lsls	r3, r3, #8
 800e23a:	4413      	add	r3, r2
 800e23c:	461a      	mov	r2, r3
 800e23e:	7cfb      	ldrb	r3, [r7, #19]
 800e240:	041b      	lsls	r3, r3, #16
 800e242:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800e246:	4413      	add	r3, r2
 800e248:	3301      	adds	r3, #1
 800e24a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	029a      	lsls	r2, r3, #10
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	601a      	str	r2, [r3, #0]
 800e254:	e028      	b.n	800e2a8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e256:	7c7b      	ldrb	r3, [r7, #17]
 800e258:	f003 030f 	and.w	r3, r3, #15
 800e25c:	b2da      	uxtb	r2, r3
 800e25e:	7dbb      	ldrb	r3, [r7, #22]
 800e260:	09db      	lsrs	r3, r3, #7
 800e262:	b2db      	uxtb	r3, r3
 800e264:	4413      	add	r3, r2
 800e266:	b2da      	uxtb	r2, r3
 800e268:	7d7b      	ldrb	r3, [r7, #21]
 800e26a:	005b      	lsls	r3, r3, #1
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	f003 0306 	and.w	r3, r3, #6
 800e272:	b2db      	uxtb	r3, r3
 800e274:	4413      	add	r3, r2
 800e276:	b2db      	uxtb	r3, r3
 800e278:	3302      	adds	r3, #2
 800e27a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800e27e:	7d3b      	ldrb	r3, [r7, #20]
 800e280:	099b      	lsrs	r3, r3, #6
 800e282:	b2db      	uxtb	r3, r3
 800e284:	461a      	mov	r2, r3
 800e286:	7cfb      	ldrb	r3, [r7, #19]
 800e288:	009b      	lsls	r3, r3, #2
 800e28a:	441a      	add	r2, r3
 800e28c:	7cbb      	ldrb	r3, [r7, #18]
 800e28e:	029b      	lsls	r3, r3, #10
 800e290:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e294:	4413      	add	r3, r2
 800e296:	3301      	adds	r3, #1
 800e298:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800e29a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e29e:	3b09      	subs	r3, #9
 800e2a0:	69fa      	ldr	r2, [r7, #28]
 800e2a2:	409a      	lsls	r2, r3
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800e2ae:	e0ce      	b.n	800e44e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800e2b0:	4b71      	ldr	r3, [pc, #452]	; (800e478 <USER_SPI_ioctl+0x2dc>)
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	f003 0304 	and.w	r3, r3, #4
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d031      	beq.n	800e320 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800e2bc:	2100      	movs	r1, #0
 800e2be:	208d      	movs	r0, #141	; 0x8d
 800e2c0:	f7ff fd19 	bl	800dcf6 <send_cmd>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	f040 80c3 	bne.w	800e452 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800e2cc:	20ff      	movs	r0, #255	; 0xff
 800e2ce:	f7ff fc1b 	bl	800db08 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800e2d2:	f107 030c 	add.w	r3, r7, #12
 800e2d6:	2110      	movs	r1, #16
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7ff fcb1 	bl	800dc40 <rcvr_datablock>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 80b6 	beq.w	800e452 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800e2e6:	2330      	movs	r3, #48	; 0x30
 800e2e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e2ec:	e007      	b.n	800e2fe <USER_SPI_ioctl+0x162>
 800e2ee:	20ff      	movs	r0, #255	; 0xff
 800e2f0:	f7ff fc0a 	bl	800db08 <xchg_spi>
 800e2f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e2fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1f3      	bne.n	800e2ee <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800e306:	7dbb      	ldrb	r3, [r7, #22]
 800e308:	091b      	lsrs	r3, r3, #4
 800e30a:	b2db      	uxtb	r3, r3
 800e30c:	461a      	mov	r2, r3
 800e30e:	2310      	movs	r3, #16
 800e310:	fa03 f202 	lsl.w	r2, r3, r2
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800e318:	2300      	movs	r3, #0
 800e31a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800e31e:	e098      	b.n	800e452 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800e320:	2100      	movs	r1, #0
 800e322:	2009      	movs	r0, #9
 800e324:	f7ff fce7 	bl	800dcf6 <send_cmd>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f040 8091 	bne.w	800e452 <USER_SPI_ioctl+0x2b6>
 800e330:	f107 030c 	add.w	r3, r7, #12
 800e334:	2110      	movs	r1, #16
 800e336:	4618      	mov	r0, r3
 800e338:	f7ff fc82 	bl	800dc40 <rcvr_datablock>
 800e33c:	4603      	mov	r3, r0
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f000 8087 	beq.w	800e452 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800e344:	4b4c      	ldr	r3, [pc, #304]	; (800e478 <USER_SPI_ioctl+0x2dc>)
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	f003 0302 	and.w	r3, r3, #2
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d012      	beq.n	800e376 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800e350:	7dbb      	ldrb	r3, [r7, #22]
 800e352:	005b      	lsls	r3, r3, #1
 800e354:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800e358:	7dfa      	ldrb	r2, [r7, #23]
 800e35a:	09d2      	lsrs	r2, r2, #7
 800e35c:	b2d2      	uxtb	r2, r2
 800e35e:	4413      	add	r3, r2
 800e360:	1c5a      	adds	r2, r3, #1
 800e362:	7e7b      	ldrb	r3, [r7, #25]
 800e364:	099b      	lsrs	r3, r3, #6
 800e366:	b2db      	uxtb	r3, r3
 800e368:	3b01      	subs	r3, #1
 800e36a:	fa02 f303 	lsl.w	r3, r2, r3
 800e36e:	461a      	mov	r2, r3
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	601a      	str	r2, [r3, #0]
 800e374:	e013      	b.n	800e39e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800e376:	7dbb      	ldrb	r3, [r7, #22]
 800e378:	109b      	asrs	r3, r3, #2
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	f003 031f 	and.w	r3, r3, #31
 800e380:	3301      	adds	r3, #1
 800e382:	7dfa      	ldrb	r2, [r7, #23]
 800e384:	00d2      	lsls	r2, r2, #3
 800e386:	f002 0218 	and.w	r2, r2, #24
 800e38a:	7df9      	ldrb	r1, [r7, #23]
 800e38c:	0949      	lsrs	r1, r1, #5
 800e38e:	b2c9      	uxtb	r1, r1
 800e390:	440a      	add	r2, r1
 800e392:	3201      	adds	r2, #1
 800e394:	fb02 f303 	mul.w	r3, r2, r3
 800e398:	461a      	mov	r2, r3
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800e3a4:	e055      	b.n	800e452 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e3a6:	4b34      	ldr	r3, [pc, #208]	; (800e478 <USER_SPI_ioctl+0x2dc>)
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	f003 0306 	and.w	r3, r3, #6
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d051      	beq.n	800e456 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e3b2:	f107 020c 	add.w	r2, r7, #12
 800e3b6:	79fb      	ldrb	r3, [r7, #7]
 800e3b8:	210b      	movs	r1, #11
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7ff feee 	bl	800e19c <USER_SPI_ioctl>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d149      	bne.n	800e45a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e3c6:	7b3b      	ldrb	r3, [r7, #12]
 800e3c8:	099b      	lsrs	r3, r3, #6
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d104      	bne.n	800e3da <USER_SPI_ioctl+0x23e>
 800e3d0:	7dbb      	ldrb	r3, [r7, #22]
 800e3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d041      	beq.n	800e45e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	623b      	str	r3, [r7, #32]
 800e3de:	6a3b      	ldr	r3, [r7, #32]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3e4:	6a3b      	ldr	r3, [r7, #32]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800e3ea:	4b23      	ldr	r3, [pc, #140]	; (800e478 <USER_SPI_ioctl+0x2dc>)
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	f003 0308 	and.w	r3, r3, #8
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d105      	bne.n	800e402 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f8:	025b      	lsls	r3, r3, #9
 800e3fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fe:	025b      	lsls	r3, r3, #9
 800e400:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800e402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e404:	2020      	movs	r0, #32
 800e406:	f7ff fc76 	bl	800dcf6 <send_cmd>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d128      	bne.n	800e462 <USER_SPI_ioctl+0x2c6>
 800e410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e412:	2021      	movs	r0, #33	; 0x21
 800e414:	f7ff fc6f 	bl	800dcf6 <send_cmd>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d121      	bne.n	800e462 <USER_SPI_ioctl+0x2c6>
 800e41e:	2100      	movs	r1, #0
 800e420:	2026      	movs	r0, #38	; 0x26
 800e422:	f7ff fc68 	bl	800dcf6 <send_cmd>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d11a      	bne.n	800e462 <USER_SPI_ioctl+0x2c6>
 800e42c:	f247 5030 	movw	r0, #30000	; 0x7530
 800e430:	f7ff fbb7 	bl	800dba2 <wait_ready>
 800e434:	4603      	mov	r3, r0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d013      	beq.n	800e462 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800e43a:	2300      	movs	r3, #0
 800e43c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800e440:	e00f      	b.n	800e462 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800e442:	2304      	movs	r3, #4
 800e444:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e448:	e00c      	b.n	800e464 <USER_SPI_ioctl+0x2c8>
		break;
 800e44a:	bf00      	nop
 800e44c:	e00a      	b.n	800e464 <USER_SPI_ioctl+0x2c8>
		break;
 800e44e:	bf00      	nop
 800e450:	e008      	b.n	800e464 <USER_SPI_ioctl+0x2c8>
		break;
 800e452:	bf00      	nop
 800e454:	e006      	b.n	800e464 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e456:	bf00      	nop
 800e458:	e004      	b.n	800e464 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e45a:	bf00      	nop
 800e45c:	e002      	b.n	800e464 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e45e:	bf00      	nop
 800e460:	e000      	b.n	800e464 <USER_SPI_ioctl+0x2c8>
		break;
 800e462:	bf00      	nop
	}

	despiselect();
 800e464:	f7ff fbc0 	bl	800dbe8 <despiselect>

	return res;
 800e468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3730      	adds	r7, #48	; 0x30
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}
 800e474:	20000024 	.word	0x20000024
 800e478:	2000064d 	.word	0x2000064d

0800e47c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	460b      	mov	r3, r1
 800e486:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e488:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e48c:	f004 fb18 	bl	8012ac0 <USBD_static_malloc>
 800e490:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d105      	bne.n	800e4a4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2200      	movs	r2, #0
 800e49c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e4a0:	2302      	movs	r3, #2
 800e4a2:	e066      	b.n	800e572 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	68fa      	ldr	r2, [r7, #12]
 800e4a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	7c1b      	ldrb	r3, [r3, #16]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d119      	bne.n	800e4e8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e4b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4b8:	2202      	movs	r2, #2
 800e4ba:	2181      	movs	r1, #129	; 0x81
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f004 f9dc 	bl	801287a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e4c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4cc:	2202      	movs	r2, #2
 800e4ce:	2101      	movs	r1, #1
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f004 f9d2 	bl	801287a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2201      	movs	r2, #1
 800e4da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2210      	movs	r2, #16
 800e4e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e4e6:	e016      	b.n	800e516 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e4e8:	2340      	movs	r3, #64	; 0x40
 800e4ea:	2202      	movs	r2, #2
 800e4ec:	2181      	movs	r1, #129	; 0x81
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f004 f9c3 	bl	801287a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e4fa:	2340      	movs	r3, #64	; 0x40
 800e4fc:	2202      	movs	r2, #2
 800e4fe:	2101      	movs	r1, #1
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f004 f9ba 	bl	801287a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2201      	movs	r2, #1
 800e50a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2210      	movs	r2, #16
 800e512:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e516:	2308      	movs	r3, #8
 800e518:	2203      	movs	r2, #3
 800e51a:	2182      	movs	r1, #130	; 0x82
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f004 f9ac 	bl	801287a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2201      	movs	r2, #1
 800e526:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2200      	movs	r2, #0
 800e538:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2200      	movs	r2, #0
 800e540:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	7c1b      	ldrb	r3, [r3, #16]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d109      	bne.n	800e560 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e552:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e556:	2101      	movs	r1, #1
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f004 fa7d 	bl	8012a58 <USBD_LL_PrepareReceive>
 800e55e:	e007      	b.n	800e570 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e566:	2340      	movs	r3, #64	; 0x40
 800e568:	2101      	movs	r1, #1
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f004 fa74 	bl	8012a58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3710      	adds	r7, #16
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b082      	sub	sp, #8
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
 800e582:	460b      	mov	r3, r1
 800e584:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e586:	2181      	movs	r1, #129	; 0x81
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f004 f99c 	bl	80128c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e594:	2101      	movs	r1, #1
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f004 f995 	bl	80128c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e5a4:	2182      	movs	r1, #130	; 0x82
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f004 f98d 	bl	80128c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d00e      	beq.n	800e5e4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f004 fa80 	bl	8012adc <USBD_static_free>
    pdev->pClassData = NULL;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e5e4:	2300      	movs	r3, #0
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
	...

0800e5f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b086      	sub	sp, #24
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e600:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e602:	2300      	movs	r3, #0
 800e604:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e606:	2300      	movs	r3, #0
 800e608:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e60a:	2300      	movs	r3, #0
 800e60c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d101      	bne.n	800e618 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e614:	2303      	movs	r3, #3
 800e616:	e0af      	b.n	800e778 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e620:	2b00      	cmp	r3, #0
 800e622:	d03f      	beq.n	800e6a4 <USBD_CDC_Setup+0xb4>
 800e624:	2b20      	cmp	r3, #32
 800e626:	f040 809f 	bne.w	800e768 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	88db      	ldrh	r3, [r3, #6]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d02e      	beq.n	800e690 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	b25b      	sxtb	r3, r3
 800e638:	2b00      	cmp	r3, #0
 800e63a:	da16      	bge.n	800e66a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	683a      	ldr	r2, [r7, #0]
 800e646:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e648:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e64a:	683a      	ldr	r2, [r7, #0]
 800e64c:	88d2      	ldrh	r2, [r2, #6]
 800e64e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	88db      	ldrh	r3, [r3, #6]
 800e654:	2b07      	cmp	r3, #7
 800e656:	bf28      	it	cs
 800e658:	2307      	movcs	r3, #7
 800e65a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	89fa      	ldrh	r2, [r7, #14]
 800e660:	4619      	mov	r1, r3
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f001 fb19 	bl	800fc9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e668:	e085      	b.n	800e776 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	785a      	ldrb	r2, [r3, #1]
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	88db      	ldrh	r3, [r3, #6]
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e680:	6939      	ldr	r1, [r7, #16]
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	88db      	ldrh	r3, [r3, #6]
 800e686:	461a      	mov	r2, r3
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f001 fb32 	bl	800fcf2 <USBD_CtlPrepareRx>
      break;
 800e68e:	e072      	b.n	800e776 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	683a      	ldr	r2, [r7, #0]
 800e69a:	7850      	ldrb	r0, [r2, #1]
 800e69c:	2200      	movs	r2, #0
 800e69e:	6839      	ldr	r1, [r7, #0]
 800e6a0:	4798      	blx	r3
      break;
 800e6a2:	e068      	b.n	800e776 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	785b      	ldrb	r3, [r3, #1]
 800e6a8:	2b0b      	cmp	r3, #11
 800e6aa:	d852      	bhi.n	800e752 <USBD_CDC_Setup+0x162>
 800e6ac:	a201      	add	r2, pc, #4	; (adr r2, 800e6b4 <USBD_CDC_Setup+0xc4>)
 800e6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6b2:	bf00      	nop
 800e6b4:	0800e6e5 	.word	0x0800e6e5
 800e6b8:	0800e761 	.word	0x0800e761
 800e6bc:	0800e753 	.word	0x0800e753
 800e6c0:	0800e753 	.word	0x0800e753
 800e6c4:	0800e753 	.word	0x0800e753
 800e6c8:	0800e753 	.word	0x0800e753
 800e6cc:	0800e753 	.word	0x0800e753
 800e6d0:	0800e753 	.word	0x0800e753
 800e6d4:	0800e753 	.word	0x0800e753
 800e6d8:	0800e753 	.word	0x0800e753
 800e6dc:	0800e70f 	.word	0x0800e70f
 800e6e0:	0800e739 	.word	0x0800e739
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	2b03      	cmp	r3, #3
 800e6ee:	d107      	bne.n	800e700 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e6f0:	f107 030a 	add.w	r3, r7, #10
 800e6f4:	2202      	movs	r2, #2
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f001 face 	bl	800fc9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e6fe:	e032      	b.n	800e766 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e700:	6839      	ldr	r1, [r7, #0]
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f001 fa58 	bl	800fbb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e708:	2303      	movs	r3, #3
 800e70a:	75fb      	strb	r3, [r7, #23]
          break;
 800e70c:	e02b      	b.n	800e766 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e714:	b2db      	uxtb	r3, r3
 800e716:	2b03      	cmp	r3, #3
 800e718:	d107      	bne.n	800e72a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e71a:	f107 030d 	add.w	r3, r7, #13
 800e71e:	2201      	movs	r2, #1
 800e720:	4619      	mov	r1, r3
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f001 fab9 	bl	800fc9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e728:	e01d      	b.n	800e766 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e72a:	6839      	ldr	r1, [r7, #0]
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f001 fa43 	bl	800fbb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e732:	2303      	movs	r3, #3
 800e734:	75fb      	strb	r3, [r7, #23]
          break;
 800e736:	e016      	b.n	800e766 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	2b03      	cmp	r3, #3
 800e742:	d00f      	beq.n	800e764 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e744:	6839      	ldr	r1, [r7, #0]
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f001 fa36 	bl	800fbb8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e74c:	2303      	movs	r3, #3
 800e74e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e750:	e008      	b.n	800e764 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e752:	6839      	ldr	r1, [r7, #0]
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f001 fa2f 	bl	800fbb8 <USBD_CtlError>
          ret = USBD_FAIL;
 800e75a:	2303      	movs	r3, #3
 800e75c:	75fb      	strb	r3, [r7, #23]
          break;
 800e75e:	e002      	b.n	800e766 <USBD_CDC_Setup+0x176>
          break;
 800e760:	bf00      	nop
 800e762:	e008      	b.n	800e776 <USBD_CDC_Setup+0x186>
          break;
 800e764:	bf00      	nop
      }
      break;
 800e766:	e006      	b.n	800e776 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e768:	6839      	ldr	r1, [r7, #0]
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f001 fa24 	bl	800fbb8 <USBD_CtlError>
      ret = USBD_FAIL;
 800e770:	2303      	movs	r3, #3
 800e772:	75fb      	strb	r3, [r7, #23]
      break;
 800e774:	bf00      	nop
  }

  return (uint8_t)ret;
 800e776:	7dfb      	ldrb	r3, [r7, #23]
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3718      	adds	r7, #24
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	460b      	mov	r3, r1
 800e78a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e792:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d101      	bne.n	800e7a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e79e:	2303      	movs	r3, #3
 800e7a0:	e04f      	b.n	800e842 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e7aa:	78fa      	ldrb	r2, [r7, #3]
 800e7ac:	6879      	ldr	r1, [r7, #4]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	4413      	add	r3, r2
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	440b      	add	r3, r1
 800e7b8:	3318      	adds	r3, #24
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d029      	beq.n	800e814 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e7c0:	78fa      	ldrb	r2, [r7, #3]
 800e7c2:	6879      	ldr	r1, [r7, #4]
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4413      	add	r3, r2
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	440b      	add	r3, r1
 800e7ce:	3318      	adds	r3, #24
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	78f9      	ldrb	r1, [r7, #3]
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	460b      	mov	r3, r1
 800e7d8:	00db      	lsls	r3, r3, #3
 800e7da:	1a5b      	subs	r3, r3, r1
 800e7dc:	009b      	lsls	r3, r3, #2
 800e7de:	4403      	add	r3, r0
 800e7e0:	3344      	adds	r3, #68	; 0x44
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800e7e8:	fb03 f301 	mul.w	r3, r3, r1
 800e7ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d110      	bne.n	800e814 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e7f2:	78fa      	ldrb	r2, [r7, #3]
 800e7f4:	6879      	ldr	r1, [r7, #4]
 800e7f6:	4613      	mov	r3, r2
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	4413      	add	r3, r2
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	440b      	add	r3, r1
 800e800:	3318      	adds	r3, #24
 800e802:	2200      	movs	r2, #0
 800e804:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e806:	78f9      	ldrb	r1, [r7, #3]
 800e808:	2300      	movs	r3, #0
 800e80a:	2200      	movs	r2, #0
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f004 f902 	bl	8012a16 <USBD_LL_Transmit>
 800e812:	e015      	b.n	800e840 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	2200      	movs	r2, #0
 800e818:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e822:	691b      	ldr	r3, [r3, #16]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00b      	beq.n	800e840 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e82e:	691b      	ldr	r3, [r3, #16]
 800e830:	68ba      	ldr	r2, [r7, #8]
 800e832:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e836:	68ba      	ldr	r2, [r7, #8]
 800e838:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e83c:	78fa      	ldrb	r2, [r7, #3]
 800e83e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e840:	2300      	movs	r3, #0
}
 800e842:	4618      	mov	r0, r3
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}

0800e84a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e84a:	b580      	push	{r7, lr}
 800e84c:	b084      	sub	sp, #16
 800e84e:	af00      	add	r7, sp, #0
 800e850:	6078      	str	r0, [r7, #4]
 800e852:	460b      	mov	r3, r1
 800e854:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e85c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e864:	2b00      	cmp	r3, #0
 800e866:	d101      	bne.n	800e86c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e868:	2303      	movs	r3, #3
 800e86a:	e015      	b.n	800e898 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e86c:	78fb      	ldrb	r3, [r7, #3]
 800e86e:	4619      	mov	r1, r3
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f004 f912 	bl	8012a9a <USBD_LL_GetRxDataSize>
 800e876:	4602      	mov	r2, r0
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e884:	68db      	ldr	r3, [r3, #12]
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e892:	4611      	mov	r1, r2
 800e894:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d101      	bne.n	800e8ba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e8b6:	2303      	movs	r3, #3
 800e8b8:	e01b      	b.n	800e8f2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d015      	beq.n	800e8f0 <USBD_CDC_EP0_RxReady+0x50>
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e8ca:	2bff      	cmp	r3, #255	; 0xff
 800e8cc:	d010      	beq.n	800e8f0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8d4:	689b      	ldr	r3, [r3, #8]
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e8dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e8de:	68fa      	ldr	r2, [r7, #12]
 800e8e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e8e4:	b292      	uxth	r2, r2
 800e8e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	22ff      	movs	r2, #255	; 0xff
 800e8ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e8f0:	2300      	movs	r3, #0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3710      	adds	r7, #16
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
	...

0800e8fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2243      	movs	r2, #67	; 0x43
 800e908:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e90a:	4b03      	ldr	r3, [pc, #12]	; (800e918 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	370c      	adds	r7, #12
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr
 800e918:	200000b0 	.word	0x200000b0

0800e91c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2243      	movs	r2, #67	; 0x43
 800e928:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e92a:	4b03      	ldr	r3, [pc, #12]	; (800e938 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	370c      	adds	r7, #12
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr
 800e938:	2000006c 	.word	0x2000006c

0800e93c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b083      	sub	sp, #12
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2243      	movs	r2, #67	; 0x43
 800e948:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e94a:	4b03      	ldr	r3, [pc, #12]	; (800e958 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr
 800e958:	200000f4 	.word	0x200000f4

0800e95c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b083      	sub	sp, #12
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	220a      	movs	r2, #10
 800e968:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e96a:	4b03      	ldr	r3, [pc, #12]	; (800e978 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr
 800e978:	20000028 	.word	0x20000028

0800e97c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d101      	bne.n	800e990 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e98c:	2303      	movs	r3, #3
 800e98e:	e004      	b.n	800e99a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e998:	2300      	movs	r3, #0
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	370c      	adds	r7, #12
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr

0800e9a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e9a6:	b480      	push	{r7}
 800e9a8:	b087      	sub	sp, #28
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	60f8      	str	r0, [r7, #12]
 800e9ae:	60b9      	str	r1, [r7, #8]
 800e9b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9b8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d101      	bne.n	800e9c4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e9c0:	2303      	movs	r3, #3
 800e9c2:	e008      	b.n	800e9d6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	68ba      	ldr	r2, [r7, #8]
 800e9c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e9d4:	2300      	movs	r3, #0
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	371c      	adds	r7, #28
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr

0800e9e2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e9e2:	b480      	push	{r7}
 800e9e4:	b085      	sub	sp, #20
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
 800e9ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d101      	bne.n	800e9fe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e9fa:	2303      	movs	r3, #3
 800e9fc:	e004      	b.n	800ea08 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	683a      	ldr	r2, [r7, #0]
 800ea02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ea06:	2300      	movs	r3, #0
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3714      	adds	r7, #20
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea22:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ea24:	2301      	movs	r3, #1
 800ea26:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d101      	bne.n	800ea36 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ea32:	2303      	movs	r3, #3
 800ea34:	e01a      	b.n	800ea6c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d114      	bne.n	800ea6a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	2201      	movs	r2, #1
 800ea44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ea5e:	2181      	movs	r1, #129	; 0x81
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f003 ffd8 	bl	8012a16 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ea66:	2300      	movs	r3, #0
 800ea68:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ea6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3710      	adds	r7, #16
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d101      	bne.n	800ea92 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ea8e:	2303      	movs	r3, #3
 800ea90:	e016      	b.n	800eac0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	7c1b      	ldrb	r3, [r3, #16]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d109      	bne.n	800eaae <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eaa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eaa4:	2101      	movs	r1, #1
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f003 ffd6 	bl	8012a58 <USBD_LL_PrepareReceive>
 800eaac:	e007      	b.n	800eabe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eab4:	2340      	movs	r3, #64	; 0x40
 800eab6:	2101      	movs	r1, #1
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f003 ffcd 	bl	8012a58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eabe:	2300      	movs	r3, #0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3710      	adds	r7, #16
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b086      	sub	sp, #24
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	4613      	mov	r3, r2
 800ead4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d101      	bne.n	800eae0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800eadc:	2303      	movs	r3, #3
 800eade:	e01f      	b.n	800eb20 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d003      	beq.n	800eb06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	68ba      	ldr	r2, [r7, #8]
 800eb02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2201      	movs	r2, #1
 800eb0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	79fa      	ldrb	r2, [r7, #7]
 800eb12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f003 fe49 	bl	80127ac <USBD_LL_Init>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800eb1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3718      	adds	r7, #24
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eb32:	2300      	movs	r3, #0
 800eb34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d101      	bne.n	800eb40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800eb3c:	2303      	movs	r3, #3
 800eb3e:	e016      	b.n	800eb6e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	683a      	ldr	r2, [r7, #0]
 800eb44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d00b      	beq.n	800eb6c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb5c:	f107 020e 	add.w	r2, r7, #14
 800eb60:	4610      	mov	r0, r2
 800eb62:	4798      	blx	r3
 800eb64:	4602      	mov	r2, r0
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800eb6c:	2300      	movs	r3, #0
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3710      	adds	r7, #16
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b082      	sub	sp, #8
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f003 fe60 	bl	8012844 <USBD_LL_Start>
 800eb84:	4603      	mov	r3, r0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3708      	adds	r7, #8
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}

0800eb8e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800eb8e:	b480      	push	{r7}
 800eb90:	b083      	sub	sp, #12
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eb96:	2300      	movs	r3, #0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	370c      	adds	r7, #12
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b084      	sub	sp, #16
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	460b      	mov	r3, r1
 800ebae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ebb0:	2303      	movs	r3, #3
 800ebb2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d009      	beq.n	800ebd2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	78fa      	ldrb	r2, [r7, #3]
 800ebc8:	4611      	mov	r1, r2
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	4798      	blx	r3
 800ebce:	4603      	mov	r3, r0
 800ebd0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ebd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3710      	adds	r7, #16
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	460b      	mov	r3, r1
 800ebe6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d007      	beq.n	800ec02 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	78fa      	ldrb	r2, [r7, #3]
 800ebfc:	4611      	mov	r1, r2
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	4798      	blx	r3
  }

  return USBD_OK;
 800ec02:	2300      	movs	r3, #0
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec1c:	6839      	ldr	r1, [r7, #0]
 800ec1e:	4618      	mov	r0, r3
 800ec20:	f000 ff90 	bl	800fb44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2201      	movs	r2, #1
 800ec28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ec32:	461a      	mov	r2, r3
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ec40:	f003 031f 	and.w	r3, r3, #31
 800ec44:	2b02      	cmp	r3, #2
 800ec46:	d01a      	beq.n	800ec7e <USBD_LL_SetupStage+0x72>
 800ec48:	2b02      	cmp	r3, #2
 800ec4a:	d822      	bhi.n	800ec92 <USBD_LL_SetupStage+0x86>
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d002      	beq.n	800ec56 <USBD_LL_SetupStage+0x4a>
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d00a      	beq.n	800ec6a <USBD_LL_SetupStage+0x5e>
 800ec54:	e01d      	b.n	800ec92 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 fa62 	bl	800f128 <USBD_StdDevReq>
 800ec64:	4603      	mov	r3, r0
 800ec66:	73fb      	strb	r3, [r7, #15]
      break;
 800ec68:	e020      	b.n	800ecac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec70:	4619      	mov	r1, r3
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 fac6 	bl	800f204 <USBD_StdItfReq>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ec7c:	e016      	b.n	800ecac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ec84:	4619      	mov	r1, r3
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fb05 	bl	800f296 <USBD_StdEPReq>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ec90:	e00c      	b.n	800ecac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ec98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ec9c:	b2db      	uxtb	r3, r3
 800ec9e:	4619      	mov	r1, r3
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f003 fe2f 	bl	8012904 <USBD_LL_StallEP>
 800eca6:	4603      	mov	r3, r0
 800eca8:	73fb      	strb	r3, [r7, #15]
      break;
 800ecaa:	bf00      	nop
  }

  return ret;
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b086      	sub	sp, #24
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	60f8      	str	r0, [r7, #12]
 800ecbe:	460b      	mov	r3, r1
 800ecc0:	607a      	str	r2, [r7, #4]
 800ecc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ecc4:	7afb      	ldrb	r3, [r7, #11]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d138      	bne.n	800ed3c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ecd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ecd8:	2b03      	cmp	r3, #3
 800ecda:	d14a      	bne.n	800ed72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	689a      	ldr	r2, [r3, #8]
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	429a      	cmp	r2, r3
 800ece6:	d913      	bls.n	800ed10 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	689a      	ldr	r2, [r3, #8]
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	1ad2      	subs	r2, r2, r3
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	68da      	ldr	r2, [r3, #12]
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	689b      	ldr	r3, [r3, #8]
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	bf28      	it	cs
 800ed02:	4613      	movcs	r3, r2
 800ed04:	461a      	mov	r2, r3
 800ed06:	6879      	ldr	r1, [r7, #4]
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f001 f80f 	bl	800fd2c <USBD_CtlContinueRx>
 800ed0e:	e030      	b.n	800ed72 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	2b03      	cmp	r3, #3
 800ed1a:	d10b      	bne.n	800ed34 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed22:	691b      	ldr	r3, [r3, #16]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d005      	beq.n	800ed34 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed2e:	691b      	ldr	r3, [r3, #16]
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f001 f80a 	bl	800fd4e <USBD_CtlSendStatus>
 800ed3a:	e01a      	b.n	800ed72 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	2b03      	cmp	r3, #3
 800ed46:	d114      	bne.n	800ed72 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed4e:	699b      	ldr	r3, [r3, #24]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d00e      	beq.n	800ed72 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed5a:	699b      	ldr	r3, [r3, #24]
 800ed5c:	7afa      	ldrb	r2, [r7, #11]
 800ed5e:	4611      	mov	r1, r2
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	4798      	blx	r3
 800ed64:	4603      	mov	r3, r0
 800ed66:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ed68:	7dfb      	ldrb	r3, [r7, #23]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d001      	beq.n	800ed72 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ed6e:	7dfb      	ldrb	r3, [r7, #23]
 800ed70:	e000      	b.n	800ed74 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3718      	adds	r7, #24
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b086      	sub	sp, #24
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	460b      	mov	r3, r1
 800ed86:	607a      	str	r2, [r7, #4]
 800ed88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ed8a:	7afb      	ldrb	r3, [r7, #11]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d16b      	bne.n	800ee68 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	3314      	adds	r3, #20
 800ed94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ed9c:	2b02      	cmp	r3, #2
 800ed9e:	d156      	bne.n	800ee4e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	689a      	ldr	r2, [r3, #8]
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d914      	bls.n	800edd6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	689a      	ldr	r2, [r3, #8]
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	1ad2      	subs	r2, r2, r3
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	689b      	ldr	r3, [r3, #8]
 800edbe:	461a      	mov	r2, r3
 800edc0:	6879      	ldr	r1, [r7, #4]
 800edc2:	68f8      	ldr	r0, [r7, #12]
 800edc4:	f000 ff84 	bl	800fcd0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edc8:	2300      	movs	r3, #0
 800edca:	2200      	movs	r2, #0
 800edcc:	2100      	movs	r1, #0
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	f003 fe42 	bl	8012a58 <USBD_LL_PrepareReceive>
 800edd4:	e03b      	b.n	800ee4e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	68da      	ldr	r2, [r3, #12]
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	689b      	ldr	r3, [r3, #8]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d11c      	bne.n	800ee1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	685a      	ldr	r2, [r3, #4]
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800edea:	429a      	cmp	r2, r3
 800edec:	d316      	bcc.n	800ee1c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	685a      	ldr	r2, [r3, #4]
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d20f      	bcs.n	800ee1c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800edfc:	2200      	movs	r2, #0
 800edfe:	2100      	movs	r1, #0
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	f000 ff65 	bl	800fcd0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee0e:	2300      	movs	r3, #0
 800ee10:	2200      	movs	r2, #0
 800ee12:	2100      	movs	r1, #0
 800ee14:	68f8      	ldr	r0, [r7, #12]
 800ee16:	f003 fe1f 	bl	8012a58 <USBD_LL_PrepareReceive>
 800ee1a:	e018      	b.n	800ee4e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	2b03      	cmp	r3, #3
 800ee26:	d10b      	bne.n	800ee40 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d005      	beq.n	800ee40 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	68f8      	ldr	r0, [r7, #12]
 800ee3e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee40:	2180      	movs	r1, #128	; 0x80
 800ee42:	68f8      	ldr	r0, [r7, #12]
 800ee44:	f003 fd5e 	bl	8012904 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f000 ff93 	bl	800fd74 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	d122      	bne.n	800ee9e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	f7ff fe98 	bl	800eb8e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2200      	movs	r2, #0
 800ee62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ee66:	e01a      	b.n	800ee9e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee6e:	b2db      	uxtb	r3, r3
 800ee70:	2b03      	cmp	r3, #3
 800ee72:	d114      	bne.n	800ee9e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee7a:	695b      	ldr	r3, [r3, #20]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d00e      	beq.n	800ee9e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee86:	695b      	ldr	r3, [r3, #20]
 800ee88:	7afa      	ldrb	r2, [r7, #11]
 800ee8a:	4611      	mov	r1, r2
 800ee8c:	68f8      	ldr	r0, [r7, #12]
 800ee8e:	4798      	blx	r3
 800ee90:	4603      	mov	r3, r0
 800ee92:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ee94:	7dfb      	ldrb	r3, [r7, #23]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d001      	beq.n	800ee9e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ee9a:	7dfb      	ldrb	r3, [r7, #23]
 800ee9c:	e000      	b.n	800eea0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ee9e:	2300      	movs	r3, #0
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3718      	adds	r7, #24
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b082      	sub	sp, #8
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2200      	movs	r2, #0
 800eebc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2200      	movs	r2, #0
 800eec4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d101      	bne.n	800eedc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800eed8:	2303      	movs	r3, #3
 800eeda:	e02f      	b.n	800ef3c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d00f      	beq.n	800ef06 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d009      	beq.n	800ef06 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	687a      	ldr	r2, [r7, #4]
 800eefc:	6852      	ldr	r2, [r2, #4]
 800eefe:	b2d2      	uxtb	r2, r2
 800ef00:	4611      	mov	r1, r2
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef06:	2340      	movs	r3, #64	; 0x40
 800ef08:	2200      	movs	r2, #0
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f003 fcb4 	bl	801287a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2201      	movs	r2, #1
 800ef16:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2240      	movs	r2, #64	; 0x40
 800ef1e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ef22:	2340      	movs	r3, #64	; 0x40
 800ef24:	2200      	movs	r2, #0
 800ef26:	2180      	movs	r1, #128	; 0x80
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f003 fca6 	bl	801287a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2201      	movs	r2, #1
 800ef32:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2240      	movs	r2, #64	; 0x40
 800ef38:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ef3a:	2300      	movs	r3, #0
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3708      	adds	r7, #8
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	78fa      	ldrb	r2, [r7, #3]
 800ef54:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ef56:	2300      	movs	r3, #0
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	370c      	adds	r7, #12
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef72:	b2da      	uxtb	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2204      	movs	r2, #4
 800ef7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ef82:	2300      	movs	r3, #0
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	370c      	adds	r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr

0800ef90 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	2b04      	cmp	r3, #4
 800efa2:	d106      	bne.n	800efb2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800efaa:	b2da      	uxtb	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800efb2:	2300      	movs	r3, #0
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	370c      	adds	r7, #12
 800efb8:	46bd      	mov	sp, r7
 800efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efbe:	4770      	bx	lr

0800efc0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d101      	bne.n	800efd6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800efd2:	2303      	movs	r3, #3
 800efd4:	e012      	b.n	800effc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efdc:	b2db      	uxtb	r3, r3
 800efde:	2b03      	cmp	r3, #3
 800efe0:	d10b      	bne.n	800effa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efe8:	69db      	ldr	r3, [r3, #28]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d005      	beq.n	800effa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eff4:	69db      	ldr	r3, [r3, #28]
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800effa:	2300      	movs	r3, #0
}
 800effc:	4618      	mov	r0, r3
 800effe:	3708      	adds	r7, #8
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	460b      	mov	r3, r1
 800f00e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f016:	2b00      	cmp	r3, #0
 800f018:	d101      	bne.n	800f01e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f01a:	2303      	movs	r3, #3
 800f01c:	e014      	b.n	800f048 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f024:	b2db      	uxtb	r3, r3
 800f026:	2b03      	cmp	r3, #3
 800f028:	d10d      	bne.n	800f046 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f030:	6a1b      	ldr	r3, [r3, #32]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d007      	beq.n	800f046 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f03c:	6a1b      	ldr	r3, [r3, #32]
 800f03e:	78fa      	ldrb	r2, [r7, #3]
 800f040:	4611      	mov	r1, r2
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f046:	2300      	movs	r3, #0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	460b      	mov	r3, r1
 800f05a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f062:	2b00      	cmp	r3, #0
 800f064:	d101      	bne.n	800f06a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800f066:	2303      	movs	r3, #3
 800f068:	e014      	b.n	800f094 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f070:	b2db      	uxtb	r3, r3
 800f072:	2b03      	cmp	r3, #3
 800f074:	d10d      	bne.n	800f092 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d007      	beq.n	800f092 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f08a:	78fa      	ldrb	r2, [r7, #3]
 800f08c:	4611      	mov	r1, r2
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f092:	2300      	movs	r3, #0
}
 800f094:	4618      	mov	r0, r3
 800f096:	3708      	adds	r7, #8
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b083      	sub	sp, #12
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f0a4:	2300      	movs	r3, #0
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	370c      	adds	r7, #12
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b0:	4770      	bx	lr

0800f0b2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f0b2:	b580      	push	{r7, lr}
 800f0b4:	b082      	sub	sp, #8
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d009      	beq.n	800f0e0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	687a      	ldr	r2, [r7, #4]
 800f0d6:	6852      	ldr	r2, [r2, #4]
 800f0d8:	b2d2      	uxtb	r2, r2
 800f0da:	4611      	mov	r1, r2
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	4798      	blx	r3
  }

  return USBD_OK;
 800f0e0:	2300      	movs	r3, #0
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3708      	adds	r7, #8
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}

0800f0ea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f0ea:	b480      	push	{r7}
 800f0ec:	b087      	sub	sp, #28
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	3301      	adds	r3, #1
 800f100:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f108:	8a3b      	ldrh	r3, [r7, #16]
 800f10a:	021b      	lsls	r3, r3, #8
 800f10c:	b21a      	sxth	r2, r3
 800f10e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f112:	4313      	orrs	r3, r2
 800f114:	b21b      	sxth	r3, r3
 800f116:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f118:	89fb      	ldrh	r3, [r7, #14]
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	371c      	adds	r7, #28
 800f11e:	46bd      	mov	sp, r7
 800f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f124:	4770      	bx	lr
	...

0800f128 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f132:	2300      	movs	r3, #0
 800f134:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f13e:	2b40      	cmp	r3, #64	; 0x40
 800f140:	d005      	beq.n	800f14e <USBD_StdDevReq+0x26>
 800f142:	2b40      	cmp	r3, #64	; 0x40
 800f144:	d853      	bhi.n	800f1ee <USBD_StdDevReq+0xc6>
 800f146:	2b00      	cmp	r3, #0
 800f148:	d00b      	beq.n	800f162 <USBD_StdDevReq+0x3a>
 800f14a:	2b20      	cmp	r3, #32
 800f14c:	d14f      	bne.n	800f1ee <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f154:	689b      	ldr	r3, [r3, #8]
 800f156:	6839      	ldr	r1, [r7, #0]
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	4798      	blx	r3
 800f15c:	4603      	mov	r3, r0
 800f15e:	73fb      	strb	r3, [r7, #15]
      break;
 800f160:	e04a      	b.n	800f1f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	785b      	ldrb	r3, [r3, #1]
 800f166:	2b09      	cmp	r3, #9
 800f168:	d83b      	bhi.n	800f1e2 <USBD_StdDevReq+0xba>
 800f16a:	a201      	add	r2, pc, #4	; (adr r2, 800f170 <USBD_StdDevReq+0x48>)
 800f16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f170:	0800f1c5 	.word	0x0800f1c5
 800f174:	0800f1d9 	.word	0x0800f1d9
 800f178:	0800f1e3 	.word	0x0800f1e3
 800f17c:	0800f1cf 	.word	0x0800f1cf
 800f180:	0800f1e3 	.word	0x0800f1e3
 800f184:	0800f1a3 	.word	0x0800f1a3
 800f188:	0800f199 	.word	0x0800f199
 800f18c:	0800f1e3 	.word	0x0800f1e3
 800f190:	0800f1bb 	.word	0x0800f1bb
 800f194:	0800f1ad 	.word	0x0800f1ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f198:	6839      	ldr	r1, [r7, #0]
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 f9de 	bl	800f55c <USBD_GetDescriptor>
          break;
 800f1a0:	e024      	b.n	800f1ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f1a2:	6839      	ldr	r1, [r7, #0]
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f000 fb43 	bl	800f830 <USBD_SetAddress>
          break;
 800f1aa:	e01f      	b.n	800f1ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f1ac:	6839      	ldr	r1, [r7, #0]
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 fb82 	bl	800f8b8 <USBD_SetConfig>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	73fb      	strb	r3, [r7, #15]
          break;
 800f1b8:	e018      	b.n	800f1ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f1ba:	6839      	ldr	r1, [r7, #0]
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 fc21 	bl	800fa04 <USBD_GetConfig>
          break;
 800f1c2:	e013      	b.n	800f1ec <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f1c4:	6839      	ldr	r1, [r7, #0]
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 fc52 	bl	800fa70 <USBD_GetStatus>
          break;
 800f1cc:	e00e      	b.n	800f1ec <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f1ce:	6839      	ldr	r1, [r7, #0]
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 fc81 	bl	800fad8 <USBD_SetFeature>
          break;
 800f1d6:	e009      	b.n	800f1ec <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f000 fc90 	bl	800fb00 <USBD_ClrFeature>
          break;
 800f1e0:	e004      	b.n	800f1ec <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f1e2:	6839      	ldr	r1, [r7, #0]
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f000 fce7 	bl	800fbb8 <USBD_CtlError>
          break;
 800f1ea:	bf00      	nop
      }
      break;
 800f1ec:	e004      	b.n	800f1f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f1ee:	6839      	ldr	r1, [r7, #0]
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f000 fce1 	bl	800fbb8 <USBD_CtlError>
      break;
 800f1f6:	bf00      	nop
  }

  return ret;
 800f1f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop

0800f204 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f20e:	2300      	movs	r3, #0
 800f210:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	781b      	ldrb	r3, [r3, #0]
 800f216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f21a:	2b40      	cmp	r3, #64	; 0x40
 800f21c:	d005      	beq.n	800f22a <USBD_StdItfReq+0x26>
 800f21e:	2b40      	cmp	r3, #64	; 0x40
 800f220:	d82f      	bhi.n	800f282 <USBD_StdItfReq+0x7e>
 800f222:	2b00      	cmp	r3, #0
 800f224:	d001      	beq.n	800f22a <USBD_StdItfReq+0x26>
 800f226:	2b20      	cmp	r3, #32
 800f228:	d12b      	bne.n	800f282 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f230:	b2db      	uxtb	r3, r3
 800f232:	3b01      	subs	r3, #1
 800f234:	2b02      	cmp	r3, #2
 800f236:	d81d      	bhi.n	800f274 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	889b      	ldrh	r3, [r3, #4]
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d813      	bhi.n	800f26a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f248:	689b      	ldr	r3, [r3, #8]
 800f24a:	6839      	ldr	r1, [r7, #0]
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	4798      	blx	r3
 800f250:	4603      	mov	r3, r0
 800f252:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	88db      	ldrh	r3, [r3, #6]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d110      	bne.n	800f27e <USBD_StdItfReq+0x7a>
 800f25c:	7bfb      	ldrb	r3, [r7, #15]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d10d      	bne.n	800f27e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 fd73 	bl	800fd4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f268:	e009      	b.n	800f27e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f26a:	6839      	ldr	r1, [r7, #0]
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 fca3 	bl	800fbb8 <USBD_CtlError>
          break;
 800f272:	e004      	b.n	800f27e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f274:	6839      	ldr	r1, [r7, #0]
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 fc9e 	bl	800fbb8 <USBD_CtlError>
          break;
 800f27c:	e000      	b.n	800f280 <USBD_StdItfReq+0x7c>
          break;
 800f27e:	bf00      	nop
      }
      break;
 800f280:	e004      	b.n	800f28c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f282:	6839      	ldr	r1, [r7, #0]
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f000 fc97 	bl	800fbb8 <USBD_CtlError>
      break;
 800f28a:	bf00      	nop
  }

  return ret;
 800f28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	3710      	adds	r7, #16
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}

0800f296 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f296:	b580      	push	{r7, lr}
 800f298:	b084      	sub	sp, #16
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	6078      	str	r0, [r7, #4]
 800f29e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	889b      	ldrh	r3, [r3, #4]
 800f2a8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f2b2:	2b40      	cmp	r3, #64	; 0x40
 800f2b4:	d007      	beq.n	800f2c6 <USBD_StdEPReq+0x30>
 800f2b6:	2b40      	cmp	r3, #64	; 0x40
 800f2b8:	f200 8145 	bhi.w	800f546 <USBD_StdEPReq+0x2b0>
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d00c      	beq.n	800f2da <USBD_StdEPReq+0x44>
 800f2c0:	2b20      	cmp	r3, #32
 800f2c2:	f040 8140 	bne.w	800f546 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2cc:	689b      	ldr	r3, [r3, #8]
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	4798      	blx	r3
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	73fb      	strb	r3, [r7, #15]
      break;
 800f2d8:	e13a      	b.n	800f550 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	785b      	ldrb	r3, [r3, #1]
 800f2de:	2b03      	cmp	r3, #3
 800f2e0:	d007      	beq.n	800f2f2 <USBD_StdEPReq+0x5c>
 800f2e2:	2b03      	cmp	r3, #3
 800f2e4:	f300 8129 	bgt.w	800f53a <USBD_StdEPReq+0x2a4>
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d07f      	beq.n	800f3ec <USBD_StdEPReq+0x156>
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d03c      	beq.n	800f36a <USBD_StdEPReq+0xd4>
 800f2f0:	e123      	b.n	800f53a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	2b02      	cmp	r3, #2
 800f2fc:	d002      	beq.n	800f304 <USBD_StdEPReq+0x6e>
 800f2fe:	2b03      	cmp	r3, #3
 800f300:	d016      	beq.n	800f330 <USBD_StdEPReq+0x9a>
 800f302:	e02c      	b.n	800f35e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f304:	7bbb      	ldrb	r3, [r7, #14]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00d      	beq.n	800f326 <USBD_StdEPReq+0x90>
 800f30a:	7bbb      	ldrb	r3, [r7, #14]
 800f30c:	2b80      	cmp	r3, #128	; 0x80
 800f30e:	d00a      	beq.n	800f326 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f310:	7bbb      	ldrb	r3, [r7, #14]
 800f312:	4619      	mov	r1, r3
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f003 faf5 	bl	8012904 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f31a:	2180      	movs	r1, #128	; 0x80
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f003 faf1 	bl	8012904 <USBD_LL_StallEP>
 800f322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f324:	e020      	b.n	800f368 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f326:	6839      	ldr	r1, [r7, #0]
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f000 fc45 	bl	800fbb8 <USBD_CtlError>
              break;
 800f32e:	e01b      	b.n	800f368 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	885b      	ldrh	r3, [r3, #2]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d10e      	bne.n	800f356 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f338:	7bbb      	ldrb	r3, [r7, #14]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00b      	beq.n	800f356 <USBD_StdEPReq+0xc0>
 800f33e:	7bbb      	ldrb	r3, [r7, #14]
 800f340:	2b80      	cmp	r3, #128	; 0x80
 800f342:	d008      	beq.n	800f356 <USBD_StdEPReq+0xc0>
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	88db      	ldrh	r3, [r3, #6]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d104      	bne.n	800f356 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f34c:	7bbb      	ldrb	r3, [r7, #14]
 800f34e:	4619      	mov	r1, r3
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f003 fad7 	bl	8012904 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 fcf9 	bl	800fd4e <USBD_CtlSendStatus>

              break;
 800f35c:	e004      	b.n	800f368 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f35e:	6839      	ldr	r1, [r7, #0]
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 fc29 	bl	800fbb8 <USBD_CtlError>
              break;
 800f366:	bf00      	nop
          }
          break;
 800f368:	e0ec      	b.n	800f544 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f370:	b2db      	uxtb	r3, r3
 800f372:	2b02      	cmp	r3, #2
 800f374:	d002      	beq.n	800f37c <USBD_StdEPReq+0xe6>
 800f376:	2b03      	cmp	r3, #3
 800f378:	d016      	beq.n	800f3a8 <USBD_StdEPReq+0x112>
 800f37a:	e030      	b.n	800f3de <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f37c:	7bbb      	ldrb	r3, [r7, #14]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d00d      	beq.n	800f39e <USBD_StdEPReq+0x108>
 800f382:	7bbb      	ldrb	r3, [r7, #14]
 800f384:	2b80      	cmp	r3, #128	; 0x80
 800f386:	d00a      	beq.n	800f39e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f388:	7bbb      	ldrb	r3, [r7, #14]
 800f38a:	4619      	mov	r1, r3
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f003 fab9 	bl	8012904 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f392:	2180      	movs	r1, #128	; 0x80
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f003 fab5 	bl	8012904 <USBD_LL_StallEP>
 800f39a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f39c:	e025      	b.n	800f3ea <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f39e:	6839      	ldr	r1, [r7, #0]
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 fc09 	bl	800fbb8 <USBD_CtlError>
              break;
 800f3a6:	e020      	b.n	800f3ea <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	885b      	ldrh	r3, [r3, #2]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d11b      	bne.n	800f3e8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f3b0:	7bbb      	ldrb	r3, [r7, #14]
 800f3b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d004      	beq.n	800f3c4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f3ba:	7bbb      	ldrb	r3, [r7, #14]
 800f3bc:	4619      	mov	r1, r3
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f003 fabf 	bl	8012942 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f000 fcc2 	bl	800fd4e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3d0:	689b      	ldr	r3, [r3, #8]
 800f3d2:	6839      	ldr	r1, [r7, #0]
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	4798      	blx	r3
 800f3d8:	4603      	mov	r3, r0
 800f3da:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f3dc:	e004      	b.n	800f3e8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f3de:	6839      	ldr	r1, [r7, #0]
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 fbe9 	bl	800fbb8 <USBD_CtlError>
              break;
 800f3e6:	e000      	b.n	800f3ea <USBD_StdEPReq+0x154>
              break;
 800f3e8:	bf00      	nop
          }
          break;
 800f3ea:	e0ab      	b.n	800f544 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	2b02      	cmp	r3, #2
 800f3f6:	d002      	beq.n	800f3fe <USBD_StdEPReq+0x168>
 800f3f8:	2b03      	cmp	r3, #3
 800f3fa:	d032      	beq.n	800f462 <USBD_StdEPReq+0x1cc>
 800f3fc:	e097      	b.n	800f52e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f3fe:	7bbb      	ldrb	r3, [r7, #14]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d007      	beq.n	800f414 <USBD_StdEPReq+0x17e>
 800f404:	7bbb      	ldrb	r3, [r7, #14]
 800f406:	2b80      	cmp	r3, #128	; 0x80
 800f408:	d004      	beq.n	800f414 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f40a:	6839      	ldr	r1, [r7, #0]
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 fbd3 	bl	800fbb8 <USBD_CtlError>
                break;
 800f412:	e091      	b.n	800f538 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f414:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	da0b      	bge.n	800f434 <USBD_StdEPReq+0x19e>
 800f41c:	7bbb      	ldrb	r3, [r7, #14]
 800f41e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f422:	4613      	mov	r3, r2
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	4413      	add	r3, r2
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	3310      	adds	r3, #16
 800f42c:	687a      	ldr	r2, [r7, #4]
 800f42e:	4413      	add	r3, r2
 800f430:	3304      	adds	r3, #4
 800f432:	e00b      	b.n	800f44c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f434:	7bbb      	ldrb	r3, [r7, #14]
 800f436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f43a:	4613      	mov	r3, r2
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	4413      	add	r3, r2
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f446:	687a      	ldr	r2, [r7, #4]
 800f448:	4413      	add	r3, r2
 800f44a:	3304      	adds	r3, #4
 800f44c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	2200      	movs	r2, #0
 800f452:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	2202      	movs	r2, #2
 800f458:	4619      	mov	r1, r3
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f000 fc1d 	bl	800fc9a <USBD_CtlSendData>
              break;
 800f460:	e06a      	b.n	800f538 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f466:	2b00      	cmp	r3, #0
 800f468:	da11      	bge.n	800f48e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f46a:	7bbb      	ldrb	r3, [r7, #14]
 800f46c:	f003 020f 	and.w	r2, r3, #15
 800f470:	6879      	ldr	r1, [r7, #4]
 800f472:	4613      	mov	r3, r2
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	4413      	add	r3, r2
 800f478:	009b      	lsls	r3, r3, #2
 800f47a:	440b      	add	r3, r1
 800f47c:	3324      	adds	r3, #36	; 0x24
 800f47e:	881b      	ldrh	r3, [r3, #0]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d117      	bne.n	800f4b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f484:	6839      	ldr	r1, [r7, #0]
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f000 fb96 	bl	800fbb8 <USBD_CtlError>
                  break;
 800f48c:	e054      	b.n	800f538 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f48e:	7bbb      	ldrb	r3, [r7, #14]
 800f490:	f003 020f 	and.w	r2, r3, #15
 800f494:	6879      	ldr	r1, [r7, #4]
 800f496:	4613      	mov	r3, r2
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	4413      	add	r3, r2
 800f49c:	009b      	lsls	r3, r3, #2
 800f49e:	440b      	add	r3, r1
 800f4a0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f4a4:	881b      	ldrh	r3, [r3, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d104      	bne.n	800f4b4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f4aa:	6839      	ldr	r1, [r7, #0]
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 fb83 	bl	800fbb8 <USBD_CtlError>
                  break;
 800f4b2:	e041      	b.n	800f538 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	da0b      	bge.n	800f4d4 <USBD_StdEPReq+0x23e>
 800f4bc:	7bbb      	ldrb	r3, [r7, #14]
 800f4be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	4413      	add	r3, r2
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	3310      	adds	r3, #16
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	3304      	adds	r3, #4
 800f4d2:	e00b      	b.n	800f4ec <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f4d4:	7bbb      	ldrb	r3, [r7, #14]
 800f4d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f4da:	4613      	mov	r3, r2
 800f4dc:	009b      	lsls	r3, r3, #2
 800f4de:	4413      	add	r3, r2
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f4e6:	687a      	ldr	r2, [r7, #4]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	3304      	adds	r3, #4
 800f4ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f4ee:	7bbb      	ldrb	r3, [r7, #14]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d002      	beq.n	800f4fa <USBD_StdEPReq+0x264>
 800f4f4:	7bbb      	ldrb	r3, [r7, #14]
 800f4f6:	2b80      	cmp	r3, #128	; 0x80
 800f4f8:	d103      	bne.n	800f502 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	601a      	str	r2, [r3, #0]
 800f500:	e00e      	b.n	800f520 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f502:	7bbb      	ldrb	r3, [r7, #14]
 800f504:	4619      	mov	r1, r3
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f003 fa3a 	bl	8012980 <USBD_LL_IsStallEP>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d003      	beq.n	800f51a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	2201      	movs	r2, #1
 800f516:	601a      	str	r2, [r3, #0]
 800f518:	e002      	b.n	800f520 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	2200      	movs	r2, #0
 800f51e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	2202      	movs	r2, #2
 800f524:	4619      	mov	r1, r3
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fbb7 	bl	800fc9a <USBD_CtlSendData>
              break;
 800f52c:	e004      	b.n	800f538 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f52e:	6839      	ldr	r1, [r7, #0]
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 fb41 	bl	800fbb8 <USBD_CtlError>
              break;
 800f536:	bf00      	nop
          }
          break;
 800f538:	e004      	b.n	800f544 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f53a:	6839      	ldr	r1, [r7, #0]
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 fb3b 	bl	800fbb8 <USBD_CtlError>
          break;
 800f542:	bf00      	nop
      }
      break;
 800f544:	e004      	b.n	800f550 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f546:	6839      	ldr	r1, [r7, #0]
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f000 fb35 	bl	800fbb8 <USBD_CtlError>
      break;
 800f54e:	bf00      	nop
  }

  return ret;
 800f550:	7bfb      	ldrb	r3, [r7, #15]
}
 800f552:	4618      	mov	r0, r3
 800f554:	3710      	adds	r7, #16
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
	...

0800f55c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f566:	2300      	movs	r3, #0
 800f568:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f56a:	2300      	movs	r3, #0
 800f56c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f56e:	2300      	movs	r3, #0
 800f570:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	885b      	ldrh	r3, [r3, #2]
 800f576:	0a1b      	lsrs	r3, r3, #8
 800f578:	b29b      	uxth	r3, r3
 800f57a:	3b01      	subs	r3, #1
 800f57c:	2b06      	cmp	r3, #6
 800f57e:	f200 8128 	bhi.w	800f7d2 <USBD_GetDescriptor+0x276>
 800f582:	a201      	add	r2, pc, #4	; (adr r2, 800f588 <USBD_GetDescriptor+0x2c>)
 800f584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f588:	0800f5a5 	.word	0x0800f5a5
 800f58c:	0800f5bd 	.word	0x0800f5bd
 800f590:	0800f5fd 	.word	0x0800f5fd
 800f594:	0800f7d3 	.word	0x0800f7d3
 800f598:	0800f7d3 	.word	0x0800f7d3
 800f59c:	0800f773 	.word	0x0800f773
 800f5a0:	0800f79f 	.word	0x0800f79f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	687a      	ldr	r2, [r7, #4]
 800f5ae:	7c12      	ldrb	r2, [r2, #16]
 800f5b0:	f107 0108 	add.w	r1, r7, #8
 800f5b4:	4610      	mov	r0, r2
 800f5b6:	4798      	blx	r3
 800f5b8:	60f8      	str	r0, [r7, #12]
      break;
 800f5ba:	e112      	b.n	800f7e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	7c1b      	ldrb	r3, [r3, #16]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d10d      	bne.n	800f5e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5cc:	f107 0208 	add.w	r2, r7, #8
 800f5d0:	4610      	mov	r0, r2
 800f5d2:	4798      	blx	r3
 800f5d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	2202      	movs	r2, #2
 800f5dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f5de:	e100      	b.n	800f7e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5e8:	f107 0208 	add.w	r2, r7, #8
 800f5ec:	4610      	mov	r0, r2
 800f5ee:	4798      	blx	r3
 800f5f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	2202      	movs	r2, #2
 800f5f8:	701a      	strb	r2, [r3, #0]
      break;
 800f5fa:	e0f2      	b.n	800f7e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	885b      	ldrh	r3, [r3, #2]
 800f600:	b2db      	uxtb	r3, r3
 800f602:	2b05      	cmp	r3, #5
 800f604:	f200 80ac 	bhi.w	800f760 <USBD_GetDescriptor+0x204>
 800f608:	a201      	add	r2, pc, #4	; (adr r2, 800f610 <USBD_GetDescriptor+0xb4>)
 800f60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f60e:	bf00      	nop
 800f610:	0800f629 	.word	0x0800f629
 800f614:	0800f65d 	.word	0x0800f65d
 800f618:	0800f691 	.word	0x0800f691
 800f61c:	0800f6c5 	.word	0x0800f6c5
 800f620:	0800f6f9 	.word	0x0800f6f9
 800f624:	0800f72d 	.word	0x0800f72d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f62e:	685b      	ldr	r3, [r3, #4]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d00b      	beq.n	800f64c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	7c12      	ldrb	r2, [r2, #16]
 800f640:	f107 0108 	add.w	r1, r7, #8
 800f644:	4610      	mov	r0, r2
 800f646:	4798      	blx	r3
 800f648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f64a:	e091      	b.n	800f770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f64c:	6839      	ldr	r1, [r7, #0]
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f000 fab2 	bl	800fbb8 <USBD_CtlError>
            err++;
 800f654:	7afb      	ldrb	r3, [r7, #11]
 800f656:	3301      	adds	r3, #1
 800f658:	72fb      	strb	r3, [r7, #11]
          break;
 800f65a:	e089      	b.n	800f770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f662:	689b      	ldr	r3, [r3, #8]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d00b      	beq.n	800f680 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f66e:	689b      	ldr	r3, [r3, #8]
 800f670:	687a      	ldr	r2, [r7, #4]
 800f672:	7c12      	ldrb	r2, [r2, #16]
 800f674:	f107 0108 	add.w	r1, r7, #8
 800f678:	4610      	mov	r0, r2
 800f67a:	4798      	blx	r3
 800f67c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f67e:	e077      	b.n	800f770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f680:	6839      	ldr	r1, [r7, #0]
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 fa98 	bl	800fbb8 <USBD_CtlError>
            err++;
 800f688:	7afb      	ldrb	r3, [r7, #11]
 800f68a:	3301      	adds	r3, #1
 800f68c:	72fb      	strb	r3, [r7, #11]
          break;
 800f68e:	e06f      	b.n	800f770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d00b      	beq.n	800f6b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	7c12      	ldrb	r2, [r2, #16]
 800f6a8:	f107 0108 	add.w	r1, r7, #8
 800f6ac:	4610      	mov	r0, r2
 800f6ae:	4798      	blx	r3
 800f6b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6b2:	e05d      	b.n	800f770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6b4:	6839      	ldr	r1, [r7, #0]
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 fa7e 	bl	800fbb8 <USBD_CtlError>
            err++;
 800f6bc:	7afb      	ldrb	r3, [r7, #11]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f6c2:	e055      	b.n	800f770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6ca:	691b      	ldr	r3, [r3, #16]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d00b      	beq.n	800f6e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6d6:	691b      	ldr	r3, [r3, #16]
 800f6d8:	687a      	ldr	r2, [r7, #4]
 800f6da:	7c12      	ldrb	r2, [r2, #16]
 800f6dc:	f107 0108 	add.w	r1, r7, #8
 800f6e0:	4610      	mov	r0, r2
 800f6e2:	4798      	blx	r3
 800f6e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6e6:	e043      	b.n	800f770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f6e8:	6839      	ldr	r1, [r7, #0]
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f000 fa64 	bl	800fbb8 <USBD_CtlError>
            err++;
 800f6f0:	7afb      	ldrb	r3, [r7, #11]
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f6f6:	e03b      	b.n	800f770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6fe:	695b      	ldr	r3, [r3, #20]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d00b      	beq.n	800f71c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f70a:	695b      	ldr	r3, [r3, #20]
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	7c12      	ldrb	r2, [r2, #16]
 800f710:	f107 0108 	add.w	r1, r7, #8
 800f714:	4610      	mov	r0, r2
 800f716:	4798      	blx	r3
 800f718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f71a:	e029      	b.n	800f770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f71c:	6839      	ldr	r1, [r7, #0]
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f000 fa4a 	bl	800fbb8 <USBD_CtlError>
            err++;
 800f724:	7afb      	ldrb	r3, [r7, #11]
 800f726:	3301      	adds	r3, #1
 800f728:	72fb      	strb	r3, [r7, #11]
          break;
 800f72a:	e021      	b.n	800f770 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f732:	699b      	ldr	r3, [r3, #24]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d00b      	beq.n	800f750 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f73e:	699b      	ldr	r3, [r3, #24]
 800f740:	687a      	ldr	r2, [r7, #4]
 800f742:	7c12      	ldrb	r2, [r2, #16]
 800f744:	f107 0108 	add.w	r1, r7, #8
 800f748:	4610      	mov	r0, r2
 800f74a:	4798      	blx	r3
 800f74c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f74e:	e00f      	b.n	800f770 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f750:	6839      	ldr	r1, [r7, #0]
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f000 fa30 	bl	800fbb8 <USBD_CtlError>
            err++;
 800f758:	7afb      	ldrb	r3, [r7, #11]
 800f75a:	3301      	adds	r3, #1
 800f75c:	72fb      	strb	r3, [r7, #11]
          break;
 800f75e:	e007      	b.n	800f770 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f760:	6839      	ldr	r1, [r7, #0]
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 fa28 	bl	800fbb8 <USBD_CtlError>
          err++;
 800f768:	7afb      	ldrb	r3, [r7, #11]
 800f76a:	3301      	adds	r3, #1
 800f76c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f76e:	bf00      	nop
      }
      break;
 800f770:	e037      	b.n	800f7e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	7c1b      	ldrb	r3, [r3, #16]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d109      	bne.n	800f78e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f782:	f107 0208 	add.w	r2, r7, #8
 800f786:	4610      	mov	r0, r2
 800f788:	4798      	blx	r3
 800f78a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f78c:	e029      	b.n	800f7e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f78e:	6839      	ldr	r1, [r7, #0]
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 fa11 	bl	800fbb8 <USBD_CtlError>
        err++;
 800f796:	7afb      	ldrb	r3, [r7, #11]
 800f798:	3301      	adds	r3, #1
 800f79a:	72fb      	strb	r3, [r7, #11]
      break;
 800f79c:	e021      	b.n	800f7e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	7c1b      	ldrb	r3, [r3, #16]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d10d      	bne.n	800f7c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7ae:	f107 0208 	add.w	r2, r7, #8
 800f7b2:	4610      	mov	r0, r2
 800f7b4:	4798      	blx	r3
 800f7b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	2207      	movs	r2, #7
 800f7be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7c0:	e00f      	b.n	800f7e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f7c2:	6839      	ldr	r1, [r7, #0]
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f000 f9f7 	bl	800fbb8 <USBD_CtlError>
        err++;
 800f7ca:	7afb      	ldrb	r3, [r7, #11]
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	72fb      	strb	r3, [r7, #11]
      break;
 800f7d0:	e007      	b.n	800f7e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f7d2:	6839      	ldr	r1, [r7, #0]
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f000 f9ef 	bl	800fbb8 <USBD_CtlError>
      err++;
 800f7da:	7afb      	ldrb	r3, [r7, #11]
 800f7dc:	3301      	adds	r3, #1
 800f7de:	72fb      	strb	r3, [r7, #11]
      break;
 800f7e0:	bf00      	nop
  }

  if (err != 0U)
 800f7e2:	7afb      	ldrb	r3, [r7, #11]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d11e      	bne.n	800f826 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	88db      	ldrh	r3, [r3, #6]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d016      	beq.n	800f81e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f7f0:	893b      	ldrh	r3, [r7, #8]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d00e      	beq.n	800f814 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	88da      	ldrh	r2, [r3, #6]
 800f7fa:	893b      	ldrh	r3, [r7, #8]
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	bf28      	it	cs
 800f800:	4613      	movcs	r3, r2
 800f802:	b29b      	uxth	r3, r3
 800f804:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f806:	893b      	ldrh	r3, [r7, #8]
 800f808:	461a      	mov	r2, r3
 800f80a:	68f9      	ldr	r1, [r7, #12]
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 fa44 	bl	800fc9a <USBD_CtlSendData>
 800f812:	e009      	b.n	800f828 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f814:	6839      	ldr	r1, [r7, #0]
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f000 f9ce 	bl	800fbb8 <USBD_CtlError>
 800f81c:	e004      	b.n	800f828 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f000 fa95 	bl	800fd4e <USBD_CtlSendStatus>
 800f824:	e000      	b.n	800f828 <USBD_GetDescriptor+0x2cc>
    return;
 800f826:	bf00      	nop
  }
}
 800f828:	3710      	adds	r7, #16
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	bf00      	nop

0800f830 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b084      	sub	sp, #16
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
 800f838:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	889b      	ldrh	r3, [r3, #4]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d131      	bne.n	800f8a6 <USBD_SetAddress+0x76>
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	88db      	ldrh	r3, [r3, #6]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d12d      	bne.n	800f8a6 <USBD_SetAddress+0x76>
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	885b      	ldrh	r3, [r3, #2]
 800f84e:	2b7f      	cmp	r3, #127	; 0x7f
 800f850:	d829      	bhi.n	800f8a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	885b      	ldrh	r3, [r3, #2]
 800f856:	b2db      	uxtb	r3, r3
 800f858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f85c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f864:	b2db      	uxtb	r3, r3
 800f866:	2b03      	cmp	r3, #3
 800f868:	d104      	bne.n	800f874 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f86a:	6839      	ldr	r1, [r7, #0]
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f000 f9a3 	bl	800fbb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f872:	e01d      	b.n	800f8b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	7bfa      	ldrb	r2, [r7, #15]
 800f878:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f87c:	7bfb      	ldrb	r3, [r7, #15]
 800f87e:	4619      	mov	r1, r3
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f003 f8a9 	bl	80129d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 fa61 	bl	800fd4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f88c:	7bfb      	ldrb	r3, [r7, #15]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d004      	beq.n	800f89c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2202      	movs	r2, #2
 800f896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f89a:	e009      	b.n	800f8b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2201      	movs	r2, #1
 800f8a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8a4:	e004      	b.n	800f8b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f8a6:	6839      	ldr	r1, [r7, #0]
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 f985 	bl	800fbb8 <USBD_CtlError>
  }
}
 800f8ae:	bf00      	nop
 800f8b0:	bf00      	nop
 800f8b2:	3710      	adds	r7, #16
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b084      	sub	sp, #16
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	885b      	ldrh	r3, [r3, #2]
 800f8ca:	b2da      	uxtb	r2, r3
 800f8cc:	4b4c      	ldr	r3, [pc, #304]	; (800fa00 <USBD_SetConfig+0x148>)
 800f8ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f8d0:	4b4b      	ldr	r3, [pc, #300]	; (800fa00 <USBD_SetConfig+0x148>)
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d905      	bls.n	800f8e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f8d8:	6839      	ldr	r1, [r7, #0]
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f000 f96c 	bl	800fbb8 <USBD_CtlError>
    return USBD_FAIL;
 800f8e0:	2303      	movs	r3, #3
 800f8e2:	e088      	b.n	800f9f6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	2b02      	cmp	r3, #2
 800f8ee:	d002      	beq.n	800f8f6 <USBD_SetConfig+0x3e>
 800f8f0:	2b03      	cmp	r3, #3
 800f8f2:	d025      	beq.n	800f940 <USBD_SetConfig+0x88>
 800f8f4:	e071      	b.n	800f9da <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f8f6:	4b42      	ldr	r3, [pc, #264]	; (800fa00 <USBD_SetConfig+0x148>)
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d01c      	beq.n	800f938 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f8fe:	4b40      	ldr	r3, [pc, #256]	; (800fa00 <USBD_SetConfig+0x148>)
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	461a      	mov	r2, r3
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f908:	4b3d      	ldr	r3, [pc, #244]	; (800fa00 <USBD_SetConfig+0x148>)
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	4619      	mov	r1, r3
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f7ff f948 	bl	800eba4 <USBD_SetClassConfig>
 800f914:	4603      	mov	r3, r0
 800f916:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f918:	7bfb      	ldrb	r3, [r7, #15]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d004      	beq.n	800f928 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f91e:	6839      	ldr	r1, [r7, #0]
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f000 f949 	bl	800fbb8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f926:	e065      	b.n	800f9f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 fa10 	bl	800fd4e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2203      	movs	r2, #3
 800f932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f936:	e05d      	b.n	800f9f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 fa08 	bl	800fd4e <USBD_CtlSendStatus>
      break;
 800f93e:	e059      	b.n	800f9f4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f940:	4b2f      	ldr	r3, [pc, #188]	; (800fa00 <USBD_SetConfig+0x148>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d112      	bne.n	800f96e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2202      	movs	r2, #2
 800f94c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f950:	4b2b      	ldr	r3, [pc, #172]	; (800fa00 <USBD_SetConfig+0x148>)
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	461a      	mov	r2, r3
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f95a:	4b29      	ldr	r3, [pc, #164]	; (800fa00 <USBD_SetConfig+0x148>)
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	4619      	mov	r1, r3
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f7ff f93b 	bl	800ebdc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f000 f9f1 	bl	800fd4e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f96c:	e042      	b.n	800f9f4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f96e:	4b24      	ldr	r3, [pc, #144]	; (800fa00 <USBD_SetConfig+0x148>)
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	461a      	mov	r2, r3
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d02a      	beq.n	800f9d2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	685b      	ldr	r3, [r3, #4]
 800f980:	b2db      	uxtb	r3, r3
 800f982:	4619      	mov	r1, r3
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f7ff f929 	bl	800ebdc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f98a:	4b1d      	ldr	r3, [pc, #116]	; (800fa00 <USBD_SetConfig+0x148>)
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	461a      	mov	r2, r3
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f994:	4b1a      	ldr	r3, [pc, #104]	; (800fa00 <USBD_SetConfig+0x148>)
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	4619      	mov	r1, r3
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f7ff f902 	bl	800eba4 <USBD_SetClassConfig>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f9a4:	7bfb      	ldrb	r3, [r7, #15]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00f      	beq.n	800f9ca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f9aa:	6839      	ldr	r1, [r7, #0]
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f000 f903 	bl	800fbb8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f7ff f90e 	bl	800ebdc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2202      	movs	r2, #2
 800f9c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f9c8:	e014      	b.n	800f9f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f000 f9bf 	bl	800fd4e <USBD_CtlSendStatus>
      break;
 800f9d0:	e010      	b.n	800f9f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 f9bb 	bl	800fd4e <USBD_CtlSendStatus>
      break;
 800f9d8:	e00c      	b.n	800f9f4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f9da:	6839      	ldr	r1, [r7, #0]
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f000 f8eb 	bl	800fbb8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9e2:	4b07      	ldr	r3, [pc, #28]	; (800fa00 <USBD_SetConfig+0x148>)
 800f9e4:	781b      	ldrb	r3, [r3, #0]
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f7ff f8f7 	bl	800ebdc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f9ee:	2303      	movs	r3, #3
 800f9f0:	73fb      	strb	r3, [r7, #15]
      break;
 800f9f2:	bf00      	nop
  }

  return ret;
 800f9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3710      	adds	r7, #16
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	2000064e 	.word	0x2000064e

0800fa04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b082      	sub	sp, #8
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	88db      	ldrh	r3, [r3, #6]
 800fa12:	2b01      	cmp	r3, #1
 800fa14:	d004      	beq.n	800fa20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa16:	6839      	ldr	r1, [r7, #0]
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f000 f8cd 	bl	800fbb8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa1e:	e023      	b.n	800fa68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	2b02      	cmp	r3, #2
 800fa2a:	dc02      	bgt.n	800fa32 <USBD_GetConfig+0x2e>
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	dc03      	bgt.n	800fa38 <USBD_GetConfig+0x34>
 800fa30:	e015      	b.n	800fa5e <USBD_GetConfig+0x5a>
 800fa32:	2b03      	cmp	r3, #3
 800fa34:	d00b      	beq.n	800fa4e <USBD_GetConfig+0x4a>
 800fa36:	e012      	b.n	800fa5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	3308      	adds	r3, #8
 800fa42:	2201      	movs	r2, #1
 800fa44:	4619      	mov	r1, r3
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 f927 	bl	800fc9a <USBD_CtlSendData>
        break;
 800fa4c:	e00c      	b.n	800fa68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	3304      	adds	r3, #4
 800fa52:	2201      	movs	r2, #1
 800fa54:	4619      	mov	r1, r3
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f000 f91f 	bl	800fc9a <USBD_CtlSendData>
        break;
 800fa5c:	e004      	b.n	800fa68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fa5e:	6839      	ldr	r1, [r7, #0]
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f000 f8a9 	bl	800fbb8 <USBD_CtlError>
        break;
 800fa66:	bf00      	nop
}
 800fa68:	bf00      	nop
 800fa6a:	3708      	adds	r7, #8
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	3b01      	subs	r3, #1
 800fa84:	2b02      	cmp	r3, #2
 800fa86:	d81e      	bhi.n	800fac6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	88db      	ldrh	r3, [r3, #6]
 800fa8c:	2b02      	cmp	r3, #2
 800fa8e:	d004      	beq.n	800fa9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fa90:	6839      	ldr	r1, [r7, #0]
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f000 f890 	bl	800fbb8 <USBD_CtlError>
        break;
 800fa98:	e01a      	b.n	800fad0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2201      	movs	r2, #1
 800fa9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d005      	beq.n	800fab6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	68db      	ldr	r3, [r3, #12]
 800faae:	f043 0202 	orr.w	r2, r3, #2
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	330c      	adds	r3, #12
 800faba:	2202      	movs	r2, #2
 800fabc:	4619      	mov	r1, r3
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f000 f8eb 	bl	800fc9a <USBD_CtlSendData>
      break;
 800fac4:	e004      	b.n	800fad0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fac6:	6839      	ldr	r1, [r7, #0]
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f000 f875 	bl	800fbb8 <USBD_CtlError>
      break;
 800face:	bf00      	nop
  }
}
 800fad0:	bf00      	nop
 800fad2:	3708      	adds	r7, #8
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}

0800fad8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	885b      	ldrh	r3, [r3, #2]
 800fae6:	2b01      	cmp	r3, #1
 800fae8:	d106      	bne.n	800faf8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2201      	movs	r2, #1
 800faee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 f92b 	bl	800fd4e <USBD_CtlSendStatus>
  }
}
 800faf8:	bf00      	nop
 800fafa:	3708      	adds	r7, #8
 800fafc:	46bd      	mov	sp, r7
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	3b01      	subs	r3, #1
 800fb14:	2b02      	cmp	r3, #2
 800fb16:	d80b      	bhi.n	800fb30 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	885b      	ldrh	r3, [r3, #2]
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d10c      	bne.n	800fb3a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2200      	movs	r2, #0
 800fb24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f000 f910 	bl	800fd4e <USBD_CtlSendStatus>
      }
      break;
 800fb2e:	e004      	b.n	800fb3a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fb30:	6839      	ldr	r1, [r7, #0]
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 f840 	bl	800fbb8 <USBD_CtlError>
      break;
 800fb38:	e000      	b.n	800fb3c <USBD_ClrFeature+0x3c>
      break;
 800fb3a:	bf00      	nop
  }
}
 800fb3c:	bf00      	nop
 800fb3e:	3708      	adds	r7, #8
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b084      	sub	sp, #16
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	781a      	ldrb	r2, [r3, #0]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	3301      	adds	r3, #1
 800fb5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	781a      	ldrb	r2, [r3, #0]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fb6e:	68f8      	ldr	r0, [r7, #12]
 800fb70:	f7ff fabb 	bl	800f0ea <SWAPBYTE>
 800fb74:	4603      	mov	r3, r0
 800fb76:	461a      	mov	r2, r3
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	3301      	adds	r3, #1
 800fb80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	3301      	adds	r3, #1
 800fb86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f7ff faae 	bl	800f0ea <SWAPBYTE>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	461a      	mov	r2, r3
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	3301      	adds	r3, #1
 800fb9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fba2:	68f8      	ldr	r0, [r7, #12]
 800fba4:	f7ff faa1 	bl	800f0ea <SWAPBYTE>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	461a      	mov	r2, r3
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	80da      	strh	r2, [r3, #6]
}
 800fbb0:	bf00      	nop
 800fbb2:	3710      	adds	r7, #16
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbc2:	2180      	movs	r1, #128	; 0x80
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f002 fe9d 	bl	8012904 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fbca:	2100      	movs	r1, #0
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f002 fe99 	bl	8012904 <USBD_LL_StallEP>
}
 800fbd2:	bf00      	nop
 800fbd4:	3708      	adds	r7, #8
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b086      	sub	sp, #24
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	60f8      	str	r0, [r7, #12]
 800fbe2:	60b9      	str	r1, [r7, #8]
 800fbe4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d036      	beq.n	800fc5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fbf4:	6938      	ldr	r0, [r7, #16]
 800fbf6:	f000 f836 	bl	800fc66 <USBD_GetLen>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	005b      	lsls	r3, r3, #1
 800fc02:	b29a      	uxth	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fc08:	7dfb      	ldrb	r3, [r7, #23]
 800fc0a:	68ba      	ldr	r2, [r7, #8]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	687a      	ldr	r2, [r7, #4]
 800fc10:	7812      	ldrb	r2, [r2, #0]
 800fc12:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc14:	7dfb      	ldrb	r3, [r7, #23]
 800fc16:	3301      	adds	r3, #1
 800fc18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc1a:	7dfb      	ldrb	r3, [r7, #23]
 800fc1c:	68ba      	ldr	r2, [r7, #8]
 800fc1e:	4413      	add	r3, r2
 800fc20:	2203      	movs	r2, #3
 800fc22:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc24:	7dfb      	ldrb	r3, [r7, #23]
 800fc26:	3301      	adds	r3, #1
 800fc28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fc2a:	e013      	b.n	800fc54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fc2c:	7dfb      	ldrb	r3, [r7, #23]
 800fc2e:	68ba      	ldr	r2, [r7, #8]
 800fc30:	4413      	add	r3, r2
 800fc32:	693a      	ldr	r2, [r7, #16]
 800fc34:	7812      	ldrb	r2, [r2, #0]
 800fc36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	613b      	str	r3, [r7, #16]
    idx++;
 800fc3e:	7dfb      	ldrb	r3, [r7, #23]
 800fc40:	3301      	adds	r3, #1
 800fc42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fc44:	7dfb      	ldrb	r3, [r7, #23]
 800fc46:	68ba      	ldr	r2, [r7, #8]
 800fc48:	4413      	add	r3, r2
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	701a      	strb	r2, [r3, #0]
    idx++;
 800fc4e:	7dfb      	ldrb	r3, [r7, #23]
 800fc50:	3301      	adds	r3, #1
 800fc52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d1e7      	bne.n	800fc2c <USBD_GetString+0x52>
 800fc5c:	e000      	b.n	800fc60 <USBD_GetString+0x86>
    return;
 800fc5e:	bf00      	nop
  }
}
 800fc60:	3718      	adds	r7, #24
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}

0800fc66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fc66:	b480      	push	{r7}
 800fc68:	b085      	sub	sp, #20
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fc76:	e005      	b.n	800fc84 <USBD_GetLen+0x1e>
  {
    len++;
 800fc78:	7bfb      	ldrb	r3, [r7, #15]
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	3301      	adds	r3, #1
 800fc82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d1f5      	bne.n	800fc78 <USBD_GetLen+0x12>
  }

  return len;
 800fc8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3714      	adds	r7, #20
 800fc92:	46bd      	mov	sp, r7
 800fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc98:	4770      	bx	lr

0800fc9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fc9a:	b580      	push	{r7, lr}
 800fc9c:	b084      	sub	sp, #16
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	60f8      	str	r0, [r7, #12]
 800fca2:	60b9      	str	r1, [r7, #8]
 800fca4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	2202      	movs	r2, #2
 800fcaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	68ba      	ldr	r2, [r7, #8]
 800fcbe:	2100      	movs	r1, #0
 800fcc0:	68f8      	ldr	r0, [r7, #12]
 800fcc2:	f002 fea8 	bl	8012a16 <USBD_LL_Transmit>

  return USBD_OK;
 800fcc6:	2300      	movs	r3, #0
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3710      	adds	r7, #16
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b084      	sub	sp, #16
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	68ba      	ldr	r2, [r7, #8]
 800fce0:	2100      	movs	r1, #0
 800fce2:	68f8      	ldr	r0, [r7, #12]
 800fce4:	f002 fe97 	bl	8012a16 <USBD_LL_Transmit>

  return USBD_OK;
 800fce8:	2300      	movs	r3, #0
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	3710      	adds	r7, #16
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}

0800fcf2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fcf2:	b580      	push	{r7, lr}
 800fcf4:	b084      	sub	sp, #16
 800fcf6:	af00      	add	r7, sp, #0
 800fcf8:	60f8      	str	r0, [r7, #12]
 800fcfa:	60b9      	str	r1, [r7, #8]
 800fcfc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2203      	movs	r2, #3
 800fd02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	687a      	ldr	r2, [r7, #4]
 800fd0a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	68ba      	ldr	r2, [r7, #8]
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	68f8      	ldr	r0, [r7, #12]
 800fd1e:	f002 fe9b 	bl	8012a58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd22:	2300      	movs	r3, #0
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3710      	adds	r7, #16
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}

0800fd2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b084      	sub	sp, #16
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	60f8      	str	r0, [r7, #12]
 800fd34:	60b9      	str	r1, [r7, #8]
 800fd36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	68ba      	ldr	r2, [r7, #8]
 800fd3c:	2100      	movs	r1, #0
 800fd3e:	68f8      	ldr	r0, [r7, #12]
 800fd40:	f002 fe8a 	bl	8012a58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd44:	2300      	movs	r3, #0
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3710      	adds	r7, #16
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}

0800fd4e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fd4e:	b580      	push	{r7, lr}
 800fd50:	b082      	sub	sp, #8
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2204      	movs	r2, #4
 800fd5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fd5e:	2300      	movs	r3, #0
 800fd60:	2200      	movs	r2, #0
 800fd62:	2100      	movs	r1, #0
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f002 fe56 	bl	8012a16 <USBD_LL_Transmit>

  return USBD_OK;
 800fd6a:	2300      	movs	r3, #0
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3708      	adds	r7, #8
 800fd70:	46bd      	mov	sp, r7
 800fd72:	bd80      	pop	{r7, pc}

0800fd74 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b082      	sub	sp, #8
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	2205      	movs	r2, #5
 800fd80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd84:	2300      	movs	r3, #0
 800fd86:	2200      	movs	r2, #0
 800fd88:	2100      	movs	r1, #0
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f002 fe64 	bl	8012a58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd90:	2300      	movs	r3, #0
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3708      	adds	r7, #8
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
	...

0800fd9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	4603      	mov	r3, r0
 800fda4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fda6:	79fb      	ldrb	r3, [r7, #7]
 800fda8:	4a08      	ldr	r2, [pc, #32]	; (800fdcc <disk_status+0x30>)
 800fdaa:	009b      	lsls	r3, r3, #2
 800fdac:	4413      	add	r3, r2
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	685b      	ldr	r3, [r3, #4]
 800fdb2:	79fa      	ldrb	r2, [r7, #7]
 800fdb4:	4905      	ldr	r1, [pc, #20]	; (800fdcc <disk_status+0x30>)
 800fdb6:	440a      	add	r2, r1
 800fdb8:	7a12      	ldrb	r2, [r2, #8]
 800fdba:	4610      	mov	r0, r2
 800fdbc:	4798      	blx	r3
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800fdc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3710      	adds	r7, #16
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	20000678 	.word	0x20000678

0800fdd0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fdda:	2300      	movs	r3, #0
 800fddc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800fdde:	79fb      	ldrb	r3, [r7, #7]
 800fde0:	4a0d      	ldr	r2, [pc, #52]	; (800fe18 <disk_initialize+0x48>)
 800fde2:	5cd3      	ldrb	r3, [r2, r3]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d111      	bne.n	800fe0c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800fde8:	79fb      	ldrb	r3, [r7, #7]
 800fdea:	4a0b      	ldr	r2, [pc, #44]	; (800fe18 <disk_initialize+0x48>)
 800fdec:	2101      	movs	r1, #1
 800fdee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fdf0:	79fb      	ldrb	r3, [r7, #7]
 800fdf2:	4a09      	ldr	r2, [pc, #36]	; (800fe18 <disk_initialize+0x48>)
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	4413      	add	r3, r2
 800fdf8:	685b      	ldr	r3, [r3, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	79fa      	ldrb	r2, [r7, #7]
 800fdfe:	4906      	ldr	r1, [pc, #24]	; (800fe18 <disk_initialize+0x48>)
 800fe00:	440a      	add	r2, r1
 800fe02:	7a12      	ldrb	r2, [r2, #8]
 800fe04:	4610      	mov	r0, r2
 800fe06:	4798      	blx	r3
 800fe08:	4603      	mov	r3, r0
 800fe0a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fe0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3710      	adds	r7, #16
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	20000678 	.word	0x20000678

0800fe1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fe1c:	b590      	push	{r4, r7, lr}
 800fe1e:	b087      	sub	sp, #28
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	60b9      	str	r1, [r7, #8]
 800fe24:	607a      	str	r2, [r7, #4]
 800fe26:	603b      	str	r3, [r7, #0]
 800fe28:	4603      	mov	r3, r0
 800fe2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fe2c:	7bfb      	ldrb	r3, [r7, #15]
 800fe2e:	4a0a      	ldr	r2, [pc, #40]	; (800fe58 <disk_read+0x3c>)
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4413      	add	r3, r2
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	689c      	ldr	r4, [r3, #8]
 800fe38:	7bfb      	ldrb	r3, [r7, #15]
 800fe3a:	4a07      	ldr	r2, [pc, #28]	; (800fe58 <disk_read+0x3c>)
 800fe3c:	4413      	add	r3, r2
 800fe3e:	7a18      	ldrb	r0, [r3, #8]
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	68b9      	ldr	r1, [r7, #8]
 800fe46:	47a0      	blx	r4
 800fe48:	4603      	mov	r3, r0
 800fe4a:	75fb      	strb	r3, [r7, #23]
  return res;
 800fe4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	371c      	adds	r7, #28
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd90      	pop	{r4, r7, pc}
 800fe56:	bf00      	nop
 800fe58:	20000678 	.word	0x20000678

0800fe5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fe5c:	b590      	push	{r4, r7, lr}
 800fe5e:	b087      	sub	sp, #28
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60b9      	str	r1, [r7, #8]
 800fe64:	607a      	str	r2, [r7, #4]
 800fe66:	603b      	str	r3, [r7, #0]
 800fe68:	4603      	mov	r3, r0
 800fe6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fe6c:	7bfb      	ldrb	r3, [r7, #15]
 800fe6e:	4a0a      	ldr	r2, [pc, #40]	; (800fe98 <disk_write+0x3c>)
 800fe70:	009b      	lsls	r3, r3, #2
 800fe72:	4413      	add	r3, r2
 800fe74:	685b      	ldr	r3, [r3, #4]
 800fe76:	68dc      	ldr	r4, [r3, #12]
 800fe78:	7bfb      	ldrb	r3, [r7, #15]
 800fe7a:	4a07      	ldr	r2, [pc, #28]	; (800fe98 <disk_write+0x3c>)
 800fe7c:	4413      	add	r3, r2
 800fe7e:	7a18      	ldrb	r0, [r3, #8]
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	68b9      	ldr	r1, [r7, #8]
 800fe86:	47a0      	blx	r4
 800fe88:	4603      	mov	r3, r0
 800fe8a:	75fb      	strb	r3, [r7, #23]
  return res;
 800fe8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	371c      	adds	r7, #28
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd90      	pop	{r4, r7, pc}
 800fe96:	bf00      	nop
 800fe98:	20000678 	.word	0x20000678

0800fe9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b084      	sub	sp, #16
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	4603      	mov	r3, r0
 800fea4:	603a      	str	r2, [r7, #0]
 800fea6:	71fb      	strb	r3, [r7, #7]
 800fea8:	460b      	mov	r3, r1
 800feaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800feac:	79fb      	ldrb	r3, [r7, #7]
 800feae:	4a09      	ldr	r2, [pc, #36]	; (800fed4 <disk_ioctl+0x38>)
 800feb0:	009b      	lsls	r3, r3, #2
 800feb2:	4413      	add	r3, r2
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	691b      	ldr	r3, [r3, #16]
 800feb8:	79fa      	ldrb	r2, [r7, #7]
 800feba:	4906      	ldr	r1, [pc, #24]	; (800fed4 <disk_ioctl+0x38>)
 800febc:	440a      	add	r2, r1
 800febe:	7a10      	ldrb	r0, [r2, #8]
 800fec0:	79b9      	ldrb	r1, [r7, #6]
 800fec2:	683a      	ldr	r2, [r7, #0]
 800fec4:	4798      	blx	r3
 800fec6:	4603      	mov	r3, r0
 800fec8:	73fb      	strb	r3, [r7, #15]
  return res;
 800feca:	7bfb      	ldrb	r3, [r7, #15]
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3710      	adds	r7, #16
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	20000678 	.word	0x20000678

0800fed8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fed8:	b480      	push	{r7}
 800feda:	b085      	sub	sp, #20
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	3301      	adds	r3, #1
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fee8:	89fb      	ldrh	r3, [r7, #14]
 800feea:	021b      	lsls	r3, r3, #8
 800feec:	b21a      	sxth	r2, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	b21b      	sxth	r3, r3
 800fef4:	4313      	orrs	r3, r2
 800fef6:	b21b      	sxth	r3, r3
 800fef8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fefa:	89fb      	ldrh	r3, [r7, #14]
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3714      	adds	r7, #20
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b085      	sub	sp, #20
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	3303      	adds	r3, #3
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	021b      	lsls	r3, r3, #8
 800ff1c:	687a      	ldr	r2, [r7, #4]
 800ff1e:	3202      	adds	r2, #2
 800ff20:	7812      	ldrb	r2, [r2, #0]
 800ff22:	4313      	orrs	r3, r2
 800ff24:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	021b      	lsls	r3, r3, #8
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	3201      	adds	r2, #1
 800ff2e:	7812      	ldrb	r2, [r2, #0]
 800ff30:	4313      	orrs	r3, r2
 800ff32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	021b      	lsls	r3, r3, #8
 800ff38:	687a      	ldr	r2, [r7, #4]
 800ff3a:	7812      	ldrb	r2, [r2, #0]
 800ff3c:	4313      	orrs	r3, r2
 800ff3e:	60fb      	str	r3, [r7, #12]
	return rv;
 800ff40:	68fb      	ldr	r3, [r7, #12]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3714      	adds	r7, #20
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr

0800ff4e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ff4e:	b480      	push	{r7}
 800ff50:	b083      	sub	sp, #12
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
 800ff56:	460b      	mov	r3, r1
 800ff58:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	1c5a      	adds	r2, r3, #1
 800ff5e:	607a      	str	r2, [r7, #4]
 800ff60:	887a      	ldrh	r2, [r7, #2]
 800ff62:	b2d2      	uxtb	r2, r2
 800ff64:	701a      	strb	r2, [r3, #0]
 800ff66:	887b      	ldrh	r3, [r7, #2]
 800ff68:	0a1b      	lsrs	r3, r3, #8
 800ff6a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	1c5a      	adds	r2, r3, #1
 800ff70:	607a      	str	r2, [r7, #4]
 800ff72:	887a      	ldrh	r2, [r7, #2]
 800ff74:	b2d2      	uxtb	r2, r2
 800ff76:	701a      	strb	r2, [r3, #0]
}
 800ff78:	bf00      	nop
 800ff7a:	370c      	adds	r7, #12
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr

0800ff84 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ff84:	b480      	push	{r7}
 800ff86:	b083      	sub	sp, #12
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	1c5a      	adds	r2, r3, #1
 800ff92:	607a      	str	r2, [r7, #4]
 800ff94:	683a      	ldr	r2, [r7, #0]
 800ff96:	b2d2      	uxtb	r2, r2
 800ff98:	701a      	strb	r2, [r3, #0]
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	0a1b      	lsrs	r3, r3, #8
 800ff9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	1c5a      	adds	r2, r3, #1
 800ffa4:	607a      	str	r2, [r7, #4]
 800ffa6:	683a      	ldr	r2, [r7, #0]
 800ffa8:	b2d2      	uxtb	r2, r2
 800ffaa:	701a      	strb	r2, [r3, #0]
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	0a1b      	lsrs	r3, r3, #8
 800ffb0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	1c5a      	adds	r2, r3, #1
 800ffb6:	607a      	str	r2, [r7, #4]
 800ffb8:	683a      	ldr	r2, [r7, #0]
 800ffba:	b2d2      	uxtb	r2, r2
 800ffbc:	701a      	strb	r2, [r3, #0]
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	0a1b      	lsrs	r3, r3, #8
 800ffc2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	1c5a      	adds	r2, r3, #1
 800ffc8:	607a      	str	r2, [r7, #4]
 800ffca:	683a      	ldr	r2, [r7, #0]
 800ffcc:	b2d2      	uxtb	r2, r2
 800ffce:	701a      	strb	r2, [r3, #0]
}
 800ffd0:	bf00      	nop
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr

0800ffdc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ffdc:	b480      	push	{r7}
 800ffde:	b087      	sub	sp, #28
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d00d      	beq.n	8010012 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fff6:	693a      	ldr	r2, [r7, #16]
 800fff8:	1c53      	adds	r3, r2, #1
 800fffa:	613b      	str	r3, [r7, #16]
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	1c59      	adds	r1, r3, #1
 8010000:	6179      	str	r1, [r7, #20]
 8010002:	7812      	ldrb	r2, [r2, #0]
 8010004:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	3b01      	subs	r3, #1
 801000a:	607b      	str	r3, [r7, #4]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d1f1      	bne.n	800fff6 <mem_cpy+0x1a>
	}
}
 8010012:	bf00      	nop
 8010014:	371c      	adds	r7, #28
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr

0801001e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801001e:	b480      	push	{r7}
 8010020:	b087      	sub	sp, #28
 8010022:	af00      	add	r7, sp, #0
 8010024:	60f8      	str	r0, [r7, #12]
 8010026:	60b9      	str	r1, [r7, #8]
 8010028:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	1c5a      	adds	r2, r3, #1
 8010032:	617a      	str	r2, [r7, #20]
 8010034:	68ba      	ldr	r2, [r7, #8]
 8010036:	b2d2      	uxtb	r2, r2
 8010038:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	3b01      	subs	r3, #1
 801003e:	607b      	str	r3, [r7, #4]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d1f3      	bne.n	801002e <mem_set+0x10>
}
 8010046:	bf00      	nop
 8010048:	bf00      	nop
 801004a:	371c      	adds	r7, #28
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr

08010054 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010054:	b480      	push	{r7}
 8010056:	b089      	sub	sp, #36	; 0x24
 8010058:	af00      	add	r7, sp, #0
 801005a:	60f8      	str	r0, [r7, #12]
 801005c:	60b9      	str	r1, [r7, #8]
 801005e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	61fb      	str	r3, [r7, #28]
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010068:	2300      	movs	r3, #0
 801006a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801006c:	69fb      	ldr	r3, [r7, #28]
 801006e:	1c5a      	adds	r2, r3, #1
 8010070:	61fa      	str	r2, [r7, #28]
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	4619      	mov	r1, r3
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	1c5a      	adds	r2, r3, #1
 801007a:	61ba      	str	r2, [r7, #24]
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	1acb      	subs	r3, r1, r3
 8010080:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	3b01      	subs	r3, #1
 8010086:	607b      	str	r3, [r7, #4]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d002      	beq.n	8010094 <mem_cmp+0x40>
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d0eb      	beq.n	801006c <mem_cmp+0x18>

	return r;
 8010094:	697b      	ldr	r3, [r7, #20]
}
 8010096:	4618      	mov	r0, r3
 8010098:	3724      	adds	r7, #36	; 0x24
 801009a:	46bd      	mov	sp, r7
 801009c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a0:	4770      	bx	lr

080100a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80100a2:	b480      	push	{r7}
 80100a4:	b083      	sub	sp, #12
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	6078      	str	r0, [r7, #4]
 80100aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80100ac:	e002      	b.n	80100b4 <chk_chr+0x12>
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	3301      	adds	r3, #1
 80100b2:	607b      	str	r3, [r7, #4]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d005      	beq.n	80100c8 <chk_chr+0x26>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	781b      	ldrb	r3, [r3, #0]
 80100c0:	461a      	mov	r2, r3
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d1f2      	bne.n	80100ae <chk_chr+0xc>
	return *str;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	781b      	ldrb	r3, [r3, #0]
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	370c      	adds	r7, #12
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr

080100d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80100d8:	b480      	push	{r7}
 80100da:	b085      	sub	sp, #20
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80100e2:	2300      	movs	r3, #0
 80100e4:	60bb      	str	r3, [r7, #8]
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	60fb      	str	r3, [r7, #12]
 80100ea:	e029      	b.n	8010140 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80100ec:	4a27      	ldr	r2, [pc, #156]	; (801018c <chk_lock+0xb4>)
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	011b      	lsls	r3, r3, #4
 80100f2:	4413      	add	r3, r2
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d01d      	beq.n	8010136 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80100fa:	4a24      	ldr	r2, [pc, #144]	; (801018c <chk_lock+0xb4>)
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	011b      	lsls	r3, r3, #4
 8010100:	4413      	add	r3, r2
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	429a      	cmp	r2, r3
 801010a:	d116      	bne.n	801013a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801010c:	4a1f      	ldr	r2, [pc, #124]	; (801018c <chk_lock+0xb4>)
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	011b      	lsls	r3, r3, #4
 8010112:	4413      	add	r3, r2
 8010114:	3304      	adds	r3, #4
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801011c:	429a      	cmp	r2, r3
 801011e:	d10c      	bne.n	801013a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010120:	4a1a      	ldr	r2, [pc, #104]	; (801018c <chk_lock+0xb4>)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	011b      	lsls	r3, r3, #4
 8010126:	4413      	add	r3, r2
 8010128:	3308      	adds	r3, #8
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010130:	429a      	cmp	r2, r3
 8010132:	d102      	bne.n	801013a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010134:	e007      	b.n	8010146 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010136:	2301      	movs	r3, #1
 8010138:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	3301      	adds	r3, #1
 801013e:	60fb      	str	r3, [r7, #12]
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2b01      	cmp	r3, #1
 8010144:	d9d2      	bls.n	80100ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2b02      	cmp	r3, #2
 801014a:	d109      	bne.n	8010160 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d102      	bne.n	8010158 <chk_lock+0x80>
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	2b02      	cmp	r3, #2
 8010156:	d101      	bne.n	801015c <chk_lock+0x84>
 8010158:	2300      	movs	r3, #0
 801015a:	e010      	b.n	801017e <chk_lock+0xa6>
 801015c:	2312      	movs	r3, #18
 801015e:	e00e      	b.n	801017e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d108      	bne.n	8010178 <chk_lock+0xa0>
 8010166:	4a09      	ldr	r2, [pc, #36]	; (801018c <chk_lock+0xb4>)
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	011b      	lsls	r3, r3, #4
 801016c:	4413      	add	r3, r2
 801016e:	330c      	adds	r3, #12
 8010170:	881b      	ldrh	r3, [r3, #0]
 8010172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010176:	d101      	bne.n	801017c <chk_lock+0xa4>
 8010178:	2310      	movs	r3, #16
 801017a:	e000      	b.n	801017e <chk_lock+0xa6>
 801017c:	2300      	movs	r3, #0
}
 801017e:	4618      	mov	r0, r3
 8010180:	3714      	adds	r7, #20
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop
 801018c:	20000658 	.word	0x20000658

08010190 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010190:	b480      	push	{r7}
 8010192:	b083      	sub	sp, #12
 8010194:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010196:	2300      	movs	r3, #0
 8010198:	607b      	str	r3, [r7, #4]
 801019a:	e002      	b.n	80101a2 <enq_lock+0x12>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	3301      	adds	r3, #1
 80101a0:	607b      	str	r3, [r7, #4]
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d806      	bhi.n	80101b6 <enq_lock+0x26>
 80101a8:	4a09      	ldr	r2, [pc, #36]	; (80101d0 <enq_lock+0x40>)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	011b      	lsls	r3, r3, #4
 80101ae:	4413      	add	r3, r2
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1f2      	bne.n	801019c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2b02      	cmp	r3, #2
 80101ba:	bf14      	ite	ne
 80101bc:	2301      	movne	r3, #1
 80101be:	2300      	moveq	r3, #0
 80101c0:	b2db      	uxtb	r3, r3
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	370c      	adds	r7, #12
 80101c6:	46bd      	mov	sp, r7
 80101c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101cc:	4770      	bx	lr
 80101ce:	bf00      	nop
 80101d0:	20000658 	.word	0x20000658

080101d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b085      	sub	sp, #20
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80101de:	2300      	movs	r3, #0
 80101e0:	60fb      	str	r3, [r7, #12]
 80101e2:	e01f      	b.n	8010224 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80101e4:	4a41      	ldr	r2, [pc, #260]	; (80102ec <inc_lock+0x118>)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	011b      	lsls	r3, r3, #4
 80101ea:	4413      	add	r3, r2
 80101ec:	681a      	ldr	r2, [r3, #0]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d113      	bne.n	801021e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80101f6:	4a3d      	ldr	r2, [pc, #244]	; (80102ec <inc_lock+0x118>)
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	011b      	lsls	r3, r3, #4
 80101fc:	4413      	add	r3, r2
 80101fe:	3304      	adds	r3, #4
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010206:	429a      	cmp	r2, r3
 8010208:	d109      	bne.n	801021e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801020a:	4a38      	ldr	r2, [pc, #224]	; (80102ec <inc_lock+0x118>)
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	011b      	lsls	r3, r3, #4
 8010210:	4413      	add	r3, r2
 8010212:	3308      	adds	r3, #8
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801021a:	429a      	cmp	r2, r3
 801021c:	d006      	beq.n	801022c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	3301      	adds	r3, #1
 8010222:	60fb      	str	r3, [r7, #12]
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2b01      	cmp	r3, #1
 8010228:	d9dc      	bls.n	80101e4 <inc_lock+0x10>
 801022a:	e000      	b.n	801022e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801022c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2b02      	cmp	r3, #2
 8010232:	d132      	bne.n	801029a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010234:	2300      	movs	r3, #0
 8010236:	60fb      	str	r3, [r7, #12]
 8010238:	e002      	b.n	8010240 <inc_lock+0x6c>
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	3301      	adds	r3, #1
 801023e:	60fb      	str	r3, [r7, #12]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2b01      	cmp	r3, #1
 8010244:	d806      	bhi.n	8010254 <inc_lock+0x80>
 8010246:	4a29      	ldr	r2, [pc, #164]	; (80102ec <inc_lock+0x118>)
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	011b      	lsls	r3, r3, #4
 801024c:	4413      	add	r3, r2
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1f2      	bne.n	801023a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2b02      	cmp	r3, #2
 8010258:	d101      	bne.n	801025e <inc_lock+0x8a>
 801025a:	2300      	movs	r3, #0
 801025c:	e040      	b.n	80102e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	4922      	ldr	r1, [pc, #136]	; (80102ec <inc_lock+0x118>)
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	011b      	lsls	r3, r3, #4
 8010268:	440b      	add	r3, r1
 801026a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	689a      	ldr	r2, [r3, #8]
 8010270:	491e      	ldr	r1, [pc, #120]	; (80102ec <inc_lock+0x118>)
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	011b      	lsls	r3, r3, #4
 8010276:	440b      	add	r3, r1
 8010278:	3304      	adds	r3, #4
 801027a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	695a      	ldr	r2, [r3, #20]
 8010280:	491a      	ldr	r1, [pc, #104]	; (80102ec <inc_lock+0x118>)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	011b      	lsls	r3, r3, #4
 8010286:	440b      	add	r3, r1
 8010288:	3308      	adds	r3, #8
 801028a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801028c:	4a17      	ldr	r2, [pc, #92]	; (80102ec <inc_lock+0x118>)
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	011b      	lsls	r3, r3, #4
 8010292:	4413      	add	r3, r2
 8010294:	330c      	adds	r3, #12
 8010296:	2200      	movs	r2, #0
 8010298:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d009      	beq.n	80102b4 <inc_lock+0xe0>
 80102a0:	4a12      	ldr	r2, [pc, #72]	; (80102ec <inc_lock+0x118>)
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	011b      	lsls	r3, r3, #4
 80102a6:	4413      	add	r3, r2
 80102a8:	330c      	adds	r3, #12
 80102aa:	881b      	ldrh	r3, [r3, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d001      	beq.n	80102b4 <inc_lock+0xe0>
 80102b0:	2300      	movs	r3, #0
 80102b2:	e015      	b.n	80102e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d108      	bne.n	80102cc <inc_lock+0xf8>
 80102ba:	4a0c      	ldr	r2, [pc, #48]	; (80102ec <inc_lock+0x118>)
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	011b      	lsls	r3, r3, #4
 80102c0:	4413      	add	r3, r2
 80102c2:	330c      	adds	r3, #12
 80102c4:	881b      	ldrh	r3, [r3, #0]
 80102c6:	3301      	adds	r3, #1
 80102c8:	b29a      	uxth	r2, r3
 80102ca:	e001      	b.n	80102d0 <inc_lock+0xfc>
 80102cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80102d0:	4906      	ldr	r1, [pc, #24]	; (80102ec <inc_lock+0x118>)
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	011b      	lsls	r3, r3, #4
 80102d6:	440b      	add	r3, r1
 80102d8:	330c      	adds	r3, #12
 80102da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	3301      	adds	r3, #1
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	3714      	adds	r7, #20
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr
 80102ec:	20000658 	.word	0x20000658

080102f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b085      	sub	sp, #20
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	3b01      	subs	r3, #1
 80102fc:	607b      	str	r3, [r7, #4]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2b01      	cmp	r3, #1
 8010302:	d825      	bhi.n	8010350 <dec_lock+0x60>
		n = Files[i].ctr;
 8010304:	4a17      	ldr	r2, [pc, #92]	; (8010364 <dec_lock+0x74>)
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	011b      	lsls	r3, r3, #4
 801030a:	4413      	add	r3, r2
 801030c:	330c      	adds	r3, #12
 801030e:	881b      	ldrh	r3, [r3, #0]
 8010310:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010312:	89fb      	ldrh	r3, [r7, #14]
 8010314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010318:	d101      	bne.n	801031e <dec_lock+0x2e>
 801031a:	2300      	movs	r3, #0
 801031c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801031e:	89fb      	ldrh	r3, [r7, #14]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d002      	beq.n	801032a <dec_lock+0x3a>
 8010324:	89fb      	ldrh	r3, [r7, #14]
 8010326:	3b01      	subs	r3, #1
 8010328:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801032a:	4a0e      	ldr	r2, [pc, #56]	; (8010364 <dec_lock+0x74>)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	011b      	lsls	r3, r3, #4
 8010330:	4413      	add	r3, r2
 8010332:	330c      	adds	r3, #12
 8010334:	89fa      	ldrh	r2, [r7, #14]
 8010336:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010338:	89fb      	ldrh	r3, [r7, #14]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d105      	bne.n	801034a <dec_lock+0x5a>
 801033e:	4a09      	ldr	r2, [pc, #36]	; (8010364 <dec_lock+0x74>)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	011b      	lsls	r3, r3, #4
 8010344:	4413      	add	r3, r2
 8010346:	2200      	movs	r2, #0
 8010348:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801034a:	2300      	movs	r3, #0
 801034c:	737b      	strb	r3, [r7, #13]
 801034e:	e001      	b.n	8010354 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010350:	2302      	movs	r3, #2
 8010352:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010354:	7b7b      	ldrb	r3, [r7, #13]
}
 8010356:	4618      	mov	r0, r3
 8010358:	3714      	adds	r7, #20
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr
 8010362:	bf00      	nop
 8010364:	20000658 	.word	0x20000658

08010368 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010368:	b480      	push	{r7}
 801036a:	b085      	sub	sp, #20
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010370:	2300      	movs	r3, #0
 8010372:	60fb      	str	r3, [r7, #12]
 8010374:	e010      	b.n	8010398 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010376:	4a0d      	ldr	r2, [pc, #52]	; (80103ac <clear_lock+0x44>)
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	011b      	lsls	r3, r3, #4
 801037c:	4413      	add	r3, r2
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	687a      	ldr	r2, [r7, #4]
 8010382:	429a      	cmp	r2, r3
 8010384:	d105      	bne.n	8010392 <clear_lock+0x2a>
 8010386:	4a09      	ldr	r2, [pc, #36]	; (80103ac <clear_lock+0x44>)
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	011b      	lsls	r3, r3, #4
 801038c:	4413      	add	r3, r2
 801038e:	2200      	movs	r2, #0
 8010390:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	3301      	adds	r3, #1
 8010396:	60fb      	str	r3, [r7, #12]
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2b01      	cmp	r3, #1
 801039c:	d9eb      	bls.n	8010376 <clear_lock+0xe>
	}
}
 801039e:	bf00      	nop
 80103a0:	bf00      	nop
 80103a2:	3714      	adds	r7, #20
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr
 80103ac:	20000658 	.word	0x20000658

080103b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80103b0:	b580      	push	{r7, lr}
 80103b2:	b086      	sub	sp, #24
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80103b8:	2300      	movs	r3, #0
 80103ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	78db      	ldrb	r3, [r3, #3]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d034      	beq.n	801042e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	7858      	ldrb	r0, [r3, #1]
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103d4:	2301      	movs	r3, #1
 80103d6:	697a      	ldr	r2, [r7, #20]
 80103d8:	f7ff fd40 	bl	800fe5c <disk_write>
 80103dc:	4603      	mov	r3, r0
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d002      	beq.n	80103e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80103e2:	2301      	movs	r3, #1
 80103e4:	73fb      	strb	r3, [r7, #15]
 80103e6:	e022      	b.n	801042e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2200      	movs	r2, #0
 80103ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6a1b      	ldr	r3, [r3, #32]
 80103f2:	697a      	ldr	r2, [r7, #20]
 80103f4:	1ad2      	subs	r2, r2, r3
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	699b      	ldr	r3, [r3, #24]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d217      	bcs.n	801042e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	789b      	ldrb	r3, [r3, #2]
 8010402:	613b      	str	r3, [r7, #16]
 8010404:	e010      	b.n	8010428 <sync_window+0x78>
					wsect += fs->fsize;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	699b      	ldr	r3, [r3, #24]
 801040a:	697a      	ldr	r2, [r7, #20]
 801040c:	4413      	add	r3, r2
 801040e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	7858      	ldrb	r0, [r3, #1]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801041a:	2301      	movs	r3, #1
 801041c:	697a      	ldr	r2, [r7, #20]
 801041e:	f7ff fd1d 	bl	800fe5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	3b01      	subs	r3, #1
 8010426:	613b      	str	r3, [r7, #16]
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	2b01      	cmp	r3, #1
 801042c:	d8eb      	bhi.n	8010406 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801042e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010430:	4618      	mov	r0, r3
 8010432:	3718      	adds	r7, #24
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
 8010440:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010442:	2300      	movs	r3, #0
 8010444:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801044a:	683a      	ldr	r2, [r7, #0]
 801044c:	429a      	cmp	r2, r3
 801044e:	d01b      	beq.n	8010488 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f7ff ffad 	bl	80103b0 <sync_window>
 8010456:	4603      	mov	r3, r0
 8010458:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801045a:	7bfb      	ldrb	r3, [r7, #15]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d113      	bne.n	8010488 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	7858      	ldrb	r0, [r3, #1]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801046a:	2301      	movs	r3, #1
 801046c:	683a      	ldr	r2, [r7, #0]
 801046e:	f7ff fcd5 	bl	800fe1c <disk_read>
 8010472:	4603      	mov	r3, r0
 8010474:	2b00      	cmp	r3, #0
 8010476:	d004      	beq.n	8010482 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010478:	f04f 33ff 	mov.w	r3, #4294967295
 801047c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801047e:	2301      	movs	r3, #1
 8010480:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	683a      	ldr	r2, [r7, #0]
 8010486:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8010488:	7bfb      	ldrb	r3, [r7, #15]
}
 801048a:	4618      	mov	r0, r3
 801048c:	3710      	adds	r7, #16
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
	...

08010494 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b084      	sub	sp, #16
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7ff ff87 	bl	80103b0 <sync_window>
 80104a2:	4603      	mov	r3, r0
 80104a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80104a6:	7bfb      	ldrb	r3, [r7, #15]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d158      	bne.n	801055e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	781b      	ldrb	r3, [r3, #0]
 80104b0:	2b03      	cmp	r3, #3
 80104b2:	d148      	bne.n	8010546 <sync_fs+0xb2>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	791b      	ldrb	r3, [r3, #4]
 80104b8:	2b01      	cmp	r3, #1
 80104ba:	d144      	bne.n	8010546 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	3330      	adds	r3, #48	; 0x30
 80104c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80104c4:	2100      	movs	r1, #0
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7ff fda9 	bl	801001e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	3330      	adds	r3, #48	; 0x30
 80104d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80104d4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80104d8:	4618      	mov	r0, r3
 80104da:	f7ff fd38 	bl	800ff4e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	3330      	adds	r3, #48	; 0x30
 80104e2:	4921      	ldr	r1, [pc, #132]	; (8010568 <sync_fs+0xd4>)
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7ff fd4d 	bl	800ff84 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	3330      	adds	r3, #48	; 0x30
 80104ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80104f2:	491e      	ldr	r1, [pc, #120]	; (801056c <sync_fs+0xd8>)
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7ff fd45 	bl	800ff84 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	3330      	adds	r3, #48	; 0x30
 80104fe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	691b      	ldr	r3, [r3, #16]
 8010506:	4619      	mov	r1, r3
 8010508:	4610      	mov	r0, r2
 801050a:	f7ff fd3b 	bl	800ff84 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	3330      	adds	r3, #48	; 0x30
 8010512:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	68db      	ldr	r3, [r3, #12]
 801051a:	4619      	mov	r1, r3
 801051c:	4610      	mov	r0, r2
 801051e:	f7ff fd31 	bl	800ff84 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	69db      	ldr	r3, [r3, #28]
 8010526:	1c5a      	adds	r2, r3, #1
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	7858      	ldrb	r0, [r3, #1]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801053a:	2301      	movs	r3, #1
 801053c:	f7ff fc8e 	bl	800fe5c <disk_write>
			fs->fsi_flag = 0;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2200      	movs	r2, #0
 8010544:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	785b      	ldrb	r3, [r3, #1]
 801054a:	2200      	movs	r2, #0
 801054c:	2100      	movs	r1, #0
 801054e:	4618      	mov	r0, r3
 8010550:	f7ff fca4 	bl	800fe9c <disk_ioctl>
 8010554:	4603      	mov	r3, r0
 8010556:	2b00      	cmp	r3, #0
 8010558:	d001      	beq.n	801055e <sync_fs+0xca>
 801055a:	2301      	movs	r3, #1
 801055c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801055e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010560:	4618      	mov	r0, r3
 8010562:	3710      	adds	r7, #16
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}
 8010568:	41615252 	.word	0x41615252
 801056c:	61417272 	.word	0x61417272

08010570 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010570:	b480      	push	{r7}
 8010572:	b083      	sub	sp, #12
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	3b02      	subs	r3, #2
 801057e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	695b      	ldr	r3, [r3, #20]
 8010584:	3b02      	subs	r3, #2
 8010586:	683a      	ldr	r2, [r7, #0]
 8010588:	429a      	cmp	r2, r3
 801058a:	d301      	bcc.n	8010590 <clust2sect+0x20>
 801058c:	2300      	movs	r3, #0
 801058e:	e008      	b.n	80105a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	895b      	ldrh	r3, [r3, #10]
 8010594:	461a      	mov	r2, r3
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	fb03 f202 	mul.w	r2, r3, r2
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105a0:	4413      	add	r3, r2
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	370c      	adds	r7, #12
 80105a6:	46bd      	mov	sp, r7
 80105a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ac:	4770      	bx	lr

080105ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80105ae:	b580      	push	{r7, lr}
 80105b0:	b086      	sub	sp, #24
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	6078      	str	r0, [r7, #4]
 80105b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	d904      	bls.n	80105ce <get_fat+0x20>
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	695b      	ldr	r3, [r3, #20]
 80105c8:	683a      	ldr	r2, [r7, #0]
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d302      	bcc.n	80105d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80105ce:	2301      	movs	r3, #1
 80105d0:	617b      	str	r3, [r7, #20]
 80105d2:	e08f      	b.n	80106f4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80105d4:	f04f 33ff 	mov.w	r3, #4294967295
 80105d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	781b      	ldrb	r3, [r3, #0]
 80105de:	2b03      	cmp	r3, #3
 80105e0:	d062      	beq.n	80106a8 <get_fat+0xfa>
 80105e2:	2b03      	cmp	r3, #3
 80105e4:	dc7c      	bgt.n	80106e0 <get_fat+0x132>
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d002      	beq.n	80105f0 <get_fat+0x42>
 80105ea:	2b02      	cmp	r3, #2
 80105ec:	d042      	beq.n	8010674 <get_fat+0xc6>
 80105ee:	e077      	b.n	80106e0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	60fb      	str	r3, [r7, #12]
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	085b      	lsrs	r3, r3, #1
 80105f8:	68fa      	ldr	r2, [r7, #12]
 80105fa:	4413      	add	r3, r2
 80105fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	6a1a      	ldr	r2, [r3, #32]
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	0a5b      	lsrs	r3, r3, #9
 8010606:	4413      	add	r3, r2
 8010608:	4619      	mov	r1, r3
 801060a:	6938      	ldr	r0, [r7, #16]
 801060c:	f7ff ff14 	bl	8010438 <move_window>
 8010610:	4603      	mov	r3, r0
 8010612:	2b00      	cmp	r3, #0
 8010614:	d167      	bne.n	80106e6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	1c5a      	adds	r2, r3, #1
 801061a:	60fa      	str	r2, [r7, #12]
 801061c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010620:	693a      	ldr	r2, [r7, #16]
 8010622:	4413      	add	r3, r2
 8010624:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010628:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801062a:	693b      	ldr	r3, [r7, #16]
 801062c:	6a1a      	ldr	r2, [r3, #32]
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	0a5b      	lsrs	r3, r3, #9
 8010632:	4413      	add	r3, r2
 8010634:	4619      	mov	r1, r3
 8010636:	6938      	ldr	r0, [r7, #16]
 8010638:	f7ff fefe 	bl	8010438 <move_window>
 801063c:	4603      	mov	r3, r0
 801063e:	2b00      	cmp	r3, #0
 8010640:	d153      	bne.n	80106ea <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010648:	693a      	ldr	r2, [r7, #16]
 801064a:	4413      	add	r3, r2
 801064c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010650:	021b      	lsls	r3, r3, #8
 8010652:	461a      	mov	r2, r3
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	4313      	orrs	r3, r2
 8010658:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	f003 0301 	and.w	r3, r3, #1
 8010660:	2b00      	cmp	r3, #0
 8010662:	d002      	beq.n	801066a <get_fat+0xbc>
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	091b      	lsrs	r3, r3, #4
 8010668:	e002      	b.n	8010670 <get_fat+0xc2>
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010670:	617b      	str	r3, [r7, #20]
			break;
 8010672:	e03f      	b.n	80106f4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	6a1a      	ldr	r2, [r3, #32]
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	0a1b      	lsrs	r3, r3, #8
 801067c:	4413      	add	r3, r2
 801067e:	4619      	mov	r1, r3
 8010680:	6938      	ldr	r0, [r7, #16]
 8010682:	f7ff fed9 	bl	8010438 <move_window>
 8010686:	4603      	mov	r3, r0
 8010688:	2b00      	cmp	r3, #0
 801068a:	d130      	bne.n	80106ee <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	005b      	lsls	r3, r3, #1
 8010696:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801069a:	4413      	add	r3, r2
 801069c:	4618      	mov	r0, r3
 801069e:	f7ff fc1b 	bl	800fed8 <ld_word>
 80106a2:	4603      	mov	r3, r0
 80106a4:	617b      	str	r3, [r7, #20]
			break;
 80106a6:	e025      	b.n	80106f4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	6a1a      	ldr	r2, [r3, #32]
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	09db      	lsrs	r3, r3, #7
 80106b0:	4413      	add	r3, r2
 80106b2:	4619      	mov	r1, r3
 80106b4:	6938      	ldr	r0, [r7, #16]
 80106b6:	f7ff febf 	bl	8010438 <move_window>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d118      	bne.n	80106f2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80106c6:	683b      	ldr	r3, [r7, #0]
 80106c8:	009b      	lsls	r3, r3, #2
 80106ca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80106ce:	4413      	add	r3, r2
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7ff fc19 	bl	800ff08 <ld_dword>
 80106d6:	4603      	mov	r3, r0
 80106d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80106dc:	617b      	str	r3, [r7, #20]
			break;
 80106de:	e009      	b.n	80106f4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80106e0:	2301      	movs	r3, #1
 80106e2:	617b      	str	r3, [r7, #20]
 80106e4:	e006      	b.n	80106f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80106e6:	bf00      	nop
 80106e8:	e004      	b.n	80106f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80106ea:	bf00      	nop
 80106ec:	e002      	b.n	80106f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80106ee:	bf00      	nop
 80106f0:	e000      	b.n	80106f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80106f2:	bf00      	nop
		}
	}

	return val;
 80106f4:	697b      	ldr	r3, [r7, #20]
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3718      	adds	r7, #24
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}

080106fe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80106fe:	b590      	push	{r4, r7, lr}
 8010700:	b089      	sub	sp, #36	; 0x24
 8010702:	af00      	add	r7, sp, #0
 8010704:	60f8      	str	r0, [r7, #12]
 8010706:	60b9      	str	r1, [r7, #8]
 8010708:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801070a:	2302      	movs	r3, #2
 801070c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	2b01      	cmp	r3, #1
 8010712:	f240 80d2 	bls.w	80108ba <put_fat+0x1bc>
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	695b      	ldr	r3, [r3, #20]
 801071a:	68ba      	ldr	r2, [r7, #8]
 801071c:	429a      	cmp	r2, r3
 801071e:	f080 80cc 	bcs.w	80108ba <put_fat+0x1bc>
		switch (fs->fs_type) {
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	2b03      	cmp	r3, #3
 8010728:	f000 8096 	beq.w	8010858 <put_fat+0x15a>
 801072c:	2b03      	cmp	r3, #3
 801072e:	f300 80cd 	bgt.w	80108cc <put_fat+0x1ce>
 8010732:	2b01      	cmp	r3, #1
 8010734:	d002      	beq.n	801073c <put_fat+0x3e>
 8010736:	2b02      	cmp	r3, #2
 8010738:	d06e      	beq.n	8010818 <put_fat+0x11a>
 801073a:	e0c7      	b.n	80108cc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	61bb      	str	r3, [r7, #24]
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	085b      	lsrs	r3, r3, #1
 8010744:	69ba      	ldr	r2, [r7, #24]
 8010746:	4413      	add	r3, r2
 8010748:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	6a1a      	ldr	r2, [r3, #32]
 801074e:	69bb      	ldr	r3, [r7, #24]
 8010750:	0a5b      	lsrs	r3, r3, #9
 8010752:	4413      	add	r3, r2
 8010754:	4619      	mov	r1, r3
 8010756:	68f8      	ldr	r0, [r7, #12]
 8010758:	f7ff fe6e 	bl	8010438 <move_window>
 801075c:	4603      	mov	r3, r0
 801075e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010760:	7ffb      	ldrb	r3, [r7, #31]
 8010762:	2b00      	cmp	r3, #0
 8010764:	f040 80ab 	bne.w	80108be <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	1c59      	adds	r1, r3, #1
 8010772:	61b9      	str	r1, [r7, #24]
 8010774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010778:	4413      	add	r3, r2
 801077a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	f003 0301 	and.w	r3, r3, #1
 8010782:	2b00      	cmp	r3, #0
 8010784:	d00d      	beq.n	80107a2 <put_fat+0xa4>
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	b25b      	sxtb	r3, r3
 801078c:	f003 030f 	and.w	r3, r3, #15
 8010790:	b25a      	sxtb	r2, r3
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	b2db      	uxtb	r3, r3
 8010796:	011b      	lsls	r3, r3, #4
 8010798:	b25b      	sxtb	r3, r3
 801079a:	4313      	orrs	r3, r2
 801079c:	b25b      	sxtb	r3, r3
 801079e:	b2db      	uxtb	r3, r3
 80107a0:	e001      	b.n	80107a6 <put_fat+0xa8>
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	697a      	ldr	r2, [r7, #20]
 80107a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2201      	movs	r2, #1
 80107ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	6a1a      	ldr	r2, [r3, #32]
 80107b4:	69bb      	ldr	r3, [r7, #24]
 80107b6:	0a5b      	lsrs	r3, r3, #9
 80107b8:	4413      	add	r3, r2
 80107ba:	4619      	mov	r1, r3
 80107bc:	68f8      	ldr	r0, [r7, #12]
 80107be:	f7ff fe3b 	bl	8010438 <move_window>
 80107c2:	4603      	mov	r3, r0
 80107c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80107c6:	7ffb      	ldrb	r3, [r7, #31]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d17a      	bne.n	80108c2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107d8:	4413      	add	r3, r2
 80107da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	f003 0301 	and.w	r3, r3, #1
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d003      	beq.n	80107ee <put_fat+0xf0>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	091b      	lsrs	r3, r3, #4
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	e00e      	b.n	801080c <put_fat+0x10e>
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	781b      	ldrb	r3, [r3, #0]
 80107f2:	b25b      	sxtb	r3, r3
 80107f4:	f023 030f 	bic.w	r3, r3, #15
 80107f8:	b25a      	sxtb	r2, r3
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	0a1b      	lsrs	r3, r3, #8
 80107fe:	b25b      	sxtb	r3, r3
 8010800:	f003 030f 	and.w	r3, r3, #15
 8010804:	b25b      	sxtb	r3, r3
 8010806:	4313      	orrs	r3, r2
 8010808:	b25b      	sxtb	r3, r3
 801080a:	b2db      	uxtb	r3, r3
 801080c:	697a      	ldr	r2, [r7, #20]
 801080e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	2201      	movs	r2, #1
 8010814:	70da      	strb	r2, [r3, #3]
			break;
 8010816:	e059      	b.n	80108cc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	6a1a      	ldr	r2, [r3, #32]
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	0a1b      	lsrs	r3, r3, #8
 8010820:	4413      	add	r3, r2
 8010822:	4619      	mov	r1, r3
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	f7ff fe07 	bl	8010438 <move_window>
 801082a:	4603      	mov	r3, r0
 801082c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801082e:	7ffb      	ldrb	r3, [r7, #31]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d148      	bne.n	80108c6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	005b      	lsls	r3, r3, #1
 801083e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010842:	4413      	add	r3, r2
 8010844:	687a      	ldr	r2, [r7, #4]
 8010846:	b292      	uxth	r2, r2
 8010848:	4611      	mov	r1, r2
 801084a:	4618      	mov	r0, r3
 801084c:	f7ff fb7f 	bl	800ff4e <st_word>
			fs->wflag = 1;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	2201      	movs	r2, #1
 8010854:	70da      	strb	r2, [r3, #3]
			break;
 8010856:	e039      	b.n	80108cc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	6a1a      	ldr	r2, [r3, #32]
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	09db      	lsrs	r3, r3, #7
 8010860:	4413      	add	r3, r2
 8010862:	4619      	mov	r1, r3
 8010864:	68f8      	ldr	r0, [r7, #12]
 8010866:	f7ff fde7 	bl	8010438 <move_window>
 801086a:	4603      	mov	r3, r0
 801086c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801086e:	7ffb      	ldrb	r3, [r7, #31]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d12a      	bne.n	80108ca <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	009b      	lsls	r3, r3, #2
 8010884:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010888:	4413      	add	r3, r2
 801088a:	4618      	mov	r0, r3
 801088c:	f7ff fb3c 	bl	800ff08 <ld_dword>
 8010890:	4603      	mov	r3, r0
 8010892:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010896:	4323      	orrs	r3, r4
 8010898:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	009b      	lsls	r3, r3, #2
 80108a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80108a8:	4413      	add	r3, r2
 80108aa:	6879      	ldr	r1, [r7, #4]
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7ff fb69 	bl	800ff84 <st_dword>
			fs->wflag = 1;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2201      	movs	r2, #1
 80108b6:	70da      	strb	r2, [r3, #3]
			break;
 80108b8:	e008      	b.n	80108cc <put_fat+0x1ce>
		}
	}
 80108ba:	bf00      	nop
 80108bc:	e006      	b.n	80108cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80108be:	bf00      	nop
 80108c0:	e004      	b.n	80108cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80108c2:	bf00      	nop
 80108c4:	e002      	b.n	80108cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80108c6:	bf00      	nop
 80108c8:	e000      	b.n	80108cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80108ca:	bf00      	nop
	return res;
 80108cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3724      	adds	r7, #36	; 0x24
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd90      	pop	{r4, r7, pc}

080108d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b088      	sub	sp, #32
 80108da:	af00      	add	r7, sp, #0
 80108dc:	60f8      	str	r0, [r7, #12]
 80108de:	60b9      	str	r1, [r7, #8]
 80108e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80108e2:	2300      	movs	r3, #0
 80108e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	2b01      	cmp	r3, #1
 80108f0:	d904      	bls.n	80108fc <remove_chain+0x26>
 80108f2:	69bb      	ldr	r3, [r7, #24]
 80108f4:	695b      	ldr	r3, [r3, #20]
 80108f6:	68ba      	ldr	r2, [r7, #8]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d301      	bcc.n	8010900 <remove_chain+0x2a>
 80108fc:	2302      	movs	r3, #2
 80108fe:	e04b      	b.n	8010998 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d00c      	beq.n	8010920 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010906:	f04f 32ff 	mov.w	r2, #4294967295
 801090a:	6879      	ldr	r1, [r7, #4]
 801090c:	69b8      	ldr	r0, [r7, #24]
 801090e:	f7ff fef6 	bl	80106fe <put_fat>
 8010912:	4603      	mov	r3, r0
 8010914:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010916:	7ffb      	ldrb	r3, [r7, #31]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d001      	beq.n	8010920 <remove_chain+0x4a>
 801091c:	7ffb      	ldrb	r3, [r7, #31]
 801091e:	e03b      	b.n	8010998 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010920:	68b9      	ldr	r1, [r7, #8]
 8010922:	68f8      	ldr	r0, [r7, #12]
 8010924:	f7ff fe43 	bl	80105ae <get_fat>
 8010928:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d031      	beq.n	8010994 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	2b01      	cmp	r3, #1
 8010934:	d101      	bne.n	801093a <remove_chain+0x64>
 8010936:	2302      	movs	r3, #2
 8010938:	e02e      	b.n	8010998 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010940:	d101      	bne.n	8010946 <remove_chain+0x70>
 8010942:	2301      	movs	r3, #1
 8010944:	e028      	b.n	8010998 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010946:	2200      	movs	r2, #0
 8010948:	68b9      	ldr	r1, [r7, #8]
 801094a:	69b8      	ldr	r0, [r7, #24]
 801094c:	f7ff fed7 	bl	80106fe <put_fat>
 8010950:	4603      	mov	r3, r0
 8010952:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010954:	7ffb      	ldrb	r3, [r7, #31]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d001      	beq.n	801095e <remove_chain+0x88>
 801095a:	7ffb      	ldrb	r3, [r7, #31]
 801095c:	e01c      	b.n	8010998 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801095e:	69bb      	ldr	r3, [r7, #24]
 8010960:	691a      	ldr	r2, [r3, #16]
 8010962:	69bb      	ldr	r3, [r7, #24]
 8010964:	695b      	ldr	r3, [r3, #20]
 8010966:	3b02      	subs	r3, #2
 8010968:	429a      	cmp	r2, r3
 801096a:	d20b      	bcs.n	8010984 <remove_chain+0xae>
			fs->free_clst++;
 801096c:	69bb      	ldr	r3, [r7, #24]
 801096e:	691b      	ldr	r3, [r3, #16]
 8010970:	1c5a      	adds	r2, r3, #1
 8010972:	69bb      	ldr	r3, [r7, #24]
 8010974:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8010976:	69bb      	ldr	r3, [r7, #24]
 8010978:	791b      	ldrb	r3, [r3, #4]
 801097a:	f043 0301 	orr.w	r3, r3, #1
 801097e:	b2da      	uxtb	r2, r3
 8010980:	69bb      	ldr	r3, [r7, #24]
 8010982:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010988:	69bb      	ldr	r3, [r7, #24]
 801098a:	695b      	ldr	r3, [r3, #20]
 801098c:	68ba      	ldr	r2, [r7, #8]
 801098e:	429a      	cmp	r2, r3
 8010990:	d3c6      	bcc.n	8010920 <remove_chain+0x4a>
 8010992:	e000      	b.n	8010996 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010994:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010996:	2300      	movs	r3, #0
}
 8010998:	4618      	mov	r0, r3
 801099a:	3720      	adds	r7, #32
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}

080109a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b088      	sub	sp, #32
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d10d      	bne.n	80109d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80109bc:	69bb      	ldr	r3, [r7, #24]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d004      	beq.n	80109cc <create_chain+0x2c>
 80109c2:	693b      	ldr	r3, [r7, #16]
 80109c4:	695b      	ldr	r3, [r3, #20]
 80109c6:	69ba      	ldr	r2, [r7, #24]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d31b      	bcc.n	8010a04 <create_chain+0x64>
 80109cc:	2301      	movs	r3, #1
 80109ce:	61bb      	str	r3, [r7, #24]
 80109d0:	e018      	b.n	8010a04 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80109d2:	6839      	ldr	r1, [r7, #0]
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f7ff fdea 	bl	80105ae <get_fat>
 80109da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2b01      	cmp	r3, #1
 80109e0:	d801      	bhi.n	80109e6 <create_chain+0x46>
 80109e2:	2301      	movs	r3, #1
 80109e4:	e070      	b.n	8010ac8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ec:	d101      	bne.n	80109f2 <create_chain+0x52>
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	e06a      	b.n	8010ac8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80109f2:	693b      	ldr	r3, [r7, #16]
 80109f4:	695b      	ldr	r3, [r3, #20]
 80109f6:	68fa      	ldr	r2, [r7, #12]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d201      	bcs.n	8010a00 <create_chain+0x60>
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	e063      	b.n	8010ac8 <create_chain+0x128>
		scl = clst;
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010a04:	69bb      	ldr	r3, [r7, #24]
 8010a06:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010a08:	69fb      	ldr	r3, [r7, #28]
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	695b      	ldr	r3, [r3, #20]
 8010a12:	69fa      	ldr	r2, [r7, #28]
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d307      	bcc.n	8010a28 <create_chain+0x88>
				ncl = 2;
 8010a18:	2302      	movs	r3, #2
 8010a1a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010a1c:	69fa      	ldr	r2, [r7, #28]
 8010a1e:	69bb      	ldr	r3, [r7, #24]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d901      	bls.n	8010a28 <create_chain+0x88>
 8010a24:	2300      	movs	r3, #0
 8010a26:	e04f      	b.n	8010ac8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010a28:	69f9      	ldr	r1, [r7, #28]
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7ff fdbf 	bl	80105ae <get_fat>
 8010a30:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d00e      	beq.n	8010a56 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	d003      	beq.n	8010a46 <create_chain+0xa6>
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a44:	d101      	bne.n	8010a4a <create_chain+0xaa>
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	e03e      	b.n	8010ac8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010a4a:	69fa      	ldr	r2, [r7, #28]
 8010a4c:	69bb      	ldr	r3, [r7, #24]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d1da      	bne.n	8010a08 <create_chain+0x68>
 8010a52:	2300      	movs	r3, #0
 8010a54:	e038      	b.n	8010ac8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010a56:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010a58:	f04f 32ff 	mov.w	r2, #4294967295
 8010a5c:	69f9      	ldr	r1, [r7, #28]
 8010a5e:	6938      	ldr	r0, [r7, #16]
 8010a60:	f7ff fe4d 	bl	80106fe <put_fat>
 8010a64:	4603      	mov	r3, r0
 8010a66:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010a68:	7dfb      	ldrb	r3, [r7, #23]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d109      	bne.n	8010a82 <create_chain+0xe2>
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d006      	beq.n	8010a82 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010a74:	69fa      	ldr	r2, [r7, #28]
 8010a76:	6839      	ldr	r1, [r7, #0]
 8010a78:	6938      	ldr	r0, [r7, #16]
 8010a7a:	f7ff fe40 	bl	80106fe <put_fat>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010a82:	7dfb      	ldrb	r3, [r7, #23]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d116      	bne.n	8010ab6 <create_chain+0x116>
		fs->last_clst = ncl;
 8010a88:	693b      	ldr	r3, [r7, #16]
 8010a8a:	69fa      	ldr	r2, [r7, #28]
 8010a8c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	691a      	ldr	r2, [r3, #16]
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	695b      	ldr	r3, [r3, #20]
 8010a96:	3b02      	subs	r3, #2
 8010a98:	429a      	cmp	r2, r3
 8010a9a:	d804      	bhi.n	8010aa6 <create_chain+0x106>
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	691b      	ldr	r3, [r3, #16]
 8010aa0:	1e5a      	subs	r2, r3, #1
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8010aa6:	693b      	ldr	r3, [r7, #16]
 8010aa8:	791b      	ldrb	r3, [r3, #4]
 8010aaa:	f043 0301 	orr.w	r3, r3, #1
 8010aae:	b2da      	uxtb	r2, r3
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	711a      	strb	r2, [r3, #4]
 8010ab4:	e007      	b.n	8010ac6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010ab6:	7dfb      	ldrb	r3, [r7, #23]
 8010ab8:	2b01      	cmp	r3, #1
 8010aba:	d102      	bne.n	8010ac2 <create_chain+0x122>
 8010abc:	f04f 33ff 	mov.w	r3, #4294967295
 8010ac0:	e000      	b.n	8010ac4 <create_chain+0x124>
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010ac6:	69fb      	ldr	r3, [r7, #28]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3720      	adds	r7, #32
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b087      	sub	sp, #28
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ae4:	3304      	adds	r3, #4
 8010ae6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	0a5b      	lsrs	r3, r3, #9
 8010aec:	68fa      	ldr	r2, [r7, #12]
 8010aee:	8952      	ldrh	r2, [r2, #10]
 8010af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010af4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	1d1a      	adds	r2, r3, #4
 8010afa:	613a      	str	r2, [r7, #16]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d101      	bne.n	8010b0a <clmt_clust+0x3a>
 8010b06:	2300      	movs	r3, #0
 8010b08:	e010      	b.n	8010b2c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010b0a:	697a      	ldr	r2, [r7, #20]
 8010b0c:	68bb      	ldr	r3, [r7, #8]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d307      	bcc.n	8010b22 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010b12:	697a      	ldr	r2, [r7, #20]
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	617b      	str	r3, [r7, #20]
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	3304      	adds	r3, #4
 8010b1e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010b20:	e7e9      	b.n	8010af6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010b22:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	4413      	add	r3, r2
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	371c      	adds	r7, #28
 8010b30:	46bd      	mov	sp, r7
 8010b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b36:	4770      	bx	lr

08010b38 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b086      	sub	sp, #24
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010b4e:	d204      	bcs.n	8010b5a <dir_sdi+0x22>
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	f003 031f 	and.w	r3, r3, #31
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d001      	beq.n	8010b5e <dir_sdi+0x26>
		return FR_INT_ERR;
 8010b5a:	2302      	movs	r3, #2
 8010b5c:	e063      	b.n	8010c26 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	683a      	ldr	r2, [r7, #0]
 8010b62:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	689b      	ldr	r3, [r3, #8]
 8010b68:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d106      	bne.n	8010b7e <dir_sdi+0x46>
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d902      	bls.n	8010b7e <dir_sdi+0x46>
		clst = fs->dirbase;
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b7c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d10c      	bne.n	8010b9e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	095b      	lsrs	r3, r3, #5
 8010b88:	693a      	ldr	r2, [r7, #16]
 8010b8a:	8912      	ldrh	r2, [r2, #8]
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	d301      	bcc.n	8010b94 <dir_sdi+0x5c>
 8010b90:	2302      	movs	r3, #2
 8010b92:	e048      	b.n	8010c26 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	61da      	str	r2, [r3, #28]
 8010b9c:	e029      	b.n	8010bf2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010b9e:	693b      	ldr	r3, [r7, #16]
 8010ba0:	895b      	ldrh	r3, [r3, #10]
 8010ba2:	025b      	lsls	r3, r3, #9
 8010ba4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010ba6:	e019      	b.n	8010bdc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6979      	ldr	r1, [r7, #20]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7ff fcfe 	bl	80105ae <get_fat>
 8010bb2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bba:	d101      	bne.n	8010bc0 <dir_sdi+0x88>
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	e032      	b.n	8010c26 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	2b01      	cmp	r3, #1
 8010bc4:	d904      	bls.n	8010bd0 <dir_sdi+0x98>
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	695b      	ldr	r3, [r3, #20]
 8010bca:	697a      	ldr	r2, [r7, #20]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d301      	bcc.n	8010bd4 <dir_sdi+0x9c>
 8010bd0:	2302      	movs	r3, #2
 8010bd2:	e028      	b.n	8010c26 <dir_sdi+0xee>
			ofs -= csz;
 8010bd4:	683a      	ldr	r2, [r7, #0]
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	1ad3      	subs	r3, r2, r3
 8010bda:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010bdc:	683a      	ldr	r2, [r7, #0]
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d2e1      	bcs.n	8010ba8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010be4:	6979      	ldr	r1, [r7, #20]
 8010be6:	6938      	ldr	r0, [r7, #16]
 8010be8:	f7ff fcc2 	bl	8010570 <clust2sect>
 8010bec:	4602      	mov	r2, r0
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	697a      	ldr	r2, [r7, #20]
 8010bf6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	69db      	ldr	r3, [r3, #28]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d101      	bne.n	8010c04 <dir_sdi+0xcc>
 8010c00:	2302      	movs	r3, #2
 8010c02:	e010      	b.n	8010c26 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	69da      	ldr	r2, [r3, #28]
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	0a5b      	lsrs	r3, r3, #9
 8010c0c:	441a      	add	r2, r3
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c1e:	441a      	add	r2, r3
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010c24:	2300      	movs	r3, #0
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3718      	adds	r7, #24
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}

08010c2e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010c2e:	b580      	push	{r7, lr}
 8010c30:	b086      	sub	sp, #24
 8010c32:	af00      	add	r7, sp, #0
 8010c34:	6078      	str	r0, [r7, #4]
 8010c36:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	695b      	ldr	r3, [r3, #20]
 8010c42:	3320      	adds	r3, #32
 8010c44:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	69db      	ldr	r3, [r3, #28]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d003      	beq.n	8010c56 <dir_next+0x28>
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010c54:	d301      	bcc.n	8010c5a <dir_next+0x2c>
 8010c56:	2304      	movs	r3, #4
 8010c58:	e0aa      	b.n	8010db0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	f040 8098 	bne.w	8010d96 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	69db      	ldr	r3, [r3, #28]
 8010c6a:	1c5a      	adds	r2, r3, #1
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	699b      	ldr	r3, [r3, #24]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d10b      	bne.n	8010c90 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	095b      	lsrs	r3, r3, #5
 8010c7c:	68fa      	ldr	r2, [r7, #12]
 8010c7e:	8912      	ldrh	r2, [r2, #8]
 8010c80:	4293      	cmp	r3, r2
 8010c82:	f0c0 8088 	bcc.w	8010d96 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	2200      	movs	r2, #0
 8010c8a:	61da      	str	r2, [r3, #28]
 8010c8c:	2304      	movs	r3, #4
 8010c8e:	e08f      	b.n	8010db0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	0a5b      	lsrs	r3, r3, #9
 8010c94:	68fa      	ldr	r2, [r7, #12]
 8010c96:	8952      	ldrh	r2, [r2, #10]
 8010c98:	3a01      	subs	r2, #1
 8010c9a:	4013      	ands	r3, r2
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d17a      	bne.n	8010d96 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010ca0:	687a      	ldr	r2, [r7, #4]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	699b      	ldr	r3, [r3, #24]
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	4610      	mov	r0, r2
 8010caa:	f7ff fc80 	bl	80105ae <get_fat>
 8010cae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	d801      	bhi.n	8010cba <dir_next+0x8c>
 8010cb6:	2302      	movs	r3, #2
 8010cb8:	e07a      	b.n	8010db0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cc0:	d101      	bne.n	8010cc6 <dir_next+0x98>
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	e074      	b.n	8010db0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	695b      	ldr	r3, [r3, #20]
 8010cca:	697a      	ldr	r2, [r7, #20]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d358      	bcc.n	8010d82 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d104      	bne.n	8010ce0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	61da      	str	r2, [r3, #28]
 8010cdc:	2304      	movs	r3, #4
 8010cde:	e067      	b.n	8010db0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	699b      	ldr	r3, [r3, #24]
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	4610      	mov	r0, r2
 8010cea:	f7ff fe59 	bl	80109a0 <create_chain>
 8010cee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d101      	bne.n	8010cfa <dir_next+0xcc>
 8010cf6:	2307      	movs	r3, #7
 8010cf8:	e05a      	b.n	8010db0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d101      	bne.n	8010d04 <dir_next+0xd6>
 8010d00:	2302      	movs	r3, #2
 8010d02:	e055      	b.n	8010db0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d0a:	d101      	bne.n	8010d10 <dir_next+0xe2>
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	e04f      	b.n	8010db0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010d10:	68f8      	ldr	r0, [r7, #12]
 8010d12:	f7ff fb4d 	bl	80103b0 <sync_window>
 8010d16:	4603      	mov	r3, r0
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d001      	beq.n	8010d20 <dir_next+0xf2>
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	e047      	b.n	8010db0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	3330      	adds	r3, #48	; 0x30
 8010d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d28:	2100      	movs	r1, #0
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7ff f977 	bl	801001e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010d30:	2300      	movs	r3, #0
 8010d32:	613b      	str	r3, [r7, #16]
 8010d34:	6979      	ldr	r1, [r7, #20]
 8010d36:	68f8      	ldr	r0, [r7, #12]
 8010d38:	f7ff fc1a 	bl	8010570 <clust2sect>
 8010d3c:	4602      	mov	r2, r0
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	62da      	str	r2, [r3, #44]	; 0x2c
 8010d42:	e012      	b.n	8010d6a <dir_next+0x13c>
						fs->wflag = 1;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2201      	movs	r2, #1
 8010d48:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010d4a:	68f8      	ldr	r0, [r7, #12]
 8010d4c:	f7ff fb30 	bl	80103b0 <sync_window>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d001      	beq.n	8010d5a <dir_next+0x12c>
 8010d56:	2301      	movs	r3, #1
 8010d58:	e02a      	b.n	8010db0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	3301      	adds	r3, #1
 8010d5e:	613b      	str	r3, [r7, #16]
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d64:	1c5a      	adds	r2, r3, #1
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	62da      	str	r2, [r3, #44]	; 0x2c
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	895b      	ldrh	r3, [r3, #10]
 8010d6e:	461a      	mov	r2, r3
 8010d70:	693b      	ldr	r3, [r7, #16]
 8010d72:	4293      	cmp	r3, r2
 8010d74:	d3e6      	bcc.n	8010d44 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	1ad2      	subs	r2, r2, r3
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	697a      	ldr	r2, [r7, #20]
 8010d86:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010d88:	6979      	ldr	r1, [r7, #20]
 8010d8a:	68f8      	ldr	r0, [r7, #12]
 8010d8c:	f7ff fbf0 	bl	8010570 <clust2sect>
 8010d90:	4602      	mov	r2, r0
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	68ba      	ldr	r2, [r7, #8]
 8010d9a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010da8:	441a      	add	r2, r3
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010dae:	2300      	movs	r3, #0
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3718      	adds	r7, #24
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bd80      	pop	{r7, pc}

08010db8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b086      	sub	sp, #24
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010dc8:	2100      	movs	r1, #0
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f7ff feb4 	bl	8010b38 <dir_sdi>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010dd4:	7dfb      	ldrb	r3, [r7, #23]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d12b      	bne.n	8010e32 <dir_alloc+0x7a>
		n = 0;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	69db      	ldr	r3, [r3, #28]
 8010de2:	4619      	mov	r1, r3
 8010de4:	68f8      	ldr	r0, [r7, #12]
 8010de6:	f7ff fb27 	bl	8010438 <move_window>
 8010dea:	4603      	mov	r3, r0
 8010dec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010dee:	7dfb      	ldrb	r3, [r7, #23]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d11d      	bne.n	8010e30 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6a1b      	ldr	r3, [r3, #32]
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	2be5      	cmp	r3, #229	; 0xe5
 8010dfc:	d004      	beq.n	8010e08 <dir_alloc+0x50>
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6a1b      	ldr	r3, [r3, #32]
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d107      	bne.n	8010e18 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	613b      	str	r3, [r7, #16]
 8010e0e:	693a      	ldr	r2, [r7, #16]
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d102      	bne.n	8010e1c <dir_alloc+0x64>
 8010e16:	e00c      	b.n	8010e32 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010e18:	2300      	movs	r3, #0
 8010e1a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010e1c:	2101      	movs	r1, #1
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f7ff ff05 	bl	8010c2e <dir_next>
 8010e24:	4603      	mov	r3, r0
 8010e26:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010e28:	7dfb      	ldrb	r3, [r7, #23]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d0d7      	beq.n	8010dde <dir_alloc+0x26>
 8010e2e:	e000      	b.n	8010e32 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010e30:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010e32:	7dfb      	ldrb	r3, [r7, #23]
 8010e34:	2b04      	cmp	r3, #4
 8010e36:	d101      	bne.n	8010e3c <dir_alloc+0x84>
 8010e38:	2307      	movs	r3, #7
 8010e3a:	75fb      	strb	r3, [r7, #23]
	return res;
 8010e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3718      	adds	r7, #24
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}

08010e46 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010e46:	b580      	push	{r7, lr}
 8010e48:	b084      	sub	sp, #16
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
 8010e4e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	331a      	adds	r3, #26
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7ff f83f 	bl	800fed8 <ld_word>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	2b03      	cmp	r3, #3
 8010e64:	d109      	bne.n	8010e7a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	3314      	adds	r3, #20
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7ff f834 	bl	800fed8 <ld_word>
 8010e70:	4603      	mov	r3, r0
 8010e72:	041b      	lsls	r3, r3, #16
 8010e74:	68fa      	ldr	r2, [r7, #12]
 8010e76:	4313      	orrs	r3, r2
 8010e78:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3710      	adds	r7, #16
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	331a      	adds	r3, #26
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	b292      	uxth	r2, r2
 8010e98:	4611      	mov	r1, r2
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7ff f857 	bl	800ff4e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	2b03      	cmp	r3, #3
 8010ea6:	d109      	bne.n	8010ebc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	f103 0214 	add.w	r2, r3, #20
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	0c1b      	lsrs	r3, r3, #16
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	4610      	mov	r0, r2
 8010eb8:	f7ff f849 	bl	800ff4e <st_word>
	}
}
 8010ebc:	bf00      	nop
 8010ebe:	3710      	adds	r7, #16
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b086      	sub	sp, #24
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010ed2:	2100      	movs	r1, #0
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f7ff fe2f 	bl	8010b38 <dir_sdi>
 8010eda:	4603      	mov	r3, r0
 8010edc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010ede:	7dfb      	ldrb	r3, [r7, #23]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d001      	beq.n	8010ee8 <dir_find+0x24>
 8010ee4:	7dfb      	ldrb	r3, [r7, #23]
 8010ee6:	e03e      	b.n	8010f66 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	69db      	ldr	r3, [r3, #28]
 8010eec:	4619      	mov	r1, r3
 8010eee:	6938      	ldr	r0, [r7, #16]
 8010ef0:	f7ff faa2 	bl	8010438 <move_window>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010ef8:	7dfb      	ldrb	r3, [r7, #23]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d12f      	bne.n	8010f5e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6a1b      	ldr	r3, [r3, #32]
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010f06:	7bfb      	ldrb	r3, [r7, #15]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d102      	bne.n	8010f12 <dir_find+0x4e>
 8010f0c:	2304      	movs	r3, #4
 8010f0e:	75fb      	strb	r3, [r7, #23]
 8010f10:	e028      	b.n	8010f64 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6a1b      	ldr	r3, [r3, #32]
 8010f16:	330b      	adds	r3, #11
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010f1e:	b2da      	uxtb	r2, r3
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6a1b      	ldr	r3, [r3, #32]
 8010f28:	330b      	adds	r3, #11
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	f003 0308 	and.w	r3, r3, #8
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10a      	bne.n	8010f4a <dir_find+0x86>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6a18      	ldr	r0, [r3, #32]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	3324      	adds	r3, #36	; 0x24
 8010f3c:	220b      	movs	r2, #11
 8010f3e:	4619      	mov	r1, r3
 8010f40:	f7ff f888 	bl	8010054 <mem_cmp>
 8010f44:	4603      	mov	r3, r0
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d00b      	beq.n	8010f62 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010f4a:	2100      	movs	r1, #0
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f7ff fe6e 	bl	8010c2e <dir_next>
 8010f52:	4603      	mov	r3, r0
 8010f54:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010f56:	7dfb      	ldrb	r3, [r7, #23]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d0c5      	beq.n	8010ee8 <dir_find+0x24>
 8010f5c:	e002      	b.n	8010f64 <dir_find+0xa0>
		if (res != FR_OK) break;
 8010f5e:	bf00      	nop
 8010f60:	e000      	b.n	8010f64 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010f62:	bf00      	nop

	return res;
 8010f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3718      	adds	r7, #24
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}

08010f6e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010f6e:	b580      	push	{r7, lr}
 8010f70:	b084      	sub	sp, #16
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010f7c:	2101      	movs	r1, #1
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f7ff ff1a 	bl	8010db8 <dir_alloc>
 8010f84:	4603      	mov	r3, r0
 8010f86:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010f88:	7bfb      	ldrb	r3, [r7, #15]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d11c      	bne.n	8010fc8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	69db      	ldr	r3, [r3, #28]
 8010f92:	4619      	mov	r1, r3
 8010f94:	68b8      	ldr	r0, [r7, #8]
 8010f96:	f7ff fa4f 	bl	8010438 <move_window>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010f9e:	7bfb      	ldrb	r3, [r7, #15]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d111      	bne.n	8010fc8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6a1b      	ldr	r3, [r3, #32]
 8010fa8:	2220      	movs	r2, #32
 8010faa:	2100      	movs	r1, #0
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7ff f836 	bl	801001e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6a18      	ldr	r0, [r3, #32]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	3324      	adds	r3, #36	; 0x24
 8010fba:	220b      	movs	r2, #11
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	f7ff f80d 	bl	800ffdc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	2201      	movs	r2, #1
 8010fc6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
	...

08010fd4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b088      	sub	sp, #32
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	60fb      	str	r3, [r7, #12]
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	3324      	adds	r3, #36	; 0x24
 8010fe8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010fea:	220b      	movs	r2, #11
 8010fec:	2120      	movs	r1, #32
 8010fee:	68b8      	ldr	r0, [r7, #8]
 8010ff0:	f7ff f815 	bl	801001e <mem_set>
	si = i = 0; ni = 8;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	613b      	str	r3, [r7, #16]
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	61fb      	str	r3, [r7, #28]
 8010ffc:	2308      	movs	r3, #8
 8010ffe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011000:	69fb      	ldr	r3, [r7, #28]
 8011002:	1c5a      	adds	r2, r3, #1
 8011004:	61fa      	str	r2, [r7, #28]
 8011006:	68fa      	ldr	r2, [r7, #12]
 8011008:	4413      	add	r3, r2
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801100e:	7efb      	ldrb	r3, [r7, #27]
 8011010:	2b20      	cmp	r3, #32
 8011012:	d94e      	bls.n	80110b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011014:	7efb      	ldrb	r3, [r7, #27]
 8011016:	2b2f      	cmp	r3, #47	; 0x2f
 8011018:	d006      	beq.n	8011028 <create_name+0x54>
 801101a:	7efb      	ldrb	r3, [r7, #27]
 801101c:	2b5c      	cmp	r3, #92	; 0x5c
 801101e:	d110      	bne.n	8011042 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011020:	e002      	b.n	8011028 <create_name+0x54>
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	3301      	adds	r3, #1
 8011026:	61fb      	str	r3, [r7, #28]
 8011028:	68fa      	ldr	r2, [r7, #12]
 801102a:	69fb      	ldr	r3, [r7, #28]
 801102c:	4413      	add	r3, r2
 801102e:	781b      	ldrb	r3, [r3, #0]
 8011030:	2b2f      	cmp	r3, #47	; 0x2f
 8011032:	d0f6      	beq.n	8011022 <create_name+0x4e>
 8011034:	68fa      	ldr	r2, [r7, #12]
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	4413      	add	r3, r2
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	2b5c      	cmp	r3, #92	; 0x5c
 801103e:	d0f0      	beq.n	8011022 <create_name+0x4e>
			break;
 8011040:	e038      	b.n	80110b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011042:	7efb      	ldrb	r3, [r7, #27]
 8011044:	2b2e      	cmp	r3, #46	; 0x2e
 8011046:	d003      	beq.n	8011050 <create_name+0x7c>
 8011048:	693a      	ldr	r2, [r7, #16]
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	429a      	cmp	r2, r3
 801104e:	d30c      	bcc.n	801106a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	2b0b      	cmp	r3, #11
 8011054:	d002      	beq.n	801105c <create_name+0x88>
 8011056:	7efb      	ldrb	r3, [r7, #27]
 8011058:	2b2e      	cmp	r3, #46	; 0x2e
 801105a:	d001      	beq.n	8011060 <create_name+0x8c>
 801105c:	2306      	movs	r3, #6
 801105e:	e044      	b.n	80110ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011060:	2308      	movs	r3, #8
 8011062:	613b      	str	r3, [r7, #16]
 8011064:	230b      	movs	r3, #11
 8011066:	617b      	str	r3, [r7, #20]
			continue;
 8011068:	e022      	b.n	80110b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801106a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801106e:	2b00      	cmp	r3, #0
 8011070:	da04      	bge.n	801107c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011072:	7efb      	ldrb	r3, [r7, #27]
 8011074:	3b80      	subs	r3, #128	; 0x80
 8011076:	4a1f      	ldr	r2, [pc, #124]	; (80110f4 <create_name+0x120>)
 8011078:	5cd3      	ldrb	r3, [r2, r3]
 801107a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801107c:	7efb      	ldrb	r3, [r7, #27]
 801107e:	4619      	mov	r1, r3
 8011080:	481d      	ldr	r0, [pc, #116]	; (80110f8 <create_name+0x124>)
 8011082:	f7ff f80e 	bl	80100a2 <chk_chr>
 8011086:	4603      	mov	r3, r0
 8011088:	2b00      	cmp	r3, #0
 801108a:	d001      	beq.n	8011090 <create_name+0xbc>
 801108c:	2306      	movs	r3, #6
 801108e:	e02c      	b.n	80110ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011090:	7efb      	ldrb	r3, [r7, #27]
 8011092:	2b60      	cmp	r3, #96	; 0x60
 8011094:	d905      	bls.n	80110a2 <create_name+0xce>
 8011096:	7efb      	ldrb	r3, [r7, #27]
 8011098:	2b7a      	cmp	r3, #122	; 0x7a
 801109a:	d802      	bhi.n	80110a2 <create_name+0xce>
 801109c:	7efb      	ldrb	r3, [r7, #27]
 801109e:	3b20      	subs	r3, #32
 80110a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80110a2:	693b      	ldr	r3, [r7, #16]
 80110a4:	1c5a      	adds	r2, r3, #1
 80110a6:	613a      	str	r2, [r7, #16]
 80110a8:	68ba      	ldr	r2, [r7, #8]
 80110aa:	4413      	add	r3, r2
 80110ac:	7efa      	ldrb	r2, [r7, #27]
 80110ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80110b0:	e7a6      	b.n	8011000 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80110b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80110b4:	68fa      	ldr	r2, [r7, #12]
 80110b6:	69fb      	ldr	r3, [r7, #28]
 80110b8:	441a      	add	r2, r3
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d101      	bne.n	80110c8 <create_name+0xf4>
 80110c4:	2306      	movs	r3, #6
 80110c6:	e010      	b.n	80110ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	2be5      	cmp	r3, #229	; 0xe5
 80110ce:	d102      	bne.n	80110d6 <create_name+0x102>
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	2205      	movs	r2, #5
 80110d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80110d6:	7efb      	ldrb	r3, [r7, #27]
 80110d8:	2b20      	cmp	r3, #32
 80110da:	d801      	bhi.n	80110e0 <create_name+0x10c>
 80110dc:	2204      	movs	r2, #4
 80110de:	e000      	b.n	80110e2 <create_name+0x10e>
 80110e0:	2200      	movs	r2, #0
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	330b      	adds	r3, #11
 80110e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80110e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	3720      	adds	r7, #32
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	0801a01c 	.word	0x0801a01c
 80110f8:	08018638 	.word	0x08018638

080110fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b086      	sub	sp, #24
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011110:	e002      	b.n	8011118 <follow_path+0x1c>
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	3301      	adds	r3, #1
 8011116:	603b      	str	r3, [r7, #0]
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	2b2f      	cmp	r3, #47	; 0x2f
 801111e:	d0f8      	beq.n	8011112 <follow_path+0x16>
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	2b5c      	cmp	r3, #92	; 0x5c
 8011126:	d0f4      	beq.n	8011112 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	2200      	movs	r2, #0
 801112c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	2b1f      	cmp	r3, #31
 8011134:	d80a      	bhi.n	801114c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2280      	movs	r2, #128	; 0x80
 801113a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801113e:	2100      	movs	r1, #0
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f7ff fcf9 	bl	8010b38 <dir_sdi>
 8011146:	4603      	mov	r3, r0
 8011148:	75fb      	strb	r3, [r7, #23]
 801114a:	e043      	b.n	80111d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801114c:	463b      	mov	r3, r7
 801114e:	4619      	mov	r1, r3
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f7ff ff3f 	bl	8010fd4 <create_name>
 8011156:	4603      	mov	r3, r0
 8011158:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801115a:	7dfb      	ldrb	r3, [r7, #23]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d134      	bne.n	80111ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f7ff feaf 	bl	8010ec4 <dir_find>
 8011166:	4603      	mov	r3, r0
 8011168:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011170:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011172:	7dfb      	ldrb	r3, [r7, #23]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d00a      	beq.n	801118e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011178:	7dfb      	ldrb	r3, [r7, #23]
 801117a:	2b04      	cmp	r3, #4
 801117c:	d127      	bne.n	80111ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801117e:	7afb      	ldrb	r3, [r7, #11]
 8011180:	f003 0304 	and.w	r3, r3, #4
 8011184:	2b00      	cmp	r3, #0
 8011186:	d122      	bne.n	80111ce <follow_path+0xd2>
 8011188:	2305      	movs	r3, #5
 801118a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801118c:	e01f      	b.n	80111ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801118e:	7afb      	ldrb	r3, [r7, #11]
 8011190:	f003 0304 	and.w	r3, r3, #4
 8011194:	2b00      	cmp	r3, #0
 8011196:	d11c      	bne.n	80111d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	799b      	ldrb	r3, [r3, #6]
 801119c:	f003 0310 	and.w	r3, r3, #16
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d102      	bne.n	80111aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80111a4:	2305      	movs	r3, #5
 80111a6:	75fb      	strb	r3, [r7, #23]
 80111a8:	e014      	b.n	80111d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	695b      	ldr	r3, [r3, #20]
 80111b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111b8:	4413      	add	r3, r2
 80111ba:	4619      	mov	r1, r3
 80111bc:	68f8      	ldr	r0, [r7, #12]
 80111be:	f7ff fe42 	bl	8010e46 <ld_clust>
 80111c2:	4602      	mov	r2, r0
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80111c8:	e7c0      	b.n	801114c <follow_path+0x50>
			if (res != FR_OK) break;
 80111ca:	bf00      	nop
 80111cc:	e002      	b.n	80111d4 <follow_path+0xd8>
				break;
 80111ce:	bf00      	nop
 80111d0:	e000      	b.n	80111d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80111d2:	bf00      	nop
			}
		}
	}

	return res;
 80111d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3718      	adds	r7, #24
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}

080111de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80111de:	b480      	push	{r7}
 80111e0:	b087      	sub	sp, #28
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80111e6:	f04f 33ff 	mov.w	r3, #4294967295
 80111ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d031      	beq.n	8011258 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	617b      	str	r3, [r7, #20]
 80111fa:	e002      	b.n	8011202 <get_ldnumber+0x24>
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	3301      	adds	r3, #1
 8011200:	617b      	str	r3, [r7, #20]
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	2b20      	cmp	r3, #32
 8011208:	d903      	bls.n	8011212 <get_ldnumber+0x34>
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	781b      	ldrb	r3, [r3, #0]
 801120e:	2b3a      	cmp	r3, #58	; 0x3a
 8011210:	d1f4      	bne.n	80111fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	2b3a      	cmp	r3, #58	; 0x3a
 8011218:	d11c      	bne.n	8011254 <get_ldnumber+0x76>
			tp = *path;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	1c5a      	adds	r2, r3, #1
 8011224:	60fa      	str	r2, [r7, #12]
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	3b30      	subs	r3, #48	; 0x30
 801122a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	2b09      	cmp	r3, #9
 8011230:	d80e      	bhi.n	8011250 <get_ldnumber+0x72>
 8011232:	68fa      	ldr	r2, [r7, #12]
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	429a      	cmp	r2, r3
 8011238:	d10a      	bne.n	8011250 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d107      	bne.n	8011250 <get_ldnumber+0x72>
					vol = (int)i;
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	3301      	adds	r3, #1
 8011248:	617b      	str	r3, [r7, #20]
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	697a      	ldr	r2, [r7, #20]
 801124e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	e002      	b.n	801125a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011254:	2300      	movs	r3, #0
 8011256:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011258:	693b      	ldr	r3, [r7, #16]
}
 801125a:	4618      	mov	r0, r3
 801125c:	371c      	adds	r7, #28
 801125e:	46bd      	mov	sp, r7
 8011260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011264:	4770      	bx	lr
	...

08011268 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2200      	movs	r2, #0
 8011276:	70da      	strb	r2, [r3, #3]
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f04f 32ff 	mov.w	r2, #4294967295
 801127e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011280:	6839      	ldr	r1, [r7, #0]
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f7ff f8d8 	bl	8010438 <move_window>
 8011288:	4603      	mov	r3, r0
 801128a:	2b00      	cmp	r3, #0
 801128c:	d001      	beq.n	8011292 <check_fs+0x2a>
 801128e:	2304      	movs	r3, #4
 8011290:	e038      	b.n	8011304 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	3330      	adds	r3, #48	; 0x30
 8011296:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801129a:	4618      	mov	r0, r3
 801129c:	f7fe fe1c 	bl	800fed8 <ld_word>
 80112a0:	4603      	mov	r3, r0
 80112a2:	461a      	mov	r2, r3
 80112a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d001      	beq.n	80112b0 <check_fs+0x48>
 80112ac:	2303      	movs	r3, #3
 80112ae:	e029      	b.n	8011304 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112b6:	2be9      	cmp	r3, #233	; 0xe9
 80112b8:	d009      	beq.n	80112ce <check_fs+0x66>
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112c0:	2beb      	cmp	r3, #235	; 0xeb
 80112c2:	d11e      	bne.n	8011302 <check_fs+0x9a>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80112ca:	2b90      	cmp	r3, #144	; 0x90
 80112cc:	d119      	bne.n	8011302 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	3330      	adds	r3, #48	; 0x30
 80112d2:	3336      	adds	r3, #54	; 0x36
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7fe fe17 	bl	800ff08 <ld_dword>
 80112da:	4603      	mov	r3, r0
 80112dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80112e0:	4a0a      	ldr	r2, [pc, #40]	; (801130c <check_fs+0xa4>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d101      	bne.n	80112ea <check_fs+0x82>
 80112e6:	2300      	movs	r3, #0
 80112e8:	e00c      	b.n	8011304 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	3330      	adds	r3, #48	; 0x30
 80112ee:	3352      	adds	r3, #82	; 0x52
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7fe fe09 	bl	800ff08 <ld_dword>
 80112f6:	4603      	mov	r3, r0
 80112f8:	4a05      	ldr	r2, [pc, #20]	; (8011310 <check_fs+0xa8>)
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d101      	bne.n	8011302 <check_fs+0x9a>
 80112fe:	2300      	movs	r3, #0
 8011300:	e000      	b.n	8011304 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011302:	2302      	movs	r3, #2
}
 8011304:	4618      	mov	r0, r3
 8011306:	3708      	adds	r7, #8
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}
 801130c:	00544146 	.word	0x00544146
 8011310:	33544146 	.word	0x33544146

08011314 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b096      	sub	sp, #88	; 0x58
 8011318:	af00      	add	r7, sp, #0
 801131a:	60f8      	str	r0, [r7, #12]
 801131c:	60b9      	str	r1, [r7, #8]
 801131e:	4613      	mov	r3, r2
 8011320:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	2200      	movs	r2, #0
 8011326:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011328:	68f8      	ldr	r0, [r7, #12]
 801132a:	f7ff ff58 	bl	80111de <get_ldnumber>
 801132e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011332:	2b00      	cmp	r3, #0
 8011334:	da01      	bge.n	801133a <find_volume+0x26>
 8011336:	230b      	movs	r3, #11
 8011338:	e22e      	b.n	8011798 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801133a:	4aa8      	ldr	r2, [pc, #672]	; (80115dc <find_volume+0x2c8>)
 801133c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011342:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011346:	2b00      	cmp	r3, #0
 8011348:	d101      	bne.n	801134e <find_volume+0x3a>
 801134a:	230c      	movs	r3, #12
 801134c:	e224      	b.n	8011798 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011352:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011354:	79fb      	ldrb	r3, [r7, #7]
 8011356:	f023 0301 	bic.w	r3, r3, #1
 801135a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801135c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d01a      	beq.n	801139a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011366:	785b      	ldrb	r3, [r3, #1]
 8011368:	4618      	mov	r0, r3
 801136a:	f7fe fd17 	bl	800fd9c <disk_status>
 801136e:	4603      	mov	r3, r0
 8011370:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011374:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011378:	f003 0301 	and.w	r3, r3, #1
 801137c:	2b00      	cmp	r3, #0
 801137e:	d10c      	bne.n	801139a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011380:	79fb      	ldrb	r3, [r7, #7]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d007      	beq.n	8011396 <find_volume+0x82>
 8011386:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801138a:	f003 0304 	and.w	r3, r3, #4
 801138e:	2b00      	cmp	r3, #0
 8011390:	d001      	beq.n	8011396 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011392:	230a      	movs	r3, #10
 8011394:	e200      	b.n	8011798 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8011396:	2300      	movs	r3, #0
 8011398:	e1fe      	b.n	8011798 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801139a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801139c:	2200      	movs	r2, #0
 801139e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80113a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113a2:	b2da      	uxtb	r2, r3
 80113a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80113a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113aa:	785b      	ldrb	r3, [r3, #1]
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7fe fd0f 	bl	800fdd0 <disk_initialize>
 80113b2:	4603      	mov	r3, r0
 80113b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80113b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113bc:	f003 0301 	and.w	r3, r3, #1
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d001      	beq.n	80113c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80113c4:	2303      	movs	r3, #3
 80113c6:	e1e7      	b.n	8011798 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80113c8:	79fb      	ldrb	r3, [r7, #7]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d007      	beq.n	80113de <find_volume+0xca>
 80113ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80113d2:	f003 0304 	and.w	r3, r3, #4
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d001      	beq.n	80113de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80113da:	230a      	movs	r3, #10
 80113dc:	e1dc      	b.n	8011798 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80113de:	2300      	movs	r3, #0
 80113e0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80113e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80113e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80113e6:	f7ff ff3f 	bl	8011268 <check_fs>
 80113ea:	4603      	mov	r3, r0
 80113ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80113f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113f4:	2b02      	cmp	r3, #2
 80113f6:	d14b      	bne.n	8011490 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80113f8:	2300      	movs	r3, #0
 80113fa:	643b      	str	r3, [r7, #64]	; 0x40
 80113fc:	e01f      	b.n	801143e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80113fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011400:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011406:	011b      	lsls	r3, r3, #4
 8011408:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801140c:	4413      	add	r3, r2
 801140e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011412:	3304      	adds	r3, #4
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d006      	beq.n	8011428 <find_volume+0x114>
 801141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801141c:	3308      	adds	r3, #8
 801141e:	4618      	mov	r0, r3
 8011420:	f7fe fd72 	bl	800ff08 <ld_dword>
 8011424:	4602      	mov	r2, r0
 8011426:	e000      	b.n	801142a <find_volume+0x116>
 8011428:	2200      	movs	r2, #0
 801142a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801142c:	009b      	lsls	r3, r3, #2
 801142e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011432:	440b      	add	r3, r1
 8011434:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801143a:	3301      	adds	r3, #1
 801143c:	643b      	str	r3, [r7, #64]	; 0x40
 801143e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011440:	2b03      	cmp	r3, #3
 8011442:	d9dc      	bls.n	80113fe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011444:	2300      	movs	r3, #0
 8011446:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801144a:	2b00      	cmp	r3, #0
 801144c:	d002      	beq.n	8011454 <find_volume+0x140>
 801144e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011450:	3b01      	subs	r3, #1
 8011452:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011456:	009b      	lsls	r3, r3, #2
 8011458:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801145c:	4413      	add	r3, r2
 801145e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011462:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011466:	2b00      	cmp	r3, #0
 8011468:	d005      	beq.n	8011476 <find_volume+0x162>
 801146a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801146c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801146e:	f7ff fefb 	bl	8011268 <check_fs>
 8011472:	4603      	mov	r3, r0
 8011474:	e000      	b.n	8011478 <find_volume+0x164>
 8011476:	2303      	movs	r3, #3
 8011478:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801147c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011480:	2b01      	cmp	r3, #1
 8011482:	d905      	bls.n	8011490 <find_volume+0x17c>
 8011484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011486:	3301      	adds	r3, #1
 8011488:	643b      	str	r3, [r7, #64]	; 0x40
 801148a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801148c:	2b03      	cmp	r3, #3
 801148e:	d9e1      	bls.n	8011454 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011490:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011494:	2b04      	cmp	r3, #4
 8011496:	d101      	bne.n	801149c <find_volume+0x188>
 8011498:	2301      	movs	r3, #1
 801149a:	e17d      	b.n	8011798 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801149c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d901      	bls.n	80114a8 <find_volume+0x194>
 80114a4:	230d      	movs	r3, #13
 80114a6:	e177      	b.n	8011798 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80114a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114aa:	3330      	adds	r3, #48	; 0x30
 80114ac:	330b      	adds	r3, #11
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7fe fd12 	bl	800fed8 <ld_word>
 80114b4:	4603      	mov	r3, r0
 80114b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114ba:	d001      	beq.n	80114c0 <find_volume+0x1ac>
 80114bc:	230d      	movs	r3, #13
 80114be:	e16b      	b.n	8011798 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80114c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c2:	3330      	adds	r3, #48	; 0x30
 80114c4:	3316      	adds	r3, #22
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fe fd06 	bl	800fed8 <ld_word>
 80114cc:	4603      	mov	r3, r0
 80114ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80114d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d106      	bne.n	80114e4 <find_volume+0x1d0>
 80114d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d8:	3330      	adds	r3, #48	; 0x30
 80114da:	3324      	adds	r3, #36	; 0x24
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fe fd13 	bl	800ff08 <ld_dword>
 80114e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80114e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80114e8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80114ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ec:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80114f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80114f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f6:	789b      	ldrb	r3, [r3, #2]
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d005      	beq.n	8011508 <find_volume+0x1f4>
 80114fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fe:	789b      	ldrb	r3, [r3, #2]
 8011500:	2b02      	cmp	r3, #2
 8011502:	d001      	beq.n	8011508 <find_volume+0x1f4>
 8011504:	230d      	movs	r3, #13
 8011506:	e147      	b.n	8011798 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801150a:	789b      	ldrb	r3, [r3, #2]
 801150c:	461a      	mov	r2, r3
 801150e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011510:	fb02 f303 	mul.w	r3, r2, r3
 8011514:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801151c:	b29a      	uxth	r2, r3
 801151e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011520:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011524:	895b      	ldrh	r3, [r3, #10]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d008      	beq.n	801153c <find_volume+0x228>
 801152a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152c:	895b      	ldrh	r3, [r3, #10]
 801152e:	461a      	mov	r2, r3
 8011530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011532:	895b      	ldrh	r3, [r3, #10]
 8011534:	3b01      	subs	r3, #1
 8011536:	4013      	ands	r3, r2
 8011538:	2b00      	cmp	r3, #0
 801153a:	d001      	beq.n	8011540 <find_volume+0x22c>
 801153c:	230d      	movs	r3, #13
 801153e:	e12b      	b.n	8011798 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011542:	3330      	adds	r3, #48	; 0x30
 8011544:	3311      	adds	r3, #17
 8011546:	4618      	mov	r0, r3
 8011548:	f7fe fcc6 	bl	800fed8 <ld_word>
 801154c:	4603      	mov	r3, r0
 801154e:	461a      	mov	r2, r3
 8011550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011552:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011556:	891b      	ldrh	r3, [r3, #8]
 8011558:	f003 030f 	and.w	r3, r3, #15
 801155c:	b29b      	uxth	r3, r3
 801155e:	2b00      	cmp	r3, #0
 8011560:	d001      	beq.n	8011566 <find_volume+0x252>
 8011562:	230d      	movs	r3, #13
 8011564:	e118      	b.n	8011798 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011568:	3330      	adds	r3, #48	; 0x30
 801156a:	3313      	adds	r3, #19
 801156c:	4618      	mov	r0, r3
 801156e:	f7fe fcb3 	bl	800fed8 <ld_word>
 8011572:	4603      	mov	r3, r0
 8011574:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011578:	2b00      	cmp	r3, #0
 801157a:	d106      	bne.n	801158a <find_volume+0x276>
 801157c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801157e:	3330      	adds	r3, #48	; 0x30
 8011580:	3320      	adds	r3, #32
 8011582:	4618      	mov	r0, r3
 8011584:	f7fe fcc0 	bl	800ff08 <ld_dword>
 8011588:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801158a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158c:	3330      	adds	r3, #48	; 0x30
 801158e:	330e      	adds	r3, #14
 8011590:	4618      	mov	r0, r3
 8011592:	f7fe fca1 	bl	800fed8 <ld_word>
 8011596:	4603      	mov	r3, r0
 8011598:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801159a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801159c:	2b00      	cmp	r3, #0
 801159e:	d101      	bne.n	80115a4 <find_volume+0x290>
 80115a0:	230d      	movs	r3, #13
 80115a2:	e0f9      	b.n	8011798 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80115a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80115a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115a8:	4413      	add	r3, r2
 80115aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115ac:	8912      	ldrh	r2, [r2, #8]
 80115ae:	0912      	lsrs	r2, r2, #4
 80115b0:	b292      	uxth	r2, r2
 80115b2:	4413      	add	r3, r2
 80115b4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80115b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d201      	bcs.n	80115c2 <find_volume+0x2ae>
 80115be:	230d      	movs	r3, #13
 80115c0:	e0ea      	b.n	8011798 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80115c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c6:	1ad3      	subs	r3, r2, r3
 80115c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115ca:	8952      	ldrh	r2, [r2, #10]
 80115cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80115d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80115d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d103      	bne.n	80115e0 <find_volume+0x2cc>
 80115d8:	230d      	movs	r3, #13
 80115da:	e0dd      	b.n	8011798 <find_volume+0x484>
 80115dc:	20000650 	.word	0x20000650
		fmt = FS_FAT32;
 80115e0:	2303      	movs	r3, #3
 80115e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80115e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80115ec:	4293      	cmp	r3, r2
 80115ee:	d802      	bhi.n	80115f6 <find_volume+0x2e2>
 80115f0:	2302      	movs	r3, #2
 80115f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80115f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80115fc:	4293      	cmp	r3, r2
 80115fe:	d802      	bhi.n	8011606 <find_volume+0x2f2>
 8011600:	2301      	movs	r3, #1
 8011602:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011608:	1c9a      	adds	r2, r3, #2
 801160a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801160e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011610:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011612:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011614:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011618:	441a      	add	r2, r3
 801161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801161c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801161e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011622:	441a      	add	r2, r3
 8011624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011626:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8011628:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801162c:	2b03      	cmp	r3, #3
 801162e:	d11e      	bne.n	801166e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011632:	3330      	adds	r3, #48	; 0x30
 8011634:	332a      	adds	r3, #42	; 0x2a
 8011636:	4618      	mov	r0, r3
 8011638:	f7fe fc4e 	bl	800fed8 <ld_word>
 801163c:	4603      	mov	r3, r0
 801163e:	2b00      	cmp	r3, #0
 8011640:	d001      	beq.n	8011646 <find_volume+0x332>
 8011642:	230d      	movs	r3, #13
 8011644:	e0a8      	b.n	8011798 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011648:	891b      	ldrh	r3, [r3, #8]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d001      	beq.n	8011652 <find_volume+0x33e>
 801164e:	230d      	movs	r3, #13
 8011650:	e0a2      	b.n	8011798 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011654:	3330      	adds	r3, #48	; 0x30
 8011656:	332c      	adds	r3, #44	; 0x2c
 8011658:	4618      	mov	r0, r3
 801165a:	f7fe fc55 	bl	800ff08 <ld_dword>
 801165e:	4602      	mov	r2, r0
 8011660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011662:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011666:	695b      	ldr	r3, [r3, #20]
 8011668:	009b      	lsls	r3, r3, #2
 801166a:	647b      	str	r3, [r7, #68]	; 0x44
 801166c:	e01f      	b.n	80116ae <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801166e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011670:	891b      	ldrh	r3, [r3, #8]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d101      	bne.n	801167a <find_volume+0x366>
 8011676:	230d      	movs	r3, #13
 8011678:	e08e      	b.n	8011798 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801167a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801167c:	6a1a      	ldr	r2, [r3, #32]
 801167e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011680:	441a      	add	r2, r3
 8011682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011684:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011686:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801168a:	2b02      	cmp	r3, #2
 801168c:	d103      	bne.n	8011696 <find_volume+0x382>
 801168e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011690:	695b      	ldr	r3, [r3, #20]
 8011692:	005b      	lsls	r3, r3, #1
 8011694:	e00a      	b.n	80116ac <find_volume+0x398>
 8011696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011698:	695a      	ldr	r2, [r3, #20]
 801169a:	4613      	mov	r3, r2
 801169c:	005b      	lsls	r3, r3, #1
 801169e:	4413      	add	r3, r2
 80116a0:	085a      	lsrs	r2, r3, #1
 80116a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116a4:	695b      	ldr	r3, [r3, #20]
 80116a6:	f003 0301 	and.w	r3, r3, #1
 80116aa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80116ac:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80116ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b0:	699a      	ldr	r2, [r3, #24]
 80116b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80116b8:	0a5b      	lsrs	r3, r3, #9
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d201      	bcs.n	80116c2 <find_volume+0x3ae>
 80116be:	230d      	movs	r3, #13
 80116c0:	e06a      	b.n	8011798 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80116c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c4:	f04f 32ff 	mov.w	r2, #4294967295
 80116c8:	611a      	str	r2, [r3, #16]
 80116ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116cc:	691a      	ldr	r2, [r3, #16]
 80116ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80116d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d4:	2280      	movs	r2, #128	; 0x80
 80116d6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80116d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80116dc:	2b03      	cmp	r3, #3
 80116de:	d149      	bne.n	8011774 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80116e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e2:	3330      	adds	r3, #48	; 0x30
 80116e4:	3330      	adds	r3, #48	; 0x30
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7fe fbf6 	bl	800fed8 <ld_word>
 80116ec:	4603      	mov	r3, r0
 80116ee:	2b01      	cmp	r3, #1
 80116f0:	d140      	bne.n	8011774 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80116f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116f4:	3301      	adds	r3, #1
 80116f6:	4619      	mov	r1, r3
 80116f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80116fa:	f7fe fe9d 	bl	8010438 <move_window>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d137      	bne.n	8011774 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8011704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011706:	2200      	movs	r2, #0
 8011708:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170c:	3330      	adds	r3, #48	; 0x30
 801170e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011712:	4618      	mov	r0, r3
 8011714:	f7fe fbe0 	bl	800fed8 <ld_word>
 8011718:	4603      	mov	r3, r0
 801171a:	461a      	mov	r2, r3
 801171c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011720:	429a      	cmp	r2, r3
 8011722:	d127      	bne.n	8011774 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011726:	3330      	adds	r3, #48	; 0x30
 8011728:	4618      	mov	r0, r3
 801172a:	f7fe fbed 	bl	800ff08 <ld_dword>
 801172e:	4603      	mov	r3, r0
 8011730:	4a1b      	ldr	r2, [pc, #108]	; (80117a0 <find_volume+0x48c>)
 8011732:	4293      	cmp	r3, r2
 8011734:	d11e      	bne.n	8011774 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011738:	3330      	adds	r3, #48	; 0x30
 801173a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801173e:	4618      	mov	r0, r3
 8011740:	f7fe fbe2 	bl	800ff08 <ld_dword>
 8011744:	4603      	mov	r3, r0
 8011746:	4a17      	ldr	r2, [pc, #92]	; (80117a4 <find_volume+0x490>)
 8011748:	4293      	cmp	r3, r2
 801174a:	d113      	bne.n	8011774 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801174c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801174e:	3330      	adds	r3, #48	; 0x30
 8011750:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011754:	4618      	mov	r0, r3
 8011756:	f7fe fbd7 	bl	800ff08 <ld_dword>
 801175a:	4602      	mov	r2, r0
 801175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801175e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011762:	3330      	adds	r3, #48	; 0x30
 8011764:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011768:	4618      	mov	r0, r3
 801176a:	f7fe fbcd 	bl	800ff08 <ld_dword>
 801176e:	4602      	mov	r2, r0
 8011770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011772:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011776:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801177a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801177c:	4b0a      	ldr	r3, [pc, #40]	; (80117a8 <find_volume+0x494>)
 801177e:	881b      	ldrh	r3, [r3, #0]
 8011780:	3301      	adds	r3, #1
 8011782:	b29a      	uxth	r2, r3
 8011784:	4b08      	ldr	r3, [pc, #32]	; (80117a8 <find_volume+0x494>)
 8011786:	801a      	strh	r2, [r3, #0]
 8011788:	4b07      	ldr	r3, [pc, #28]	; (80117a8 <find_volume+0x494>)
 801178a:	881a      	ldrh	r2, [r3, #0]
 801178c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801178e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011790:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011792:	f7fe fde9 	bl	8010368 <clear_lock>
#endif
	return FR_OK;
 8011796:	2300      	movs	r3, #0
}
 8011798:	4618      	mov	r0, r3
 801179a:	3758      	adds	r7, #88	; 0x58
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}
 80117a0:	41615252 	.word	0x41615252
 80117a4:	61417272 	.word	0x61417272
 80117a8:	20000654 	.word	0x20000654

080117ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b084      	sub	sp, #16
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
 80117b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80117b6:	2309      	movs	r3, #9
 80117b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d01c      	beq.n	80117fa <validate+0x4e>
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d018      	beq.n	80117fa <validate+0x4e>
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	781b      	ldrb	r3, [r3, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d013      	beq.n	80117fa <validate+0x4e>
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	889a      	ldrh	r2, [r3, #4]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	88db      	ldrh	r3, [r3, #6]
 80117dc:	429a      	cmp	r2, r3
 80117de:	d10c      	bne.n	80117fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	785b      	ldrb	r3, [r3, #1]
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7fe fad8 	bl	800fd9c <disk_status>
 80117ec:	4603      	mov	r3, r0
 80117ee:	f003 0301 	and.w	r3, r3, #1
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d101      	bne.n	80117fa <validate+0x4e>
			res = FR_OK;
 80117f6:	2300      	movs	r3, #0
 80117f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80117fa:	7bfb      	ldrb	r3, [r7, #15]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d102      	bne.n	8011806 <validate+0x5a>
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	e000      	b.n	8011808 <validate+0x5c>
 8011806:	2300      	movs	r3, #0
 8011808:	683a      	ldr	r2, [r7, #0]
 801180a:	6013      	str	r3, [r2, #0]
	return res;
 801180c:	7bfb      	ldrb	r3, [r7, #15]
}
 801180e:	4618      	mov	r0, r3
 8011810:	3710      	adds	r7, #16
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}
	...

08011818 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b088      	sub	sp, #32
 801181c:	af00      	add	r7, sp, #0
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	60b9      	str	r1, [r7, #8]
 8011822:	4613      	mov	r3, r2
 8011824:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801182a:	f107 0310 	add.w	r3, r7, #16
 801182e:	4618      	mov	r0, r3
 8011830:	f7ff fcd5 	bl	80111de <get_ldnumber>
 8011834:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011836:	69fb      	ldr	r3, [r7, #28]
 8011838:	2b00      	cmp	r3, #0
 801183a:	da01      	bge.n	8011840 <f_mount+0x28>
 801183c:	230b      	movs	r3, #11
 801183e:	e02b      	b.n	8011898 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011840:	4a17      	ldr	r2, [pc, #92]	; (80118a0 <f_mount+0x88>)
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011848:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801184a:	69bb      	ldr	r3, [r7, #24]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d005      	beq.n	801185c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011850:	69b8      	ldr	r0, [r7, #24]
 8011852:	f7fe fd89 	bl	8010368 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	2200      	movs	r2, #0
 801185a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d002      	beq.n	8011868 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	2200      	movs	r2, #0
 8011866:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011868:	68fa      	ldr	r2, [r7, #12]
 801186a:	490d      	ldr	r1, [pc, #52]	; (80118a0 <f_mount+0x88>)
 801186c:	69fb      	ldr	r3, [r7, #28]
 801186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d002      	beq.n	801187e <f_mount+0x66>
 8011878:	79fb      	ldrb	r3, [r7, #7]
 801187a:	2b01      	cmp	r3, #1
 801187c:	d001      	beq.n	8011882 <f_mount+0x6a>
 801187e:	2300      	movs	r3, #0
 8011880:	e00a      	b.n	8011898 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011882:	f107 010c 	add.w	r1, r7, #12
 8011886:	f107 0308 	add.w	r3, r7, #8
 801188a:	2200      	movs	r2, #0
 801188c:	4618      	mov	r0, r3
 801188e:	f7ff fd41 	bl	8011314 <find_volume>
 8011892:	4603      	mov	r3, r0
 8011894:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011896:	7dfb      	ldrb	r3, [r7, #23]
}
 8011898:	4618      	mov	r0, r3
 801189a:	3720      	adds	r7, #32
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}
 80118a0:	20000650 	.word	0x20000650

080118a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b098      	sub	sp, #96	; 0x60
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	60f8      	str	r0, [r7, #12]
 80118ac:	60b9      	str	r1, [r7, #8]
 80118ae:	4613      	mov	r3, r2
 80118b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d101      	bne.n	80118bc <f_open+0x18>
 80118b8:	2309      	movs	r3, #9
 80118ba:	e1ad      	b.n	8011c18 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80118bc:	79fb      	ldrb	r3, [r7, #7]
 80118be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80118c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80118c4:	79fa      	ldrb	r2, [r7, #7]
 80118c6:	f107 0110 	add.w	r1, r7, #16
 80118ca:	f107 0308 	add.w	r3, r7, #8
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7ff fd20 	bl	8011314 <find_volume>
 80118d4:	4603      	mov	r3, r0
 80118d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80118da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80118de:	2b00      	cmp	r3, #0
 80118e0:	f040 8191 	bne.w	8011c06 <f_open+0x362>
		dj.obj.fs = fs;
 80118e4:	693b      	ldr	r3, [r7, #16]
 80118e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80118e8:	68ba      	ldr	r2, [r7, #8]
 80118ea:	f107 0314 	add.w	r3, r7, #20
 80118ee:	4611      	mov	r1, r2
 80118f0:	4618      	mov	r0, r3
 80118f2:	f7ff fc03 	bl	80110fc <follow_path>
 80118f6:	4603      	mov	r3, r0
 80118f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80118fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011900:	2b00      	cmp	r3, #0
 8011902:	d11a      	bne.n	801193a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011904:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011908:	b25b      	sxtb	r3, r3
 801190a:	2b00      	cmp	r3, #0
 801190c:	da03      	bge.n	8011916 <f_open+0x72>
				res = FR_INVALID_NAME;
 801190e:	2306      	movs	r3, #6
 8011910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011914:	e011      	b.n	801193a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011916:	79fb      	ldrb	r3, [r7, #7]
 8011918:	f023 0301 	bic.w	r3, r3, #1
 801191c:	2b00      	cmp	r3, #0
 801191e:	bf14      	ite	ne
 8011920:	2301      	movne	r3, #1
 8011922:	2300      	moveq	r3, #0
 8011924:	b2db      	uxtb	r3, r3
 8011926:	461a      	mov	r2, r3
 8011928:	f107 0314 	add.w	r3, r7, #20
 801192c:	4611      	mov	r1, r2
 801192e:	4618      	mov	r0, r3
 8011930:	f7fe fbd2 	bl	80100d8 <chk_lock>
 8011934:	4603      	mov	r3, r0
 8011936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801193a:	79fb      	ldrb	r3, [r7, #7]
 801193c:	f003 031c 	and.w	r3, r3, #28
 8011940:	2b00      	cmp	r3, #0
 8011942:	d07f      	beq.n	8011a44 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011948:	2b00      	cmp	r3, #0
 801194a:	d017      	beq.n	801197c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801194c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011950:	2b04      	cmp	r3, #4
 8011952:	d10e      	bne.n	8011972 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011954:	f7fe fc1c 	bl	8010190 <enq_lock>
 8011958:	4603      	mov	r3, r0
 801195a:	2b00      	cmp	r3, #0
 801195c:	d006      	beq.n	801196c <f_open+0xc8>
 801195e:	f107 0314 	add.w	r3, r7, #20
 8011962:	4618      	mov	r0, r3
 8011964:	f7ff fb03 	bl	8010f6e <dir_register>
 8011968:	4603      	mov	r3, r0
 801196a:	e000      	b.n	801196e <f_open+0xca>
 801196c:	2312      	movs	r3, #18
 801196e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011972:	79fb      	ldrb	r3, [r7, #7]
 8011974:	f043 0308 	orr.w	r3, r3, #8
 8011978:	71fb      	strb	r3, [r7, #7]
 801197a:	e010      	b.n	801199e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801197c:	7ebb      	ldrb	r3, [r7, #26]
 801197e:	f003 0311 	and.w	r3, r3, #17
 8011982:	2b00      	cmp	r3, #0
 8011984:	d003      	beq.n	801198e <f_open+0xea>
					res = FR_DENIED;
 8011986:	2307      	movs	r3, #7
 8011988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801198c:	e007      	b.n	801199e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801198e:	79fb      	ldrb	r3, [r7, #7]
 8011990:	f003 0304 	and.w	r3, r3, #4
 8011994:	2b00      	cmp	r3, #0
 8011996:	d002      	beq.n	801199e <f_open+0xfa>
 8011998:	2308      	movs	r3, #8
 801199a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801199e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d168      	bne.n	8011a78 <f_open+0x1d4>
 80119a6:	79fb      	ldrb	r3, [r7, #7]
 80119a8:	f003 0308 	and.w	r3, r3, #8
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d063      	beq.n	8011a78 <f_open+0x1d4>
				dw = GET_FATTIME();
 80119b0:	f7fc f822 	bl	800d9f8 <get_fattime>
 80119b4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80119b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119b8:	330e      	adds	r3, #14
 80119ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fe fae1 	bl	800ff84 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80119c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119c4:	3316      	adds	r3, #22
 80119c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7fe fadb 	bl	800ff84 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80119ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119d0:	330b      	adds	r3, #11
 80119d2:	2220      	movs	r2, #32
 80119d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119da:	4611      	mov	r1, r2
 80119dc:	4618      	mov	r0, r3
 80119de:	f7ff fa32 	bl	8010e46 <ld_clust>
 80119e2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80119e8:	2200      	movs	r2, #0
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7ff fa4a 	bl	8010e84 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80119f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119f2:	331c      	adds	r3, #28
 80119f4:	2100      	movs	r1, #0
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7fe fac4 	bl	800ff84 <st_dword>
					fs->wflag = 1;
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	2201      	movs	r2, #1
 8011a00:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d037      	beq.n	8011a78 <f_open+0x1d4>
						dw = fs->winsect;
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a0c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011a0e:	f107 0314 	add.w	r3, r7, #20
 8011a12:	2200      	movs	r2, #0
 8011a14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7fe ff5d 	bl	80108d6 <remove_chain>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011a22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d126      	bne.n	8011a78 <f_open+0x1d4>
							res = move_window(fs, dw);
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7fe fd02 	bl	8010438 <move_window>
 8011a34:	4603      	mov	r3, r0
 8011a36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011a3a:	693b      	ldr	r3, [r7, #16]
 8011a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a3e:	3a01      	subs	r2, #1
 8011a40:	60da      	str	r2, [r3, #12]
 8011a42:	e019      	b.n	8011a78 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011a44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d115      	bne.n	8011a78 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011a4c:	7ebb      	ldrb	r3, [r7, #26]
 8011a4e:	f003 0310 	and.w	r3, r3, #16
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d003      	beq.n	8011a5e <f_open+0x1ba>
					res = FR_NO_FILE;
 8011a56:	2304      	movs	r3, #4
 8011a58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011a5c:	e00c      	b.n	8011a78 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011a5e:	79fb      	ldrb	r3, [r7, #7]
 8011a60:	f003 0302 	and.w	r3, r3, #2
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d007      	beq.n	8011a78 <f_open+0x1d4>
 8011a68:	7ebb      	ldrb	r3, [r7, #26]
 8011a6a:	f003 0301 	and.w	r3, r3, #1
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d002      	beq.n	8011a78 <f_open+0x1d4>
						res = FR_DENIED;
 8011a72:	2307      	movs	r3, #7
 8011a74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011a78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d128      	bne.n	8011ad2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011a80:	79fb      	ldrb	r3, [r7, #7]
 8011a82:	f003 0308 	and.w	r3, r3, #8
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d003      	beq.n	8011a92 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8011a8a:	79fb      	ldrb	r3, [r7, #7]
 8011a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a90:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011aa0:	79fb      	ldrb	r3, [r7, #7]
 8011aa2:	f023 0301 	bic.w	r3, r3, #1
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	bf14      	ite	ne
 8011aaa:	2301      	movne	r3, #1
 8011aac:	2300      	moveq	r3, #0
 8011aae:	b2db      	uxtb	r3, r3
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	f107 0314 	add.w	r3, r7, #20
 8011ab6:	4611      	mov	r1, r2
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7fe fb8b 	bl	80101d4 <inc_lock>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	691b      	ldr	r3, [r3, #16]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d102      	bne.n	8011ad2 <f_open+0x22e>
 8011acc:	2302      	movs	r3, #2
 8011ace:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	f040 8095 	bne.w	8011c06 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ae0:	4611      	mov	r1, r2
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	f7ff f9af 	bl	8010e46 <ld_clust>
 8011ae8:	4602      	mov	r2, r0
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011af0:	331c      	adds	r3, #28
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7fe fa08 	bl	800ff08 <ld_dword>
 8011af8:	4602      	mov	r2, r0
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	2200      	movs	r2, #0
 8011b02:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011b04:	693a      	ldr	r2, [r7, #16]
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	88da      	ldrh	r2, [r3, #6]
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	79fa      	ldrb	r2, [r7, #7]
 8011b16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2200      	movs	r2, #0
 8011b22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2200      	movs	r2, #0
 8011b28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	3330      	adds	r3, #48	; 0x30
 8011b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011b32:	2100      	movs	r1, #0
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7fe fa72 	bl	801001e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011b3a:	79fb      	ldrb	r3, [r7, #7]
 8011b3c:	f003 0320 	and.w	r3, r3, #32
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d060      	beq.n	8011c06 <f_open+0x362>
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d05c      	beq.n	8011c06 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	68da      	ldr	r2, [r3, #12]
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011b54:	693b      	ldr	r3, [r7, #16]
 8011b56:	895b      	ldrh	r3, [r3, #10]
 8011b58:	025b      	lsls	r3, r3, #9
 8011b5a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	689b      	ldr	r3, [r3, #8]
 8011b60:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	68db      	ldr	r3, [r3, #12]
 8011b66:	657b      	str	r3, [r7, #84]	; 0x54
 8011b68:	e016      	b.n	8011b98 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7fe fd1d 	bl	80105ae <get_fat>
 8011b74:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	d802      	bhi.n	8011b82 <f_open+0x2de>
 8011b7c:	2302      	movs	r3, #2
 8011b7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b88:	d102      	bne.n	8011b90 <f_open+0x2ec>
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011b90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b94:	1ad3      	subs	r3, r2, r3
 8011b96:	657b      	str	r3, [r7, #84]	; 0x54
 8011b98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d103      	bne.n	8011ba8 <f_open+0x304>
 8011ba0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d8e0      	bhi.n	8011b6a <f_open+0x2c6>
				}
				fp->clust = clst;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011bac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011bae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d127      	bne.n	8011c06 <f_open+0x362>
 8011bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d022      	beq.n	8011c06 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7fe fcd3 	bl	8010570 <clust2sect>
 8011bca:	6478      	str	r0, [r7, #68]	; 0x44
 8011bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d103      	bne.n	8011bda <f_open+0x336>
						res = FR_INT_ERR;
 8011bd2:	2302      	movs	r3, #2
 8011bd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011bd8:	e015      	b.n	8011c06 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bdc:	0a5a      	lsrs	r2, r3, #9
 8011bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011be0:	441a      	add	r2, r3
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	7858      	ldrb	r0, [r3, #1]
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	6a1a      	ldr	r2, [r3, #32]
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	f7fe f911 	bl	800fe1c <disk_read>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d002      	beq.n	8011c06 <f_open+0x362>
 8011c00:	2301      	movs	r3, #1
 8011c02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011c06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d002      	beq.n	8011c14 <f_open+0x370>
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	2200      	movs	r2, #0
 8011c12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011c14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3760      	adds	r7, #96	; 0x60
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}

08011c20 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b08c      	sub	sp, #48	; 0x30
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	60b9      	str	r1, [r7, #8]
 8011c2a:	607a      	str	r2, [r7, #4]
 8011c2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	2200      	movs	r2, #0
 8011c36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	f107 0210 	add.w	r2, r7, #16
 8011c3e:	4611      	mov	r1, r2
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7ff fdb3 	bl	80117ac <validate>
 8011c46:	4603      	mov	r3, r0
 8011c48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d107      	bne.n	8011c64 <f_write+0x44>
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	7d5b      	ldrb	r3, [r3, #21]
 8011c58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011c5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d002      	beq.n	8011c6a <f_write+0x4a>
 8011c64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c68:	e14b      	b.n	8011f02 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	7d1b      	ldrb	r3, [r3, #20]
 8011c6e:	f003 0302 	and.w	r3, r3, #2
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d101      	bne.n	8011c7a <f_write+0x5a>
 8011c76:	2307      	movs	r3, #7
 8011c78:	e143      	b.n	8011f02 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	699a      	ldr	r2, [r3, #24]
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	441a      	add	r2, r3
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	699b      	ldr	r3, [r3, #24]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	f080 812d 	bcs.w	8011ee6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	699b      	ldr	r3, [r3, #24]
 8011c90:	43db      	mvns	r3, r3
 8011c92:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011c94:	e127      	b.n	8011ee6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	699b      	ldr	r3, [r3, #24]
 8011c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	f040 80e3 	bne.w	8011e6a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	699b      	ldr	r3, [r3, #24]
 8011ca8:	0a5b      	lsrs	r3, r3, #9
 8011caa:	693a      	ldr	r2, [r7, #16]
 8011cac:	8952      	ldrh	r2, [r2, #10]
 8011cae:	3a01      	subs	r2, #1
 8011cb0:	4013      	ands	r3, r2
 8011cb2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011cb4:	69bb      	ldr	r3, [r7, #24]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d143      	bne.n	8011d42 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	699b      	ldr	r3, [r3, #24]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d10c      	bne.n	8011cdc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	689b      	ldr	r3, [r3, #8]
 8011cc6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d11a      	bne.n	8011d04 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	2100      	movs	r1, #0
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7fe fe64 	bl	80109a0 <create_chain>
 8011cd8:	62b8      	str	r0, [r7, #40]	; 0x28
 8011cda:	e013      	b.n	8011d04 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d007      	beq.n	8011cf4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	699b      	ldr	r3, [r3, #24]
 8011ce8:	4619      	mov	r1, r3
 8011cea:	68f8      	ldr	r0, [r7, #12]
 8011cec:	f7fe fef0 	bl	8010ad0 <clmt_clust>
 8011cf0:	62b8      	str	r0, [r7, #40]	; 0x28
 8011cf2:	e007      	b.n	8011d04 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011cf4:	68fa      	ldr	r2, [r7, #12]
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	69db      	ldr	r3, [r3, #28]
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	4610      	mov	r0, r2
 8011cfe:	f7fe fe4f 	bl	80109a0 <create_chain>
 8011d02:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	f000 80f2 	beq.w	8011ef0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	d104      	bne.n	8011d1c <f_write+0xfc>
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	2202      	movs	r2, #2
 8011d16:	755a      	strb	r2, [r3, #21]
 8011d18:	2302      	movs	r3, #2
 8011d1a:	e0f2      	b.n	8011f02 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d22:	d104      	bne.n	8011d2e <f_write+0x10e>
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	2201      	movs	r2, #1
 8011d28:	755a      	strb	r2, [r3, #21]
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	e0e9      	b.n	8011f02 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d32:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	689b      	ldr	r3, [r3, #8]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d102      	bne.n	8011d42 <f_write+0x122>
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d40:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	7d1b      	ldrb	r3, [r3, #20]
 8011d46:	b25b      	sxtb	r3, r3
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	da18      	bge.n	8011d7e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d4c:	693b      	ldr	r3, [r7, #16]
 8011d4e:	7858      	ldrb	r0, [r3, #1]
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	6a1a      	ldr	r2, [r3, #32]
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	f7fe f87e 	bl	800fe5c <disk_write>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d004      	beq.n	8011d70 <f_write+0x150>
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	2201      	movs	r2, #1
 8011d6a:	755a      	strb	r2, [r3, #21]
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	e0c8      	b.n	8011f02 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	7d1b      	ldrb	r3, [r3, #20]
 8011d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d78:	b2da      	uxtb	r2, r3
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011d7e:	693a      	ldr	r2, [r7, #16]
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	69db      	ldr	r3, [r3, #28]
 8011d84:	4619      	mov	r1, r3
 8011d86:	4610      	mov	r0, r2
 8011d88:	f7fe fbf2 	bl	8010570 <clust2sect>
 8011d8c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d104      	bne.n	8011d9e <f_write+0x17e>
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	2202      	movs	r2, #2
 8011d98:	755a      	strb	r2, [r3, #21]
 8011d9a:	2302      	movs	r3, #2
 8011d9c:	e0b1      	b.n	8011f02 <f_write+0x2e2>
			sect += csect;
 8011d9e:	697a      	ldr	r2, [r7, #20]
 8011da0:	69bb      	ldr	r3, [r7, #24]
 8011da2:	4413      	add	r3, r2
 8011da4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	0a5b      	lsrs	r3, r3, #9
 8011daa:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011dac:	6a3b      	ldr	r3, [r7, #32]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d03c      	beq.n	8011e2c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011db2:	69ba      	ldr	r2, [r7, #24]
 8011db4:	6a3b      	ldr	r3, [r7, #32]
 8011db6:	4413      	add	r3, r2
 8011db8:	693a      	ldr	r2, [r7, #16]
 8011dba:	8952      	ldrh	r2, [r2, #10]
 8011dbc:	4293      	cmp	r3, r2
 8011dbe:	d905      	bls.n	8011dcc <f_write+0x1ac>
					cc = fs->csize - csect;
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	895b      	ldrh	r3, [r3, #10]
 8011dc4:	461a      	mov	r2, r3
 8011dc6:	69bb      	ldr	r3, [r7, #24]
 8011dc8:	1ad3      	subs	r3, r2, r3
 8011dca:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011dcc:	693b      	ldr	r3, [r7, #16]
 8011dce:	7858      	ldrb	r0, [r3, #1]
 8011dd0:	6a3b      	ldr	r3, [r7, #32]
 8011dd2:	697a      	ldr	r2, [r7, #20]
 8011dd4:	69f9      	ldr	r1, [r7, #28]
 8011dd6:	f7fe f841 	bl	800fe5c <disk_write>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d004      	beq.n	8011dea <f_write+0x1ca>
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	2201      	movs	r2, #1
 8011de4:	755a      	strb	r2, [r3, #21]
 8011de6:	2301      	movs	r3, #1
 8011de8:	e08b      	b.n	8011f02 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	6a1a      	ldr	r2, [r3, #32]
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	1ad3      	subs	r3, r2, r3
 8011df2:	6a3a      	ldr	r2, [r7, #32]
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d915      	bls.n	8011e24 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	6a1a      	ldr	r2, [r3, #32]
 8011e02:	697b      	ldr	r3, [r7, #20]
 8011e04:	1ad3      	subs	r3, r2, r3
 8011e06:	025b      	lsls	r3, r3, #9
 8011e08:	69fa      	ldr	r2, [r7, #28]
 8011e0a:	4413      	add	r3, r2
 8011e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011e10:	4619      	mov	r1, r3
 8011e12:	f7fe f8e3 	bl	800ffdc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	7d1b      	ldrb	r3, [r3, #20]
 8011e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e1e:	b2da      	uxtb	r2, r3
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011e24:	6a3b      	ldr	r3, [r7, #32]
 8011e26:	025b      	lsls	r3, r3, #9
 8011e28:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011e2a:	e03f      	b.n	8011eac <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	6a1b      	ldr	r3, [r3, #32]
 8011e30:	697a      	ldr	r2, [r7, #20]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d016      	beq.n	8011e64 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	699a      	ldr	r2, [r3, #24]
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d210      	bcs.n	8011e64 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	7858      	ldrb	r0, [r3, #1]
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	697a      	ldr	r2, [r7, #20]
 8011e50:	f7fd ffe4 	bl	800fe1c <disk_read>
 8011e54:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d004      	beq.n	8011e64 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2201      	movs	r2, #1
 8011e5e:	755a      	strb	r2, [r3, #21]
 8011e60:	2301      	movs	r3, #1
 8011e62:	e04e      	b.n	8011f02 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	697a      	ldr	r2, [r7, #20]
 8011e68:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	699b      	ldr	r3, [r3, #24]
 8011e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e72:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011e76:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d901      	bls.n	8011e84 <f_write+0x264>
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	699b      	ldr	r3, [r3, #24]
 8011e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e92:	4413      	add	r3, r2
 8011e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e96:	69f9      	ldr	r1, [r7, #28]
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f7fe f89f 	bl	800ffdc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	7d1b      	ldrb	r3, [r3, #20]
 8011ea2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ea6:	b2da      	uxtb	r2, r3
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011eac:	69fa      	ldr	r2, [r7, #28]
 8011eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb0:	4413      	add	r3, r2
 8011eb2:	61fb      	str	r3, [r7, #28]
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	699a      	ldr	r2, [r3, #24]
 8011eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eba:	441a      	add	r2, r3
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	619a      	str	r2, [r3, #24]
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	68da      	ldr	r2, [r3, #12]
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	699b      	ldr	r3, [r3, #24]
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	bf38      	it	cc
 8011ecc:	461a      	movcc	r2, r3
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	60da      	str	r2, [r3, #12]
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	681a      	ldr	r2, [r3, #0]
 8011ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed8:	441a      	add	r2, r3
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	601a      	str	r2, [r3, #0]
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee2:	1ad3      	subs	r3, r2, r3
 8011ee4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	f47f aed4 	bne.w	8011c96 <f_write+0x76>
 8011eee:	e000      	b.n	8011ef2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011ef0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	7d1b      	ldrb	r3, [r3, #20]
 8011ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011efa:	b2da      	uxtb	r2, r3
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011f00:	2300      	movs	r3, #0
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3730      	adds	r7, #48	; 0x30
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}

08011f0a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011f0a:	b580      	push	{r7, lr}
 8011f0c:	b086      	sub	sp, #24
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f107 0208 	add.w	r2, r7, #8
 8011f18:	4611      	mov	r1, r2
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7ff fc46 	bl	80117ac <validate>
 8011f20:	4603      	mov	r3, r0
 8011f22:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011f24:	7dfb      	ldrb	r3, [r7, #23]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d168      	bne.n	8011ffc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	7d1b      	ldrb	r3, [r3, #20]
 8011f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d062      	beq.n	8011ffc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	7d1b      	ldrb	r3, [r3, #20]
 8011f3a:	b25b      	sxtb	r3, r3
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	da15      	bge.n	8011f6c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	7858      	ldrb	r0, [r3, #1]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6a1a      	ldr	r2, [r3, #32]
 8011f4e:	2301      	movs	r3, #1
 8011f50:	f7fd ff84 	bl	800fe5c <disk_write>
 8011f54:	4603      	mov	r3, r0
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d001      	beq.n	8011f5e <f_sync+0x54>
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	e04f      	b.n	8011ffe <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	7d1b      	ldrb	r3, [r3, #20]
 8011f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f66:	b2da      	uxtb	r2, r3
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011f6c:	f7fb fd44 	bl	800d9f8 <get_fattime>
 8011f70:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011f72:	68ba      	ldr	r2, [r7, #8]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f78:	4619      	mov	r1, r3
 8011f7a:	4610      	mov	r0, r2
 8011f7c:	f7fe fa5c 	bl	8010438 <move_window>
 8011f80:	4603      	mov	r3, r0
 8011f82:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011f84:	7dfb      	ldrb	r3, [r7, #23]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d138      	bne.n	8011ffc <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f8e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	330b      	adds	r3, #11
 8011f94:	781a      	ldrb	r2, [r3, #0]
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	330b      	adds	r3, #11
 8011f9a:	f042 0220 	orr.w	r2, r2, #32
 8011f9e:	b2d2      	uxtb	r2, r2
 8011fa0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6818      	ldr	r0, [r3, #0]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	689b      	ldr	r3, [r3, #8]
 8011faa:	461a      	mov	r2, r3
 8011fac:	68f9      	ldr	r1, [r7, #12]
 8011fae:	f7fe ff69 	bl	8010e84 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	f103 021c 	add.w	r2, r3, #28
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	68db      	ldr	r3, [r3, #12]
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	4610      	mov	r0, r2
 8011fc0:	f7fd ffe0 	bl	800ff84 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	3316      	adds	r3, #22
 8011fc8:	6939      	ldr	r1, [r7, #16]
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f7fd ffda 	bl	800ff84 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	3312      	adds	r3, #18
 8011fd4:	2100      	movs	r1, #0
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7fd ffb9 	bl	800ff4e <st_word>
					fs->wflag = 1;
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	2201      	movs	r2, #1
 8011fe0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7fe fa55 	bl	8010494 <sync_fs>
 8011fea:	4603      	mov	r3, r0
 8011fec:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	7d1b      	ldrb	r3, [r3, #20]
 8011ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ff6:	b2da      	uxtb	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3718      	adds	r7, #24
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}

08012006 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012006:	b580      	push	{r7, lr}
 8012008:	b084      	sub	sp, #16
 801200a:	af00      	add	r7, sp, #0
 801200c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f7ff ff7b 	bl	8011f0a <f_sync>
 8012014:	4603      	mov	r3, r0
 8012016:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012018:	7bfb      	ldrb	r3, [r7, #15]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d118      	bne.n	8012050 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f107 0208 	add.w	r2, r7, #8
 8012024:	4611      	mov	r1, r2
 8012026:	4618      	mov	r0, r3
 8012028:	f7ff fbc0 	bl	80117ac <validate>
 801202c:	4603      	mov	r3, r0
 801202e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012030:	7bfb      	ldrb	r3, [r7, #15]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d10c      	bne.n	8012050 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	691b      	ldr	r3, [r3, #16]
 801203a:	4618      	mov	r0, r3
 801203c:	f7fe f958 	bl	80102f0 <dec_lock>
 8012040:	4603      	mov	r3, r0
 8012042:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012044:	7bfb      	ldrb	r3, [r7, #15]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d102      	bne.n	8012050 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2200      	movs	r2, #0
 801204e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012050:	7bfb      	ldrb	r3, [r7, #15]
}
 8012052:	4618      	mov	r0, r3
 8012054:	3710      	adds	r7, #16
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}
	...

0801205c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801205c:	b480      	push	{r7}
 801205e:	b087      	sub	sp, #28
 8012060:	af00      	add	r7, sp, #0
 8012062:	60f8      	str	r0, [r7, #12]
 8012064:	60b9      	str	r1, [r7, #8]
 8012066:	4613      	mov	r3, r2
 8012068:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801206a:	2301      	movs	r3, #1
 801206c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801206e:	2300      	movs	r3, #0
 8012070:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012072:	4b1f      	ldr	r3, [pc, #124]	; (80120f0 <FATFS_LinkDriverEx+0x94>)
 8012074:	7a5b      	ldrb	r3, [r3, #9]
 8012076:	b2db      	uxtb	r3, r3
 8012078:	2b00      	cmp	r3, #0
 801207a:	d131      	bne.n	80120e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801207c:	4b1c      	ldr	r3, [pc, #112]	; (80120f0 <FATFS_LinkDriverEx+0x94>)
 801207e:	7a5b      	ldrb	r3, [r3, #9]
 8012080:	b2db      	uxtb	r3, r3
 8012082:	461a      	mov	r2, r3
 8012084:	4b1a      	ldr	r3, [pc, #104]	; (80120f0 <FATFS_LinkDriverEx+0x94>)
 8012086:	2100      	movs	r1, #0
 8012088:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801208a:	4b19      	ldr	r3, [pc, #100]	; (80120f0 <FATFS_LinkDriverEx+0x94>)
 801208c:	7a5b      	ldrb	r3, [r3, #9]
 801208e:	b2db      	uxtb	r3, r3
 8012090:	4a17      	ldr	r2, [pc, #92]	; (80120f0 <FATFS_LinkDriverEx+0x94>)
 8012092:	009b      	lsls	r3, r3, #2
 8012094:	4413      	add	r3, r2
 8012096:	68fa      	ldr	r2, [r7, #12]
 8012098:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801209a:	4b15      	ldr	r3, [pc, #84]	; (80120f0 <FATFS_LinkDriverEx+0x94>)
 801209c:	7a5b      	ldrb	r3, [r3, #9]
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	461a      	mov	r2, r3
 80120a2:	4b13      	ldr	r3, [pc, #76]	; (80120f0 <FATFS_LinkDriverEx+0x94>)
 80120a4:	4413      	add	r3, r2
 80120a6:	79fa      	ldrb	r2, [r7, #7]
 80120a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80120aa:	4b11      	ldr	r3, [pc, #68]	; (80120f0 <FATFS_LinkDriverEx+0x94>)
 80120ac:	7a5b      	ldrb	r3, [r3, #9]
 80120ae:	b2db      	uxtb	r3, r3
 80120b0:	1c5a      	adds	r2, r3, #1
 80120b2:	b2d1      	uxtb	r1, r2
 80120b4:	4a0e      	ldr	r2, [pc, #56]	; (80120f0 <FATFS_LinkDriverEx+0x94>)
 80120b6:	7251      	strb	r1, [r2, #9]
 80120b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80120ba:	7dbb      	ldrb	r3, [r7, #22]
 80120bc:	3330      	adds	r3, #48	; 0x30
 80120be:	b2da      	uxtb	r2, r3
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	3301      	adds	r3, #1
 80120c8:	223a      	movs	r2, #58	; 0x3a
 80120ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	3302      	adds	r3, #2
 80120d0:	222f      	movs	r2, #47	; 0x2f
 80120d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	3303      	adds	r3, #3
 80120d8:	2200      	movs	r2, #0
 80120da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80120dc:	2300      	movs	r3, #0
 80120de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80120e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80120e2:	4618      	mov	r0, r3
 80120e4:	371c      	adds	r7, #28
 80120e6:	46bd      	mov	sp, r7
 80120e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ec:	4770      	bx	lr
 80120ee:	bf00      	nop
 80120f0:	20000678 	.word	0x20000678

080120f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b082      	sub	sp, #8
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80120fe:	2200      	movs	r2, #0
 8012100:	6839      	ldr	r1, [r7, #0]
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f7ff ffaa 	bl	801205c <FATFS_LinkDriverEx>
 8012108:	4603      	mov	r3, r0
}
 801210a:	4618      	mov	r0, r3
 801210c:	3708      	adds	r7, #8
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
	...

08012114 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012118:	2200      	movs	r2, #0
 801211a:	4912      	ldr	r1, [pc, #72]	; (8012164 <MX_USB_DEVICE_Init+0x50>)
 801211c:	4812      	ldr	r0, [pc, #72]	; (8012168 <MX_USB_DEVICE_Init+0x54>)
 801211e:	f7fc fcd3 	bl	800eac8 <USBD_Init>
 8012122:	4603      	mov	r3, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	d001      	beq.n	801212c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012128:	f7f0 ff28 	bl	8002f7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801212c:	490f      	ldr	r1, [pc, #60]	; (801216c <MX_USB_DEVICE_Init+0x58>)
 801212e:	480e      	ldr	r0, [pc, #56]	; (8012168 <MX_USB_DEVICE_Init+0x54>)
 8012130:	f7fc fcfa 	bl	800eb28 <USBD_RegisterClass>
 8012134:	4603      	mov	r3, r0
 8012136:	2b00      	cmp	r3, #0
 8012138:	d001      	beq.n	801213e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801213a:	f7f0 ff1f 	bl	8002f7c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801213e:	490c      	ldr	r1, [pc, #48]	; (8012170 <MX_USB_DEVICE_Init+0x5c>)
 8012140:	4809      	ldr	r0, [pc, #36]	; (8012168 <MX_USB_DEVICE_Init+0x54>)
 8012142:	f7fc fc1b 	bl	800e97c <USBD_CDC_RegisterInterface>
 8012146:	4603      	mov	r3, r0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d001      	beq.n	8012150 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801214c:	f7f0 ff16 	bl	8002f7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012150:	4805      	ldr	r0, [pc, #20]	; (8012168 <MX_USB_DEVICE_Init+0x54>)
 8012152:	f7fc fd10 	bl	800eb76 <USBD_Start>
 8012156:	4603      	mov	r3, r0
 8012158:	2b00      	cmp	r3, #0
 801215a:	d001      	beq.n	8012160 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801215c:	f7f0 ff0e 	bl	8002f7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012160:	bf00      	nop
 8012162:	bd80      	pop	{r7, pc}
 8012164:	2000014c 	.word	0x2000014c
 8012168:	20001a98 	.word	0x20001a98
 801216c:	20000034 	.word	0x20000034
 8012170:	20000138 	.word	0x20000138

08012174 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012178:	2200      	movs	r2, #0
 801217a:	4905      	ldr	r1, [pc, #20]	; (8012190 <CDC_Init_FS+0x1c>)
 801217c:	4805      	ldr	r0, [pc, #20]	; (8012194 <CDC_Init_FS+0x20>)
 801217e:	f7fc fc12 	bl	800e9a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012182:	4905      	ldr	r1, [pc, #20]	; (8012198 <CDC_Init_FS+0x24>)
 8012184:	4803      	ldr	r0, [pc, #12]	; (8012194 <CDC_Init_FS+0x20>)
 8012186:	f7fc fc2c 	bl	800e9e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801218a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801218c:	4618      	mov	r0, r3
 801218e:	bd80      	pop	{r7, pc}
 8012190:	20001d68 	.word	0x20001d68
 8012194:	20001a98 	.word	0x20001a98
 8012198:	20002568 	.word	0x20002568

0801219c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801219c:	b480      	push	{r7}
 801219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80121a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr

080121ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80121ac:	b480      	push	{r7}
 80121ae:	b083      	sub	sp, #12
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	4603      	mov	r3, r0
 80121b4:	6039      	str	r1, [r7, #0]
 80121b6:	71fb      	strb	r3, [r7, #7]
 80121b8:	4613      	mov	r3, r2
 80121ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80121bc:	79fb      	ldrb	r3, [r7, #7]
 80121be:	2b23      	cmp	r3, #35	; 0x23
 80121c0:	d84a      	bhi.n	8012258 <CDC_Control_FS+0xac>
 80121c2:	a201      	add	r2, pc, #4	; (adr r2, 80121c8 <CDC_Control_FS+0x1c>)
 80121c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121c8:	08012259 	.word	0x08012259
 80121cc:	08012259 	.word	0x08012259
 80121d0:	08012259 	.word	0x08012259
 80121d4:	08012259 	.word	0x08012259
 80121d8:	08012259 	.word	0x08012259
 80121dc:	08012259 	.word	0x08012259
 80121e0:	08012259 	.word	0x08012259
 80121e4:	08012259 	.word	0x08012259
 80121e8:	08012259 	.word	0x08012259
 80121ec:	08012259 	.word	0x08012259
 80121f0:	08012259 	.word	0x08012259
 80121f4:	08012259 	.word	0x08012259
 80121f8:	08012259 	.word	0x08012259
 80121fc:	08012259 	.word	0x08012259
 8012200:	08012259 	.word	0x08012259
 8012204:	08012259 	.word	0x08012259
 8012208:	08012259 	.word	0x08012259
 801220c:	08012259 	.word	0x08012259
 8012210:	08012259 	.word	0x08012259
 8012214:	08012259 	.word	0x08012259
 8012218:	08012259 	.word	0x08012259
 801221c:	08012259 	.word	0x08012259
 8012220:	08012259 	.word	0x08012259
 8012224:	08012259 	.word	0x08012259
 8012228:	08012259 	.word	0x08012259
 801222c:	08012259 	.word	0x08012259
 8012230:	08012259 	.word	0x08012259
 8012234:	08012259 	.word	0x08012259
 8012238:	08012259 	.word	0x08012259
 801223c:	08012259 	.word	0x08012259
 8012240:	08012259 	.word	0x08012259
 8012244:	08012259 	.word	0x08012259
 8012248:	08012259 	.word	0x08012259
 801224c:	08012259 	.word	0x08012259
 8012250:	08012259 	.word	0x08012259
 8012254:	08012259 	.word	0x08012259
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012258:	bf00      	nop
  }

  return (USBD_OK);
 801225a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801225c:	4618      	mov	r0, r3
 801225e:	370c      	adds	r7, #12
 8012260:	46bd      	mov	sp, r7
 8012262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012266:	4770      	bx	lr

08012268 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b082      	sub	sp, #8
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8012272:	6879      	ldr	r1, [r7, #4]
 8012274:	4805      	ldr	r0, [pc, #20]	; (801228c <CDC_Receive_FS+0x24>)
 8012276:	f7fc fbb4 	bl	800e9e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801227a:	4804      	ldr	r0, [pc, #16]	; (801228c <CDC_Receive_FS+0x24>)
 801227c:	f7fc fbfa 	bl	800ea74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012280:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012282:	4618      	mov	r0, r3
 8012284:	3708      	adds	r7, #8
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	20001a98 	.word	0x20001a98

08012290 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b084      	sub	sp, #16
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
 8012298:	460b      	mov	r3, r1
 801229a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801229c:	2300      	movs	r3, #0
 801229e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80122a0:	4b0d      	ldr	r3, [pc, #52]	; (80122d8 <CDC_Transmit_FS+0x48>)
 80122a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80122a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d001      	beq.n	80122b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80122b2:	2301      	movs	r3, #1
 80122b4:	e00b      	b.n	80122ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80122b6:	887b      	ldrh	r3, [r7, #2]
 80122b8:	461a      	mov	r2, r3
 80122ba:	6879      	ldr	r1, [r7, #4]
 80122bc:	4806      	ldr	r0, [pc, #24]	; (80122d8 <CDC_Transmit_FS+0x48>)
 80122be:	f7fc fb72 	bl	800e9a6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80122c2:	4805      	ldr	r0, [pc, #20]	; (80122d8 <CDC_Transmit_FS+0x48>)
 80122c4:	f7fc fba6 	bl	800ea14 <USBD_CDC_TransmitPacket>
 80122c8:	4603      	mov	r3, r0
 80122ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80122cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3710      	adds	r7, #16
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	20001a98 	.word	0x20001a98

080122dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80122dc:	b480      	push	{r7}
 80122de:	b087      	sub	sp, #28
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	60f8      	str	r0, [r7, #12]
 80122e4:	60b9      	str	r1, [r7, #8]
 80122e6:	4613      	mov	r3, r2
 80122e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80122ea:	2300      	movs	r3, #0
 80122ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80122ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	371c      	adds	r7, #28
 80122f6:	46bd      	mov	sp, r7
 80122f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fc:	4770      	bx	lr
	...

08012300 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012300:	b480      	push	{r7}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
 8012306:	4603      	mov	r3, r0
 8012308:	6039      	str	r1, [r7, #0]
 801230a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	2212      	movs	r2, #18
 8012310:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012312:	4b03      	ldr	r3, [pc, #12]	; (8012320 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012314:	4618      	mov	r0, r3
 8012316:	370c      	adds	r7, #12
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr
 8012320:	20000168 	.word	0x20000168

08012324 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012324:	b480      	push	{r7}
 8012326:	b083      	sub	sp, #12
 8012328:	af00      	add	r7, sp, #0
 801232a:	4603      	mov	r3, r0
 801232c:	6039      	str	r1, [r7, #0]
 801232e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	2204      	movs	r2, #4
 8012334:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012336:	4b03      	ldr	r3, [pc, #12]	; (8012344 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012338:	4618      	mov	r0, r3
 801233a:	370c      	adds	r7, #12
 801233c:	46bd      	mov	sp, r7
 801233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012342:	4770      	bx	lr
 8012344:	2000017c 	.word	0x2000017c

08012348 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b082      	sub	sp, #8
 801234c:	af00      	add	r7, sp, #0
 801234e:	4603      	mov	r3, r0
 8012350:	6039      	str	r1, [r7, #0]
 8012352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012354:	79fb      	ldrb	r3, [r7, #7]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d105      	bne.n	8012366 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801235a:	683a      	ldr	r2, [r7, #0]
 801235c:	4907      	ldr	r1, [pc, #28]	; (801237c <USBD_FS_ProductStrDescriptor+0x34>)
 801235e:	4808      	ldr	r0, [pc, #32]	; (8012380 <USBD_FS_ProductStrDescriptor+0x38>)
 8012360:	f7fd fc3b 	bl	800fbda <USBD_GetString>
 8012364:	e004      	b.n	8012370 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012366:	683a      	ldr	r2, [r7, #0]
 8012368:	4904      	ldr	r1, [pc, #16]	; (801237c <USBD_FS_ProductStrDescriptor+0x34>)
 801236a:	4805      	ldr	r0, [pc, #20]	; (8012380 <USBD_FS_ProductStrDescriptor+0x38>)
 801236c:	f7fd fc35 	bl	800fbda <USBD_GetString>
  }
  return USBD_StrDesc;
 8012370:	4b02      	ldr	r3, [pc, #8]	; (801237c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012372:	4618      	mov	r0, r3
 8012374:	3708      	adds	r7, #8
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	20002d68 	.word	0x20002d68
 8012380:	0801867c 	.word	0x0801867c

08012384 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b082      	sub	sp, #8
 8012388:	af00      	add	r7, sp, #0
 801238a:	4603      	mov	r3, r0
 801238c:	6039      	str	r1, [r7, #0]
 801238e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012390:	683a      	ldr	r2, [r7, #0]
 8012392:	4904      	ldr	r1, [pc, #16]	; (80123a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012394:	4804      	ldr	r0, [pc, #16]	; (80123a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012396:	f7fd fc20 	bl	800fbda <USBD_GetString>
  return USBD_StrDesc;
 801239a:	4b02      	ldr	r3, [pc, #8]	; (80123a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801239c:	4618      	mov	r0, r3
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}
 80123a4:	20002d68 	.word	0x20002d68
 80123a8:	08018694 	.word	0x08018694

080123ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	4603      	mov	r3, r0
 80123b4:	6039      	str	r1, [r7, #0]
 80123b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	221a      	movs	r2, #26
 80123bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80123be:	f000 f843 	bl	8012448 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80123c2:	4b02      	ldr	r3, [pc, #8]	; (80123cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3708      	adds	r7, #8
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}
 80123cc:	20000180 	.word	0x20000180

080123d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	4603      	mov	r3, r0
 80123d8:	6039      	str	r1, [r7, #0]
 80123da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80123dc:	79fb      	ldrb	r3, [r7, #7]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d105      	bne.n	80123ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80123e2:	683a      	ldr	r2, [r7, #0]
 80123e4:	4907      	ldr	r1, [pc, #28]	; (8012404 <USBD_FS_ConfigStrDescriptor+0x34>)
 80123e6:	4808      	ldr	r0, [pc, #32]	; (8012408 <USBD_FS_ConfigStrDescriptor+0x38>)
 80123e8:	f7fd fbf7 	bl	800fbda <USBD_GetString>
 80123ec:	e004      	b.n	80123f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80123ee:	683a      	ldr	r2, [r7, #0]
 80123f0:	4904      	ldr	r1, [pc, #16]	; (8012404 <USBD_FS_ConfigStrDescriptor+0x34>)
 80123f2:	4805      	ldr	r0, [pc, #20]	; (8012408 <USBD_FS_ConfigStrDescriptor+0x38>)
 80123f4:	f7fd fbf1 	bl	800fbda <USBD_GetString>
  }
  return USBD_StrDesc;
 80123f8:	4b02      	ldr	r3, [pc, #8]	; (8012404 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3708      	adds	r7, #8
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}
 8012402:	bf00      	nop
 8012404:	20002d68 	.word	0x20002d68
 8012408:	080186a8 	.word	0x080186a8

0801240c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b082      	sub	sp, #8
 8012410:	af00      	add	r7, sp, #0
 8012412:	4603      	mov	r3, r0
 8012414:	6039      	str	r1, [r7, #0]
 8012416:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012418:	79fb      	ldrb	r3, [r7, #7]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d105      	bne.n	801242a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801241e:	683a      	ldr	r2, [r7, #0]
 8012420:	4907      	ldr	r1, [pc, #28]	; (8012440 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012422:	4808      	ldr	r0, [pc, #32]	; (8012444 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012424:	f7fd fbd9 	bl	800fbda <USBD_GetString>
 8012428:	e004      	b.n	8012434 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801242a:	683a      	ldr	r2, [r7, #0]
 801242c:	4904      	ldr	r1, [pc, #16]	; (8012440 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801242e:	4805      	ldr	r0, [pc, #20]	; (8012444 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012430:	f7fd fbd3 	bl	800fbda <USBD_GetString>
  }
  return USBD_StrDesc;
 8012434:	4b02      	ldr	r3, [pc, #8]	; (8012440 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012436:	4618      	mov	r0, r3
 8012438:	3708      	adds	r7, #8
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}
 801243e:	bf00      	nop
 8012440:	20002d68 	.word	0x20002d68
 8012444:	080186b4 	.word	0x080186b4

08012448 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b084      	sub	sp, #16
 801244c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801244e:	4b0f      	ldr	r3, [pc, #60]	; (801248c <Get_SerialNum+0x44>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012454:	4b0e      	ldr	r3, [pc, #56]	; (8012490 <Get_SerialNum+0x48>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801245a:	4b0e      	ldr	r3, [pc, #56]	; (8012494 <Get_SerialNum+0x4c>)
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012460:	68fa      	ldr	r2, [r7, #12]
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	4413      	add	r3, r2
 8012466:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d009      	beq.n	8012482 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801246e:	2208      	movs	r2, #8
 8012470:	4909      	ldr	r1, [pc, #36]	; (8012498 <Get_SerialNum+0x50>)
 8012472:	68f8      	ldr	r0, [r7, #12]
 8012474:	f000 f814 	bl	80124a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012478:	2204      	movs	r2, #4
 801247a:	4908      	ldr	r1, [pc, #32]	; (801249c <Get_SerialNum+0x54>)
 801247c:	68b8      	ldr	r0, [r7, #8]
 801247e:	f000 f80f 	bl	80124a0 <IntToUnicode>
  }
}
 8012482:	bf00      	nop
 8012484:	3710      	adds	r7, #16
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}
 801248a:	bf00      	nop
 801248c:	1fff7a10 	.word	0x1fff7a10
 8012490:	1fff7a14 	.word	0x1fff7a14
 8012494:	1fff7a18 	.word	0x1fff7a18
 8012498:	20000182 	.word	0x20000182
 801249c:	20000192 	.word	0x20000192

080124a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80124a0:	b480      	push	{r7}
 80124a2:	b087      	sub	sp, #28
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	60f8      	str	r0, [r7, #12]
 80124a8:	60b9      	str	r1, [r7, #8]
 80124aa:	4613      	mov	r3, r2
 80124ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80124ae:	2300      	movs	r3, #0
 80124b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80124b2:	2300      	movs	r3, #0
 80124b4:	75fb      	strb	r3, [r7, #23]
 80124b6:	e027      	b.n	8012508 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	0f1b      	lsrs	r3, r3, #28
 80124bc:	2b09      	cmp	r3, #9
 80124be:	d80b      	bhi.n	80124d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	0f1b      	lsrs	r3, r3, #28
 80124c4:	b2da      	uxtb	r2, r3
 80124c6:	7dfb      	ldrb	r3, [r7, #23]
 80124c8:	005b      	lsls	r3, r3, #1
 80124ca:	4619      	mov	r1, r3
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	440b      	add	r3, r1
 80124d0:	3230      	adds	r2, #48	; 0x30
 80124d2:	b2d2      	uxtb	r2, r2
 80124d4:	701a      	strb	r2, [r3, #0]
 80124d6:	e00a      	b.n	80124ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	0f1b      	lsrs	r3, r3, #28
 80124dc:	b2da      	uxtb	r2, r3
 80124de:	7dfb      	ldrb	r3, [r7, #23]
 80124e0:	005b      	lsls	r3, r3, #1
 80124e2:	4619      	mov	r1, r3
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	440b      	add	r3, r1
 80124e8:	3237      	adds	r2, #55	; 0x37
 80124ea:	b2d2      	uxtb	r2, r2
 80124ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	011b      	lsls	r3, r3, #4
 80124f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80124f4:	7dfb      	ldrb	r3, [r7, #23]
 80124f6:	005b      	lsls	r3, r3, #1
 80124f8:	3301      	adds	r3, #1
 80124fa:	68ba      	ldr	r2, [r7, #8]
 80124fc:	4413      	add	r3, r2
 80124fe:	2200      	movs	r2, #0
 8012500:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012502:	7dfb      	ldrb	r3, [r7, #23]
 8012504:	3301      	adds	r3, #1
 8012506:	75fb      	strb	r3, [r7, #23]
 8012508:	7dfa      	ldrb	r2, [r7, #23]
 801250a:	79fb      	ldrb	r3, [r7, #7]
 801250c:	429a      	cmp	r2, r3
 801250e:	d3d3      	bcc.n	80124b8 <IntToUnicode+0x18>
  }
}
 8012510:	bf00      	nop
 8012512:	bf00      	nop
 8012514:	371c      	adds	r7, #28
 8012516:	46bd      	mov	sp, r7
 8012518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251c:	4770      	bx	lr
	...

08012520 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b08a      	sub	sp, #40	; 0x28
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012528:	f107 0314 	add.w	r3, r7, #20
 801252c:	2200      	movs	r2, #0
 801252e:	601a      	str	r2, [r3, #0]
 8012530:	605a      	str	r2, [r3, #4]
 8012532:	609a      	str	r2, [r3, #8]
 8012534:	60da      	str	r2, [r3, #12]
 8012536:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012540:	d13a      	bne.n	80125b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012542:	2300      	movs	r3, #0
 8012544:	613b      	str	r3, [r7, #16]
 8012546:	4b1e      	ldr	r3, [pc, #120]	; (80125c0 <HAL_PCD_MspInit+0xa0>)
 8012548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801254a:	4a1d      	ldr	r2, [pc, #116]	; (80125c0 <HAL_PCD_MspInit+0xa0>)
 801254c:	f043 0301 	orr.w	r3, r3, #1
 8012550:	6313      	str	r3, [r2, #48]	; 0x30
 8012552:	4b1b      	ldr	r3, [pc, #108]	; (80125c0 <HAL_PCD_MspInit+0xa0>)
 8012554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012556:	f003 0301 	and.w	r3, r3, #1
 801255a:	613b      	str	r3, [r7, #16]
 801255c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801255e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012564:	2302      	movs	r3, #2
 8012566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012568:	2300      	movs	r3, #0
 801256a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801256c:	2303      	movs	r3, #3
 801256e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012570:	230a      	movs	r3, #10
 8012572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012574:	f107 0314 	add.w	r3, r7, #20
 8012578:	4619      	mov	r1, r3
 801257a:	4812      	ldr	r0, [pc, #72]	; (80125c4 <HAL_PCD_MspInit+0xa4>)
 801257c:	f7f4 fe8e 	bl	800729c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012580:	4b0f      	ldr	r3, [pc, #60]	; (80125c0 <HAL_PCD_MspInit+0xa0>)
 8012582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012584:	4a0e      	ldr	r2, [pc, #56]	; (80125c0 <HAL_PCD_MspInit+0xa0>)
 8012586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801258a:	6353      	str	r3, [r2, #52]	; 0x34
 801258c:	2300      	movs	r3, #0
 801258e:	60fb      	str	r3, [r7, #12]
 8012590:	4b0b      	ldr	r3, [pc, #44]	; (80125c0 <HAL_PCD_MspInit+0xa0>)
 8012592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012594:	4a0a      	ldr	r2, [pc, #40]	; (80125c0 <HAL_PCD_MspInit+0xa0>)
 8012596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801259a:	6453      	str	r3, [r2, #68]	; 0x44
 801259c:	4b08      	ldr	r3, [pc, #32]	; (80125c0 <HAL_PCD_MspInit+0xa0>)
 801259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80125a4:	60fb      	str	r3, [r7, #12]
 80125a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80125a8:	2200      	movs	r2, #0
 80125aa:	2100      	movs	r1, #0
 80125ac:	2043      	movs	r0, #67	; 0x43
 80125ae:	f7f4 fa3c 	bl	8006a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80125b2:	2043      	movs	r0, #67	; 0x43
 80125b4:	f7f4 fa55 	bl	8006a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80125b8:	bf00      	nop
 80125ba:	3728      	adds	r7, #40	; 0x28
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}
 80125c0:	40023800 	.word	0x40023800
 80125c4:	40020000 	.word	0x40020000

080125c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b082      	sub	sp, #8
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80125dc:	4619      	mov	r1, r3
 80125de:	4610      	mov	r0, r2
 80125e0:	f7fc fb14 	bl	800ec0c <USBD_LL_SetupStage>
}
 80125e4:	bf00      	nop
 80125e6:	3708      	adds	r7, #8
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}

080125ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	460b      	mov	r3, r1
 80125f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80125fe:	78fa      	ldrb	r2, [r7, #3]
 8012600:	6879      	ldr	r1, [r7, #4]
 8012602:	4613      	mov	r3, r2
 8012604:	00db      	lsls	r3, r3, #3
 8012606:	1a9b      	subs	r3, r3, r2
 8012608:	009b      	lsls	r3, r3, #2
 801260a:	440b      	add	r3, r1
 801260c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8012610:	681a      	ldr	r2, [r3, #0]
 8012612:	78fb      	ldrb	r3, [r7, #3]
 8012614:	4619      	mov	r1, r3
 8012616:	f7fc fb4e 	bl	800ecb6 <USBD_LL_DataOutStage>
}
 801261a:	bf00      	nop
 801261c:	3708      	adds	r7, #8
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}

08012622 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012622:	b580      	push	{r7, lr}
 8012624:	b082      	sub	sp, #8
 8012626:	af00      	add	r7, sp, #0
 8012628:	6078      	str	r0, [r7, #4]
 801262a:	460b      	mov	r3, r1
 801262c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012634:	78fa      	ldrb	r2, [r7, #3]
 8012636:	6879      	ldr	r1, [r7, #4]
 8012638:	4613      	mov	r3, r2
 801263a:	00db      	lsls	r3, r3, #3
 801263c:	1a9b      	subs	r3, r3, r2
 801263e:	009b      	lsls	r3, r3, #2
 8012640:	440b      	add	r3, r1
 8012642:	3348      	adds	r3, #72	; 0x48
 8012644:	681a      	ldr	r2, [r3, #0]
 8012646:	78fb      	ldrb	r3, [r7, #3]
 8012648:	4619      	mov	r1, r3
 801264a:	f7fc fb97 	bl	800ed7c <USBD_LL_DataInStage>
}
 801264e:	bf00      	nop
 8012650:	3708      	adds	r7, #8
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}

08012656 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012656:	b580      	push	{r7, lr}
 8012658:	b082      	sub	sp, #8
 801265a:	af00      	add	r7, sp, #0
 801265c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012664:	4618      	mov	r0, r3
 8012666:	f7fc fcab 	bl	800efc0 <USBD_LL_SOF>
}
 801266a:	bf00      	nop
 801266c:	3708      	adds	r7, #8
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}

08012672 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012672:	b580      	push	{r7, lr}
 8012674:	b084      	sub	sp, #16
 8012676:	af00      	add	r7, sp, #0
 8012678:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801267a:	2301      	movs	r3, #1
 801267c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	68db      	ldr	r3, [r3, #12]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d102      	bne.n	801268c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012686:	2300      	movs	r3, #0
 8012688:	73fb      	strb	r3, [r7, #15]
 801268a:	e008      	b.n	801269e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	2b02      	cmp	r3, #2
 8012692:	d102      	bne.n	801269a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012694:	2301      	movs	r3, #1
 8012696:	73fb      	strb	r3, [r7, #15]
 8012698:	e001      	b.n	801269e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801269a:	f7f0 fc6f 	bl	8002f7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80126a4:	7bfa      	ldrb	r2, [r7, #15]
 80126a6:	4611      	mov	r1, r2
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7fc fc4b 	bl	800ef44 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7fc fbf7 	bl	800eea8 <USBD_LL_Reset>
}
 80126ba:	bf00      	nop
 80126bc:	3710      	adds	r7, #16
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
	...

080126c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b082      	sub	sp, #8
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7fc fc46 	bl	800ef64 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	687a      	ldr	r2, [r7, #4]
 80126e4:	6812      	ldr	r2, [r2, #0]
 80126e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80126ea:	f043 0301 	orr.w	r3, r3, #1
 80126ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6a1b      	ldr	r3, [r3, #32]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d005      	beq.n	8012704 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80126f8:	4b04      	ldr	r3, [pc, #16]	; (801270c <HAL_PCD_SuspendCallback+0x48>)
 80126fa:	691b      	ldr	r3, [r3, #16]
 80126fc:	4a03      	ldr	r2, [pc, #12]	; (801270c <HAL_PCD_SuspendCallback+0x48>)
 80126fe:	f043 0306 	orr.w	r3, r3, #6
 8012702:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012704:	bf00      	nop
 8012706:	3708      	adds	r7, #8
 8012708:	46bd      	mov	sp, r7
 801270a:	bd80      	pop	{r7, pc}
 801270c:	e000ed00 	.word	0xe000ed00

08012710 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801271e:	4618      	mov	r0, r3
 8012720:	f7fc fc36 	bl	800ef90 <USBD_LL_Resume>
}
 8012724:	bf00      	nop
 8012726:	3708      	adds	r7, #8
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b082      	sub	sp, #8
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	460b      	mov	r3, r1
 8012736:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801273e:	78fa      	ldrb	r2, [r7, #3]
 8012740:	4611      	mov	r1, r2
 8012742:	4618      	mov	r0, r3
 8012744:	f7fc fc84 	bl	800f050 <USBD_LL_IsoOUTIncomplete>
}
 8012748:	bf00      	nop
 801274a:	3708      	adds	r7, #8
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b082      	sub	sp, #8
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	460b      	mov	r3, r1
 801275a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012762:	78fa      	ldrb	r2, [r7, #3]
 8012764:	4611      	mov	r1, r2
 8012766:	4618      	mov	r0, r3
 8012768:	f7fc fc4c 	bl	800f004 <USBD_LL_IsoINIncomplete>
}
 801276c:	bf00      	nop
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}

08012774 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012782:	4618      	mov	r0, r3
 8012784:	f7fc fc8a 	bl	800f09c <USBD_LL_DevConnected>
}
 8012788:	bf00      	nop
 801278a:	3708      	adds	r7, #8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}

08012790 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b082      	sub	sp, #8
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801279e:	4618      	mov	r0, r3
 80127a0:	f7fc fc87 	bl	800f0b2 <USBD_LL_DevDisconnected>
}
 80127a4:	bf00      	nop
 80127a6:	3708      	adds	r7, #8
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}

080127ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	781b      	ldrb	r3, [r3, #0]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d13c      	bne.n	8012836 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80127bc:	4a20      	ldr	r2, [pc, #128]	; (8012840 <USBD_LL_Init+0x94>)
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	4a1e      	ldr	r2, [pc, #120]	; (8012840 <USBD_LL_Init+0x94>)
 80127c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80127cc:	4b1c      	ldr	r3, [pc, #112]	; (8012840 <USBD_LL_Init+0x94>)
 80127ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80127d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80127d4:	4b1a      	ldr	r3, [pc, #104]	; (8012840 <USBD_LL_Init+0x94>)
 80127d6:	2204      	movs	r2, #4
 80127d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80127da:	4b19      	ldr	r3, [pc, #100]	; (8012840 <USBD_LL_Init+0x94>)
 80127dc:	2202      	movs	r2, #2
 80127de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80127e0:	4b17      	ldr	r3, [pc, #92]	; (8012840 <USBD_LL_Init+0x94>)
 80127e2:	2200      	movs	r2, #0
 80127e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80127e6:	4b16      	ldr	r3, [pc, #88]	; (8012840 <USBD_LL_Init+0x94>)
 80127e8:	2202      	movs	r2, #2
 80127ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80127ec:	4b14      	ldr	r3, [pc, #80]	; (8012840 <USBD_LL_Init+0x94>)
 80127ee:	2200      	movs	r2, #0
 80127f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80127f2:	4b13      	ldr	r3, [pc, #76]	; (8012840 <USBD_LL_Init+0x94>)
 80127f4:	2200      	movs	r2, #0
 80127f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80127f8:	4b11      	ldr	r3, [pc, #68]	; (8012840 <USBD_LL_Init+0x94>)
 80127fa:	2200      	movs	r2, #0
 80127fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80127fe:	4b10      	ldr	r3, [pc, #64]	; (8012840 <USBD_LL_Init+0x94>)
 8012800:	2200      	movs	r2, #0
 8012802:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012804:	4b0e      	ldr	r3, [pc, #56]	; (8012840 <USBD_LL_Init+0x94>)
 8012806:	2200      	movs	r2, #0
 8012808:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801280a:	480d      	ldr	r0, [pc, #52]	; (8012840 <USBD_LL_Init+0x94>)
 801280c:	f7f5 fe91 	bl	8008532 <HAL_PCD_Init>
 8012810:	4603      	mov	r3, r0
 8012812:	2b00      	cmp	r3, #0
 8012814:	d001      	beq.n	801281a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012816:	f7f0 fbb1 	bl	8002f7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801281a:	2180      	movs	r1, #128	; 0x80
 801281c:	4808      	ldr	r0, [pc, #32]	; (8012840 <USBD_LL_Init+0x94>)
 801281e:	f7f6 ffee 	bl	80097fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012822:	2240      	movs	r2, #64	; 0x40
 8012824:	2100      	movs	r1, #0
 8012826:	4806      	ldr	r0, [pc, #24]	; (8012840 <USBD_LL_Init+0x94>)
 8012828:	f7f6 ffa2 	bl	8009770 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801282c:	2280      	movs	r2, #128	; 0x80
 801282e:	2101      	movs	r1, #1
 8012830:	4803      	ldr	r0, [pc, #12]	; (8012840 <USBD_LL_Init+0x94>)
 8012832:	f7f6 ff9d 	bl	8009770 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012836:	2300      	movs	r3, #0
}
 8012838:	4618      	mov	r0, r3
 801283a:	3708      	adds	r7, #8
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}
 8012840:	20002f68 	.word	0x20002f68

08012844 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b084      	sub	sp, #16
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801284c:	2300      	movs	r3, #0
 801284e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012850:	2300      	movs	r3, #0
 8012852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801285a:	4618      	mov	r0, r3
 801285c:	f7f5 ff86 	bl	800876c <HAL_PCD_Start>
 8012860:	4603      	mov	r3, r0
 8012862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012864:	7bfb      	ldrb	r3, [r7, #15]
 8012866:	4618      	mov	r0, r3
 8012868:	f000 f942 	bl	8012af0 <USBD_Get_USB_Status>
 801286c:	4603      	mov	r3, r0
 801286e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012870:	7bbb      	ldrb	r3, [r7, #14]
}
 8012872:	4618      	mov	r0, r3
 8012874:	3710      	adds	r7, #16
 8012876:	46bd      	mov	sp, r7
 8012878:	bd80      	pop	{r7, pc}

0801287a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801287a:	b580      	push	{r7, lr}
 801287c:	b084      	sub	sp, #16
 801287e:	af00      	add	r7, sp, #0
 8012880:	6078      	str	r0, [r7, #4]
 8012882:	4608      	mov	r0, r1
 8012884:	4611      	mov	r1, r2
 8012886:	461a      	mov	r2, r3
 8012888:	4603      	mov	r3, r0
 801288a:	70fb      	strb	r3, [r7, #3]
 801288c:	460b      	mov	r3, r1
 801288e:	70bb      	strb	r3, [r7, #2]
 8012890:	4613      	mov	r3, r2
 8012892:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012894:	2300      	movs	r3, #0
 8012896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012898:	2300      	movs	r3, #0
 801289a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80128a2:	78bb      	ldrb	r3, [r7, #2]
 80128a4:	883a      	ldrh	r2, [r7, #0]
 80128a6:	78f9      	ldrb	r1, [r7, #3]
 80128a8:	f7f6 fb6a 	bl	8008f80 <HAL_PCD_EP_Open>
 80128ac:	4603      	mov	r3, r0
 80128ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128b0:	7bfb      	ldrb	r3, [r7, #15]
 80128b2:	4618      	mov	r0, r3
 80128b4:	f000 f91c 	bl	8012af0 <USBD_Get_USB_Status>
 80128b8:	4603      	mov	r3, r0
 80128ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80128be:	4618      	mov	r0, r3
 80128c0:	3710      	adds	r7, #16
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}

080128c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80128c6:	b580      	push	{r7, lr}
 80128c8:	b084      	sub	sp, #16
 80128ca:	af00      	add	r7, sp, #0
 80128cc:	6078      	str	r0, [r7, #4]
 80128ce:	460b      	mov	r3, r1
 80128d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128d2:	2300      	movs	r3, #0
 80128d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128d6:	2300      	movs	r3, #0
 80128d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80128e0:	78fa      	ldrb	r2, [r7, #3]
 80128e2:	4611      	mov	r1, r2
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7f6 fbb3 	bl	8009050 <HAL_PCD_EP_Close>
 80128ea:	4603      	mov	r3, r0
 80128ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128ee:	7bfb      	ldrb	r3, [r7, #15]
 80128f0:	4618      	mov	r0, r3
 80128f2:	f000 f8fd 	bl	8012af0 <USBD_Get_USB_Status>
 80128f6:	4603      	mov	r3, r0
 80128f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3710      	adds	r7, #16
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}

08012904 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b084      	sub	sp, #16
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	460b      	mov	r3, r1
 801290e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012910:	2300      	movs	r3, #0
 8012912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012914:	2300      	movs	r3, #0
 8012916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801291e:	78fa      	ldrb	r2, [r7, #3]
 8012920:	4611      	mov	r1, r2
 8012922:	4618      	mov	r0, r3
 8012924:	f7f6 fc8b 	bl	800923e <HAL_PCD_EP_SetStall>
 8012928:	4603      	mov	r3, r0
 801292a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801292c:	7bfb      	ldrb	r3, [r7, #15]
 801292e:	4618      	mov	r0, r3
 8012930:	f000 f8de 	bl	8012af0 <USBD_Get_USB_Status>
 8012934:	4603      	mov	r3, r0
 8012936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012938:	7bbb      	ldrb	r3, [r7, #14]
}
 801293a:	4618      	mov	r0, r3
 801293c:	3710      	adds	r7, #16
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}

08012942 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012942:	b580      	push	{r7, lr}
 8012944:	b084      	sub	sp, #16
 8012946:	af00      	add	r7, sp, #0
 8012948:	6078      	str	r0, [r7, #4]
 801294a:	460b      	mov	r3, r1
 801294c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801294e:	2300      	movs	r3, #0
 8012950:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012952:	2300      	movs	r3, #0
 8012954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801295c:	78fa      	ldrb	r2, [r7, #3]
 801295e:	4611      	mov	r1, r2
 8012960:	4618      	mov	r0, r3
 8012962:	f7f6 fcd0 	bl	8009306 <HAL_PCD_EP_ClrStall>
 8012966:	4603      	mov	r3, r0
 8012968:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801296a:	7bfb      	ldrb	r3, [r7, #15]
 801296c:	4618      	mov	r0, r3
 801296e:	f000 f8bf 	bl	8012af0 <USBD_Get_USB_Status>
 8012972:	4603      	mov	r3, r0
 8012974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012976:	7bbb      	ldrb	r3, [r7, #14]
}
 8012978:	4618      	mov	r0, r3
 801297a:	3710      	adds	r7, #16
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}

08012980 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012980:	b480      	push	{r7}
 8012982:	b085      	sub	sp, #20
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	460b      	mov	r3, r1
 801298a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012992:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012998:	2b00      	cmp	r3, #0
 801299a:	da0b      	bge.n	80129b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801299c:	78fb      	ldrb	r3, [r7, #3]
 801299e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80129a2:	68f9      	ldr	r1, [r7, #12]
 80129a4:	4613      	mov	r3, r2
 80129a6:	00db      	lsls	r3, r3, #3
 80129a8:	1a9b      	subs	r3, r3, r2
 80129aa:	009b      	lsls	r3, r3, #2
 80129ac:	440b      	add	r3, r1
 80129ae:	333e      	adds	r3, #62	; 0x3e
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	e00b      	b.n	80129cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80129b4:	78fb      	ldrb	r3, [r7, #3]
 80129b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80129ba:	68f9      	ldr	r1, [r7, #12]
 80129bc:	4613      	mov	r3, r2
 80129be:	00db      	lsls	r3, r3, #3
 80129c0:	1a9b      	subs	r3, r3, r2
 80129c2:	009b      	lsls	r3, r3, #2
 80129c4:	440b      	add	r3, r1
 80129c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80129ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3714      	adds	r7, #20
 80129d0:	46bd      	mov	sp, r7
 80129d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d6:	4770      	bx	lr

080129d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b084      	sub	sp, #16
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	460b      	mov	r3, r1
 80129e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129e4:	2300      	movs	r3, #0
 80129e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129e8:	2300      	movs	r3, #0
 80129ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80129f2:	78fa      	ldrb	r2, [r7, #3]
 80129f4:	4611      	mov	r1, r2
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7f6 fa9d 	bl	8008f36 <HAL_PCD_SetAddress>
 80129fc:	4603      	mov	r3, r0
 80129fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a00:	7bfb      	ldrb	r3, [r7, #15]
 8012a02:	4618      	mov	r0, r3
 8012a04:	f000 f874 	bl	8012af0 <USBD_Get_USB_Status>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3710      	adds	r7, #16
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}

08012a16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012a16:	b580      	push	{r7, lr}
 8012a18:	b086      	sub	sp, #24
 8012a1a:	af00      	add	r7, sp, #0
 8012a1c:	60f8      	str	r0, [r7, #12]
 8012a1e:	607a      	str	r2, [r7, #4]
 8012a20:	603b      	str	r3, [r7, #0]
 8012a22:	460b      	mov	r3, r1
 8012a24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a26:	2300      	movs	r3, #0
 8012a28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012a34:	7af9      	ldrb	r1, [r7, #11]
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	687a      	ldr	r2, [r7, #4]
 8012a3a:	f7f6 fbb6 	bl	80091aa <HAL_PCD_EP_Transmit>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a42:	7dfb      	ldrb	r3, [r7, #23]
 8012a44:	4618      	mov	r0, r3
 8012a46:	f000 f853 	bl	8012af0 <USBD_Get_USB_Status>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012a4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	3718      	adds	r7, #24
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}

08012a58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b086      	sub	sp, #24
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	60f8      	str	r0, [r7, #12]
 8012a60:	607a      	str	r2, [r7, #4]
 8012a62:	603b      	str	r3, [r7, #0]
 8012a64:	460b      	mov	r3, r1
 8012a66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012a76:	7af9      	ldrb	r1, [r7, #11]
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	687a      	ldr	r2, [r7, #4]
 8012a7c:	f7f6 fb32 	bl	80090e4 <HAL_PCD_EP_Receive>
 8012a80:	4603      	mov	r3, r0
 8012a82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a84:	7dfb      	ldrb	r3, [r7, #23]
 8012a86:	4618      	mov	r0, r3
 8012a88:	f000 f832 	bl	8012af0 <USBD_Get_USB_Status>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012a90:	7dbb      	ldrb	r3, [r7, #22]
}
 8012a92:	4618      	mov	r0, r3
 8012a94:	3718      	adds	r7, #24
 8012a96:	46bd      	mov	sp, r7
 8012a98:	bd80      	pop	{r7, pc}

08012a9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a9a:	b580      	push	{r7, lr}
 8012a9c:	b082      	sub	sp, #8
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	6078      	str	r0, [r7, #4]
 8012aa2:	460b      	mov	r3, r1
 8012aa4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012aac:	78fa      	ldrb	r2, [r7, #3]
 8012aae:	4611      	mov	r1, r2
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7f6 fb62 	bl	800917a <HAL_PCD_EP_GetRxCount>
 8012ab6:	4603      	mov	r3, r0
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3708      	adds	r7, #8
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012ac0:	b480      	push	{r7}
 8012ac2:	b083      	sub	sp, #12
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012ac8:	4b03      	ldr	r3, [pc, #12]	; (8012ad8 <USBD_static_malloc+0x18>)
}
 8012aca:	4618      	mov	r0, r3
 8012acc:	370c      	adds	r7, #12
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad4:	4770      	bx	lr
 8012ad6:	bf00      	nop
 8012ad8:	20000684 	.word	0x20000684

08012adc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012adc:	b480      	push	{r7}
 8012ade:	b083      	sub	sp, #12
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]

}
 8012ae4:	bf00      	nop
 8012ae6:	370c      	adds	r7, #12
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aee:	4770      	bx	lr

08012af0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012af0:	b480      	push	{r7}
 8012af2:	b085      	sub	sp, #20
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	4603      	mov	r3, r0
 8012af8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012afa:	2300      	movs	r3, #0
 8012afc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012afe:	79fb      	ldrb	r3, [r7, #7]
 8012b00:	2b03      	cmp	r3, #3
 8012b02:	d817      	bhi.n	8012b34 <USBD_Get_USB_Status+0x44>
 8012b04:	a201      	add	r2, pc, #4	; (adr r2, 8012b0c <USBD_Get_USB_Status+0x1c>)
 8012b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b0a:	bf00      	nop
 8012b0c:	08012b1d 	.word	0x08012b1d
 8012b10:	08012b23 	.word	0x08012b23
 8012b14:	08012b29 	.word	0x08012b29
 8012b18:	08012b2f 	.word	0x08012b2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8012b20:	e00b      	b.n	8012b3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012b22:	2303      	movs	r3, #3
 8012b24:	73fb      	strb	r3, [r7, #15]
    break;
 8012b26:	e008      	b.n	8012b3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012b28:	2301      	movs	r3, #1
 8012b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8012b2c:	e005      	b.n	8012b3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012b2e:	2303      	movs	r3, #3
 8012b30:	73fb      	strb	r3, [r7, #15]
    break;
 8012b32:	e002      	b.n	8012b3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012b34:	2303      	movs	r3, #3
 8012b36:	73fb      	strb	r3, [r7, #15]
    break;
 8012b38:	bf00      	nop
  }
  return usb_status;
 8012b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3714      	adds	r7, #20
 8012b40:	46bd      	mov	sp, r7
 8012b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b46:	4770      	bx	lr

08012b48 <atof>:
 8012b48:	2100      	movs	r1, #0
 8012b4a:	f001 bd89 	b.w	8014660 <strtod>
	...

08012b50 <__errno>:
 8012b50:	4b01      	ldr	r3, [pc, #4]	; (8012b58 <__errno+0x8>)
 8012b52:	6818      	ldr	r0, [r3, #0]
 8012b54:	4770      	bx	lr
 8012b56:	bf00      	nop
 8012b58:	2000019c 	.word	0x2000019c

08012b5c <__libc_init_array>:
 8012b5c:	b570      	push	{r4, r5, r6, lr}
 8012b5e:	4d0d      	ldr	r5, [pc, #52]	; (8012b94 <__libc_init_array+0x38>)
 8012b60:	4c0d      	ldr	r4, [pc, #52]	; (8012b98 <__libc_init_array+0x3c>)
 8012b62:	1b64      	subs	r4, r4, r5
 8012b64:	10a4      	asrs	r4, r4, #2
 8012b66:	2600      	movs	r6, #0
 8012b68:	42a6      	cmp	r6, r4
 8012b6a:	d109      	bne.n	8012b80 <__libc_init_array+0x24>
 8012b6c:	4d0b      	ldr	r5, [pc, #44]	; (8012b9c <__libc_init_array+0x40>)
 8012b6e:	4c0c      	ldr	r4, [pc, #48]	; (8012ba0 <__libc_init_array+0x44>)
 8012b70:	f005 fc12 	bl	8018398 <_init>
 8012b74:	1b64      	subs	r4, r4, r5
 8012b76:	10a4      	asrs	r4, r4, #2
 8012b78:	2600      	movs	r6, #0
 8012b7a:	42a6      	cmp	r6, r4
 8012b7c:	d105      	bne.n	8012b8a <__libc_init_array+0x2e>
 8012b7e:	bd70      	pop	{r4, r5, r6, pc}
 8012b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b84:	4798      	blx	r3
 8012b86:	3601      	adds	r6, #1
 8012b88:	e7ee      	b.n	8012b68 <__libc_init_array+0xc>
 8012b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b8e:	4798      	blx	r3
 8012b90:	3601      	adds	r6, #1
 8012b92:	e7f2      	b.n	8012b7a <__libc_init_array+0x1e>
 8012b94:	0801a5b0 	.word	0x0801a5b0
 8012b98:	0801a5b0 	.word	0x0801a5b0
 8012b9c:	0801a5b0 	.word	0x0801a5b0
 8012ba0:	0801a5b4 	.word	0x0801a5b4

08012ba4 <memset>:
 8012ba4:	4402      	add	r2, r0
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	d100      	bne.n	8012bae <memset+0xa>
 8012bac:	4770      	bx	lr
 8012bae:	f803 1b01 	strb.w	r1, [r3], #1
 8012bb2:	e7f9      	b.n	8012ba8 <memset+0x4>

08012bb4 <__cvt>:
 8012bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012bb8:	ec55 4b10 	vmov	r4, r5, d0
 8012bbc:	2d00      	cmp	r5, #0
 8012bbe:	460e      	mov	r6, r1
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	462b      	mov	r3, r5
 8012bc4:	bfbb      	ittet	lt
 8012bc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012bca:	461d      	movlt	r5, r3
 8012bcc:	2300      	movge	r3, #0
 8012bce:	232d      	movlt	r3, #45	; 0x2d
 8012bd0:	700b      	strb	r3, [r1, #0]
 8012bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012bd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012bd8:	4691      	mov	r9, r2
 8012bda:	f023 0820 	bic.w	r8, r3, #32
 8012bde:	bfbc      	itt	lt
 8012be0:	4622      	movlt	r2, r4
 8012be2:	4614      	movlt	r4, r2
 8012be4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012be8:	d005      	beq.n	8012bf6 <__cvt+0x42>
 8012bea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012bee:	d100      	bne.n	8012bf2 <__cvt+0x3e>
 8012bf0:	3601      	adds	r6, #1
 8012bf2:	2102      	movs	r1, #2
 8012bf4:	e000      	b.n	8012bf8 <__cvt+0x44>
 8012bf6:	2103      	movs	r1, #3
 8012bf8:	ab03      	add	r3, sp, #12
 8012bfa:	9301      	str	r3, [sp, #4]
 8012bfc:	ab02      	add	r3, sp, #8
 8012bfe:	9300      	str	r3, [sp, #0]
 8012c00:	ec45 4b10 	vmov	d0, r4, r5
 8012c04:	4653      	mov	r3, sl
 8012c06:	4632      	mov	r2, r6
 8012c08:	f001 fe6a 	bl	80148e0 <_dtoa_r>
 8012c0c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012c10:	4607      	mov	r7, r0
 8012c12:	d102      	bne.n	8012c1a <__cvt+0x66>
 8012c14:	f019 0f01 	tst.w	r9, #1
 8012c18:	d022      	beq.n	8012c60 <__cvt+0xac>
 8012c1a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012c1e:	eb07 0906 	add.w	r9, r7, r6
 8012c22:	d110      	bne.n	8012c46 <__cvt+0x92>
 8012c24:	783b      	ldrb	r3, [r7, #0]
 8012c26:	2b30      	cmp	r3, #48	; 0x30
 8012c28:	d10a      	bne.n	8012c40 <__cvt+0x8c>
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	4620      	mov	r0, r4
 8012c30:	4629      	mov	r1, r5
 8012c32:	f7ed ff49 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c36:	b918      	cbnz	r0, 8012c40 <__cvt+0x8c>
 8012c38:	f1c6 0601 	rsb	r6, r6, #1
 8012c3c:	f8ca 6000 	str.w	r6, [sl]
 8012c40:	f8da 3000 	ldr.w	r3, [sl]
 8012c44:	4499      	add	r9, r3
 8012c46:	2200      	movs	r2, #0
 8012c48:	2300      	movs	r3, #0
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	4629      	mov	r1, r5
 8012c4e:	f7ed ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c52:	b108      	cbz	r0, 8012c58 <__cvt+0xa4>
 8012c54:	f8cd 900c 	str.w	r9, [sp, #12]
 8012c58:	2230      	movs	r2, #48	; 0x30
 8012c5a:	9b03      	ldr	r3, [sp, #12]
 8012c5c:	454b      	cmp	r3, r9
 8012c5e:	d307      	bcc.n	8012c70 <__cvt+0xbc>
 8012c60:	9b03      	ldr	r3, [sp, #12]
 8012c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c64:	1bdb      	subs	r3, r3, r7
 8012c66:	4638      	mov	r0, r7
 8012c68:	6013      	str	r3, [r2, #0]
 8012c6a:	b004      	add	sp, #16
 8012c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c70:	1c59      	adds	r1, r3, #1
 8012c72:	9103      	str	r1, [sp, #12]
 8012c74:	701a      	strb	r2, [r3, #0]
 8012c76:	e7f0      	b.n	8012c5a <__cvt+0xa6>

08012c78 <__exponent>:
 8012c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	2900      	cmp	r1, #0
 8012c7e:	bfb8      	it	lt
 8012c80:	4249      	neglt	r1, r1
 8012c82:	f803 2b02 	strb.w	r2, [r3], #2
 8012c86:	bfb4      	ite	lt
 8012c88:	222d      	movlt	r2, #45	; 0x2d
 8012c8a:	222b      	movge	r2, #43	; 0x2b
 8012c8c:	2909      	cmp	r1, #9
 8012c8e:	7042      	strb	r2, [r0, #1]
 8012c90:	dd2a      	ble.n	8012ce8 <__exponent+0x70>
 8012c92:	f10d 0407 	add.w	r4, sp, #7
 8012c96:	46a4      	mov	ip, r4
 8012c98:	270a      	movs	r7, #10
 8012c9a:	46a6      	mov	lr, r4
 8012c9c:	460a      	mov	r2, r1
 8012c9e:	fb91 f6f7 	sdiv	r6, r1, r7
 8012ca2:	fb07 1516 	mls	r5, r7, r6, r1
 8012ca6:	3530      	adds	r5, #48	; 0x30
 8012ca8:	2a63      	cmp	r2, #99	; 0x63
 8012caa:	f104 34ff 	add.w	r4, r4, #4294967295
 8012cae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012cb2:	4631      	mov	r1, r6
 8012cb4:	dcf1      	bgt.n	8012c9a <__exponent+0x22>
 8012cb6:	3130      	adds	r1, #48	; 0x30
 8012cb8:	f1ae 0502 	sub.w	r5, lr, #2
 8012cbc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012cc0:	1c44      	adds	r4, r0, #1
 8012cc2:	4629      	mov	r1, r5
 8012cc4:	4561      	cmp	r1, ip
 8012cc6:	d30a      	bcc.n	8012cde <__exponent+0x66>
 8012cc8:	f10d 0209 	add.w	r2, sp, #9
 8012ccc:	eba2 020e 	sub.w	r2, r2, lr
 8012cd0:	4565      	cmp	r5, ip
 8012cd2:	bf88      	it	hi
 8012cd4:	2200      	movhi	r2, #0
 8012cd6:	4413      	add	r3, r2
 8012cd8:	1a18      	subs	r0, r3, r0
 8012cda:	b003      	add	sp, #12
 8012cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ce2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012ce6:	e7ed      	b.n	8012cc4 <__exponent+0x4c>
 8012ce8:	2330      	movs	r3, #48	; 0x30
 8012cea:	3130      	adds	r1, #48	; 0x30
 8012cec:	7083      	strb	r3, [r0, #2]
 8012cee:	70c1      	strb	r1, [r0, #3]
 8012cf0:	1d03      	adds	r3, r0, #4
 8012cf2:	e7f1      	b.n	8012cd8 <__exponent+0x60>

08012cf4 <_printf_float>:
 8012cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cf8:	ed2d 8b02 	vpush	{d8}
 8012cfc:	b08d      	sub	sp, #52	; 0x34
 8012cfe:	460c      	mov	r4, r1
 8012d00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012d04:	4616      	mov	r6, r2
 8012d06:	461f      	mov	r7, r3
 8012d08:	4605      	mov	r5, r0
 8012d0a:	f003 f839 	bl	8015d80 <_localeconv_r>
 8012d0e:	f8d0 a000 	ldr.w	sl, [r0]
 8012d12:	4650      	mov	r0, sl
 8012d14:	f7ed fa5c 	bl	80001d0 <strlen>
 8012d18:	2300      	movs	r3, #0
 8012d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8012d1c:	6823      	ldr	r3, [r4, #0]
 8012d1e:	9305      	str	r3, [sp, #20]
 8012d20:	f8d8 3000 	ldr.w	r3, [r8]
 8012d24:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012d28:	3307      	adds	r3, #7
 8012d2a:	f023 0307 	bic.w	r3, r3, #7
 8012d2e:	f103 0208 	add.w	r2, r3, #8
 8012d32:	f8c8 2000 	str.w	r2, [r8]
 8012d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d3a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012d3e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012d42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012d46:	9307      	str	r3, [sp, #28]
 8012d48:	f8cd 8018 	str.w	r8, [sp, #24]
 8012d4c:	ee08 0a10 	vmov	s16, r0
 8012d50:	4b9f      	ldr	r3, [pc, #636]	; (8012fd0 <_printf_float+0x2dc>)
 8012d52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d56:	f04f 32ff 	mov.w	r2, #4294967295
 8012d5a:	f7ed fee7 	bl	8000b2c <__aeabi_dcmpun>
 8012d5e:	bb88      	cbnz	r0, 8012dc4 <_printf_float+0xd0>
 8012d60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d64:	4b9a      	ldr	r3, [pc, #616]	; (8012fd0 <_printf_float+0x2dc>)
 8012d66:	f04f 32ff 	mov.w	r2, #4294967295
 8012d6a:	f7ed fec1 	bl	8000af0 <__aeabi_dcmple>
 8012d6e:	bb48      	cbnz	r0, 8012dc4 <_printf_float+0xd0>
 8012d70:	2200      	movs	r2, #0
 8012d72:	2300      	movs	r3, #0
 8012d74:	4640      	mov	r0, r8
 8012d76:	4649      	mov	r1, r9
 8012d78:	f7ed feb0 	bl	8000adc <__aeabi_dcmplt>
 8012d7c:	b110      	cbz	r0, 8012d84 <_printf_float+0x90>
 8012d7e:	232d      	movs	r3, #45	; 0x2d
 8012d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d84:	4b93      	ldr	r3, [pc, #588]	; (8012fd4 <_printf_float+0x2e0>)
 8012d86:	4894      	ldr	r0, [pc, #592]	; (8012fd8 <_printf_float+0x2e4>)
 8012d88:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012d8c:	bf94      	ite	ls
 8012d8e:	4698      	movls	r8, r3
 8012d90:	4680      	movhi	r8, r0
 8012d92:	2303      	movs	r3, #3
 8012d94:	6123      	str	r3, [r4, #16]
 8012d96:	9b05      	ldr	r3, [sp, #20]
 8012d98:	f023 0204 	bic.w	r2, r3, #4
 8012d9c:	6022      	str	r2, [r4, #0]
 8012d9e:	f04f 0900 	mov.w	r9, #0
 8012da2:	9700      	str	r7, [sp, #0]
 8012da4:	4633      	mov	r3, r6
 8012da6:	aa0b      	add	r2, sp, #44	; 0x2c
 8012da8:	4621      	mov	r1, r4
 8012daa:	4628      	mov	r0, r5
 8012dac:	f000 f9d8 	bl	8013160 <_printf_common>
 8012db0:	3001      	adds	r0, #1
 8012db2:	f040 8090 	bne.w	8012ed6 <_printf_float+0x1e2>
 8012db6:	f04f 30ff 	mov.w	r0, #4294967295
 8012dba:	b00d      	add	sp, #52	; 0x34
 8012dbc:	ecbd 8b02 	vpop	{d8}
 8012dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dc4:	4642      	mov	r2, r8
 8012dc6:	464b      	mov	r3, r9
 8012dc8:	4640      	mov	r0, r8
 8012dca:	4649      	mov	r1, r9
 8012dcc:	f7ed feae 	bl	8000b2c <__aeabi_dcmpun>
 8012dd0:	b140      	cbz	r0, 8012de4 <_printf_float+0xf0>
 8012dd2:	464b      	mov	r3, r9
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	bfbc      	itt	lt
 8012dd8:	232d      	movlt	r3, #45	; 0x2d
 8012dda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012dde:	487f      	ldr	r0, [pc, #508]	; (8012fdc <_printf_float+0x2e8>)
 8012de0:	4b7f      	ldr	r3, [pc, #508]	; (8012fe0 <_printf_float+0x2ec>)
 8012de2:	e7d1      	b.n	8012d88 <_printf_float+0x94>
 8012de4:	6863      	ldr	r3, [r4, #4]
 8012de6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012dea:	9206      	str	r2, [sp, #24]
 8012dec:	1c5a      	adds	r2, r3, #1
 8012dee:	d13f      	bne.n	8012e70 <_printf_float+0x17c>
 8012df0:	2306      	movs	r3, #6
 8012df2:	6063      	str	r3, [r4, #4]
 8012df4:	9b05      	ldr	r3, [sp, #20]
 8012df6:	6861      	ldr	r1, [r4, #4]
 8012df8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	9303      	str	r3, [sp, #12]
 8012e00:	ab0a      	add	r3, sp, #40	; 0x28
 8012e02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012e06:	ab09      	add	r3, sp, #36	; 0x24
 8012e08:	ec49 8b10 	vmov	d0, r8, r9
 8012e0c:	9300      	str	r3, [sp, #0]
 8012e0e:	6022      	str	r2, [r4, #0]
 8012e10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012e14:	4628      	mov	r0, r5
 8012e16:	f7ff fecd 	bl	8012bb4 <__cvt>
 8012e1a:	9b06      	ldr	r3, [sp, #24]
 8012e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e1e:	2b47      	cmp	r3, #71	; 0x47
 8012e20:	4680      	mov	r8, r0
 8012e22:	d108      	bne.n	8012e36 <_printf_float+0x142>
 8012e24:	1cc8      	adds	r0, r1, #3
 8012e26:	db02      	blt.n	8012e2e <_printf_float+0x13a>
 8012e28:	6863      	ldr	r3, [r4, #4]
 8012e2a:	4299      	cmp	r1, r3
 8012e2c:	dd41      	ble.n	8012eb2 <_printf_float+0x1be>
 8012e2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8012e32:	fa5f fb8b 	uxtb.w	fp, fp
 8012e36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012e3a:	d820      	bhi.n	8012e7e <_printf_float+0x18a>
 8012e3c:	3901      	subs	r1, #1
 8012e3e:	465a      	mov	r2, fp
 8012e40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012e44:	9109      	str	r1, [sp, #36]	; 0x24
 8012e46:	f7ff ff17 	bl	8012c78 <__exponent>
 8012e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e4c:	1813      	adds	r3, r2, r0
 8012e4e:	2a01      	cmp	r2, #1
 8012e50:	4681      	mov	r9, r0
 8012e52:	6123      	str	r3, [r4, #16]
 8012e54:	dc02      	bgt.n	8012e5c <_printf_float+0x168>
 8012e56:	6822      	ldr	r2, [r4, #0]
 8012e58:	07d2      	lsls	r2, r2, #31
 8012e5a:	d501      	bpl.n	8012e60 <_printf_float+0x16c>
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	6123      	str	r3, [r4, #16]
 8012e60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d09c      	beq.n	8012da2 <_printf_float+0xae>
 8012e68:	232d      	movs	r3, #45	; 0x2d
 8012e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e6e:	e798      	b.n	8012da2 <_printf_float+0xae>
 8012e70:	9a06      	ldr	r2, [sp, #24]
 8012e72:	2a47      	cmp	r2, #71	; 0x47
 8012e74:	d1be      	bne.n	8012df4 <_printf_float+0x100>
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d1bc      	bne.n	8012df4 <_printf_float+0x100>
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	e7b9      	b.n	8012df2 <_printf_float+0xfe>
 8012e7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012e82:	d118      	bne.n	8012eb6 <_printf_float+0x1c2>
 8012e84:	2900      	cmp	r1, #0
 8012e86:	6863      	ldr	r3, [r4, #4]
 8012e88:	dd0b      	ble.n	8012ea2 <_printf_float+0x1ae>
 8012e8a:	6121      	str	r1, [r4, #16]
 8012e8c:	b913      	cbnz	r3, 8012e94 <_printf_float+0x1a0>
 8012e8e:	6822      	ldr	r2, [r4, #0]
 8012e90:	07d0      	lsls	r0, r2, #31
 8012e92:	d502      	bpl.n	8012e9a <_printf_float+0x1a6>
 8012e94:	3301      	adds	r3, #1
 8012e96:	440b      	add	r3, r1
 8012e98:	6123      	str	r3, [r4, #16]
 8012e9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8012e9c:	f04f 0900 	mov.w	r9, #0
 8012ea0:	e7de      	b.n	8012e60 <_printf_float+0x16c>
 8012ea2:	b913      	cbnz	r3, 8012eaa <_printf_float+0x1b6>
 8012ea4:	6822      	ldr	r2, [r4, #0]
 8012ea6:	07d2      	lsls	r2, r2, #31
 8012ea8:	d501      	bpl.n	8012eae <_printf_float+0x1ba>
 8012eaa:	3302      	adds	r3, #2
 8012eac:	e7f4      	b.n	8012e98 <_printf_float+0x1a4>
 8012eae:	2301      	movs	r3, #1
 8012eb0:	e7f2      	b.n	8012e98 <_printf_float+0x1a4>
 8012eb2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012eb8:	4299      	cmp	r1, r3
 8012eba:	db05      	blt.n	8012ec8 <_printf_float+0x1d4>
 8012ebc:	6823      	ldr	r3, [r4, #0]
 8012ebe:	6121      	str	r1, [r4, #16]
 8012ec0:	07d8      	lsls	r0, r3, #31
 8012ec2:	d5ea      	bpl.n	8012e9a <_printf_float+0x1a6>
 8012ec4:	1c4b      	adds	r3, r1, #1
 8012ec6:	e7e7      	b.n	8012e98 <_printf_float+0x1a4>
 8012ec8:	2900      	cmp	r1, #0
 8012eca:	bfd4      	ite	le
 8012ecc:	f1c1 0202 	rsble	r2, r1, #2
 8012ed0:	2201      	movgt	r2, #1
 8012ed2:	4413      	add	r3, r2
 8012ed4:	e7e0      	b.n	8012e98 <_printf_float+0x1a4>
 8012ed6:	6823      	ldr	r3, [r4, #0]
 8012ed8:	055a      	lsls	r2, r3, #21
 8012eda:	d407      	bmi.n	8012eec <_printf_float+0x1f8>
 8012edc:	6923      	ldr	r3, [r4, #16]
 8012ede:	4642      	mov	r2, r8
 8012ee0:	4631      	mov	r1, r6
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	47b8      	blx	r7
 8012ee6:	3001      	adds	r0, #1
 8012ee8:	d12c      	bne.n	8012f44 <_printf_float+0x250>
 8012eea:	e764      	b.n	8012db6 <_printf_float+0xc2>
 8012eec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012ef0:	f240 80e0 	bls.w	80130b4 <_printf_float+0x3c0>
 8012ef4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012ef8:	2200      	movs	r2, #0
 8012efa:	2300      	movs	r3, #0
 8012efc:	f7ed fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f00:	2800      	cmp	r0, #0
 8012f02:	d034      	beq.n	8012f6e <_printf_float+0x27a>
 8012f04:	4a37      	ldr	r2, [pc, #220]	; (8012fe4 <_printf_float+0x2f0>)
 8012f06:	2301      	movs	r3, #1
 8012f08:	4631      	mov	r1, r6
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	47b8      	blx	r7
 8012f0e:	3001      	adds	r0, #1
 8012f10:	f43f af51 	beq.w	8012db6 <_printf_float+0xc2>
 8012f14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	db02      	blt.n	8012f22 <_printf_float+0x22e>
 8012f1c:	6823      	ldr	r3, [r4, #0]
 8012f1e:	07d8      	lsls	r0, r3, #31
 8012f20:	d510      	bpl.n	8012f44 <_printf_float+0x250>
 8012f22:	ee18 3a10 	vmov	r3, s16
 8012f26:	4652      	mov	r2, sl
 8012f28:	4631      	mov	r1, r6
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	47b8      	blx	r7
 8012f2e:	3001      	adds	r0, #1
 8012f30:	f43f af41 	beq.w	8012db6 <_printf_float+0xc2>
 8012f34:	f04f 0800 	mov.w	r8, #0
 8012f38:	f104 091a 	add.w	r9, r4, #26
 8012f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f3e:	3b01      	subs	r3, #1
 8012f40:	4543      	cmp	r3, r8
 8012f42:	dc09      	bgt.n	8012f58 <_printf_float+0x264>
 8012f44:	6823      	ldr	r3, [r4, #0]
 8012f46:	079b      	lsls	r3, r3, #30
 8012f48:	f100 8105 	bmi.w	8013156 <_printf_float+0x462>
 8012f4c:	68e0      	ldr	r0, [r4, #12]
 8012f4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f50:	4298      	cmp	r0, r3
 8012f52:	bfb8      	it	lt
 8012f54:	4618      	movlt	r0, r3
 8012f56:	e730      	b.n	8012dba <_printf_float+0xc6>
 8012f58:	2301      	movs	r3, #1
 8012f5a:	464a      	mov	r2, r9
 8012f5c:	4631      	mov	r1, r6
 8012f5e:	4628      	mov	r0, r5
 8012f60:	47b8      	blx	r7
 8012f62:	3001      	adds	r0, #1
 8012f64:	f43f af27 	beq.w	8012db6 <_printf_float+0xc2>
 8012f68:	f108 0801 	add.w	r8, r8, #1
 8012f6c:	e7e6      	b.n	8012f3c <_printf_float+0x248>
 8012f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	dc39      	bgt.n	8012fe8 <_printf_float+0x2f4>
 8012f74:	4a1b      	ldr	r2, [pc, #108]	; (8012fe4 <_printf_float+0x2f0>)
 8012f76:	2301      	movs	r3, #1
 8012f78:	4631      	mov	r1, r6
 8012f7a:	4628      	mov	r0, r5
 8012f7c:	47b8      	blx	r7
 8012f7e:	3001      	adds	r0, #1
 8012f80:	f43f af19 	beq.w	8012db6 <_printf_float+0xc2>
 8012f84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f88:	4313      	orrs	r3, r2
 8012f8a:	d102      	bne.n	8012f92 <_printf_float+0x29e>
 8012f8c:	6823      	ldr	r3, [r4, #0]
 8012f8e:	07d9      	lsls	r1, r3, #31
 8012f90:	d5d8      	bpl.n	8012f44 <_printf_float+0x250>
 8012f92:	ee18 3a10 	vmov	r3, s16
 8012f96:	4652      	mov	r2, sl
 8012f98:	4631      	mov	r1, r6
 8012f9a:	4628      	mov	r0, r5
 8012f9c:	47b8      	blx	r7
 8012f9e:	3001      	adds	r0, #1
 8012fa0:	f43f af09 	beq.w	8012db6 <_printf_float+0xc2>
 8012fa4:	f04f 0900 	mov.w	r9, #0
 8012fa8:	f104 0a1a 	add.w	sl, r4, #26
 8012fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fae:	425b      	negs	r3, r3
 8012fb0:	454b      	cmp	r3, r9
 8012fb2:	dc01      	bgt.n	8012fb8 <_printf_float+0x2c4>
 8012fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fb6:	e792      	b.n	8012ede <_printf_float+0x1ea>
 8012fb8:	2301      	movs	r3, #1
 8012fba:	4652      	mov	r2, sl
 8012fbc:	4631      	mov	r1, r6
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	47b8      	blx	r7
 8012fc2:	3001      	adds	r0, #1
 8012fc4:	f43f aef7 	beq.w	8012db6 <_printf_float+0xc2>
 8012fc8:	f109 0901 	add.w	r9, r9, #1
 8012fcc:	e7ee      	b.n	8012fac <_printf_float+0x2b8>
 8012fce:	bf00      	nop
 8012fd0:	7fefffff 	.word	0x7fefffff
 8012fd4:	0801a0a0 	.word	0x0801a0a0
 8012fd8:	0801a0a4 	.word	0x0801a0a4
 8012fdc:	0801a0ac 	.word	0x0801a0ac
 8012fe0:	0801a0a8 	.word	0x0801a0a8
 8012fe4:	0801a511 	.word	0x0801a511
 8012fe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012fea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012fec:	429a      	cmp	r2, r3
 8012fee:	bfa8      	it	ge
 8012ff0:	461a      	movge	r2, r3
 8012ff2:	2a00      	cmp	r2, #0
 8012ff4:	4691      	mov	r9, r2
 8012ff6:	dc37      	bgt.n	8013068 <_printf_float+0x374>
 8012ff8:	f04f 0b00 	mov.w	fp, #0
 8012ffc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013000:	f104 021a 	add.w	r2, r4, #26
 8013004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013006:	9305      	str	r3, [sp, #20]
 8013008:	eba3 0309 	sub.w	r3, r3, r9
 801300c:	455b      	cmp	r3, fp
 801300e:	dc33      	bgt.n	8013078 <_printf_float+0x384>
 8013010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013014:	429a      	cmp	r2, r3
 8013016:	db3b      	blt.n	8013090 <_printf_float+0x39c>
 8013018:	6823      	ldr	r3, [r4, #0]
 801301a:	07da      	lsls	r2, r3, #31
 801301c:	d438      	bmi.n	8013090 <_printf_float+0x39c>
 801301e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013020:	9b05      	ldr	r3, [sp, #20]
 8013022:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013024:	1ad3      	subs	r3, r2, r3
 8013026:	eba2 0901 	sub.w	r9, r2, r1
 801302a:	4599      	cmp	r9, r3
 801302c:	bfa8      	it	ge
 801302e:	4699      	movge	r9, r3
 8013030:	f1b9 0f00 	cmp.w	r9, #0
 8013034:	dc35      	bgt.n	80130a2 <_printf_float+0x3ae>
 8013036:	f04f 0800 	mov.w	r8, #0
 801303a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801303e:	f104 0a1a 	add.w	sl, r4, #26
 8013042:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013046:	1a9b      	subs	r3, r3, r2
 8013048:	eba3 0309 	sub.w	r3, r3, r9
 801304c:	4543      	cmp	r3, r8
 801304e:	f77f af79 	ble.w	8012f44 <_printf_float+0x250>
 8013052:	2301      	movs	r3, #1
 8013054:	4652      	mov	r2, sl
 8013056:	4631      	mov	r1, r6
 8013058:	4628      	mov	r0, r5
 801305a:	47b8      	blx	r7
 801305c:	3001      	adds	r0, #1
 801305e:	f43f aeaa 	beq.w	8012db6 <_printf_float+0xc2>
 8013062:	f108 0801 	add.w	r8, r8, #1
 8013066:	e7ec      	b.n	8013042 <_printf_float+0x34e>
 8013068:	4613      	mov	r3, r2
 801306a:	4631      	mov	r1, r6
 801306c:	4642      	mov	r2, r8
 801306e:	4628      	mov	r0, r5
 8013070:	47b8      	blx	r7
 8013072:	3001      	adds	r0, #1
 8013074:	d1c0      	bne.n	8012ff8 <_printf_float+0x304>
 8013076:	e69e      	b.n	8012db6 <_printf_float+0xc2>
 8013078:	2301      	movs	r3, #1
 801307a:	4631      	mov	r1, r6
 801307c:	4628      	mov	r0, r5
 801307e:	9205      	str	r2, [sp, #20]
 8013080:	47b8      	blx	r7
 8013082:	3001      	adds	r0, #1
 8013084:	f43f ae97 	beq.w	8012db6 <_printf_float+0xc2>
 8013088:	9a05      	ldr	r2, [sp, #20]
 801308a:	f10b 0b01 	add.w	fp, fp, #1
 801308e:	e7b9      	b.n	8013004 <_printf_float+0x310>
 8013090:	ee18 3a10 	vmov	r3, s16
 8013094:	4652      	mov	r2, sl
 8013096:	4631      	mov	r1, r6
 8013098:	4628      	mov	r0, r5
 801309a:	47b8      	blx	r7
 801309c:	3001      	adds	r0, #1
 801309e:	d1be      	bne.n	801301e <_printf_float+0x32a>
 80130a0:	e689      	b.n	8012db6 <_printf_float+0xc2>
 80130a2:	9a05      	ldr	r2, [sp, #20]
 80130a4:	464b      	mov	r3, r9
 80130a6:	4442      	add	r2, r8
 80130a8:	4631      	mov	r1, r6
 80130aa:	4628      	mov	r0, r5
 80130ac:	47b8      	blx	r7
 80130ae:	3001      	adds	r0, #1
 80130b0:	d1c1      	bne.n	8013036 <_printf_float+0x342>
 80130b2:	e680      	b.n	8012db6 <_printf_float+0xc2>
 80130b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130b6:	2a01      	cmp	r2, #1
 80130b8:	dc01      	bgt.n	80130be <_printf_float+0x3ca>
 80130ba:	07db      	lsls	r3, r3, #31
 80130bc:	d538      	bpl.n	8013130 <_printf_float+0x43c>
 80130be:	2301      	movs	r3, #1
 80130c0:	4642      	mov	r2, r8
 80130c2:	4631      	mov	r1, r6
 80130c4:	4628      	mov	r0, r5
 80130c6:	47b8      	blx	r7
 80130c8:	3001      	adds	r0, #1
 80130ca:	f43f ae74 	beq.w	8012db6 <_printf_float+0xc2>
 80130ce:	ee18 3a10 	vmov	r3, s16
 80130d2:	4652      	mov	r2, sl
 80130d4:	4631      	mov	r1, r6
 80130d6:	4628      	mov	r0, r5
 80130d8:	47b8      	blx	r7
 80130da:	3001      	adds	r0, #1
 80130dc:	f43f ae6b 	beq.w	8012db6 <_printf_float+0xc2>
 80130e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80130e4:	2200      	movs	r2, #0
 80130e6:	2300      	movs	r3, #0
 80130e8:	f7ed fcee 	bl	8000ac8 <__aeabi_dcmpeq>
 80130ec:	b9d8      	cbnz	r0, 8013126 <_printf_float+0x432>
 80130ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130f0:	f108 0201 	add.w	r2, r8, #1
 80130f4:	3b01      	subs	r3, #1
 80130f6:	4631      	mov	r1, r6
 80130f8:	4628      	mov	r0, r5
 80130fa:	47b8      	blx	r7
 80130fc:	3001      	adds	r0, #1
 80130fe:	d10e      	bne.n	801311e <_printf_float+0x42a>
 8013100:	e659      	b.n	8012db6 <_printf_float+0xc2>
 8013102:	2301      	movs	r3, #1
 8013104:	4652      	mov	r2, sl
 8013106:	4631      	mov	r1, r6
 8013108:	4628      	mov	r0, r5
 801310a:	47b8      	blx	r7
 801310c:	3001      	adds	r0, #1
 801310e:	f43f ae52 	beq.w	8012db6 <_printf_float+0xc2>
 8013112:	f108 0801 	add.w	r8, r8, #1
 8013116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013118:	3b01      	subs	r3, #1
 801311a:	4543      	cmp	r3, r8
 801311c:	dcf1      	bgt.n	8013102 <_printf_float+0x40e>
 801311e:	464b      	mov	r3, r9
 8013120:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013124:	e6dc      	b.n	8012ee0 <_printf_float+0x1ec>
 8013126:	f04f 0800 	mov.w	r8, #0
 801312a:	f104 0a1a 	add.w	sl, r4, #26
 801312e:	e7f2      	b.n	8013116 <_printf_float+0x422>
 8013130:	2301      	movs	r3, #1
 8013132:	4642      	mov	r2, r8
 8013134:	e7df      	b.n	80130f6 <_printf_float+0x402>
 8013136:	2301      	movs	r3, #1
 8013138:	464a      	mov	r2, r9
 801313a:	4631      	mov	r1, r6
 801313c:	4628      	mov	r0, r5
 801313e:	47b8      	blx	r7
 8013140:	3001      	adds	r0, #1
 8013142:	f43f ae38 	beq.w	8012db6 <_printf_float+0xc2>
 8013146:	f108 0801 	add.w	r8, r8, #1
 801314a:	68e3      	ldr	r3, [r4, #12]
 801314c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801314e:	1a5b      	subs	r3, r3, r1
 8013150:	4543      	cmp	r3, r8
 8013152:	dcf0      	bgt.n	8013136 <_printf_float+0x442>
 8013154:	e6fa      	b.n	8012f4c <_printf_float+0x258>
 8013156:	f04f 0800 	mov.w	r8, #0
 801315a:	f104 0919 	add.w	r9, r4, #25
 801315e:	e7f4      	b.n	801314a <_printf_float+0x456>

08013160 <_printf_common>:
 8013160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013164:	4616      	mov	r6, r2
 8013166:	4699      	mov	r9, r3
 8013168:	688a      	ldr	r2, [r1, #8]
 801316a:	690b      	ldr	r3, [r1, #16]
 801316c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013170:	4293      	cmp	r3, r2
 8013172:	bfb8      	it	lt
 8013174:	4613      	movlt	r3, r2
 8013176:	6033      	str	r3, [r6, #0]
 8013178:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801317c:	4607      	mov	r7, r0
 801317e:	460c      	mov	r4, r1
 8013180:	b10a      	cbz	r2, 8013186 <_printf_common+0x26>
 8013182:	3301      	adds	r3, #1
 8013184:	6033      	str	r3, [r6, #0]
 8013186:	6823      	ldr	r3, [r4, #0]
 8013188:	0699      	lsls	r1, r3, #26
 801318a:	bf42      	ittt	mi
 801318c:	6833      	ldrmi	r3, [r6, #0]
 801318e:	3302      	addmi	r3, #2
 8013190:	6033      	strmi	r3, [r6, #0]
 8013192:	6825      	ldr	r5, [r4, #0]
 8013194:	f015 0506 	ands.w	r5, r5, #6
 8013198:	d106      	bne.n	80131a8 <_printf_common+0x48>
 801319a:	f104 0a19 	add.w	sl, r4, #25
 801319e:	68e3      	ldr	r3, [r4, #12]
 80131a0:	6832      	ldr	r2, [r6, #0]
 80131a2:	1a9b      	subs	r3, r3, r2
 80131a4:	42ab      	cmp	r3, r5
 80131a6:	dc26      	bgt.n	80131f6 <_printf_common+0x96>
 80131a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80131ac:	1e13      	subs	r3, r2, #0
 80131ae:	6822      	ldr	r2, [r4, #0]
 80131b0:	bf18      	it	ne
 80131b2:	2301      	movne	r3, #1
 80131b4:	0692      	lsls	r2, r2, #26
 80131b6:	d42b      	bmi.n	8013210 <_printf_common+0xb0>
 80131b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80131bc:	4649      	mov	r1, r9
 80131be:	4638      	mov	r0, r7
 80131c0:	47c0      	blx	r8
 80131c2:	3001      	adds	r0, #1
 80131c4:	d01e      	beq.n	8013204 <_printf_common+0xa4>
 80131c6:	6823      	ldr	r3, [r4, #0]
 80131c8:	68e5      	ldr	r5, [r4, #12]
 80131ca:	6832      	ldr	r2, [r6, #0]
 80131cc:	f003 0306 	and.w	r3, r3, #6
 80131d0:	2b04      	cmp	r3, #4
 80131d2:	bf08      	it	eq
 80131d4:	1aad      	subeq	r5, r5, r2
 80131d6:	68a3      	ldr	r3, [r4, #8]
 80131d8:	6922      	ldr	r2, [r4, #16]
 80131da:	bf0c      	ite	eq
 80131dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80131e0:	2500      	movne	r5, #0
 80131e2:	4293      	cmp	r3, r2
 80131e4:	bfc4      	itt	gt
 80131e6:	1a9b      	subgt	r3, r3, r2
 80131e8:	18ed      	addgt	r5, r5, r3
 80131ea:	2600      	movs	r6, #0
 80131ec:	341a      	adds	r4, #26
 80131ee:	42b5      	cmp	r5, r6
 80131f0:	d11a      	bne.n	8013228 <_printf_common+0xc8>
 80131f2:	2000      	movs	r0, #0
 80131f4:	e008      	b.n	8013208 <_printf_common+0xa8>
 80131f6:	2301      	movs	r3, #1
 80131f8:	4652      	mov	r2, sl
 80131fa:	4649      	mov	r1, r9
 80131fc:	4638      	mov	r0, r7
 80131fe:	47c0      	blx	r8
 8013200:	3001      	adds	r0, #1
 8013202:	d103      	bne.n	801320c <_printf_common+0xac>
 8013204:	f04f 30ff 	mov.w	r0, #4294967295
 8013208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801320c:	3501      	adds	r5, #1
 801320e:	e7c6      	b.n	801319e <_printf_common+0x3e>
 8013210:	18e1      	adds	r1, r4, r3
 8013212:	1c5a      	adds	r2, r3, #1
 8013214:	2030      	movs	r0, #48	; 0x30
 8013216:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801321a:	4422      	add	r2, r4
 801321c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013220:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013224:	3302      	adds	r3, #2
 8013226:	e7c7      	b.n	80131b8 <_printf_common+0x58>
 8013228:	2301      	movs	r3, #1
 801322a:	4622      	mov	r2, r4
 801322c:	4649      	mov	r1, r9
 801322e:	4638      	mov	r0, r7
 8013230:	47c0      	blx	r8
 8013232:	3001      	adds	r0, #1
 8013234:	d0e6      	beq.n	8013204 <_printf_common+0xa4>
 8013236:	3601      	adds	r6, #1
 8013238:	e7d9      	b.n	80131ee <_printf_common+0x8e>
	...

0801323c <_printf_i>:
 801323c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013240:	460c      	mov	r4, r1
 8013242:	4691      	mov	r9, r2
 8013244:	7e27      	ldrb	r7, [r4, #24]
 8013246:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013248:	2f78      	cmp	r7, #120	; 0x78
 801324a:	4680      	mov	r8, r0
 801324c:	469a      	mov	sl, r3
 801324e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013252:	d807      	bhi.n	8013264 <_printf_i+0x28>
 8013254:	2f62      	cmp	r7, #98	; 0x62
 8013256:	d80a      	bhi.n	801326e <_printf_i+0x32>
 8013258:	2f00      	cmp	r7, #0
 801325a:	f000 80d8 	beq.w	801340e <_printf_i+0x1d2>
 801325e:	2f58      	cmp	r7, #88	; 0x58
 8013260:	f000 80a3 	beq.w	80133aa <_printf_i+0x16e>
 8013264:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013268:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801326c:	e03a      	b.n	80132e4 <_printf_i+0xa8>
 801326e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013272:	2b15      	cmp	r3, #21
 8013274:	d8f6      	bhi.n	8013264 <_printf_i+0x28>
 8013276:	a001      	add	r0, pc, #4	; (adr r0, 801327c <_printf_i+0x40>)
 8013278:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801327c:	080132d5 	.word	0x080132d5
 8013280:	080132e9 	.word	0x080132e9
 8013284:	08013265 	.word	0x08013265
 8013288:	08013265 	.word	0x08013265
 801328c:	08013265 	.word	0x08013265
 8013290:	08013265 	.word	0x08013265
 8013294:	080132e9 	.word	0x080132e9
 8013298:	08013265 	.word	0x08013265
 801329c:	08013265 	.word	0x08013265
 80132a0:	08013265 	.word	0x08013265
 80132a4:	08013265 	.word	0x08013265
 80132a8:	080133f5 	.word	0x080133f5
 80132ac:	08013319 	.word	0x08013319
 80132b0:	080133d7 	.word	0x080133d7
 80132b4:	08013265 	.word	0x08013265
 80132b8:	08013265 	.word	0x08013265
 80132bc:	08013417 	.word	0x08013417
 80132c0:	08013265 	.word	0x08013265
 80132c4:	08013319 	.word	0x08013319
 80132c8:	08013265 	.word	0x08013265
 80132cc:	08013265 	.word	0x08013265
 80132d0:	080133df 	.word	0x080133df
 80132d4:	680b      	ldr	r3, [r1, #0]
 80132d6:	1d1a      	adds	r2, r3, #4
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	600a      	str	r2, [r1, #0]
 80132dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80132e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80132e4:	2301      	movs	r3, #1
 80132e6:	e0a3      	b.n	8013430 <_printf_i+0x1f4>
 80132e8:	6825      	ldr	r5, [r4, #0]
 80132ea:	6808      	ldr	r0, [r1, #0]
 80132ec:	062e      	lsls	r6, r5, #24
 80132ee:	f100 0304 	add.w	r3, r0, #4
 80132f2:	d50a      	bpl.n	801330a <_printf_i+0xce>
 80132f4:	6805      	ldr	r5, [r0, #0]
 80132f6:	600b      	str	r3, [r1, #0]
 80132f8:	2d00      	cmp	r5, #0
 80132fa:	da03      	bge.n	8013304 <_printf_i+0xc8>
 80132fc:	232d      	movs	r3, #45	; 0x2d
 80132fe:	426d      	negs	r5, r5
 8013300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013304:	485e      	ldr	r0, [pc, #376]	; (8013480 <_printf_i+0x244>)
 8013306:	230a      	movs	r3, #10
 8013308:	e019      	b.n	801333e <_printf_i+0x102>
 801330a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801330e:	6805      	ldr	r5, [r0, #0]
 8013310:	600b      	str	r3, [r1, #0]
 8013312:	bf18      	it	ne
 8013314:	b22d      	sxthne	r5, r5
 8013316:	e7ef      	b.n	80132f8 <_printf_i+0xbc>
 8013318:	680b      	ldr	r3, [r1, #0]
 801331a:	6825      	ldr	r5, [r4, #0]
 801331c:	1d18      	adds	r0, r3, #4
 801331e:	6008      	str	r0, [r1, #0]
 8013320:	0628      	lsls	r0, r5, #24
 8013322:	d501      	bpl.n	8013328 <_printf_i+0xec>
 8013324:	681d      	ldr	r5, [r3, #0]
 8013326:	e002      	b.n	801332e <_printf_i+0xf2>
 8013328:	0669      	lsls	r1, r5, #25
 801332a:	d5fb      	bpl.n	8013324 <_printf_i+0xe8>
 801332c:	881d      	ldrh	r5, [r3, #0]
 801332e:	4854      	ldr	r0, [pc, #336]	; (8013480 <_printf_i+0x244>)
 8013330:	2f6f      	cmp	r7, #111	; 0x6f
 8013332:	bf0c      	ite	eq
 8013334:	2308      	moveq	r3, #8
 8013336:	230a      	movne	r3, #10
 8013338:	2100      	movs	r1, #0
 801333a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801333e:	6866      	ldr	r6, [r4, #4]
 8013340:	60a6      	str	r6, [r4, #8]
 8013342:	2e00      	cmp	r6, #0
 8013344:	bfa2      	ittt	ge
 8013346:	6821      	ldrge	r1, [r4, #0]
 8013348:	f021 0104 	bicge.w	r1, r1, #4
 801334c:	6021      	strge	r1, [r4, #0]
 801334e:	b90d      	cbnz	r5, 8013354 <_printf_i+0x118>
 8013350:	2e00      	cmp	r6, #0
 8013352:	d04d      	beq.n	80133f0 <_printf_i+0x1b4>
 8013354:	4616      	mov	r6, r2
 8013356:	fbb5 f1f3 	udiv	r1, r5, r3
 801335a:	fb03 5711 	mls	r7, r3, r1, r5
 801335e:	5dc7      	ldrb	r7, [r0, r7]
 8013360:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013364:	462f      	mov	r7, r5
 8013366:	42bb      	cmp	r3, r7
 8013368:	460d      	mov	r5, r1
 801336a:	d9f4      	bls.n	8013356 <_printf_i+0x11a>
 801336c:	2b08      	cmp	r3, #8
 801336e:	d10b      	bne.n	8013388 <_printf_i+0x14c>
 8013370:	6823      	ldr	r3, [r4, #0]
 8013372:	07df      	lsls	r7, r3, #31
 8013374:	d508      	bpl.n	8013388 <_printf_i+0x14c>
 8013376:	6923      	ldr	r3, [r4, #16]
 8013378:	6861      	ldr	r1, [r4, #4]
 801337a:	4299      	cmp	r1, r3
 801337c:	bfde      	ittt	le
 801337e:	2330      	movle	r3, #48	; 0x30
 8013380:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013384:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013388:	1b92      	subs	r2, r2, r6
 801338a:	6122      	str	r2, [r4, #16]
 801338c:	f8cd a000 	str.w	sl, [sp]
 8013390:	464b      	mov	r3, r9
 8013392:	aa03      	add	r2, sp, #12
 8013394:	4621      	mov	r1, r4
 8013396:	4640      	mov	r0, r8
 8013398:	f7ff fee2 	bl	8013160 <_printf_common>
 801339c:	3001      	adds	r0, #1
 801339e:	d14c      	bne.n	801343a <_printf_i+0x1fe>
 80133a0:	f04f 30ff 	mov.w	r0, #4294967295
 80133a4:	b004      	add	sp, #16
 80133a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133aa:	4835      	ldr	r0, [pc, #212]	; (8013480 <_printf_i+0x244>)
 80133ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80133b0:	6823      	ldr	r3, [r4, #0]
 80133b2:	680e      	ldr	r6, [r1, #0]
 80133b4:	061f      	lsls	r7, r3, #24
 80133b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80133ba:	600e      	str	r6, [r1, #0]
 80133bc:	d514      	bpl.n	80133e8 <_printf_i+0x1ac>
 80133be:	07d9      	lsls	r1, r3, #31
 80133c0:	bf44      	itt	mi
 80133c2:	f043 0320 	orrmi.w	r3, r3, #32
 80133c6:	6023      	strmi	r3, [r4, #0]
 80133c8:	b91d      	cbnz	r5, 80133d2 <_printf_i+0x196>
 80133ca:	6823      	ldr	r3, [r4, #0]
 80133cc:	f023 0320 	bic.w	r3, r3, #32
 80133d0:	6023      	str	r3, [r4, #0]
 80133d2:	2310      	movs	r3, #16
 80133d4:	e7b0      	b.n	8013338 <_printf_i+0xfc>
 80133d6:	6823      	ldr	r3, [r4, #0]
 80133d8:	f043 0320 	orr.w	r3, r3, #32
 80133dc:	6023      	str	r3, [r4, #0]
 80133de:	2378      	movs	r3, #120	; 0x78
 80133e0:	4828      	ldr	r0, [pc, #160]	; (8013484 <_printf_i+0x248>)
 80133e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80133e6:	e7e3      	b.n	80133b0 <_printf_i+0x174>
 80133e8:	065e      	lsls	r6, r3, #25
 80133ea:	bf48      	it	mi
 80133ec:	b2ad      	uxthmi	r5, r5
 80133ee:	e7e6      	b.n	80133be <_printf_i+0x182>
 80133f0:	4616      	mov	r6, r2
 80133f2:	e7bb      	b.n	801336c <_printf_i+0x130>
 80133f4:	680b      	ldr	r3, [r1, #0]
 80133f6:	6826      	ldr	r6, [r4, #0]
 80133f8:	6960      	ldr	r0, [r4, #20]
 80133fa:	1d1d      	adds	r5, r3, #4
 80133fc:	600d      	str	r5, [r1, #0]
 80133fe:	0635      	lsls	r5, r6, #24
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	d501      	bpl.n	8013408 <_printf_i+0x1cc>
 8013404:	6018      	str	r0, [r3, #0]
 8013406:	e002      	b.n	801340e <_printf_i+0x1d2>
 8013408:	0671      	lsls	r1, r6, #25
 801340a:	d5fb      	bpl.n	8013404 <_printf_i+0x1c8>
 801340c:	8018      	strh	r0, [r3, #0]
 801340e:	2300      	movs	r3, #0
 8013410:	6123      	str	r3, [r4, #16]
 8013412:	4616      	mov	r6, r2
 8013414:	e7ba      	b.n	801338c <_printf_i+0x150>
 8013416:	680b      	ldr	r3, [r1, #0]
 8013418:	1d1a      	adds	r2, r3, #4
 801341a:	600a      	str	r2, [r1, #0]
 801341c:	681e      	ldr	r6, [r3, #0]
 801341e:	6862      	ldr	r2, [r4, #4]
 8013420:	2100      	movs	r1, #0
 8013422:	4630      	mov	r0, r6
 8013424:	f7ec fedc 	bl	80001e0 <memchr>
 8013428:	b108      	cbz	r0, 801342e <_printf_i+0x1f2>
 801342a:	1b80      	subs	r0, r0, r6
 801342c:	6060      	str	r0, [r4, #4]
 801342e:	6863      	ldr	r3, [r4, #4]
 8013430:	6123      	str	r3, [r4, #16]
 8013432:	2300      	movs	r3, #0
 8013434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013438:	e7a8      	b.n	801338c <_printf_i+0x150>
 801343a:	6923      	ldr	r3, [r4, #16]
 801343c:	4632      	mov	r2, r6
 801343e:	4649      	mov	r1, r9
 8013440:	4640      	mov	r0, r8
 8013442:	47d0      	blx	sl
 8013444:	3001      	adds	r0, #1
 8013446:	d0ab      	beq.n	80133a0 <_printf_i+0x164>
 8013448:	6823      	ldr	r3, [r4, #0]
 801344a:	079b      	lsls	r3, r3, #30
 801344c:	d413      	bmi.n	8013476 <_printf_i+0x23a>
 801344e:	68e0      	ldr	r0, [r4, #12]
 8013450:	9b03      	ldr	r3, [sp, #12]
 8013452:	4298      	cmp	r0, r3
 8013454:	bfb8      	it	lt
 8013456:	4618      	movlt	r0, r3
 8013458:	e7a4      	b.n	80133a4 <_printf_i+0x168>
 801345a:	2301      	movs	r3, #1
 801345c:	4632      	mov	r2, r6
 801345e:	4649      	mov	r1, r9
 8013460:	4640      	mov	r0, r8
 8013462:	47d0      	blx	sl
 8013464:	3001      	adds	r0, #1
 8013466:	d09b      	beq.n	80133a0 <_printf_i+0x164>
 8013468:	3501      	adds	r5, #1
 801346a:	68e3      	ldr	r3, [r4, #12]
 801346c:	9903      	ldr	r1, [sp, #12]
 801346e:	1a5b      	subs	r3, r3, r1
 8013470:	42ab      	cmp	r3, r5
 8013472:	dcf2      	bgt.n	801345a <_printf_i+0x21e>
 8013474:	e7eb      	b.n	801344e <_printf_i+0x212>
 8013476:	2500      	movs	r5, #0
 8013478:	f104 0619 	add.w	r6, r4, #25
 801347c:	e7f5      	b.n	801346a <_printf_i+0x22e>
 801347e:	bf00      	nop
 8013480:	0801a0b0 	.word	0x0801a0b0
 8013484:	0801a0c1 	.word	0x0801a0c1

08013488 <_scanf_float>:
 8013488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801348c:	b087      	sub	sp, #28
 801348e:	4617      	mov	r7, r2
 8013490:	9303      	str	r3, [sp, #12]
 8013492:	688b      	ldr	r3, [r1, #8]
 8013494:	1e5a      	subs	r2, r3, #1
 8013496:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801349a:	bf83      	ittte	hi
 801349c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80134a0:	195b      	addhi	r3, r3, r5
 80134a2:	9302      	strhi	r3, [sp, #8]
 80134a4:	2300      	movls	r3, #0
 80134a6:	bf86      	itte	hi
 80134a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80134ac:	608b      	strhi	r3, [r1, #8]
 80134ae:	9302      	strls	r3, [sp, #8]
 80134b0:	680b      	ldr	r3, [r1, #0]
 80134b2:	468b      	mov	fp, r1
 80134b4:	2500      	movs	r5, #0
 80134b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80134ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80134be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80134c2:	4680      	mov	r8, r0
 80134c4:	460c      	mov	r4, r1
 80134c6:	465e      	mov	r6, fp
 80134c8:	46aa      	mov	sl, r5
 80134ca:	46a9      	mov	r9, r5
 80134cc:	9501      	str	r5, [sp, #4]
 80134ce:	68a2      	ldr	r2, [r4, #8]
 80134d0:	b152      	cbz	r2, 80134e8 <_scanf_float+0x60>
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	2b4e      	cmp	r3, #78	; 0x4e
 80134d8:	d864      	bhi.n	80135a4 <_scanf_float+0x11c>
 80134da:	2b40      	cmp	r3, #64	; 0x40
 80134dc:	d83c      	bhi.n	8013558 <_scanf_float+0xd0>
 80134de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80134e2:	b2c8      	uxtb	r0, r1
 80134e4:	280e      	cmp	r0, #14
 80134e6:	d93a      	bls.n	801355e <_scanf_float+0xd6>
 80134e8:	f1b9 0f00 	cmp.w	r9, #0
 80134ec:	d003      	beq.n	80134f6 <_scanf_float+0x6e>
 80134ee:	6823      	ldr	r3, [r4, #0]
 80134f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80134f4:	6023      	str	r3, [r4, #0]
 80134f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80134fa:	f1ba 0f01 	cmp.w	sl, #1
 80134fe:	f200 8113 	bhi.w	8013728 <_scanf_float+0x2a0>
 8013502:	455e      	cmp	r6, fp
 8013504:	f200 8105 	bhi.w	8013712 <_scanf_float+0x28a>
 8013508:	2501      	movs	r5, #1
 801350a:	4628      	mov	r0, r5
 801350c:	b007      	add	sp, #28
 801350e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013512:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013516:	2a0d      	cmp	r2, #13
 8013518:	d8e6      	bhi.n	80134e8 <_scanf_float+0x60>
 801351a:	a101      	add	r1, pc, #4	; (adr r1, 8013520 <_scanf_float+0x98>)
 801351c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013520:	0801365f 	.word	0x0801365f
 8013524:	080134e9 	.word	0x080134e9
 8013528:	080134e9 	.word	0x080134e9
 801352c:	080134e9 	.word	0x080134e9
 8013530:	080136bf 	.word	0x080136bf
 8013534:	08013697 	.word	0x08013697
 8013538:	080134e9 	.word	0x080134e9
 801353c:	080134e9 	.word	0x080134e9
 8013540:	0801366d 	.word	0x0801366d
 8013544:	080134e9 	.word	0x080134e9
 8013548:	080134e9 	.word	0x080134e9
 801354c:	080134e9 	.word	0x080134e9
 8013550:	080134e9 	.word	0x080134e9
 8013554:	08013625 	.word	0x08013625
 8013558:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801355c:	e7db      	b.n	8013516 <_scanf_float+0x8e>
 801355e:	290e      	cmp	r1, #14
 8013560:	d8c2      	bhi.n	80134e8 <_scanf_float+0x60>
 8013562:	a001      	add	r0, pc, #4	; (adr r0, 8013568 <_scanf_float+0xe0>)
 8013564:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013568:	08013617 	.word	0x08013617
 801356c:	080134e9 	.word	0x080134e9
 8013570:	08013617 	.word	0x08013617
 8013574:	080136ab 	.word	0x080136ab
 8013578:	080134e9 	.word	0x080134e9
 801357c:	080135c5 	.word	0x080135c5
 8013580:	08013601 	.word	0x08013601
 8013584:	08013601 	.word	0x08013601
 8013588:	08013601 	.word	0x08013601
 801358c:	08013601 	.word	0x08013601
 8013590:	08013601 	.word	0x08013601
 8013594:	08013601 	.word	0x08013601
 8013598:	08013601 	.word	0x08013601
 801359c:	08013601 	.word	0x08013601
 80135a0:	08013601 	.word	0x08013601
 80135a4:	2b6e      	cmp	r3, #110	; 0x6e
 80135a6:	d809      	bhi.n	80135bc <_scanf_float+0x134>
 80135a8:	2b60      	cmp	r3, #96	; 0x60
 80135aa:	d8b2      	bhi.n	8013512 <_scanf_float+0x8a>
 80135ac:	2b54      	cmp	r3, #84	; 0x54
 80135ae:	d077      	beq.n	80136a0 <_scanf_float+0x218>
 80135b0:	2b59      	cmp	r3, #89	; 0x59
 80135b2:	d199      	bne.n	80134e8 <_scanf_float+0x60>
 80135b4:	2d07      	cmp	r5, #7
 80135b6:	d197      	bne.n	80134e8 <_scanf_float+0x60>
 80135b8:	2508      	movs	r5, #8
 80135ba:	e029      	b.n	8013610 <_scanf_float+0x188>
 80135bc:	2b74      	cmp	r3, #116	; 0x74
 80135be:	d06f      	beq.n	80136a0 <_scanf_float+0x218>
 80135c0:	2b79      	cmp	r3, #121	; 0x79
 80135c2:	e7f6      	b.n	80135b2 <_scanf_float+0x12a>
 80135c4:	6821      	ldr	r1, [r4, #0]
 80135c6:	05c8      	lsls	r0, r1, #23
 80135c8:	d51a      	bpl.n	8013600 <_scanf_float+0x178>
 80135ca:	9b02      	ldr	r3, [sp, #8]
 80135cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80135d0:	6021      	str	r1, [r4, #0]
 80135d2:	f109 0901 	add.w	r9, r9, #1
 80135d6:	b11b      	cbz	r3, 80135e0 <_scanf_float+0x158>
 80135d8:	3b01      	subs	r3, #1
 80135da:	3201      	adds	r2, #1
 80135dc:	9302      	str	r3, [sp, #8]
 80135de:	60a2      	str	r2, [r4, #8]
 80135e0:	68a3      	ldr	r3, [r4, #8]
 80135e2:	3b01      	subs	r3, #1
 80135e4:	60a3      	str	r3, [r4, #8]
 80135e6:	6923      	ldr	r3, [r4, #16]
 80135e8:	3301      	adds	r3, #1
 80135ea:	6123      	str	r3, [r4, #16]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	3b01      	subs	r3, #1
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	607b      	str	r3, [r7, #4]
 80135f4:	f340 8084 	ble.w	8013700 <_scanf_float+0x278>
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	3301      	adds	r3, #1
 80135fc:	603b      	str	r3, [r7, #0]
 80135fe:	e766      	b.n	80134ce <_scanf_float+0x46>
 8013600:	eb1a 0f05 	cmn.w	sl, r5
 8013604:	f47f af70 	bne.w	80134e8 <_scanf_float+0x60>
 8013608:	6822      	ldr	r2, [r4, #0]
 801360a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801360e:	6022      	str	r2, [r4, #0]
 8013610:	f806 3b01 	strb.w	r3, [r6], #1
 8013614:	e7e4      	b.n	80135e0 <_scanf_float+0x158>
 8013616:	6822      	ldr	r2, [r4, #0]
 8013618:	0610      	lsls	r0, r2, #24
 801361a:	f57f af65 	bpl.w	80134e8 <_scanf_float+0x60>
 801361e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013622:	e7f4      	b.n	801360e <_scanf_float+0x186>
 8013624:	f1ba 0f00 	cmp.w	sl, #0
 8013628:	d10e      	bne.n	8013648 <_scanf_float+0x1c0>
 801362a:	f1b9 0f00 	cmp.w	r9, #0
 801362e:	d10e      	bne.n	801364e <_scanf_float+0x1c6>
 8013630:	6822      	ldr	r2, [r4, #0]
 8013632:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013636:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801363a:	d108      	bne.n	801364e <_scanf_float+0x1c6>
 801363c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013640:	6022      	str	r2, [r4, #0]
 8013642:	f04f 0a01 	mov.w	sl, #1
 8013646:	e7e3      	b.n	8013610 <_scanf_float+0x188>
 8013648:	f1ba 0f02 	cmp.w	sl, #2
 801364c:	d055      	beq.n	80136fa <_scanf_float+0x272>
 801364e:	2d01      	cmp	r5, #1
 8013650:	d002      	beq.n	8013658 <_scanf_float+0x1d0>
 8013652:	2d04      	cmp	r5, #4
 8013654:	f47f af48 	bne.w	80134e8 <_scanf_float+0x60>
 8013658:	3501      	adds	r5, #1
 801365a:	b2ed      	uxtb	r5, r5
 801365c:	e7d8      	b.n	8013610 <_scanf_float+0x188>
 801365e:	f1ba 0f01 	cmp.w	sl, #1
 8013662:	f47f af41 	bne.w	80134e8 <_scanf_float+0x60>
 8013666:	f04f 0a02 	mov.w	sl, #2
 801366a:	e7d1      	b.n	8013610 <_scanf_float+0x188>
 801366c:	b97d      	cbnz	r5, 801368e <_scanf_float+0x206>
 801366e:	f1b9 0f00 	cmp.w	r9, #0
 8013672:	f47f af3c 	bne.w	80134ee <_scanf_float+0x66>
 8013676:	6822      	ldr	r2, [r4, #0]
 8013678:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801367c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013680:	f47f af39 	bne.w	80134f6 <_scanf_float+0x6e>
 8013684:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013688:	6022      	str	r2, [r4, #0]
 801368a:	2501      	movs	r5, #1
 801368c:	e7c0      	b.n	8013610 <_scanf_float+0x188>
 801368e:	2d03      	cmp	r5, #3
 8013690:	d0e2      	beq.n	8013658 <_scanf_float+0x1d0>
 8013692:	2d05      	cmp	r5, #5
 8013694:	e7de      	b.n	8013654 <_scanf_float+0x1cc>
 8013696:	2d02      	cmp	r5, #2
 8013698:	f47f af26 	bne.w	80134e8 <_scanf_float+0x60>
 801369c:	2503      	movs	r5, #3
 801369e:	e7b7      	b.n	8013610 <_scanf_float+0x188>
 80136a0:	2d06      	cmp	r5, #6
 80136a2:	f47f af21 	bne.w	80134e8 <_scanf_float+0x60>
 80136a6:	2507      	movs	r5, #7
 80136a8:	e7b2      	b.n	8013610 <_scanf_float+0x188>
 80136aa:	6822      	ldr	r2, [r4, #0]
 80136ac:	0591      	lsls	r1, r2, #22
 80136ae:	f57f af1b 	bpl.w	80134e8 <_scanf_float+0x60>
 80136b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80136b6:	6022      	str	r2, [r4, #0]
 80136b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80136bc:	e7a8      	b.n	8013610 <_scanf_float+0x188>
 80136be:	6822      	ldr	r2, [r4, #0]
 80136c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80136c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80136c8:	d006      	beq.n	80136d8 <_scanf_float+0x250>
 80136ca:	0550      	lsls	r0, r2, #21
 80136cc:	f57f af0c 	bpl.w	80134e8 <_scanf_float+0x60>
 80136d0:	f1b9 0f00 	cmp.w	r9, #0
 80136d4:	f43f af0f 	beq.w	80134f6 <_scanf_float+0x6e>
 80136d8:	0591      	lsls	r1, r2, #22
 80136da:	bf58      	it	pl
 80136dc:	9901      	ldrpl	r1, [sp, #4]
 80136de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80136e2:	bf58      	it	pl
 80136e4:	eba9 0101 	subpl.w	r1, r9, r1
 80136e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80136ec:	bf58      	it	pl
 80136ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80136f2:	6022      	str	r2, [r4, #0]
 80136f4:	f04f 0900 	mov.w	r9, #0
 80136f8:	e78a      	b.n	8013610 <_scanf_float+0x188>
 80136fa:	f04f 0a03 	mov.w	sl, #3
 80136fe:	e787      	b.n	8013610 <_scanf_float+0x188>
 8013700:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013704:	4639      	mov	r1, r7
 8013706:	4640      	mov	r0, r8
 8013708:	4798      	blx	r3
 801370a:	2800      	cmp	r0, #0
 801370c:	f43f aedf 	beq.w	80134ce <_scanf_float+0x46>
 8013710:	e6ea      	b.n	80134e8 <_scanf_float+0x60>
 8013712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801371a:	463a      	mov	r2, r7
 801371c:	4640      	mov	r0, r8
 801371e:	4798      	blx	r3
 8013720:	6923      	ldr	r3, [r4, #16]
 8013722:	3b01      	subs	r3, #1
 8013724:	6123      	str	r3, [r4, #16]
 8013726:	e6ec      	b.n	8013502 <_scanf_float+0x7a>
 8013728:	1e6b      	subs	r3, r5, #1
 801372a:	2b06      	cmp	r3, #6
 801372c:	d825      	bhi.n	801377a <_scanf_float+0x2f2>
 801372e:	2d02      	cmp	r5, #2
 8013730:	d836      	bhi.n	80137a0 <_scanf_float+0x318>
 8013732:	455e      	cmp	r6, fp
 8013734:	f67f aee8 	bls.w	8013508 <_scanf_float+0x80>
 8013738:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801373c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013740:	463a      	mov	r2, r7
 8013742:	4640      	mov	r0, r8
 8013744:	4798      	blx	r3
 8013746:	6923      	ldr	r3, [r4, #16]
 8013748:	3b01      	subs	r3, #1
 801374a:	6123      	str	r3, [r4, #16]
 801374c:	e7f1      	b.n	8013732 <_scanf_float+0x2aa>
 801374e:	9802      	ldr	r0, [sp, #8]
 8013750:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013754:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013758:	9002      	str	r0, [sp, #8]
 801375a:	463a      	mov	r2, r7
 801375c:	4640      	mov	r0, r8
 801375e:	4798      	blx	r3
 8013760:	6923      	ldr	r3, [r4, #16]
 8013762:	3b01      	subs	r3, #1
 8013764:	6123      	str	r3, [r4, #16]
 8013766:	f10a 3aff 	add.w	sl, sl, #4294967295
 801376a:	fa5f fa8a 	uxtb.w	sl, sl
 801376e:	f1ba 0f02 	cmp.w	sl, #2
 8013772:	d1ec      	bne.n	801374e <_scanf_float+0x2c6>
 8013774:	3d03      	subs	r5, #3
 8013776:	b2ed      	uxtb	r5, r5
 8013778:	1b76      	subs	r6, r6, r5
 801377a:	6823      	ldr	r3, [r4, #0]
 801377c:	05da      	lsls	r2, r3, #23
 801377e:	d52f      	bpl.n	80137e0 <_scanf_float+0x358>
 8013780:	055b      	lsls	r3, r3, #21
 8013782:	d510      	bpl.n	80137a6 <_scanf_float+0x31e>
 8013784:	455e      	cmp	r6, fp
 8013786:	f67f aebf 	bls.w	8013508 <_scanf_float+0x80>
 801378a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801378e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013792:	463a      	mov	r2, r7
 8013794:	4640      	mov	r0, r8
 8013796:	4798      	blx	r3
 8013798:	6923      	ldr	r3, [r4, #16]
 801379a:	3b01      	subs	r3, #1
 801379c:	6123      	str	r3, [r4, #16]
 801379e:	e7f1      	b.n	8013784 <_scanf_float+0x2fc>
 80137a0:	46aa      	mov	sl, r5
 80137a2:	9602      	str	r6, [sp, #8]
 80137a4:	e7df      	b.n	8013766 <_scanf_float+0x2de>
 80137a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80137aa:	6923      	ldr	r3, [r4, #16]
 80137ac:	2965      	cmp	r1, #101	; 0x65
 80137ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80137b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80137b6:	6123      	str	r3, [r4, #16]
 80137b8:	d00c      	beq.n	80137d4 <_scanf_float+0x34c>
 80137ba:	2945      	cmp	r1, #69	; 0x45
 80137bc:	d00a      	beq.n	80137d4 <_scanf_float+0x34c>
 80137be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137c2:	463a      	mov	r2, r7
 80137c4:	4640      	mov	r0, r8
 80137c6:	4798      	blx	r3
 80137c8:	6923      	ldr	r3, [r4, #16]
 80137ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80137ce:	3b01      	subs	r3, #1
 80137d0:	1eb5      	subs	r5, r6, #2
 80137d2:	6123      	str	r3, [r4, #16]
 80137d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137d8:	463a      	mov	r2, r7
 80137da:	4640      	mov	r0, r8
 80137dc:	4798      	blx	r3
 80137de:	462e      	mov	r6, r5
 80137e0:	6825      	ldr	r5, [r4, #0]
 80137e2:	f015 0510 	ands.w	r5, r5, #16
 80137e6:	d158      	bne.n	801389a <_scanf_float+0x412>
 80137e8:	7035      	strb	r5, [r6, #0]
 80137ea:	6823      	ldr	r3, [r4, #0]
 80137ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80137f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80137f4:	d11c      	bne.n	8013830 <_scanf_float+0x3a8>
 80137f6:	9b01      	ldr	r3, [sp, #4]
 80137f8:	454b      	cmp	r3, r9
 80137fa:	eba3 0209 	sub.w	r2, r3, r9
 80137fe:	d124      	bne.n	801384a <_scanf_float+0x3c2>
 8013800:	2200      	movs	r2, #0
 8013802:	4659      	mov	r1, fp
 8013804:	4640      	mov	r0, r8
 8013806:	f000 ff25 	bl	8014654 <_strtod_r>
 801380a:	9b03      	ldr	r3, [sp, #12]
 801380c:	6821      	ldr	r1, [r4, #0]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	f011 0f02 	tst.w	r1, #2
 8013814:	ec57 6b10 	vmov	r6, r7, d0
 8013818:	f103 0204 	add.w	r2, r3, #4
 801381c:	d020      	beq.n	8013860 <_scanf_float+0x3d8>
 801381e:	9903      	ldr	r1, [sp, #12]
 8013820:	600a      	str	r2, [r1, #0]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	e9c3 6700 	strd	r6, r7, [r3]
 8013828:	68e3      	ldr	r3, [r4, #12]
 801382a:	3301      	adds	r3, #1
 801382c:	60e3      	str	r3, [r4, #12]
 801382e:	e66c      	b.n	801350a <_scanf_float+0x82>
 8013830:	9b04      	ldr	r3, [sp, #16]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d0e4      	beq.n	8013800 <_scanf_float+0x378>
 8013836:	9905      	ldr	r1, [sp, #20]
 8013838:	230a      	movs	r3, #10
 801383a:	462a      	mov	r2, r5
 801383c:	3101      	adds	r1, #1
 801383e:	4640      	mov	r0, r8
 8013840:	f000 ff9e 	bl	8014780 <_strtol_r>
 8013844:	9b04      	ldr	r3, [sp, #16]
 8013846:	9e05      	ldr	r6, [sp, #20]
 8013848:	1ac2      	subs	r2, r0, r3
 801384a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801384e:	429e      	cmp	r6, r3
 8013850:	bf28      	it	cs
 8013852:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013856:	4912      	ldr	r1, [pc, #72]	; (80138a0 <_scanf_float+0x418>)
 8013858:	4630      	mov	r0, r6
 801385a:	f000 f82b 	bl	80138b4 <siprintf>
 801385e:	e7cf      	b.n	8013800 <_scanf_float+0x378>
 8013860:	f011 0f04 	tst.w	r1, #4
 8013864:	9903      	ldr	r1, [sp, #12]
 8013866:	600a      	str	r2, [r1, #0]
 8013868:	d1db      	bne.n	8013822 <_scanf_float+0x39a>
 801386a:	f8d3 8000 	ldr.w	r8, [r3]
 801386e:	ee10 2a10 	vmov	r2, s0
 8013872:	ee10 0a10 	vmov	r0, s0
 8013876:	463b      	mov	r3, r7
 8013878:	4639      	mov	r1, r7
 801387a:	f7ed f957 	bl	8000b2c <__aeabi_dcmpun>
 801387e:	b128      	cbz	r0, 801388c <_scanf_float+0x404>
 8013880:	4808      	ldr	r0, [pc, #32]	; (80138a4 <_scanf_float+0x41c>)
 8013882:	f000 f811 	bl	80138a8 <nanf>
 8013886:	ed88 0a00 	vstr	s0, [r8]
 801388a:	e7cd      	b.n	8013828 <_scanf_float+0x3a0>
 801388c:	4630      	mov	r0, r6
 801388e:	4639      	mov	r1, r7
 8013890:	f7ed f9aa 	bl	8000be8 <__aeabi_d2f>
 8013894:	f8c8 0000 	str.w	r0, [r8]
 8013898:	e7c6      	b.n	8013828 <_scanf_float+0x3a0>
 801389a:	2500      	movs	r5, #0
 801389c:	e635      	b.n	801350a <_scanf_float+0x82>
 801389e:	bf00      	nop
 80138a0:	0801a0d2 	.word	0x0801a0d2
 80138a4:	0801a563 	.word	0x0801a563

080138a8 <nanf>:
 80138a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80138b0 <nanf+0x8>
 80138ac:	4770      	bx	lr
 80138ae:	bf00      	nop
 80138b0:	7fc00000 	.word	0x7fc00000

080138b4 <siprintf>:
 80138b4:	b40e      	push	{r1, r2, r3}
 80138b6:	b500      	push	{lr}
 80138b8:	b09c      	sub	sp, #112	; 0x70
 80138ba:	ab1d      	add	r3, sp, #116	; 0x74
 80138bc:	9002      	str	r0, [sp, #8]
 80138be:	9006      	str	r0, [sp, #24]
 80138c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80138c4:	4809      	ldr	r0, [pc, #36]	; (80138ec <siprintf+0x38>)
 80138c6:	9107      	str	r1, [sp, #28]
 80138c8:	9104      	str	r1, [sp, #16]
 80138ca:	4909      	ldr	r1, [pc, #36]	; (80138f0 <siprintf+0x3c>)
 80138cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80138d0:	9105      	str	r1, [sp, #20]
 80138d2:	6800      	ldr	r0, [r0, #0]
 80138d4:	9301      	str	r3, [sp, #4]
 80138d6:	a902      	add	r1, sp, #8
 80138d8:	f003 f864 	bl	80169a4 <_svfiprintf_r>
 80138dc:	9b02      	ldr	r3, [sp, #8]
 80138de:	2200      	movs	r2, #0
 80138e0:	701a      	strb	r2, [r3, #0]
 80138e2:	b01c      	add	sp, #112	; 0x70
 80138e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80138e8:	b003      	add	sp, #12
 80138ea:	4770      	bx	lr
 80138ec:	2000019c 	.word	0x2000019c
 80138f0:	ffff0208 	.word	0xffff0208

080138f4 <siscanf>:
 80138f4:	b40e      	push	{r1, r2, r3}
 80138f6:	b510      	push	{r4, lr}
 80138f8:	b09f      	sub	sp, #124	; 0x7c
 80138fa:	ac21      	add	r4, sp, #132	; 0x84
 80138fc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013900:	f854 2b04 	ldr.w	r2, [r4], #4
 8013904:	9201      	str	r2, [sp, #4]
 8013906:	f8ad 101c 	strh.w	r1, [sp, #28]
 801390a:	9004      	str	r0, [sp, #16]
 801390c:	9008      	str	r0, [sp, #32]
 801390e:	f7ec fc5f 	bl	80001d0 <strlen>
 8013912:	4b0c      	ldr	r3, [pc, #48]	; (8013944 <siscanf+0x50>)
 8013914:	9005      	str	r0, [sp, #20]
 8013916:	9009      	str	r0, [sp, #36]	; 0x24
 8013918:	930d      	str	r3, [sp, #52]	; 0x34
 801391a:	480b      	ldr	r0, [pc, #44]	; (8013948 <siscanf+0x54>)
 801391c:	9a01      	ldr	r2, [sp, #4]
 801391e:	6800      	ldr	r0, [r0, #0]
 8013920:	9403      	str	r4, [sp, #12]
 8013922:	2300      	movs	r3, #0
 8013924:	9311      	str	r3, [sp, #68]	; 0x44
 8013926:	9316      	str	r3, [sp, #88]	; 0x58
 8013928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801392c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013930:	a904      	add	r1, sp, #16
 8013932:	4623      	mov	r3, r4
 8013934:	f003 f990 	bl	8016c58 <__ssvfiscanf_r>
 8013938:	b01f      	add	sp, #124	; 0x7c
 801393a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801393e:	b003      	add	sp, #12
 8013940:	4770      	bx	lr
 8013942:	bf00      	nop
 8013944:	0801396f 	.word	0x0801396f
 8013948:	2000019c 	.word	0x2000019c

0801394c <__sread>:
 801394c:	b510      	push	{r4, lr}
 801394e:	460c      	mov	r4, r1
 8013950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013954:	f003 fc44 	bl	80171e0 <_read_r>
 8013958:	2800      	cmp	r0, #0
 801395a:	bfab      	itete	ge
 801395c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801395e:	89a3      	ldrhlt	r3, [r4, #12]
 8013960:	181b      	addge	r3, r3, r0
 8013962:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013966:	bfac      	ite	ge
 8013968:	6563      	strge	r3, [r4, #84]	; 0x54
 801396a:	81a3      	strhlt	r3, [r4, #12]
 801396c:	bd10      	pop	{r4, pc}

0801396e <__seofread>:
 801396e:	2000      	movs	r0, #0
 8013970:	4770      	bx	lr

08013972 <__swrite>:
 8013972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013976:	461f      	mov	r7, r3
 8013978:	898b      	ldrh	r3, [r1, #12]
 801397a:	05db      	lsls	r3, r3, #23
 801397c:	4605      	mov	r5, r0
 801397e:	460c      	mov	r4, r1
 8013980:	4616      	mov	r6, r2
 8013982:	d505      	bpl.n	8013990 <__swrite+0x1e>
 8013984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013988:	2302      	movs	r3, #2
 801398a:	2200      	movs	r2, #0
 801398c:	f002 fa00 	bl	8015d90 <_lseek_r>
 8013990:	89a3      	ldrh	r3, [r4, #12]
 8013992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801399a:	81a3      	strh	r3, [r4, #12]
 801399c:	4632      	mov	r2, r6
 801399e:	463b      	mov	r3, r7
 80139a0:	4628      	mov	r0, r5
 80139a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139a6:	f000 beed 	b.w	8014784 <_write_r>

080139aa <__sseek>:
 80139aa:	b510      	push	{r4, lr}
 80139ac:	460c      	mov	r4, r1
 80139ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139b2:	f002 f9ed 	bl	8015d90 <_lseek_r>
 80139b6:	1c43      	adds	r3, r0, #1
 80139b8:	89a3      	ldrh	r3, [r4, #12]
 80139ba:	bf15      	itete	ne
 80139bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80139be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80139c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80139c6:	81a3      	strheq	r3, [r4, #12]
 80139c8:	bf18      	it	ne
 80139ca:	81a3      	strhne	r3, [r4, #12]
 80139cc:	bd10      	pop	{r4, pc}

080139ce <__sclose>:
 80139ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139d2:	f000 bee9 	b.w	80147a8 <_close_r>

080139d6 <strstr>:
 80139d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139d8:	780c      	ldrb	r4, [r1, #0]
 80139da:	b164      	cbz	r4, 80139f6 <strstr+0x20>
 80139dc:	4603      	mov	r3, r0
 80139de:	781a      	ldrb	r2, [r3, #0]
 80139e0:	4618      	mov	r0, r3
 80139e2:	1c5e      	adds	r6, r3, #1
 80139e4:	b90a      	cbnz	r2, 80139ea <strstr+0x14>
 80139e6:	4610      	mov	r0, r2
 80139e8:	e005      	b.n	80139f6 <strstr+0x20>
 80139ea:	4294      	cmp	r4, r2
 80139ec:	d108      	bne.n	8013a00 <strstr+0x2a>
 80139ee:	460d      	mov	r5, r1
 80139f0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80139f4:	b902      	cbnz	r2, 80139f8 <strstr+0x22>
 80139f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139f8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80139fc:	4297      	cmp	r7, r2
 80139fe:	d0f7      	beq.n	80139f0 <strstr+0x1a>
 8013a00:	4633      	mov	r3, r6
 8013a02:	e7ec      	b.n	80139de <strstr+0x8>

08013a04 <sulp>:
 8013a04:	b570      	push	{r4, r5, r6, lr}
 8013a06:	4604      	mov	r4, r0
 8013a08:	460d      	mov	r5, r1
 8013a0a:	ec45 4b10 	vmov	d0, r4, r5
 8013a0e:	4616      	mov	r6, r2
 8013a10:	f002 fd64 	bl	80164dc <__ulp>
 8013a14:	ec51 0b10 	vmov	r0, r1, d0
 8013a18:	b17e      	cbz	r6, 8013a3a <sulp+0x36>
 8013a1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013a1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	dd09      	ble.n	8013a3a <sulp+0x36>
 8013a26:	051b      	lsls	r3, r3, #20
 8013a28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013a2c:	2400      	movs	r4, #0
 8013a2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013a32:	4622      	mov	r2, r4
 8013a34:	462b      	mov	r3, r5
 8013a36:	f7ec fddf 	bl	80005f8 <__aeabi_dmul>
 8013a3a:	bd70      	pop	{r4, r5, r6, pc}
 8013a3c:	0000      	movs	r0, r0
	...

08013a40 <_strtod_l>:
 8013a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a44:	b0a3      	sub	sp, #140	; 0x8c
 8013a46:	461f      	mov	r7, r3
 8013a48:	2300      	movs	r3, #0
 8013a4a:	931e      	str	r3, [sp, #120]	; 0x78
 8013a4c:	4ba4      	ldr	r3, [pc, #656]	; (8013ce0 <_strtod_l+0x2a0>)
 8013a4e:	9219      	str	r2, [sp, #100]	; 0x64
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	9307      	str	r3, [sp, #28]
 8013a54:	4604      	mov	r4, r0
 8013a56:	4618      	mov	r0, r3
 8013a58:	4688      	mov	r8, r1
 8013a5a:	f7ec fbb9 	bl	80001d0 <strlen>
 8013a5e:	f04f 0a00 	mov.w	sl, #0
 8013a62:	4605      	mov	r5, r0
 8013a64:	f04f 0b00 	mov.w	fp, #0
 8013a68:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013a6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013a6e:	781a      	ldrb	r2, [r3, #0]
 8013a70:	2a2b      	cmp	r2, #43	; 0x2b
 8013a72:	d04c      	beq.n	8013b0e <_strtod_l+0xce>
 8013a74:	d839      	bhi.n	8013aea <_strtod_l+0xaa>
 8013a76:	2a0d      	cmp	r2, #13
 8013a78:	d832      	bhi.n	8013ae0 <_strtod_l+0xa0>
 8013a7a:	2a08      	cmp	r2, #8
 8013a7c:	d832      	bhi.n	8013ae4 <_strtod_l+0xa4>
 8013a7e:	2a00      	cmp	r2, #0
 8013a80:	d03c      	beq.n	8013afc <_strtod_l+0xbc>
 8013a82:	2300      	movs	r3, #0
 8013a84:	930e      	str	r3, [sp, #56]	; 0x38
 8013a86:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013a88:	7833      	ldrb	r3, [r6, #0]
 8013a8a:	2b30      	cmp	r3, #48	; 0x30
 8013a8c:	f040 80b4 	bne.w	8013bf8 <_strtod_l+0x1b8>
 8013a90:	7873      	ldrb	r3, [r6, #1]
 8013a92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013a96:	2b58      	cmp	r3, #88	; 0x58
 8013a98:	d16c      	bne.n	8013b74 <_strtod_l+0x134>
 8013a9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013a9c:	9301      	str	r3, [sp, #4]
 8013a9e:	ab1e      	add	r3, sp, #120	; 0x78
 8013aa0:	9702      	str	r7, [sp, #8]
 8013aa2:	9300      	str	r3, [sp, #0]
 8013aa4:	4a8f      	ldr	r2, [pc, #572]	; (8013ce4 <_strtod_l+0x2a4>)
 8013aa6:	ab1f      	add	r3, sp, #124	; 0x7c
 8013aa8:	a91d      	add	r1, sp, #116	; 0x74
 8013aaa:	4620      	mov	r0, r4
 8013aac:	f001 fe60 	bl	8015770 <__gethex>
 8013ab0:	f010 0707 	ands.w	r7, r0, #7
 8013ab4:	4605      	mov	r5, r0
 8013ab6:	d005      	beq.n	8013ac4 <_strtod_l+0x84>
 8013ab8:	2f06      	cmp	r7, #6
 8013aba:	d12a      	bne.n	8013b12 <_strtod_l+0xd2>
 8013abc:	3601      	adds	r6, #1
 8013abe:	2300      	movs	r3, #0
 8013ac0:	961d      	str	r6, [sp, #116]	; 0x74
 8013ac2:	930e      	str	r3, [sp, #56]	; 0x38
 8013ac4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	f040 8596 	bne.w	80145f8 <_strtod_l+0xbb8>
 8013acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ace:	b1db      	cbz	r3, 8013b08 <_strtod_l+0xc8>
 8013ad0:	4652      	mov	r2, sl
 8013ad2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013ad6:	ec43 2b10 	vmov	d0, r2, r3
 8013ada:	b023      	add	sp, #140	; 0x8c
 8013adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ae0:	2a20      	cmp	r2, #32
 8013ae2:	d1ce      	bne.n	8013a82 <_strtod_l+0x42>
 8013ae4:	3301      	adds	r3, #1
 8013ae6:	931d      	str	r3, [sp, #116]	; 0x74
 8013ae8:	e7c0      	b.n	8013a6c <_strtod_l+0x2c>
 8013aea:	2a2d      	cmp	r2, #45	; 0x2d
 8013aec:	d1c9      	bne.n	8013a82 <_strtod_l+0x42>
 8013aee:	2201      	movs	r2, #1
 8013af0:	920e      	str	r2, [sp, #56]	; 0x38
 8013af2:	1c5a      	adds	r2, r3, #1
 8013af4:	921d      	str	r2, [sp, #116]	; 0x74
 8013af6:	785b      	ldrb	r3, [r3, #1]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d1c4      	bne.n	8013a86 <_strtod_l+0x46>
 8013afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013afe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	f040 8576 	bne.w	80145f4 <_strtod_l+0xbb4>
 8013b08:	4652      	mov	r2, sl
 8013b0a:	465b      	mov	r3, fp
 8013b0c:	e7e3      	b.n	8013ad6 <_strtod_l+0x96>
 8013b0e:	2200      	movs	r2, #0
 8013b10:	e7ee      	b.n	8013af0 <_strtod_l+0xb0>
 8013b12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013b14:	b13a      	cbz	r2, 8013b26 <_strtod_l+0xe6>
 8013b16:	2135      	movs	r1, #53	; 0x35
 8013b18:	a820      	add	r0, sp, #128	; 0x80
 8013b1a:	f002 fdea 	bl	80166f2 <__copybits>
 8013b1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013b20:	4620      	mov	r0, r4
 8013b22:	f002 f9af 	bl	8015e84 <_Bfree>
 8013b26:	3f01      	subs	r7, #1
 8013b28:	2f05      	cmp	r7, #5
 8013b2a:	d807      	bhi.n	8013b3c <_strtod_l+0xfc>
 8013b2c:	e8df f007 	tbb	[pc, r7]
 8013b30:	1d180b0e 	.word	0x1d180b0e
 8013b34:	030e      	.short	0x030e
 8013b36:	f04f 0b00 	mov.w	fp, #0
 8013b3a:	46da      	mov	sl, fp
 8013b3c:	0728      	lsls	r0, r5, #28
 8013b3e:	d5c1      	bpl.n	8013ac4 <_strtod_l+0x84>
 8013b40:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013b44:	e7be      	b.n	8013ac4 <_strtod_l+0x84>
 8013b46:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8013b4a:	e7f7      	b.n	8013b3c <_strtod_l+0xfc>
 8013b4c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8013b50:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013b52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013b56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013b5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013b5e:	e7ed      	b.n	8013b3c <_strtod_l+0xfc>
 8013b60:	f8df b184 	ldr.w	fp, [pc, #388]	; 8013ce8 <_strtod_l+0x2a8>
 8013b64:	f04f 0a00 	mov.w	sl, #0
 8013b68:	e7e8      	b.n	8013b3c <_strtod_l+0xfc>
 8013b6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013b6e:	f04f 3aff 	mov.w	sl, #4294967295
 8013b72:	e7e3      	b.n	8013b3c <_strtod_l+0xfc>
 8013b74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013b76:	1c5a      	adds	r2, r3, #1
 8013b78:	921d      	str	r2, [sp, #116]	; 0x74
 8013b7a:	785b      	ldrb	r3, [r3, #1]
 8013b7c:	2b30      	cmp	r3, #48	; 0x30
 8013b7e:	d0f9      	beq.n	8013b74 <_strtod_l+0x134>
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d09f      	beq.n	8013ac4 <_strtod_l+0x84>
 8013b84:	2301      	movs	r3, #1
 8013b86:	f04f 0900 	mov.w	r9, #0
 8013b8a:	9304      	str	r3, [sp, #16]
 8013b8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013b8e:	930a      	str	r3, [sp, #40]	; 0x28
 8013b90:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013b94:	464f      	mov	r7, r9
 8013b96:	220a      	movs	r2, #10
 8013b98:	981d      	ldr	r0, [sp, #116]	; 0x74
 8013b9a:	7806      	ldrb	r6, [r0, #0]
 8013b9c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013ba0:	b2d9      	uxtb	r1, r3
 8013ba2:	2909      	cmp	r1, #9
 8013ba4:	d92a      	bls.n	8013bfc <_strtod_l+0x1bc>
 8013ba6:	9907      	ldr	r1, [sp, #28]
 8013ba8:	462a      	mov	r2, r5
 8013baa:	f003 fb7f 	bl	80172ac <strncmp>
 8013bae:	b398      	cbz	r0, 8013c18 <_strtod_l+0x1d8>
 8013bb0:	2000      	movs	r0, #0
 8013bb2:	4633      	mov	r3, r6
 8013bb4:	463d      	mov	r5, r7
 8013bb6:	9007      	str	r0, [sp, #28]
 8013bb8:	4602      	mov	r2, r0
 8013bba:	2b65      	cmp	r3, #101	; 0x65
 8013bbc:	d001      	beq.n	8013bc2 <_strtod_l+0x182>
 8013bbe:	2b45      	cmp	r3, #69	; 0x45
 8013bc0:	d118      	bne.n	8013bf4 <_strtod_l+0x1b4>
 8013bc2:	b91d      	cbnz	r5, 8013bcc <_strtod_l+0x18c>
 8013bc4:	9b04      	ldr	r3, [sp, #16]
 8013bc6:	4303      	orrs	r3, r0
 8013bc8:	d098      	beq.n	8013afc <_strtod_l+0xbc>
 8013bca:	2500      	movs	r5, #0
 8013bcc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8013bd0:	f108 0301 	add.w	r3, r8, #1
 8013bd4:	931d      	str	r3, [sp, #116]	; 0x74
 8013bd6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013bda:	2b2b      	cmp	r3, #43	; 0x2b
 8013bdc:	d075      	beq.n	8013cca <_strtod_l+0x28a>
 8013bde:	2b2d      	cmp	r3, #45	; 0x2d
 8013be0:	d07b      	beq.n	8013cda <_strtod_l+0x29a>
 8013be2:	f04f 0c00 	mov.w	ip, #0
 8013be6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013bea:	2909      	cmp	r1, #9
 8013bec:	f240 8082 	bls.w	8013cf4 <_strtod_l+0x2b4>
 8013bf0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8013bf4:	2600      	movs	r6, #0
 8013bf6:	e09d      	b.n	8013d34 <_strtod_l+0x2f4>
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	e7c4      	b.n	8013b86 <_strtod_l+0x146>
 8013bfc:	2f08      	cmp	r7, #8
 8013bfe:	bfd8      	it	le
 8013c00:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8013c02:	f100 0001 	add.w	r0, r0, #1
 8013c06:	bfda      	itte	le
 8013c08:	fb02 3301 	mlale	r3, r2, r1, r3
 8013c0c:	9309      	strle	r3, [sp, #36]	; 0x24
 8013c0e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8013c12:	3701      	adds	r7, #1
 8013c14:	901d      	str	r0, [sp, #116]	; 0x74
 8013c16:	e7bf      	b.n	8013b98 <_strtod_l+0x158>
 8013c18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013c1a:	195a      	adds	r2, r3, r5
 8013c1c:	921d      	str	r2, [sp, #116]	; 0x74
 8013c1e:	5d5b      	ldrb	r3, [r3, r5]
 8013c20:	2f00      	cmp	r7, #0
 8013c22:	d037      	beq.n	8013c94 <_strtod_l+0x254>
 8013c24:	9007      	str	r0, [sp, #28]
 8013c26:	463d      	mov	r5, r7
 8013c28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013c2c:	2a09      	cmp	r2, #9
 8013c2e:	d912      	bls.n	8013c56 <_strtod_l+0x216>
 8013c30:	2201      	movs	r2, #1
 8013c32:	e7c2      	b.n	8013bba <_strtod_l+0x17a>
 8013c34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013c36:	1c5a      	adds	r2, r3, #1
 8013c38:	921d      	str	r2, [sp, #116]	; 0x74
 8013c3a:	785b      	ldrb	r3, [r3, #1]
 8013c3c:	3001      	adds	r0, #1
 8013c3e:	2b30      	cmp	r3, #48	; 0x30
 8013c40:	d0f8      	beq.n	8013c34 <_strtod_l+0x1f4>
 8013c42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013c46:	2a08      	cmp	r2, #8
 8013c48:	f200 84db 	bhi.w	8014602 <_strtod_l+0xbc2>
 8013c4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013c4e:	9007      	str	r0, [sp, #28]
 8013c50:	2000      	movs	r0, #0
 8013c52:	920a      	str	r2, [sp, #40]	; 0x28
 8013c54:	4605      	mov	r5, r0
 8013c56:	3b30      	subs	r3, #48	; 0x30
 8013c58:	f100 0201 	add.w	r2, r0, #1
 8013c5c:	d014      	beq.n	8013c88 <_strtod_l+0x248>
 8013c5e:	9907      	ldr	r1, [sp, #28]
 8013c60:	4411      	add	r1, r2
 8013c62:	9107      	str	r1, [sp, #28]
 8013c64:	462a      	mov	r2, r5
 8013c66:	eb00 0e05 	add.w	lr, r0, r5
 8013c6a:	210a      	movs	r1, #10
 8013c6c:	4572      	cmp	r2, lr
 8013c6e:	d113      	bne.n	8013c98 <_strtod_l+0x258>
 8013c70:	182a      	adds	r2, r5, r0
 8013c72:	2a08      	cmp	r2, #8
 8013c74:	f105 0501 	add.w	r5, r5, #1
 8013c78:	4405      	add	r5, r0
 8013c7a:	dc1c      	bgt.n	8013cb6 <_strtod_l+0x276>
 8013c7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c7e:	220a      	movs	r2, #10
 8013c80:	fb02 3301 	mla	r3, r2, r1, r3
 8013c84:	9309      	str	r3, [sp, #36]	; 0x24
 8013c86:	2200      	movs	r2, #0
 8013c88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013c8a:	1c59      	adds	r1, r3, #1
 8013c8c:	911d      	str	r1, [sp, #116]	; 0x74
 8013c8e:	785b      	ldrb	r3, [r3, #1]
 8013c90:	4610      	mov	r0, r2
 8013c92:	e7c9      	b.n	8013c28 <_strtod_l+0x1e8>
 8013c94:	4638      	mov	r0, r7
 8013c96:	e7d2      	b.n	8013c3e <_strtod_l+0x1fe>
 8013c98:	2a08      	cmp	r2, #8
 8013c9a:	dc04      	bgt.n	8013ca6 <_strtod_l+0x266>
 8013c9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8013c9e:	434e      	muls	r6, r1
 8013ca0:	9609      	str	r6, [sp, #36]	; 0x24
 8013ca2:	3201      	adds	r2, #1
 8013ca4:	e7e2      	b.n	8013c6c <_strtod_l+0x22c>
 8013ca6:	f102 0c01 	add.w	ip, r2, #1
 8013caa:	f1bc 0f10 	cmp.w	ip, #16
 8013cae:	bfd8      	it	le
 8013cb0:	fb01 f909 	mulle.w	r9, r1, r9
 8013cb4:	e7f5      	b.n	8013ca2 <_strtod_l+0x262>
 8013cb6:	2d10      	cmp	r5, #16
 8013cb8:	bfdc      	itt	le
 8013cba:	220a      	movle	r2, #10
 8013cbc:	fb02 3909 	mlale	r9, r2, r9, r3
 8013cc0:	e7e1      	b.n	8013c86 <_strtod_l+0x246>
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	9307      	str	r3, [sp, #28]
 8013cc6:	2201      	movs	r2, #1
 8013cc8:	e77c      	b.n	8013bc4 <_strtod_l+0x184>
 8013cca:	f04f 0c00 	mov.w	ip, #0
 8013cce:	f108 0302 	add.w	r3, r8, #2
 8013cd2:	931d      	str	r3, [sp, #116]	; 0x74
 8013cd4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013cd8:	e785      	b.n	8013be6 <_strtod_l+0x1a6>
 8013cda:	f04f 0c01 	mov.w	ip, #1
 8013cde:	e7f6      	b.n	8013cce <_strtod_l+0x28e>
 8013ce0:	0801a38c 	.word	0x0801a38c
 8013ce4:	0801a0d8 	.word	0x0801a0d8
 8013ce8:	7ff00000 	.word	0x7ff00000
 8013cec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013cee:	1c59      	adds	r1, r3, #1
 8013cf0:	911d      	str	r1, [sp, #116]	; 0x74
 8013cf2:	785b      	ldrb	r3, [r3, #1]
 8013cf4:	2b30      	cmp	r3, #48	; 0x30
 8013cf6:	d0f9      	beq.n	8013cec <_strtod_l+0x2ac>
 8013cf8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8013cfc:	2908      	cmp	r1, #8
 8013cfe:	f63f af79 	bhi.w	8013bf4 <_strtod_l+0x1b4>
 8013d02:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013d06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013d08:	9308      	str	r3, [sp, #32]
 8013d0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013d0c:	1c59      	adds	r1, r3, #1
 8013d0e:	911d      	str	r1, [sp, #116]	; 0x74
 8013d10:	785b      	ldrb	r3, [r3, #1]
 8013d12:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8013d16:	2e09      	cmp	r6, #9
 8013d18:	d937      	bls.n	8013d8a <_strtod_l+0x34a>
 8013d1a:	9e08      	ldr	r6, [sp, #32]
 8013d1c:	1b89      	subs	r1, r1, r6
 8013d1e:	2908      	cmp	r1, #8
 8013d20:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013d24:	dc02      	bgt.n	8013d2c <_strtod_l+0x2ec>
 8013d26:	4576      	cmp	r6, lr
 8013d28:	bfa8      	it	ge
 8013d2a:	4676      	movge	r6, lr
 8013d2c:	f1bc 0f00 	cmp.w	ip, #0
 8013d30:	d000      	beq.n	8013d34 <_strtod_l+0x2f4>
 8013d32:	4276      	negs	r6, r6
 8013d34:	2d00      	cmp	r5, #0
 8013d36:	d14f      	bne.n	8013dd8 <_strtod_l+0x398>
 8013d38:	9904      	ldr	r1, [sp, #16]
 8013d3a:	4301      	orrs	r1, r0
 8013d3c:	f47f aec2 	bne.w	8013ac4 <_strtod_l+0x84>
 8013d40:	2a00      	cmp	r2, #0
 8013d42:	f47f aedb 	bne.w	8013afc <_strtod_l+0xbc>
 8013d46:	2b69      	cmp	r3, #105	; 0x69
 8013d48:	d027      	beq.n	8013d9a <_strtod_l+0x35a>
 8013d4a:	dc24      	bgt.n	8013d96 <_strtod_l+0x356>
 8013d4c:	2b49      	cmp	r3, #73	; 0x49
 8013d4e:	d024      	beq.n	8013d9a <_strtod_l+0x35a>
 8013d50:	2b4e      	cmp	r3, #78	; 0x4e
 8013d52:	f47f aed3 	bne.w	8013afc <_strtod_l+0xbc>
 8013d56:	499e      	ldr	r1, [pc, #632]	; (8013fd0 <_strtod_l+0x590>)
 8013d58:	a81d      	add	r0, sp, #116	; 0x74
 8013d5a:	f001 ff61 	bl	8015c20 <__match>
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	f43f aecc 	beq.w	8013afc <_strtod_l+0xbc>
 8013d64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013d66:	781b      	ldrb	r3, [r3, #0]
 8013d68:	2b28      	cmp	r3, #40	; 0x28
 8013d6a:	d12d      	bne.n	8013dc8 <_strtod_l+0x388>
 8013d6c:	4999      	ldr	r1, [pc, #612]	; (8013fd4 <_strtod_l+0x594>)
 8013d6e:	aa20      	add	r2, sp, #128	; 0x80
 8013d70:	a81d      	add	r0, sp, #116	; 0x74
 8013d72:	f001 ff69 	bl	8015c48 <__hexnan>
 8013d76:	2805      	cmp	r0, #5
 8013d78:	d126      	bne.n	8013dc8 <_strtod_l+0x388>
 8013d7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013d7c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8013d80:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013d84:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013d88:	e69c      	b.n	8013ac4 <_strtod_l+0x84>
 8013d8a:	210a      	movs	r1, #10
 8013d8c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013d90:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013d94:	e7b9      	b.n	8013d0a <_strtod_l+0x2ca>
 8013d96:	2b6e      	cmp	r3, #110	; 0x6e
 8013d98:	e7db      	b.n	8013d52 <_strtod_l+0x312>
 8013d9a:	498f      	ldr	r1, [pc, #572]	; (8013fd8 <_strtod_l+0x598>)
 8013d9c:	a81d      	add	r0, sp, #116	; 0x74
 8013d9e:	f001 ff3f 	bl	8015c20 <__match>
 8013da2:	2800      	cmp	r0, #0
 8013da4:	f43f aeaa 	beq.w	8013afc <_strtod_l+0xbc>
 8013da8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013daa:	498c      	ldr	r1, [pc, #560]	; (8013fdc <_strtod_l+0x59c>)
 8013dac:	3b01      	subs	r3, #1
 8013dae:	a81d      	add	r0, sp, #116	; 0x74
 8013db0:	931d      	str	r3, [sp, #116]	; 0x74
 8013db2:	f001 ff35 	bl	8015c20 <__match>
 8013db6:	b910      	cbnz	r0, 8013dbe <_strtod_l+0x37e>
 8013db8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013dba:	3301      	adds	r3, #1
 8013dbc:	931d      	str	r3, [sp, #116]	; 0x74
 8013dbe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8013fec <_strtod_l+0x5ac>
 8013dc2:	f04f 0a00 	mov.w	sl, #0
 8013dc6:	e67d      	b.n	8013ac4 <_strtod_l+0x84>
 8013dc8:	4885      	ldr	r0, [pc, #532]	; (8013fe0 <_strtod_l+0x5a0>)
 8013dca:	f003 fa1d 	bl	8017208 <nan>
 8013dce:	ed8d 0b04 	vstr	d0, [sp, #16]
 8013dd2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8013dd6:	e675      	b.n	8013ac4 <_strtod_l+0x84>
 8013dd8:	9b07      	ldr	r3, [sp, #28]
 8013dda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ddc:	1af3      	subs	r3, r6, r3
 8013dde:	2f00      	cmp	r7, #0
 8013de0:	bf08      	it	eq
 8013de2:	462f      	moveq	r7, r5
 8013de4:	2d10      	cmp	r5, #16
 8013de6:	9308      	str	r3, [sp, #32]
 8013de8:	46a8      	mov	r8, r5
 8013dea:	bfa8      	it	ge
 8013dec:	f04f 0810 	movge.w	r8, #16
 8013df0:	f7ec fb88 	bl	8000504 <__aeabi_ui2d>
 8013df4:	2d09      	cmp	r5, #9
 8013df6:	4682      	mov	sl, r0
 8013df8:	468b      	mov	fp, r1
 8013dfa:	dd13      	ble.n	8013e24 <_strtod_l+0x3e4>
 8013dfc:	4b79      	ldr	r3, [pc, #484]	; (8013fe4 <_strtod_l+0x5a4>)
 8013dfe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013e02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013e06:	f7ec fbf7 	bl	80005f8 <__aeabi_dmul>
 8013e0a:	4682      	mov	sl, r0
 8013e0c:	4648      	mov	r0, r9
 8013e0e:	468b      	mov	fp, r1
 8013e10:	f7ec fb78 	bl	8000504 <__aeabi_ui2d>
 8013e14:	4602      	mov	r2, r0
 8013e16:	460b      	mov	r3, r1
 8013e18:	4650      	mov	r0, sl
 8013e1a:	4659      	mov	r1, fp
 8013e1c:	f7ec fa36 	bl	800028c <__adddf3>
 8013e20:	4682      	mov	sl, r0
 8013e22:	468b      	mov	fp, r1
 8013e24:	2d0f      	cmp	r5, #15
 8013e26:	dc38      	bgt.n	8013e9a <_strtod_l+0x45a>
 8013e28:	9b08      	ldr	r3, [sp, #32]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	f43f ae4a 	beq.w	8013ac4 <_strtod_l+0x84>
 8013e30:	dd24      	ble.n	8013e7c <_strtod_l+0x43c>
 8013e32:	2b16      	cmp	r3, #22
 8013e34:	dc0b      	bgt.n	8013e4e <_strtod_l+0x40e>
 8013e36:	4d6b      	ldr	r5, [pc, #428]	; (8013fe4 <_strtod_l+0x5a4>)
 8013e38:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8013e3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013e40:	4652      	mov	r2, sl
 8013e42:	465b      	mov	r3, fp
 8013e44:	f7ec fbd8 	bl	80005f8 <__aeabi_dmul>
 8013e48:	4682      	mov	sl, r0
 8013e4a:	468b      	mov	fp, r1
 8013e4c:	e63a      	b.n	8013ac4 <_strtod_l+0x84>
 8013e4e:	9a08      	ldr	r2, [sp, #32]
 8013e50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013e54:	4293      	cmp	r3, r2
 8013e56:	db20      	blt.n	8013e9a <_strtod_l+0x45a>
 8013e58:	4c62      	ldr	r4, [pc, #392]	; (8013fe4 <_strtod_l+0x5a4>)
 8013e5a:	f1c5 050f 	rsb	r5, r5, #15
 8013e5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013e62:	4652      	mov	r2, sl
 8013e64:	465b      	mov	r3, fp
 8013e66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e6a:	f7ec fbc5 	bl	80005f8 <__aeabi_dmul>
 8013e6e:	9b08      	ldr	r3, [sp, #32]
 8013e70:	1b5d      	subs	r5, r3, r5
 8013e72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013e76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013e7a:	e7e3      	b.n	8013e44 <_strtod_l+0x404>
 8013e7c:	9b08      	ldr	r3, [sp, #32]
 8013e7e:	3316      	adds	r3, #22
 8013e80:	db0b      	blt.n	8013e9a <_strtod_l+0x45a>
 8013e82:	9b07      	ldr	r3, [sp, #28]
 8013e84:	4a57      	ldr	r2, [pc, #348]	; (8013fe4 <_strtod_l+0x5a4>)
 8013e86:	1b9e      	subs	r6, r3, r6
 8013e88:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8013e8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013e90:	4650      	mov	r0, sl
 8013e92:	4659      	mov	r1, fp
 8013e94:	f7ec fcda 	bl	800084c <__aeabi_ddiv>
 8013e98:	e7d6      	b.n	8013e48 <_strtod_l+0x408>
 8013e9a:	9b08      	ldr	r3, [sp, #32]
 8013e9c:	eba5 0808 	sub.w	r8, r5, r8
 8013ea0:	4498      	add	r8, r3
 8013ea2:	f1b8 0f00 	cmp.w	r8, #0
 8013ea6:	dd71      	ble.n	8013f8c <_strtod_l+0x54c>
 8013ea8:	f018 030f 	ands.w	r3, r8, #15
 8013eac:	d00a      	beq.n	8013ec4 <_strtod_l+0x484>
 8013eae:	494d      	ldr	r1, [pc, #308]	; (8013fe4 <_strtod_l+0x5a4>)
 8013eb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013eb4:	4652      	mov	r2, sl
 8013eb6:	465b      	mov	r3, fp
 8013eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ebc:	f7ec fb9c 	bl	80005f8 <__aeabi_dmul>
 8013ec0:	4682      	mov	sl, r0
 8013ec2:	468b      	mov	fp, r1
 8013ec4:	f038 080f 	bics.w	r8, r8, #15
 8013ec8:	d04d      	beq.n	8013f66 <_strtod_l+0x526>
 8013eca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013ece:	dd22      	ble.n	8013f16 <_strtod_l+0x4d6>
 8013ed0:	2500      	movs	r5, #0
 8013ed2:	462e      	mov	r6, r5
 8013ed4:	9509      	str	r5, [sp, #36]	; 0x24
 8013ed6:	9507      	str	r5, [sp, #28]
 8013ed8:	2322      	movs	r3, #34	; 0x22
 8013eda:	f8df b110 	ldr.w	fp, [pc, #272]	; 8013fec <_strtod_l+0x5ac>
 8013ede:	6023      	str	r3, [r4, #0]
 8013ee0:	f04f 0a00 	mov.w	sl, #0
 8013ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	f43f adec 	beq.w	8013ac4 <_strtod_l+0x84>
 8013eec:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013eee:	4620      	mov	r0, r4
 8013ef0:	f001 ffc8 	bl	8015e84 <_Bfree>
 8013ef4:	9907      	ldr	r1, [sp, #28]
 8013ef6:	4620      	mov	r0, r4
 8013ef8:	f001 ffc4 	bl	8015e84 <_Bfree>
 8013efc:	4631      	mov	r1, r6
 8013efe:	4620      	mov	r0, r4
 8013f00:	f001 ffc0 	bl	8015e84 <_Bfree>
 8013f04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f06:	4620      	mov	r0, r4
 8013f08:	f001 ffbc 	bl	8015e84 <_Bfree>
 8013f0c:	4629      	mov	r1, r5
 8013f0e:	4620      	mov	r0, r4
 8013f10:	f001 ffb8 	bl	8015e84 <_Bfree>
 8013f14:	e5d6      	b.n	8013ac4 <_strtod_l+0x84>
 8013f16:	2300      	movs	r3, #0
 8013f18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013f1c:	4650      	mov	r0, sl
 8013f1e:	4659      	mov	r1, fp
 8013f20:	4699      	mov	r9, r3
 8013f22:	f1b8 0f01 	cmp.w	r8, #1
 8013f26:	dc21      	bgt.n	8013f6c <_strtod_l+0x52c>
 8013f28:	b10b      	cbz	r3, 8013f2e <_strtod_l+0x4ee>
 8013f2a:	4682      	mov	sl, r0
 8013f2c:	468b      	mov	fp, r1
 8013f2e:	4b2e      	ldr	r3, [pc, #184]	; (8013fe8 <_strtod_l+0x5a8>)
 8013f30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013f34:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013f38:	4652      	mov	r2, sl
 8013f3a:	465b      	mov	r3, fp
 8013f3c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013f40:	f7ec fb5a 	bl	80005f8 <__aeabi_dmul>
 8013f44:	4b29      	ldr	r3, [pc, #164]	; (8013fec <_strtod_l+0x5ac>)
 8013f46:	460a      	mov	r2, r1
 8013f48:	400b      	ands	r3, r1
 8013f4a:	4929      	ldr	r1, [pc, #164]	; (8013ff0 <_strtod_l+0x5b0>)
 8013f4c:	428b      	cmp	r3, r1
 8013f4e:	4682      	mov	sl, r0
 8013f50:	d8be      	bhi.n	8013ed0 <_strtod_l+0x490>
 8013f52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013f56:	428b      	cmp	r3, r1
 8013f58:	bf86      	itte	hi
 8013f5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013ff4 <_strtod_l+0x5b4>
 8013f5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8013f62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013f66:	2300      	movs	r3, #0
 8013f68:	9304      	str	r3, [sp, #16]
 8013f6a:	e081      	b.n	8014070 <_strtod_l+0x630>
 8013f6c:	f018 0f01 	tst.w	r8, #1
 8013f70:	d007      	beq.n	8013f82 <_strtod_l+0x542>
 8013f72:	4b1d      	ldr	r3, [pc, #116]	; (8013fe8 <_strtod_l+0x5a8>)
 8013f74:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8013f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f7c:	f7ec fb3c 	bl	80005f8 <__aeabi_dmul>
 8013f80:	2301      	movs	r3, #1
 8013f82:	f109 0901 	add.w	r9, r9, #1
 8013f86:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013f8a:	e7ca      	b.n	8013f22 <_strtod_l+0x4e2>
 8013f8c:	d0eb      	beq.n	8013f66 <_strtod_l+0x526>
 8013f8e:	f1c8 0800 	rsb	r8, r8, #0
 8013f92:	f018 020f 	ands.w	r2, r8, #15
 8013f96:	d00a      	beq.n	8013fae <_strtod_l+0x56e>
 8013f98:	4b12      	ldr	r3, [pc, #72]	; (8013fe4 <_strtod_l+0x5a4>)
 8013f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f9e:	4650      	mov	r0, sl
 8013fa0:	4659      	mov	r1, fp
 8013fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa6:	f7ec fc51 	bl	800084c <__aeabi_ddiv>
 8013faa:	4682      	mov	sl, r0
 8013fac:	468b      	mov	fp, r1
 8013fae:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013fb2:	d0d8      	beq.n	8013f66 <_strtod_l+0x526>
 8013fb4:	f1b8 0f1f 	cmp.w	r8, #31
 8013fb8:	dd1e      	ble.n	8013ff8 <_strtod_l+0x5b8>
 8013fba:	2500      	movs	r5, #0
 8013fbc:	462e      	mov	r6, r5
 8013fbe:	9509      	str	r5, [sp, #36]	; 0x24
 8013fc0:	9507      	str	r5, [sp, #28]
 8013fc2:	2322      	movs	r3, #34	; 0x22
 8013fc4:	f04f 0a00 	mov.w	sl, #0
 8013fc8:	f04f 0b00 	mov.w	fp, #0
 8013fcc:	6023      	str	r3, [r4, #0]
 8013fce:	e789      	b.n	8013ee4 <_strtod_l+0x4a4>
 8013fd0:	0801a0ad 	.word	0x0801a0ad
 8013fd4:	0801a0ec 	.word	0x0801a0ec
 8013fd8:	0801a0a5 	.word	0x0801a0a5
 8013fdc:	0801a22c 	.word	0x0801a22c
 8013fe0:	0801a563 	.word	0x0801a563
 8013fe4:	0801a428 	.word	0x0801a428
 8013fe8:	0801a400 	.word	0x0801a400
 8013fec:	7ff00000 	.word	0x7ff00000
 8013ff0:	7ca00000 	.word	0x7ca00000
 8013ff4:	7fefffff 	.word	0x7fefffff
 8013ff8:	f018 0310 	ands.w	r3, r8, #16
 8013ffc:	bf18      	it	ne
 8013ffe:	236a      	movne	r3, #106	; 0x6a
 8014000:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80143b8 <_strtod_l+0x978>
 8014004:	9304      	str	r3, [sp, #16]
 8014006:	4650      	mov	r0, sl
 8014008:	4659      	mov	r1, fp
 801400a:	2300      	movs	r3, #0
 801400c:	f018 0f01 	tst.w	r8, #1
 8014010:	d004      	beq.n	801401c <_strtod_l+0x5dc>
 8014012:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014016:	f7ec faef 	bl	80005f8 <__aeabi_dmul>
 801401a:	2301      	movs	r3, #1
 801401c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8014020:	f109 0908 	add.w	r9, r9, #8
 8014024:	d1f2      	bne.n	801400c <_strtod_l+0x5cc>
 8014026:	b10b      	cbz	r3, 801402c <_strtod_l+0x5ec>
 8014028:	4682      	mov	sl, r0
 801402a:	468b      	mov	fp, r1
 801402c:	9b04      	ldr	r3, [sp, #16]
 801402e:	b1bb      	cbz	r3, 8014060 <_strtod_l+0x620>
 8014030:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014034:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014038:	2b00      	cmp	r3, #0
 801403a:	4659      	mov	r1, fp
 801403c:	dd10      	ble.n	8014060 <_strtod_l+0x620>
 801403e:	2b1f      	cmp	r3, #31
 8014040:	f340 8128 	ble.w	8014294 <_strtod_l+0x854>
 8014044:	2b34      	cmp	r3, #52	; 0x34
 8014046:	bfde      	ittt	le
 8014048:	3b20      	suble	r3, #32
 801404a:	f04f 32ff 	movle.w	r2, #4294967295
 801404e:	fa02 f303 	lslle.w	r3, r2, r3
 8014052:	f04f 0a00 	mov.w	sl, #0
 8014056:	bfcc      	ite	gt
 8014058:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801405c:	ea03 0b01 	andle.w	fp, r3, r1
 8014060:	2200      	movs	r2, #0
 8014062:	2300      	movs	r3, #0
 8014064:	4650      	mov	r0, sl
 8014066:	4659      	mov	r1, fp
 8014068:	f7ec fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 801406c:	2800      	cmp	r0, #0
 801406e:	d1a4      	bne.n	8013fba <_strtod_l+0x57a>
 8014070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014072:	9300      	str	r3, [sp, #0]
 8014074:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014076:	462b      	mov	r3, r5
 8014078:	463a      	mov	r2, r7
 801407a:	4620      	mov	r0, r4
 801407c:	f001 ff6e 	bl	8015f5c <__s2b>
 8014080:	9009      	str	r0, [sp, #36]	; 0x24
 8014082:	2800      	cmp	r0, #0
 8014084:	f43f af24 	beq.w	8013ed0 <_strtod_l+0x490>
 8014088:	9b07      	ldr	r3, [sp, #28]
 801408a:	1b9e      	subs	r6, r3, r6
 801408c:	9b08      	ldr	r3, [sp, #32]
 801408e:	2b00      	cmp	r3, #0
 8014090:	bfb4      	ite	lt
 8014092:	4633      	movlt	r3, r6
 8014094:	2300      	movge	r3, #0
 8014096:	9310      	str	r3, [sp, #64]	; 0x40
 8014098:	9b08      	ldr	r3, [sp, #32]
 801409a:	2500      	movs	r5, #0
 801409c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80140a0:	9318      	str	r3, [sp, #96]	; 0x60
 80140a2:	462e      	mov	r6, r5
 80140a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140a6:	4620      	mov	r0, r4
 80140a8:	6859      	ldr	r1, [r3, #4]
 80140aa:	f001 feab 	bl	8015e04 <_Balloc>
 80140ae:	9007      	str	r0, [sp, #28]
 80140b0:	2800      	cmp	r0, #0
 80140b2:	f43f af11 	beq.w	8013ed8 <_strtod_l+0x498>
 80140b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140b8:	691a      	ldr	r2, [r3, #16]
 80140ba:	3202      	adds	r2, #2
 80140bc:	f103 010c 	add.w	r1, r3, #12
 80140c0:	0092      	lsls	r2, r2, #2
 80140c2:	300c      	adds	r0, #12
 80140c4:	f001 fe90 	bl	8015de8 <memcpy>
 80140c8:	ec4b ab10 	vmov	d0, sl, fp
 80140cc:	aa20      	add	r2, sp, #128	; 0x80
 80140ce:	a91f      	add	r1, sp, #124	; 0x7c
 80140d0:	4620      	mov	r0, r4
 80140d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80140d6:	f002 fa7d 	bl	80165d4 <__d2b>
 80140da:	901e      	str	r0, [sp, #120]	; 0x78
 80140dc:	2800      	cmp	r0, #0
 80140de:	f43f aefb 	beq.w	8013ed8 <_strtod_l+0x498>
 80140e2:	2101      	movs	r1, #1
 80140e4:	4620      	mov	r0, r4
 80140e6:	f001 ffd3 	bl	8016090 <__i2b>
 80140ea:	4606      	mov	r6, r0
 80140ec:	2800      	cmp	r0, #0
 80140ee:	f43f aef3 	beq.w	8013ed8 <_strtod_l+0x498>
 80140f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80140f4:	9904      	ldr	r1, [sp, #16]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	bfab      	itete	ge
 80140fa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80140fc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80140fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8014100:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8014104:	bfac      	ite	ge
 8014106:	eb03 0902 	addge.w	r9, r3, r2
 801410a:	1ad7      	sublt	r7, r2, r3
 801410c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801410e:	eba3 0801 	sub.w	r8, r3, r1
 8014112:	4490      	add	r8, r2
 8014114:	4ba3      	ldr	r3, [pc, #652]	; (80143a4 <_strtod_l+0x964>)
 8014116:	f108 38ff 	add.w	r8, r8, #4294967295
 801411a:	4598      	cmp	r8, r3
 801411c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014120:	f280 80cc 	bge.w	80142bc <_strtod_l+0x87c>
 8014124:	eba3 0308 	sub.w	r3, r3, r8
 8014128:	2b1f      	cmp	r3, #31
 801412a:	eba2 0203 	sub.w	r2, r2, r3
 801412e:	f04f 0101 	mov.w	r1, #1
 8014132:	f300 80b6 	bgt.w	80142a2 <_strtod_l+0x862>
 8014136:	fa01 f303 	lsl.w	r3, r1, r3
 801413a:	9311      	str	r3, [sp, #68]	; 0x44
 801413c:	2300      	movs	r3, #0
 801413e:	930c      	str	r3, [sp, #48]	; 0x30
 8014140:	eb09 0802 	add.w	r8, r9, r2
 8014144:	9b04      	ldr	r3, [sp, #16]
 8014146:	45c1      	cmp	r9, r8
 8014148:	4417      	add	r7, r2
 801414a:	441f      	add	r7, r3
 801414c:	464b      	mov	r3, r9
 801414e:	bfa8      	it	ge
 8014150:	4643      	movge	r3, r8
 8014152:	42bb      	cmp	r3, r7
 8014154:	bfa8      	it	ge
 8014156:	463b      	movge	r3, r7
 8014158:	2b00      	cmp	r3, #0
 801415a:	bfc2      	ittt	gt
 801415c:	eba8 0803 	subgt.w	r8, r8, r3
 8014160:	1aff      	subgt	r7, r7, r3
 8014162:	eba9 0903 	subgt.w	r9, r9, r3
 8014166:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014168:	2b00      	cmp	r3, #0
 801416a:	dd17      	ble.n	801419c <_strtod_l+0x75c>
 801416c:	4631      	mov	r1, r6
 801416e:	461a      	mov	r2, r3
 8014170:	4620      	mov	r0, r4
 8014172:	f002 f849 	bl	8016208 <__pow5mult>
 8014176:	4606      	mov	r6, r0
 8014178:	2800      	cmp	r0, #0
 801417a:	f43f aead 	beq.w	8013ed8 <_strtod_l+0x498>
 801417e:	4601      	mov	r1, r0
 8014180:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014182:	4620      	mov	r0, r4
 8014184:	f001 ff9a 	bl	80160bc <__multiply>
 8014188:	900f      	str	r0, [sp, #60]	; 0x3c
 801418a:	2800      	cmp	r0, #0
 801418c:	f43f aea4 	beq.w	8013ed8 <_strtod_l+0x498>
 8014190:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014192:	4620      	mov	r0, r4
 8014194:	f001 fe76 	bl	8015e84 <_Bfree>
 8014198:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801419a:	931e      	str	r3, [sp, #120]	; 0x78
 801419c:	f1b8 0f00 	cmp.w	r8, #0
 80141a0:	f300 8091 	bgt.w	80142c6 <_strtod_l+0x886>
 80141a4:	9b08      	ldr	r3, [sp, #32]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	dd08      	ble.n	80141bc <_strtod_l+0x77c>
 80141aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80141ac:	9907      	ldr	r1, [sp, #28]
 80141ae:	4620      	mov	r0, r4
 80141b0:	f002 f82a 	bl	8016208 <__pow5mult>
 80141b4:	9007      	str	r0, [sp, #28]
 80141b6:	2800      	cmp	r0, #0
 80141b8:	f43f ae8e 	beq.w	8013ed8 <_strtod_l+0x498>
 80141bc:	2f00      	cmp	r7, #0
 80141be:	dd08      	ble.n	80141d2 <_strtod_l+0x792>
 80141c0:	9907      	ldr	r1, [sp, #28]
 80141c2:	463a      	mov	r2, r7
 80141c4:	4620      	mov	r0, r4
 80141c6:	f002 f879 	bl	80162bc <__lshift>
 80141ca:	9007      	str	r0, [sp, #28]
 80141cc:	2800      	cmp	r0, #0
 80141ce:	f43f ae83 	beq.w	8013ed8 <_strtod_l+0x498>
 80141d2:	f1b9 0f00 	cmp.w	r9, #0
 80141d6:	dd08      	ble.n	80141ea <_strtod_l+0x7aa>
 80141d8:	4631      	mov	r1, r6
 80141da:	464a      	mov	r2, r9
 80141dc:	4620      	mov	r0, r4
 80141de:	f002 f86d 	bl	80162bc <__lshift>
 80141e2:	4606      	mov	r6, r0
 80141e4:	2800      	cmp	r0, #0
 80141e6:	f43f ae77 	beq.w	8013ed8 <_strtod_l+0x498>
 80141ea:	9a07      	ldr	r2, [sp, #28]
 80141ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80141ee:	4620      	mov	r0, r4
 80141f0:	f002 f8ec 	bl	80163cc <__mdiff>
 80141f4:	4605      	mov	r5, r0
 80141f6:	2800      	cmp	r0, #0
 80141f8:	f43f ae6e 	beq.w	8013ed8 <_strtod_l+0x498>
 80141fc:	68c3      	ldr	r3, [r0, #12]
 80141fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8014200:	2300      	movs	r3, #0
 8014202:	60c3      	str	r3, [r0, #12]
 8014204:	4631      	mov	r1, r6
 8014206:	f002 f8c5 	bl	8016394 <__mcmp>
 801420a:	2800      	cmp	r0, #0
 801420c:	da65      	bge.n	80142da <_strtod_l+0x89a>
 801420e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014210:	ea53 030a 	orrs.w	r3, r3, sl
 8014214:	f040 8087 	bne.w	8014326 <_strtod_l+0x8e6>
 8014218:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801421c:	2b00      	cmp	r3, #0
 801421e:	f040 8082 	bne.w	8014326 <_strtod_l+0x8e6>
 8014222:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014226:	0d1b      	lsrs	r3, r3, #20
 8014228:	051b      	lsls	r3, r3, #20
 801422a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801422e:	d97a      	bls.n	8014326 <_strtod_l+0x8e6>
 8014230:	696b      	ldr	r3, [r5, #20]
 8014232:	b913      	cbnz	r3, 801423a <_strtod_l+0x7fa>
 8014234:	692b      	ldr	r3, [r5, #16]
 8014236:	2b01      	cmp	r3, #1
 8014238:	dd75      	ble.n	8014326 <_strtod_l+0x8e6>
 801423a:	4629      	mov	r1, r5
 801423c:	2201      	movs	r2, #1
 801423e:	4620      	mov	r0, r4
 8014240:	f002 f83c 	bl	80162bc <__lshift>
 8014244:	4631      	mov	r1, r6
 8014246:	4605      	mov	r5, r0
 8014248:	f002 f8a4 	bl	8016394 <__mcmp>
 801424c:	2800      	cmp	r0, #0
 801424e:	dd6a      	ble.n	8014326 <_strtod_l+0x8e6>
 8014250:	9904      	ldr	r1, [sp, #16]
 8014252:	4a55      	ldr	r2, [pc, #340]	; (80143a8 <_strtod_l+0x968>)
 8014254:	465b      	mov	r3, fp
 8014256:	2900      	cmp	r1, #0
 8014258:	f000 8085 	beq.w	8014366 <_strtod_l+0x926>
 801425c:	ea02 010b 	and.w	r1, r2, fp
 8014260:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014264:	dc7f      	bgt.n	8014366 <_strtod_l+0x926>
 8014266:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801426a:	f77f aeaa 	ble.w	8013fc2 <_strtod_l+0x582>
 801426e:	4a4f      	ldr	r2, [pc, #316]	; (80143ac <_strtod_l+0x96c>)
 8014270:	2300      	movs	r3, #0
 8014272:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8014276:	4650      	mov	r0, sl
 8014278:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801427c:	4659      	mov	r1, fp
 801427e:	f7ec f9bb 	bl	80005f8 <__aeabi_dmul>
 8014282:	460b      	mov	r3, r1
 8014284:	4303      	orrs	r3, r0
 8014286:	bf08      	it	eq
 8014288:	2322      	moveq	r3, #34	; 0x22
 801428a:	4682      	mov	sl, r0
 801428c:	468b      	mov	fp, r1
 801428e:	bf08      	it	eq
 8014290:	6023      	streq	r3, [r4, #0]
 8014292:	e62b      	b.n	8013eec <_strtod_l+0x4ac>
 8014294:	f04f 32ff 	mov.w	r2, #4294967295
 8014298:	fa02 f303 	lsl.w	r3, r2, r3
 801429c:	ea03 0a0a 	and.w	sl, r3, sl
 80142a0:	e6de      	b.n	8014060 <_strtod_l+0x620>
 80142a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80142a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80142aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80142ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80142b2:	fa01 f308 	lsl.w	r3, r1, r8
 80142b6:	930c      	str	r3, [sp, #48]	; 0x30
 80142b8:	9111      	str	r1, [sp, #68]	; 0x44
 80142ba:	e741      	b.n	8014140 <_strtod_l+0x700>
 80142bc:	2300      	movs	r3, #0
 80142be:	930c      	str	r3, [sp, #48]	; 0x30
 80142c0:	2301      	movs	r3, #1
 80142c2:	9311      	str	r3, [sp, #68]	; 0x44
 80142c4:	e73c      	b.n	8014140 <_strtod_l+0x700>
 80142c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80142c8:	4642      	mov	r2, r8
 80142ca:	4620      	mov	r0, r4
 80142cc:	f001 fff6 	bl	80162bc <__lshift>
 80142d0:	901e      	str	r0, [sp, #120]	; 0x78
 80142d2:	2800      	cmp	r0, #0
 80142d4:	f47f af66 	bne.w	80141a4 <_strtod_l+0x764>
 80142d8:	e5fe      	b.n	8013ed8 <_strtod_l+0x498>
 80142da:	465f      	mov	r7, fp
 80142dc:	d16e      	bne.n	80143bc <_strtod_l+0x97c>
 80142de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80142e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80142e4:	b342      	cbz	r2, 8014338 <_strtod_l+0x8f8>
 80142e6:	4a32      	ldr	r2, [pc, #200]	; (80143b0 <_strtod_l+0x970>)
 80142e8:	4293      	cmp	r3, r2
 80142ea:	d128      	bne.n	801433e <_strtod_l+0x8fe>
 80142ec:	9b04      	ldr	r3, [sp, #16]
 80142ee:	4650      	mov	r0, sl
 80142f0:	b1eb      	cbz	r3, 801432e <_strtod_l+0x8ee>
 80142f2:	4a2d      	ldr	r2, [pc, #180]	; (80143a8 <_strtod_l+0x968>)
 80142f4:	403a      	ands	r2, r7
 80142f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80142fa:	f04f 31ff 	mov.w	r1, #4294967295
 80142fe:	d819      	bhi.n	8014334 <_strtod_l+0x8f4>
 8014300:	0d12      	lsrs	r2, r2, #20
 8014302:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014306:	fa01 f303 	lsl.w	r3, r1, r3
 801430a:	4298      	cmp	r0, r3
 801430c:	d117      	bne.n	801433e <_strtod_l+0x8fe>
 801430e:	4b29      	ldr	r3, [pc, #164]	; (80143b4 <_strtod_l+0x974>)
 8014310:	429f      	cmp	r7, r3
 8014312:	d102      	bne.n	801431a <_strtod_l+0x8da>
 8014314:	3001      	adds	r0, #1
 8014316:	f43f addf 	beq.w	8013ed8 <_strtod_l+0x498>
 801431a:	4b23      	ldr	r3, [pc, #140]	; (80143a8 <_strtod_l+0x968>)
 801431c:	403b      	ands	r3, r7
 801431e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014322:	f04f 0a00 	mov.w	sl, #0
 8014326:	9b04      	ldr	r3, [sp, #16]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d1a0      	bne.n	801426e <_strtod_l+0x82e>
 801432c:	e5de      	b.n	8013eec <_strtod_l+0x4ac>
 801432e:	f04f 33ff 	mov.w	r3, #4294967295
 8014332:	e7ea      	b.n	801430a <_strtod_l+0x8ca>
 8014334:	460b      	mov	r3, r1
 8014336:	e7e8      	b.n	801430a <_strtod_l+0x8ca>
 8014338:	ea53 030a 	orrs.w	r3, r3, sl
 801433c:	d088      	beq.n	8014250 <_strtod_l+0x810>
 801433e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014340:	b1db      	cbz	r3, 801437a <_strtod_l+0x93a>
 8014342:	423b      	tst	r3, r7
 8014344:	d0ef      	beq.n	8014326 <_strtod_l+0x8e6>
 8014346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014348:	9a04      	ldr	r2, [sp, #16]
 801434a:	4650      	mov	r0, sl
 801434c:	4659      	mov	r1, fp
 801434e:	b1c3      	cbz	r3, 8014382 <_strtod_l+0x942>
 8014350:	f7ff fb58 	bl	8013a04 <sulp>
 8014354:	4602      	mov	r2, r0
 8014356:	460b      	mov	r3, r1
 8014358:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801435c:	f7eb ff96 	bl	800028c <__adddf3>
 8014360:	4682      	mov	sl, r0
 8014362:	468b      	mov	fp, r1
 8014364:	e7df      	b.n	8014326 <_strtod_l+0x8e6>
 8014366:	4013      	ands	r3, r2
 8014368:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801436c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014370:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014374:	f04f 3aff 	mov.w	sl, #4294967295
 8014378:	e7d5      	b.n	8014326 <_strtod_l+0x8e6>
 801437a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801437c:	ea13 0f0a 	tst.w	r3, sl
 8014380:	e7e0      	b.n	8014344 <_strtod_l+0x904>
 8014382:	f7ff fb3f 	bl	8013a04 <sulp>
 8014386:	4602      	mov	r2, r0
 8014388:	460b      	mov	r3, r1
 801438a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801438e:	f7eb ff7b 	bl	8000288 <__aeabi_dsub>
 8014392:	2200      	movs	r2, #0
 8014394:	2300      	movs	r3, #0
 8014396:	4682      	mov	sl, r0
 8014398:	468b      	mov	fp, r1
 801439a:	f7ec fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 801439e:	2800      	cmp	r0, #0
 80143a0:	d0c1      	beq.n	8014326 <_strtod_l+0x8e6>
 80143a2:	e60e      	b.n	8013fc2 <_strtod_l+0x582>
 80143a4:	fffffc02 	.word	0xfffffc02
 80143a8:	7ff00000 	.word	0x7ff00000
 80143ac:	39500000 	.word	0x39500000
 80143b0:	000fffff 	.word	0x000fffff
 80143b4:	7fefffff 	.word	0x7fefffff
 80143b8:	0801a100 	.word	0x0801a100
 80143bc:	4631      	mov	r1, r6
 80143be:	4628      	mov	r0, r5
 80143c0:	f002 f964 	bl	801668c <__ratio>
 80143c4:	ec59 8b10 	vmov	r8, r9, d0
 80143c8:	ee10 0a10 	vmov	r0, s0
 80143cc:	2200      	movs	r2, #0
 80143ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80143d2:	4649      	mov	r1, r9
 80143d4:	f7ec fb8c 	bl	8000af0 <__aeabi_dcmple>
 80143d8:	2800      	cmp	r0, #0
 80143da:	d07c      	beq.n	80144d6 <_strtod_l+0xa96>
 80143dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d04c      	beq.n	801447c <_strtod_l+0xa3c>
 80143e2:	4b95      	ldr	r3, [pc, #596]	; (8014638 <_strtod_l+0xbf8>)
 80143e4:	2200      	movs	r2, #0
 80143e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80143ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014638 <_strtod_l+0xbf8>
 80143ee:	f04f 0800 	mov.w	r8, #0
 80143f2:	4b92      	ldr	r3, [pc, #584]	; (801463c <_strtod_l+0xbfc>)
 80143f4:	403b      	ands	r3, r7
 80143f6:	9311      	str	r3, [sp, #68]	; 0x44
 80143f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80143fa:	4b91      	ldr	r3, [pc, #580]	; (8014640 <_strtod_l+0xc00>)
 80143fc:	429a      	cmp	r2, r3
 80143fe:	f040 80b2 	bne.w	8014566 <_strtod_l+0xb26>
 8014402:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801440a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801440e:	ec4b ab10 	vmov	d0, sl, fp
 8014412:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8014416:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801441a:	f002 f85f 	bl	80164dc <__ulp>
 801441e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014422:	ec53 2b10 	vmov	r2, r3, d0
 8014426:	f7ec f8e7 	bl	80005f8 <__aeabi_dmul>
 801442a:	4652      	mov	r2, sl
 801442c:	465b      	mov	r3, fp
 801442e:	f7eb ff2d 	bl	800028c <__adddf3>
 8014432:	460b      	mov	r3, r1
 8014434:	4981      	ldr	r1, [pc, #516]	; (801463c <_strtod_l+0xbfc>)
 8014436:	4a83      	ldr	r2, [pc, #524]	; (8014644 <_strtod_l+0xc04>)
 8014438:	4019      	ands	r1, r3
 801443a:	4291      	cmp	r1, r2
 801443c:	4682      	mov	sl, r0
 801443e:	d95e      	bls.n	80144fe <_strtod_l+0xabe>
 8014440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014442:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014446:	4293      	cmp	r3, r2
 8014448:	d103      	bne.n	8014452 <_strtod_l+0xa12>
 801444a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801444c:	3301      	adds	r3, #1
 801444e:	f43f ad43 	beq.w	8013ed8 <_strtod_l+0x498>
 8014452:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8014650 <_strtod_l+0xc10>
 8014456:	f04f 3aff 	mov.w	sl, #4294967295
 801445a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801445c:	4620      	mov	r0, r4
 801445e:	f001 fd11 	bl	8015e84 <_Bfree>
 8014462:	9907      	ldr	r1, [sp, #28]
 8014464:	4620      	mov	r0, r4
 8014466:	f001 fd0d 	bl	8015e84 <_Bfree>
 801446a:	4631      	mov	r1, r6
 801446c:	4620      	mov	r0, r4
 801446e:	f001 fd09 	bl	8015e84 <_Bfree>
 8014472:	4629      	mov	r1, r5
 8014474:	4620      	mov	r0, r4
 8014476:	f001 fd05 	bl	8015e84 <_Bfree>
 801447a:	e613      	b.n	80140a4 <_strtod_l+0x664>
 801447c:	f1ba 0f00 	cmp.w	sl, #0
 8014480:	d11b      	bne.n	80144ba <_strtod_l+0xa7a>
 8014482:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014486:	b9f3      	cbnz	r3, 80144c6 <_strtod_l+0xa86>
 8014488:	4b6b      	ldr	r3, [pc, #428]	; (8014638 <_strtod_l+0xbf8>)
 801448a:	2200      	movs	r2, #0
 801448c:	4640      	mov	r0, r8
 801448e:	4649      	mov	r1, r9
 8014490:	f7ec fb24 	bl	8000adc <__aeabi_dcmplt>
 8014494:	b9d0      	cbnz	r0, 80144cc <_strtod_l+0xa8c>
 8014496:	4640      	mov	r0, r8
 8014498:	4649      	mov	r1, r9
 801449a:	4b6b      	ldr	r3, [pc, #428]	; (8014648 <_strtod_l+0xc08>)
 801449c:	2200      	movs	r2, #0
 801449e:	f7ec f8ab 	bl	80005f8 <__aeabi_dmul>
 80144a2:	4680      	mov	r8, r0
 80144a4:	4689      	mov	r9, r1
 80144a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80144aa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80144ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80144b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80144b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80144b8:	e79b      	b.n	80143f2 <_strtod_l+0x9b2>
 80144ba:	f1ba 0f01 	cmp.w	sl, #1
 80144be:	d102      	bne.n	80144c6 <_strtod_l+0xa86>
 80144c0:	2f00      	cmp	r7, #0
 80144c2:	f43f ad7e 	beq.w	8013fc2 <_strtod_l+0x582>
 80144c6:	4b61      	ldr	r3, [pc, #388]	; (801464c <_strtod_l+0xc0c>)
 80144c8:	2200      	movs	r2, #0
 80144ca:	e78c      	b.n	80143e6 <_strtod_l+0x9a6>
 80144cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014648 <_strtod_l+0xc08>
 80144d0:	f04f 0800 	mov.w	r8, #0
 80144d4:	e7e7      	b.n	80144a6 <_strtod_l+0xa66>
 80144d6:	4b5c      	ldr	r3, [pc, #368]	; (8014648 <_strtod_l+0xc08>)
 80144d8:	4640      	mov	r0, r8
 80144da:	4649      	mov	r1, r9
 80144dc:	2200      	movs	r2, #0
 80144de:	f7ec f88b 	bl	80005f8 <__aeabi_dmul>
 80144e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80144e4:	4680      	mov	r8, r0
 80144e6:	4689      	mov	r9, r1
 80144e8:	b933      	cbnz	r3, 80144f8 <_strtod_l+0xab8>
 80144ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80144ee:	9012      	str	r0, [sp, #72]	; 0x48
 80144f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80144f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80144f6:	e7dd      	b.n	80144b4 <_strtod_l+0xa74>
 80144f8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80144fc:	e7f9      	b.n	80144f2 <_strtod_l+0xab2>
 80144fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014502:	9b04      	ldr	r3, [sp, #16]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d1a8      	bne.n	801445a <_strtod_l+0xa1a>
 8014508:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801450c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801450e:	0d1b      	lsrs	r3, r3, #20
 8014510:	051b      	lsls	r3, r3, #20
 8014512:	429a      	cmp	r2, r3
 8014514:	d1a1      	bne.n	801445a <_strtod_l+0xa1a>
 8014516:	4640      	mov	r0, r8
 8014518:	4649      	mov	r1, r9
 801451a:	f7ec fbcd 	bl	8000cb8 <__aeabi_d2lz>
 801451e:	f7ec f83d 	bl	800059c <__aeabi_l2d>
 8014522:	4602      	mov	r2, r0
 8014524:	460b      	mov	r3, r1
 8014526:	4640      	mov	r0, r8
 8014528:	4649      	mov	r1, r9
 801452a:	f7eb fead 	bl	8000288 <__aeabi_dsub>
 801452e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014530:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014534:	ea43 030a 	orr.w	r3, r3, sl
 8014538:	4313      	orrs	r3, r2
 801453a:	4680      	mov	r8, r0
 801453c:	4689      	mov	r9, r1
 801453e:	d053      	beq.n	80145e8 <_strtod_l+0xba8>
 8014540:	a335      	add	r3, pc, #212	; (adr r3, 8014618 <_strtod_l+0xbd8>)
 8014542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014546:	f7ec fac9 	bl	8000adc <__aeabi_dcmplt>
 801454a:	2800      	cmp	r0, #0
 801454c:	f47f acce 	bne.w	8013eec <_strtod_l+0x4ac>
 8014550:	a333      	add	r3, pc, #204	; (adr r3, 8014620 <_strtod_l+0xbe0>)
 8014552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014556:	4640      	mov	r0, r8
 8014558:	4649      	mov	r1, r9
 801455a:	f7ec fadd 	bl	8000b18 <__aeabi_dcmpgt>
 801455e:	2800      	cmp	r0, #0
 8014560:	f43f af7b 	beq.w	801445a <_strtod_l+0xa1a>
 8014564:	e4c2      	b.n	8013eec <_strtod_l+0x4ac>
 8014566:	9b04      	ldr	r3, [sp, #16]
 8014568:	b333      	cbz	r3, 80145b8 <_strtod_l+0xb78>
 801456a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801456c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014570:	d822      	bhi.n	80145b8 <_strtod_l+0xb78>
 8014572:	a32d      	add	r3, pc, #180	; (adr r3, 8014628 <_strtod_l+0xbe8>)
 8014574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014578:	4640      	mov	r0, r8
 801457a:	4649      	mov	r1, r9
 801457c:	f7ec fab8 	bl	8000af0 <__aeabi_dcmple>
 8014580:	b1a0      	cbz	r0, 80145ac <_strtod_l+0xb6c>
 8014582:	4649      	mov	r1, r9
 8014584:	4640      	mov	r0, r8
 8014586:	f7ec fb0f 	bl	8000ba8 <__aeabi_d2uiz>
 801458a:	2801      	cmp	r0, #1
 801458c:	bf38      	it	cc
 801458e:	2001      	movcc	r0, #1
 8014590:	f7eb ffb8 	bl	8000504 <__aeabi_ui2d>
 8014594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014596:	4680      	mov	r8, r0
 8014598:	4689      	mov	r9, r1
 801459a:	bb13      	cbnz	r3, 80145e2 <_strtod_l+0xba2>
 801459c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80145a0:	9014      	str	r0, [sp, #80]	; 0x50
 80145a2:	9315      	str	r3, [sp, #84]	; 0x54
 80145a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80145a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80145ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80145ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80145b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80145b4:	1a9b      	subs	r3, r3, r2
 80145b6:	930d      	str	r3, [sp, #52]	; 0x34
 80145b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80145bc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80145c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80145c4:	f001 ff8a 	bl	80164dc <__ulp>
 80145c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80145cc:	ec53 2b10 	vmov	r2, r3, d0
 80145d0:	f7ec f812 	bl	80005f8 <__aeabi_dmul>
 80145d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80145d8:	f7eb fe58 	bl	800028c <__adddf3>
 80145dc:	4682      	mov	sl, r0
 80145de:	468b      	mov	fp, r1
 80145e0:	e78f      	b.n	8014502 <_strtod_l+0xac2>
 80145e2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80145e6:	e7dd      	b.n	80145a4 <_strtod_l+0xb64>
 80145e8:	a311      	add	r3, pc, #68	; (adr r3, 8014630 <_strtod_l+0xbf0>)
 80145ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ee:	f7ec fa75 	bl	8000adc <__aeabi_dcmplt>
 80145f2:	e7b4      	b.n	801455e <_strtod_l+0xb1e>
 80145f4:	2300      	movs	r3, #0
 80145f6:	930e      	str	r3, [sp, #56]	; 0x38
 80145f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80145fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80145fc:	6013      	str	r3, [r2, #0]
 80145fe:	f7ff ba65 	b.w	8013acc <_strtod_l+0x8c>
 8014602:	2b65      	cmp	r3, #101	; 0x65
 8014604:	f43f ab5d 	beq.w	8013cc2 <_strtod_l+0x282>
 8014608:	2b45      	cmp	r3, #69	; 0x45
 801460a:	f43f ab5a 	beq.w	8013cc2 <_strtod_l+0x282>
 801460e:	2201      	movs	r2, #1
 8014610:	f7ff bb92 	b.w	8013d38 <_strtod_l+0x2f8>
 8014614:	f3af 8000 	nop.w
 8014618:	94a03595 	.word	0x94a03595
 801461c:	3fdfffff 	.word	0x3fdfffff
 8014620:	35afe535 	.word	0x35afe535
 8014624:	3fe00000 	.word	0x3fe00000
 8014628:	ffc00000 	.word	0xffc00000
 801462c:	41dfffff 	.word	0x41dfffff
 8014630:	94a03595 	.word	0x94a03595
 8014634:	3fcfffff 	.word	0x3fcfffff
 8014638:	3ff00000 	.word	0x3ff00000
 801463c:	7ff00000 	.word	0x7ff00000
 8014640:	7fe00000 	.word	0x7fe00000
 8014644:	7c9fffff 	.word	0x7c9fffff
 8014648:	3fe00000 	.word	0x3fe00000
 801464c:	bff00000 	.word	0xbff00000
 8014650:	7fefffff 	.word	0x7fefffff

08014654 <_strtod_r>:
 8014654:	4b01      	ldr	r3, [pc, #4]	; (801465c <_strtod_r+0x8>)
 8014656:	f7ff b9f3 	b.w	8013a40 <_strtod_l>
 801465a:	bf00      	nop
 801465c:	20000204 	.word	0x20000204

08014660 <strtod>:
 8014660:	460a      	mov	r2, r1
 8014662:	4601      	mov	r1, r0
 8014664:	4802      	ldr	r0, [pc, #8]	; (8014670 <strtod+0x10>)
 8014666:	4b03      	ldr	r3, [pc, #12]	; (8014674 <strtod+0x14>)
 8014668:	6800      	ldr	r0, [r0, #0]
 801466a:	f7ff b9e9 	b.w	8013a40 <_strtod_l>
 801466e:	bf00      	nop
 8014670:	2000019c 	.word	0x2000019c
 8014674:	20000204 	.word	0x20000204

08014678 <_strtol_l.isra.0>:
 8014678:	2b01      	cmp	r3, #1
 801467a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801467e:	d001      	beq.n	8014684 <_strtol_l.isra.0+0xc>
 8014680:	2b24      	cmp	r3, #36	; 0x24
 8014682:	d906      	bls.n	8014692 <_strtol_l.isra.0+0x1a>
 8014684:	f7fe fa64 	bl	8012b50 <__errno>
 8014688:	2316      	movs	r3, #22
 801468a:	6003      	str	r3, [r0, #0]
 801468c:	2000      	movs	r0, #0
 801468e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014692:	4f3a      	ldr	r7, [pc, #232]	; (801477c <_strtol_l.isra.0+0x104>)
 8014694:	468e      	mov	lr, r1
 8014696:	4676      	mov	r6, lr
 8014698:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801469c:	5de5      	ldrb	r5, [r4, r7]
 801469e:	f015 0508 	ands.w	r5, r5, #8
 80146a2:	d1f8      	bne.n	8014696 <_strtol_l.isra.0+0x1e>
 80146a4:	2c2d      	cmp	r4, #45	; 0x2d
 80146a6:	d134      	bne.n	8014712 <_strtol_l.isra.0+0x9a>
 80146a8:	f89e 4000 	ldrb.w	r4, [lr]
 80146ac:	f04f 0801 	mov.w	r8, #1
 80146b0:	f106 0e02 	add.w	lr, r6, #2
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d05c      	beq.n	8014772 <_strtol_l.isra.0+0xfa>
 80146b8:	2b10      	cmp	r3, #16
 80146ba:	d10c      	bne.n	80146d6 <_strtol_l.isra.0+0x5e>
 80146bc:	2c30      	cmp	r4, #48	; 0x30
 80146be:	d10a      	bne.n	80146d6 <_strtol_l.isra.0+0x5e>
 80146c0:	f89e 4000 	ldrb.w	r4, [lr]
 80146c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80146c8:	2c58      	cmp	r4, #88	; 0x58
 80146ca:	d14d      	bne.n	8014768 <_strtol_l.isra.0+0xf0>
 80146cc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80146d0:	2310      	movs	r3, #16
 80146d2:	f10e 0e02 	add.w	lr, lr, #2
 80146d6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80146da:	f10c 3cff 	add.w	ip, ip, #4294967295
 80146de:	2600      	movs	r6, #0
 80146e0:	fbbc f9f3 	udiv	r9, ip, r3
 80146e4:	4635      	mov	r5, r6
 80146e6:	fb03 ca19 	mls	sl, r3, r9, ip
 80146ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80146ee:	2f09      	cmp	r7, #9
 80146f0:	d818      	bhi.n	8014724 <_strtol_l.isra.0+0xac>
 80146f2:	463c      	mov	r4, r7
 80146f4:	42a3      	cmp	r3, r4
 80146f6:	dd24      	ble.n	8014742 <_strtol_l.isra.0+0xca>
 80146f8:	2e00      	cmp	r6, #0
 80146fa:	db1f      	blt.n	801473c <_strtol_l.isra.0+0xc4>
 80146fc:	45a9      	cmp	r9, r5
 80146fe:	d31d      	bcc.n	801473c <_strtol_l.isra.0+0xc4>
 8014700:	d101      	bne.n	8014706 <_strtol_l.isra.0+0x8e>
 8014702:	45a2      	cmp	sl, r4
 8014704:	db1a      	blt.n	801473c <_strtol_l.isra.0+0xc4>
 8014706:	fb05 4503 	mla	r5, r5, r3, r4
 801470a:	2601      	movs	r6, #1
 801470c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014710:	e7eb      	b.n	80146ea <_strtol_l.isra.0+0x72>
 8014712:	2c2b      	cmp	r4, #43	; 0x2b
 8014714:	bf08      	it	eq
 8014716:	f89e 4000 	ldrbeq.w	r4, [lr]
 801471a:	46a8      	mov	r8, r5
 801471c:	bf08      	it	eq
 801471e:	f106 0e02 	addeq.w	lr, r6, #2
 8014722:	e7c7      	b.n	80146b4 <_strtol_l.isra.0+0x3c>
 8014724:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8014728:	2f19      	cmp	r7, #25
 801472a:	d801      	bhi.n	8014730 <_strtol_l.isra.0+0xb8>
 801472c:	3c37      	subs	r4, #55	; 0x37
 801472e:	e7e1      	b.n	80146f4 <_strtol_l.isra.0+0x7c>
 8014730:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014734:	2f19      	cmp	r7, #25
 8014736:	d804      	bhi.n	8014742 <_strtol_l.isra.0+0xca>
 8014738:	3c57      	subs	r4, #87	; 0x57
 801473a:	e7db      	b.n	80146f4 <_strtol_l.isra.0+0x7c>
 801473c:	f04f 36ff 	mov.w	r6, #4294967295
 8014740:	e7e4      	b.n	801470c <_strtol_l.isra.0+0x94>
 8014742:	2e00      	cmp	r6, #0
 8014744:	da05      	bge.n	8014752 <_strtol_l.isra.0+0xda>
 8014746:	2322      	movs	r3, #34	; 0x22
 8014748:	6003      	str	r3, [r0, #0]
 801474a:	4665      	mov	r5, ip
 801474c:	b942      	cbnz	r2, 8014760 <_strtol_l.isra.0+0xe8>
 801474e:	4628      	mov	r0, r5
 8014750:	e79d      	b.n	801468e <_strtol_l.isra.0+0x16>
 8014752:	f1b8 0f00 	cmp.w	r8, #0
 8014756:	d000      	beq.n	801475a <_strtol_l.isra.0+0xe2>
 8014758:	426d      	negs	r5, r5
 801475a:	2a00      	cmp	r2, #0
 801475c:	d0f7      	beq.n	801474e <_strtol_l.isra.0+0xd6>
 801475e:	b10e      	cbz	r6, 8014764 <_strtol_l.isra.0+0xec>
 8014760:	f10e 31ff 	add.w	r1, lr, #4294967295
 8014764:	6011      	str	r1, [r2, #0]
 8014766:	e7f2      	b.n	801474e <_strtol_l.isra.0+0xd6>
 8014768:	2430      	movs	r4, #48	; 0x30
 801476a:	2b00      	cmp	r3, #0
 801476c:	d1b3      	bne.n	80146d6 <_strtol_l.isra.0+0x5e>
 801476e:	2308      	movs	r3, #8
 8014770:	e7b1      	b.n	80146d6 <_strtol_l.isra.0+0x5e>
 8014772:	2c30      	cmp	r4, #48	; 0x30
 8014774:	d0a4      	beq.n	80146c0 <_strtol_l.isra.0+0x48>
 8014776:	230a      	movs	r3, #10
 8014778:	e7ad      	b.n	80146d6 <_strtol_l.isra.0+0x5e>
 801477a:	bf00      	nop
 801477c:	0801a129 	.word	0x0801a129

08014780 <_strtol_r>:
 8014780:	f7ff bf7a 	b.w	8014678 <_strtol_l.isra.0>

08014784 <_write_r>:
 8014784:	b538      	push	{r3, r4, r5, lr}
 8014786:	4d07      	ldr	r5, [pc, #28]	; (80147a4 <_write_r+0x20>)
 8014788:	4604      	mov	r4, r0
 801478a:	4608      	mov	r0, r1
 801478c:	4611      	mov	r1, r2
 801478e:	2200      	movs	r2, #0
 8014790:	602a      	str	r2, [r5, #0]
 8014792:	461a      	mov	r2, r3
 8014794:	f7ee fd8f 	bl	80032b6 <_write>
 8014798:	1c43      	adds	r3, r0, #1
 801479a:	d102      	bne.n	80147a2 <_write_r+0x1e>
 801479c:	682b      	ldr	r3, [r5, #0]
 801479e:	b103      	cbz	r3, 80147a2 <_write_r+0x1e>
 80147a0:	6023      	str	r3, [r4, #0]
 80147a2:	bd38      	pop	{r3, r4, r5, pc}
 80147a4:	2000337c 	.word	0x2000337c

080147a8 <_close_r>:
 80147a8:	b538      	push	{r3, r4, r5, lr}
 80147aa:	4d06      	ldr	r5, [pc, #24]	; (80147c4 <_close_r+0x1c>)
 80147ac:	2300      	movs	r3, #0
 80147ae:	4604      	mov	r4, r0
 80147b0:	4608      	mov	r0, r1
 80147b2:	602b      	str	r3, [r5, #0]
 80147b4:	f7ee fd9b 	bl	80032ee <_close>
 80147b8:	1c43      	adds	r3, r0, #1
 80147ba:	d102      	bne.n	80147c2 <_close_r+0x1a>
 80147bc:	682b      	ldr	r3, [r5, #0]
 80147be:	b103      	cbz	r3, 80147c2 <_close_r+0x1a>
 80147c0:	6023      	str	r3, [r4, #0]
 80147c2:	bd38      	pop	{r3, r4, r5, pc}
 80147c4:	2000337c 	.word	0x2000337c

080147c8 <quorem>:
 80147c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147cc:	6903      	ldr	r3, [r0, #16]
 80147ce:	690c      	ldr	r4, [r1, #16]
 80147d0:	42a3      	cmp	r3, r4
 80147d2:	4607      	mov	r7, r0
 80147d4:	f2c0 8081 	blt.w	80148da <quorem+0x112>
 80147d8:	3c01      	subs	r4, #1
 80147da:	f101 0814 	add.w	r8, r1, #20
 80147de:	f100 0514 	add.w	r5, r0, #20
 80147e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80147e6:	9301      	str	r3, [sp, #4]
 80147e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80147ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80147f0:	3301      	adds	r3, #1
 80147f2:	429a      	cmp	r2, r3
 80147f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80147f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80147fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8014800:	d331      	bcc.n	8014866 <quorem+0x9e>
 8014802:	f04f 0e00 	mov.w	lr, #0
 8014806:	4640      	mov	r0, r8
 8014808:	46ac      	mov	ip, r5
 801480a:	46f2      	mov	sl, lr
 801480c:	f850 2b04 	ldr.w	r2, [r0], #4
 8014810:	b293      	uxth	r3, r2
 8014812:	fb06 e303 	mla	r3, r6, r3, lr
 8014816:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801481a:	b29b      	uxth	r3, r3
 801481c:	ebaa 0303 	sub.w	r3, sl, r3
 8014820:	0c12      	lsrs	r2, r2, #16
 8014822:	f8dc a000 	ldr.w	sl, [ip]
 8014826:	fb06 e202 	mla	r2, r6, r2, lr
 801482a:	fa13 f38a 	uxtah	r3, r3, sl
 801482e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014832:	fa1f fa82 	uxth.w	sl, r2
 8014836:	f8dc 2000 	ldr.w	r2, [ip]
 801483a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801483e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014842:	b29b      	uxth	r3, r3
 8014844:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014848:	4581      	cmp	r9, r0
 801484a:	f84c 3b04 	str.w	r3, [ip], #4
 801484e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014852:	d2db      	bcs.n	801480c <quorem+0x44>
 8014854:	f855 300b 	ldr.w	r3, [r5, fp]
 8014858:	b92b      	cbnz	r3, 8014866 <quorem+0x9e>
 801485a:	9b01      	ldr	r3, [sp, #4]
 801485c:	3b04      	subs	r3, #4
 801485e:	429d      	cmp	r5, r3
 8014860:	461a      	mov	r2, r3
 8014862:	d32e      	bcc.n	80148c2 <quorem+0xfa>
 8014864:	613c      	str	r4, [r7, #16]
 8014866:	4638      	mov	r0, r7
 8014868:	f001 fd94 	bl	8016394 <__mcmp>
 801486c:	2800      	cmp	r0, #0
 801486e:	db24      	blt.n	80148ba <quorem+0xf2>
 8014870:	3601      	adds	r6, #1
 8014872:	4628      	mov	r0, r5
 8014874:	f04f 0c00 	mov.w	ip, #0
 8014878:	f858 2b04 	ldr.w	r2, [r8], #4
 801487c:	f8d0 e000 	ldr.w	lr, [r0]
 8014880:	b293      	uxth	r3, r2
 8014882:	ebac 0303 	sub.w	r3, ip, r3
 8014886:	0c12      	lsrs	r2, r2, #16
 8014888:	fa13 f38e 	uxtah	r3, r3, lr
 801488c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014890:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014894:	b29b      	uxth	r3, r3
 8014896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801489a:	45c1      	cmp	r9, r8
 801489c:	f840 3b04 	str.w	r3, [r0], #4
 80148a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80148a4:	d2e8      	bcs.n	8014878 <quorem+0xb0>
 80148a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80148aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80148ae:	b922      	cbnz	r2, 80148ba <quorem+0xf2>
 80148b0:	3b04      	subs	r3, #4
 80148b2:	429d      	cmp	r5, r3
 80148b4:	461a      	mov	r2, r3
 80148b6:	d30a      	bcc.n	80148ce <quorem+0x106>
 80148b8:	613c      	str	r4, [r7, #16]
 80148ba:	4630      	mov	r0, r6
 80148bc:	b003      	add	sp, #12
 80148be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148c2:	6812      	ldr	r2, [r2, #0]
 80148c4:	3b04      	subs	r3, #4
 80148c6:	2a00      	cmp	r2, #0
 80148c8:	d1cc      	bne.n	8014864 <quorem+0x9c>
 80148ca:	3c01      	subs	r4, #1
 80148cc:	e7c7      	b.n	801485e <quorem+0x96>
 80148ce:	6812      	ldr	r2, [r2, #0]
 80148d0:	3b04      	subs	r3, #4
 80148d2:	2a00      	cmp	r2, #0
 80148d4:	d1f0      	bne.n	80148b8 <quorem+0xf0>
 80148d6:	3c01      	subs	r4, #1
 80148d8:	e7eb      	b.n	80148b2 <quorem+0xea>
 80148da:	2000      	movs	r0, #0
 80148dc:	e7ee      	b.n	80148bc <quorem+0xf4>
	...

080148e0 <_dtoa_r>:
 80148e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148e4:	ed2d 8b02 	vpush	{d8}
 80148e8:	ec57 6b10 	vmov	r6, r7, d0
 80148ec:	b095      	sub	sp, #84	; 0x54
 80148ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80148f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80148f4:	9105      	str	r1, [sp, #20]
 80148f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80148fa:	4604      	mov	r4, r0
 80148fc:	9209      	str	r2, [sp, #36]	; 0x24
 80148fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8014900:	b975      	cbnz	r5, 8014920 <_dtoa_r+0x40>
 8014902:	2010      	movs	r0, #16
 8014904:	f001 fa56 	bl	8015db4 <malloc>
 8014908:	4602      	mov	r2, r0
 801490a:	6260      	str	r0, [r4, #36]	; 0x24
 801490c:	b920      	cbnz	r0, 8014918 <_dtoa_r+0x38>
 801490e:	4bb2      	ldr	r3, [pc, #712]	; (8014bd8 <_dtoa_r+0x2f8>)
 8014910:	21ea      	movs	r1, #234	; 0xea
 8014912:	48b2      	ldr	r0, [pc, #712]	; (8014bdc <_dtoa_r+0x2fc>)
 8014914:	f002 fe62 	bl	80175dc <__assert_func>
 8014918:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801491c:	6005      	str	r5, [r0, #0]
 801491e:	60c5      	str	r5, [r0, #12]
 8014920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014922:	6819      	ldr	r1, [r3, #0]
 8014924:	b151      	cbz	r1, 801493c <_dtoa_r+0x5c>
 8014926:	685a      	ldr	r2, [r3, #4]
 8014928:	604a      	str	r2, [r1, #4]
 801492a:	2301      	movs	r3, #1
 801492c:	4093      	lsls	r3, r2
 801492e:	608b      	str	r3, [r1, #8]
 8014930:	4620      	mov	r0, r4
 8014932:	f001 faa7 	bl	8015e84 <_Bfree>
 8014936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014938:	2200      	movs	r2, #0
 801493a:	601a      	str	r2, [r3, #0]
 801493c:	1e3b      	subs	r3, r7, #0
 801493e:	bfb9      	ittee	lt
 8014940:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014944:	9303      	strlt	r3, [sp, #12]
 8014946:	2300      	movge	r3, #0
 8014948:	f8c8 3000 	strge.w	r3, [r8]
 801494c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8014950:	4ba3      	ldr	r3, [pc, #652]	; (8014be0 <_dtoa_r+0x300>)
 8014952:	bfbc      	itt	lt
 8014954:	2201      	movlt	r2, #1
 8014956:	f8c8 2000 	strlt.w	r2, [r8]
 801495a:	ea33 0309 	bics.w	r3, r3, r9
 801495e:	d11b      	bne.n	8014998 <_dtoa_r+0xb8>
 8014960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014962:	f242 730f 	movw	r3, #9999	; 0x270f
 8014966:	6013      	str	r3, [r2, #0]
 8014968:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801496c:	4333      	orrs	r3, r6
 801496e:	f000 857a 	beq.w	8015466 <_dtoa_r+0xb86>
 8014972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014974:	b963      	cbnz	r3, 8014990 <_dtoa_r+0xb0>
 8014976:	4b9b      	ldr	r3, [pc, #620]	; (8014be4 <_dtoa_r+0x304>)
 8014978:	e024      	b.n	80149c4 <_dtoa_r+0xe4>
 801497a:	4b9b      	ldr	r3, [pc, #620]	; (8014be8 <_dtoa_r+0x308>)
 801497c:	9300      	str	r3, [sp, #0]
 801497e:	3308      	adds	r3, #8
 8014980:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014982:	6013      	str	r3, [r2, #0]
 8014984:	9800      	ldr	r0, [sp, #0]
 8014986:	b015      	add	sp, #84	; 0x54
 8014988:	ecbd 8b02 	vpop	{d8}
 801498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014990:	4b94      	ldr	r3, [pc, #592]	; (8014be4 <_dtoa_r+0x304>)
 8014992:	9300      	str	r3, [sp, #0]
 8014994:	3303      	adds	r3, #3
 8014996:	e7f3      	b.n	8014980 <_dtoa_r+0xa0>
 8014998:	ed9d 7b02 	vldr	d7, [sp, #8]
 801499c:	2200      	movs	r2, #0
 801499e:	ec51 0b17 	vmov	r0, r1, d7
 80149a2:	2300      	movs	r3, #0
 80149a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80149a8:	f7ec f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 80149ac:	4680      	mov	r8, r0
 80149ae:	b158      	cbz	r0, 80149c8 <_dtoa_r+0xe8>
 80149b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80149b2:	2301      	movs	r3, #1
 80149b4:	6013      	str	r3, [r2, #0]
 80149b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	f000 8551 	beq.w	8015460 <_dtoa_r+0xb80>
 80149be:	488b      	ldr	r0, [pc, #556]	; (8014bec <_dtoa_r+0x30c>)
 80149c0:	6018      	str	r0, [r3, #0]
 80149c2:	1e43      	subs	r3, r0, #1
 80149c4:	9300      	str	r3, [sp, #0]
 80149c6:	e7dd      	b.n	8014984 <_dtoa_r+0xa4>
 80149c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80149cc:	aa12      	add	r2, sp, #72	; 0x48
 80149ce:	a913      	add	r1, sp, #76	; 0x4c
 80149d0:	4620      	mov	r0, r4
 80149d2:	f001 fdff 	bl	80165d4 <__d2b>
 80149d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80149da:	4683      	mov	fp, r0
 80149dc:	2d00      	cmp	r5, #0
 80149de:	d07c      	beq.n	8014ada <_dtoa_r+0x1fa>
 80149e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80149e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80149ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80149ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80149f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80149f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80149fa:	4b7d      	ldr	r3, [pc, #500]	; (8014bf0 <_dtoa_r+0x310>)
 80149fc:	2200      	movs	r2, #0
 80149fe:	4630      	mov	r0, r6
 8014a00:	4639      	mov	r1, r7
 8014a02:	f7eb fc41 	bl	8000288 <__aeabi_dsub>
 8014a06:	a36e      	add	r3, pc, #440	; (adr r3, 8014bc0 <_dtoa_r+0x2e0>)
 8014a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a0c:	f7eb fdf4 	bl	80005f8 <__aeabi_dmul>
 8014a10:	a36d      	add	r3, pc, #436	; (adr r3, 8014bc8 <_dtoa_r+0x2e8>)
 8014a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a16:	f7eb fc39 	bl	800028c <__adddf3>
 8014a1a:	4606      	mov	r6, r0
 8014a1c:	4628      	mov	r0, r5
 8014a1e:	460f      	mov	r7, r1
 8014a20:	f7eb fd80 	bl	8000524 <__aeabi_i2d>
 8014a24:	a36a      	add	r3, pc, #424	; (adr r3, 8014bd0 <_dtoa_r+0x2f0>)
 8014a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a2a:	f7eb fde5 	bl	80005f8 <__aeabi_dmul>
 8014a2e:	4602      	mov	r2, r0
 8014a30:	460b      	mov	r3, r1
 8014a32:	4630      	mov	r0, r6
 8014a34:	4639      	mov	r1, r7
 8014a36:	f7eb fc29 	bl	800028c <__adddf3>
 8014a3a:	4606      	mov	r6, r0
 8014a3c:	460f      	mov	r7, r1
 8014a3e:	f7ec f88b 	bl	8000b58 <__aeabi_d2iz>
 8014a42:	2200      	movs	r2, #0
 8014a44:	4682      	mov	sl, r0
 8014a46:	2300      	movs	r3, #0
 8014a48:	4630      	mov	r0, r6
 8014a4a:	4639      	mov	r1, r7
 8014a4c:	f7ec f846 	bl	8000adc <__aeabi_dcmplt>
 8014a50:	b148      	cbz	r0, 8014a66 <_dtoa_r+0x186>
 8014a52:	4650      	mov	r0, sl
 8014a54:	f7eb fd66 	bl	8000524 <__aeabi_i2d>
 8014a58:	4632      	mov	r2, r6
 8014a5a:	463b      	mov	r3, r7
 8014a5c:	f7ec f834 	bl	8000ac8 <__aeabi_dcmpeq>
 8014a60:	b908      	cbnz	r0, 8014a66 <_dtoa_r+0x186>
 8014a62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014a66:	f1ba 0f16 	cmp.w	sl, #22
 8014a6a:	d854      	bhi.n	8014b16 <_dtoa_r+0x236>
 8014a6c:	4b61      	ldr	r3, [pc, #388]	; (8014bf4 <_dtoa_r+0x314>)
 8014a6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014a7a:	f7ec f82f 	bl	8000adc <__aeabi_dcmplt>
 8014a7e:	2800      	cmp	r0, #0
 8014a80:	d04b      	beq.n	8014b1a <_dtoa_r+0x23a>
 8014a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014a86:	2300      	movs	r3, #0
 8014a88:	930e      	str	r3, [sp, #56]	; 0x38
 8014a8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014a8c:	1b5d      	subs	r5, r3, r5
 8014a8e:	1e6b      	subs	r3, r5, #1
 8014a90:	9304      	str	r3, [sp, #16]
 8014a92:	bf43      	ittte	mi
 8014a94:	2300      	movmi	r3, #0
 8014a96:	f1c5 0801 	rsbmi	r8, r5, #1
 8014a9a:	9304      	strmi	r3, [sp, #16]
 8014a9c:	f04f 0800 	movpl.w	r8, #0
 8014aa0:	f1ba 0f00 	cmp.w	sl, #0
 8014aa4:	db3b      	blt.n	8014b1e <_dtoa_r+0x23e>
 8014aa6:	9b04      	ldr	r3, [sp, #16]
 8014aa8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8014aac:	4453      	add	r3, sl
 8014aae:	9304      	str	r3, [sp, #16]
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	9306      	str	r3, [sp, #24]
 8014ab4:	9b05      	ldr	r3, [sp, #20]
 8014ab6:	2b09      	cmp	r3, #9
 8014ab8:	d869      	bhi.n	8014b8e <_dtoa_r+0x2ae>
 8014aba:	2b05      	cmp	r3, #5
 8014abc:	bfc4      	itt	gt
 8014abe:	3b04      	subgt	r3, #4
 8014ac0:	9305      	strgt	r3, [sp, #20]
 8014ac2:	9b05      	ldr	r3, [sp, #20]
 8014ac4:	f1a3 0302 	sub.w	r3, r3, #2
 8014ac8:	bfcc      	ite	gt
 8014aca:	2500      	movgt	r5, #0
 8014acc:	2501      	movle	r5, #1
 8014ace:	2b03      	cmp	r3, #3
 8014ad0:	d869      	bhi.n	8014ba6 <_dtoa_r+0x2c6>
 8014ad2:	e8df f003 	tbb	[pc, r3]
 8014ad6:	4e2c      	.short	0x4e2c
 8014ad8:	5a4c      	.short	0x5a4c
 8014ada:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8014ade:	441d      	add	r5, r3
 8014ae0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014ae4:	2b20      	cmp	r3, #32
 8014ae6:	bfc1      	itttt	gt
 8014ae8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014aec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014af0:	fa09 f303 	lslgt.w	r3, r9, r3
 8014af4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014af8:	bfda      	itte	le
 8014afa:	f1c3 0320 	rsble	r3, r3, #32
 8014afe:	fa06 f003 	lslle.w	r0, r6, r3
 8014b02:	4318      	orrgt	r0, r3
 8014b04:	f7eb fcfe 	bl	8000504 <__aeabi_ui2d>
 8014b08:	2301      	movs	r3, #1
 8014b0a:	4606      	mov	r6, r0
 8014b0c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014b10:	3d01      	subs	r5, #1
 8014b12:	9310      	str	r3, [sp, #64]	; 0x40
 8014b14:	e771      	b.n	80149fa <_dtoa_r+0x11a>
 8014b16:	2301      	movs	r3, #1
 8014b18:	e7b6      	b.n	8014a88 <_dtoa_r+0x1a8>
 8014b1a:	900e      	str	r0, [sp, #56]	; 0x38
 8014b1c:	e7b5      	b.n	8014a8a <_dtoa_r+0x1aa>
 8014b1e:	f1ca 0300 	rsb	r3, sl, #0
 8014b22:	9306      	str	r3, [sp, #24]
 8014b24:	2300      	movs	r3, #0
 8014b26:	eba8 080a 	sub.w	r8, r8, sl
 8014b2a:	930d      	str	r3, [sp, #52]	; 0x34
 8014b2c:	e7c2      	b.n	8014ab4 <_dtoa_r+0x1d4>
 8014b2e:	2300      	movs	r3, #0
 8014b30:	9308      	str	r3, [sp, #32]
 8014b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	dc39      	bgt.n	8014bac <_dtoa_r+0x2cc>
 8014b38:	f04f 0901 	mov.w	r9, #1
 8014b3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8014b40:	464b      	mov	r3, r9
 8014b42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014b46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014b48:	2200      	movs	r2, #0
 8014b4a:	6042      	str	r2, [r0, #4]
 8014b4c:	2204      	movs	r2, #4
 8014b4e:	f102 0614 	add.w	r6, r2, #20
 8014b52:	429e      	cmp	r6, r3
 8014b54:	6841      	ldr	r1, [r0, #4]
 8014b56:	d92f      	bls.n	8014bb8 <_dtoa_r+0x2d8>
 8014b58:	4620      	mov	r0, r4
 8014b5a:	f001 f953 	bl	8015e04 <_Balloc>
 8014b5e:	9000      	str	r0, [sp, #0]
 8014b60:	2800      	cmp	r0, #0
 8014b62:	d14b      	bne.n	8014bfc <_dtoa_r+0x31c>
 8014b64:	4b24      	ldr	r3, [pc, #144]	; (8014bf8 <_dtoa_r+0x318>)
 8014b66:	4602      	mov	r2, r0
 8014b68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014b6c:	e6d1      	b.n	8014912 <_dtoa_r+0x32>
 8014b6e:	2301      	movs	r3, #1
 8014b70:	e7de      	b.n	8014b30 <_dtoa_r+0x250>
 8014b72:	2300      	movs	r3, #0
 8014b74:	9308      	str	r3, [sp, #32]
 8014b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b78:	eb0a 0903 	add.w	r9, sl, r3
 8014b7c:	f109 0301 	add.w	r3, r9, #1
 8014b80:	2b01      	cmp	r3, #1
 8014b82:	9301      	str	r3, [sp, #4]
 8014b84:	bfb8      	it	lt
 8014b86:	2301      	movlt	r3, #1
 8014b88:	e7dd      	b.n	8014b46 <_dtoa_r+0x266>
 8014b8a:	2301      	movs	r3, #1
 8014b8c:	e7f2      	b.n	8014b74 <_dtoa_r+0x294>
 8014b8e:	2501      	movs	r5, #1
 8014b90:	2300      	movs	r3, #0
 8014b92:	9305      	str	r3, [sp, #20]
 8014b94:	9508      	str	r5, [sp, #32]
 8014b96:	f04f 39ff 	mov.w	r9, #4294967295
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8014ba0:	2312      	movs	r3, #18
 8014ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8014ba4:	e7cf      	b.n	8014b46 <_dtoa_r+0x266>
 8014ba6:	2301      	movs	r3, #1
 8014ba8:	9308      	str	r3, [sp, #32]
 8014baa:	e7f4      	b.n	8014b96 <_dtoa_r+0x2b6>
 8014bac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014bb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8014bb4:	464b      	mov	r3, r9
 8014bb6:	e7c6      	b.n	8014b46 <_dtoa_r+0x266>
 8014bb8:	3101      	adds	r1, #1
 8014bba:	6041      	str	r1, [r0, #4]
 8014bbc:	0052      	lsls	r2, r2, #1
 8014bbe:	e7c6      	b.n	8014b4e <_dtoa_r+0x26e>
 8014bc0:	636f4361 	.word	0x636f4361
 8014bc4:	3fd287a7 	.word	0x3fd287a7
 8014bc8:	8b60c8b3 	.word	0x8b60c8b3
 8014bcc:	3fc68a28 	.word	0x3fc68a28
 8014bd0:	509f79fb 	.word	0x509f79fb
 8014bd4:	3fd34413 	.word	0x3fd34413
 8014bd8:	0801a236 	.word	0x0801a236
 8014bdc:	0801a24d 	.word	0x0801a24d
 8014be0:	7ff00000 	.word	0x7ff00000
 8014be4:	0801a232 	.word	0x0801a232
 8014be8:	0801a229 	.word	0x0801a229
 8014bec:	0801a512 	.word	0x0801a512
 8014bf0:	3ff80000 	.word	0x3ff80000
 8014bf4:	0801a428 	.word	0x0801a428
 8014bf8:	0801a2ac 	.word	0x0801a2ac
 8014bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bfe:	9a00      	ldr	r2, [sp, #0]
 8014c00:	601a      	str	r2, [r3, #0]
 8014c02:	9b01      	ldr	r3, [sp, #4]
 8014c04:	2b0e      	cmp	r3, #14
 8014c06:	f200 80ad 	bhi.w	8014d64 <_dtoa_r+0x484>
 8014c0a:	2d00      	cmp	r5, #0
 8014c0c:	f000 80aa 	beq.w	8014d64 <_dtoa_r+0x484>
 8014c10:	f1ba 0f00 	cmp.w	sl, #0
 8014c14:	dd36      	ble.n	8014c84 <_dtoa_r+0x3a4>
 8014c16:	4ac3      	ldr	r2, [pc, #780]	; (8014f24 <_dtoa_r+0x644>)
 8014c18:	f00a 030f 	and.w	r3, sl, #15
 8014c1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014c20:	ed93 7b00 	vldr	d7, [r3]
 8014c24:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8014c28:	ea4f 172a 	mov.w	r7, sl, asr #4
 8014c2c:	eeb0 8a47 	vmov.f32	s16, s14
 8014c30:	eef0 8a67 	vmov.f32	s17, s15
 8014c34:	d016      	beq.n	8014c64 <_dtoa_r+0x384>
 8014c36:	4bbc      	ldr	r3, [pc, #752]	; (8014f28 <_dtoa_r+0x648>)
 8014c38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014c3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014c40:	f7eb fe04 	bl	800084c <__aeabi_ddiv>
 8014c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c48:	f007 070f 	and.w	r7, r7, #15
 8014c4c:	2503      	movs	r5, #3
 8014c4e:	4eb6      	ldr	r6, [pc, #728]	; (8014f28 <_dtoa_r+0x648>)
 8014c50:	b957      	cbnz	r7, 8014c68 <_dtoa_r+0x388>
 8014c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c56:	ec53 2b18 	vmov	r2, r3, d8
 8014c5a:	f7eb fdf7 	bl	800084c <__aeabi_ddiv>
 8014c5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c62:	e029      	b.n	8014cb8 <_dtoa_r+0x3d8>
 8014c64:	2502      	movs	r5, #2
 8014c66:	e7f2      	b.n	8014c4e <_dtoa_r+0x36e>
 8014c68:	07f9      	lsls	r1, r7, #31
 8014c6a:	d508      	bpl.n	8014c7e <_dtoa_r+0x39e>
 8014c6c:	ec51 0b18 	vmov	r0, r1, d8
 8014c70:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014c74:	f7eb fcc0 	bl	80005f8 <__aeabi_dmul>
 8014c78:	ec41 0b18 	vmov	d8, r0, r1
 8014c7c:	3501      	adds	r5, #1
 8014c7e:	107f      	asrs	r7, r7, #1
 8014c80:	3608      	adds	r6, #8
 8014c82:	e7e5      	b.n	8014c50 <_dtoa_r+0x370>
 8014c84:	f000 80a6 	beq.w	8014dd4 <_dtoa_r+0x4f4>
 8014c88:	f1ca 0600 	rsb	r6, sl, #0
 8014c8c:	4ba5      	ldr	r3, [pc, #660]	; (8014f24 <_dtoa_r+0x644>)
 8014c8e:	4fa6      	ldr	r7, [pc, #664]	; (8014f28 <_dtoa_r+0x648>)
 8014c90:	f006 020f 	and.w	r2, r6, #15
 8014c94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014ca0:	f7eb fcaa 	bl	80005f8 <__aeabi_dmul>
 8014ca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ca8:	1136      	asrs	r6, r6, #4
 8014caa:	2300      	movs	r3, #0
 8014cac:	2502      	movs	r5, #2
 8014cae:	2e00      	cmp	r6, #0
 8014cb0:	f040 8085 	bne.w	8014dbe <_dtoa_r+0x4de>
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d1d2      	bne.n	8014c5e <_dtoa_r+0x37e>
 8014cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	f000 808c 	beq.w	8014dd8 <_dtoa_r+0x4f8>
 8014cc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014cc4:	4b99      	ldr	r3, [pc, #612]	; (8014f2c <_dtoa_r+0x64c>)
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	4630      	mov	r0, r6
 8014cca:	4639      	mov	r1, r7
 8014ccc:	f7eb ff06 	bl	8000adc <__aeabi_dcmplt>
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	f000 8081 	beq.w	8014dd8 <_dtoa_r+0x4f8>
 8014cd6:	9b01      	ldr	r3, [sp, #4]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d07d      	beq.n	8014dd8 <_dtoa_r+0x4f8>
 8014cdc:	f1b9 0f00 	cmp.w	r9, #0
 8014ce0:	dd3c      	ble.n	8014d5c <_dtoa_r+0x47c>
 8014ce2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014ce6:	9307      	str	r3, [sp, #28]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	4b91      	ldr	r3, [pc, #580]	; (8014f30 <_dtoa_r+0x650>)
 8014cec:	4630      	mov	r0, r6
 8014cee:	4639      	mov	r1, r7
 8014cf0:	f7eb fc82 	bl	80005f8 <__aeabi_dmul>
 8014cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014cf8:	3501      	adds	r5, #1
 8014cfa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8014cfe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014d02:	4628      	mov	r0, r5
 8014d04:	f7eb fc0e 	bl	8000524 <__aeabi_i2d>
 8014d08:	4632      	mov	r2, r6
 8014d0a:	463b      	mov	r3, r7
 8014d0c:	f7eb fc74 	bl	80005f8 <__aeabi_dmul>
 8014d10:	4b88      	ldr	r3, [pc, #544]	; (8014f34 <_dtoa_r+0x654>)
 8014d12:	2200      	movs	r2, #0
 8014d14:	f7eb faba 	bl	800028c <__adddf3>
 8014d18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014d20:	9303      	str	r3, [sp, #12]
 8014d22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d15c      	bne.n	8014de2 <_dtoa_r+0x502>
 8014d28:	4b83      	ldr	r3, [pc, #524]	; (8014f38 <_dtoa_r+0x658>)
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	4630      	mov	r0, r6
 8014d2e:	4639      	mov	r1, r7
 8014d30:	f7eb faaa 	bl	8000288 <__aeabi_dsub>
 8014d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d38:	4606      	mov	r6, r0
 8014d3a:	460f      	mov	r7, r1
 8014d3c:	f7eb feec 	bl	8000b18 <__aeabi_dcmpgt>
 8014d40:	2800      	cmp	r0, #0
 8014d42:	f040 8296 	bne.w	8015272 <_dtoa_r+0x992>
 8014d46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014d4a:	4630      	mov	r0, r6
 8014d4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d50:	4639      	mov	r1, r7
 8014d52:	f7eb fec3 	bl	8000adc <__aeabi_dcmplt>
 8014d56:	2800      	cmp	r0, #0
 8014d58:	f040 8288 	bne.w	801526c <_dtoa_r+0x98c>
 8014d5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014d60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014d64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	f2c0 8158 	blt.w	801501c <_dtoa_r+0x73c>
 8014d6c:	f1ba 0f0e 	cmp.w	sl, #14
 8014d70:	f300 8154 	bgt.w	801501c <_dtoa_r+0x73c>
 8014d74:	4b6b      	ldr	r3, [pc, #428]	; (8014f24 <_dtoa_r+0x644>)
 8014d76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014d7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	f280 80e3 	bge.w	8014f4c <_dtoa_r+0x66c>
 8014d86:	9b01      	ldr	r3, [sp, #4]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	f300 80df 	bgt.w	8014f4c <_dtoa_r+0x66c>
 8014d8e:	f040 826d 	bne.w	801526c <_dtoa_r+0x98c>
 8014d92:	4b69      	ldr	r3, [pc, #420]	; (8014f38 <_dtoa_r+0x658>)
 8014d94:	2200      	movs	r2, #0
 8014d96:	4640      	mov	r0, r8
 8014d98:	4649      	mov	r1, r9
 8014d9a:	f7eb fc2d 	bl	80005f8 <__aeabi_dmul>
 8014d9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014da2:	f7eb feaf 	bl	8000b04 <__aeabi_dcmpge>
 8014da6:	9e01      	ldr	r6, [sp, #4]
 8014da8:	4637      	mov	r7, r6
 8014daa:	2800      	cmp	r0, #0
 8014dac:	f040 8243 	bne.w	8015236 <_dtoa_r+0x956>
 8014db0:	9d00      	ldr	r5, [sp, #0]
 8014db2:	2331      	movs	r3, #49	; 0x31
 8014db4:	f805 3b01 	strb.w	r3, [r5], #1
 8014db8:	f10a 0a01 	add.w	sl, sl, #1
 8014dbc:	e23f      	b.n	801523e <_dtoa_r+0x95e>
 8014dbe:	07f2      	lsls	r2, r6, #31
 8014dc0:	d505      	bpl.n	8014dce <_dtoa_r+0x4ee>
 8014dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014dc6:	f7eb fc17 	bl	80005f8 <__aeabi_dmul>
 8014dca:	3501      	adds	r5, #1
 8014dcc:	2301      	movs	r3, #1
 8014dce:	1076      	asrs	r6, r6, #1
 8014dd0:	3708      	adds	r7, #8
 8014dd2:	e76c      	b.n	8014cae <_dtoa_r+0x3ce>
 8014dd4:	2502      	movs	r5, #2
 8014dd6:	e76f      	b.n	8014cb8 <_dtoa_r+0x3d8>
 8014dd8:	9b01      	ldr	r3, [sp, #4]
 8014dda:	f8cd a01c 	str.w	sl, [sp, #28]
 8014dde:	930c      	str	r3, [sp, #48]	; 0x30
 8014de0:	e78d      	b.n	8014cfe <_dtoa_r+0x41e>
 8014de2:	9900      	ldr	r1, [sp, #0]
 8014de4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014de6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014de8:	4b4e      	ldr	r3, [pc, #312]	; (8014f24 <_dtoa_r+0x644>)
 8014dea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014dee:	4401      	add	r1, r0
 8014df0:	9102      	str	r1, [sp, #8]
 8014df2:	9908      	ldr	r1, [sp, #32]
 8014df4:	eeb0 8a47 	vmov.f32	s16, s14
 8014df8:	eef0 8a67 	vmov.f32	s17, s15
 8014dfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014e04:	2900      	cmp	r1, #0
 8014e06:	d045      	beq.n	8014e94 <_dtoa_r+0x5b4>
 8014e08:	494c      	ldr	r1, [pc, #304]	; (8014f3c <_dtoa_r+0x65c>)
 8014e0a:	2000      	movs	r0, #0
 8014e0c:	f7eb fd1e 	bl	800084c <__aeabi_ddiv>
 8014e10:	ec53 2b18 	vmov	r2, r3, d8
 8014e14:	f7eb fa38 	bl	8000288 <__aeabi_dsub>
 8014e18:	9d00      	ldr	r5, [sp, #0]
 8014e1a:	ec41 0b18 	vmov	d8, r0, r1
 8014e1e:	4639      	mov	r1, r7
 8014e20:	4630      	mov	r0, r6
 8014e22:	f7eb fe99 	bl	8000b58 <__aeabi_d2iz>
 8014e26:	900c      	str	r0, [sp, #48]	; 0x30
 8014e28:	f7eb fb7c 	bl	8000524 <__aeabi_i2d>
 8014e2c:	4602      	mov	r2, r0
 8014e2e:	460b      	mov	r3, r1
 8014e30:	4630      	mov	r0, r6
 8014e32:	4639      	mov	r1, r7
 8014e34:	f7eb fa28 	bl	8000288 <__aeabi_dsub>
 8014e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e3a:	3330      	adds	r3, #48	; 0x30
 8014e3c:	f805 3b01 	strb.w	r3, [r5], #1
 8014e40:	ec53 2b18 	vmov	r2, r3, d8
 8014e44:	4606      	mov	r6, r0
 8014e46:	460f      	mov	r7, r1
 8014e48:	f7eb fe48 	bl	8000adc <__aeabi_dcmplt>
 8014e4c:	2800      	cmp	r0, #0
 8014e4e:	d165      	bne.n	8014f1c <_dtoa_r+0x63c>
 8014e50:	4632      	mov	r2, r6
 8014e52:	463b      	mov	r3, r7
 8014e54:	4935      	ldr	r1, [pc, #212]	; (8014f2c <_dtoa_r+0x64c>)
 8014e56:	2000      	movs	r0, #0
 8014e58:	f7eb fa16 	bl	8000288 <__aeabi_dsub>
 8014e5c:	ec53 2b18 	vmov	r2, r3, d8
 8014e60:	f7eb fe3c 	bl	8000adc <__aeabi_dcmplt>
 8014e64:	2800      	cmp	r0, #0
 8014e66:	f040 80b9 	bne.w	8014fdc <_dtoa_r+0x6fc>
 8014e6a:	9b02      	ldr	r3, [sp, #8]
 8014e6c:	429d      	cmp	r5, r3
 8014e6e:	f43f af75 	beq.w	8014d5c <_dtoa_r+0x47c>
 8014e72:	4b2f      	ldr	r3, [pc, #188]	; (8014f30 <_dtoa_r+0x650>)
 8014e74:	ec51 0b18 	vmov	r0, r1, d8
 8014e78:	2200      	movs	r2, #0
 8014e7a:	f7eb fbbd 	bl	80005f8 <__aeabi_dmul>
 8014e7e:	4b2c      	ldr	r3, [pc, #176]	; (8014f30 <_dtoa_r+0x650>)
 8014e80:	ec41 0b18 	vmov	d8, r0, r1
 8014e84:	2200      	movs	r2, #0
 8014e86:	4630      	mov	r0, r6
 8014e88:	4639      	mov	r1, r7
 8014e8a:	f7eb fbb5 	bl	80005f8 <__aeabi_dmul>
 8014e8e:	4606      	mov	r6, r0
 8014e90:	460f      	mov	r7, r1
 8014e92:	e7c4      	b.n	8014e1e <_dtoa_r+0x53e>
 8014e94:	ec51 0b17 	vmov	r0, r1, d7
 8014e98:	f7eb fbae 	bl	80005f8 <__aeabi_dmul>
 8014e9c:	9b02      	ldr	r3, [sp, #8]
 8014e9e:	9d00      	ldr	r5, [sp, #0]
 8014ea0:	930c      	str	r3, [sp, #48]	; 0x30
 8014ea2:	ec41 0b18 	vmov	d8, r0, r1
 8014ea6:	4639      	mov	r1, r7
 8014ea8:	4630      	mov	r0, r6
 8014eaa:	f7eb fe55 	bl	8000b58 <__aeabi_d2iz>
 8014eae:	9011      	str	r0, [sp, #68]	; 0x44
 8014eb0:	f7eb fb38 	bl	8000524 <__aeabi_i2d>
 8014eb4:	4602      	mov	r2, r0
 8014eb6:	460b      	mov	r3, r1
 8014eb8:	4630      	mov	r0, r6
 8014eba:	4639      	mov	r1, r7
 8014ebc:	f7eb f9e4 	bl	8000288 <__aeabi_dsub>
 8014ec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014ec2:	3330      	adds	r3, #48	; 0x30
 8014ec4:	f805 3b01 	strb.w	r3, [r5], #1
 8014ec8:	9b02      	ldr	r3, [sp, #8]
 8014eca:	429d      	cmp	r5, r3
 8014ecc:	4606      	mov	r6, r0
 8014ece:	460f      	mov	r7, r1
 8014ed0:	f04f 0200 	mov.w	r2, #0
 8014ed4:	d134      	bne.n	8014f40 <_dtoa_r+0x660>
 8014ed6:	4b19      	ldr	r3, [pc, #100]	; (8014f3c <_dtoa_r+0x65c>)
 8014ed8:	ec51 0b18 	vmov	r0, r1, d8
 8014edc:	f7eb f9d6 	bl	800028c <__adddf3>
 8014ee0:	4602      	mov	r2, r0
 8014ee2:	460b      	mov	r3, r1
 8014ee4:	4630      	mov	r0, r6
 8014ee6:	4639      	mov	r1, r7
 8014ee8:	f7eb fe16 	bl	8000b18 <__aeabi_dcmpgt>
 8014eec:	2800      	cmp	r0, #0
 8014eee:	d175      	bne.n	8014fdc <_dtoa_r+0x6fc>
 8014ef0:	ec53 2b18 	vmov	r2, r3, d8
 8014ef4:	4911      	ldr	r1, [pc, #68]	; (8014f3c <_dtoa_r+0x65c>)
 8014ef6:	2000      	movs	r0, #0
 8014ef8:	f7eb f9c6 	bl	8000288 <__aeabi_dsub>
 8014efc:	4602      	mov	r2, r0
 8014efe:	460b      	mov	r3, r1
 8014f00:	4630      	mov	r0, r6
 8014f02:	4639      	mov	r1, r7
 8014f04:	f7eb fdea 	bl	8000adc <__aeabi_dcmplt>
 8014f08:	2800      	cmp	r0, #0
 8014f0a:	f43f af27 	beq.w	8014d5c <_dtoa_r+0x47c>
 8014f0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014f10:	1e6b      	subs	r3, r5, #1
 8014f12:	930c      	str	r3, [sp, #48]	; 0x30
 8014f14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014f18:	2b30      	cmp	r3, #48	; 0x30
 8014f1a:	d0f8      	beq.n	8014f0e <_dtoa_r+0x62e>
 8014f1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014f20:	e04a      	b.n	8014fb8 <_dtoa_r+0x6d8>
 8014f22:	bf00      	nop
 8014f24:	0801a428 	.word	0x0801a428
 8014f28:	0801a400 	.word	0x0801a400
 8014f2c:	3ff00000 	.word	0x3ff00000
 8014f30:	40240000 	.word	0x40240000
 8014f34:	401c0000 	.word	0x401c0000
 8014f38:	40140000 	.word	0x40140000
 8014f3c:	3fe00000 	.word	0x3fe00000
 8014f40:	4baf      	ldr	r3, [pc, #700]	; (8015200 <_dtoa_r+0x920>)
 8014f42:	f7eb fb59 	bl	80005f8 <__aeabi_dmul>
 8014f46:	4606      	mov	r6, r0
 8014f48:	460f      	mov	r7, r1
 8014f4a:	e7ac      	b.n	8014ea6 <_dtoa_r+0x5c6>
 8014f4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014f50:	9d00      	ldr	r5, [sp, #0]
 8014f52:	4642      	mov	r2, r8
 8014f54:	464b      	mov	r3, r9
 8014f56:	4630      	mov	r0, r6
 8014f58:	4639      	mov	r1, r7
 8014f5a:	f7eb fc77 	bl	800084c <__aeabi_ddiv>
 8014f5e:	f7eb fdfb 	bl	8000b58 <__aeabi_d2iz>
 8014f62:	9002      	str	r0, [sp, #8]
 8014f64:	f7eb fade 	bl	8000524 <__aeabi_i2d>
 8014f68:	4642      	mov	r2, r8
 8014f6a:	464b      	mov	r3, r9
 8014f6c:	f7eb fb44 	bl	80005f8 <__aeabi_dmul>
 8014f70:	4602      	mov	r2, r0
 8014f72:	460b      	mov	r3, r1
 8014f74:	4630      	mov	r0, r6
 8014f76:	4639      	mov	r1, r7
 8014f78:	f7eb f986 	bl	8000288 <__aeabi_dsub>
 8014f7c:	9e02      	ldr	r6, [sp, #8]
 8014f7e:	9f01      	ldr	r7, [sp, #4]
 8014f80:	3630      	adds	r6, #48	; 0x30
 8014f82:	f805 6b01 	strb.w	r6, [r5], #1
 8014f86:	9e00      	ldr	r6, [sp, #0]
 8014f88:	1bae      	subs	r6, r5, r6
 8014f8a:	42b7      	cmp	r7, r6
 8014f8c:	4602      	mov	r2, r0
 8014f8e:	460b      	mov	r3, r1
 8014f90:	d137      	bne.n	8015002 <_dtoa_r+0x722>
 8014f92:	f7eb f97b 	bl	800028c <__adddf3>
 8014f96:	4642      	mov	r2, r8
 8014f98:	464b      	mov	r3, r9
 8014f9a:	4606      	mov	r6, r0
 8014f9c:	460f      	mov	r7, r1
 8014f9e:	f7eb fdbb 	bl	8000b18 <__aeabi_dcmpgt>
 8014fa2:	b9c8      	cbnz	r0, 8014fd8 <_dtoa_r+0x6f8>
 8014fa4:	4642      	mov	r2, r8
 8014fa6:	464b      	mov	r3, r9
 8014fa8:	4630      	mov	r0, r6
 8014faa:	4639      	mov	r1, r7
 8014fac:	f7eb fd8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8014fb0:	b110      	cbz	r0, 8014fb8 <_dtoa_r+0x6d8>
 8014fb2:	9b02      	ldr	r3, [sp, #8]
 8014fb4:	07d9      	lsls	r1, r3, #31
 8014fb6:	d40f      	bmi.n	8014fd8 <_dtoa_r+0x6f8>
 8014fb8:	4620      	mov	r0, r4
 8014fba:	4659      	mov	r1, fp
 8014fbc:	f000 ff62 	bl	8015e84 <_Bfree>
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	702b      	strb	r3, [r5, #0]
 8014fc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014fc6:	f10a 0001 	add.w	r0, sl, #1
 8014fca:	6018      	str	r0, [r3, #0]
 8014fcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	f43f acd8 	beq.w	8014984 <_dtoa_r+0xa4>
 8014fd4:	601d      	str	r5, [r3, #0]
 8014fd6:	e4d5      	b.n	8014984 <_dtoa_r+0xa4>
 8014fd8:	f8cd a01c 	str.w	sl, [sp, #28]
 8014fdc:	462b      	mov	r3, r5
 8014fde:	461d      	mov	r5, r3
 8014fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014fe4:	2a39      	cmp	r2, #57	; 0x39
 8014fe6:	d108      	bne.n	8014ffa <_dtoa_r+0x71a>
 8014fe8:	9a00      	ldr	r2, [sp, #0]
 8014fea:	429a      	cmp	r2, r3
 8014fec:	d1f7      	bne.n	8014fde <_dtoa_r+0x6fe>
 8014fee:	9a07      	ldr	r2, [sp, #28]
 8014ff0:	9900      	ldr	r1, [sp, #0]
 8014ff2:	3201      	adds	r2, #1
 8014ff4:	9207      	str	r2, [sp, #28]
 8014ff6:	2230      	movs	r2, #48	; 0x30
 8014ff8:	700a      	strb	r2, [r1, #0]
 8014ffa:	781a      	ldrb	r2, [r3, #0]
 8014ffc:	3201      	adds	r2, #1
 8014ffe:	701a      	strb	r2, [r3, #0]
 8015000:	e78c      	b.n	8014f1c <_dtoa_r+0x63c>
 8015002:	4b7f      	ldr	r3, [pc, #508]	; (8015200 <_dtoa_r+0x920>)
 8015004:	2200      	movs	r2, #0
 8015006:	f7eb faf7 	bl	80005f8 <__aeabi_dmul>
 801500a:	2200      	movs	r2, #0
 801500c:	2300      	movs	r3, #0
 801500e:	4606      	mov	r6, r0
 8015010:	460f      	mov	r7, r1
 8015012:	f7eb fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 8015016:	2800      	cmp	r0, #0
 8015018:	d09b      	beq.n	8014f52 <_dtoa_r+0x672>
 801501a:	e7cd      	b.n	8014fb8 <_dtoa_r+0x6d8>
 801501c:	9a08      	ldr	r2, [sp, #32]
 801501e:	2a00      	cmp	r2, #0
 8015020:	f000 80c4 	beq.w	80151ac <_dtoa_r+0x8cc>
 8015024:	9a05      	ldr	r2, [sp, #20]
 8015026:	2a01      	cmp	r2, #1
 8015028:	f300 80a8 	bgt.w	801517c <_dtoa_r+0x89c>
 801502c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801502e:	2a00      	cmp	r2, #0
 8015030:	f000 80a0 	beq.w	8015174 <_dtoa_r+0x894>
 8015034:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015038:	9e06      	ldr	r6, [sp, #24]
 801503a:	4645      	mov	r5, r8
 801503c:	9a04      	ldr	r2, [sp, #16]
 801503e:	2101      	movs	r1, #1
 8015040:	441a      	add	r2, r3
 8015042:	4620      	mov	r0, r4
 8015044:	4498      	add	r8, r3
 8015046:	9204      	str	r2, [sp, #16]
 8015048:	f001 f822 	bl	8016090 <__i2b>
 801504c:	4607      	mov	r7, r0
 801504e:	2d00      	cmp	r5, #0
 8015050:	dd0b      	ble.n	801506a <_dtoa_r+0x78a>
 8015052:	9b04      	ldr	r3, [sp, #16]
 8015054:	2b00      	cmp	r3, #0
 8015056:	dd08      	ble.n	801506a <_dtoa_r+0x78a>
 8015058:	42ab      	cmp	r3, r5
 801505a:	9a04      	ldr	r2, [sp, #16]
 801505c:	bfa8      	it	ge
 801505e:	462b      	movge	r3, r5
 8015060:	eba8 0803 	sub.w	r8, r8, r3
 8015064:	1aed      	subs	r5, r5, r3
 8015066:	1ad3      	subs	r3, r2, r3
 8015068:	9304      	str	r3, [sp, #16]
 801506a:	9b06      	ldr	r3, [sp, #24]
 801506c:	b1fb      	cbz	r3, 80150ae <_dtoa_r+0x7ce>
 801506e:	9b08      	ldr	r3, [sp, #32]
 8015070:	2b00      	cmp	r3, #0
 8015072:	f000 809f 	beq.w	80151b4 <_dtoa_r+0x8d4>
 8015076:	2e00      	cmp	r6, #0
 8015078:	dd11      	ble.n	801509e <_dtoa_r+0x7be>
 801507a:	4639      	mov	r1, r7
 801507c:	4632      	mov	r2, r6
 801507e:	4620      	mov	r0, r4
 8015080:	f001 f8c2 	bl	8016208 <__pow5mult>
 8015084:	465a      	mov	r2, fp
 8015086:	4601      	mov	r1, r0
 8015088:	4607      	mov	r7, r0
 801508a:	4620      	mov	r0, r4
 801508c:	f001 f816 	bl	80160bc <__multiply>
 8015090:	4659      	mov	r1, fp
 8015092:	9007      	str	r0, [sp, #28]
 8015094:	4620      	mov	r0, r4
 8015096:	f000 fef5 	bl	8015e84 <_Bfree>
 801509a:	9b07      	ldr	r3, [sp, #28]
 801509c:	469b      	mov	fp, r3
 801509e:	9b06      	ldr	r3, [sp, #24]
 80150a0:	1b9a      	subs	r2, r3, r6
 80150a2:	d004      	beq.n	80150ae <_dtoa_r+0x7ce>
 80150a4:	4659      	mov	r1, fp
 80150a6:	4620      	mov	r0, r4
 80150a8:	f001 f8ae 	bl	8016208 <__pow5mult>
 80150ac:	4683      	mov	fp, r0
 80150ae:	2101      	movs	r1, #1
 80150b0:	4620      	mov	r0, r4
 80150b2:	f000 ffed 	bl	8016090 <__i2b>
 80150b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	4606      	mov	r6, r0
 80150bc:	dd7c      	ble.n	80151b8 <_dtoa_r+0x8d8>
 80150be:	461a      	mov	r2, r3
 80150c0:	4601      	mov	r1, r0
 80150c2:	4620      	mov	r0, r4
 80150c4:	f001 f8a0 	bl	8016208 <__pow5mult>
 80150c8:	9b05      	ldr	r3, [sp, #20]
 80150ca:	2b01      	cmp	r3, #1
 80150cc:	4606      	mov	r6, r0
 80150ce:	dd76      	ble.n	80151be <_dtoa_r+0x8de>
 80150d0:	2300      	movs	r3, #0
 80150d2:	9306      	str	r3, [sp, #24]
 80150d4:	6933      	ldr	r3, [r6, #16]
 80150d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80150da:	6918      	ldr	r0, [r3, #16]
 80150dc:	f000 ff88 	bl	8015ff0 <__hi0bits>
 80150e0:	f1c0 0020 	rsb	r0, r0, #32
 80150e4:	9b04      	ldr	r3, [sp, #16]
 80150e6:	4418      	add	r0, r3
 80150e8:	f010 001f 	ands.w	r0, r0, #31
 80150ec:	f000 8086 	beq.w	80151fc <_dtoa_r+0x91c>
 80150f0:	f1c0 0320 	rsb	r3, r0, #32
 80150f4:	2b04      	cmp	r3, #4
 80150f6:	dd7f      	ble.n	80151f8 <_dtoa_r+0x918>
 80150f8:	f1c0 001c 	rsb	r0, r0, #28
 80150fc:	9b04      	ldr	r3, [sp, #16]
 80150fe:	4403      	add	r3, r0
 8015100:	4480      	add	r8, r0
 8015102:	4405      	add	r5, r0
 8015104:	9304      	str	r3, [sp, #16]
 8015106:	f1b8 0f00 	cmp.w	r8, #0
 801510a:	dd05      	ble.n	8015118 <_dtoa_r+0x838>
 801510c:	4659      	mov	r1, fp
 801510e:	4642      	mov	r2, r8
 8015110:	4620      	mov	r0, r4
 8015112:	f001 f8d3 	bl	80162bc <__lshift>
 8015116:	4683      	mov	fp, r0
 8015118:	9b04      	ldr	r3, [sp, #16]
 801511a:	2b00      	cmp	r3, #0
 801511c:	dd05      	ble.n	801512a <_dtoa_r+0x84a>
 801511e:	4631      	mov	r1, r6
 8015120:	461a      	mov	r2, r3
 8015122:	4620      	mov	r0, r4
 8015124:	f001 f8ca 	bl	80162bc <__lshift>
 8015128:	4606      	mov	r6, r0
 801512a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801512c:	2b00      	cmp	r3, #0
 801512e:	d069      	beq.n	8015204 <_dtoa_r+0x924>
 8015130:	4631      	mov	r1, r6
 8015132:	4658      	mov	r0, fp
 8015134:	f001 f92e 	bl	8016394 <__mcmp>
 8015138:	2800      	cmp	r0, #0
 801513a:	da63      	bge.n	8015204 <_dtoa_r+0x924>
 801513c:	2300      	movs	r3, #0
 801513e:	4659      	mov	r1, fp
 8015140:	220a      	movs	r2, #10
 8015142:	4620      	mov	r0, r4
 8015144:	f000 fec0 	bl	8015ec8 <__multadd>
 8015148:	9b08      	ldr	r3, [sp, #32]
 801514a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801514e:	4683      	mov	fp, r0
 8015150:	2b00      	cmp	r3, #0
 8015152:	f000 818f 	beq.w	8015474 <_dtoa_r+0xb94>
 8015156:	4639      	mov	r1, r7
 8015158:	2300      	movs	r3, #0
 801515a:	220a      	movs	r2, #10
 801515c:	4620      	mov	r0, r4
 801515e:	f000 feb3 	bl	8015ec8 <__multadd>
 8015162:	f1b9 0f00 	cmp.w	r9, #0
 8015166:	4607      	mov	r7, r0
 8015168:	f300 808e 	bgt.w	8015288 <_dtoa_r+0x9a8>
 801516c:	9b05      	ldr	r3, [sp, #20]
 801516e:	2b02      	cmp	r3, #2
 8015170:	dc50      	bgt.n	8015214 <_dtoa_r+0x934>
 8015172:	e089      	b.n	8015288 <_dtoa_r+0x9a8>
 8015174:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015176:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801517a:	e75d      	b.n	8015038 <_dtoa_r+0x758>
 801517c:	9b01      	ldr	r3, [sp, #4]
 801517e:	1e5e      	subs	r6, r3, #1
 8015180:	9b06      	ldr	r3, [sp, #24]
 8015182:	42b3      	cmp	r3, r6
 8015184:	bfbf      	itttt	lt
 8015186:	9b06      	ldrlt	r3, [sp, #24]
 8015188:	9606      	strlt	r6, [sp, #24]
 801518a:	1af2      	sublt	r2, r6, r3
 801518c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801518e:	bfb6      	itet	lt
 8015190:	189b      	addlt	r3, r3, r2
 8015192:	1b9e      	subge	r6, r3, r6
 8015194:	930d      	strlt	r3, [sp, #52]	; 0x34
 8015196:	9b01      	ldr	r3, [sp, #4]
 8015198:	bfb8      	it	lt
 801519a:	2600      	movlt	r6, #0
 801519c:	2b00      	cmp	r3, #0
 801519e:	bfb5      	itete	lt
 80151a0:	eba8 0503 	sublt.w	r5, r8, r3
 80151a4:	9b01      	ldrge	r3, [sp, #4]
 80151a6:	2300      	movlt	r3, #0
 80151a8:	4645      	movge	r5, r8
 80151aa:	e747      	b.n	801503c <_dtoa_r+0x75c>
 80151ac:	9e06      	ldr	r6, [sp, #24]
 80151ae:	9f08      	ldr	r7, [sp, #32]
 80151b0:	4645      	mov	r5, r8
 80151b2:	e74c      	b.n	801504e <_dtoa_r+0x76e>
 80151b4:	9a06      	ldr	r2, [sp, #24]
 80151b6:	e775      	b.n	80150a4 <_dtoa_r+0x7c4>
 80151b8:	9b05      	ldr	r3, [sp, #20]
 80151ba:	2b01      	cmp	r3, #1
 80151bc:	dc18      	bgt.n	80151f0 <_dtoa_r+0x910>
 80151be:	9b02      	ldr	r3, [sp, #8]
 80151c0:	b9b3      	cbnz	r3, 80151f0 <_dtoa_r+0x910>
 80151c2:	9b03      	ldr	r3, [sp, #12]
 80151c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80151c8:	b9a3      	cbnz	r3, 80151f4 <_dtoa_r+0x914>
 80151ca:	9b03      	ldr	r3, [sp, #12]
 80151cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80151d0:	0d1b      	lsrs	r3, r3, #20
 80151d2:	051b      	lsls	r3, r3, #20
 80151d4:	b12b      	cbz	r3, 80151e2 <_dtoa_r+0x902>
 80151d6:	9b04      	ldr	r3, [sp, #16]
 80151d8:	3301      	adds	r3, #1
 80151da:	9304      	str	r3, [sp, #16]
 80151dc:	f108 0801 	add.w	r8, r8, #1
 80151e0:	2301      	movs	r3, #1
 80151e2:	9306      	str	r3, [sp, #24]
 80151e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	f47f af74 	bne.w	80150d4 <_dtoa_r+0x7f4>
 80151ec:	2001      	movs	r0, #1
 80151ee:	e779      	b.n	80150e4 <_dtoa_r+0x804>
 80151f0:	2300      	movs	r3, #0
 80151f2:	e7f6      	b.n	80151e2 <_dtoa_r+0x902>
 80151f4:	9b02      	ldr	r3, [sp, #8]
 80151f6:	e7f4      	b.n	80151e2 <_dtoa_r+0x902>
 80151f8:	d085      	beq.n	8015106 <_dtoa_r+0x826>
 80151fa:	4618      	mov	r0, r3
 80151fc:	301c      	adds	r0, #28
 80151fe:	e77d      	b.n	80150fc <_dtoa_r+0x81c>
 8015200:	40240000 	.word	0x40240000
 8015204:	9b01      	ldr	r3, [sp, #4]
 8015206:	2b00      	cmp	r3, #0
 8015208:	dc38      	bgt.n	801527c <_dtoa_r+0x99c>
 801520a:	9b05      	ldr	r3, [sp, #20]
 801520c:	2b02      	cmp	r3, #2
 801520e:	dd35      	ble.n	801527c <_dtoa_r+0x99c>
 8015210:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015214:	f1b9 0f00 	cmp.w	r9, #0
 8015218:	d10d      	bne.n	8015236 <_dtoa_r+0x956>
 801521a:	4631      	mov	r1, r6
 801521c:	464b      	mov	r3, r9
 801521e:	2205      	movs	r2, #5
 8015220:	4620      	mov	r0, r4
 8015222:	f000 fe51 	bl	8015ec8 <__multadd>
 8015226:	4601      	mov	r1, r0
 8015228:	4606      	mov	r6, r0
 801522a:	4658      	mov	r0, fp
 801522c:	f001 f8b2 	bl	8016394 <__mcmp>
 8015230:	2800      	cmp	r0, #0
 8015232:	f73f adbd 	bgt.w	8014db0 <_dtoa_r+0x4d0>
 8015236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015238:	9d00      	ldr	r5, [sp, #0]
 801523a:	ea6f 0a03 	mvn.w	sl, r3
 801523e:	f04f 0800 	mov.w	r8, #0
 8015242:	4631      	mov	r1, r6
 8015244:	4620      	mov	r0, r4
 8015246:	f000 fe1d 	bl	8015e84 <_Bfree>
 801524a:	2f00      	cmp	r7, #0
 801524c:	f43f aeb4 	beq.w	8014fb8 <_dtoa_r+0x6d8>
 8015250:	f1b8 0f00 	cmp.w	r8, #0
 8015254:	d005      	beq.n	8015262 <_dtoa_r+0x982>
 8015256:	45b8      	cmp	r8, r7
 8015258:	d003      	beq.n	8015262 <_dtoa_r+0x982>
 801525a:	4641      	mov	r1, r8
 801525c:	4620      	mov	r0, r4
 801525e:	f000 fe11 	bl	8015e84 <_Bfree>
 8015262:	4639      	mov	r1, r7
 8015264:	4620      	mov	r0, r4
 8015266:	f000 fe0d 	bl	8015e84 <_Bfree>
 801526a:	e6a5      	b.n	8014fb8 <_dtoa_r+0x6d8>
 801526c:	2600      	movs	r6, #0
 801526e:	4637      	mov	r7, r6
 8015270:	e7e1      	b.n	8015236 <_dtoa_r+0x956>
 8015272:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015274:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8015278:	4637      	mov	r7, r6
 801527a:	e599      	b.n	8014db0 <_dtoa_r+0x4d0>
 801527c:	9b08      	ldr	r3, [sp, #32]
 801527e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8015282:	2b00      	cmp	r3, #0
 8015284:	f000 80fd 	beq.w	8015482 <_dtoa_r+0xba2>
 8015288:	2d00      	cmp	r5, #0
 801528a:	dd05      	ble.n	8015298 <_dtoa_r+0x9b8>
 801528c:	4639      	mov	r1, r7
 801528e:	462a      	mov	r2, r5
 8015290:	4620      	mov	r0, r4
 8015292:	f001 f813 	bl	80162bc <__lshift>
 8015296:	4607      	mov	r7, r0
 8015298:	9b06      	ldr	r3, [sp, #24]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d05c      	beq.n	8015358 <_dtoa_r+0xa78>
 801529e:	6879      	ldr	r1, [r7, #4]
 80152a0:	4620      	mov	r0, r4
 80152a2:	f000 fdaf 	bl	8015e04 <_Balloc>
 80152a6:	4605      	mov	r5, r0
 80152a8:	b928      	cbnz	r0, 80152b6 <_dtoa_r+0x9d6>
 80152aa:	4b80      	ldr	r3, [pc, #512]	; (80154ac <_dtoa_r+0xbcc>)
 80152ac:	4602      	mov	r2, r0
 80152ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80152b2:	f7ff bb2e 	b.w	8014912 <_dtoa_r+0x32>
 80152b6:	693a      	ldr	r2, [r7, #16]
 80152b8:	3202      	adds	r2, #2
 80152ba:	0092      	lsls	r2, r2, #2
 80152bc:	f107 010c 	add.w	r1, r7, #12
 80152c0:	300c      	adds	r0, #12
 80152c2:	f000 fd91 	bl	8015de8 <memcpy>
 80152c6:	2201      	movs	r2, #1
 80152c8:	4629      	mov	r1, r5
 80152ca:	4620      	mov	r0, r4
 80152cc:	f000 fff6 	bl	80162bc <__lshift>
 80152d0:	9b00      	ldr	r3, [sp, #0]
 80152d2:	3301      	adds	r3, #1
 80152d4:	9301      	str	r3, [sp, #4]
 80152d6:	9b00      	ldr	r3, [sp, #0]
 80152d8:	444b      	add	r3, r9
 80152da:	9307      	str	r3, [sp, #28]
 80152dc:	9b02      	ldr	r3, [sp, #8]
 80152de:	f003 0301 	and.w	r3, r3, #1
 80152e2:	46b8      	mov	r8, r7
 80152e4:	9306      	str	r3, [sp, #24]
 80152e6:	4607      	mov	r7, r0
 80152e8:	9b01      	ldr	r3, [sp, #4]
 80152ea:	4631      	mov	r1, r6
 80152ec:	3b01      	subs	r3, #1
 80152ee:	4658      	mov	r0, fp
 80152f0:	9302      	str	r3, [sp, #8]
 80152f2:	f7ff fa69 	bl	80147c8 <quorem>
 80152f6:	4603      	mov	r3, r0
 80152f8:	3330      	adds	r3, #48	; 0x30
 80152fa:	9004      	str	r0, [sp, #16]
 80152fc:	4641      	mov	r1, r8
 80152fe:	4658      	mov	r0, fp
 8015300:	9308      	str	r3, [sp, #32]
 8015302:	f001 f847 	bl	8016394 <__mcmp>
 8015306:	463a      	mov	r2, r7
 8015308:	4681      	mov	r9, r0
 801530a:	4631      	mov	r1, r6
 801530c:	4620      	mov	r0, r4
 801530e:	f001 f85d 	bl	80163cc <__mdiff>
 8015312:	68c2      	ldr	r2, [r0, #12]
 8015314:	9b08      	ldr	r3, [sp, #32]
 8015316:	4605      	mov	r5, r0
 8015318:	bb02      	cbnz	r2, 801535c <_dtoa_r+0xa7c>
 801531a:	4601      	mov	r1, r0
 801531c:	4658      	mov	r0, fp
 801531e:	f001 f839 	bl	8016394 <__mcmp>
 8015322:	9b08      	ldr	r3, [sp, #32]
 8015324:	4602      	mov	r2, r0
 8015326:	4629      	mov	r1, r5
 8015328:	4620      	mov	r0, r4
 801532a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801532e:	f000 fda9 	bl	8015e84 <_Bfree>
 8015332:	9b05      	ldr	r3, [sp, #20]
 8015334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015336:	9d01      	ldr	r5, [sp, #4]
 8015338:	ea43 0102 	orr.w	r1, r3, r2
 801533c:	9b06      	ldr	r3, [sp, #24]
 801533e:	430b      	orrs	r3, r1
 8015340:	9b08      	ldr	r3, [sp, #32]
 8015342:	d10d      	bne.n	8015360 <_dtoa_r+0xa80>
 8015344:	2b39      	cmp	r3, #57	; 0x39
 8015346:	d029      	beq.n	801539c <_dtoa_r+0xabc>
 8015348:	f1b9 0f00 	cmp.w	r9, #0
 801534c:	dd01      	ble.n	8015352 <_dtoa_r+0xa72>
 801534e:	9b04      	ldr	r3, [sp, #16]
 8015350:	3331      	adds	r3, #49	; 0x31
 8015352:	9a02      	ldr	r2, [sp, #8]
 8015354:	7013      	strb	r3, [r2, #0]
 8015356:	e774      	b.n	8015242 <_dtoa_r+0x962>
 8015358:	4638      	mov	r0, r7
 801535a:	e7b9      	b.n	80152d0 <_dtoa_r+0x9f0>
 801535c:	2201      	movs	r2, #1
 801535e:	e7e2      	b.n	8015326 <_dtoa_r+0xa46>
 8015360:	f1b9 0f00 	cmp.w	r9, #0
 8015364:	db06      	blt.n	8015374 <_dtoa_r+0xa94>
 8015366:	9905      	ldr	r1, [sp, #20]
 8015368:	ea41 0909 	orr.w	r9, r1, r9
 801536c:	9906      	ldr	r1, [sp, #24]
 801536e:	ea59 0101 	orrs.w	r1, r9, r1
 8015372:	d120      	bne.n	80153b6 <_dtoa_r+0xad6>
 8015374:	2a00      	cmp	r2, #0
 8015376:	ddec      	ble.n	8015352 <_dtoa_r+0xa72>
 8015378:	4659      	mov	r1, fp
 801537a:	2201      	movs	r2, #1
 801537c:	4620      	mov	r0, r4
 801537e:	9301      	str	r3, [sp, #4]
 8015380:	f000 ff9c 	bl	80162bc <__lshift>
 8015384:	4631      	mov	r1, r6
 8015386:	4683      	mov	fp, r0
 8015388:	f001 f804 	bl	8016394 <__mcmp>
 801538c:	2800      	cmp	r0, #0
 801538e:	9b01      	ldr	r3, [sp, #4]
 8015390:	dc02      	bgt.n	8015398 <_dtoa_r+0xab8>
 8015392:	d1de      	bne.n	8015352 <_dtoa_r+0xa72>
 8015394:	07da      	lsls	r2, r3, #31
 8015396:	d5dc      	bpl.n	8015352 <_dtoa_r+0xa72>
 8015398:	2b39      	cmp	r3, #57	; 0x39
 801539a:	d1d8      	bne.n	801534e <_dtoa_r+0xa6e>
 801539c:	9a02      	ldr	r2, [sp, #8]
 801539e:	2339      	movs	r3, #57	; 0x39
 80153a0:	7013      	strb	r3, [r2, #0]
 80153a2:	462b      	mov	r3, r5
 80153a4:	461d      	mov	r5, r3
 80153a6:	3b01      	subs	r3, #1
 80153a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80153ac:	2a39      	cmp	r2, #57	; 0x39
 80153ae:	d050      	beq.n	8015452 <_dtoa_r+0xb72>
 80153b0:	3201      	adds	r2, #1
 80153b2:	701a      	strb	r2, [r3, #0]
 80153b4:	e745      	b.n	8015242 <_dtoa_r+0x962>
 80153b6:	2a00      	cmp	r2, #0
 80153b8:	dd03      	ble.n	80153c2 <_dtoa_r+0xae2>
 80153ba:	2b39      	cmp	r3, #57	; 0x39
 80153bc:	d0ee      	beq.n	801539c <_dtoa_r+0xabc>
 80153be:	3301      	adds	r3, #1
 80153c0:	e7c7      	b.n	8015352 <_dtoa_r+0xa72>
 80153c2:	9a01      	ldr	r2, [sp, #4]
 80153c4:	9907      	ldr	r1, [sp, #28]
 80153c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80153ca:	428a      	cmp	r2, r1
 80153cc:	d02a      	beq.n	8015424 <_dtoa_r+0xb44>
 80153ce:	4659      	mov	r1, fp
 80153d0:	2300      	movs	r3, #0
 80153d2:	220a      	movs	r2, #10
 80153d4:	4620      	mov	r0, r4
 80153d6:	f000 fd77 	bl	8015ec8 <__multadd>
 80153da:	45b8      	cmp	r8, r7
 80153dc:	4683      	mov	fp, r0
 80153de:	f04f 0300 	mov.w	r3, #0
 80153e2:	f04f 020a 	mov.w	r2, #10
 80153e6:	4641      	mov	r1, r8
 80153e8:	4620      	mov	r0, r4
 80153ea:	d107      	bne.n	80153fc <_dtoa_r+0xb1c>
 80153ec:	f000 fd6c 	bl	8015ec8 <__multadd>
 80153f0:	4680      	mov	r8, r0
 80153f2:	4607      	mov	r7, r0
 80153f4:	9b01      	ldr	r3, [sp, #4]
 80153f6:	3301      	adds	r3, #1
 80153f8:	9301      	str	r3, [sp, #4]
 80153fa:	e775      	b.n	80152e8 <_dtoa_r+0xa08>
 80153fc:	f000 fd64 	bl	8015ec8 <__multadd>
 8015400:	4639      	mov	r1, r7
 8015402:	4680      	mov	r8, r0
 8015404:	2300      	movs	r3, #0
 8015406:	220a      	movs	r2, #10
 8015408:	4620      	mov	r0, r4
 801540a:	f000 fd5d 	bl	8015ec8 <__multadd>
 801540e:	4607      	mov	r7, r0
 8015410:	e7f0      	b.n	80153f4 <_dtoa_r+0xb14>
 8015412:	f1b9 0f00 	cmp.w	r9, #0
 8015416:	9a00      	ldr	r2, [sp, #0]
 8015418:	bfcc      	ite	gt
 801541a:	464d      	movgt	r5, r9
 801541c:	2501      	movle	r5, #1
 801541e:	4415      	add	r5, r2
 8015420:	f04f 0800 	mov.w	r8, #0
 8015424:	4659      	mov	r1, fp
 8015426:	2201      	movs	r2, #1
 8015428:	4620      	mov	r0, r4
 801542a:	9301      	str	r3, [sp, #4]
 801542c:	f000 ff46 	bl	80162bc <__lshift>
 8015430:	4631      	mov	r1, r6
 8015432:	4683      	mov	fp, r0
 8015434:	f000 ffae 	bl	8016394 <__mcmp>
 8015438:	2800      	cmp	r0, #0
 801543a:	dcb2      	bgt.n	80153a2 <_dtoa_r+0xac2>
 801543c:	d102      	bne.n	8015444 <_dtoa_r+0xb64>
 801543e:	9b01      	ldr	r3, [sp, #4]
 8015440:	07db      	lsls	r3, r3, #31
 8015442:	d4ae      	bmi.n	80153a2 <_dtoa_r+0xac2>
 8015444:	462b      	mov	r3, r5
 8015446:	461d      	mov	r5, r3
 8015448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801544c:	2a30      	cmp	r2, #48	; 0x30
 801544e:	d0fa      	beq.n	8015446 <_dtoa_r+0xb66>
 8015450:	e6f7      	b.n	8015242 <_dtoa_r+0x962>
 8015452:	9a00      	ldr	r2, [sp, #0]
 8015454:	429a      	cmp	r2, r3
 8015456:	d1a5      	bne.n	80153a4 <_dtoa_r+0xac4>
 8015458:	f10a 0a01 	add.w	sl, sl, #1
 801545c:	2331      	movs	r3, #49	; 0x31
 801545e:	e779      	b.n	8015354 <_dtoa_r+0xa74>
 8015460:	4b13      	ldr	r3, [pc, #76]	; (80154b0 <_dtoa_r+0xbd0>)
 8015462:	f7ff baaf 	b.w	80149c4 <_dtoa_r+0xe4>
 8015466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015468:	2b00      	cmp	r3, #0
 801546a:	f47f aa86 	bne.w	801497a <_dtoa_r+0x9a>
 801546e:	4b11      	ldr	r3, [pc, #68]	; (80154b4 <_dtoa_r+0xbd4>)
 8015470:	f7ff baa8 	b.w	80149c4 <_dtoa_r+0xe4>
 8015474:	f1b9 0f00 	cmp.w	r9, #0
 8015478:	dc03      	bgt.n	8015482 <_dtoa_r+0xba2>
 801547a:	9b05      	ldr	r3, [sp, #20]
 801547c:	2b02      	cmp	r3, #2
 801547e:	f73f aec9 	bgt.w	8015214 <_dtoa_r+0x934>
 8015482:	9d00      	ldr	r5, [sp, #0]
 8015484:	4631      	mov	r1, r6
 8015486:	4658      	mov	r0, fp
 8015488:	f7ff f99e 	bl	80147c8 <quorem>
 801548c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015490:	f805 3b01 	strb.w	r3, [r5], #1
 8015494:	9a00      	ldr	r2, [sp, #0]
 8015496:	1aaa      	subs	r2, r5, r2
 8015498:	4591      	cmp	r9, r2
 801549a:	ddba      	ble.n	8015412 <_dtoa_r+0xb32>
 801549c:	4659      	mov	r1, fp
 801549e:	2300      	movs	r3, #0
 80154a0:	220a      	movs	r2, #10
 80154a2:	4620      	mov	r0, r4
 80154a4:	f000 fd10 	bl	8015ec8 <__multadd>
 80154a8:	4683      	mov	fp, r0
 80154aa:	e7eb      	b.n	8015484 <_dtoa_r+0xba4>
 80154ac:	0801a2ac 	.word	0x0801a2ac
 80154b0:	0801a511 	.word	0x0801a511
 80154b4:	0801a229 	.word	0x0801a229

080154b8 <std>:
 80154b8:	2300      	movs	r3, #0
 80154ba:	b510      	push	{r4, lr}
 80154bc:	4604      	mov	r4, r0
 80154be:	e9c0 3300 	strd	r3, r3, [r0]
 80154c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80154c6:	6083      	str	r3, [r0, #8]
 80154c8:	8181      	strh	r1, [r0, #12]
 80154ca:	6643      	str	r3, [r0, #100]	; 0x64
 80154cc:	81c2      	strh	r2, [r0, #14]
 80154ce:	6183      	str	r3, [r0, #24]
 80154d0:	4619      	mov	r1, r3
 80154d2:	2208      	movs	r2, #8
 80154d4:	305c      	adds	r0, #92	; 0x5c
 80154d6:	f7fd fb65 	bl	8012ba4 <memset>
 80154da:	4b05      	ldr	r3, [pc, #20]	; (80154f0 <std+0x38>)
 80154dc:	6263      	str	r3, [r4, #36]	; 0x24
 80154de:	4b05      	ldr	r3, [pc, #20]	; (80154f4 <std+0x3c>)
 80154e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80154e2:	4b05      	ldr	r3, [pc, #20]	; (80154f8 <std+0x40>)
 80154e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80154e6:	4b05      	ldr	r3, [pc, #20]	; (80154fc <std+0x44>)
 80154e8:	6224      	str	r4, [r4, #32]
 80154ea:	6323      	str	r3, [r4, #48]	; 0x30
 80154ec:	bd10      	pop	{r4, pc}
 80154ee:	bf00      	nop
 80154f0:	0801394d 	.word	0x0801394d
 80154f4:	08013973 	.word	0x08013973
 80154f8:	080139ab 	.word	0x080139ab
 80154fc:	080139cf 	.word	0x080139cf

08015500 <_cleanup_r>:
 8015500:	4901      	ldr	r1, [pc, #4]	; (8015508 <_cleanup_r+0x8>)
 8015502:	f000 b8af 	b.w	8015664 <_fwalk_reent>
 8015506:	bf00      	nop
 8015508:	08017725 	.word	0x08017725

0801550c <__sfmoreglue>:
 801550c:	b570      	push	{r4, r5, r6, lr}
 801550e:	1e4a      	subs	r2, r1, #1
 8015510:	2568      	movs	r5, #104	; 0x68
 8015512:	4355      	muls	r5, r2
 8015514:	460e      	mov	r6, r1
 8015516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801551a:	f001 f98d 	bl	8016838 <_malloc_r>
 801551e:	4604      	mov	r4, r0
 8015520:	b140      	cbz	r0, 8015534 <__sfmoreglue+0x28>
 8015522:	2100      	movs	r1, #0
 8015524:	e9c0 1600 	strd	r1, r6, [r0]
 8015528:	300c      	adds	r0, #12
 801552a:	60a0      	str	r0, [r4, #8]
 801552c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015530:	f7fd fb38 	bl	8012ba4 <memset>
 8015534:	4620      	mov	r0, r4
 8015536:	bd70      	pop	{r4, r5, r6, pc}

08015538 <__sfp_lock_acquire>:
 8015538:	4801      	ldr	r0, [pc, #4]	; (8015540 <__sfp_lock_acquire+0x8>)
 801553a:	f000 bc26 	b.w	8015d8a <__retarget_lock_acquire_recursive>
 801553e:	bf00      	nop
 8015540:	20003374 	.word	0x20003374

08015544 <__sfp_lock_release>:
 8015544:	4801      	ldr	r0, [pc, #4]	; (801554c <__sfp_lock_release+0x8>)
 8015546:	f000 bc21 	b.w	8015d8c <__retarget_lock_release_recursive>
 801554a:	bf00      	nop
 801554c:	20003374 	.word	0x20003374

08015550 <__sinit_lock_acquire>:
 8015550:	4801      	ldr	r0, [pc, #4]	; (8015558 <__sinit_lock_acquire+0x8>)
 8015552:	f000 bc1a 	b.w	8015d8a <__retarget_lock_acquire_recursive>
 8015556:	bf00      	nop
 8015558:	20003373 	.word	0x20003373

0801555c <__sinit_lock_release>:
 801555c:	4801      	ldr	r0, [pc, #4]	; (8015564 <__sinit_lock_release+0x8>)
 801555e:	f000 bc15 	b.w	8015d8c <__retarget_lock_release_recursive>
 8015562:	bf00      	nop
 8015564:	20003373 	.word	0x20003373

08015568 <__sinit>:
 8015568:	b510      	push	{r4, lr}
 801556a:	4604      	mov	r4, r0
 801556c:	f7ff fff0 	bl	8015550 <__sinit_lock_acquire>
 8015570:	69a3      	ldr	r3, [r4, #24]
 8015572:	b11b      	cbz	r3, 801557c <__sinit+0x14>
 8015574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015578:	f7ff bff0 	b.w	801555c <__sinit_lock_release>
 801557c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015580:	6523      	str	r3, [r4, #80]	; 0x50
 8015582:	4b13      	ldr	r3, [pc, #76]	; (80155d0 <__sinit+0x68>)
 8015584:	4a13      	ldr	r2, [pc, #76]	; (80155d4 <__sinit+0x6c>)
 8015586:	681b      	ldr	r3, [r3, #0]
 8015588:	62a2      	str	r2, [r4, #40]	; 0x28
 801558a:	42a3      	cmp	r3, r4
 801558c:	bf04      	itt	eq
 801558e:	2301      	moveq	r3, #1
 8015590:	61a3      	streq	r3, [r4, #24]
 8015592:	4620      	mov	r0, r4
 8015594:	f000 f820 	bl	80155d8 <__sfp>
 8015598:	6060      	str	r0, [r4, #4]
 801559a:	4620      	mov	r0, r4
 801559c:	f000 f81c 	bl	80155d8 <__sfp>
 80155a0:	60a0      	str	r0, [r4, #8]
 80155a2:	4620      	mov	r0, r4
 80155a4:	f000 f818 	bl	80155d8 <__sfp>
 80155a8:	2200      	movs	r2, #0
 80155aa:	60e0      	str	r0, [r4, #12]
 80155ac:	2104      	movs	r1, #4
 80155ae:	6860      	ldr	r0, [r4, #4]
 80155b0:	f7ff ff82 	bl	80154b8 <std>
 80155b4:	68a0      	ldr	r0, [r4, #8]
 80155b6:	2201      	movs	r2, #1
 80155b8:	2109      	movs	r1, #9
 80155ba:	f7ff ff7d 	bl	80154b8 <std>
 80155be:	68e0      	ldr	r0, [r4, #12]
 80155c0:	2202      	movs	r2, #2
 80155c2:	2112      	movs	r1, #18
 80155c4:	f7ff ff78 	bl	80154b8 <std>
 80155c8:	2301      	movs	r3, #1
 80155ca:	61a3      	str	r3, [r4, #24]
 80155cc:	e7d2      	b.n	8015574 <__sinit+0xc>
 80155ce:	bf00      	nop
 80155d0:	0801a09c 	.word	0x0801a09c
 80155d4:	08015501 	.word	0x08015501

080155d8 <__sfp>:
 80155d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155da:	4607      	mov	r7, r0
 80155dc:	f7ff ffac 	bl	8015538 <__sfp_lock_acquire>
 80155e0:	4b1e      	ldr	r3, [pc, #120]	; (801565c <__sfp+0x84>)
 80155e2:	681e      	ldr	r6, [r3, #0]
 80155e4:	69b3      	ldr	r3, [r6, #24]
 80155e6:	b913      	cbnz	r3, 80155ee <__sfp+0x16>
 80155e8:	4630      	mov	r0, r6
 80155ea:	f7ff ffbd 	bl	8015568 <__sinit>
 80155ee:	3648      	adds	r6, #72	; 0x48
 80155f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80155f4:	3b01      	subs	r3, #1
 80155f6:	d503      	bpl.n	8015600 <__sfp+0x28>
 80155f8:	6833      	ldr	r3, [r6, #0]
 80155fa:	b30b      	cbz	r3, 8015640 <__sfp+0x68>
 80155fc:	6836      	ldr	r6, [r6, #0]
 80155fe:	e7f7      	b.n	80155f0 <__sfp+0x18>
 8015600:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015604:	b9d5      	cbnz	r5, 801563c <__sfp+0x64>
 8015606:	4b16      	ldr	r3, [pc, #88]	; (8015660 <__sfp+0x88>)
 8015608:	60e3      	str	r3, [r4, #12]
 801560a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801560e:	6665      	str	r5, [r4, #100]	; 0x64
 8015610:	f000 fbba 	bl	8015d88 <__retarget_lock_init_recursive>
 8015614:	f7ff ff96 	bl	8015544 <__sfp_lock_release>
 8015618:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801561c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015620:	6025      	str	r5, [r4, #0]
 8015622:	61a5      	str	r5, [r4, #24]
 8015624:	2208      	movs	r2, #8
 8015626:	4629      	mov	r1, r5
 8015628:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801562c:	f7fd faba 	bl	8012ba4 <memset>
 8015630:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015634:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015638:	4620      	mov	r0, r4
 801563a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801563c:	3468      	adds	r4, #104	; 0x68
 801563e:	e7d9      	b.n	80155f4 <__sfp+0x1c>
 8015640:	2104      	movs	r1, #4
 8015642:	4638      	mov	r0, r7
 8015644:	f7ff ff62 	bl	801550c <__sfmoreglue>
 8015648:	4604      	mov	r4, r0
 801564a:	6030      	str	r0, [r6, #0]
 801564c:	2800      	cmp	r0, #0
 801564e:	d1d5      	bne.n	80155fc <__sfp+0x24>
 8015650:	f7ff ff78 	bl	8015544 <__sfp_lock_release>
 8015654:	230c      	movs	r3, #12
 8015656:	603b      	str	r3, [r7, #0]
 8015658:	e7ee      	b.n	8015638 <__sfp+0x60>
 801565a:	bf00      	nop
 801565c:	0801a09c 	.word	0x0801a09c
 8015660:	ffff0001 	.word	0xffff0001

08015664 <_fwalk_reent>:
 8015664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015668:	4606      	mov	r6, r0
 801566a:	4688      	mov	r8, r1
 801566c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015670:	2700      	movs	r7, #0
 8015672:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015676:	f1b9 0901 	subs.w	r9, r9, #1
 801567a:	d505      	bpl.n	8015688 <_fwalk_reent+0x24>
 801567c:	6824      	ldr	r4, [r4, #0]
 801567e:	2c00      	cmp	r4, #0
 8015680:	d1f7      	bne.n	8015672 <_fwalk_reent+0xe>
 8015682:	4638      	mov	r0, r7
 8015684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015688:	89ab      	ldrh	r3, [r5, #12]
 801568a:	2b01      	cmp	r3, #1
 801568c:	d907      	bls.n	801569e <_fwalk_reent+0x3a>
 801568e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015692:	3301      	adds	r3, #1
 8015694:	d003      	beq.n	801569e <_fwalk_reent+0x3a>
 8015696:	4629      	mov	r1, r5
 8015698:	4630      	mov	r0, r6
 801569a:	47c0      	blx	r8
 801569c:	4307      	orrs	r7, r0
 801569e:	3568      	adds	r5, #104	; 0x68
 80156a0:	e7e9      	b.n	8015676 <_fwalk_reent+0x12>

080156a2 <rshift>:
 80156a2:	6903      	ldr	r3, [r0, #16]
 80156a4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80156a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80156ac:	ea4f 1261 	mov.w	r2, r1, asr #5
 80156b0:	f100 0414 	add.w	r4, r0, #20
 80156b4:	dd45      	ble.n	8015742 <rshift+0xa0>
 80156b6:	f011 011f 	ands.w	r1, r1, #31
 80156ba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80156be:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80156c2:	d10c      	bne.n	80156de <rshift+0x3c>
 80156c4:	f100 0710 	add.w	r7, r0, #16
 80156c8:	4629      	mov	r1, r5
 80156ca:	42b1      	cmp	r1, r6
 80156cc:	d334      	bcc.n	8015738 <rshift+0x96>
 80156ce:	1a9b      	subs	r3, r3, r2
 80156d0:	009b      	lsls	r3, r3, #2
 80156d2:	1eea      	subs	r2, r5, #3
 80156d4:	4296      	cmp	r6, r2
 80156d6:	bf38      	it	cc
 80156d8:	2300      	movcc	r3, #0
 80156da:	4423      	add	r3, r4
 80156dc:	e015      	b.n	801570a <rshift+0x68>
 80156de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80156e2:	f1c1 0820 	rsb	r8, r1, #32
 80156e6:	40cf      	lsrs	r7, r1
 80156e8:	f105 0e04 	add.w	lr, r5, #4
 80156ec:	46a1      	mov	r9, r4
 80156ee:	4576      	cmp	r6, lr
 80156f0:	46f4      	mov	ip, lr
 80156f2:	d815      	bhi.n	8015720 <rshift+0x7e>
 80156f4:	1a9b      	subs	r3, r3, r2
 80156f6:	009a      	lsls	r2, r3, #2
 80156f8:	3a04      	subs	r2, #4
 80156fa:	3501      	adds	r5, #1
 80156fc:	42ae      	cmp	r6, r5
 80156fe:	bf38      	it	cc
 8015700:	2200      	movcc	r2, #0
 8015702:	18a3      	adds	r3, r4, r2
 8015704:	50a7      	str	r7, [r4, r2]
 8015706:	b107      	cbz	r7, 801570a <rshift+0x68>
 8015708:	3304      	adds	r3, #4
 801570a:	1b1a      	subs	r2, r3, r4
 801570c:	42a3      	cmp	r3, r4
 801570e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015712:	bf08      	it	eq
 8015714:	2300      	moveq	r3, #0
 8015716:	6102      	str	r2, [r0, #16]
 8015718:	bf08      	it	eq
 801571a:	6143      	streq	r3, [r0, #20]
 801571c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015720:	f8dc c000 	ldr.w	ip, [ip]
 8015724:	fa0c fc08 	lsl.w	ip, ip, r8
 8015728:	ea4c 0707 	orr.w	r7, ip, r7
 801572c:	f849 7b04 	str.w	r7, [r9], #4
 8015730:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015734:	40cf      	lsrs	r7, r1
 8015736:	e7da      	b.n	80156ee <rshift+0x4c>
 8015738:	f851 cb04 	ldr.w	ip, [r1], #4
 801573c:	f847 cf04 	str.w	ip, [r7, #4]!
 8015740:	e7c3      	b.n	80156ca <rshift+0x28>
 8015742:	4623      	mov	r3, r4
 8015744:	e7e1      	b.n	801570a <rshift+0x68>

08015746 <__hexdig_fun>:
 8015746:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801574a:	2b09      	cmp	r3, #9
 801574c:	d802      	bhi.n	8015754 <__hexdig_fun+0xe>
 801574e:	3820      	subs	r0, #32
 8015750:	b2c0      	uxtb	r0, r0
 8015752:	4770      	bx	lr
 8015754:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015758:	2b05      	cmp	r3, #5
 801575a:	d801      	bhi.n	8015760 <__hexdig_fun+0x1a>
 801575c:	3847      	subs	r0, #71	; 0x47
 801575e:	e7f7      	b.n	8015750 <__hexdig_fun+0xa>
 8015760:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015764:	2b05      	cmp	r3, #5
 8015766:	d801      	bhi.n	801576c <__hexdig_fun+0x26>
 8015768:	3827      	subs	r0, #39	; 0x27
 801576a:	e7f1      	b.n	8015750 <__hexdig_fun+0xa>
 801576c:	2000      	movs	r0, #0
 801576e:	4770      	bx	lr

08015770 <__gethex>:
 8015770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015774:	ed2d 8b02 	vpush	{d8}
 8015778:	b089      	sub	sp, #36	; 0x24
 801577a:	ee08 0a10 	vmov	s16, r0
 801577e:	9304      	str	r3, [sp, #16]
 8015780:	4bbc      	ldr	r3, [pc, #752]	; (8015a74 <__gethex+0x304>)
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	9301      	str	r3, [sp, #4]
 8015786:	4618      	mov	r0, r3
 8015788:	468b      	mov	fp, r1
 801578a:	4690      	mov	r8, r2
 801578c:	f7ea fd20 	bl	80001d0 <strlen>
 8015790:	9b01      	ldr	r3, [sp, #4]
 8015792:	f8db 2000 	ldr.w	r2, [fp]
 8015796:	4403      	add	r3, r0
 8015798:	4682      	mov	sl, r0
 801579a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801579e:	9305      	str	r3, [sp, #20]
 80157a0:	1c93      	adds	r3, r2, #2
 80157a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80157a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80157aa:	32fe      	adds	r2, #254	; 0xfe
 80157ac:	18d1      	adds	r1, r2, r3
 80157ae:	461f      	mov	r7, r3
 80157b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80157b4:	9100      	str	r1, [sp, #0]
 80157b6:	2830      	cmp	r0, #48	; 0x30
 80157b8:	d0f8      	beq.n	80157ac <__gethex+0x3c>
 80157ba:	f7ff ffc4 	bl	8015746 <__hexdig_fun>
 80157be:	4604      	mov	r4, r0
 80157c0:	2800      	cmp	r0, #0
 80157c2:	d13a      	bne.n	801583a <__gethex+0xca>
 80157c4:	9901      	ldr	r1, [sp, #4]
 80157c6:	4652      	mov	r2, sl
 80157c8:	4638      	mov	r0, r7
 80157ca:	f001 fd6f 	bl	80172ac <strncmp>
 80157ce:	4605      	mov	r5, r0
 80157d0:	2800      	cmp	r0, #0
 80157d2:	d168      	bne.n	80158a6 <__gethex+0x136>
 80157d4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80157d8:	eb07 060a 	add.w	r6, r7, sl
 80157dc:	f7ff ffb3 	bl	8015746 <__hexdig_fun>
 80157e0:	2800      	cmp	r0, #0
 80157e2:	d062      	beq.n	80158aa <__gethex+0x13a>
 80157e4:	4633      	mov	r3, r6
 80157e6:	7818      	ldrb	r0, [r3, #0]
 80157e8:	2830      	cmp	r0, #48	; 0x30
 80157ea:	461f      	mov	r7, r3
 80157ec:	f103 0301 	add.w	r3, r3, #1
 80157f0:	d0f9      	beq.n	80157e6 <__gethex+0x76>
 80157f2:	f7ff ffa8 	bl	8015746 <__hexdig_fun>
 80157f6:	2301      	movs	r3, #1
 80157f8:	fab0 f480 	clz	r4, r0
 80157fc:	0964      	lsrs	r4, r4, #5
 80157fe:	4635      	mov	r5, r6
 8015800:	9300      	str	r3, [sp, #0]
 8015802:	463a      	mov	r2, r7
 8015804:	4616      	mov	r6, r2
 8015806:	3201      	adds	r2, #1
 8015808:	7830      	ldrb	r0, [r6, #0]
 801580a:	f7ff ff9c 	bl	8015746 <__hexdig_fun>
 801580e:	2800      	cmp	r0, #0
 8015810:	d1f8      	bne.n	8015804 <__gethex+0x94>
 8015812:	9901      	ldr	r1, [sp, #4]
 8015814:	4652      	mov	r2, sl
 8015816:	4630      	mov	r0, r6
 8015818:	f001 fd48 	bl	80172ac <strncmp>
 801581c:	b980      	cbnz	r0, 8015840 <__gethex+0xd0>
 801581e:	b94d      	cbnz	r5, 8015834 <__gethex+0xc4>
 8015820:	eb06 050a 	add.w	r5, r6, sl
 8015824:	462a      	mov	r2, r5
 8015826:	4616      	mov	r6, r2
 8015828:	3201      	adds	r2, #1
 801582a:	7830      	ldrb	r0, [r6, #0]
 801582c:	f7ff ff8b 	bl	8015746 <__hexdig_fun>
 8015830:	2800      	cmp	r0, #0
 8015832:	d1f8      	bne.n	8015826 <__gethex+0xb6>
 8015834:	1bad      	subs	r5, r5, r6
 8015836:	00ad      	lsls	r5, r5, #2
 8015838:	e004      	b.n	8015844 <__gethex+0xd4>
 801583a:	2400      	movs	r4, #0
 801583c:	4625      	mov	r5, r4
 801583e:	e7e0      	b.n	8015802 <__gethex+0x92>
 8015840:	2d00      	cmp	r5, #0
 8015842:	d1f7      	bne.n	8015834 <__gethex+0xc4>
 8015844:	7833      	ldrb	r3, [r6, #0]
 8015846:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801584a:	2b50      	cmp	r3, #80	; 0x50
 801584c:	d13b      	bne.n	80158c6 <__gethex+0x156>
 801584e:	7873      	ldrb	r3, [r6, #1]
 8015850:	2b2b      	cmp	r3, #43	; 0x2b
 8015852:	d02c      	beq.n	80158ae <__gethex+0x13e>
 8015854:	2b2d      	cmp	r3, #45	; 0x2d
 8015856:	d02e      	beq.n	80158b6 <__gethex+0x146>
 8015858:	1c71      	adds	r1, r6, #1
 801585a:	f04f 0900 	mov.w	r9, #0
 801585e:	7808      	ldrb	r0, [r1, #0]
 8015860:	f7ff ff71 	bl	8015746 <__hexdig_fun>
 8015864:	1e43      	subs	r3, r0, #1
 8015866:	b2db      	uxtb	r3, r3
 8015868:	2b18      	cmp	r3, #24
 801586a:	d82c      	bhi.n	80158c6 <__gethex+0x156>
 801586c:	f1a0 0210 	sub.w	r2, r0, #16
 8015870:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015874:	f7ff ff67 	bl	8015746 <__hexdig_fun>
 8015878:	1e43      	subs	r3, r0, #1
 801587a:	b2db      	uxtb	r3, r3
 801587c:	2b18      	cmp	r3, #24
 801587e:	d91d      	bls.n	80158bc <__gethex+0x14c>
 8015880:	f1b9 0f00 	cmp.w	r9, #0
 8015884:	d000      	beq.n	8015888 <__gethex+0x118>
 8015886:	4252      	negs	r2, r2
 8015888:	4415      	add	r5, r2
 801588a:	f8cb 1000 	str.w	r1, [fp]
 801588e:	b1e4      	cbz	r4, 80158ca <__gethex+0x15a>
 8015890:	9b00      	ldr	r3, [sp, #0]
 8015892:	2b00      	cmp	r3, #0
 8015894:	bf14      	ite	ne
 8015896:	2700      	movne	r7, #0
 8015898:	2706      	moveq	r7, #6
 801589a:	4638      	mov	r0, r7
 801589c:	b009      	add	sp, #36	; 0x24
 801589e:	ecbd 8b02 	vpop	{d8}
 80158a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158a6:	463e      	mov	r6, r7
 80158a8:	4625      	mov	r5, r4
 80158aa:	2401      	movs	r4, #1
 80158ac:	e7ca      	b.n	8015844 <__gethex+0xd4>
 80158ae:	f04f 0900 	mov.w	r9, #0
 80158b2:	1cb1      	adds	r1, r6, #2
 80158b4:	e7d3      	b.n	801585e <__gethex+0xee>
 80158b6:	f04f 0901 	mov.w	r9, #1
 80158ba:	e7fa      	b.n	80158b2 <__gethex+0x142>
 80158bc:	230a      	movs	r3, #10
 80158be:	fb03 0202 	mla	r2, r3, r2, r0
 80158c2:	3a10      	subs	r2, #16
 80158c4:	e7d4      	b.n	8015870 <__gethex+0x100>
 80158c6:	4631      	mov	r1, r6
 80158c8:	e7df      	b.n	801588a <__gethex+0x11a>
 80158ca:	1bf3      	subs	r3, r6, r7
 80158cc:	3b01      	subs	r3, #1
 80158ce:	4621      	mov	r1, r4
 80158d0:	2b07      	cmp	r3, #7
 80158d2:	dc0b      	bgt.n	80158ec <__gethex+0x17c>
 80158d4:	ee18 0a10 	vmov	r0, s16
 80158d8:	f000 fa94 	bl	8015e04 <_Balloc>
 80158dc:	4604      	mov	r4, r0
 80158de:	b940      	cbnz	r0, 80158f2 <__gethex+0x182>
 80158e0:	4b65      	ldr	r3, [pc, #404]	; (8015a78 <__gethex+0x308>)
 80158e2:	4602      	mov	r2, r0
 80158e4:	21de      	movs	r1, #222	; 0xde
 80158e6:	4865      	ldr	r0, [pc, #404]	; (8015a7c <__gethex+0x30c>)
 80158e8:	f001 fe78 	bl	80175dc <__assert_func>
 80158ec:	3101      	adds	r1, #1
 80158ee:	105b      	asrs	r3, r3, #1
 80158f0:	e7ee      	b.n	80158d0 <__gethex+0x160>
 80158f2:	f100 0914 	add.w	r9, r0, #20
 80158f6:	f04f 0b00 	mov.w	fp, #0
 80158fa:	f1ca 0301 	rsb	r3, sl, #1
 80158fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8015902:	f8cd b000 	str.w	fp, [sp]
 8015906:	9306      	str	r3, [sp, #24]
 8015908:	42b7      	cmp	r7, r6
 801590a:	d340      	bcc.n	801598e <__gethex+0x21e>
 801590c:	9802      	ldr	r0, [sp, #8]
 801590e:	9b00      	ldr	r3, [sp, #0]
 8015910:	f840 3b04 	str.w	r3, [r0], #4
 8015914:	eba0 0009 	sub.w	r0, r0, r9
 8015918:	1080      	asrs	r0, r0, #2
 801591a:	0146      	lsls	r6, r0, #5
 801591c:	6120      	str	r0, [r4, #16]
 801591e:	4618      	mov	r0, r3
 8015920:	f000 fb66 	bl	8015ff0 <__hi0bits>
 8015924:	1a30      	subs	r0, r6, r0
 8015926:	f8d8 6000 	ldr.w	r6, [r8]
 801592a:	42b0      	cmp	r0, r6
 801592c:	dd63      	ble.n	80159f6 <__gethex+0x286>
 801592e:	1b87      	subs	r7, r0, r6
 8015930:	4639      	mov	r1, r7
 8015932:	4620      	mov	r0, r4
 8015934:	f000 ff00 	bl	8016738 <__any_on>
 8015938:	4682      	mov	sl, r0
 801593a:	b1a8      	cbz	r0, 8015968 <__gethex+0x1f8>
 801593c:	1e7b      	subs	r3, r7, #1
 801593e:	1159      	asrs	r1, r3, #5
 8015940:	f003 021f 	and.w	r2, r3, #31
 8015944:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015948:	f04f 0a01 	mov.w	sl, #1
 801594c:	fa0a f202 	lsl.w	r2, sl, r2
 8015950:	420a      	tst	r2, r1
 8015952:	d009      	beq.n	8015968 <__gethex+0x1f8>
 8015954:	4553      	cmp	r3, sl
 8015956:	dd05      	ble.n	8015964 <__gethex+0x1f4>
 8015958:	1eb9      	subs	r1, r7, #2
 801595a:	4620      	mov	r0, r4
 801595c:	f000 feec 	bl	8016738 <__any_on>
 8015960:	2800      	cmp	r0, #0
 8015962:	d145      	bne.n	80159f0 <__gethex+0x280>
 8015964:	f04f 0a02 	mov.w	sl, #2
 8015968:	4639      	mov	r1, r7
 801596a:	4620      	mov	r0, r4
 801596c:	f7ff fe99 	bl	80156a2 <rshift>
 8015970:	443d      	add	r5, r7
 8015972:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015976:	42ab      	cmp	r3, r5
 8015978:	da4c      	bge.n	8015a14 <__gethex+0x2a4>
 801597a:	ee18 0a10 	vmov	r0, s16
 801597e:	4621      	mov	r1, r4
 8015980:	f000 fa80 	bl	8015e84 <_Bfree>
 8015984:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015986:	2300      	movs	r3, #0
 8015988:	6013      	str	r3, [r2, #0]
 801598a:	27a3      	movs	r7, #163	; 0xa3
 801598c:	e785      	b.n	801589a <__gethex+0x12a>
 801598e:	1e73      	subs	r3, r6, #1
 8015990:	9a05      	ldr	r2, [sp, #20]
 8015992:	9303      	str	r3, [sp, #12]
 8015994:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015998:	4293      	cmp	r3, r2
 801599a:	d019      	beq.n	80159d0 <__gethex+0x260>
 801599c:	f1bb 0f20 	cmp.w	fp, #32
 80159a0:	d107      	bne.n	80159b2 <__gethex+0x242>
 80159a2:	9b02      	ldr	r3, [sp, #8]
 80159a4:	9a00      	ldr	r2, [sp, #0]
 80159a6:	f843 2b04 	str.w	r2, [r3], #4
 80159aa:	9302      	str	r3, [sp, #8]
 80159ac:	2300      	movs	r3, #0
 80159ae:	9300      	str	r3, [sp, #0]
 80159b0:	469b      	mov	fp, r3
 80159b2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80159b6:	f7ff fec6 	bl	8015746 <__hexdig_fun>
 80159ba:	9b00      	ldr	r3, [sp, #0]
 80159bc:	f000 000f 	and.w	r0, r0, #15
 80159c0:	fa00 f00b 	lsl.w	r0, r0, fp
 80159c4:	4303      	orrs	r3, r0
 80159c6:	9300      	str	r3, [sp, #0]
 80159c8:	f10b 0b04 	add.w	fp, fp, #4
 80159cc:	9b03      	ldr	r3, [sp, #12]
 80159ce:	e00d      	b.n	80159ec <__gethex+0x27c>
 80159d0:	9b03      	ldr	r3, [sp, #12]
 80159d2:	9a06      	ldr	r2, [sp, #24]
 80159d4:	4413      	add	r3, r2
 80159d6:	42bb      	cmp	r3, r7
 80159d8:	d3e0      	bcc.n	801599c <__gethex+0x22c>
 80159da:	4618      	mov	r0, r3
 80159dc:	9901      	ldr	r1, [sp, #4]
 80159de:	9307      	str	r3, [sp, #28]
 80159e0:	4652      	mov	r2, sl
 80159e2:	f001 fc63 	bl	80172ac <strncmp>
 80159e6:	9b07      	ldr	r3, [sp, #28]
 80159e8:	2800      	cmp	r0, #0
 80159ea:	d1d7      	bne.n	801599c <__gethex+0x22c>
 80159ec:	461e      	mov	r6, r3
 80159ee:	e78b      	b.n	8015908 <__gethex+0x198>
 80159f0:	f04f 0a03 	mov.w	sl, #3
 80159f4:	e7b8      	b.n	8015968 <__gethex+0x1f8>
 80159f6:	da0a      	bge.n	8015a0e <__gethex+0x29e>
 80159f8:	1a37      	subs	r7, r6, r0
 80159fa:	4621      	mov	r1, r4
 80159fc:	ee18 0a10 	vmov	r0, s16
 8015a00:	463a      	mov	r2, r7
 8015a02:	f000 fc5b 	bl	80162bc <__lshift>
 8015a06:	1bed      	subs	r5, r5, r7
 8015a08:	4604      	mov	r4, r0
 8015a0a:	f100 0914 	add.w	r9, r0, #20
 8015a0e:	f04f 0a00 	mov.w	sl, #0
 8015a12:	e7ae      	b.n	8015972 <__gethex+0x202>
 8015a14:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015a18:	42a8      	cmp	r0, r5
 8015a1a:	dd72      	ble.n	8015b02 <__gethex+0x392>
 8015a1c:	1b45      	subs	r5, r0, r5
 8015a1e:	42ae      	cmp	r6, r5
 8015a20:	dc36      	bgt.n	8015a90 <__gethex+0x320>
 8015a22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015a26:	2b02      	cmp	r3, #2
 8015a28:	d02a      	beq.n	8015a80 <__gethex+0x310>
 8015a2a:	2b03      	cmp	r3, #3
 8015a2c:	d02c      	beq.n	8015a88 <__gethex+0x318>
 8015a2e:	2b01      	cmp	r3, #1
 8015a30:	d115      	bne.n	8015a5e <__gethex+0x2ee>
 8015a32:	42ae      	cmp	r6, r5
 8015a34:	d113      	bne.n	8015a5e <__gethex+0x2ee>
 8015a36:	2e01      	cmp	r6, #1
 8015a38:	d10b      	bne.n	8015a52 <__gethex+0x2e2>
 8015a3a:	9a04      	ldr	r2, [sp, #16]
 8015a3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a40:	6013      	str	r3, [r2, #0]
 8015a42:	2301      	movs	r3, #1
 8015a44:	6123      	str	r3, [r4, #16]
 8015a46:	f8c9 3000 	str.w	r3, [r9]
 8015a4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015a4c:	2762      	movs	r7, #98	; 0x62
 8015a4e:	601c      	str	r4, [r3, #0]
 8015a50:	e723      	b.n	801589a <__gethex+0x12a>
 8015a52:	1e71      	subs	r1, r6, #1
 8015a54:	4620      	mov	r0, r4
 8015a56:	f000 fe6f 	bl	8016738 <__any_on>
 8015a5a:	2800      	cmp	r0, #0
 8015a5c:	d1ed      	bne.n	8015a3a <__gethex+0x2ca>
 8015a5e:	ee18 0a10 	vmov	r0, s16
 8015a62:	4621      	mov	r1, r4
 8015a64:	f000 fa0e 	bl	8015e84 <_Bfree>
 8015a68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	6013      	str	r3, [r2, #0]
 8015a6e:	2750      	movs	r7, #80	; 0x50
 8015a70:	e713      	b.n	801589a <__gethex+0x12a>
 8015a72:	bf00      	nop
 8015a74:	0801a38c 	.word	0x0801a38c
 8015a78:	0801a2ac 	.word	0x0801a2ac
 8015a7c:	0801a320 	.word	0x0801a320
 8015a80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d1eb      	bne.n	8015a5e <__gethex+0x2ee>
 8015a86:	e7d8      	b.n	8015a3a <__gethex+0x2ca>
 8015a88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d1d5      	bne.n	8015a3a <__gethex+0x2ca>
 8015a8e:	e7e6      	b.n	8015a5e <__gethex+0x2ee>
 8015a90:	1e6f      	subs	r7, r5, #1
 8015a92:	f1ba 0f00 	cmp.w	sl, #0
 8015a96:	d131      	bne.n	8015afc <__gethex+0x38c>
 8015a98:	b127      	cbz	r7, 8015aa4 <__gethex+0x334>
 8015a9a:	4639      	mov	r1, r7
 8015a9c:	4620      	mov	r0, r4
 8015a9e:	f000 fe4b 	bl	8016738 <__any_on>
 8015aa2:	4682      	mov	sl, r0
 8015aa4:	117b      	asrs	r3, r7, #5
 8015aa6:	2101      	movs	r1, #1
 8015aa8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8015aac:	f007 071f 	and.w	r7, r7, #31
 8015ab0:	fa01 f707 	lsl.w	r7, r1, r7
 8015ab4:	421f      	tst	r7, r3
 8015ab6:	4629      	mov	r1, r5
 8015ab8:	4620      	mov	r0, r4
 8015aba:	bf18      	it	ne
 8015abc:	f04a 0a02 	orrne.w	sl, sl, #2
 8015ac0:	1b76      	subs	r6, r6, r5
 8015ac2:	f7ff fdee 	bl	80156a2 <rshift>
 8015ac6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015aca:	2702      	movs	r7, #2
 8015acc:	f1ba 0f00 	cmp.w	sl, #0
 8015ad0:	d048      	beq.n	8015b64 <__gethex+0x3f4>
 8015ad2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015ad6:	2b02      	cmp	r3, #2
 8015ad8:	d015      	beq.n	8015b06 <__gethex+0x396>
 8015ada:	2b03      	cmp	r3, #3
 8015adc:	d017      	beq.n	8015b0e <__gethex+0x39e>
 8015ade:	2b01      	cmp	r3, #1
 8015ae0:	d109      	bne.n	8015af6 <__gethex+0x386>
 8015ae2:	f01a 0f02 	tst.w	sl, #2
 8015ae6:	d006      	beq.n	8015af6 <__gethex+0x386>
 8015ae8:	f8d9 0000 	ldr.w	r0, [r9]
 8015aec:	ea4a 0a00 	orr.w	sl, sl, r0
 8015af0:	f01a 0f01 	tst.w	sl, #1
 8015af4:	d10e      	bne.n	8015b14 <__gethex+0x3a4>
 8015af6:	f047 0710 	orr.w	r7, r7, #16
 8015afa:	e033      	b.n	8015b64 <__gethex+0x3f4>
 8015afc:	f04f 0a01 	mov.w	sl, #1
 8015b00:	e7d0      	b.n	8015aa4 <__gethex+0x334>
 8015b02:	2701      	movs	r7, #1
 8015b04:	e7e2      	b.n	8015acc <__gethex+0x35c>
 8015b06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b08:	f1c3 0301 	rsb	r3, r3, #1
 8015b0c:	9315      	str	r3, [sp, #84]	; 0x54
 8015b0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d0f0      	beq.n	8015af6 <__gethex+0x386>
 8015b14:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015b18:	f104 0314 	add.w	r3, r4, #20
 8015b1c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015b20:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015b24:	f04f 0c00 	mov.w	ip, #0
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b2e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015b32:	d01c      	beq.n	8015b6e <__gethex+0x3fe>
 8015b34:	3201      	adds	r2, #1
 8015b36:	6002      	str	r2, [r0, #0]
 8015b38:	2f02      	cmp	r7, #2
 8015b3a:	f104 0314 	add.w	r3, r4, #20
 8015b3e:	d13f      	bne.n	8015bc0 <__gethex+0x450>
 8015b40:	f8d8 2000 	ldr.w	r2, [r8]
 8015b44:	3a01      	subs	r2, #1
 8015b46:	42b2      	cmp	r2, r6
 8015b48:	d10a      	bne.n	8015b60 <__gethex+0x3f0>
 8015b4a:	1171      	asrs	r1, r6, #5
 8015b4c:	2201      	movs	r2, #1
 8015b4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015b52:	f006 061f 	and.w	r6, r6, #31
 8015b56:	fa02 f606 	lsl.w	r6, r2, r6
 8015b5a:	421e      	tst	r6, r3
 8015b5c:	bf18      	it	ne
 8015b5e:	4617      	movne	r7, r2
 8015b60:	f047 0720 	orr.w	r7, r7, #32
 8015b64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015b66:	601c      	str	r4, [r3, #0]
 8015b68:	9b04      	ldr	r3, [sp, #16]
 8015b6a:	601d      	str	r5, [r3, #0]
 8015b6c:	e695      	b.n	801589a <__gethex+0x12a>
 8015b6e:	4299      	cmp	r1, r3
 8015b70:	f843 cc04 	str.w	ip, [r3, #-4]
 8015b74:	d8d8      	bhi.n	8015b28 <__gethex+0x3b8>
 8015b76:	68a3      	ldr	r3, [r4, #8]
 8015b78:	459b      	cmp	fp, r3
 8015b7a:	db19      	blt.n	8015bb0 <__gethex+0x440>
 8015b7c:	6861      	ldr	r1, [r4, #4]
 8015b7e:	ee18 0a10 	vmov	r0, s16
 8015b82:	3101      	adds	r1, #1
 8015b84:	f000 f93e 	bl	8015e04 <_Balloc>
 8015b88:	4681      	mov	r9, r0
 8015b8a:	b918      	cbnz	r0, 8015b94 <__gethex+0x424>
 8015b8c:	4b1a      	ldr	r3, [pc, #104]	; (8015bf8 <__gethex+0x488>)
 8015b8e:	4602      	mov	r2, r0
 8015b90:	2184      	movs	r1, #132	; 0x84
 8015b92:	e6a8      	b.n	80158e6 <__gethex+0x176>
 8015b94:	6922      	ldr	r2, [r4, #16]
 8015b96:	3202      	adds	r2, #2
 8015b98:	f104 010c 	add.w	r1, r4, #12
 8015b9c:	0092      	lsls	r2, r2, #2
 8015b9e:	300c      	adds	r0, #12
 8015ba0:	f000 f922 	bl	8015de8 <memcpy>
 8015ba4:	4621      	mov	r1, r4
 8015ba6:	ee18 0a10 	vmov	r0, s16
 8015baa:	f000 f96b 	bl	8015e84 <_Bfree>
 8015bae:	464c      	mov	r4, r9
 8015bb0:	6923      	ldr	r3, [r4, #16]
 8015bb2:	1c5a      	adds	r2, r3, #1
 8015bb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015bb8:	6122      	str	r2, [r4, #16]
 8015bba:	2201      	movs	r2, #1
 8015bbc:	615a      	str	r2, [r3, #20]
 8015bbe:	e7bb      	b.n	8015b38 <__gethex+0x3c8>
 8015bc0:	6922      	ldr	r2, [r4, #16]
 8015bc2:	455a      	cmp	r2, fp
 8015bc4:	dd0b      	ble.n	8015bde <__gethex+0x46e>
 8015bc6:	2101      	movs	r1, #1
 8015bc8:	4620      	mov	r0, r4
 8015bca:	f7ff fd6a 	bl	80156a2 <rshift>
 8015bce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015bd2:	3501      	adds	r5, #1
 8015bd4:	42ab      	cmp	r3, r5
 8015bd6:	f6ff aed0 	blt.w	801597a <__gethex+0x20a>
 8015bda:	2701      	movs	r7, #1
 8015bdc:	e7c0      	b.n	8015b60 <__gethex+0x3f0>
 8015bde:	f016 061f 	ands.w	r6, r6, #31
 8015be2:	d0fa      	beq.n	8015bda <__gethex+0x46a>
 8015be4:	449a      	add	sl, r3
 8015be6:	f1c6 0620 	rsb	r6, r6, #32
 8015bea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015bee:	f000 f9ff 	bl	8015ff0 <__hi0bits>
 8015bf2:	42b0      	cmp	r0, r6
 8015bf4:	dbe7      	blt.n	8015bc6 <__gethex+0x456>
 8015bf6:	e7f0      	b.n	8015bda <__gethex+0x46a>
 8015bf8:	0801a2ac 	.word	0x0801a2ac

08015bfc <L_shift>:
 8015bfc:	f1c2 0208 	rsb	r2, r2, #8
 8015c00:	0092      	lsls	r2, r2, #2
 8015c02:	b570      	push	{r4, r5, r6, lr}
 8015c04:	f1c2 0620 	rsb	r6, r2, #32
 8015c08:	6843      	ldr	r3, [r0, #4]
 8015c0a:	6804      	ldr	r4, [r0, #0]
 8015c0c:	fa03 f506 	lsl.w	r5, r3, r6
 8015c10:	432c      	orrs	r4, r5
 8015c12:	40d3      	lsrs	r3, r2
 8015c14:	6004      	str	r4, [r0, #0]
 8015c16:	f840 3f04 	str.w	r3, [r0, #4]!
 8015c1a:	4288      	cmp	r0, r1
 8015c1c:	d3f4      	bcc.n	8015c08 <L_shift+0xc>
 8015c1e:	bd70      	pop	{r4, r5, r6, pc}

08015c20 <__match>:
 8015c20:	b530      	push	{r4, r5, lr}
 8015c22:	6803      	ldr	r3, [r0, #0]
 8015c24:	3301      	adds	r3, #1
 8015c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c2a:	b914      	cbnz	r4, 8015c32 <__match+0x12>
 8015c2c:	6003      	str	r3, [r0, #0]
 8015c2e:	2001      	movs	r0, #1
 8015c30:	bd30      	pop	{r4, r5, pc}
 8015c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015c3a:	2d19      	cmp	r5, #25
 8015c3c:	bf98      	it	ls
 8015c3e:	3220      	addls	r2, #32
 8015c40:	42a2      	cmp	r2, r4
 8015c42:	d0f0      	beq.n	8015c26 <__match+0x6>
 8015c44:	2000      	movs	r0, #0
 8015c46:	e7f3      	b.n	8015c30 <__match+0x10>

08015c48 <__hexnan>:
 8015c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c4c:	680b      	ldr	r3, [r1, #0]
 8015c4e:	6801      	ldr	r1, [r0, #0]
 8015c50:	115e      	asrs	r6, r3, #5
 8015c52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015c56:	f013 031f 	ands.w	r3, r3, #31
 8015c5a:	b087      	sub	sp, #28
 8015c5c:	bf18      	it	ne
 8015c5e:	3604      	addne	r6, #4
 8015c60:	2500      	movs	r5, #0
 8015c62:	1f37      	subs	r7, r6, #4
 8015c64:	4682      	mov	sl, r0
 8015c66:	4690      	mov	r8, r2
 8015c68:	9301      	str	r3, [sp, #4]
 8015c6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8015c6e:	46b9      	mov	r9, r7
 8015c70:	463c      	mov	r4, r7
 8015c72:	9502      	str	r5, [sp, #8]
 8015c74:	46ab      	mov	fp, r5
 8015c76:	784a      	ldrb	r2, [r1, #1]
 8015c78:	1c4b      	adds	r3, r1, #1
 8015c7a:	9303      	str	r3, [sp, #12]
 8015c7c:	b342      	cbz	r2, 8015cd0 <__hexnan+0x88>
 8015c7e:	4610      	mov	r0, r2
 8015c80:	9105      	str	r1, [sp, #20]
 8015c82:	9204      	str	r2, [sp, #16]
 8015c84:	f7ff fd5f 	bl	8015746 <__hexdig_fun>
 8015c88:	2800      	cmp	r0, #0
 8015c8a:	d14f      	bne.n	8015d2c <__hexnan+0xe4>
 8015c8c:	9a04      	ldr	r2, [sp, #16]
 8015c8e:	9905      	ldr	r1, [sp, #20]
 8015c90:	2a20      	cmp	r2, #32
 8015c92:	d818      	bhi.n	8015cc6 <__hexnan+0x7e>
 8015c94:	9b02      	ldr	r3, [sp, #8]
 8015c96:	459b      	cmp	fp, r3
 8015c98:	dd13      	ble.n	8015cc2 <__hexnan+0x7a>
 8015c9a:	454c      	cmp	r4, r9
 8015c9c:	d206      	bcs.n	8015cac <__hexnan+0x64>
 8015c9e:	2d07      	cmp	r5, #7
 8015ca0:	dc04      	bgt.n	8015cac <__hexnan+0x64>
 8015ca2:	462a      	mov	r2, r5
 8015ca4:	4649      	mov	r1, r9
 8015ca6:	4620      	mov	r0, r4
 8015ca8:	f7ff ffa8 	bl	8015bfc <L_shift>
 8015cac:	4544      	cmp	r4, r8
 8015cae:	d950      	bls.n	8015d52 <__hexnan+0x10a>
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	f1a4 0904 	sub.w	r9, r4, #4
 8015cb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8015cba:	f8cd b008 	str.w	fp, [sp, #8]
 8015cbe:	464c      	mov	r4, r9
 8015cc0:	461d      	mov	r5, r3
 8015cc2:	9903      	ldr	r1, [sp, #12]
 8015cc4:	e7d7      	b.n	8015c76 <__hexnan+0x2e>
 8015cc6:	2a29      	cmp	r2, #41	; 0x29
 8015cc8:	d156      	bne.n	8015d78 <__hexnan+0x130>
 8015cca:	3102      	adds	r1, #2
 8015ccc:	f8ca 1000 	str.w	r1, [sl]
 8015cd0:	f1bb 0f00 	cmp.w	fp, #0
 8015cd4:	d050      	beq.n	8015d78 <__hexnan+0x130>
 8015cd6:	454c      	cmp	r4, r9
 8015cd8:	d206      	bcs.n	8015ce8 <__hexnan+0xa0>
 8015cda:	2d07      	cmp	r5, #7
 8015cdc:	dc04      	bgt.n	8015ce8 <__hexnan+0xa0>
 8015cde:	462a      	mov	r2, r5
 8015ce0:	4649      	mov	r1, r9
 8015ce2:	4620      	mov	r0, r4
 8015ce4:	f7ff ff8a 	bl	8015bfc <L_shift>
 8015ce8:	4544      	cmp	r4, r8
 8015cea:	d934      	bls.n	8015d56 <__hexnan+0x10e>
 8015cec:	f1a8 0204 	sub.w	r2, r8, #4
 8015cf0:	4623      	mov	r3, r4
 8015cf2:	f853 1b04 	ldr.w	r1, [r3], #4
 8015cf6:	f842 1f04 	str.w	r1, [r2, #4]!
 8015cfa:	429f      	cmp	r7, r3
 8015cfc:	d2f9      	bcs.n	8015cf2 <__hexnan+0xaa>
 8015cfe:	1b3b      	subs	r3, r7, r4
 8015d00:	f023 0303 	bic.w	r3, r3, #3
 8015d04:	3304      	adds	r3, #4
 8015d06:	3401      	adds	r4, #1
 8015d08:	3e03      	subs	r6, #3
 8015d0a:	42b4      	cmp	r4, r6
 8015d0c:	bf88      	it	hi
 8015d0e:	2304      	movhi	r3, #4
 8015d10:	4443      	add	r3, r8
 8015d12:	2200      	movs	r2, #0
 8015d14:	f843 2b04 	str.w	r2, [r3], #4
 8015d18:	429f      	cmp	r7, r3
 8015d1a:	d2fb      	bcs.n	8015d14 <__hexnan+0xcc>
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	b91b      	cbnz	r3, 8015d28 <__hexnan+0xe0>
 8015d20:	4547      	cmp	r7, r8
 8015d22:	d127      	bne.n	8015d74 <__hexnan+0x12c>
 8015d24:	2301      	movs	r3, #1
 8015d26:	603b      	str	r3, [r7, #0]
 8015d28:	2005      	movs	r0, #5
 8015d2a:	e026      	b.n	8015d7a <__hexnan+0x132>
 8015d2c:	3501      	adds	r5, #1
 8015d2e:	2d08      	cmp	r5, #8
 8015d30:	f10b 0b01 	add.w	fp, fp, #1
 8015d34:	dd06      	ble.n	8015d44 <__hexnan+0xfc>
 8015d36:	4544      	cmp	r4, r8
 8015d38:	d9c3      	bls.n	8015cc2 <__hexnan+0x7a>
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015d40:	2501      	movs	r5, #1
 8015d42:	3c04      	subs	r4, #4
 8015d44:	6822      	ldr	r2, [r4, #0]
 8015d46:	f000 000f 	and.w	r0, r0, #15
 8015d4a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015d4e:	6022      	str	r2, [r4, #0]
 8015d50:	e7b7      	b.n	8015cc2 <__hexnan+0x7a>
 8015d52:	2508      	movs	r5, #8
 8015d54:	e7b5      	b.n	8015cc2 <__hexnan+0x7a>
 8015d56:	9b01      	ldr	r3, [sp, #4]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d0df      	beq.n	8015d1c <__hexnan+0xd4>
 8015d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8015d60:	f1c3 0320 	rsb	r3, r3, #32
 8015d64:	fa22 f303 	lsr.w	r3, r2, r3
 8015d68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015d6c:	401a      	ands	r2, r3
 8015d6e:	f846 2c04 	str.w	r2, [r6, #-4]
 8015d72:	e7d3      	b.n	8015d1c <__hexnan+0xd4>
 8015d74:	3f04      	subs	r7, #4
 8015d76:	e7d1      	b.n	8015d1c <__hexnan+0xd4>
 8015d78:	2004      	movs	r0, #4
 8015d7a:	b007      	add	sp, #28
 8015d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d80 <_localeconv_r>:
 8015d80:	4800      	ldr	r0, [pc, #0]	; (8015d84 <_localeconv_r+0x4>)
 8015d82:	4770      	bx	lr
 8015d84:	200002f4 	.word	0x200002f4

08015d88 <__retarget_lock_init_recursive>:
 8015d88:	4770      	bx	lr

08015d8a <__retarget_lock_acquire_recursive>:
 8015d8a:	4770      	bx	lr

08015d8c <__retarget_lock_release_recursive>:
 8015d8c:	4770      	bx	lr
	...

08015d90 <_lseek_r>:
 8015d90:	b538      	push	{r3, r4, r5, lr}
 8015d92:	4d07      	ldr	r5, [pc, #28]	; (8015db0 <_lseek_r+0x20>)
 8015d94:	4604      	mov	r4, r0
 8015d96:	4608      	mov	r0, r1
 8015d98:	4611      	mov	r1, r2
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	602a      	str	r2, [r5, #0]
 8015d9e:	461a      	mov	r2, r3
 8015da0:	f7ed facc 	bl	800333c <_lseek>
 8015da4:	1c43      	adds	r3, r0, #1
 8015da6:	d102      	bne.n	8015dae <_lseek_r+0x1e>
 8015da8:	682b      	ldr	r3, [r5, #0]
 8015daa:	b103      	cbz	r3, 8015dae <_lseek_r+0x1e>
 8015dac:	6023      	str	r3, [r4, #0]
 8015dae:	bd38      	pop	{r3, r4, r5, pc}
 8015db0:	2000337c 	.word	0x2000337c

08015db4 <malloc>:
 8015db4:	4b02      	ldr	r3, [pc, #8]	; (8015dc0 <malloc+0xc>)
 8015db6:	4601      	mov	r1, r0
 8015db8:	6818      	ldr	r0, [r3, #0]
 8015dba:	f000 bd3d 	b.w	8016838 <_malloc_r>
 8015dbe:	bf00      	nop
 8015dc0:	2000019c 	.word	0x2000019c

08015dc4 <__ascii_mbtowc>:
 8015dc4:	b082      	sub	sp, #8
 8015dc6:	b901      	cbnz	r1, 8015dca <__ascii_mbtowc+0x6>
 8015dc8:	a901      	add	r1, sp, #4
 8015dca:	b142      	cbz	r2, 8015dde <__ascii_mbtowc+0x1a>
 8015dcc:	b14b      	cbz	r3, 8015de2 <__ascii_mbtowc+0x1e>
 8015dce:	7813      	ldrb	r3, [r2, #0]
 8015dd0:	600b      	str	r3, [r1, #0]
 8015dd2:	7812      	ldrb	r2, [r2, #0]
 8015dd4:	1e10      	subs	r0, r2, #0
 8015dd6:	bf18      	it	ne
 8015dd8:	2001      	movne	r0, #1
 8015dda:	b002      	add	sp, #8
 8015ddc:	4770      	bx	lr
 8015dde:	4610      	mov	r0, r2
 8015de0:	e7fb      	b.n	8015dda <__ascii_mbtowc+0x16>
 8015de2:	f06f 0001 	mvn.w	r0, #1
 8015de6:	e7f8      	b.n	8015dda <__ascii_mbtowc+0x16>

08015de8 <memcpy>:
 8015de8:	440a      	add	r2, r1
 8015dea:	4291      	cmp	r1, r2
 8015dec:	f100 33ff 	add.w	r3, r0, #4294967295
 8015df0:	d100      	bne.n	8015df4 <memcpy+0xc>
 8015df2:	4770      	bx	lr
 8015df4:	b510      	push	{r4, lr}
 8015df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015dfe:	4291      	cmp	r1, r2
 8015e00:	d1f9      	bne.n	8015df6 <memcpy+0xe>
 8015e02:	bd10      	pop	{r4, pc}

08015e04 <_Balloc>:
 8015e04:	b570      	push	{r4, r5, r6, lr}
 8015e06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015e08:	4604      	mov	r4, r0
 8015e0a:	460d      	mov	r5, r1
 8015e0c:	b976      	cbnz	r6, 8015e2c <_Balloc+0x28>
 8015e0e:	2010      	movs	r0, #16
 8015e10:	f7ff ffd0 	bl	8015db4 <malloc>
 8015e14:	4602      	mov	r2, r0
 8015e16:	6260      	str	r0, [r4, #36]	; 0x24
 8015e18:	b920      	cbnz	r0, 8015e24 <_Balloc+0x20>
 8015e1a:	4b18      	ldr	r3, [pc, #96]	; (8015e7c <_Balloc+0x78>)
 8015e1c:	4818      	ldr	r0, [pc, #96]	; (8015e80 <_Balloc+0x7c>)
 8015e1e:	2166      	movs	r1, #102	; 0x66
 8015e20:	f001 fbdc 	bl	80175dc <__assert_func>
 8015e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015e28:	6006      	str	r6, [r0, #0]
 8015e2a:	60c6      	str	r6, [r0, #12]
 8015e2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015e2e:	68f3      	ldr	r3, [r6, #12]
 8015e30:	b183      	cbz	r3, 8015e54 <_Balloc+0x50>
 8015e32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e34:	68db      	ldr	r3, [r3, #12]
 8015e36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015e3a:	b9b8      	cbnz	r0, 8015e6c <_Balloc+0x68>
 8015e3c:	2101      	movs	r1, #1
 8015e3e:	fa01 f605 	lsl.w	r6, r1, r5
 8015e42:	1d72      	adds	r2, r6, #5
 8015e44:	0092      	lsls	r2, r2, #2
 8015e46:	4620      	mov	r0, r4
 8015e48:	f000 fc97 	bl	801677a <_calloc_r>
 8015e4c:	b160      	cbz	r0, 8015e68 <_Balloc+0x64>
 8015e4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015e52:	e00e      	b.n	8015e72 <_Balloc+0x6e>
 8015e54:	2221      	movs	r2, #33	; 0x21
 8015e56:	2104      	movs	r1, #4
 8015e58:	4620      	mov	r0, r4
 8015e5a:	f000 fc8e 	bl	801677a <_calloc_r>
 8015e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e60:	60f0      	str	r0, [r6, #12]
 8015e62:	68db      	ldr	r3, [r3, #12]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d1e4      	bne.n	8015e32 <_Balloc+0x2e>
 8015e68:	2000      	movs	r0, #0
 8015e6a:	bd70      	pop	{r4, r5, r6, pc}
 8015e6c:	6802      	ldr	r2, [r0, #0]
 8015e6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015e72:	2300      	movs	r3, #0
 8015e74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015e78:	e7f7      	b.n	8015e6a <_Balloc+0x66>
 8015e7a:	bf00      	nop
 8015e7c:	0801a236 	.word	0x0801a236
 8015e80:	0801a3a0 	.word	0x0801a3a0

08015e84 <_Bfree>:
 8015e84:	b570      	push	{r4, r5, r6, lr}
 8015e86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015e88:	4605      	mov	r5, r0
 8015e8a:	460c      	mov	r4, r1
 8015e8c:	b976      	cbnz	r6, 8015eac <_Bfree+0x28>
 8015e8e:	2010      	movs	r0, #16
 8015e90:	f7ff ff90 	bl	8015db4 <malloc>
 8015e94:	4602      	mov	r2, r0
 8015e96:	6268      	str	r0, [r5, #36]	; 0x24
 8015e98:	b920      	cbnz	r0, 8015ea4 <_Bfree+0x20>
 8015e9a:	4b09      	ldr	r3, [pc, #36]	; (8015ec0 <_Bfree+0x3c>)
 8015e9c:	4809      	ldr	r0, [pc, #36]	; (8015ec4 <_Bfree+0x40>)
 8015e9e:	218a      	movs	r1, #138	; 0x8a
 8015ea0:	f001 fb9c 	bl	80175dc <__assert_func>
 8015ea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ea8:	6006      	str	r6, [r0, #0]
 8015eaa:	60c6      	str	r6, [r0, #12]
 8015eac:	b13c      	cbz	r4, 8015ebe <_Bfree+0x3a>
 8015eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015eb0:	6862      	ldr	r2, [r4, #4]
 8015eb2:	68db      	ldr	r3, [r3, #12]
 8015eb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015eb8:	6021      	str	r1, [r4, #0]
 8015eba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015ebe:	bd70      	pop	{r4, r5, r6, pc}
 8015ec0:	0801a236 	.word	0x0801a236
 8015ec4:	0801a3a0 	.word	0x0801a3a0

08015ec8 <__multadd>:
 8015ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ecc:	690e      	ldr	r6, [r1, #16]
 8015ece:	4607      	mov	r7, r0
 8015ed0:	4698      	mov	r8, r3
 8015ed2:	460c      	mov	r4, r1
 8015ed4:	f101 0014 	add.w	r0, r1, #20
 8015ed8:	2300      	movs	r3, #0
 8015eda:	6805      	ldr	r5, [r0, #0]
 8015edc:	b2a9      	uxth	r1, r5
 8015ede:	fb02 8101 	mla	r1, r2, r1, r8
 8015ee2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8015ee6:	0c2d      	lsrs	r5, r5, #16
 8015ee8:	fb02 c505 	mla	r5, r2, r5, ip
 8015eec:	b289      	uxth	r1, r1
 8015eee:	3301      	adds	r3, #1
 8015ef0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8015ef4:	429e      	cmp	r6, r3
 8015ef6:	f840 1b04 	str.w	r1, [r0], #4
 8015efa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8015efe:	dcec      	bgt.n	8015eda <__multadd+0x12>
 8015f00:	f1b8 0f00 	cmp.w	r8, #0
 8015f04:	d022      	beq.n	8015f4c <__multadd+0x84>
 8015f06:	68a3      	ldr	r3, [r4, #8]
 8015f08:	42b3      	cmp	r3, r6
 8015f0a:	dc19      	bgt.n	8015f40 <__multadd+0x78>
 8015f0c:	6861      	ldr	r1, [r4, #4]
 8015f0e:	4638      	mov	r0, r7
 8015f10:	3101      	adds	r1, #1
 8015f12:	f7ff ff77 	bl	8015e04 <_Balloc>
 8015f16:	4605      	mov	r5, r0
 8015f18:	b928      	cbnz	r0, 8015f26 <__multadd+0x5e>
 8015f1a:	4602      	mov	r2, r0
 8015f1c:	4b0d      	ldr	r3, [pc, #52]	; (8015f54 <__multadd+0x8c>)
 8015f1e:	480e      	ldr	r0, [pc, #56]	; (8015f58 <__multadd+0x90>)
 8015f20:	21b5      	movs	r1, #181	; 0xb5
 8015f22:	f001 fb5b 	bl	80175dc <__assert_func>
 8015f26:	6922      	ldr	r2, [r4, #16]
 8015f28:	3202      	adds	r2, #2
 8015f2a:	f104 010c 	add.w	r1, r4, #12
 8015f2e:	0092      	lsls	r2, r2, #2
 8015f30:	300c      	adds	r0, #12
 8015f32:	f7ff ff59 	bl	8015de8 <memcpy>
 8015f36:	4621      	mov	r1, r4
 8015f38:	4638      	mov	r0, r7
 8015f3a:	f7ff ffa3 	bl	8015e84 <_Bfree>
 8015f3e:	462c      	mov	r4, r5
 8015f40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015f44:	3601      	adds	r6, #1
 8015f46:	f8c3 8014 	str.w	r8, [r3, #20]
 8015f4a:	6126      	str	r6, [r4, #16]
 8015f4c:	4620      	mov	r0, r4
 8015f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f52:	bf00      	nop
 8015f54:	0801a2ac 	.word	0x0801a2ac
 8015f58:	0801a3a0 	.word	0x0801a3a0

08015f5c <__s2b>:
 8015f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f60:	460c      	mov	r4, r1
 8015f62:	4615      	mov	r5, r2
 8015f64:	461f      	mov	r7, r3
 8015f66:	2209      	movs	r2, #9
 8015f68:	3308      	adds	r3, #8
 8015f6a:	4606      	mov	r6, r0
 8015f6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015f70:	2100      	movs	r1, #0
 8015f72:	2201      	movs	r2, #1
 8015f74:	429a      	cmp	r2, r3
 8015f76:	db09      	blt.n	8015f8c <__s2b+0x30>
 8015f78:	4630      	mov	r0, r6
 8015f7a:	f7ff ff43 	bl	8015e04 <_Balloc>
 8015f7e:	b940      	cbnz	r0, 8015f92 <__s2b+0x36>
 8015f80:	4602      	mov	r2, r0
 8015f82:	4b19      	ldr	r3, [pc, #100]	; (8015fe8 <__s2b+0x8c>)
 8015f84:	4819      	ldr	r0, [pc, #100]	; (8015fec <__s2b+0x90>)
 8015f86:	21ce      	movs	r1, #206	; 0xce
 8015f88:	f001 fb28 	bl	80175dc <__assert_func>
 8015f8c:	0052      	lsls	r2, r2, #1
 8015f8e:	3101      	adds	r1, #1
 8015f90:	e7f0      	b.n	8015f74 <__s2b+0x18>
 8015f92:	9b08      	ldr	r3, [sp, #32]
 8015f94:	6143      	str	r3, [r0, #20]
 8015f96:	2d09      	cmp	r5, #9
 8015f98:	f04f 0301 	mov.w	r3, #1
 8015f9c:	6103      	str	r3, [r0, #16]
 8015f9e:	dd16      	ble.n	8015fce <__s2b+0x72>
 8015fa0:	f104 0909 	add.w	r9, r4, #9
 8015fa4:	46c8      	mov	r8, r9
 8015fa6:	442c      	add	r4, r5
 8015fa8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015fac:	4601      	mov	r1, r0
 8015fae:	3b30      	subs	r3, #48	; 0x30
 8015fb0:	220a      	movs	r2, #10
 8015fb2:	4630      	mov	r0, r6
 8015fb4:	f7ff ff88 	bl	8015ec8 <__multadd>
 8015fb8:	45a0      	cmp	r8, r4
 8015fba:	d1f5      	bne.n	8015fa8 <__s2b+0x4c>
 8015fbc:	f1a5 0408 	sub.w	r4, r5, #8
 8015fc0:	444c      	add	r4, r9
 8015fc2:	1b2d      	subs	r5, r5, r4
 8015fc4:	1963      	adds	r3, r4, r5
 8015fc6:	42bb      	cmp	r3, r7
 8015fc8:	db04      	blt.n	8015fd4 <__s2b+0x78>
 8015fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015fce:	340a      	adds	r4, #10
 8015fd0:	2509      	movs	r5, #9
 8015fd2:	e7f6      	b.n	8015fc2 <__s2b+0x66>
 8015fd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015fd8:	4601      	mov	r1, r0
 8015fda:	3b30      	subs	r3, #48	; 0x30
 8015fdc:	220a      	movs	r2, #10
 8015fde:	4630      	mov	r0, r6
 8015fe0:	f7ff ff72 	bl	8015ec8 <__multadd>
 8015fe4:	e7ee      	b.n	8015fc4 <__s2b+0x68>
 8015fe6:	bf00      	nop
 8015fe8:	0801a2ac 	.word	0x0801a2ac
 8015fec:	0801a3a0 	.word	0x0801a3a0

08015ff0 <__hi0bits>:
 8015ff0:	0c03      	lsrs	r3, r0, #16
 8015ff2:	041b      	lsls	r3, r3, #16
 8015ff4:	b9d3      	cbnz	r3, 801602c <__hi0bits+0x3c>
 8015ff6:	0400      	lsls	r0, r0, #16
 8015ff8:	2310      	movs	r3, #16
 8015ffa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015ffe:	bf04      	itt	eq
 8016000:	0200      	lsleq	r0, r0, #8
 8016002:	3308      	addeq	r3, #8
 8016004:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016008:	bf04      	itt	eq
 801600a:	0100      	lsleq	r0, r0, #4
 801600c:	3304      	addeq	r3, #4
 801600e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016012:	bf04      	itt	eq
 8016014:	0080      	lsleq	r0, r0, #2
 8016016:	3302      	addeq	r3, #2
 8016018:	2800      	cmp	r0, #0
 801601a:	db05      	blt.n	8016028 <__hi0bits+0x38>
 801601c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016020:	f103 0301 	add.w	r3, r3, #1
 8016024:	bf08      	it	eq
 8016026:	2320      	moveq	r3, #32
 8016028:	4618      	mov	r0, r3
 801602a:	4770      	bx	lr
 801602c:	2300      	movs	r3, #0
 801602e:	e7e4      	b.n	8015ffa <__hi0bits+0xa>

08016030 <__lo0bits>:
 8016030:	6803      	ldr	r3, [r0, #0]
 8016032:	f013 0207 	ands.w	r2, r3, #7
 8016036:	4601      	mov	r1, r0
 8016038:	d00b      	beq.n	8016052 <__lo0bits+0x22>
 801603a:	07da      	lsls	r2, r3, #31
 801603c:	d424      	bmi.n	8016088 <__lo0bits+0x58>
 801603e:	0798      	lsls	r0, r3, #30
 8016040:	bf49      	itett	mi
 8016042:	085b      	lsrmi	r3, r3, #1
 8016044:	089b      	lsrpl	r3, r3, #2
 8016046:	2001      	movmi	r0, #1
 8016048:	600b      	strmi	r3, [r1, #0]
 801604a:	bf5c      	itt	pl
 801604c:	600b      	strpl	r3, [r1, #0]
 801604e:	2002      	movpl	r0, #2
 8016050:	4770      	bx	lr
 8016052:	b298      	uxth	r0, r3
 8016054:	b9b0      	cbnz	r0, 8016084 <__lo0bits+0x54>
 8016056:	0c1b      	lsrs	r3, r3, #16
 8016058:	2010      	movs	r0, #16
 801605a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801605e:	bf04      	itt	eq
 8016060:	0a1b      	lsreq	r3, r3, #8
 8016062:	3008      	addeq	r0, #8
 8016064:	071a      	lsls	r2, r3, #28
 8016066:	bf04      	itt	eq
 8016068:	091b      	lsreq	r3, r3, #4
 801606a:	3004      	addeq	r0, #4
 801606c:	079a      	lsls	r2, r3, #30
 801606e:	bf04      	itt	eq
 8016070:	089b      	lsreq	r3, r3, #2
 8016072:	3002      	addeq	r0, #2
 8016074:	07da      	lsls	r2, r3, #31
 8016076:	d403      	bmi.n	8016080 <__lo0bits+0x50>
 8016078:	085b      	lsrs	r3, r3, #1
 801607a:	f100 0001 	add.w	r0, r0, #1
 801607e:	d005      	beq.n	801608c <__lo0bits+0x5c>
 8016080:	600b      	str	r3, [r1, #0]
 8016082:	4770      	bx	lr
 8016084:	4610      	mov	r0, r2
 8016086:	e7e8      	b.n	801605a <__lo0bits+0x2a>
 8016088:	2000      	movs	r0, #0
 801608a:	4770      	bx	lr
 801608c:	2020      	movs	r0, #32
 801608e:	4770      	bx	lr

08016090 <__i2b>:
 8016090:	b510      	push	{r4, lr}
 8016092:	460c      	mov	r4, r1
 8016094:	2101      	movs	r1, #1
 8016096:	f7ff feb5 	bl	8015e04 <_Balloc>
 801609a:	4602      	mov	r2, r0
 801609c:	b928      	cbnz	r0, 80160aa <__i2b+0x1a>
 801609e:	4b05      	ldr	r3, [pc, #20]	; (80160b4 <__i2b+0x24>)
 80160a0:	4805      	ldr	r0, [pc, #20]	; (80160b8 <__i2b+0x28>)
 80160a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80160a6:	f001 fa99 	bl	80175dc <__assert_func>
 80160aa:	2301      	movs	r3, #1
 80160ac:	6144      	str	r4, [r0, #20]
 80160ae:	6103      	str	r3, [r0, #16]
 80160b0:	bd10      	pop	{r4, pc}
 80160b2:	bf00      	nop
 80160b4:	0801a2ac 	.word	0x0801a2ac
 80160b8:	0801a3a0 	.word	0x0801a3a0

080160bc <__multiply>:
 80160bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160c0:	4614      	mov	r4, r2
 80160c2:	690a      	ldr	r2, [r1, #16]
 80160c4:	6923      	ldr	r3, [r4, #16]
 80160c6:	429a      	cmp	r2, r3
 80160c8:	bfb8      	it	lt
 80160ca:	460b      	movlt	r3, r1
 80160cc:	460d      	mov	r5, r1
 80160ce:	bfbc      	itt	lt
 80160d0:	4625      	movlt	r5, r4
 80160d2:	461c      	movlt	r4, r3
 80160d4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80160d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80160dc:	68ab      	ldr	r3, [r5, #8]
 80160de:	6869      	ldr	r1, [r5, #4]
 80160e0:	eb0a 0709 	add.w	r7, sl, r9
 80160e4:	42bb      	cmp	r3, r7
 80160e6:	b085      	sub	sp, #20
 80160e8:	bfb8      	it	lt
 80160ea:	3101      	addlt	r1, #1
 80160ec:	f7ff fe8a 	bl	8015e04 <_Balloc>
 80160f0:	b930      	cbnz	r0, 8016100 <__multiply+0x44>
 80160f2:	4602      	mov	r2, r0
 80160f4:	4b42      	ldr	r3, [pc, #264]	; (8016200 <__multiply+0x144>)
 80160f6:	4843      	ldr	r0, [pc, #268]	; (8016204 <__multiply+0x148>)
 80160f8:	f240 115d 	movw	r1, #349	; 0x15d
 80160fc:	f001 fa6e 	bl	80175dc <__assert_func>
 8016100:	f100 0614 	add.w	r6, r0, #20
 8016104:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016108:	4633      	mov	r3, r6
 801610a:	2200      	movs	r2, #0
 801610c:	4543      	cmp	r3, r8
 801610e:	d31e      	bcc.n	801614e <__multiply+0x92>
 8016110:	f105 0c14 	add.w	ip, r5, #20
 8016114:	f104 0314 	add.w	r3, r4, #20
 8016118:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801611c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016120:	9202      	str	r2, [sp, #8]
 8016122:	ebac 0205 	sub.w	r2, ip, r5
 8016126:	3a15      	subs	r2, #21
 8016128:	f022 0203 	bic.w	r2, r2, #3
 801612c:	3204      	adds	r2, #4
 801612e:	f105 0115 	add.w	r1, r5, #21
 8016132:	458c      	cmp	ip, r1
 8016134:	bf38      	it	cc
 8016136:	2204      	movcc	r2, #4
 8016138:	9201      	str	r2, [sp, #4]
 801613a:	9a02      	ldr	r2, [sp, #8]
 801613c:	9303      	str	r3, [sp, #12]
 801613e:	429a      	cmp	r2, r3
 8016140:	d808      	bhi.n	8016154 <__multiply+0x98>
 8016142:	2f00      	cmp	r7, #0
 8016144:	dc55      	bgt.n	80161f2 <__multiply+0x136>
 8016146:	6107      	str	r7, [r0, #16]
 8016148:	b005      	add	sp, #20
 801614a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801614e:	f843 2b04 	str.w	r2, [r3], #4
 8016152:	e7db      	b.n	801610c <__multiply+0x50>
 8016154:	f8b3 a000 	ldrh.w	sl, [r3]
 8016158:	f1ba 0f00 	cmp.w	sl, #0
 801615c:	d020      	beq.n	80161a0 <__multiply+0xe4>
 801615e:	f105 0e14 	add.w	lr, r5, #20
 8016162:	46b1      	mov	r9, r6
 8016164:	2200      	movs	r2, #0
 8016166:	f85e 4b04 	ldr.w	r4, [lr], #4
 801616a:	f8d9 b000 	ldr.w	fp, [r9]
 801616e:	b2a1      	uxth	r1, r4
 8016170:	fa1f fb8b 	uxth.w	fp, fp
 8016174:	fb0a b101 	mla	r1, sl, r1, fp
 8016178:	4411      	add	r1, r2
 801617a:	f8d9 2000 	ldr.w	r2, [r9]
 801617e:	0c24      	lsrs	r4, r4, #16
 8016180:	0c12      	lsrs	r2, r2, #16
 8016182:	fb0a 2404 	mla	r4, sl, r4, r2
 8016186:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801618a:	b289      	uxth	r1, r1
 801618c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8016190:	45f4      	cmp	ip, lr
 8016192:	f849 1b04 	str.w	r1, [r9], #4
 8016196:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801619a:	d8e4      	bhi.n	8016166 <__multiply+0xaa>
 801619c:	9901      	ldr	r1, [sp, #4]
 801619e:	5072      	str	r2, [r6, r1]
 80161a0:	9a03      	ldr	r2, [sp, #12]
 80161a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80161a6:	3304      	adds	r3, #4
 80161a8:	f1b9 0f00 	cmp.w	r9, #0
 80161ac:	d01f      	beq.n	80161ee <__multiply+0x132>
 80161ae:	6834      	ldr	r4, [r6, #0]
 80161b0:	f105 0114 	add.w	r1, r5, #20
 80161b4:	46b6      	mov	lr, r6
 80161b6:	f04f 0a00 	mov.w	sl, #0
 80161ba:	880a      	ldrh	r2, [r1, #0]
 80161bc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80161c0:	fb09 b202 	mla	r2, r9, r2, fp
 80161c4:	4492      	add	sl, r2
 80161c6:	b2a4      	uxth	r4, r4
 80161c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80161cc:	f84e 4b04 	str.w	r4, [lr], #4
 80161d0:	f851 4b04 	ldr.w	r4, [r1], #4
 80161d4:	f8be 2000 	ldrh.w	r2, [lr]
 80161d8:	0c24      	lsrs	r4, r4, #16
 80161da:	fb09 2404 	mla	r4, r9, r4, r2
 80161de:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80161e2:	458c      	cmp	ip, r1
 80161e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80161e8:	d8e7      	bhi.n	80161ba <__multiply+0xfe>
 80161ea:	9a01      	ldr	r2, [sp, #4]
 80161ec:	50b4      	str	r4, [r6, r2]
 80161ee:	3604      	adds	r6, #4
 80161f0:	e7a3      	b.n	801613a <__multiply+0x7e>
 80161f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d1a5      	bne.n	8016146 <__multiply+0x8a>
 80161fa:	3f01      	subs	r7, #1
 80161fc:	e7a1      	b.n	8016142 <__multiply+0x86>
 80161fe:	bf00      	nop
 8016200:	0801a2ac 	.word	0x0801a2ac
 8016204:	0801a3a0 	.word	0x0801a3a0

08016208 <__pow5mult>:
 8016208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801620c:	4615      	mov	r5, r2
 801620e:	f012 0203 	ands.w	r2, r2, #3
 8016212:	4606      	mov	r6, r0
 8016214:	460f      	mov	r7, r1
 8016216:	d007      	beq.n	8016228 <__pow5mult+0x20>
 8016218:	4c25      	ldr	r4, [pc, #148]	; (80162b0 <__pow5mult+0xa8>)
 801621a:	3a01      	subs	r2, #1
 801621c:	2300      	movs	r3, #0
 801621e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016222:	f7ff fe51 	bl	8015ec8 <__multadd>
 8016226:	4607      	mov	r7, r0
 8016228:	10ad      	asrs	r5, r5, #2
 801622a:	d03d      	beq.n	80162a8 <__pow5mult+0xa0>
 801622c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801622e:	b97c      	cbnz	r4, 8016250 <__pow5mult+0x48>
 8016230:	2010      	movs	r0, #16
 8016232:	f7ff fdbf 	bl	8015db4 <malloc>
 8016236:	4602      	mov	r2, r0
 8016238:	6270      	str	r0, [r6, #36]	; 0x24
 801623a:	b928      	cbnz	r0, 8016248 <__pow5mult+0x40>
 801623c:	4b1d      	ldr	r3, [pc, #116]	; (80162b4 <__pow5mult+0xac>)
 801623e:	481e      	ldr	r0, [pc, #120]	; (80162b8 <__pow5mult+0xb0>)
 8016240:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016244:	f001 f9ca 	bl	80175dc <__assert_func>
 8016248:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801624c:	6004      	str	r4, [r0, #0]
 801624e:	60c4      	str	r4, [r0, #12]
 8016250:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016254:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016258:	b94c      	cbnz	r4, 801626e <__pow5mult+0x66>
 801625a:	f240 2171 	movw	r1, #625	; 0x271
 801625e:	4630      	mov	r0, r6
 8016260:	f7ff ff16 	bl	8016090 <__i2b>
 8016264:	2300      	movs	r3, #0
 8016266:	f8c8 0008 	str.w	r0, [r8, #8]
 801626a:	4604      	mov	r4, r0
 801626c:	6003      	str	r3, [r0, #0]
 801626e:	f04f 0900 	mov.w	r9, #0
 8016272:	07eb      	lsls	r3, r5, #31
 8016274:	d50a      	bpl.n	801628c <__pow5mult+0x84>
 8016276:	4639      	mov	r1, r7
 8016278:	4622      	mov	r2, r4
 801627a:	4630      	mov	r0, r6
 801627c:	f7ff ff1e 	bl	80160bc <__multiply>
 8016280:	4639      	mov	r1, r7
 8016282:	4680      	mov	r8, r0
 8016284:	4630      	mov	r0, r6
 8016286:	f7ff fdfd 	bl	8015e84 <_Bfree>
 801628a:	4647      	mov	r7, r8
 801628c:	106d      	asrs	r5, r5, #1
 801628e:	d00b      	beq.n	80162a8 <__pow5mult+0xa0>
 8016290:	6820      	ldr	r0, [r4, #0]
 8016292:	b938      	cbnz	r0, 80162a4 <__pow5mult+0x9c>
 8016294:	4622      	mov	r2, r4
 8016296:	4621      	mov	r1, r4
 8016298:	4630      	mov	r0, r6
 801629a:	f7ff ff0f 	bl	80160bc <__multiply>
 801629e:	6020      	str	r0, [r4, #0]
 80162a0:	f8c0 9000 	str.w	r9, [r0]
 80162a4:	4604      	mov	r4, r0
 80162a6:	e7e4      	b.n	8016272 <__pow5mult+0x6a>
 80162a8:	4638      	mov	r0, r7
 80162aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162ae:	bf00      	nop
 80162b0:	0801a4f0 	.word	0x0801a4f0
 80162b4:	0801a236 	.word	0x0801a236
 80162b8:	0801a3a0 	.word	0x0801a3a0

080162bc <__lshift>:
 80162bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162c0:	460c      	mov	r4, r1
 80162c2:	6849      	ldr	r1, [r1, #4]
 80162c4:	6923      	ldr	r3, [r4, #16]
 80162c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80162ca:	68a3      	ldr	r3, [r4, #8]
 80162cc:	4607      	mov	r7, r0
 80162ce:	4691      	mov	r9, r2
 80162d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80162d4:	f108 0601 	add.w	r6, r8, #1
 80162d8:	42b3      	cmp	r3, r6
 80162da:	db0b      	blt.n	80162f4 <__lshift+0x38>
 80162dc:	4638      	mov	r0, r7
 80162de:	f7ff fd91 	bl	8015e04 <_Balloc>
 80162e2:	4605      	mov	r5, r0
 80162e4:	b948      	cbnz	r0, 80162fa <__lshift+0x3e>
 80162e6:	4602      	mov	r2, r0
 80162e8:	4b28      	ldr	r3, [pc, #160]	; (801638c <__lshift+0xd0>)
 80162ea:	4829      	ldr	r0, [pc, #164]	; (8016390 <__lshift+0xd4>)
 80162ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80162f0:	f001 f974 	bl	80175dc <__assert_func>
 80162f4:	3101      	adds	r1, #1
 80162f6:	005b      	lsls	r3, r3, #1
 80162f8:	e7ee      	b.n	80162d8 <__lshift+0x1c>
 80162fa:	2300      	movs	r3, #0
 80162fc:	f100 0114 	add.w	r1, r0, #20
 8016300:	f100 0210 	add.w	r2, r0, #16
 8016304:	4618      	mov	r0, r3
 8016306:	4553      	cmp	r3, sl
 8016308:	db33      	blt.n	8016372 <__lshift+0xb6>
 801630a:	6920      	ldr	r0, [r4, #16]
 801630c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016310:	f104 0314 	add.w	r3, r4, #20
 8016314:	f019 091f 	ands.w	r9, r9, #31
 8016318:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801631c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016320:	d02b      	beq.n	801637a <__lshift+0xbe>
 8016322:	f1c9 0e20 	rsb	lr, r9, #32
 8016326:	468a      	mov	sl, r1
 8016328:	2200      	movs	r2, #0
 801632a:	6818      	ldr	r0, [r3, #0]
 801632c:	fa00 f009 	lsl.w	r0, r0, r9
 8016330:	4302      	orrs	r2, r0
 8016332:	f84a 2b04 	str.w	r2, [sl], #4
 8016336:	f853 2b04 	ldr.w	r2, [r3], #4
 801633a:	459c      	cmp	ip, r3
 801633c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016340:	d8f3      	bhi.n	801632a <__lshift+0x6e>
 8016342:	ebac 0304 	sub.w	r3, ip, r4
 8016346:	3b15      	subs	r3, #21
 8016348:	f023 0303 	bic.w	r3, r3, #3
 801634c:	3304      	adds	r3, #4
 801634e:	f104 0015 	add.w	r0, r4, #21
 8016352:	4584      	cmp	ip, r0
 8016354:	bf38      	it	cc
 8016356:	2304      	movcc	r3, #4
 8016358:	50ca      	str	r2, [r1, r3]
 801635a:	b10a      	cbz	r2, 8016360 <__lshift+0xa4>
 801635c:	f108 0602 	add.w	r6, r8, #2
 8016360:	3e01      	subs	r6, #1
 8016362:	4638      	mov	r0, r7
 8016364:	612e      	str	r6, [r5, #16]
 8016366:	4621      	mov	r1, r4
 8016368:	f7ff fd8c 	bl	8015e84 <_Bfree>
 801636c:	4628      	mov	r0, r5
 801636e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016372:	f842 0f04 	str.w	r0, [r2, #4]!
 8016376:	3301      	adds	r3, #1
 8016378:	e7c5      	b.n	8016306 <__lshift+0x4a>
 801637a:	3904      	subs	r1, #4
 801637c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016380:	f841 2f04 	str.w	r2, [r1, #4]!
 8016384:	459c      	cmp	ip, r3
 8016386:	d8f9      	bhi.n	801637c <__lshift+0xc0>
 8016388:	e7ea      	b.n	8016360 <__lshift+0xa4>
 801638a:	bf00      	nop
 801638c:	0801a2ac 	.word	0x0801a2ac
 8016390:	0801a3a0 	.word	0x0801a3a0

08016394 <__mcmp>:
 8016394:	b530      	push	{r4, r5, lr}
 8016396:	6902      	ldr	r2, [r0, #16]
 8016398:	690c      	ldr	r4, [r1, #16]
 801639a:	1b12      	subs	r2, r2, r4
 801639c:	d10e      	bne.n	80163bc <__mcmp+0x28>
 801639e:	f100 0314 	add.w	r3, r0, #20
 80163a2:	3114      	adds	r1, #20
 80163a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80163a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80163ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80163b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80163b4:	42a5      	cmp	r5, r4
 80163b6:	d003      	beq.n	80163c0 <__mcmp+0x2c>
 80163b8:	d305      	bcc.n	80163c6 <__mcmp+0x32>
 80163ba:	2201      	movs	r2, #1
 80163bc:	4610      	mov	r0, r2
 80163be:	bd30      	pop	{r4, r5, pc}
 80163c0:	4283      	cmp	r3, r0
 80163c2:	d3f3      	bcc.n	80163ac <__mcmp+0x18>
 80163c4:	e7fa      	b.n	80163bc <__mcmp+0x28>
 80163c6:	f04f 32ff 	mov.w	r2, #4294967295
 80163ca:	e7f7      	b.n	80163bc <__mcmp+0x28>

080163cc <__mdiff>:
 80163cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163d0:	460c      	mov	r4, r1
 80163d2:	4606      	mov	r6, r0
 80163d4:	4611      	mov	r1, r2
 80163d6:	4620      	mov	r0, r4
 80163d8:	4617      	mov	r7, r2
 80163da:	f7ff ffdb 	bl	8016394 <__mcmp>
 80163de:	1e05      	subs	r5, r0, #0
 80163e0:	d110      	bne.n	8016404 <__mdiff+0x38>
 80163e2:	4629      	mov	r1, r5
 80163e4:	4630      	mov	r0, r6
 80163e6:	f7ff fd0d 	bl	8015e04 <_Balloc>
 80163ea:	b930      	cbnz	r0, 80163fa <__mdiff+0x2e>
 80163ec:	4b39      	ldr	r3, [pc, #228]	; (80164d4 <__mdiff+0x108>)
 80163ee:	4602      	mov	r2, r0
 80163f0:	f240 2132 	movw	r1, #562	; 0x232
 80163f4:	4838      	ldr	r0, [pc, #224]	; (80164d8 <__mdiff+0x10c>)
 80163f6:	f001 f8f1 	bl	80175dc <__assert_func>
 80163fa:	2301      	movs	r3, #1
 80163fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016404:	bfa4      	itt	ge
 8016406:	463b      	movge	r3, r7
 8016408:	4627      	movge	r7, r4
 801640a:	4630      	mov	r0, r6
 801640c:	6879      	ldr	r1, [r7, #4]
 801640e:	bfa6      	itte	ge
 8016410:	461c      	movge	r4, r3
 8016412:	2500      	movge	r5, #0
 8016414:	2501      	movlt	r5, #1
 8016416:	f7ff fcf5 	bl	8015e04 <_Balloc>
 801641a:	b920      	cbnz	r0, 8016426 <__mdiff+0x5a>
 801641c:	4b2d      	ldr	r3, [pc, #180]	; (80164d4 <__mdiff+0x108>)
 801641e:	4602      	mov	r2, r0
 8016420:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016424:	e7e6      	b.n	80163f4 <__mdiff+0x28>
 8016426:	693e      	ldr	r6, [r7, #16]
 8016428:	60c5      	str	r5, [r0, #12]
 801642a:	6925      	ldr	r5, [r4, #16]
 801642c:	f107 0114 	add.w	r1, r7, #20
 8016430:	f104 0914 	add.w	r9, r4, #20
 8016434:	f100 0e14 	add.w	lr, r0, #20
 8016438:	f107 0210 	add.w	r2, r7, #16
 801643c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016440:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016444:	46f2      	mov	sl, lr
 8016446:	2700      	movs	r7, #0
 8016448:	f859 3b04 	ldr.w	r3, [r9], #4
 801644c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016450:	fa1f f883 	uxth.w	r8, r3
 8016454:	fa17 f78b 	uxtah	r7, r7, fp
 8016458:	0c1b      	lsrs	r3, r3, #16
 801645a:	eba7 0808 	sub.w	r8, r7, r8
 801645e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016462:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016466:	fa1f f888 	uxth.w	r8, r8
 801646a:	141f      	asrs	r7, r3, #16
 801646c:	454d      	cmp	r5, r9
 801646e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016472:	f84a 3b04 	str.w	r3, [sl], #4
 8016476:	d8e7      	bhi.n	8016448 <__mdiff+0x7c>
 8016478:	1b2b      	subs	r3, r5, r4
 801647a:	3b15      	subs	r3, #21
 801647c:	f023 0303 	bic.w	r3, r3, #3
 8016480:	3304      	adds	r3, #4
 8016482:	3415      	adds	r4, #21
 8016484:	42a5      	cmp	r5, r4
 8016486:	bf38      	it	cc
 8016488:	2304      	movcc	r3, #4
 801648a:	4419      	add	r1, r3
 801648c:	4473      	add	r3, lr
 801648e:	469e      	mov	lr, r3
 8016490:	460d      	mov	r5, r1
 8016492:	4565      	cmp	r5, ip
 8016494:	d30e      	bcc.n	80164b4 <__mdiff+0xe8>
 8016496:	f10c 0203 	add.w	r2, ip, #3
 801649a:	1a52      	subs	r2, r2, r1
 801649c:	f022 0203 	bic.w	r2, r2, #3
 80164a0:	3903      	subs	r1, #3
 80164a2:	458c      	cmp	ip, r1
 80164a4:	bf38      	it	cc
 80164a6:	2200      	movcc	r2, #0
 80164a8:	441a      	add	r2, r3
 80164aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80164ae:	b17b      	cbz	r3, 80164d0 <__mdiff+0x104>
 80164b0:	6106      	str	r6, [r0, #16]
 80164b2:	e7a5      	b.n	8016400 <__mdiff+0x34>
 80164b4:	f855 8b04 	ldr.w	r8, [r5], #4
 80164b8:	fa17 f488 	uxtah	r4, r7, r8
 80164bc:	1422      	asrs	r2, r4, #16
 80164be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80164c2:	b2a4      	uxth	r4, r4
 80164c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80164c8:	f84e 4b04 	str.w	r4, [lr], #4
 80164cc:	1417      	asrs	r7, r2, #16
 80164ce:	e7e0      	b.n	8016492 <__mdiff+0xc6>
 80164d0:	3e01      	subs	r6, #1
 80164d2:	e7ea      	b.n	80164aa <__mdiff+0xde>
 80164d4:	0801a2ac 	.word	0x0801a2ac
 80164d8:	0801a3a0 	.word	0x0801a3a0

080164dc <__ulp>:
 80164dc:	b082      	sub	sp, #8
 80164de:	ed8d 0b00 	vstr	d0, [sp]
 80164e2:	9b01      	ldr	r3, [sp, #4]
 80164e4:	4912      	ldr	r1, [pc, #72]	; (8016530 <__ulp+0x54>)
 80164e6:	4019      	ands	r1, r3
 80164e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80164ec:	2900      	cmp	r1, #0
 80164ee:	dd05      	ble.n	80164fc <__ulp+0x20>
 80164f0:	2200      	movs	r2, #0
 80164f2:	460b      	mov	r3, r1
 80164f4:	ec43 2b10 	vmov	d0, r2, r3
 80164f8:	b002      	add	sp, #8
 80164fa:	4770      	bx	lr
 80164fc:	4249      	negs	r1, r1
 80164fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016502:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016506:	f04f 0200 	mov.w	r2, #0
 801650a:	f04f 0300 	mov.w	r3, #0
 801650e:	da04      	bge.n	801651a <__ulp+0x3e>
 8016510:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016514:	fa41 f300 	asr.w	r3, r1, r0
 8016518:	e7ec      	b.n	80164f4 <__ulp+0x18>
 801651a:	f1a0 0114 	sub.w	r1, r0, #20
 801651e:	291e      	cmp	r1, #30
 8016520:	bfda      	itte	le
 8016522:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016526:	fa20 f101 	lsrle.w	r1, r0, r1
 801652a:	2101      	movgt	r1, #1
 801652c:	460a      	mov	r2, r1
 801652e:	e7e1      	b.n	80164f4 <__ulp+0x18>
 8016530:	7ff00000 	.word	0x7ff00000

08016534 <__b2d>:
 8016534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016536:	6905      	ldr	r5, [r0, #16]
 8016538:	f100 0714 	add.w	r7, r0, #20
 801653c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016540:	1f2e      	subs	r6, r5, #4
 8016542:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016546:	4620      	mov	r0, r4
 8016548:	f7ff fd52 	bl	8015ff0 <__hi0bits>
 801654c:	f1c0 0320 	rsb	r3, r0, #32
 8016550:	280a      	cmp	r0, #10
 8016552:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80165d0 <__b2d+0x9c>
 8016556:	600b      	str	r3, [r1, #0]
 8016558:	dc14      	bgt.n	8016584 <__b2d+0x50>
 801655a:	f1c0 0e0b 	rsb	lr, r0, #11
 801655e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016562:	42b7      	cmp	r7, r6
 8016564:	ea41 030c 	orr.w	r3, r1, ip
 8016568:	bf34      	ite	cc
 801656a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801656e:	2100      	movcs	r1, #0
 8016570:	3015      	adds	r0, #21
 8016572:	fa04 f000 	lsl.w	r0, r4, r0
 8016576:	fa21 f10e 	lsr.w	r1, r1, lr
 801657a:	ea40 0201 	orr.w	r2, r0, r1
 801657e:	ec43 2b10 	vmov	d0, r2, r3
 8016582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016584:	42b7      	cmp	r7, r6
 8016586:	bf3a      	itte	cc
 8016588:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801658c:	f1a5 0608 	subcc.w	r6, r5, #8
 8016590:	2100      	movcs	r1, #0
 8016592:	380b      	subs	r0, #11
 8016594:	d017      	beq.n	80165c6 <__b2d+0x92>
 8016596:	f1c0 0c20 	rsb	ip, r0, #32
 801659a:	fa04 f500 	lsl.w	r5, r4, r0
 801659e:	42be      	cmp	r6, r7
 80165a0:	fa21 f40c 	lsr.w	r4, r1, ip
 80165a4:	ea45 0504 	orr.w	r5, r5, r4
 80165a8:	bf8c      	ite	hi
 80165aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80165ae:	2400      	movls	r4, #0
 80165b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80165b4:	fa01 f000 	lsl.w	r0, r1, r0
 80165b8:	fa24 f40c 	lsr.w	r4, r4, ip
 80165bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80165c0:	ea40 0204 	orr.w	r2, r0, r4
 80165c4:	e7db      	b.n	801657e <__b2d+0x4a>
 80165c6:	ea44 030c 	orr.w	r3, r4, ip
 80165ca:	460a      	mov	r2, r1
 80165cc:	e7d7      	b.n	801657e <__b2d+0x4a>
 80165ce:	bf00      	nop
 80165d0:	3ff00000 	.word	0x3ff00000

080165d4 <__d2b>:
 80165d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80165d8:	4689      	mov	r9, r1
 80165da:	2101      	movs	r1, #1
 80165dc:	ec57 6b10 	vmov	r6, r7, d0
 80165e0:	4690      	mov	r8, r2
 80165e2:	f7ff fc0f 	bl	8015e04 <_Balloc>
 80165e6:	4604      	mov	r4, r0
 80165e8:	b930      	cbnz	r0, 80165f8 <__d2b+0x24>
 80165ea:	4602      	mov	r2, r0
 80165ec:	4b25      	ldr	r3, [pc, #148]	; (8016684 <__d2b+0xb0>)
 80165ee:	4826      	ldr	r0, [pc, #152]	; (8016688 <__d2b+0xb4>)
 80165f0:	f240 310a 	movw	r1, #778	; 0x30a
 80165f4:	f000 fff2 	bl	80175dc <__assert_func>
 80165f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80165fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016600:	bb35      	cbnz	r5, 8016650 <__d2b+0x7c>
 8016602:	2e00      	cmp	r6, #0
 8016604:	9301      	str	r3, [sp, #4]
 8016606:	d028      	beq.n	801665a <__d2b+0x86>
 8016608:	4668      	mov	r0, sp
 801660a:	9600      	str	r6, [sp, #0]
 801660c:	f7ff fd10 	bl	8016030 <__lo0bits>
 8016610:	9900      	ldr	r1, [sp, #0]
 8016612:	b300      	cbz	r0, 8016656 <__d2b+0x82>
 8016614:	9a01      	ldr	r2, [sp, #4]
 8016616:	f1c0 0320 	rsb	r3, r0, #32
 801661a:	fa02 f303 	lsl.w	r3, r2, r3
 801661e:	430b      	orrs	r3, r1
 8016620:	40c2      	lsrs	r2, r0
 8016622:	6163      	str	r3, [r4, #20]
 8016624:	9201      	str	r2, [sp, #4]
 8016626:	9b01      	ldr	r3, [sp, #4]
 8016628:	61a3      	str	r3, [r4, #24]
 801662a:	2b00      	cmp	r3, #0
 801662c:	bf14      	ite	ne
 801662e:	2202      	movne	r2, #2
 8016630:	2201      	moveq	r2, #1
 8016632:	6122      	str	r2, [r4, #16]
 8016634:	b1d5      	cbz	r5, 801666c <__d2b+0x98>
 8016636:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801663a:	4405      	add	r5, r0
 801663c:	f8c9 5000 	str.w	r5, [r9]
 8016640:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016644:	f8c8 0000 	str.w	r0, [r8]
 8016648:	4620      	mov	r0, r4
 801664a:	b003      	add	sp, #12
 801664c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016654:	e7d5      	b.n	8016602 <__d2b+0x2e>
 8016656:	6161      	str	r1, [r4, #20]
 8016658:	e7e5      	b.n	8016626 <__d2b+0x52>
 801665a:	a801      	add	r0, sp, #4
 801665c:	f7ff fce8 	bl	8016030 <__lo0bits>
 8016660:	9b01      	ldr	r3, [sp, #4]
 8016662:	6163      	str	r3, [r4, #20]
 8016664:	2201      	movs	r2, #1
 8016666:	6122      	str	r2, [r4, #16]
 8016668:	3020      	adds	r0, #32
 801666a:	e7e3      	b.n	8016634 <__d2b+0x60>
 801666c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016670:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016674:	f8c9 0000 	str.w	r0, [r9]
 8016678:	6918      	ldr	r0, [r3, #16]
 801667a:	f7ff fcb9 	bl	8015ff0 <__hi0bits>
 801667e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016682:	e7df      	b.n	8016644 <__d2b+0x70>
 8016684:	0801a2ac 	.word	0x0801a2ac
 8016688:	0801a3a0 	.word	0x0801a3a0

0801668c <__ratio>:
 801668c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016690:	4688      	mov	r8, r1
 8016692:	4669      	mov	r1, sp
 8016694:	4681      	mov	r9, r0
 8016696:	f7ff ff4d 	bl	8016534 <__b2d>
 801669a:	a901      	add	r1, sp, #4
 801669c:	4640      	mov	r0, r8
 801669e:	ec55 4b10 	vmov	r4, r5, d0
 80166a2:	f7ff ff47 	bl	8016534 <__b2d>
 80166a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80166aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80166ae:	eba3 0c02 	sub.w	ip, r3, r2
 80166b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80166b6:	1a9b      	subs	r3, r3, r2
 80166b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80166bc:	ec51 0b10 	vmov	r0, r1, d0
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	bfd6      	itet	le
 80166c4:	460a      	movle	r2, r1
 80166c6:	462a      	movgt	r2, r5
 80166c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80166cc:	468b      	mov	fp, r1
 80166ce:	462f      	mov	r7, r5
 80166d0:	bfd4      	ite	le
 80166d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80166d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80166da:	4620      	mov	r0, r4
 80166dc:	ee10 2a10 	vmov	r2, s0
 80166e0:	465b      	mov	r3, fp
 80166e2:	4639      	mov	r1, r7
 80166e4:	f7ea f8b2 	bl	800084c <__aeabi_ddiv>
 80166e8:	ec41 0b10 	vmov	d0, r0, r1
 80166ec:	b003      	add	sp, #12
 80166ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080166f2 <__copybits>:
 80166f2:	3901      	subs	r1, #1
 80166f4:	b570      	push	{r4, r5, r6, lr}
 80166f6:	1149      	asrs	r1, r1, #5
 80166f8:	6914      	ldr	r4, [r2, #16]
 80166fa:	3101      	adds	r1, #1
 80166fc:	f102 0314 	add.w	r3, r2, #20
 8016700:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016704:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016708:	1f05      	subs	r5, r0, #4
 801670a:	42a3      	cmp	r3, r4
 801670c:	d30c      	bcc.n	8016728 <__copybits+0x36>
 801670e:	1aa3      	subs	r3, r4, r2
 8016710:	3b11      	subs	r3, #17
 8016712:	f023 0303 	bic.w	r3, r3, #3
 8016716:	3211      	adds	r2, #17
 8016718:	42a2      	cmp	r2, r4
 801671a:	bf88      	it	hi
 801671c:	2300      	movhi	r3, #0
 801671e:	4418      	add	r0, r3
 8016720:	2300      	movs	r3, #0
 8016722:	4288      	cmp	r0, r1
 8016724:	d305      	bcc.n	8016732 <__copybits+0x40>
 8016726:	bd70      	pop	{r4, r5, r6, pc}
 8016728:	f853 6b04 	ldr.w	r6, [r3], #4
 801672c:	f845 6f04 	str.w	r6, [r5, #4]!
 8016730:	e7eb      	b.n	801670a <__copybits+0x18>
 8016732:	f840 3b04 	str.w	r3, [r0], #4
 8016736:	e7f4      	b.n	8016722 <__copybits+0x30>

08016738 <__any_on>:
 8016738:	f100 0214 	add.w	r2, r0, #20
 801673c:	6900      	ldr	r0, [r0, #16]
 801673e:	114b      	asrs	r3, r1, #5
 8016740:	4298      	cmp	r0, r3
 8016742:	b510      	push	{r4, lr}
 8016744:	db11      	blt.n	801676a <__any_on+0x32>
 8016746:	dd0a      	ble.n	801675e <__any_on+0x26>
 8016748:	f011 011f 	ands.w	r1, r1, #31
 801674c:	d007      	beq.n	801675e <__any_on+0x26>
 801674e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016752:	fa24 f001 	lsr.w	r0, r4, r1
 8016756:	fa00 f101 	lsl.w	r1, r0, r1
 801675a:	428c      	cmp	r4, r1
 801675c:	d10b      	bne.n	8016776 <__any_on+0x3e>
 801675e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016762:	4293      	cmp	r3, r2
 8016764:	d803      	bhi.n	801676e <__any_on+0x36>
 8016766:	2000      	movs	r0, #0
 8016768:	bd10      	pop	{r4, pc}
 801676a:	4603      	mov	r3, r0
 801676c:	e7f7      	b.n	801675e <__any_on+0x26>
 801676e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016772:	2900      	cmp	r1, #0
 8016774:	d0f5      	beq.n	8016762 <__any_on+0x2a>
 8016776:	2001      	movs	r0, #1
 8016778:	e7f6      	b.n	8016768 <__any_on+0x30>

0801677a <_calloc_r>:
 801677a:	b513      	push	{r0, r1, r4, lr}
 801677c:	434a      	muls	r2, r1
 801677e:	4611      	mov	r1, r2
 8016780:	9201      	str	r2, [sp, #4]
 8016782:	f000 f859 	bl	8016838 <_malloc_r>
 8016786:	4604      	mov	r4, r0
 8016788:	b118      	cbz	r0, 8016792 <_calloc_r+0x18>
 801678a:	9a01      	ldr	r2, [sp, #4]
 801678c:	2100      	movs	r1, #0
 801678e:	f7fc fa09 	bl	8012ba4 <memset>
 8016792:	4620      	mov	r0, r4
 8016794:	b002      	add	sp, #8
 8016796:	bd10      	pop	{r4, pc}

08016798 <_free_r>:
 8016798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801679a:	2900      	cmp	r1, #0
 801679c:	d048      	beq.n	8016830 <_free_r+0x98>
 801679e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80167a2:	9001      	str	r0, [sp, #4]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	f1a1 0404 	sub.w	r4, r1, #4
 80167aa:	bfb8      	it	lt
 80167ac:	18e4      	addlt	r4, r4, r3
 80167ae:	f001 f885 	bl	80178bc <__malloc_lock>
 80167b2:	4a20      	ldr	r2, [pc, #128]	; (8016834 <_free_r+0x9c>)
 80167b4:	9801      	ldr	r0, [sp, #4]
 80167b6:	6813      	ldr	r3, [r2, #0]
 80167b8:	4615      	mov	r5, r2
 80167ba:	b933      	cbnz	r3, 80167ca <_free_r+0x32>
 80167bc:	6063      	str	r3, [r4, #4]
 80167be:	6014      	str	r4, [r2, #0]
 80167c0:	b003      	add	sp, #12
 80167c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80167c6:	f001 b87f 	b.w	80178c8 <__malloc_unlock>
 80167ca:	42a3      	cmp	r3, r4
 80167cc:	d90b      	bls.n	80167e6 <_free_r+0x4e>
 80167ce:	6821      	ldr	r1, [r4, #0]
 80167d0:	1862      	adds	r2, r4, r1
 80167d2:	4293      	cmp	r3, r2
 80167d4:	bf04      	itt	eq
 80167d6:	681a      	ldreq	r2, [r3, #0]
 80167d8:	685b      	ldreq	r3, [r3, #4]
 80167da:	6063      	str	r3, [r4, #4]
 80167dc:	bf04      	itt	eq
 80167de:	1852      	addeq	r2, r2, r1
 80167e0:	6022      	streq	r2, [r4, #0]
 80167e2:	602c      	str	r4, [r5, #0]
 80167e4:	e7ec      	b.n	80167c0 <_free_r+0x28>
 80167e6:	461a      	mov	r2, r3
 80167e8:	685b      	ldr	r3, [r3, #4]
 80167ea:	b10b      	cbz	r3, 80167f0 <_free_r+0x58>
 80167ec:	42a3      	cmp	r3, r4
 80167ee:	d9fa      	bls.n	80167e6 <_free_r+0x4e>
 80167f0:	6811      	ldr	r1, [r2, #0]
 80167f2:	1855      	adds	r5, r2, r1
 80167f4:	42a5      	cmp	r5, r4
 80167f6:	d10b      	bne.n	8016810 <_free_r+0x78>
 80167f8:	6824      	ldr	r4, [r4, #0]
 80167fa:	4421      	add	r1, r4
 80167fc:	1854      	adds	r4, r2, r1
 80167fe:	42a3      	cmp	r3, r4
 8016800:	6011      	str	r1, [r2, #0]
 8016802:	d1dd      	bne.n	80167c0 <_free_r+0x28>
 8016804:	681c      	ldr	r4, [r3, #0]
 8016806:	685b      	ldr	r3, [r3, #4]
 8016808:	6053      	str	r3, [r2, #4]
 801680a:	4421      	add	r1, r4
 801680c:	6011      	str	r1, [r2, #0]
 801680e:	e7d7      	b.n	80167c0 <_free_r+0x28>
 8016810:	d902      	bls.n	8016818 <_free_r+0x80>
 8016812:	230c      	movs	r3, #12
 8016814:	6003      	str	r3, [r0, #0]
 8016816:	e7d3      	b.n	80167c0 <_free_r+0x28>
 8016818:	6825      	ldr	r5, [r4, #0]
 801681a:	1961      	adds	r1, r4, r5
 801681c:	428b      	cmp	r3, r1
 801681e:	bf04      	itt	eq
 8016820:	6819      	ldreq	r1, [r3, #0]
 8016822:	685b      	ldreq	r3, [r3, #4]
 8016824:	6063      	str	r3, [r4, #4]
 8016826:	bf04      	itt	eq
 8016828:	1949      	addeq	r1, r1, r5
 801682a:	6021      	streq	r1, [r4, #0]
 801682c:	6054      	str	r4, [r2, #4]
 801682e:	e7c7      	b.n	80167c0 <_free_r+0x28>
 8016830:	b003      	add	sp, #12
 8016832:	bd30      	pop	{r4, r5, pc}
 8016834:	200008a4 	.word	0x200008a4

08016838 <_malloc_r>:
 8016838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801683a:	1ccd      	adds	r5, r1, #3
 801683c:	f025 0503 	bic.w	r5, r5, #3
 8016840:	3508      	adds	r5, #8
 8016842:	2d0c      	cmp	r5, #12
 8016844:	bf38      	it	cc
 8016846:	250c      	movcc	r5, #12
 8016848:	2d00      	cmp	r5, #0
 801684a:	4606      	mov	r6, r0
 801684c:	db01      	blt.n	8016852 <_malloc_r+0x1a>
 801684e:	42a9      	cmp	r1, r5
 8016850:	d903      	bls.n	801685a <_malloc_r+0x22>
 8016852:	230c      	movs	r3, #12
 8016854:	6033      	str	r3, [r6, #0]
 8016856:	2000      	movs	r0, #0
 8016858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801685a:	f001 f82f 	bl	80178bc <__malloc_lock>
 801685e:	4921      	ldr	r1, [pc, #132]	; (80168e4 <_malloc_r+0xac>)
 8016860:	680a      	ldr	r2, [r1, #0]
 8016862:	4614      	mov	r4, r2
 8016864:	b99c      	cbnz	r4, 801688e <_malloc_r+0x56>
 8016866:	4f20      	ldr	r7, [pc, #128]	; (80168e8 <_malloc_r+0xb0>)
 8016868:	683b      	ldr	r3, [r7, #0]
 801686a:	b923      	cbnz	r3, 8016876 <_malloc_r+0x3e>
 801686c:	4621      	mov	r1, r4
 801686e:	4630      	mov	r0, r6
 8016870:	f000 fcd2 	bl	8017218 <_sbrk_r>
 8016874:	6038      	str	r0, [r7, #0]
 8016876:	4629      	mov	r1, r5
 8016878:	4630      	mov	r0, r6
 801687a:	f000 fccd 	bl	8017218 <_sbrk_r>
 801687e:	1c43      	adds	r3, r0, #1
 8016880:	d123      	bne.n	80168ca <_malloc_r+0x92>
 8016882:	230c      	movs	r3, #12
 8016884:	6033      	str	r3, [r6, #0]
 8016886:	4630      	mov	r0, r6
 8016888:	f001 f81e 	bl	80178c8 <__malloc_unlock>
 801688c:	e7e3      	b.n	8016856 <_malloc_r+0x1e>
 801688e:	6823      	ldr	r3, [r4, #0]
 8016890:	1b5b      	subs	r3, r3, r5
 8016892:	d417      	bmi.n	80168c4 <_malloc_r+0x8c>
 8016894:	2b0b      	cmp	r3, #11
 8016896:	d903      	bls.n	80168a0 <_malloc_r+0x68>
 8016898:	6023      	str	r3, [r4, #0]
 801689a:	441c      	add	r4, r3
 801689c:	6025      	str	r5, [r4, #0]
 801689e:	e004      	b.n	80168aa <_malloc_r+0x72>
 80168a0:	6863      	ldr	r3, [r4, #4]
 80168a2:	42a2      	cmp	r2, r4
 80168a4:	bf0c      	ite	eq
 80168a6:	600b      	streq	r3, [r1, #0]
 80168a8:	6053      	strne	r3, [r2, #4]
 80168aa:	4630      	mov	r0, r6
 80168ac:	f001 f80c 	bl	80178c8 <__malloc_unlock>
 80168b0:	f104 000b 	add.w	r0, r4, #11
 80168b4:	1d23      	adds	r3, r4, #4
 80168b6:	f020 0007 	bic.w	r0, r0, #7
 80168ba:	1ac2      	subs	r2, r0, r3
 80168bc:	d0cc      	beq.n	8016858 <_malloc_r+0x20>
 80168be:	1a1b      	subs	r3, r3, r0
 80168c0:	50a3      	str	r3, [r4, r2]
 80168c2:	e7c9      	b.n	8016858 <_malloc_r+0x20>
 80168c4:	4622      	mov	r2, r4
 80168c6:	6864      	ldr	r4, [r4, #4]
 80168c8:	e7cc      	b.n	8016864 <_malloc_r+0x2c>
 80168ca:	1cc4      	adds	r4, r0, #3
 80168cc:	f024 0403 	bic.w	r4, r4, #3
 80168d0:	42a0      	cmp	r0, r4
 80168d2:	d0e3      	beq.n	801689c <_malloc_r+0x64>
 80168d4:	1a21      	subs	r1, r4, r0
 80168d6:	4630      	mov	r0, r6
 80168d8:	f000 fc9e 	bl	8017218 <_sbrk_r>
 80168dc:	3001      	adds	r0, #1
 80168de:	d1dd      	bne.n	801689c <_malloc_r+0x64>
 80168e0:	e7cf      	b.n	8016882 <_malloc_r+0x4a>
 80168e2:	bf00      	nop
 80168e4:	200008a4 	.word	0x200008a4
 80168e8:	200008a8 	.word	0x200008a8

080168ec <__ssputs_r>:
 80168ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168f0:	688e      	ldr	r6, [r1, #8]
 80168f2:	429e      	cmp	r6, r3
 80168f4:	4682      	mov	sl, r0
 80168f6:	460c      	mov	r4, r1
 80168f8:	4690      	mov	r8, r2
 80168fa:	461f      	mov	r7, r3
 80168fc:	d838      	bhi.n	8016970 <__ssputs_r+0x84>
 80168fe:	898a      	ldrh	r2, [r1, #12]
 8016900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016904:	d032      	beq.n	801696c <__ssputs_r+0x80>
 8016906:	6825      	ldr	r5, [r4, #0]
 8016908:	6909      	ldr	r1, [r1, #16]
 801690a:	eba5 0901 	sub.w	r9, r5, r1
 801690e:	6965      	ldr	r5, [r4, #20]
 8016910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016918:	3301      	adds	r3, #1
 801691a:	444b      	add	r3, r9
 801691c:	106d      	asrs	r5, r5, #1
 801691e:	429d      	cmp	r5, r3
 8016920:	bf38      	it	cc
 8016922:	461d      	movcc	r5, r3
 8016924:	0553      	lsls	r3, r2, #21
 8016926:	d531      	bpl.n	801698c <__ssputs_r+0xa0>
 8016928:	4629      	mov	r1, r5
 801692a:	f7ff ff85 	bl	8016838 <_malloc_r>
 801692e:	4606      	mov	r6, r0
 8016930:	b950      	cbnz	r0, 8016948 <__ssputs_r+0x5c>
 8016932:	230c      	movs	r3, #12
 8016934:	f8ca 3000 	str.w	r3, [sl]
 8016938:	89a3      	ldrh	r3, [r4, #12]
 801693a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801693e:	81a3      	strh	r3, [r4, #12]
 8016940:	f04f 30ff 	mov.w	r0, #4294967295
 8016944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016948:	6921      	ldr	r1, [r4, #16]
 801694a:	464a      	mov	r2, r9
 801694c:	f7ff fa4c 	bl	8015de8 <memcpy>
 8016950:	89a3      	ldrh	r3, [r4, #12]
 8016952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801695a:	81a3      	strh	r3, [r4, #12]
 801695c:	6126      	str	r6, [r4, #16]
 801695e:	6165      	str	r5, [r4, #20]
 8016960:	444e      	add	r6, r9
 8016962:	eba5 0509 	sub.w	r5, r5, r9
 8016966:	6026      	str	r6, [r4, #0]
 8016968:	60a5      	str	r5, [r4, #8]
 801696a:	463e      	mov	r6, r7
 801696c:	42be      	cmp	r6, r7
 801696e:	d900      	bls.n	8016972 <__ssputs_r+0x86>
 8016970:	463e      	mov	r6, r7
 8016972:	4632      	mov	r2, r6
 8016974:	6820      	ldr	r0, [r4, #0]
 8016976:	4641      	mov	r1, r8
 8016978:	f000 ff86 	bl	8017888 <memmove>
 801697c:	68a3      	ldr	r3, [r4, #8]
 801697e:	6822      	ldr	r2, [r4, #0]
 8016980:	1b9b      	subs	r3, r3, r6
 8016982:	4432      	add	r2, r6
 8016984:	60a3      	str	r3, [r4, #8]
 8016986:	6022      	str	r2, [r4, #0]
 8016988:	2000      	movs	r0, #0
 801698a:	e7db      	b.n	8016944 <__ssputs_r+0x58>
 801698c:	462a      	mov	r2, r5
 801698e:	f000 ffa1 	bl	80178d4 <_realloc_r>
 8016992:	4606      	mov	r6, r0
 8016994:	2800      	cmp	r0, #0
 8016996:	d1e1      	bne.n	801695c <__ssputs_r+0x70>
 8016998:	6921      	ldr	r1, [r4, #16]
 801699a:	4650      	mov	r0, sl
 801699c:	f7ff fefc 	bl	8016798 <_free_r>
 80169a0:	e7c7      	b.n	8016932 <__ssputs_r+0x46>
	...

080169a4 <_svfiprintf_r>:
 80169a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169a8:	4698      	mov	r8, r3
 80169aa:	898b      	ldrh	r3, [r1, #12]
 80169ac:	061b      	lsls	r3, r3, #24
 80169ae:	b09d      	sub	sp, #116	; 0x74
 80169b0:	4607      	mov	r7, r0
 80169b2:	460d      	mov	r5, r1
 80169b4:	4614      	mov	r4, r2
 80169b6:	d50e      	bpl.n	80169d6 <_svfiprintf_r+0x32>
 80169b8:	690b      	ldr	r3, [r1, #16]
 80169ba:	b963      	cbnz	r3, 80169d6 <_svfiprintf_r+0x32>
 80169bc:	2140      	movs	r1, #64	; 0x40
 80169be:	f7ff ff3b 	bl	8016838 <_malloc_r>
 80169c2:	6028      	str	r0, [r5, #0]
 80169c4:	6128      	str	r0, [r5, #16]
 80169c6:	b920      	cbnz	r0, 80169d2 <_svfiprintf_r+0x2e>
 80169c8:	230c      	movs	r3, #12
 80169ca:	603b      	str	r3, [r7, #0]
 80169cc:	f04f 30ff 	mov.w	r0, #4294967295
 80169d0:	e0d1      	b.n	8016b76 <_svfiprintf_r+0x1d2>
 80169d2:	2340      	movs	r3, #64	; 0x40
 80169d4:	616b      	str	r3, [r5, #20]
 80169d6:	2300      	movs	r3, #0
 80169d8:	9309      	str	r3, [sp, #36]	; 0x24
 80169da:	2320      	movs	r3, #32
 80169dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80169e4:	2330      	movs	r3, #48	; 0x30
 80169e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016b90 <_svfiprintf_r+0x1ec>
 80169ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169ee:	f04f 0901 	mov.w	r9, #1
 80169f2:	4623      	mov	r3, r4
 80169f4:	469a      	mov	sl, r3
 80169f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169fa:	b10a      	cbz	r2, 8016a00 <_svfiprintf_r+0x5c>
 80169fc:	2a25      	cmp	r2, #37	; 0x25
 80169fe:	d1f9      	bne.n	80169f4 <_svfiprintf_r+0x50>
 8016a00:	ebba 0b04 	subs.w	fp, sl, r4
 8016a04:	d00b      	beq.n	8016a1e <_svfiprintf_r+0x7a>
 8016a06:	465b      	mov	r3, fp
 8016a08:	4622      	mov	r2, r4
 8016a0a:	4629      	mov	r1, r5
 8016a0c:	4638      	mov	r0, r7
 8016a0e:	f7ff ff6d 	bl	80168ec <__ssputs_r>
 8016a12:	3001      	adds	r0, #1
 8016a14:	f000 80aa 	beq.w	8016b6c <_svfiprintf_r+0x1c8>
 8016a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a1a:	445a      	add	r2, fp
 8016a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8016a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	f000 80a2 	beq.w	8016b6c <_svfiprintf_r+0x1c8>
 8016a28:	2300      	movs	r3, #0
 8016a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8016a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a32:	f10a 0a01 	add.w	sl, sl, #1
 8016a36:	9304      	str	r3, [sp, #16]
 8016a38:	9307      	str	r3, [sp, #28]
 8016a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8016a40:	4654      	mov	r4, sl
 8016a42:	2205      	movs	r2, #5
 8016a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a48:	4851      	ldr	r0, [pc, #324]	; (8016b90 <_svfiprintf_r+0x1ec>)
 8016a4a:	f7e9 fbc9 	bl	80001e0 <memchr>
 8016a4e:	9a04      	ldr	r2, [sp, #16]
 8016a50:	b9d8      	cbnz	r0, 8016a8a <_svfiprintf_r+0xe6>
 8016a52:	06d0      	lsls	r0, r2, #27
 8016a54:	bf44      	itt	mi
 8016a56:	2320      	movmi	r3, #32
 8016a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a5c:	0711      	lsls	r1, r2, #28
 8016a5e:	bf44      	itt	mi
 8016a60:	232b      	movmi	r3, #43	; 0x2b
 8016a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a66:	f89a 3000 	ldrb.w	r3, [sl]
 8016a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8016a6c:	d015      	beq.n	8016a9a <_svfiprintf_r+0xf6>
 8016a6e:	9a07      	ldr	r2, [sp, #28]
 8016a70:	4654      	mov	r4, sl
 8016a72:	2000      	movs	r0, #0
 8016a74:	f04f 0c0a 	mov.w	ip, #10
 8016a78:	4621      	mov	r1, r4
 8016a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a7e:	3b30      	subs	r3, #48	; 0x30
 8016a80:	2b09      	cmp	r3, #9
 8016a82:	d94e      	bls.n	8016b22 <_svfiprintf_r+0x17e>
 8016a84:	b1b0      	cbz	r0, 8016ab4 <_svfiprintf_r+0x110>
 8016a86:	9207      	str	r2, [sp, #28]
 8016a88:	e014      	b.n	8016ab4 <_svfiprintf_r+0x110>
 8016a8a:	eba0 0308 	sub.w	r3, r0, r8
 8016a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8016a92:	4313      	orrs	r3, r2
 8016a94:	9304      	str	r3, [sp, #16]
 8016a96:	46a2      	mov	sl, r4
 8016a98:	e7d2      	b.n	8016a40 <_svfiprintf_r+0x9c>
 8016a9a:	9b03      	ldr	r3, [sp, #12]
 8016a9c:	1d19      	adds	r1, r3, #4
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	9103      	str	r1, [sp, #12]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	bfbb      	ittet	lt
 8016aa6:	425b      	neglt	r3, r3
 8016aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8016aac:	9307      	strge	r3, [sp, #28]
 8016aae:	9307      	strlt	r3, [sp, #28]
 8016ab0:	bfb8      	it	lt
 8016ab2:	9204      	strlt	r2, [sp, #16]
 8016ab4:	7823      	ldrb	r3, [r4, #0]
 8016ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8016ab8:	d10c      	bne.n	8016ad4 <_svfiprintf_r+0x130>
 8016aba:	7863      	ldrb	r3, [r4, #1]
 8016abc:	2b2a      	cmp	r3, #42	; 0x2a
 8016abe:	d135      	bne.n	8016b2c <_svfiprintf_r+0x188>
 8016ac0:	9b03      	ldr	r3, [sp, #12]
 8016ac2:	1d1a      	adds	r2, r3, #4
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	9203      	str	r2, [sp, #12]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	bfb8      	it	lt
 8016acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ad0:	3402      	adds	r4, #2
 8016ad2:	9305      	str	r3, [sp, #20]
 8016ad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016ba0 <_svfiprintf_r+0x1fc>
 8016ad8:	7821      	ldrb	r1, [r4, #0]
 8016ada:	2203      	movs	r2, #3
 8016adc:	4650      	mov	r0, sl
 8016ade:	f7e9 fb7f 	bl	80001e0 <memchr>
 8016ae2:	b140      	cbz	r0, 8016af6 <_svfiprintf_r+0x152>
 8016ae4:	2340      	movs	r3, #64	; 0x40
 8016ae6:	eba0 000a 	sub.w	r0, r0, sl
 8016aea:	fa03 f000 	lsl.w	r0, r3, r0
 8016aee:	9b04      	ldr	r3, [sp, #16]
 8016af0:	4303      	orrs	r3, r0
 8016af2:	3401      	adds	r4, #1
 8016af4:	9304      	str	r3, [sp, #16]
 8016af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016afa:	4826      	ldr	r0, [pc, #152]	; (8016b94 <_svfiprintf_r+0x1f0>)
 8016afc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b00:	2206      	movs	r2, #6
 8016b02:	f7e9 fb6d 	bl	80001e0 <memchr>
 8016b06:	2800      	cmp	r0, #0
 8016b08:	d038      	beq.n	8016b7c <_svfiprintf_r+0x1d8>
 8016b0a:	4b23      	ldr	r3, [pc, #140]	; (8016b98 <_svfiprintf_r+0x1f4>)
 8016b0c:	bb1b      	cbnz	r3, 8016b56 <_svfiprintf_r+0x1b2>
 8016b0e:	9b03      	ldr	r3, [sp, #12]
 8016b10:	3307      	adds	r3, #7
 8016b12:	f023 0307 	bic.w	r3, r3, #7
 8016b16:	3308      	adds	r3, #8
 8016b18:	9303      	str	r3, [sp, #12]
 8016b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b1c:	4433      	add	r3, r6
 8016b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8016b20:	e767      	b.n	80169f2 <_svfiprintf_r+0x4e>
 8016b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8016b26:	460c      	mov	r4, r1
 8016b28:	2001      	movs	r0, #1
 8016b2a:	e7a5      	b.n	8016a78 <_svfiprintf_r+0xd4>
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	3401      	adds	r4, #1
 8016b30:	9305      	str	r3, [sp, #20]
 8016b32:	4619      	mov	r1, r3
 8016b34:	f04f 0c0a 	mov.w	ip, #10
 8016b38:	4620      	mov	r0, r4
 8016b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b3e:	3a30      	subs	r2, #48	; 0x30
 8016b40:	2a09      	cmp	r2, #9
 8016b42:	d903      	bls.n	8016b4c <_svfiprintf_r+0x1a8>
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d0c5      	beq.n	8016ad4 <_svfiprintf_r+0x130>
 8016b48:	9105      	str	r1, [sp, #20]
 8016b4a:	e7c3      	b.n	8016ad4 <_svfiprintf_r+0x130>
 8016b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b50:	4604      	mov	r4, r0
 8016b52:	2301      	movs	r3, #1
 8016b54:	e7f0      	b.n	8016b38 <_svfiprintf_r+0x194>
 8016b56:	ab03      	add	r3, sp, #12
 8016b58:	9300      	str	r3, [sp, #0]
 8016b5a:	462a      	mov	r2, r5
 8016b5c:	4b0f      	ldr	r3, [pc, #60]	; (8016b9c <_svfiprintf_r+0x1f8>)
 8016b5e:	a904      	add	r1, sp, #16
 8016b60:	4638      	mov	r0, r7
 8016b62:	f7fc f8c7 	bl	8012cf4 <_printf_float>
 8016b66:	1c42      	adds	r2, r0, #1
 8016b68:	4606      	mov	r6, r0
 8016b6a:	d1d6      	bne.n	8016b1a <_svfiprintf_r+0x176>
 8016b6c:	89ab      	ldrh	r3, [r5, #12]
 8016b6e:	065b      	lsls	r3, r3, #25
 8016b70:	f53f af2c 	bmi.w	80169cc <_svfiprintf_r+0x28>
 8016b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b76:	b01d      	add	sp, #116	; 0x74
 8016b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b7c:	ab03      	add	r3, sp, #12
 8016b7e:	9300      	str	r3, [sp, #0]
 8016b80:	462a      	mov	r2, r5
 8016b82:	4b06      	ldr	r3, [pc, #24]	; (8016b9c <_svfiprintf_r+0x1f8>)
 8016b84:	a904      	add	r1, sp, #16
 8016b86:	4638      	mov	r0, r7
 8016b88:	f7fc fb58 	bl	801323c <_printf_i>
 8016b8c:	e7eb      	b.n	8016b66 <_svfiprintf_r+0x1c2>
 8016b8e:	bf00      	nop
 8016b90:	0801a4fc 	.word	0x0801a4fc
 8016b94:	0801a506 	.word	0x0801a506
 8016b98:	08012cf5 	.word	0x08012cf5
 8016b9c:	080168ed 	.word	0x080168ed
 8016ba0:	0801a502 	.word	0x0801a502

08016ba4 <_sungetc_r>:
 8016ba4:	b538      	push	{r3, r4, r5, lr}
 8016ba6:	1c4b      	adds	r3, r1, #1
 8016ba8:	4614      	mov	r4, r2
 8016baa:	d103      	bne.n	8016bb4 <_sungetc_r+0x10>
 8016bac:	f04f 35ff 	mov.w	r5, #4294967295
 8016bb0:	4628      	mov	r0, r5
 8016bb2:	bd38      	pop	{r3, r4, r5, pc}
 8016bb4:	8993      	ldrh	r3, [r2, #12]
 8016bb6:	f023 0320 	bic.w	r3, r3, #32
 8016bba:	8193      	strh	r3, [r2, #12]
 8016bbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016bbe:	6852      	ldr	r2, [r2, #4]
 8016bc0:	b2cd      	uxtb	r5, r1
 8016bc2:	b18b      	cbz	r3, 8016be8 <_sungetc_r+0x44>
 8016bc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016bc6:	4293      	cmp	r3, r2
 8016bc8:	dd08      	ble.n	8016bdc <_sungetc_r+0x38>
 8016bca:	6823      	ldr	r3, [r4, #0]
 8016bcc:	1e5a      	subs	r2, r3, #1
 8016bce:	6022      	str	r2, [r4, #0]
 8016bd0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016bd4:	6863      	ldr	r3, [r4, #4]
 8016bd6:	3301      	adds	r3, #1
 8016bd8:	6063      	str	r3, [r4, #4]
 8016bda:	e7e9      	b.n	8016bb0 <_sungetc_r+0xc>
 8016bdc:	4621      	mov	r1, r4
 8016bde:	f000 fbf5 	bl	80173cc <__submore>
 8016be2:	2800      	cmp	r0, #0
 8016be4:	d0f1      	beq.n	8016bca <_sungetc_r+0x26>
 8016be6:	e7e1      	b.n	8016bac <_sungetc_r+0x8>
 8016be8:	6921      	ldr	r1, [r4, #16]
 8016bea:	6823      	ldr	r3, [r4, #0]
 8016bec:	b151      	cbz	r1, 8016c04 <_sungetc_r+0x60>
 8016bee:	4299      	cmp	r1, r3
 8016bf0:	d208      	bcs.n	8016c04 <_sungetc_r+0x60>
 8016bf2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016bf6:	42a9      	cmp	r1, r5
 8016bf8:	d104      	bne.n	8016c04 <_sungetc_r+0x60>
 8016bfa:	3b01      	subs	r3, #1
 8016bfc:	3201      	adds	r2, #1
 8016bfe:	6023      	str	r3, [r4, #0]
 8016c00:	6062      	str	r2, [r4, #4]
 8016c02:	e7d5      	b.n	8016bb0 <_sungetc_r+0xc>
 8016c04:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8016c0e:	2303      	movs	r3, #3
 8016c10:	63a3      	str	r3, [r4, #56]	; 0x38
 8016c12:	4623      	mov	r3, r4
 8016c14:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016c18:	6023      	str	r3, [r4, #0]
 8016c1a:	2301      	movs	r3, #1
 8016c1c:	e7dc      	b.n	8016bd8 <_sungetc_r+0x34>

08016c1e <__ssrefill_r>:
 8016c1e:	b510      	push	{r4, lr}
 8016c20:	460c      	mov	r4, r1
 8016c22:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016c24:	b169      	cbz	r1, 8016c42 <__ssrefill_r+0x24>
 8016c26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c2a:	4299      	cmp	r1, r3
 8016c2c:	d001      	beq.n	8016c32 <__ssrefill_r+0x14>
 8016c2e:	f7ff fdb3 	bl	8016798 <_free_r>
 8016c32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016c34:	6063      	str	r3, [r4, #4]
 8016c36:	2000      	movs	r0, #0
 8016c38:	6360      	str	r0, [r4, #52]	; 0x34
 8016c3a:	b113      	cbz	r3, 8016c42 <__ssrefill_r+0x24>
 8016c3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016c3e:	6023      	str	r3, [r4, #0]
 8016c40:	bd10      	pop	{r4, pc}
 8016c42:	6923      	ldr	r3, [r4, #16]
 8016c44:	6023      	str	r3, [r4, #0]
 8016c46:	2300      	movs	r3, #0
 8016c48:	6063      	str	r3, [r4, #4]
 8016c4a:	89a3      	ldrh	r3, [r4, #12]
 8016c4c:	f043 0320 	orr.w	r3, r3, #32
 8016c50:	81a3      	strh	r3, [r4, #12]
 8016c52:	f04f 30ff 	mov.w	r0, #4294967295
 8016c56:	e7f3      	b.n	8016c40 <__ssrefill_r+0x22>

08016c58 <__ssvfiscanf_r>:
 8016c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c5c:	460c      	mov	r4, r1
 8016c5e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016c62:	2100      	movs	r1, #0
 8016c64:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8016c68:	49b2      	ldr	r1, [pc, #712]	; (8016f34 <__ssvfiscanf_r+0x2dc>)
 8016c6a:	91a0      	str	r1, [sp, #640]	; 0x280
 8016c6c:	f10d 0804 	add.w	r8, sp, #4
 8016c70:	49b1      	ldr	r1, [pc, #708]	; (8016f38 <__ssvfiscanf_r+0x2e0>)
 8016c72:	4fb2      	ldr	r7, [pc, #712]	; (8016f3c <__ssvfiscanf_r+0x2e4>)
 8016c74:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8016f40 <__ssvfiscanf_r+0x2e8>
 8016c78:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016c7c:	4606      	mov	r6, r0
 8016c7e:	91a1      	str	r1, [sp, #644]	; 0x284
 8016c80:	9300      	str	r3, [sp, #0]
 8016c82:	f892 a000 	ldrb.w	sl, [r2]
 8016c86:	f1ba 0f00 	cmp.w	sl, #0
 8016c8a:	f000 8151 	beq.w	8016f30 <__ssvfiscanf_r+0x2d8>
 8016c8e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8016c92:	f013 0308 	ands.w	r3, r3, #8
 8016c96:	f102 0501 	add.w	r5, r2, #1
 8016c9a:	d019      	beq.n	8016cd0 <__ssvfiscanf_r+0x78>
 8016c9c:	6863      	ldr	r3, [r4, #4]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	dd0f      	ble.n	8016cc2 <__ssvfiscanf_r+0x6a>
 8016ca2:	6823      	ldr	r3, [r4, #0]
 8016ca4:	781a      	ldrb	r2, [r3, #0]
 8016ca6:	5cba      	ldrb	r2, [r7, r2]
 8016ca8:	0712      	lsls	r2, r2, #28
 8016caa:	d401      	bmi.n	8016cb0 <__ssvfiscanf_r+0x58>
 8016cac:	462a      	mov	r2, r5
 8016cae:	e7e8      	b.n	8016c82 <__ssvfiscanf_r+0x2a>
 8016cb0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016cb2:	3201      	adds	r2, #1
 8016cb4:	9245      	str	r2, [sp, #276]	; 0x114
 8016cb6:	6862      	ldr	r2, [r4, #4]
 8016cb8:	3301      	adds	r3, #1
 8016cba:	3a01      	subs	r2, #1
 8016cbc:	6062      	str	r2, [r4, #4]
 8016cbe:	6023      	str	r3, [r4, #0]
 8016cc0:	e7ec      	b.n	8016c9c <__ssvfiscanf_r+0x44>
 8016cc2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016cc4:	4621      	mov	r1, r4
 8016cc6:	4630      	mov	r0, r6
 8016cc8:	4798      	blx	r3
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	d0e9      	beq.n	8016ca2 <__ssvfiscanf_r+0x4a>
 8016cce:	e7ed      	b.n	8016cac <__ssvfiscanf_r+0x54>
 8016cd0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8016cd4:	f040 8083 	bne.w	8016dde <__ssvfiscanf_r+0x186>
 8016cd8:	9341      	str	r3, [sp, #260]	; 0x104
 8016cda:	9343      	str	r3, [sp, #268]	; 0x10c
 8016cdc:	7853      	ldrb	r3, [r2, #1]
 8016cde:	2b2a      	cmp	r3, #42	; 0x2a
 8016ce0:	bf02      	ittt	eq
 8016ce2:	2310      	moveq	r3, #16
 8016ce4:	1c95      	addeq	r5, r2, #2
 8016ce6:	9341      	streq	r3, [sp, #260]	; 0x104
 8016ce8:	220a      	movs	r2, #10
 8016cea:	46ab      	mov	fp, r5
 8016cec:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8016cf0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8016cf4:	2b09      	cmp	r3, #9
 8016cf6:	d91d      	bls.n	8016d34 <__ssvfiscanf_r+0xdc>
 8016cf8:	4891      	ldr	r0, [pc, #580]	; (8016f40 <__ssvfiscanf_r+0x2e8>)
 8016cfa:	2203      	movs	r2, #3
 8016cfc:	f7e9 fa70 	bl	80001e0 <memchr>
 8016d00:	b140      	cbz	r0, 8016d14 <__ssvfiscanf_r+0xbc>
 8016d02:	2301      	movs	r3, #1
 8016d04:	eba0 0009 	sub.w	r0, r0, r9
 8016d08:	fa03 f000 	lsl.w	r0, r3, r0
 8016d0c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016d0e:	4318      	orrs	r0, r3
 8016d10:	9041      	str	r0, [sp, #260]	; 0x104
 8016d12:	465d      	mov	r5, fp
 8016d14:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016d18:	2b78      	cmp	r3, #120	; 0x78
 8016d1a:	d806      	bhi.n	8016d2a <__ssvfiscanf_r+0xd2>
 8016d1c:	2b57      	cmp	r3, #87	; 0x57
 8016d1e:	d810      	bhi.n	8016d42 <__ssvfiscanf_r+0xea>
 8016d20:	2b25      	cmp	r3, #37	; 0x25
 8016d22:	d05c      	beq.n	8016dde <__ssvfiscanf_r+0x186>
 8016d24:	d856      	bhi.n	8016dd4 <__ssvfiscanf_r+0x17c>
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d074      	beq.n	8016e14 <__ssvfiscanf_r+0x1bc>
 8016d2a:	2303      	movs	r3, #3
 8016d2c:	9347      	str	r3, [sp, #284]	; 0x11c
 8016d2e:	230a      	movs	r3, #10
 8016d30:	9342      	str	r3, [sp, #264]	; 0x108
 8016d32:	e081      	b.n	8016e38 <__ssvfiscanf_r+0x1e0>
 8016d34:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016d36:	fb02 1303 	mla	r3, r2, r3, r1
 8016d3a:	3b30      	subs	r3, #48	; 0x30
 8016d3c:	9343      	str	r3, [sp, #268]	; 0x10c
 8016d3e:	465d      	mov	r5, fp
 8016d40:	e7d3      	b.n	8016cea <__ssvfiscanf_r+0x92>
 8016d42:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8016d46:	2a20      	cmp	r2, #32
 8016d48:	d8ef      	bhi.n	8016d2a <__ssvfiscanf_r+0xd2>
 8016d4a:	a101      	add	r1, pc, #4	; (adr r1, 8016d50 <__ssvfiscanf_r+0xf8>)
 8016d4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016d50:	08016e23 	.word	0x08016e23
 8016d54:	08016d2b 	.word	0x08016d2b
 8016d58:	08016d2b 	.word	0x08016d2b
 8016d5c:	08016e81 	.word	0x08016e81
 8016d60:	08016d2b 	.word	0x08016d2b
 8016d64:	08016d2b 	.word	0x08016d2b
 8016d68:	08016d2b 	.word	0x08016d2b
 8016d6c:	08016d2b 	.word	0x08016d2b
 8016d70:	08016d2b 	.word	0x08016d2b
 8016d74:	08016d2b 	.word	0x08016d2b
 8016d78:	08016d2b 	.word	0x08016d2b
 8016d7c:	08016e97 	.word	0x08016e97
 8016d80:	08016e6d 	.word	0x08016e6d
 8016d84:	08016ddb 	.word	0x08016ddb
 8016d88:	08016ddb 	.word	0x08016ddb
 8016d8c:	08016ddb 	.word	0x08016ddb
 8016d90:	08016d2b 	.word	0x08016d2b
 8016d94:	08016e71 	.word	0x08016e71
 8016d98:	08016d2b 	.word	0x08016d2b
 8016d9c:	08016d2b 	.word	0x08016d2b
 8016da0:	08016d2b 	.word	0x08016d2b
 8016da4:	08016d2b 	.word	0x08016d2b
 8016da8:	08016ea7 	.word	0x08016ea7
 8016dac:	08016e79 	.word	0x08016e79
 8016db0:	08016e1b 	.word	0x08016e1b
 8016db4:	08016d2b 	.word	0x08016d2b
 8016db8:	08016d2b 	.word	0x08016d2b
 8016dbc:	08016ea3 	.word	0x08016ea3
 8016dc0:	08016d2b 	.word	0x08016d2b
 8016dc4:	08016e6d 	.word	0x08016e6d
 8016dc8:	08016d2b 	.word	0x08016d2b
 8016dcc:	08016d2b 	.word	0x08016d2b
 8016dd0:	08016e23 	.word	0x08016e23
 8016dd4:	3b45      	subs	r3, #69	; 0x45
 8016dd6:	2b02      	cmp	r3, #2
 8016dd8:	d8a7      	bhi.n	8016d2a <__ssvfiscanf_r+0xd2>
 8016dda:	2305      	movs	r3, #5
 8016ddc:	e02b      	b.n	8016e36 <__ssvfiscanf_r+0x1de>
 8016dde:	6863      	ldr	r3, [r4, #4]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	dd0d      	ble.n	8016e00 <__ssvfiscanf_r+0x1a8>
 8016de4:	6823      	ldr	r3, [r4, #0]
 8016de6:	781a      	ldrb	r2, [r3, #0]
 8016de8:	4552      	cmp	r2, sl
 8016dea:	f040 80a1 	bne.w	8016f30 <__ssvfiscanf_r+0x2d8>
 8016dee:	3301      	adds	r3, #1
 8016df0:	6862      	ldr	r2, [r4, #4]
 8016df2:	6023      	str	r3, [r4, #0]
 8016df4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016df6:	3a01      	subs	r2, #1
 8016df8:	3301      	adds	r3, #1
 8016dfa:	6062      	str	r2, [r4, #4]
 8016dfc:	9345      	str	r3, [sp, #276]	; 0x114
 8016dfe:	e755      	b.n	8016cac <__ssvfiscanf_r+0x54>
 8016e00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016e02:	4621      	mov	r1, r4
 8016e04:	4630      	mov	r0, r6
 8016e06:	4798      	blx	r3
 8016e08:	2800      	cmp	r0, #0
 8016e0a:	d0eb      	beq.n	8016de4 <__ssvfiscanf_r+0x18c>
 8016e0c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016e0e:	2800      	cmp	r0, #0
 8016e10:	f040 8084 	bne.w	8016f1c <__ssvfiscanf_r+0x2c4>
 8016e14:	f04f 30ff 	mov.w	r0, #4294967295
 8016e18:	e086      	b.n	8016f28 <__ssvfiscanf_r+0x2d0>
 8016e1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016e1c:	f042 0220 	orr.w	r2, r2, #32
 8016e20:	9241      	str	r2, [sp, #260]	; 0x104
 8016e22:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016e28:	9241      	str	r2, [sp, #260]	; 0x104
 8016e2a:	2210      	movs	r2, #16
 8016e2c:	2b6f      	cmp	r3, #111	; 0x6f
 8016e2e:	9242      	str	r2, [sp, #264]	; 0x108
 8016e30:	bf34      	ite	cc
 8016e32:	2303      	movcc	r3, #3
 8016e34:	2304      	movcs	r3, #4
 8016e36:	9347      	str	r3, [sp, #284]	; 0x11c
 8016e38:	6863      	ldr	r3, [r4, #4]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	dd41      	ble.n	8016ec2 <__ssvfiscanf_r+0x26a>
 8016e3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016e40:	0659      	lsls	r1, r3, #25
 8016e42:	d404      	bmi.n	8016e4e <__ssvfiscanf_r+0x1f6>
 8016e44:	6823      	ldr	r3, [r4, #0]
 8016e46:	781a      	ldrb	r2, [r3, #0]
 8016e48:	5cba      	ldrb	r2, [r7, r2]
 8016e4a:	0712      	lsls	r2, r2, #28
 8016e4c:	d440      	bmi.n	8016ed0 <__ssvfiscanf_r+0x278>
 8016e4e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016e50:	2b02      	cmp	r3, #2
 8016e52:	dc4f      	bgt.n	8016ef4 <__ssvfiscanf_r+0x29c>
 8016e54:	466b      	mov	r3, sp
 8016e56:	4622      	mov	r2, r4
 8016e58:	a941      	add	r1, sp, #260	; 0x104
 8016e5a:	4630      	mov	r0, r6
 8016e5c:	f000 f874 	bl	8016f48 <_scanf_chars>
 8016e60:	2801      	cmp	r0, #1
 8016e62:	d065      	beq.n	8016f30 <__ssvfiscanf_r+0x2d8>
 8016e64:	2802      	cmp	r0, #2
 8016e66:	f47f af21 	bne.w	8016cac <__ssvfiscanf_r+0x54>
 8016e6a:	e7cf      	b.n	8016e0c <__ssvfiscanf_r+0x1b4>
 8016e6c:	220a      	movs	r2, #10
 8016e6e:	e7dd      	b.n	8016e2c <__ssvfiscanf_r+0x1d4>
 8016e70:	2300      	movs	r3, #0
 8016e72:	9342      	str	r3, [sp, #264]	; 0x108
 8016e74:	2303      	movs	r3, #3
 8016e76:	e7de      	b.n	8016e36 <__ssvfiscanf_r+0x1de>
 8016e78:	2308      	movs	r3, #8
 8016e7a:	9342      	str	r3, [sp, #264]	; 0x108
 8016e7c:	2304      	movs	r3, #4
 8016e7e:	e7da      	b.n	8016e36 <__ssvfiscanf_r+0x1de>
 8016e80:	4629      	mov	r1, r5
 8016e82:	4640      	mov	r0, r8
 8016e84:	f000 f9d8 	bl	8017238 <__sccl>
 8016e88:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e8e:	9341      	str	r3, [sp, #260]	; 0x104
 8016e90:	4605      	mov	r5, r0
 8016e92:	2301      	movs	r3, #1
 8016e94:	e7cf      	b.n	8016e36 <__ssvfiscanf_r+0x1de>
 8016e96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e9c:	9341      	str	r3, [sp, #260]	; 0x104
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	e7c9      	b.n	8016e36 <__ssvfiscanf_r+0x1de>
 8016ea2:	2302      	movs	r3, #2
 8016ea4:	e7c7      	b.n	8016e36 <__ssvfiscanf_r+0x1de>
 8016ea6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016ea8:	06c3      	lsls	r3, r0, #27
 8016eaa:	f53f aeff 	bmi.w	8016cac <__ssvfiscanf_r+0x54>
 8016eae:	9b00      	ldr	r3, [sp, #0]
 8016eb0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016eb2:	1d19      	adds	r1, r3, #4
 8016eb4:	9100      	str	r1, [sp, #0]
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	07c0      	lsls	r0, r0, #31
 8016eba:	bf4c      	ite	mi
 8016ebc:	801a      	strhmi	r2, [r3, #0]
 8016ebe:	601a      	strpl	r2, [r3, #0]
 8016ec0:	e6f4      	b.n	8016cac <__ssvfiscanf_r+0x54>
 8016ec2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016ec4:	4621      	mov	r1, r4
 8016ec6:	4630      	mov	r0, r6
 8016ec8:	4798      	blx	r3
 8016eca:	2800      	cmp	r0, #0
 8016ecc:	d0b7      	beq.n	8016e3e <__ssvfiscanf_r+0x1e6>
 8016ece:	e79d      	b.n	8016e0c <__ssvfiscanf_r+0x1b4>
 8016ed0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016ed2:	3201      	adds	r2, #1
 8016ed4:	9245      	str	r2, [sp, #276]	; 0x114
 8016ed6:	6862      	ldr	r2, [r4, #4]
 8016ed8:	3a01      	subs	r2, #1
 8016eda:	2a00      	cmp	r2, #0
 8016edc:	6062      	str	r2, [r4, #4]
 8016ede:	dd02      	ble.n	8016ee6 <__ssvfiscanf_r+0x28e>
 8016ee0:	3301      	adds	r3, #1
 8016ee2:	6023      	str	r3, [r4, #0]
 8016ee4:	e7ae      	b.n	8016e44 <__ssvfiscanf_r+0x1ec>
 8016ee6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016ee8:	4621      	mov	r1, r4
 8016eea:	4630      	mov	r0, r6
 8016eec:	4798      	blx	r3
 8016eee:	2800      	cmp	r0, #0
 8016ef0:	d0a8      	beq.n	8016e44 <__ssvfiscanf_r+0x1ec>
 8016ef2:	e78b      	b.n	8016e0c <__ssvfiscanf_r+0x1b4>
 8016ef4:	2b04      	cmp	r3, #4
 8016ef6:	dc06      	bgt.n	8016f06 <__ssvfiscanf_r+0x2ae>
 8016ef8:	466b      	mov	r3, sp
 8016efa:	4622      	mov	r2, r4
 8016efc:	a941      	add	r1, sp, #260	; 0x104
 8016efe:	4630      	mov	r0, r6
 8016f00:	f000 f87a 	bl	8016ff8 <_scanf_i>
 8016f04:	e7ac      	b.n	8016e60 <__ssvfiscanf_r+0x208>
 8016f06:	4b0f      	ldr	r3, [pc, #60]	; (8016f44 <__ssvfiscanf_r+0x2ec>)
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	f43f aecf 	beq.w	8016cac <__ssvfiscanf_r+0x54>
 8016f0e:	466b      	mov	r3, sp
 8016f10:	4622      	mov	r2, r4
 8016f12:	a941      	add	r1, sp, #260	; 0x104
 8016f14:	4630      	mov	r0, r6
 8016f16:	f7fc fab7 	bl	8013488 <_scanf_float>
 8016f1a:	e7a1      	b.n	8016e60 <__ssvfiscanf_r+0x208>
 8016f1c:	89a3      	ldrh	r3, [r4, #12]
 8016f1e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016f22:	bf18      	it	ne
 8016f24:	f04f 30ff 	movne.w	r0, #4294967295
 8016f28:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8016f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f30:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016f32:	e7f9      	b.n	8016f28 <__ssvfiscanf_r+0x2d0>
 8016f34:	08016ba5 	.word	0x08016ba5
 8016f38:	08016c1f 	.word	0x08016c1f
 8016f3c:	0801a129 	.word	0x0801a129
 8016f40:	0801a502 	.word	0x0801a502
 8016f44:	08013489 	.word	0x08013489

08016f48 <_scanf_chars>:
 8016f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f4c:	4615      	mov	r5, r2
 8016f4e:	688a      	ldr	r2, [r1, #8]
 8016f50:	4680      	mov	r8, r0
 8016f52:	460c      	mov	r4, r1
 8016f54:	b932      	cbnz	r2, 8016f64 <_scanf_chars+0x1c>
 8016f56:	698a      	ldr	r2, [r1, #24]
 8016f58:	2a00      	cmp	r2, #0
 8016f5a:	bf0c      	ite	eq
 8016f5c:	2201      	moveq	r2, #1
 8016f5e:	f04f 32ff 	movne.w	r2, #4294967295
 8016f62:	608a      	str	r2, [r1, #8]
 8016f64:	6822      	ldr	r2, [r4, #0]
 8016f66:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8016ff4 <_scanf_chars+0xac>
 8016f6a:	06d1      	lsls	r1, r2, #27
 8016f6c:	bf5f      	itttt	pl
 8016f6e:	681a      	ldrpl	r2, [r3, #0]
 8016f70:	1d11      	addpl	r1, r2, #4
 8016f72:	6019      	strpl	r1, [r3, #0]
 8016f74:	6816      	ldrpl	r6, [r2, #0]
 8016f76:	2700      	movs	r7, #0
 8016f78:	69a0      	ldr	r0, [r4, #24]
 8016f7a:	b188      	cbz	r0, 8016fa0 <_scanf_chars+0x58>
 8016f7c:	2801      	cmp	r0, #1
 8016f7e:	d107      	bne.n	8016f90 <_scanf_chars+0x48>
 8016f80:	682b      	ldr	r3, [r5, #0]
 8016f82:	781a      	ldrb	r2, [r3, #0]
 8016f84:	6963      	ldr	r3, [r4, #20]
 8016f86:	5c9b      	ldrb	r3, [r3, r2]
 8016f88:	b953      	cbnz	r3, 8016fa0 <_scanf_chars+0x58>
 8016f8a:	bb27      	cbnz	r7, 8016fd6 <_scanf_chars+0x8e>
 8016f8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f90:	2802      	cmp	r0, #2
 8016f92:	d120      	bne.n	8016fd6 <_scanf_chars+0x8e>
 8016f94:	682b      	ldr	r3, [r5, #0]
 8016f96:	781b      	ldrb	r3, [r3, #0]
 8016f98:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016f9c:	071b      	lsls	r3, r3, #28
 8016f9e:	d41a      	bmi.n	8016fd6 <_scanf_chars+0x8e>
 8016fa0:	6823      	ldr	r3, [r4, #0]
 8016fa2:	06da      	lsls	r2, r3, #27
 8016fa4:	bf5e      	ittt	pl
 8016fa6:	682b      	ldrpl	r3, [r5, #0]
 8016fa8:	781b      	ldrbpl	r3, [r3, #0]
 8016faa:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016fae:	682a      	ldr	r2, [r5, #0]
 8016fb0:	686b      	ldr	r3, [r5, #4]
 8016fb2:	3201      	adds	r2, #1
 8016fb4:	602a      	str	r2, [r5, #0]
 8016fb6:	68a2      	ldr	r2, [r4, #8]
 8016fb8:	3b01      	subs	r3, #1
 8016fba:	3a01      	subs	r2, #1
 8016fbc:	606b      	str	r3, [r5, #4]
 8016fbe:	3701      	adds	r7, #1
 8016fc0:	60a2      	str	r2, [r4, #8]
 8016fc2:	b142      	cbz	r2, 8016fd6 <_scanf_chars+0x8e>
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	dcd7      	bgt.n	8016f78 <_scanf_chars+0x30>
 8016fc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016fcc:	4629      	mov	r1, r5
 8016fce:	4640      	mov	r0, r8
 8016fd0:	4798      	blx	r3
 8016fd2:	2800      	cmp	r0, #0
 8016fd4:	d0d0      	beq.n	8016f78 <_scanf_chars+0x30>
 8016fd6:	6823      	ldr	r3, [r4, #0]
 8016fd8:	f013 0310 	ands.w	r3, r3, #16
 8016fdc:	d105      	bne.n	8016fea <_scanf_chars+0xa2>
 8016fde:	68e2      	ldr	r2, [r4, #12]
 8016fe0:	3201      	adds	r2, #1
 8016fe2:	60e2      	str	r2, [r4, #12]
 8016fe4:	69a2      	ldr	r2, [r4, #24]
 8016fe6:	b102      	cbz	r2, 8016fea <_scanf_chars+0xa2>
 8016fe8:	7033      	strb	r3, [r6, #0]
 8016fea:	6923      	ldr	r3, [r4, #16]
 8016fec:	441f      	add	r7, r3
 8016fee:	6127      	str	r7, [r4, #16]
 8016ff0:	2000      	movs	r0, #0
 8016ff2:	e7cb      	b.n	8016f8c <_scanf_chars+0x44>
 8016ff4:	0801a129 	.word	0x0801a129

08016ff8 <_scanf_i>:
 8016ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ffc:	4698      	mov	r8, r3
 8016ffe:	4b74      	ldr	r3, [pc, #464]	; (80171d0 <_scanf_i+0x1d8>)
 8017000:	460c      	mov	r4, r1
 8017002:	4682      	mov	sl, r0
 8017004:	4616      	mov	r6, r2
 8017006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801700a:	b087      	sub	sp, #28
 801700c:	ab03      	add	r3, sp, #12
 801700e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017012:	4b70      	ldr	r3, [pc, #448]	; (80171d4 <_scanf_i+0x1dc>)
 8017014:	69a1      	ldr	r1, [r4, #24]
 8017016:	4a70      	ldr	r2, [pc, #448]	; (80171d8 <_scanf_i+0x1e0>)
 8017018:	2903      	cmp	r1, #3
 801701a:	bf18      	it	ne
 801701c:	461a      	movne	r2, r3
 801701e:	68a3      	ldr	r3, [r4, #8]
 8017020:	9201      	str	r2, [sp, #4]
 8017022:	1e5a      	subs	r2, r3, #1
 8017024:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017028:	bf88      	it	hi
 801702a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801702e:	4627      	mov	r7, r4
 8017030:	bf82      	ittt	hi
 8017032:	eb03 0905 	addhi.w	r9, r3, r5
 8017036:	f240 135d 	movwhi	r3, #349	; 0x15d
 801703a:	60a3      	strhi	r3, [r4, #8]
 801703c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017040:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017044:	bf98      	it	ls
 8017046:	f04f 0900 	movls.w	r9, #0
 801704a:	6023      	str	r3, [r4, #0]
 801704c:	463d      	mov	r5, r7
 801704e:	f04f 0b00 	mov.w	fp, #0
 8017052:	6831      	ldr	r1, [r6, #0]
 8017054:	ab03      	add	r3, sp, #12
 8017056:	7809      	ldrb	r1, [r1, #0]
 8017058:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801705c:	2202      	movs	r2, #2
 801705e:	f7e9 f8bf 	bl	80001e0 <memchr>
 8017062:	b328      	cbz	r0, 80170b0 <_scanf_i+0xb8>
 8017064:	f1bb 0f01 	cmp.w	fp, #1
 8017068:	d159      	bne.n	801711e <_scanf_i+0x126>
 801706a:	6862      	ldr	r2, [r4, #4]
 801706c:	b92a      	cbnz	r2, 801707a <_scanf_i+0x82>
 801706e:	6822      	ldr	r2, [r4, #0]
 8017070:	2308      	movs	r3, #8
 8017072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017076:	6063      	str	r3, [r4, #4]
 8017078:	6022      	str	r2, [r4, #0]
 801707a:	6822      	ldr	r2, [r4, #0]
 801707c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017080:	6022      	str	r2, [r4, #0]
 8017082:	68a2      	ldr	r2, [r4, #8]
 8017084:	1e51      	subs	r1, r2, #1
 8017086:	60a1      	str	r1, [r4, #8]
 8017088:	b192      	cbz	r2, 80170b0 <_scanf_i+0xb8>
 801708a:	6832      	ldr	r2, [r6, #0]
 801708c:	1c51      	adds	r1, r2, #1
 801708e:	6031      	str	r1, [r6, #0]
 8017090:	7812      	ldrb	r2, [r2, #0]
 8017092:	f805 2b01 	strb.w	r2, [r5], #1
 8017096:	6872      	ldr	r2, [r6, #4]
 8017098:	3a01      	subs	r2, #1
 801709a:	2a00      	cmp	r2, #0
 801709c:	6072      	str	r2, [r6, #4]
 801709e:	dc07      	bgt.n	80170b0 <_scanf_i+0xb8>
 80170a0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80170a4:	4631      	mov	r1, r6
 80170a6:	4650      	mov	r0, sl
 80170a8:	4790      	blx	r2
 80170aa:	2800      	cmp	r0, #0
 80170ac:	f040 8085 	bne.w	80171ba <_scanf_i+0x1c2>
 80170b0:	f10b 0b01 	add.w	fp, fp, #1
 80170b4:	f1bb 0f03 	cmp.w	fp, #3
 80170b8:	d1cb      	bne.n	8017052 <_scanf_i+0x5a>
 80170ba:	6863      	ldr	r3, [r4, #4]
 80170bc:	b90b      	cbnz	r3, 80170c2 <_scanf_i+0xca>
 80170be:	230a      	movs	r3, #10
 80170c0:	6063      	str	r3, [r4, #4]
 80170c2:	6863      	ldr	r3, [r4, #4]
 80170c4:	4945      	ldr	r1, [pc, #276]	; (80171dc <_scanf_i+0x1e4>)
 80170c6:	6960      	ldr	r0, [r4, #20]
 80170c8:	1ac9      	subs	r1, r1, r3
 80170ca:	f000 f8b5 	bl	8017238 <__sccl>
 80170ce:	f04f 0b00 	mov.w	fp, #0
 80170d2:	68a3      	ldr	r3, [r4, #8]
 80170d4:	6822      	ldr	r2, [r4, #0]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d03d      	beq.n	8017156 <_scanf_i+0x15e>
 80170da:	6831      	ldr	r1, [r6, #0]
 80170dc:	6960      	ldr	r0, [r4, #20]
 80170de:	f891 c000 	ldrb.w	ip, [r1]
 80170e2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80170e6:	2800      	cmp	r0, #0
 80170e8:	d035      	beq.n	8017156 <_scanf_i+0x15e>
 80170ea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80170ee:	d124      	bne.n	801713a <_scanf_i+0x142>
 80170f0:	0510      	lsls	r0, r2, #20
 80170f2:	d522      	bpl.n	801713a <_scanf_i+0x142>
 80170f4:	f10b 0b01 	add.w	fp, fp, #1
 80170f8:	f1b9 0f00 	cmp.w	r9, #0
 80170fc:	d003      	beq.n	8017106 <_scanf_i+0x10e>
 80170fe:	3301      	adds	r3, #1
 8017100:	f109 39ff 	add.w	r9, r9, #4294967295
 8017104:	60a3      	str	r3, [r4, #8]
 8017106:	6873      	ldr	r3, [r6, #4]
 8017108:	3b01      	subs	r3, #1
 801710a:	2b00      	cmp	r3, #0
 801710c:	6073      	str	r3, [r6, #4]
 801710e:	dd1b      	ble.n	8017148 <_scanf_i+0x150>
 8017110:	6833      	ldr	r3, [r6, #0]
 8017112:	3301      	adds	r3, #1
 8017114:	6033      	str	r3, [r6, #0]
 8017116:	68a3      	ldr	r3, [r4, #8]
 8017118:	3b01      	subs	r3, #1
 801711a:	60a3      	str	r3, [r4, #8]
 801711c:	e7d9      	b.n	80170d2 <_scanf_i+0xda>
 801711e:	f1bb 0f02 	cmp.w	fp, #2
 8017122:	d1ae      	bne.n	8017082 <_scanf_i+0x8a>
 8017124:	6822      	ldr	r2, [r4, #0]
 8017126:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801712a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801712e:	d1bf      	bne.n	80170b0 <_scanf_i+0xb8>
 8017130:	2310      	movs	r3, #16
 8017132:	6063      	str	r3, [r4, #4]
 8017134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017138:	e7a2      	b.n	8017080 <_scanf_i+0x88>
 801713a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801713e:	6022      	str	r2, [r4, #0]
 8017140:	780b      	ldrb	r3, [r1, #0]
 8017142:	f805 3b01 	strb.w	r3, [r5], #1
 8017146:	e7de      	b.n	8017106 <_scanf_i+0x10e>
 8017148:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801714c:	4631      	mov	r1, r6
 801714e:	4650      	mov	r0, sl
 8017150:	4798      	blx	r3
 8017152:	2800      	cmp	r0, #0
 8017154:	d0df      	beq.n	8017116 <_scanf_i+0x11e>
 8017156:	6823      	ldr	r3, [r4, #0]
 8017158:	05d9      	lsls	r1, r3, #23
 801715a:	d50d      	bpl.n	8017178 <_scanf_i+0x180>
 801715c:	42bd      	cmp	r5, r7
 801715e:	d909      	bls.n	8017174 <_scanf_i+0x17c>
 8017160:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017164:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017168:	4632      	mov	r2, r6
 801716a:	4650      	mov	r0, sl
 801716c:	4798      	blx	r3
 801716e:	f105 39ff 	add.w	r9, r5, #4294967295
 8017172:	464d      	mov	r5, r9
 8017174:	42bd      	cmp	r5, r7
 8017176:	d028      	beq.n	80171ca <_scanf_i+0x1d2>
 8017178:	6822      	ldr	r2, [r4, #0]
 801717a:	f012 0210 	ands.w	r2, r2, #16
 801717e:	d113      	bne.n	80171a8 <_scanf_i+0x1b0>
 8017180:	702a      	strb	r2, [r5, #0]
 8017182:	6863      	ldr	r3, [r4, #4]
 8017184:	9e01      	ldr	r6, [sp, #4]
 8017186:	4639      	mov	r1, r7
 8017188:	4650      	mov	r0, sl
 801718a:	47b0      	blx	r6
 801718c:	f8d8 3000 	ldr.w	r3, [r8]
 8017190:	6821      	ldr	r1, [r4, #0]
 8017192:	1d1a      	adds	r2, r3, #4
 8017194:	f8c8 2000 	str.w	r2, [r8]
 8017198:	f011 0f20 	tst.w	r1, #32
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	d00f      	beq.n	80171c0 <_scanf_i+0x1c8>
 80171a0:	6018      	str	r0, [r3, #0]
 80171a2:	68e3      	ldr	r3, [r4, #12]
 80171a4:	3301      	adds	r3, #1
 80171a6:	60e3      	str	r3, [r4, #12]
 80171a8:	1bed      	subs	r5, r5, r7
 80171aa:	44ab      	add	fp, r5
 80171ac:	6925      	ldr	r5, [r4, #16]
 80171ae:	445d      	add	r5, fp
 80171b0:	6125      	str	r5, [r4, #16]
 80171b2:	2000      	movs	r0, #0
 80171b4:	b007      	add	sp, #28
 80171b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171ba:	f04f 0b00 	mov.w	fp, #0
 80171be:	e7ca      	b.n	8017156 <_scanf_i+0x15e>
 80171c0:	07ca      	lsls	r2, r1, #31
 80171c2:	bf4c      	ite	mi
 80171c4:	8018      	strhmi	r0, [r3, #0]
 80171c6:	6018      	strpl	r0, [r3, #0]
 80171c8:	e7eb      	b.n	80171a2 <_scanf_i+0x1aa>
 80171ca:	2001      	movs	r0, #1
 80171cc:	e7f2      	b.n	80171b4 <_scanf_i+0x1bc>
 80171ce:	bf00      	nop
 80171d0:	080186c4 	.word	0x080186c4
 80171d4:	080173c9 	.word	0x080173c9
 80171d8:	08014781 	.word	0x08014781
 80171dc:	0801a526 	.word	0x0801a526

080171e0 <_read_r>:
 80171e0:	b538      	push	{r3, r4, r5, lr}
 80171e2:	4d07      	ldr	r5, [pc, #28]	; (8017200 <_read_r+0x20>)
 80171e4:	4604      	mov	r4, r0
 80171e6:	4608      	mov	r0, r1
 80171e8:	4611      	mov	r1, r2
 80171ea:	2200      	movs	r2, #0
 80171ec:	602a      	str	r2, [r5, #0]
 80171ee:	461a      	mov	r2, r3
 80171f0:	f7ec f844 	bl	800327c <_read>
 80171f4:	1c43      	adds	r3, r0, #1
 80171f6:	d102      	bne.n	80171fe <_read_r+0x1e>
 80171f8:	682b      	ldr	r3, [r5, #0]
 80171fa:	b103      	cbz	r3, 80171fe <_read_r+0x1e>
 80171fc:	6023      	str	r3, [r4, #0]
 80171fe:	bd38      	pop	{r3, r4, r5, pc}
 8017200:	2000337c 	.word	0x2000337c
 8017204:	00000000 	.word	0x00000000

08017208 <nan>:
 8017208:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017210 <nan+0x8>
 801720c:	4770      	bx	lr
 801720e:	bf00      	nop
 8017210:	00000000 	.word	0x00000000
 8017214:	7ff80000 	.word	0x7ff80000

08017218 <_sbrk_r>:
 8017218:	b538      	push	{r3, r4, r5, lr}
 801721a:	4d06      	ldr	r5, [pc, #24]	; (8017234 <_sbrk_r+0x1c>)
 801721c:	2300      	movs	r3, #0
 801721e:	4604      	mov	r4, r0
 8017220:	4608      	mov	r0, r1
 8017222:	602b      	str	r3, [r5, #0]
 8017224:	f7ec f898 	bl	8003358 <_sbrk>
 8017228:	1c43      	adds	r3, r0, #1
 801722a:	d102      	bne.n	8017232 <_sbrk_r+0x1a>
 801722c:	682b      	ldr	r3, [r5, #0]
 801722e:	b103      	cbz	r3, 8017232 <_sbrk_r+0x1a>
 8017230:	6023      	str	r3, [r4, #0]
 8017232:	bd38      	pop	{r3, r4, r5, pc}
 8017234:	2000337c 	.word	0x2000337c

08017238 <__sccl>:
 8017238:	b570      	push	{r4, r5, r6, lr}
 801723a:	780b      	ldrb	r3, [r1, #0]
 801723c:	4604      	mov	r4, r0
 801723e:	2b5e      	cmp	r3, #94	; 0x5e
 8017240:	bf0b      	itete	eq
 8017242:	784b      	ldrbeq	r3, [r1, #1]
 8017244:	1c48      	addne	r0, r1, #1
 8017246:	1c88      	addeq	r0, r1, #2
 8017248:	2200      	movne	r2, #0
 801724a:	bf08      	it	eq
 801724c:	2201      	moveq	r2, #1
 801724e:	1e61      	subs	r1, r4, #1
 8017250:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017254:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017258:	42a9      	cmp	r1, r5
 801725a:	d1fb      	bne.n	8017254 <__sccl+0x1c>
 801725c:	b90b      	cbnz	r3, 8017262 <__sccl+0x2a>
 801725e:	3801      	subs	r0, #1
 8017260:	bd70      	pop	{r4, r5, r6, pc}
 8017262:	f082 0101 	eor.w	r1, r2, #1
 8017266:	54e1      	strb	r1, [r4, r3]
 8017268:	1c42      	adds	r2, r0, #1
 801726a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801726e:	2d2d      	cmp	r5, #45	; 0x2d
 8017270:	f102 36ff 	add.w	r6, r2, #4294967295
 8017274:	4610      	mov	r0, r2
 8017276:	d006      	beq.n	8017286 <__sccl+0x4e>
 8017278:	2d5d      	cmp	r5, #93	; 0x5d
 801727a:	d0f1      	beq.n	8017260 <__sccl+0x28>
 801727c:	b90d      	cbnz	r5, 8017282 <__sccl+0x4a>
 801727e:	4630      	mov	r0, r6
 8017280:	e7ee      	b.n	8017260 <__sccl+0x28>
 8017282:	462b      	mov	r3, r5
 8017284:	e7ef      	b.n	8017266 <__sccl+0x2e>
 8017286:	7816      	ldrb	r6, [r2, #0]
 8017288:	2e5d      	cmp	r6, #93	; 0x5d
 801728a:	d0fa      	beq.n	8017282 <__sccl+0x4a>
 801728c:	42b3      	cmp	r3, r6
 801728e:	dcf8      	bgt.n	8017282 <__sccl+0x4a>
 8017290:	4618      	mov	r0, r3
 8017292:	3001      	adds	r0, #1
 8017294:	4286      	cmp	r6, r0
 8017296:	5421      	strb	r1, [r4, r0]
 8017298:	dcfb      	bgt.n	8017292 <__sccl+0x5a>
 801729a:	43d8      	mvns	r0, r3
 801729c:	4430      	add	r0, r6
 801729e:	1c5d      	adds	r5, r3, #1
 80172a0:	42b3      	cmp	r3, r6
 80172a2:	bfa8      	it	ge
 80172a4:	2000      	movge	r0, #0
 80172a6:	182b      	adds	r3, r5, r0
 80172a8:	3202      	adds	r2, #2
 80172aa:	e7de      	b.n	801726a <__sccl+0x32>

080172ac <strncmp>:
 80172ac:	b510      	push	{r4, lr}
 80172ae:	b16a      	cbz	r2, 80172cc <strncmp+0x20>
 80172b0:	3901      	subs	r1, #1
 80172b2:	1884      	adds	r4, r0, r2
 80172b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80172b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80172bc:	4293      	cmp	r3, r2
 80172be:	d103      	bne.n	80172c8 <strncmp+0x1c>
 80172c0:	42a0      	cmp	r0, r4
 80172c2:	d001      	beq.n	80172c8 <strncmp+0x1c>
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d1f5      	bne.n	80172b4 <strncmp+0x8>
 80172c8:	1a98      	subs	r0, r3, r2
 80172ca:	bd10      	pop	{r4, pc}
 80172cc:	4610      	mov	r0, r2
 80172ce:	e7fc      	b.n	80172ca <strncmp+0x1e>

080172d0 <_strtoul_l.isra.0>:
 80172d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80172d4:	4e3b      	ldr	r6, [pc, #236]	; (80173c4 <_strtoul_l.isra.0+0xf4>)
 80172d6:	4686      	mov	lr, r0
 80172d8:	468c      	mov	ip, r1
 80172da:	4660      	mov	r0, ip
 80172dc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80172e0:	5da5      	ldrb	r5, [r4, r6]
 80172e2:	f015 0508 	ands.w	r5, r5, #8
 80172e6:	d1f8      	bne.n	80172da <_strtoul_l.isra.0+0xa>
 80172e8:	2c2d      	cmp	r4, #45	; 0x2d
 80172ea:	d134      	bne.n	8017356 <_strtoul_l.isra.0+0x86>
 80172ec:	f89c 4000 	ldrb.w	r4, [ip]
 80172f0:	f04f 0801 	mov.w	r8, #1
 80172f4:	f100 0c02 	add.w	ip, r0, #2
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d05e      	beq.n	80173ba <_strtoul_l.isra.0+0xea>
 80172fc:	2b10      	cmp	r3, #16
 80172fe:	d10c      	bne.n	801731a <_strtoul_l.isra.0+0x4a>
 8017300:	2c30      	cmp	r4, #48	; 0x30
 8017302:	d10a      	bne.n	801731a <_strtoul_l.isra.0+0x4a>
 8017304:	f89c 0000 	ldrb.w	r0, [ip]
 8017308:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801730c:	2858      	cmp	r0, #88	; 0x58
 801730e:	d14f      	bne.n	80173b0 <_strtoul_l.isra.0+0xe0>
 8017310:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8017314:	2310      	movs	r3, #16
 8017316:	f10c 0c02 	add.w	ip, ip, #2
 801731a:	f04f 37ff 	mov.w	r7, #4294967295
 801731e:	2500      	movs	r5, #0
 8017320:	fbb7 f7f3 	udiv	r7, r7, r3
 8017324:	fb03 f907 	mul.w	r9, r3, r7
 8017328:	ea6f 0909 	mvn.w	r9, r9
 801732c:	4628      	mov	r0, r5
 801732e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8017332:	2e09      	cmp	r6, #9
 8017334:	d818      	bhi.n	8017368 <_strtoul_l.isra.0+0x98>
 8017336:	4634      	mov	r4, r6
 8017338:	42a3      	cmp	r3, r4
 801733a:	dd24      	ble.n	8017386 <_strtoul_l.isra.0+0xb6>
 801733c:	2d00      	cmp	r5, #0
 801733e:	db1f      	blt.n	8017380 <_strtoul_l.isra.0+0xb0>
 8017340:	4287      	cmp	r7, r0
 8017342:	d31d      	bcc.n	8017380 <_strtoul_l.isra.0+0xb0>
 8017344:	d101      	bne.n	801734a <_strtoul_l.isra.0+0x7a>
 8017346:	45a1      	cmp	r9, r4
 8017348:	db1a      	blt.n	8017380 <_strtoul_l.isra.0+0xb0>
 801734a:	fb00 4003 	mla	r0, r0, r3, r4
 801734e:	2501      	movs	r5, #1
 8017350:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8017354:	e7eb      	b.n	801732e <_strtoul_l.isra.0+0x5e>
 8017356:	2c2b      	cmp	r4, #43	; 0x2b
 8017358:	bf08      	it	eq
 801735a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801735e:	46a8      	mov	r8, r5
 8017360:	bf08      	it	eq
 8017362:	f100 0c02 	addeq.w	ip, r0, #2
 8017366:	e7c7      	b.n	80172f8 <_strtoul_l.isra.0+0x28>
 8017368:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801736c:	2e19      	cmp	r6, #25
 801736e:	d801      	bhi.n	8017374 <_strtoul_l.isra.0+0xa4>
 8017370:	3c37      	subs	r4, #55	; 0x37
 8017372:	e7e1      	b.n	8017338 <_strtoul_l.isra.0+0x68>
 8017374:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8017378:	2e19      	cmp	r6, #25
 801737a:	d804      	bhi.n	8017386 <_strtoul_l.isra.0+0xb6>
 801737c:	3c57      	subs	r4, #87	; 0x57
 801737e:	e7db      	b.n	8017338 <_strtoul_l.isra.0+0x68>
 8017380:	f04f 35ff 	mov.w	r5, #4294967295
 8017384:	e7e4      	b.n	8017350 <_strtoul_l.isra.0+0x80>
 8017386:	2d00      	cmp	r5, #0
 8017388:	da07      	bge.n	801739a <_strtoul_l.isra.0+0xca>
 801738a:	2322      	movs	r3, #34	; 0x22
 801738c:	f8ce 3000 	str.w	r3, [lr]
 8017390:	f04f 30ff 	mov.w	r0, #4294967295
 8017394:	b942      	cbnz	r2, 80173a8 <_strtoul_l.isra.0+0xd8>
 8017396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801739a:	f1b8 0f00 	cmp.w	r8, #0
 801739e:	d000      	beq.n	80173a2 <_strtoul_l.isra.0+0xd2>
 80173a0:	4240      	negs	r0, r0
 80173a2:	2a00      	cmp	r2, #0
 80173a4:	d0f7      	beq.n	8017396 <_strtoul_l.isra.0+0xc6>
 80173a6:	b10d      	cbz	r5, 80173ac <_strtoul_l.isra.0+0xdc>
 80173a8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80173ac:	6011      	str	r1, [r2, #0]
 80173ae:	e7f2      	b.n	8017396 <_strtoul_l.isra.0+0xc6>
 80173b0:	2430      	movs	r4, #48	; 0x30
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d1b1      	bne.n	801731a <_strtoul_l.isra.0+0x4a>
 80173b6:	2308      	movs	r3, #8
 80173b8:	e7af      	b.n	801731a <_strtoul_l.isra.0+0x4a>
 80173ba:	2c30      	cmp	r4, #48	; 0x30
 80173bc:	d0a2      	beq.n	8017304 <_strtoul_l.isra.0+0x34>
 80173be:	230a      	movs	r3, #10
 80173c0:	e7ab      	b.n	801731a <_strtoul_l.isra.0+0x4a>
 80173c2:	bf00      	nop
 80173c4:	0801a129 	.word	0x0801a129

080173c8 <_strtoul_r>:
 80173c8:	f7ff bf82 	b.w	80172d0 <_strtoul_l.isra.0>

080173cc <__submore>:
 80173cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173d0:	460c      	mov	r4, r1
 80173d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80173d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80173d8:	4299      	cmp	r1, r3
 80173da:	d11d      	bne.n	8017418 <__submore+0x4c>
 80173dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80173e0:	f7ff fa2a 	bl	8016838 <_malloc_r>
 80173e4:	b918      	cbnz	r0, 80173ee <__submore+0x22>
 80173e6:	f04f 30ff 	mov.w	r0, #4294967295
 80173ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80173f2:	63a3      	str	r3, [r4, #56]	; 0x38
 80173f4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80173f8:	6360      	str	r0, [r4, #52]	; 0x34
 80173fa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80173fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017402:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017406:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801740a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801740e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017412:	6020      	str	r0, [r4, #0]
 8017414:	2000      	movs	r0, #0
 8017416:	e7e8      	b.n	80173ea <__submore+0x1e>
 8017418:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801741a:	0077      	lsls	r7, r6, #1
 801741c:	463a      	mov	r2, r7
 801741e:	f000 fa59 	bl	80178d4 <_realloc_r>
 8017422:	4605      	mov	r5, r0
 8017424:	2800      	cmp	r0, #0
 8017426:	d0de      	beq.n	80173e6 <__submore+0x1a>
 8017428:	eb00 0806 	add.w	r8, r0, r6
 801742c:	4601      	mov	r1, r0
 801742e:	4632      	mov	r2, r6
 8017430:	4640      	mov	r0, r8
 8017432:	f7fe fcd9 	bl	8015de8 <memcpy>
 8017436:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801743a:	f8c4 8000 	str.w	r8, [r4]
 801743e:	e7e9      	b.n	8017414 <__submore+0x48>

08017440 <__swbuf_r>:
 8017440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017442:	460e      	mov	r6, r1
 8017444:	4614      	mov	r4, r2
 8017446:	4605      	mov	r5, r0
 8017448:	b118      	cbz	r0, 8017452 <__swbuf_r+0x12>
 801744a:	6983      	ldr	r3, [r0, #24]
 801744c:	b90b      	cbnz	r3, 8017452 <__swbuf_r+0x12>
 801744e:	f7fe f88b 	bl	8015568 <__sinit>
 8017452:	4b21      	ldr	r3, [pc, #132]	; (80174d8 <__swbuf_r+0x98>)
 8017454:	429c      	cmp	r4, r3
 8017456:	d12b      	bne.n	80174b0 <__swbuf_r+0x70>
 8017458:	686c      	ldr	r4, [r5, #4]
 801745a:	69a3      	ldr	r3, [r4, #24]
 801745c:	60a3      	str	r3, [r4, #8]
 801745e:	89a3      	ldrh	r3, [r4, #12]
 8017460:	071a      	lsls	r2, r3, #28
 8017462:	d52f      	bpl.n	80174c4 <__swbuf_r+0x84>
 8017464:	6923      	ldr	r3, [r4, #16]
 8017466:	b36b      	cbz	r3, 80174c4 <__swbuf_r+0x84>
 8017468:	6923      	ldr	r3, [r4, #16]
 801746a:	6820      	ldr	r0, [r4, #0]
 801746c:	1ac0      	subs	r0, r0, r3
 801746e:	6963      	ldr	r3, [r4, #20]
 8017470:	b2f6      	uxtb	r6, r6
 8017472:	4283      	cmp	r3, r0
 8017474:	4637      	mov	r7, r6
 8017476:	dc04      	bgt.n	8017482 <__swbuf_r+0x42>
 8017478:	4621      	mov	r1, r4
 801747a:	4628      	mov	r0, r5
 801747c:	f000 f952 	bl	8017724 <_fflush_r>
 8017480:	bb30      	cbnz	r0, 80174d0 <__swbuf_r+0x90>
 8017482:	68a3      	ldr	r3, [r4, #8]
 8017484:	3b01      	subs	r3, #1
 8017486:	60a3      	str	r3, [r4, #8]
 8017488:	6823      	ldr	r3, [r4, #0]
 801748a:	1c5a      	adds	r2, r3, #1
 801748c:	6022      	str	r2, [r4, #0]
 801748e:	701e      	strb	r6, [r3, #0]
 8017490:	6963      	ldr	r3, [r4, #20]
 8017492:	3001      	adds	r0, #1
 8017494:	4283      	cmp	r3, r0
 8017496:	d004      	beq.n	80174a2 <__swbuf_r+0x62>
 8017498:	89a3      	ldrh	r3, [r4, #12]
 801749a:	07db      	lsls	r3, r3, #31
 801749c:	d506      	bpl.n	80174ac <__swbuf_r+0x6c>
 801749e:	2e0a      	cmp	r6, #10
 80174a0:	d104      	bne.n	80174ac <__swbuf_r+0x6c>
 80174a2:	4621      	mov	r1, r4
 80174a4:	4628      	mov	r0, r5
 80174a6:	f000 f93d 	bl	8017724 <_fflush_r>
 80174aa:	b988      	cbnz	r0, 80174d0 <__swbuf_r+0x90>
 80174ac:	4638      	mov	r0, r7
 80174ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174b0:	4b0a      	ldr	r3, [pc, #40]	; (80174dc <__swbuf_r+0x9c>)
 80174b2:	429c      	cmp	r4, r3
 80174b4:	d101      	bne.n	80174ba <__swbuf_r+0x7a>
 80174b6:	68ac      	ldr	r4, [r5, #8]
 80174b8:	e7cf      	b.n	801745a <__swbuf_r+0x1a>
 80174ba:	4b09      	ldr	r3, [pc, #36]	; (80174e0 <__swbuf_r+0xa0>)
 80174bc:	429c      	cmp	r4, r3
 80174be:	bf08      	it	eq
 80174c0:	68ec      	ldreq	r4, [r5, #12]
 80174c2:	e7ca      	b.n	801745a <__swbuf_r+0x1a>
 80174c4:	4621      	mov	r1, r4
 80174c6:	4628      	mov	r0, r5
 80174c8:	f000 f81a 	bl	8017500 <__swsetup_r>
 80174cc:	2800      	cmp	r0, #0
 80174ce:	d0cb      	beq.n	8017468 <__swbuf_r+0x28>
 80174d0:	f04f 37ff 	mov.w	r7, #4294967295
 80174d4:	e7ea      	b.n	80174ac <__swbuf_r+0x6c>
 80174d6:	bf00      	nop
 80174d8:	0801a2e0 	.word	0x0801a2e0
 80174dc:	0801a300 	.word	0x0801a300
 80174e0:	0801a2c0 	.word	0x0801a2c0

080174e4 <__ascii_wctomb>:
 80174e4:	b149      	cbz	r1, 80174fa <__ascii_wctomb+0x16>
 80174e6:	2aff      	cmp	r2, #255	; 0xff
 80174e8:	bf85      	ittet	hi
 80174ea:	238a      	movhi	r3, #138	; 0x8a
 80174ec:	6003      	strhi	r3, [r0, #0]
 80174ee:	700a      	strbls	r2, [r1, #0]
 80174f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80174f4:	bf98      	it	ls
 80174f6:	2001      	movls	r0, #1
 80174f8:	4770      	bx	lr
 80174fa:	4608      	mov	r0, r1
 80174fc:	4770      	bx	lr
	...

08017500 <__swsetup_r>:
 8017500:	4b32      	ldr	r3, [pc, #200]	; (80175cc <__swsetup_r+0xcc>)
 8017502:	b570      	push	{r4, r5, r6, lr}
 8017504:	681d      	ldr	r5, [r3, #0]
 8017506:	4606      	mov	r6, r0
 8017508:	460c      	mov	r4, r1
 801750a:	b125      	cbz	r5, 8017516 <__swsetup_r+0x16>
 801750c:	69ab      	ldr	r3, [r5, #24]
 801750e:	b913      	cbnz	r3, 8017516 <__swsetup_r+0x16>
 8017510:	4628      	mov	r0, r5
 8017512:	f7fe f829 	bl	8015568 <__sinit>
 8017516:	4b2e      	ldr	r3, [pc, #184]	; (80175d0 <__swsetup_r+0xd0>)
 8017518:	429c      	cmp	r4, r3
 801751a:	d10f      	bne.n	801753c <__swsetup_r+0x3c>
 801751c:	686c      	ldr	r4, [r5, #4]
 801751e:	89a3      	ldrh	r3, [r4, #12]
 8017520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017524:	0719      	lsls	r1, r3, #28
 8017526:	d42c      	bmi.n	8017582 <__swsetup_r+0x82>
 8017528:	06dd      	lsls	r5, r3, #27
 801752a:	d411      	bmi.n	8017550 <__swsetup_r+0x50>
 801752c:	2309      	movs	r3, #9
 801752e:	6033      	str	r3, [r6, #0]
 8017530:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017534:	81a3      	strh	r3, [r4, #12]
 8017536:	f04f 30ff 	mov.w	r0, #4294967295
 801753a:	e03e      	b.n	80175ba <__swsetup_r+0xba>
 801753c:	4b25      	ldr	r3, [pc, #148]	; (80175d4 <__swsetup_r+0xd4>)
 801753e:	429c      	cmp	r4, r3
 8017540:	d101      	bne.n	8017546 <__swsetup_r+0x46>
 8017542:	68ac      	ldr	r4, [r5, #8]
 8017544:	e7eb      	b.n	801751e <__swsetup_r+0x1e>
 8017546:	4b24      	ldr	r3, [pc, #144]	; (80175d8 <__swsetup_r+0xd8>)
 8017548:	429c      	cmp	r4, r3
 801754a:	bf08      	it	eq
 801754c:	68ec      	ldreq	r4, [r5, #12]
 801754e:	e7e6      	b.n	801751e <__swsetup_r+0x1e>
 8017550:	0758      	lsls	r0, r3, #29
 8017552:	d512      	bpl.n	801757a <__swsetup_r+0x7a>
 8017554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017556:	b141      	cbz	r1, 801756a <__swsetup_r+0x6a>
 8017558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801755c:	4299      	cmp	r1, r3
 801755e:	d002      	beq.n	8017566 <__swsetup_r+0x66>
 8017560:	4630      	mov	r0, r6
 8017562:	f7ff f919 	bl	8016798 <_free_r>
 8017566:	2300      	movs	r3, #0
 8017568:	6363      	str	r3, [r4, #52]	; 0x34
 801756a:	89a3      	ldrh	r3, [r4, #12]
 801756c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017570:	81a3      	strh	r3, [r4, #12]
 8017572:	2300      	movs	r3, #0
 8017574:	6063      	str	r3, [r4, #4]
 8017576:	6923      	ldr	r3, [r4, #16]
 8017578:	6023      	str	r3, [r4, #0]
 801757a:	89a3      	ldrh	r3, [r4, #12]
 801757c:	f043 0308 	orr.w	r3, r3, #8
 8017580:	81a3      	strh	r3, [r4, #12]
 8017582:	6923      	ldr	r3, [r4, #16]
 8017584:	b94b      	cbnz	r3, 801759a <__swsetup_r+0x9a>
 8017586:	89a3      	ldrh	r3, [r4, #12]
 8017588:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801758c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017590:	d003      	beq.n	801759a <__swsetup_r+0x9a>
 8017592:	4621      	mov	r1, r4
 8017594:	4630      	mov	r0, r6
 8017596:	f000 f937 	bl	8017808 <__smakebuf_r>
 801759a:	89a0      	ldrh	r0, [r4, #12]
 801759c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80175a0:	f010 0301 	ands.w	r3, r0, #1
 80175a4:	d00a      	beq.n	80175bc <__swsetup_r+0xbc>
 80175a6:	2300      	movs	r3, #0
 80175a8:	60a3      	str	r3, [r4, #8]
 80175aa:	6963      	ldr	r3, [r4, #20]
 80175ac:	425b      	negs	r3, r3
 80175ae:	61a3      	str	r3, [r4, #24]
 80175b0:	6923      	ldr	r3, [r4, #16]
 80175b2:	b943      	cbnz	r3, 80175c6 <__swsetup_r+0xc6>
 80175b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80175b8:	d1ba      	bne.n	8017530 <__swsetup_r+0x30>
 80175ba:	bd70      	pop	{r4, r5, r6, pc}
 80175bc:	0781      	lsls	r1, r0, #30
 80175be:	bf58      	it	pl
 80175c0:	6963      	ldrpl	r3, [r4, #20]
 80175c2:	60a3      	str	r3, [r4, #8]
 80175c4:	e7f4      	b.n	80175b0 <__swsetup_r+0xb0>
 80175c6:	2000      	movs	r0, #0
 80175c8:	e7f7      	b.n	80175ba <__swsetup_r+0xba>
 80175ca:	bf00      	nop
 80175cc:	2000019c 	.word	0x2000019c
 80175d0:	0801a2e0 	.word	0x0801a2e0
 80175d4:	0801a300 	.word	0x0801a300
 80175d8:	0801a2c0 	.word	0x0801a2c0

080175dc <__assert_func>:
 80175dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80175de:	4614      	mov	r4, r2
 80175e0:	461a      	mov	r2, r3
 80175e2:	4b09      	ldr	r3, [pc, #36]	; (8017608 <__assert_func+0x2c>)
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	4605      	mov	r5, r0
 80175e8:	68d8      	ldr	r0, [r3, #12]
 80175ea:	b14c      	cbz	r4, 8017600 <__assert_func+0x24>
 80175ec:	4b07      	ldr	r3, [pc, #28]	; (801760c <__assert_func+0x30>)
 80175ee:	9100      	str	r1, [sp, #0]
 80175f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80175f4:	4906      	ldr	r1, [pc, #24]	; (8017610 <__assert_func+0x34>)
 80175f6:	462b      	mov	r3, r5
 80175f8:	f000 f8d0 	bl	801779c <fiprintf>
 80175fc:	f000 faea 	bl	8017bd4 <abort>
 8017600:	4b04      	ldr	r3, [pc, #16]	; (8017614 <__assert_func+0x38>)
 8017602:	461c      	mov	r4, r3
 8017604:	e7f3      	b.n	80175ee <__assert_func+0x12>
 8017606:	bf00      	nop
 8017608:	2000019c 	.word	0x2000019c
 801760c:	0801a528 	.word	0x0801a528
 8017610:	0801a535 	.word	0x0801a535
 8017614:	0801a563 	.word	0x0801a563

08017618 <__sflush_r>:
 8017618:	898a      	ldrh	r2, [r1, #12]
 801761a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801761e:	4605      	mov	r5, r0
 8017620:	0710      	lsls	r0, r2, #28
 8017622:	460c      	mov	r4, r1
 8017624:	d458      	bmi.n	80176d8 <__sflush_r+0xc0>
 8017626:	684b      	ldr	r3, [r1, #4]
 8017628:	2b00      	cmp	r3, #0
 801762a:	dc05      	bgt.n	8017638 <__sflush_r+0x20>
 801762c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801762e:	2b00      	cmp	r3, #0
 8017630:	dc02      	bgt.n	8017638 <__sflush_r+0x20>
 8017632:	2000      	movs	r0, #0
 8017634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017638:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801763a:	2e00      	cmp	r6, #0
 801763c:	d0f9      	beq.n	8017632 <__sflush_r+0x1a>
 801763e:	2300      	movs	r3, #0
 8017640:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017644:	682f      	ldr	r7, [r5, #0]
 8017646:	602b      	str	r3, [r5, #0]
 8017648:	d032      	beq.n	80176b0 <__sflush_r+0x98>
 801764a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801764c:	89a3      	ldrh	r3, [r4, #12]
 801764e:	075a      	lsls	r2, r3, #29
 8017650:	d505      	bpl.n	801765e <__sflush_r+0x46>
 8017652:	6863      	ldr	r3, [r4, #4]
 8017654:	1ac0      	subs	r0, r0, r3
 8017656:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017658:	b10b      	cbz	r3, 801765e <__sflush_r+0x46>
 801765a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801765c:	1ac0      	subs	r0, r0, r3
 801765e:	2300      	movs	r3, #0
 8017660:	4602      	mov	r2, r0
 8017662:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017664:	6a21      	ldr	r1, [r4, #32]
 8017666:	4628      	mov	r0, r5
 8017668:	47b0      	blx	r6
 801766a:	1c43      	adds	r3, r0, #1
 801766c:	89a3      	ldrh	r3, [r4, #12]
 801766e:	d106      	bne.n	801767e <__sflush_r+0x66>
 8017670:	6829      	ldr	r1, [r5, #0]
 8017672:	291d      	cmp	r1, #29
 8017674:	d82c      	bhi.n	80176d0 <__sflush_r+0xb8>
 8017676:	4a2a      	ldr	r2, [pc, #168]	; (8017720 <__sflush_r+0x108>)
 8017678:	40ca      	lsrs	r2, r1
 801767a:	07d6      	lsls	r6, r2, #31
 801767c:	d528      	bpl.n	80176d0 <__sflush_r+0xb8>
 801767e:	2200      	movs	r2, #0
 8017680:	6062      	str	r2, [r4, #4]
 8017682:	04d9      	lsls	r1, r3, #19
 8017684:	6922      	ldr	r2, [r4, #16]
 8017686:	6022      	str	r2, [r4, #0]
 8017688:	d504      	bpl.n	8017694 <__sflush_r+0x7c>
 801768a:	1c42      	adds	r2, r0, #1
 801768c:	d101      	bne.n	8017692 <__sflush_r+0x7a>
 801768e:	682b      	ldr	r3, [r5, #0]
 8017690:	b903      	cbnz	r3, 8017694 <__sflush_r+0x7c>
 8017692:	6560      	str	r0, [r4, #84]	; 0x54
 8017694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017696:	602f      	str	r7, [r5, #0]
 8017698:	2900      	cmp	r1, #0
 801769a:	d0ca      	beq.n	8017632 <__sflush_r+0x1a>
 801769c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176a0:	4299      	cmp	r1, r3
 80176a2:	d002      	beq.n	80176aa <__sflush_r+0x92>
 80176a4:	4628      	mov	r0, r5
 80176a6:	f7ff f877 	bl	8016798 <_free_r>
 80176aa:	2000      	movs	r0, #0
 80176ac:	6360      	str	r0, [r4, #52]	; 0x34
 80176ae:	e7c1      	b.n	8017634 <__sflush_r+0x1c>
 80176b0:	6a21      	ldr	r1, [r4, #32]
 80176b2:	2301      	movs	r3, #1
 80176b4:	4628      	mov	r0, r5
 80176b6:	47b0      	blx	r6
 80176b8:	1c41      	adds	r1, r0, #1
 80176ba:	d1c7      	bne.n	801764c <__sflush_r+0x34>
 80176bc:	682b      	ldr	r3, [r5, #0]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d0c4      	beq.n	801764c <__sflush_r+0x34>
 80176c2:	2b1d      	cmp	r3, #29
 80176c4:	d001      	beq.n	80176ca <__sflush_r+0xb2>
 80176c6:	2b16      	cmp	r3, #22
 80176c8:	d101      	bne.n	80176ce <__sflush_r+0xb6>
 80176ca:	602f      	str	r7, [r5, #0]
 80176cc:	e7b1      	b.n	8017632 <__sflush_r+0x1a>
 80176ce:	89a3      	ldrh	r3, [r4, #12]
 80176d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176d4:	81a3      	strh	r3, [r4, #12]
 80176d6:	e7ad      	b.n	8017634 <__sflush_r+0x1c>
 80176d8:	690f      	ldr	r7, [r1, #16]
 80176da:	2f00      	cmp	r7, #0
 80176dc:	d0a9      	beq.n	8017632 <__sflush_r+0x1a>
 80176de:	0793      	lsls	r3, r2, #30
 80176e0:	680e      	ldr	r6, [r1, #0]
 80176e2:	bf08      	it	eq
 80176e4:	694b      	ldreq	r3, [r1, #20]
 80176e6:	600f      	str	r7, [r1, #0]
 80176e8:	bf18      	it	ne
 80176ea:	2300      	movne	r3, #0
 80176ec:	eba6 0807 	sub.w	r8, r6, r7
 80176f0:	608b      	str	r3, [r1, #8]
 80176f2:	f1b8 0f00 	cmp.w	r8, #0
 80176f6:	dd9c      	ble.n	8017632 <__sflush_r+0x1a>
 80176f8:	6a21      	ldr	r1, [r4, #32]
 80176fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80176fc:	4643      	mov	r3, r8
 80176fe:	463a      	mov	r2, r7
 8017700:	4628      	mov	r0, r5
 8017702:	47b0      	blx	r6
 8017704:	2800      	cmp	r0, #0
 8017706:	dc06      	bgt.n	8017716 <__sflush_r+0xfe>
 8017708:	89a3      	ldrh	r3, [r4, #12]
 801770a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801770e:	81a3      	strh	r3, [r4, #12]
 8017710:	f04f 30ff 	mov.w	r0, #4294967295
 8017714:	e78e      	b.n	8017634 <__sflush_r+0x1c>
 8017716:	4407      	add	r7, r0
 8017718:	eba8 0800 	sub.w	r8, r8, r0
 801771c:	e7e9      	b.n	80176f2 <__sflush_r+0xda>
 801771e:	bf00      	nop
 8017720:	20400001 	.word	0x20400001

08017724 <_fflush_r>:
 8017724:	b538      	push	{r3, r4, r5, lr}
 8017726:	690b      	ldr	r3, [r1, #16]
 8017728:	4605      	mov	r5, r0
 801772a:	460c      	mov	r4, r1
 801772c:	b913      	cbnz	r3, 8017734 <_fflush_r+0x10>
 801772e:	2500      	movs	r5, #0
 8017730:	4628      	mov	r0, r5
 8017732:	bd38      	pop	{r3, r4, r5, pc}
 8017734:	b118      	cbz	r0, 801773e <_fflush_r+0x1a>
 8017736:	6983      	ldr	r3, [r0, #24]
 8017738:	b90b      	cbnz	r3, 801773e <_fflush_r+0x1a>
 801773a:	f7fd ff15 	bl	8015568 <__sinit>
 801773e:	4b14      	ldr	r3, [pc, #80]	; (8017790 <_fflush_r+0x6c>)
 8017740:	429c      	cmp	r4, r3
 8017742:	d11b      	bne.n	801777c <_fflush_r+0x58>
 8017744:	686c      	ldr	r4, [r5, #4]
 8017746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d0ef      	beq.n	801772e <_fflush_r+0xa>
 801774e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017750:	07d0      	lsls	r0, r2, #31
 8017752:	d404      	bmi.n	801775e <_fflush_r+0x3a>
 8017754:	0599      	lsls	r1, r3, #22
 8017756:	d402      	bmi.n	801775e <_fflush_r+0x3a>
 8017758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801775a:	f7fe fb16 	bl	8015d8a <__retarget_lock_acquire_recursive>
 801775e:	4628      	mov	r0, r5
 8017760:	4621      	mov	r1, r4
 8017762:	f7ff ff59 	bl	8017618 <__sflush_r>
 8017766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017768:	07da      	lsls	r2, r3, #31
 801776a:	4605      	mov	r5, r0
 801776c:	d4e0      	bmi.n	8017730 <_fflush_r+0xc>
 801776e:	89a3      	ldrh	r3, [r4, #12]
 8017770:	059b      	lsls	r3, r3, #22
 8017772:	d4dd      	bmi.n	8017730 <_fflush_r+0xc>
 8017774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017776:	f7fe fb09 	bl	8015d8c <__retarget_lock_release_recursive>
 801777a:	e7d9      	b.n	8017730 <_fflush_r+0xc>
 801777c:	4b05      	ldr	r3, [pc, #20]	; (8017794 <_fflush_r+0x70>)
 801777e:	429c      	cmp	r4, r3
 8017780:	d101      	bne.n	8017786 <_fflush_r+0x62>
 8017782:	68ac      	ldr	r4, [r5, #8]
 8017784:	e7df      	b.n	8017746 <_fflush_r+0x22>
 8017786:	4b04      	ldr	r3, [pc, #16]	; (8017798 <_fflush_r+0x74>)
 8017788:	429c      	cmp	r4, r3
 801778a:	bf08      	it	eq
 801778c:	68ec      	ldreq	r4, [r5, #12]
 801778e:	e7da      	b.n	8017746 <_fflush_r+0x22>
 8017790:	0801a2e0 	.word	0x0801a2e0
 8017794:	0801a300 	.word	0x0801a300
 8017798:	0801a2c0 	.word	0x0801a2c0

0801779c <fiprintf>:
 801779c:	b40e      	push	{r1, r2, r3}
 801779e:	b503      	push	{r0, r1, lr}
 80177a0:	4601      	mov	r1, r0
 80177a2:	ab03      	add	r3, sp, #12
 80177a4:	4805      	ldr	r0, [pc, #20]	; (80177bc <fiprintf+0x20>)
 80177a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80177aa:	6800      	ldr	r0, [r0, #0]
 80177ac:	9301      	str	r3, [sp, #4]
 80177ae:	f000 f8e1 	bl	8017974 <_vfiprintf_r>
 80177b2:	b002      	add	sp, #8
 80177b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80177b8:	b003      	add	sp, #12
 80177ba:	4770      	bx	lr
 80177bc:	2000019c 	.word	0x2000019c

080177c0 <__swhatbuf_r>:
 80177c0:	b570      	push	{r4, r5, r6, lr}
 80177c2:	460e      	mov	r6, r1
 80177c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80177c8:	2900      	cmp	r1, #0
 80177ca:	b096      	sub	sp, #88	; 0x58
 80177cc:	4614      	mov	r4, r2
 80177ce:	461d      	mov	r5, r3
 80177d0:	da07      	bge.n	80177e2 <__swhatbuf_r+0x22>
 80177d2:	2300      	movs	r3, #0
 80177d4:	602b      	str	r3, [r5, #0]
 80177d6:	89b3      	ldrh	r3, [r6, #12]
 80177d8:	061a      	lsls	r2, r3, #24
 80177da:	d410      	bmi.n	80177fe <__swhatbuf_r+0x3e>
 80177dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80177e0:	e00e      	b.n	8017800 <__swhatbuf_r+0x40>
 80177e2:	466a      	mov	r2, sp
 80177e4:	f000 f9fe 	bl	8017be4 <_fstat_r>
 80177e8:	2800      	cmp	r0, #0
 80177ea:	dbf2      	blt.n	80177d2 <__swhatbuf_r+0x12>
 80177ec:	9a01      	ldr	r2, [sp, #4]
 80177ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80177f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80177f6:	425a      	negs	r2, r3
 80177f8:	415a      	adcs	r2, r3
 80177fa:	602a      	str	r2, [r5, #0]
 80177fc:	e7ee      	b.n	80177dc <__swhatbuf_r+0x1c>
 80177fe:	2340      	movs	r3, #64	; 0x40
 8017800:	2000      	movs	r0, #0
 8017802:	6023      	str	r3, [r4, #0]
 8017804:	b016      	add	sp, #88	; 0x58
 8017806:	bd70      	pop	{r4, r5, r6, pc}

08017808 <__smakebuf_r>:
 8017808:	898b      	ldrh	r3, [r1, #12]
 801780a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801780c:	079d      	lsls	r5, r3, #30
 801780e:	4606      	mov	r6, r0
 8017810:	460c      	mov	r4, r1
 8017812:	d507      	bpl.n	8017824 <__smakebuf_r+0x1c>
 8017814:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017818:	6023      	str	r3, [r4, #0]
 801781a:	6123      	str	r3, [r4, #16]
 801781c:	2301      	movs	r3, #1
 801781e:	6163      	str	r3, [r4, #20]
 8017820:	b002      	add	sp, #8
 8017822:	bd70      	pop	{r4, r5, r6, pc}
 8017824:	ab01      	add	r3, sp, #4
 8017826:	466a      	mov	r2, sp
 8017828:	f7ff ffca 	bl	80177c0 <__swhatbuf_r>
 801782c:	9900      	ldr	r1, [sp, #0]
 801782e:	4605      	mov	r5, r0
 8017830:	4630      	mov	r0, r6
 8017832:	f7ff f801 	bl	8016838 <_malloc_r>
 8017836:	b948      	cbnz	r0, 801784c <__smakebuf_r+0x44>
 8017838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801783c:	059a      	lsls	r2, r3, #22
 801783e:	d4ef      	bmi.n	8017820 <__smakebuf_r+0x18>
 8017840:	f023 0303 	bic.w	r3, r3, #3
 8017844:	f043 0302 	orr.w	r3, r3, #2
 8017848:	81a3      	strh	r3, [r4, #12]
 801784a:	e7e3      	b.n	8017814 <__smakebuf_r+0xc>
 801784c:	4b0d      	ldr	r3, [pc, #52]	; (8017884 <__smakebuf_r+0x7c>)
 801784e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017850:	89a3      	ldrh	r3, [r4, #12]
 8017852:	6020      	str	r0, [r4, #0]
 8017854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017858:	81a3      	strh	r3, [r4, #12]
 801785a:	9b00      	ldr	r3, [sp, #0]
 801785c:	6163      	str	r3, [r4, #20]
 801785e:	9b01      	ldr	r3, [sp, #4]
 8017860:	6120      	str	r0, [r4, #16]
 8017862:	b15b      	cbz	r3, 801787c <__smakebuf_r+0x74>
 8017864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017868:	4630      	mov	r0, r6
 801786a:	f000 f9cd 	bl	8017c08 <_isatty_r>
 801786e:	b128      	cbz	r0, 801787c <__smakebuf_r+0x74>
 8017870:	89a3      	ldrh	r3, [r4, #12]
 8017872:	f023 0303 	bic.w	r3, r3, #3
 8017876:	f043 0301 	orr.w	r3, r3, #1
 801787a:	81a3      	strh	r3, [r4, #12]
 801787c:	89a0      	ldrh	r0, [r4, #12]
 801787e:	4305      	orrs	r5, r0
 8017880:	81a5      	strh	r5, [r4, #12]
 8017882:	e7cd      	b.n	8017820 <__smakebuf_r+0x18>
 8017884:	08015501 	.word	0x08015501

08017888 <memmove>:
 8017888:	4288      	cmp	r0, r1
 801788a:	b510      	push	{r4, lr}
 801788c:	eb01 0402 	add.w	r4, r1, r2
 8017890:	d902      	bls.n	8017898 <memmove+0x10>
 8017892:	4284      	cmp	r4, r0
 8017894:	4623      	mov	r3, r4
 8017896:	d807      	bhi.n	80178a8 <memmove+0x20>
 8017898:	1e43      	subs	r3, r0, #1
 801789a:	42a1      	cmp	r1, r4
 801789c:	d008      	beq.n	80178b0 <memmove+0x28>
 801789e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80178a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80178a6:	e7f8      	b.n	801789a <memmove+0x12>
 80178a8:	4402      	add	r2, r0
 80178aa:	4601      	mov	r1, r0
 80178ac:	428a      	cmp	r2, r1
 80178ae:	d100      	bne.n	80178b2 <memmove+0x2a>
 80178b0:	bd10      	pop	{r4, pc}
 80178b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80178b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80178ba:	e7f7      	b.n	80178ac <memmove+0x24>

080178bc <__malloc_lock>:
 80178bc:	4801      	ldr	r0, [pc, #4]	; (80178c4 <__malloc_lock+0x8>)
 80178be:	f7fe ba64 	b.w	8015d8a <__retarget_lock_acquire_recursive>
 80178c2:	bf00      	nop
 80178c4:	20003370 	.word	0x20003370

080178c8 <__malloc_unlock>:
 80178c8:	4801      	ldr	r0, [pc, #4]	; (80178d0 <__malloc_unlock+0x8>)
 80178ca:	f7fe ba5f 	b.w	8015d8c <__retarget_lock_release_recursive>
 80178ce:	bf00      	nop
 80178d0:	20003370 	.word	0x20003370

080178d4 <_realloc_r>:
 80178d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178d6:	4607      	mov	r7, r0
 80178d8:	4614      	mov	r4, r2
 80178da:	460e      	mov	r6, r1
 80178dc:	b921      	cbnz	r1, 80178e8 <_realloc_r+0x14>
 80178de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80178e2:	4611      	mov	r1, r2
 80178e4:	f7fe bfa8 	b.w	8016838 <_malloc_r>
 80178e8:	b922      	cbnz	r2, 80178f4 <_realloc_r+0x20>
 80178ea:	f7fe ff55 	bl	8016798 <_free_r>
 80178ee:	4625      	mov	r5, r4
 80178f0:	4628      	mov	r0, r5
 80178f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178f4:	f000 f998 	bl	8017c28 <_malloc_usable_size_r>
 80178f8:	42a0      	cmp	r0, r4
 80178fa:	d20f      	bcs.n	801791c <_realloc_r+0x48>
 80178fc:	4621      	mov	r1, r4
 80178fe:	4638      	mov	r0, r7
 8017900:	f7fe ff9a 	bl	8016838 <_malloc_r>
 8017904:	4605      	mov	r5, r0
 8017906:	2800      	cmp	r0, #0
 8017908:	d0f2      	beq.n	80178f0 <_realloc_r+0x1c>
 801790a:	4631      	mov	r1, r6
 801790c:	4622      	mov	r2, r4
 801790e:	f7fe fa6b 	bl	8015de8 <memcpy>
 8017912:	4631      	mov	r1, r6
 8017914:	4638      	mov	r0, r7
 8017916:	f7fe ff3f 	bl	8016798 <_free_r>
 801791a:	e7e9      	b.n	80178f0 <_realloc_r+0x1c>
 801791c:	4635      	mov	r5, r6
 801791e:	e7e7      	b.n	80178f0 <_realloc_r+0x1c>

08017920 <__sfputc_r>:
 8017920:	6893      	ldr	r3, [r2, #8]
 8017922:	3b01      	subs	r3, #1
 8017924:	2b00      	cmp	r3, #0
 8017926:	b410      	push	{r4}
 8017928:	6093      	str	r3, [r2, #8]
 801792a:	da08      	bge.n	801793e <__sfputc_r+0x1e>
 801792c:	6994      	ldr	r4, [r2, #24]
 801792e:	42a3      	cmp	r3, r4
 8017930:	db01      	blt.n	8017936 <__sfputc_r+0x16>
 8017932:	290a      	cmp	r1, #10
 8017934:	d103      	bne.n	801793e <__sfputc_r+0x1e>
 8017936:	f85d 4b04 	ldr.w	r4, [sp], #4
 801793a:	f7ff bd81 	b.w	8017440 <__swbuf_r>
 801793e:	6813      	ldr	r3, [r2, #0]
 8017940:	1c58      	adds	r0, r3, #1
 8017942:	6010      	str	r0, [r2, #0]
 8017944:	7019      	strb	r1, [r3, #0]
 8017946:	4608      	mov	r0, r1
 8017948:	f85d 4b04 	ldr.w	r4, [sp], #4
 801794c:	4770      	bx	lr

0801794e <__sfputs_r>:
 801794e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017950:	4606      	mov	r6, r0
 8017952:	460f      	mov	r7, r1
 8017954:	4614      	mov	r4, r2
 8017956:	18d5      	adds	r5, r2, r3
 8017958:	42ac      	cmp	r4, r5
 801795a:	d101      	bne.n	8017960 <__sfputs_r+0x12>
 801795c:	2000      	movs	r0, #0
 801795e:	e007      	b.n	8017970 <__sfputs_r+0x22>
 8017960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017964:	463a      	mov	r2, r7
 8017966:	4630      	mov	r0, r6
 8017968:	f7ff ffda 	bl	8017920 <__sfputc_r>
 801796c:	1c43      	adds	r3, r0, #1
 801796e:	d1f3      	bne.n	8017958 <__sfputs_r+0xa>
 8017970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017974 <_vfiprintf_r>:
 8017974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017978:	460d      	mov	r5, r1
 801797a:	b09d      	sub	sp, #116	; 0x74
 801797c:	4614      	mov	r4, r2
 801797e:	4698      	mov	r8, r3
 8017980:	4606      	mov	r6, r0
 8017982:	b118      	cbz	r0, 801798c <_vfiprintf_r+0x18>
 8017984:	6983      	ldr	r3, [r0, #24]
 8017986:	b90b      	cbnz	r3, 801798c <_vfiprintf_r+0x18>
 8017988:	f7fd fdee 	bl	8015568 <__sinit>
 801798c:	4b89      	ldr	r3, [pc, #548]	; (8017bb4 <_vfiprintf_r+0x240>)
 801798e:	429d      	cmp	r5, r3
 8017990:	d11b      	bne.n	80179ca <_vfiprintf_r+0x56>
 8017992:	6875      	ldr	r5, [r6, #4]
 8017994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017996:	07d9      	lsls	r1, r3, #31
 8017998:	d405      	bmi.n	80179a6 <_vfiprintf_r+0x32>
 801799a:	89ab      	ldrh	r3, [r5, #12]
 801799c:	059a      	lsls	r2, r3, #22
 801799e:	d402      	bmi.n	80179a6 <_vfiprintf_r+0x32>
 80179a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80179a2:	f7fe f9f2 	bl	8015d8a <__retarget_lock_acquire_recursive>
 80179a6:	89ab      	ldrh	r3, [r5, #12]
 80179a8:	071b      	lsls	r3, r3, #28
 80179aa:	d501      	bpl.n	80179b0 <_vfiprintf_r+0x3c>
 80179ac:	692b      	ldr	r3, [r5, #16]
 80179ae:	b9eb      	cbnz	r3, 80179ec <_vfiprintf_r+0x78>
 80179b0:	4629      	mov	r1, r5
 80179b2:	4630      	mov	r0, r6
 80179b4:	f7ff fda4 	bl	8017500 <__swsetup_r>
 80179b8:	b1c0      	cbz	r0, 80179ec <_vfiprintf_r+0x78>
 80179ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80179bc:	07dc      	lsls	r4, r3, #31
 80179be:	d50e      	bpl.n	80179de <_vfiprintf_r+0x6a>
 80179c0:	f04f 30ff 	mov.w	r0, #4294967295
 80179c4:	b01d      	add	sp, #116	; 0x74
 80179c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179ca:	4b7b      	ldr	r3, [pc, #492]	; (8017bb8 <_vfiprintf_r+0x244>)
 80179cc:	429d      	cmp	r5, r3
 80179ce:	d101      	bne.n	80179d4 <_vfiprintf_r+0x60>
 80179d0:	68b5      	ldr	r5, [r6, #8]
 80179d2:	e7df      	b.n	8017994 <_vfiprintf_r+0x20>
 80179d4:	4b79      	ldr	r3, [pc, #484]	; (8017bbc <_vfiprintf_r+0x248>)
 80179d6:	429d      	cmp	r5, r3
 80179d8:	bf08      	it	eq
 80179da:	68f5      	ldreq	r5, [r6, #12]
 80179dc:	e7da      	b.n	8017994 <_vfiprintf_r+0x20>
 80179de:	89ab      	ldrh	r3, [r5, #12]
 80179e0:	0598      	lsls	r0, r3, #22
 80179e2:	d4ed      	bmi.n	80179c0 <_vfiprintf_r+0x4c>
 80179e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80179e6:	f7fe f9d1 	bl	8015d8c <__retarget_lock_release_recursive>
 80179ea:	e7e9      	b.n	80179c0 <_vfiprintf_r+0x4c>
 80179ec:	2300      	movs	r3, #0
 80179ee:	9309      	str	r3, [sp, #36]	; 0x24
 80179f0:	2320      	movs	r3, #32
 80179f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80179f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80179fa:	2330      	movs	r3, #48	; 0x30
 80179fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017bc0 <_vfiprintf_r+0x24c>
 8017a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017a04:	f04f 0901 	mov.w	r9, #1
 8017a08:	4623      	mov	r3, r4
 8017a0a:	469a      	mov	sl, r3
 8017a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a10:	b10a      	cbz	r2, 8017a16 <_vfiprintf_r+0xa2>
 8017a12:	2a25      	cmp	r2, #37	; 0x25
 8017a14:	d1f9      	bne.n	8017a0a <_vfiprintf_r+0x96>
 8017a16:	ebba 0b04 	subs.w	fp, sl, r4
 8017a1a:	d00b      	beq.n	8017a34 <_vfiprintf_r+0xc0>
 8017a1c:	465b      	mov	r3, fp
 8017a1e:	4622      	mov	r2, r4
 8017a20:	4629      	mov	r1, r5
 8017a22:	4630      	mov	r0, r6
 8017a24:	f7ff ff93 	bl	801794e <__sfputs_r>
 8017a28:	3001      	adds	r0, #1
 8017a2a:	f000 80aa 	beq.w	8017b82 <_vfiprintf_r+0x20e>
 8017a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017a30:	445a      	add	r2, fp
 8017a32:	9209      	str	r2, [sp, #36]	; 0x24
 8017a34:	f89a 3000 	ldrb.w	r3, [sl]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	f000 80a2 	beq.w	8017b82 <_vfiprintf_r+0x20e>
 8017a3e:	2300      	movs	r3, #0
 8017a40:	f04f 32ff 	mov.w	r2, #4294967295
 8017a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017a48:	f10a 0a01 	add.w	sl, sl, #1
 8017a4c:	9304      	str	r3, [sp, #16]
 8017a4e:	9307      	str	r3, [sp, #28]
 8017a50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017a54:	931a      	str	r3, [sp, #104]	; 0x68
 8017a56:	4654      	mov	r4, sl
 8017a58:	2205      	movs	r2, #5
 8017a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a5e:	4858      	ldr	r0, [pc, #352]	; (8017bc0 <_vfiprintf_r+0x24c>)
 8017a60:	f7e8 fbbe 	bl	80001e0 <memchr>
 8017a64:	9a04      	ldr	r2, [sp, #16]
 8017a66:	b9d8      	cbnz	r0, 8017aa0 <_vfiprintf_r+0x12c>
 8017a68:	06d1      	lsls	r1, r2, #27
 8017a6a:	bf44      	itt	mi
 8017a6c:	2320      	movmi	r3, #32
 8017a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a72:	0713      	lsls	r3, r2, #28
 8017a74:	bf44      	itt	mi
 8017a76:	232b      	movmi	r3, #43	; 0x2b
 8017a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8017a80:	2b2a      	cmp	r3, #42	; 0x2a
 8017a82:	d015      	beq.n	8017ab0 <_vfiprintf_r+0x13c>
 8017a84:	9a07      	ldr	r2, [sp, #28]
 8017a86:	4654      	mov	r4, sl
 8017a88:	2000      	movs	r0, #0
 8017a8a:	f04f 0c0a 	mov.w	ip, #10
 8017a8e:	4621      	mov	r1, r4
 8017a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a94:	3b30      	subs	r3, #48	; 0x30
 8017a96:	2b09      	cmp	r3, #9
 8017a98:	d94e      	bls.n	8017b38 <_vfiprintf_r+0x1c4>
 8017a9a:	b1b0      	cbz	r0, 8017aca <_vfiprintf_r+0x156>
 8017a9c:	9207      	str	r2, [sp, #28]
 8017a9e:	e014      	b.n	8017aca <_vfiprintf_r+0x156>
 8017aa0:	eba0 0308 	sub.w	r3, r0, r8
 8017aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8017aa8:	4313      	orrs	r3, r2
 8017aaa:	9304      	str	r3, [sp, #16]
 8017aac:	46a2      	mov	sl, r4
 8017aae:	e7d2      	b.n	8017a56 <_vfiprintf_r+0xe2>
 8017ab0:	9b03      	ldr	r3, [sp, #12]
 8017ab2:	1d19      	adds	r1, r3, #4
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	9103      	str	r1, [sp, #12]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	bfbb      	ittet	lt
 8017abc:	425b      	neglt	r3, r3
 8017abe:	f042 0202 	orrlt.w	r2, r2, #2
 8017ac2:	9307      	strge	r3, [sp, #28]
 8017ac4:	9307      	strlt	r3, [sp, #28]
 8017ac6:	bfb8      	it	lt
 8017ac8:	9204      	strlt	r2, [sp, #16]
 8017aca:	7823      	ldrb	r3, [r4, #0]
 8017acc:	2b2e      	cmp	r3, #46	; 0x2e
 8017ace:	d10c      	bne.n	8017aea <_vfiprintf_r+0x176>
 8017ad0:	7863      	ldrb	r3, [r4, #1]
 8017ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8017ad4:	d135      	bne.n	8017b42 <_vfiprintf_r+0x1ce>
 8017ad6:	9b03      	ldr	r3, [sp, #12]
 8017ad8:	1d1a      	adds	r2, r3, #4
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	9203      	str	r2, [sp, #12]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	bfb8      	it	lt
 8017ae2:	f04f 33ff 	movlt.w	r3, #4294967295
 8017ae6:	3402      	adds	r4, #2
 8017ae8:	9305      	str	r3, [sp, #20]
 8017aea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017bd0 <_vfiprintf_r+0x25c>
 8017aee:	7821      	ldrb	r1, [r4, #0]
 8017af0:	2203      	movs	r2, #3
 8017af2:	4650      	mov	r0, sl
 8017af4:	f7e8 fb74 	bl	80001e0 <memchr>
 8017af8:	b140      	cbz	r0, 8017b0c <_vfiprintf_r+0x198>
 8017afa:	2340      	movs	r3, #64	; 0x40
 8017afc:	eba0 000a 	sub.w	r0, r0, sl
 8017b00:	fa03 f000 	lsl.w	r0, r3, r0
 8017b04:	9b04      	ldr	r3, [sp, #16]
 8017b06:	4303      	orrs	r3, r0
 8017b08:	3401      	adds	r4, #1
 8017b0a:	9304      	str	r3, [sp, #16]
 8017b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b10:	482c      	ldr	r0, [pc, #176]	; (8017bc4 <_vfiprintf_r+0x250>)
 8017b12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017b16:	2206      	movs	r2, #6
 8017b18:	f7e8 fb62 	bl	80001e0 <memchr>
 8017b1c:	2800      	cmp	r0, #0
 8017b1e:	d03f      	beq.n	8017ba0 <_vfiprintf_r+0x22c>
 8017b20:	4b29      	ldr	r3, [pc, #164]	; (8017bc8 <_vfiprintf_r+0x254>)
 8017b22:	bb1b      	cbnz	r3, 8017b6c <_vfiprintf_r+0x1f8>
 8017b24:	9b03      	ldr	r3, [sp, #12]
 8017b26:	3307      	adds	r3, #7
 8017b28:	f023 0307 	bic.w	r3, r3, #7
 8017b2c:	3308      	adds	r3, #8
 8017b2e:	9303      	str	r3, [sp, #12]
 8017b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b32:	443b      	add	r3, r7
 8017b34:	9309      	str	r3, [sp, #36]	; 0x24
 8017b36:	e767      	b.n	8017a08 <_vfiprintf_r+0x94>
 8017b38:	fb0c 3202 	mla	r2, ip, r2, r3
 8017b3c:	460c      	mov	r4, r1
 8017b3e:	2001      	movs	r0, #1
 8017b40:	e7a5      	b.n	8017a8e <_vfiprintf_r+0x11a>
 8017b42:	2300      	movs	r3, #0
 8017b44:	3401      	adds	r4, #1
 8017b46:	9305      	str	r3, [sp, #20]
 8017b48:	4619      	mov	r1, r3
 8017b4a:	f04f 0c0a 	mov.w	ip, #10
 8017b4e:	4620      	mov	r0, r4
 8017b50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b54:	3a30      	subs	r2, #48	; 0x30
 8017b56:	2a09      	cmp	r2, #9
 8017b58:	d903      	bls.n	8017b62 <_vfiprintf_r+0x1ee>
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d0c5      	beq.n	8017aea <_vfiprintf_r+0x176>
 8017b5e:	9105      	str	r1, [sp, #20]
 8017b60:	e7c3      	b.n	8017aea <_vfiprintf_r+0x176>
 8017b62:	fb0c 2101 	mla	r1, ip, r1, r2
 8017b66:	4604      	mov	r4, r0
 8017b68:	2301      	movs	r3, #1
 8017b6a:	e7f0      	b.n	8017b4e <_vfiprintf_r+0x1da>
 8017b6c:	ab03      	add	r3, sp, #12
 8017b6e:	9300      	str	r3, [sp, #0]
 8017b70:	462a      	mov	r2, r5
 8017b72:	4b16      	ldr	r3, [pc, #88]	; (8017bcc <_vfiprintf_r+0x258>)
 8017b74:	a904      	add	r1, sp, #16
 8017b76:	4630      	mov	r0, r6
 8017b78:	f7fb f8bc 	bl	8012cf4 <_printf_float>
 8017b7c:	4607      	mov	r7, r0
 8017b7e:	1c78      	adds	r0, r7, #1
 8017b80:	d1d6      	bne.n	8017b30 <_vfiprintf_r+0x1bc>
 8017b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017b84:	07d9      	lsls	r1, r3, #31
 8017b86:	d405      	bmi.n	8017b94 <_vfiprintf_r+0x220>
 8017b88:	89ab      	ldrh	r3, [r5, #12]
 8017b8a:	059a      	lsls	r2, r3, #22
 8017b8c:	d402      	bmi.n	8017b94 <_vfiprintf_r+0x220>
 8017b8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b90:	f7fe f8fc 	bl	8015d8c <__retarget_lock_release_recursive>
 8017b94:	89ab      	ldrh	r3, [r5, #12]
 8017b96:	065b      	lsls	r3, r3, #25
 8017b98:	f53f af12 	bmi.w	80179c0 <_vfiprintf_r+0x4c>
 8017b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017b9e:	e711      	b.n	80179c4 <_vfiprintf_r+0x50>
 8017ba0:	ab03      	add	r3, sp, #12
 8017ba2:	9300      	str	r3, [sp, #0]
 8017ba4:	462a      	mov	r2, r5
 8017ba6:	4b09      	ldr	r3, [pc, #36]	; (8017bcc <_vfiprintf_r+0x258>)
 8017ba8:	a904      	add	r1, sp, #16
 8017baa:	4630      	mov	r0, r6
 8017bac:	f7fb fb46 	bl	801323c <_printf_i>
 8017bb0:	e7e4      	b.n	8017b7c <_vfiprintf_r+0x208>
 8017bb2:	bf00      	nop
 8017bb4:	0801a2e0 	.word	0x0801a2e0
 8017bb8:	0801a300 	.word	0x0801a300
 8017bbc:	0801a2c0 	.word	0x0801a2c0
 8017bc0:	0801a4fc 	.word	0x0801a4fc
 8017bc4:	0801a506 	.word	0x0801a506
 8017bc8:	08012cf5 	.word	0x08012cf5
 8017bcc:	0801794f 	.word	0x0801794f
 8017bd0:	0801a502 	.word	0x0801a502

08017bd4 <abort>:
 8017bd4:	b508      	push	{r3, lr}
 8017bd6:	2006      	movs	r0, #6
 8017bd8:	f000 f856 	bl	8017c88 <raise>
 8017bdc:	2001      	movs	r0, #1
 8017bde:	f7eb fb43 	bl	8003268 <_exit>
	...

08017be4 <_fstat_r>:
 8017be4:	b538      	push	{r3, r4, r5, lr}
 8017be6:	4d07      	ldr	r5, [pc, #28]	; (8017c04 <_fstat_r+0x20>)
 8017be8:	2300      	movs	r3, #0
 8017bea:	4604      	mov	r4, r0
 8017bec:	4608      	mov	r0, r1
 8017bee:	4611      	mov	r1, r2
 8017bf0:	602b      	str	r3, [r5, #0]
 8017bf2:	f7eb fb88 	bl	8003306 <_fstat>
 8017bf6:	1c43      	adds	r3, r0, #1
 8017bf8:	d102      	bne.n	8017c00 <_fstat_r+0x1c>
 8017bfa:	682b      	ldr	r3, [r5, #0]
 8017bfc:	b103      	cbz	r3, 8017c00 <_fstat_r+0x1c>
 8017bfe:	6023      	str	r3, [r4, #0]
 8017c00:	bd38      	pop	{r3, r4, r5, pc}
 8017c02:	bf00      	nop
 8017c04:	2000337c 	.word	0x2000337c

08017c08 <_isatty_r>:
 8017c08:	b538      	push	{r3, r4, r5, lr}
 8017c0a:	4d06      	ldr	r5, [pc, #24]	; (8017c24 <_isatty_r+0x1c>)
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	4604      	mov	r4, r0
 8017c10:	4608      	mov	r0, r1
 8017c12:	602b      	str	r3, [r5, #0]
 8017c14:	f7eb fb87 	bl	8003326 <_isatty>
 8017c18:	1c43      	adds	r3, r0, #1
 8017c1a:	d102      	bne.n	8017c22 <_isatty_r+0x1a>
 8017c1c:	682b      	ldr	r3, [r5, #0]
 8017c1e:	b103      	cbz	r3, 8017c22 <_isatty_r+0x1a>
 8017c20:	6023      	str	r3, [r4, #0]
 8017c22:	bd38      	pop	{r3, r4, r5, pc}
 8017c24:	2000337c 	.word	0x2000337c

08017c28 <_malloc_usable_size_r>:
 8017c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c2c:	1f18      	subs	r0, r3, #4
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	bfbc      	itt	lt
 8017c32:	580b      	ldrlt	r3, [r1, r0]
 8017c34:	18c0      	addlt	r0, r0, r3
 8017c36:	4770      	bx	lr

08017c38 <_raise_r>:
 8017c38:	291f      	cmp	r1, #31
 8017c3a:	b538      	push	{r3, r4, r5, lr}
 8017c3c:	4604      	mov	r4, r0
 8017c3e:	460d      	mov	r5, r1
 8017c40:	d904      	bls.n	8017c4c <_raise_r+0x14>
 8017c42:	2316      	movs	r3, #22
 8017c44:	6003      	str	r3, [r0, #0]
 8017c46:	f04f 30ff 	mov.w	r0, #4294967295
 8017c4a:	bd38      	pop	{r3, r4, r5, pc}
 8017c4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017c4e:	b112      	cbz	r2, 8017c56 <_raise_r+0x1e>
 8017c50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017c54:	b94b      	cbnz	r3, 8017c6a <_raise_r+0x32>
 8017c56:	4620      	mov	r0, r4
 8017c58:	f000 f830 	bl	8017cbc <_getpid_r>
 8017c5c:	462a      	mov	r2, r5
 8017c5e:	4601      	mov	r1, r0
 8017c60:	4620      	mov	r0, r4
 8017c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c66:	f000 b817 	b.w	8017c98 <_kill_r>
 8017c6a:	2b01      	cmp	r3, #1
 8017c6c:	d00a      	beq.n	8017c84 <_raise_r+0x4c>
 8017c6e:	1c59      	adds	r1, r3, #1
 8017c70:	d103      	bne.n	8017c7a <_raise_r+0x42>
 8017c72:	2316      	movs	r3, #22
 8017c74:	6003      	str	r3, [r0, #0]
 8017c76:	2001      	movs	r0, #1
 8017c78:	e7e7      	b.n	8017c4a <_raise_r+0x12>
 8017c7a:	2400      	movs	r4, #0
 8017c7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017c80:	4628      	mov	r0, r5
 8017c82:	4798      	blx	r3
 8017c84:	2000      	movs	r0, #0
 8017c86:	e7e0      	b.n	8017c4a <_raise_r+0x12>

08017c88 <raise>:
 8017c88:	4b02      	ldr	r3, [pc, #8]	; (8017c94 <raise+0xc>)
 8017c8a:	4601      	mov	r1, r0
 8017c8c:	6818      	ldr	r0, [r3, #0]
 8017c8e:	f7ff bfd3 	b.w	8017c38 <_raise_r>
 8017c92:	bf00      	nop
 8017c94:	2000019c 	.word	0x2000019c

08017c98 <_kill_r>:
 8017c98:	b538      	push	{r3, r4, r5, lr}
 8017c9a:	4d07      	ldr	r5, [pc, #28]	; (8017cb8 <_kill_r+0x20>)
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	4604      	mov	r4, r0
 8017ca0:	4608      	mov	r0, r1
 8017ca2:	4611      	mov	r1, r2
 8017ca4:	602b      	str	r3, [r5, #0]
 8017ca6:	f7eb facf 	bl	8003248 <_kill>
 8017caa:	1c43      	adds	r3, r0, #1
 8017cac:	d102      	bne.n	8017cb4 <_kill_r+0x1c>
 8017cae:	682b      	ldr	r3, [r5, #0]
 8017cb0:	b103      	cbz	r3, 8017cb4 <_kill_r+0x1c>
 8017cb2:	6023      	str	r3, [r4, #0]
 8017cb4:	bd38      	pop	{r3, r4, r5, pc}
 8017cb6:	bf00      	nop
 8017cb8:	2000337c 	.word	0x2000337c

08017cbc <_getpid_r>:
 8017cbc:	f7eb babc 	b.w	8003238 <_getpid>

08017cc0 <round>:
 8017cc0:	ec51 0b10 	vmov	r0, r1, d0
 8017cc4:	b570      	push	{r4, r5, r6, lr}
 8017cc6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8017cca:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8017cce:	2c13      	cmp	r4, #19
 8017cd0:	ee10 2a10 	vmov	r2, s0
 8017cd4:	460b      	mov	r3, r1
 8017cd6:	dc19      	bgt.n	8017d0c <round+0x4c>
 8017cd8:	2c00      	cmp	r4, #0
 8017cda:	da09      	bge.n	8017cf0 <round+0x30>
 8017cdc:	3401      	adds	r4, #1
 8017cde:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8017ce2:	d103      	bne.n	8017cec <round+0x2c>
 8017ce4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8017ce8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017cec:	2100      	movs	r1, #0
 8017cee:	e028      	b.n	8017d42 <round+0x82>
 8017cf0:	4d15      	ldr	r5, [pc, #84]	; (8017d48 <round+0x88>)
 8017cf2:	4125      	asrs	r5, r4
 8017cf4:	ea01 0605 	and.w	r6, r1, r5
 8017cf8:	4332      	orrs	r2, r6
 8017cfa:	d00e      	beq.n	8017d1a <round+0x5a>
 8017cfc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017d00:	fa42 f404 	asr.w	r4, r2, r4
 8017d04:	4423      	add	r3, r4
 8017d06:	ea23 0305 	bic.w	r3, r3, r5
 8017d0a:	e7ef      	b.n	8017cec <round+0x2c>
 8017d0c:	2c33      	cmp	r4, #51	; 0x33
 8017d0e:	dd07      	ble.n	8017d20 <round+0x60>
 8017d10:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8017d14:	d101      	bne.n	8017d1a <round+0x5a>
 8017d16:	f7e8 fab9 	bl	800028c <__adddf3>
 8017d1a:	ec41 0b10 	vmov	d0, r0, r1
 8017d1e:	bd70      	pop	{r4, r5, r6, pc}
 8017d20:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8017d24:	f04f 35ff 	mov.w	r5, #4294967295
 8017d28:	40f5      	lsrs	r5, r6
 8017d2a:	4228      	tst	r0, r5
 8017d2c:	d0f5      	beq.n	8017d1a <round+0x5a>
 8017d2e:	2101      	movs	r1, #1
 8017d30:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8017d34:	fa01 f404 	lsl.w	r4, r1, r4
 8017d38:	1912      	adds	r2, r2, r4
 8017d3a:	bf28      	it	cs
 8017d3c:	185b      	addcs	r3, r3, r1
 8017d3e:	ea22 0105 	bic.w	r1, r2, r5
 8017d42:	4608      	mov	r0, r1
 8017d44:	4619      	mov	r1, r3
 8017d46:	e7e8      	b.n	8017d1a <round+0x5a>
 8017d48:	000fffff 	.word	0x000fffff
 8017d4c:	00000000 	.word	0x00000000

08017d50 <exp>:
 8017d50:	b538      	push	{r3, r4, r5, lr}
 8017d52:	ed2d 8b02 	vpush	{d8}
 8017d56:	ec55 4b10 	vmov	r4, r5, d0
 8017d5a:	f000 f885 	bl	8017e68 <__ieee754_exp>
 8017d5e:	4b22      	ldr	r3, [pc, #136]	; (8017de8 <exp+0x98>)
 8017d60:	eeb0 8a40 	vmov.f32	s16, s0
 8017d64:	eef0 8a60 	vmov.f32	s17, s1
 8017d68:	f993 3000 	ldrsb.w	r3, [r3]
 8017d6c:	3301      	adds	r3, #1
 8017d6e:	d012      	beq.n	8017d96 <exp+0x46>
 8017d70:	ec45 4b10 	vmov	d0, r4, r5
 8017d74:	f000 fb04 	bl	8018380 <finite>
 8017d78:	b168      	cbz	r0, 8017d96 <exp+0x46>
 8017d7a:	a313      	add	r3, pc, #76	; (adr r3, 8017dc8 <exp+0x78>)
 8017d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d80:	4620      	mov	r0, r4
 8017d82:	4629      	mov	r1, r5
 8017d84:	f7e8 fec8 	bl	8000b18 <__aeabi_dcmpgt>
 8017d88:	b160      	cbz	r0, 8017da4 <exp+0x54>
 8017d8a:	f7fa fee1 	bl	8012b50 <__errno>
 8017d8e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 8017dd0 <exp+0x80>
 8017d92:	2322      	movs	r3, #34	; 0x22
 8017d94:	6003      	str	r3, [r0, #0]
 8017d96:	eeb0 0a48 	vmov.f32	s0, s16
 8017d9a:	eef0 0a68 	vmov.f32	s1, s17
 8017d9e:	ecbd 8b02 	vpop	{d8}
 8017da2:	bd38      	pop	{r3, r4, r5, pc}
 8017da4:	a30c      	add	r3, pc, #48	; (adr r3, 8017dd8 <exp+0x88>)
 8017da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017daa:	4620      	mov	r0, r4
 8017dac:	4629      	mov	r1, r5
 8017dae:	f7e8 fe95 	bl	8000adc <__aeabi_dcmplt>
 8017db2:	2800      	cmp	r0, #0
 8017db4:	d0ef      	beq.n	8017d96 <exp+0x46>
 8017db6:	f7fa fecb 	bl	8012b50 <__errno>
 8017dba:	2322      	movs	r3, #34	; 0x22
 8017dbc:	ed9f 8b08 	vldr	d8, [pc, #32]	; 8017de0 <exp+0x90>
 8017dc0:	6003      	str	r3, [r0, #0]
 8017dc2:	e7e8      	b.n	8017d96 <exp+0x46>
 8017dc4:	f3af 8000 	nop.w
 8017dc8:	fefa39ef 	.word	0xfefa39ef
 8017dcc:	40862e42 	.word	0x40862e42
 8017dd0:	00000000 	.word	0x00000000
 8017dd4:	7ff00000 	.word	0x7ff00000
 8017dd8:	d52d3051 	.word	0xd52d3051
 8017ddc:	c0874910 	.word	0xc0874910
	...
 8017de8:	20000370 	.word	0x20000370

08017dec <fmod>:
 8017dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dee:	ed2d 8b02 	vpush	{d8}
 8017df2:	ec57 6b10 	vmov	r6, r7, d0
 8017df6:	ec55 4b11 	vmov	r4, r5, d1
 8017dfa:	f000 f9af 	bl	801815c <__ieee754_fmod>
 8017dfe:	4b18      	ldr	r3, [pc, #96]	; (8017e60 <fmod+0x74>)
 8017e00:	eeb0 8a40 	vmov.f32	s16, s0
 8017e04:	eef0 8a60 	vmov.f32	s17, s1
 8017e08:	f993 3000 	ldrsb.w	r3, [r3]
 8017e0c:	3301      	adds	r3, #1
 8017e0e:	d020      	beq.n	8017e52 <fmod+0x66>
 8017e10:	4622      	mov	r2, r4
 8017e12:	462b      	mov	r3, r5
 8017e14:	4620      	mov	r0, r4
 8017e16:	4629      	mov	r1, r5
 8017e18:	f7e8 fe88 	bl	8000b2c <__aeabi_dcmpun>
 8017e1c:	b9c8      	cbnz	r0, 8017e52 <fmod+0x66>
 8017e1e:	4632      	mov	r2, r6
 8017e20:	463b      	mov	r3, r7
 8017e22:	4630      	mov	r0, r6
 8017e24:	4639      	mov	r1, r7
 8017e26:	f7e8 fe81 	bl	8000b2c <__aeabi_dcmpun>
 8017e2a:	b990      	cbnz	r0, 8017e52 <fmod+0x66>
 8017e2c:	2200      	movs	r2, #0
 8017e2e:	2300      	movs	r3, #0
 8017e30:	4620      	mov	r0, r4
 8017e32:	4629      	mov	r1, r5
 8017e34:	f7e8 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e38:	b158      	cbz	r0, 8017e52 <fmod+0x66>
 8017e3a:	f7fa fe89 	bl	8012b50 <__errno>
 8017e3e:	2321      	movs	r3, #33	; 0x21
 8017e40:	6003      	str	r3, [r0, #0]
 8017e42:	2200      	movs	r2, #0
 8017e44:	2300      	movs	r3, #0
 8017e46:	4610      	mov	r0, r2
 8017e48:	4619      	mov	r1, r3
 8017e4a:	f7e8 fcff 	bl	800084c <__aeabi_ddiv>
 8017e4e:	ec41 0b18 	vmov	d8, r0, r1
 8017e52:	eeb0 0a48 	vmov.f32	s0, s16
 8017e56:	eef0 0a68 	vmov.f32	s1, s17
 8017e5a:	ecbd 8b02 	vpop	{d8}
 8017e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e60:	20000370 	.word	0x20000370
 8017e64:	00000000 	.word	0x00000000

08017e68 <__ieee754_exp>:
 8017e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e6c:	ec55 4b10 	vmov	r4, r5, d0
 8017e70:	49b1      	ldr	r1, [pc, #708]	; (8018138 <__ieee754_exp+0x2d0>)
 8017e72:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017e76:	428b      	cmp	r3, r1
 8017e78:	ed2d 8b04 	vpush	{d8-d9}
 8017e7c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8017e80:	d937      	bls.n	8017ef2 <__ieee754_exp+0x8a>
 8017e82:	49ae      	ldr	r1, [pc, #696]	; (801813c <__ieee754_exp+0x2d4>)
 8017e84:	428b      	cmp	r3, r1
 8017e86:	d916      	bls.n	8017eb6 <__ieee754_exp+0x4e>
 8017e88:	ee10 3a10 	vmov	r3, s0
 8017e8c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8017e90:	4313      	orrs	r3, r2
 8017e92:	d009      	beq.n	8017ea8 <__ieee754_exp+0x40>
 8017e94:	ee10 2a10 	vmov	r2, s0
 8017e98:	462b      	mov	r3, r5
 8017e9a:	4620      	mov	r0, r4
 8017e9c:	4629      	mov	r1, r5
 8017e9e:	f7e8 f9f5 	bl	800028c <__adddf3>
 8017ea2:	4604      	mov	r4, r0
 8017ea4:	460d      	mov	r5, r1
 8017ea6:	e000      	b.n	8017eaa <__ieee754_exp+0x42>
 8017ea8:	bb06      	cbnz	r6, 8017eec <__ieee754_exp+0x84>
 8017eaa:	ecbd 8b04 	vpop	{d8-d9}
 8017eae:	ec45 4b10 	vmov	d0, r4, r5
 8017eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017eb6:	a38a      	add	r3, pc, #552	; (adr r3, 80180e0 <__ieee754_exp+0x278>)
 8017eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ebc:	ee10 0a10 	vmov	r0, s0
 8017ec0:	4629      	mov	r1, r5
 8017ec2:	f7e8 fe29 	bl	8000b18 <__aeabi_dcmpgt>
 8017ec6:	b138      	cbz	r0, 8017ed8 <__ieee754_exp+0x70>
 8017ec8:	a387      	add	r3, pc, #540	; (adr r3, 80180e8 <__ieee754_exp+0x280>)
 8017eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ece:	4610      	mov	r0, r2
 8017ed0:	4619      	mov	r1, r3
 8017ed2:	f7e8 fb91 	bl	80005f8 <__aeabi_dmul>
 8017ed6:	e7e4      	b.n	8017ea2 <__ieee754_exp+0x3a>
 8017ed8:	a385      	add	r3, pc, #532	; (adr r3, 80180f0 <__ieee754_exp+0x288>)
 8017eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ede:	4620      	mov	r0, r4
 8017ee0:	4629      	mov	r1, r5
 8017ee2:	f7e8 fdfb 	bl	8000adc <__aeabi_dcmplt>
 8017ee6:	2800      	cmp	r0, #0
 8017ee8:	f000 8087 	beq.w	8017ffa <__ieee754_exp+0x192>
 8017eec:	2400      	movs	r4, #0
 8017eee:	2500      	movs	r5, #0
 8017ef0:	e7db      	b.n	8017eaa <__ieee754_exp+0x42>
 8017ef2:	4a93      	ldr	r2, [pc, #588]	; (8018140 <__ieee754_exp+0x2d8>)
 8017ef4:	4293      	cmp	r3, r2
 8017ef6:	f240 80ac 	bls.w	8018052 <__ieee754_exp+0x1ea>
 8017efa:	4a92      	ldr	r2, [pc, #584]	; (8018144 <__ieee754_exp+0x2dc>)
 8017efc:	4293      	cmp	r3, r2
 8017efe:	d87c      	bhi.n	8017ffa <__ieee754_exp+0x192>
 8017f00:	4b91      	ldr	r3, [pc, #580]	; (8018148 <__ieee754_exp+0x2e0>)
 8017f02:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f0a:	ee10 0a10 	vmov	r0, s0
 8017f0e:	4629      	mov	r1, r5
 8017f10:	f7e8 f9ba 	bl	8000288 <__aeabi_dsub>
 8017f14:	4b8d      	ldr	r3, [pc, #564]	; (801814c <__ieee754_exp+0x2e4>)
 8017f16:	00f7      	lsls	r7, r6, #3
 8017f18:	443b      	add	r3, r7
 8017f1a:	ed93 7b00 	vldr	d7, [r3]
 8017f1e:	f1c6 0a01 	rsb	sl, r6, #1
 8017f22:	4680      	mov	r8, r0
 8017f24:	4689      	mov	r9, r1
 8017f26:	ebaa 0a06 	sub.w	sl, sl, r6
 8017f2a:	eeb0 8a47 	vmov.f32	s16, s14
 8017f2e:	eef0 8a67 	vmov.f32	s17, s15
 8017f32:	ec53 2b18 	vmov	r2, r3, d8
 8017f36:	4640      	mov	r0, r8
 8017f38:	4649      	mov	r1, r9
 8017f3a:	f7e8 f9a5 	bl	8000288 <__aeabi_dsub>
 8017f3e:	4604      	mov	r4, r0
 8017f40:	460d      	mov	r5, r1
 8017f42:	4622      	mov	r2, r4
 8017f44:	462b      	mov	r3, r5
 8017f46:	4620      	mov	r0, r4
 8017f48:	4629      	mov	r1, r5
 8017f4a:	f7e8 fb55 	bl	80005f8 <__aeabi_dmul>
 8017f4e:	a36a      	add	r3, pc, #424	; (adr r3, 80180f8 <__ieee754_exp+0x290>)
 8017f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f54:	4606      	mov	r6, r0
 8017f56:	460f      	mov	r7, r1
 8017f58:	f7e8 fb4e 	bl	80005f8 <__aeabi_dmul>
 8017f5c:	a368      	add	r3, pc, #416	; (adr r3, 8018100 <__ieee754_exp+0x298>)
 8017f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f62:	f7e8 f991 	bl	8000288 <__aeabi_dsub>
 8017f66:	4632      	mov	r2, r6
 8017f68:	463b      	mov	r3, r7
 8017f6a:	f7e8 fb45 	bl	80005f8 <__aeabi_dmul>
 8017f6e:	a366      	add	r3, pc, #408	; (adr r3, 8018108 <__ieee754_exp+0x2a0>)
 8017f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f74:	f7e8 f98a 	bl	800028c <__adddf3>
 8017f78:	4632      	mov	r2, r6
 8017f7a:	463b      	mov	r3, r7
 8017f7c:	f7e8 fb3c 	bl	80005f8 <__aeabi_dmul>
 8017f80:	a363      	add	r3, pc, #396	; (adr r3, 8018110 <__ieee754_exp+0x2a8>)
 8017f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f86:	f7e8 f97f 	bl	8000288 <__aeabi_dsub>
 8017f8a:	4632      	mov	r2, r6
 8017f8c:	463b      	mov	r3, r7
 8017f8e:	f7e8 fb33 	bl	80005f8 <__aeabi_dmul>
 8017f92:	a361      	add	r3, pc, #388	; (adr r3, 8018118 <__ieee754_exp+0x2b0>)
 8017f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f98:	f7e8 f978 	bl	800028c <__adddf3>
 8017f9c:	4632      	mov	r2, r6
 8017f9e:	463b      	mov	r3, r7
 8017fa0:	f7e8 fb2a 	bl	80005f8 <__aeabi_dmul>
 8017fa4:	4602      	mov	r2, r0
 8017fa6:	460b      	mov	r3, r1
 8017fa8:	4620      	mov	r0, r4
 8017faa:	4629      	mov	r1, r5
 8017fac:	f7e8 f96c 	bl	8000288 <__aeabi_dsub>
 8017fb0:	4602      	mov	r2, r0
 8017fb2:	460b      	mov	r3, r1
 8017fb4:	4606      	mov	r6, r0
 8017fb6:	460f      	mov	r7, r1
 8017fb8:	4620      	mov	r0, r4
 8017fba:	4629      	mov	r1, r5
 8017fbc:	f7e8 fb1c 	bl	80005f8 <__aeabi_dmul>
 8017fc0:	ec41 0b19 	vmov	d9, r0, r1
 8017fc4:	f1ba 0f00 	cmp.w	sl, #0
 8017fc8:	d15d      	bne.n	8018086 <__ieee754_exp+0x21e>
 8017fca:	2200      	movs	r2, #0
 8017fcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017fd0:	4630      	mov	r0, r6
 8017fd2:	4639      	mov	r1, r7
 8017fd4:	f7e8 f958 	bl	8000288 <__aeabi_dsub>
 8017fd8:	4602      	mov	r2, r0
 8017fda:	460b      	mov	r3, r1
 8017fdc:	ec51 0b19 	vmov	r0, r1, d9
 8017fe0:	f7e8 fc34 	bl	800084c <__aeabi_ddiv>
 8017fe4:	4622      	mov	r2, r4
 8017fe6:	462b      	mov	r3, r5
 8017fe8:	f7e8 f94e 	bl	8000288 <__aeabi_dsub>
 8017fec:	4602      	mov	r2, r0
 8017fee:	460b      	mov	r3, r1
 8017ff0:	2000      	movs	r0, #0
 8017ff2:	4957      	ldr	r1, [pc, #348]	; (8018150 <__ieee754_exp+0x2e8>)
 8017ff4:	f7e8 f948 	bl	8000288 <__aeabi_dsub>
 8017ff8:	e753      	b.n	8017ea2 <__ieee754_exp+0x3a>
 8017ffa:	4856      	ldr	r0, [pc, #344]	; (8018154 <__ieee754_exp+0x2ec>)
 8017ffc:	a348      	add	r3, pc, #288	; (adr r3, 8018120 <__ieee754_exp+0x2b8>)
 8017ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018002:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8018006:	4629      	mov	r1, r5
 8018008:	4620      	mov	r0, r4
 801800a:	f7e8 faf5 	bl	80005f8 <__aeabi_dmul>
 801800e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018012:	f7e8 f93b 	bl	800028c <__adddf3>
 8018016:	f7e8 fd9f 	bl	8000b58 <__aeabi_d2iz>
 801801a:	4682      	mov	sl, r0
 801801c:	f7e8 fa82 	bl	8000524 <__aeabi_i2d>
 8018020:	a341      	add	r3, pc, #260	; (adr r3, 8018128 <__ieee754_exp+0x2c0>)
 8018022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018026:	4606      	mov	r6, r0
 8018028:	460f      	mov	r7, r1
 801802a:	f7e8 fae5 	bl	80005f8 <__aeabi_dmul>
 801802e:	4602      	mov	r2, r0
 8018030:	460b      	mov	r3, r1
 8018032:	4620      	mov	r0, r4
 8018034:	4629      	mov	r1, r5
 8018036:	f7e8 f927 	bl	8000288 <__aeabi_dsub>
 801803a:	a33d      	add	r3, pc, #244	; (adr r3, 8018130 <__ieee754_exp+0x2c8>)
 801803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018040:	4680      	mov	r8, r0
 8018042:	4689      	mov	r9, r1
 8018044:	4630      	mov	r0, r6
 8018046:	4639      	mov	r1, r7
 8018048:	f7e8 fad6 	bl	80005f8 <__aeabi_dmul>
 801804c:	ec41 0b18 	vmov	d8, r0, r1
 8018050:	e76f      	b.n	8017f32 <__ieee754_exp+0xca>
 8018052:	4a41      	ldr	r2, [pc, #260]	; (8018158 <__ieee754_exp+0x2f0>)
 8018054:	4293      	cmp	r3, r2
 8018056:	d811      	bhi.n	801807c <__ieee754_exp+0x214>
 8018058:	a323      	add	r3, pc, #140	; (adr r3, 80180e8 <__ieee754_exp+0x280>)
 801805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801805e:	ee10 0a10 	vmov	r0, s0
 8018062:	4629      	mov	r1, r5
 8018064:	f7e8 f912 	bl	800028c <__adddf3>
 8018068:	4b39      	ldr	r3, [pc, #228]	; (8018150 <__ieee754_exp+0x2e8>)
 801806a:	2200      	movs	r2, #0
 801806c:	f7e8 fd54 	bl	8000b18 <__aeabi_dcmpgt>
 8018070:	b138      	cbz	r0, 8018082 <__ieee754_exp+0x21a>
 8018072:	4b37      	ldr	r3, [pc, #220]	; (8018150 <__ieee754_exp+0x2e8>)
 8018074:	2200      	movs	r2, #0
 8018076:	4620      	mov	r0, r4
 8018078:	4629      	mov	r1, r5
 801807a:	e710      	b.n	8017e9e <__ieee754_exp+0x36>
 801807c:	f04f 0a00 	mov.w	sl, #0
 8018080:	e75f      	b.n	8017f42 <__ieee754_exp+0xda>
 8018082:	4682      	mov	sl, r0
 8018084:	e75d      	b.n	8017f42 <__ieee754_exp+0xda>
 8018086:	4632      	mov	r2, r6
 8018088:	463b      	mov	r3, r7
 801808a:	2000      	movs	r0, #0
 801808c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8018090:	f7e8 f8fa 	bl	8000288 <__aeabi_dsub>
 8018094:	4602      	mov	r2, r0
 8018096:	460b      	mov	r3, r1
 8018098:	ec51 0b19 	vmov	r0, r1, d9
 801809c:	f7e8 fbd6 	bl	800084c <__aeabi_ddiv>
 80180a0:	4602      	mov	r2, r0
 80180a2:	460b      	mov	r3, r1
 80180a4:	ec51 0b18 	vmov	r0, r1, d8
 80180a8:	f7e8 f8ee 	bl	8000288 <__aeabi_dsub>
 80180ac:	4642      	mov	r2, r8
 80180ae:	464b      	mov	r3, r9
 80180b0:	f7e8 f8ea 	bl	8000288 <__aeabi_dsub>
 80180b4:	4602      	mov	r2, r0
 80180b6:	460b      	mov	r3, r1
 80180b8:	2000      	movs	r0, #0
 80180ba:	4925      	ldr	r1, [pc, #148]	; (8018150 <__ieee754_exp+0x2e8>)
 80180bc:	f7e8 f8e4 	bl	8000288 <__aeabi_dsub>
 80180c0:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80180c4:	4592      	cmp	sl, r2
 80180c6:	db02      	blt.n	80180ce <__ieee754_exp+0x266>
 80180c8:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80180cc:	e6e9      	b.n	8017ea2 <__ieee754_exp+0x3a>
 80180ce:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80180d2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80180d6:	2200      	movs	r2, #0
 80180d8:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80180dc:	e6f9      	b.n	8017ed2 <__ieee754_exp+0x6a>
 80180de:	bf00      	nop
 80180e0:	fefa39ef 	.word	0xfefa39ef
 80180e4:	40862e42 	.word	0x40862e42
 80180e8:	8800759c 	.word	0x8800759c
 80180ec:	7e37e43c 	.word	0x7e37e43c
 80180f0:	d52d3051 	.word	0xd52d3051
 80180f4:	c0874910 	.word	0xc0874910
 80180f8:	72bea4d0 	.word	0x72bea4d0
 80180fc:	3e663769 	.word	0x3e663769
 8018100:	c5d26bf1 	.word	0xc5d26bf1
 8018104:	3ebbbd41 	.word	0x3ebbbd41
 8018108:	af25de2c 	.word	0xaf25de2c
 801810c:	3f11566a 	.word	0x3f11566a
 8018110:	16bebd93 	.word	0x16bebd93
 8018114:	3f66c16c 	.word	0x3f66c16c
 8018118:	5555553e 	.word	0x5555553e
 801811c:	3fc55555 	.word	0x3fc55555
 8018120:	652b82fe 	.word	0x652b82fe
 8018124:	3ff71547 	.word	0x3ff71547
 8018128:	fee00000 	.word	0xfee00000
 801812c:	3fe62e42 	.word	0x3fe62e42
 8018130:	35793c76 	.word	0x35793c76
 8018134:	3dea39ef 	.word	0x3dea39ef
 8018138:	40862e41 	.word	0x40862e41
 801813c:	7fefffff 	.word	0x7fefffff
 8018140:	3fd62e42 	.word	0x3fd62e42
 8018144:	3ff0a2b1 	.word	0x3ff0a2b1
 8018148:	0801a578 	.word	0x0801a578
 801814c:	0801a588 	.word	0x0801a588
 8018150:	3ff00000 	.word	0x3ff00000
 8018154:	0801a568 	.word	0x0801a568
 8018158:	3e2fffff 	.word	0x3e2fffff

0801815c <__ieee754_fmod>:
 801815c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018160:	ec53 2b11 	vmov	r2, r3, d1
 8018164:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8018168:	ea5e 0402 	orrs.w	r4, lr, r2
 801816c:	ec51 0b10 	vmov	r0, r1, d0
 8018170:	ee11 7a10 	vmov	r7, s2
 8018174:	ee11 ca10 	vmov	ip, s2
 8018178:	461e      	mov	r6, r3
 801817a:	d00d      	beq.n	8018198 <__ieee754_fmod+0x3c>
 801817c:	4c7a      	ldr	r4, [pc, #488]	; (8018368 <__ieee754_fmod+0x20c>)
 801817e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8018182:	45a0      	cmp	r8, r4
 8018184:	4689      	mov	r9, r1
 8018186:	dc07      	bgt.n	8018198 <__ieee754_fmod+0x3c>
 8018188:	4254      	negs	r4, r2
 801818a:	4d78      	ldr	r5, [pc, #480]	; (801836c <__ieee754_fmod+0x210>)
 801818c:	4314      	orrs	r4, r2
 801818e:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8018192:	42ac      	cmp	r4, r5
 8018194:	46ab      	mov	fp, r5
 8018196:	d909      	bls.n	80181ac <__ieee754_fmod+0x50>
 8018198:	f7e8 fa2e 	bl	80005f8 <__aeabi_dmul>
 801819c:	4602      	mov	r2, r0
 801819e:	460b      	mov	r3, r1
 80181a0:	f7e8 fb54 	bl	800084c <__aeabi_ddiv>
 80181a4:	ec41 0b10 	vmov	d0, r0, r1
 80181a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181ac:	45f0      	cmp	r8, lr
 80181ae:	ee10 aa10 	vmov	sl, s0
 80181b2:	ee10 4a10 	vmov	r4, s0
 80181b6:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80181ba:	dc0a      	bgt.n	80181d2 <__ieee754_fmod+0x76>
 80181bc:	dbf2      	blt.n	80181a4 <__ieee754_fmod+0x48>
 80181be:	4290      	cmp	r0, r2
 80181c0:	d3f0      	bcc.n	80181a4 <__ieee754_fmod+0x48>
 80181c2:	d106      	bne.n	80181d2 <__ieee754_fmod+0x76>
 80181c4:	4a6a      	ldr	r2, [pc, #424]	; (8018370 <__ieee754_fmod+0x214>)
 80181c6:	0fed      	lsrs	r5, r5, #31
 80181c8:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80181cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80181d0:	e7e8      	b.n	80181a4 <__ieee754_fmod+0x48>
 80181d2:	ea19 0f0b 	tst.w	r9, fp
 80181d6:	d14a      	bne.n	801826e <__ieee754_fmod+0x112>
 80181d8:	f1b8 0f00 	cmp.w	r8, #0
 80181dc:	d13f      	bne.n	801825e <__ieee754_fmod+0x102>
 80181de:	4965      	ldr	r1, [pc, #404]	; (8018374 <__ieee754_fmod+0x218>)
 80181e0:	4653      	mov	r3, sl
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	dc38      	bgt.n	8018258 <__ieee754_fmod+0xfc>
 80181e6:	4b61      	ldr	r3, [pc, #388]	; (801836c <__ieee754_fmod+0x210>)
 80181e8:	4033      	ands	r3, r6
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d14f      	bne.n	801828e <__ieee754_fmod+0x132>
 80181ee:	f1be 0f00 	cmp.w	lr, #0
 80181f2:	d144      	bne.n	801827e <__ieee754_fmod+0x122>
 80181f4:	4a5f      	ldr	r2, [pc, #380]	; (8018374 <__ieee754_fmod+0x218>)
 80181f6:	463b      	mov	r3, r7
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	dc3d      	bgt.n	8018278 <__ieee754_fmod+0x11c>
 80181fc:	4b5e      	ldr	r3, [pc, #376]	; (8018378 <__ieee754_fmod+0x21c>)
 80181fe:	4299      	cmp	r1, r3
 8018200:	db4a      	blt.n	8018298 <__ieee754_fmod+0x13c>
 8018202:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801820a:	485b      	ldr	r0, [pc, #364]	; (8018378 <__ieee754_fmod+0x21c>)
 801820c:	4282      	cmp	r2, r0
 801820e:	db57      	blt.n	80182c0 <__ieee754_fmod+0x164>
 8018210:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8018214:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8018218:	1a89      	subs	r1, r1, r2
 801821a:	1b98      	subs	r0, r3, r6
 801821c:	eba4 070c 	sub.w	r7, r4, ip
 8018220:	2900      	cmp	r1, #0
 8018222:	d164      	bne.n	80182ee <__ieee754_fmod+0x192>
 8018224:	4564      	cmp	r4, ip
 8018226:	bf38      	it	cc
 8018228:	f100 30ff 	addcc.w	r0, r0, #4294967295
 801822c:	2800      	cmp	r0, #0
 801822e:	bfa4      	itt	ge
 8018230:	463c      	movge	r4, r7
 8018232:	4603      	movge	r3, r0
 8018234:	ea53 0104 	orrs.w	r1, r3, r4
 8018238:	d0c4      	beq.n	80181c4 <__ieee754_fmod+0x68>
 801823a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801823e:	db6b      	blt.n	8018318 <__ieee754_fmod+0x1bc>
 8018240:	494d      	ldr	r1, [pc, #308]	; (8018378 <__ieee754_fmod+0x21c>)
 8018242:	428a      	cmp	r2, r1
 8018244:	db6e      	blt.n	8018324 <__ieee754_fmod+0x1c8>
 8018246:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801824a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 801824e:	431d      	orrs	r5, r3
 8018250:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 8018254:	4620      	mov	r0, r4
 8018256:	e7a5      	b.n	80181a4 <__ieee754_fmod+0x48>
 8018258:	3901      	subs	r1, #1
 801825a:	005b      	lsls	r3, r3, #1
 801825c:	e7c1      	b.n	80181e2 <__ieee754_fmod+0x86>
 801825e:	4946      	ldr	r1, [pc, #280]	; (8018378 <__ieee754_fmod+0x21c>)
 8018260:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8018264:	2b00      	cmp	r3, #0
 8018266:	ddbe      	ble.n	80181e6 <__ieee754_fmod+0x8a>
 8018268:	3901      	subs	r1, #1
 801826a:	005b      	lsls	r3, r3, #1
 801826c:	e7fa      	b.n	8018264 <__ieee754_fmod+0x108>
 801826e:	ea4f 5128 	mov.w	r1, r8, asr #20
 8018272:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8018276:	e7b6      	b.n	80181e6 <__ieee754_fmod+0x8a>
 8018278:	3a01      	subs	r2, #1
 801827a:	005b      	lsls	r3, r3, #1
 801827c:	e7bc      	b.n	80181f8 <__ieee754_fmod+0x9c>
 801827e:	4a3e      	ldr	r2, [pc, #248]	; (8018378 <__ieee754_fmod+0x21c>)
 8018280:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 8018284:	2b00      	cmp	r3, #0
 8018286:	ddb9      	ble.n	80181fc <__ieee754_fmod+0xa0>
 8018288:	3a01      	subs	r2, #1
 801828a:	005b      	lsls	r3, r3, #1
 801828c:	e7fa      	b.n	8018284 <__ieee754_fmod+0x128>
 801828e:	ea4f 522e 	mov.w	r2, lr, asr #20
 8018292:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018296:	e7b1      	b.n	80181fc <__ieee754_fmod+0xa0>
 8018298:	1a5c      	subs	r4, r3, r1
 801829a:	2c1f      	cmp	r4, #31
 801829c:	dc0a      	bgt.n	80182b4 <__ieee754_fmod+0x158>
 801829e:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80182a2:	fa08 f804 	lsl.w	r8, r8, r4
 80182a6:	fa2a f303 	lsr.w	r3, sl, r3
 80182aa:	ea43 0308 	orr.w	r3, r3, r8
 80182ae:	fa0a f404 	lsl.w	r4, sl, r4
 80182b2:	e7aa      	b.n	801820a <__ieee754_fmod+0xae>
 80182b4:	4b31      	ldr	r3, [pc, #196]	; (801837c <__ieee754_fmod+0x220>)
 80182b6:	1a5b      	subs	r3, r3, r1
 80182b8:	fa0a f303 	lsl.w	r3, sl, r3
 80182bc:	2400      	movs	r4, #0
 80182be:	e7a4      	b.n	801820a <__ieee754_fmod+0xae>
 80182c0:	eba0 0c02 	sub.w	ip, r0, r2
 80182c4:	f1bc 0f1f 	cmp.w	ip, #31
 80182c8:	dc0a      	bgt.n	80182e0 <__ieee754_fmod+0x184>
 80182ca:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80182ce:	fa0e fe0c 	lsl.w	lr, lr, ip
 80182d2:	fa27 f606 	lsr.w	r6, r7, r6
 80182d6:	ea46 060e 	orr.w	r6, r6, lr
 80182da:	fa07 fc0c 	lsl.w	ip, r7, ip
 80182de:	e79b      	b.n	8018218 <__ieee754_fmod+0xbc>
 80182e0:	4e26      	ldr	r6, [pc, #152]	; (801837c <__ieee754_fmod+0x220>)
 80182e2:	1ab6      	subs	r6, r6, r2
 80182e4:	fa07 f606 	lsl.w	r6, r7, r6
 80182e8:	f04f 0c00 	mov.w	ip, #0
 80182ec:	e794      	b.n	8018218 <__ieee754_fmod+0xbc>
 80182ee:	4564      	cmp	r4, ip
 80182f0:	bf38      	it	cc
 80182f2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80182f6:	2800      	cmp	r0, #0
 80182f8:	da05      	bge.n	8018306 <__ieee754_fmod+0x1aa>
 80182fa:	0fe0      	lsrs	r0, r4, #31
 80182fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018300:	0064      	lsls	r4, r4, #1
 8018302:	3901      	subs	r1, #1
 8018304:	e789      	b.n	801821a <__ieee754_fmod+0xbe>
 8018306:	ea50 0307 	orrs.w	r3, r0, r7
 801830a:	f43f af5b 	beq.w	80181c4 <__ieee754_fmod+0x68>
 801830e:	0ffb      	lsrs	r3, r7, #31
 8018310:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8018314:	007c      	lsls	r4, r7, #1
 8018316:	e7f4      	b.n	8018302 <__ieee754_fmod+0x1a6>
 8018318:	0fe1      	lsrs	r1, r4, #31
 801831a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801831e:	0064      	lsls	r4, r4, #1
 8018320:	3a01      	subs	r2, #1
 8018322:	e78a      	b.n	801823a <__ieee754_fmod+0xde>
 8018324:	1a89      	subs	r1, r1, r2
 8018326:	2914      	cmp	r1, #20
 8018328:	dc0a      	bgt.n	8018340 <__ieee754_fmod+0x1e4>
 801832a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801832e:	fa03 f202 	lsl.w	r2, r3, r2
 8018332:	40cc      	lsrs	r4, r1
 8018334:	4322      	orrs	r2, r4
 8018336:	410b      	asrs	r3, r1
 8018338:	ea43 0105 	orr.w	r1, r3, r5
 801833c:	4610      	mov	r0, r2
 801833e:	e731      	b.n	80181a4 <__ieee754_fmod+0x48>
 8018340:	291f      	cmp	r1, #31
 8018342:	dc07      	bgt.n	8018354 <__ieee754_fmod+0x1f8>
 8018344:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8018348:	40cc      	lsrs	r4, r1
 801834a:	fa03 f202 	lsl.w	r2, r3, r2
 801834e:	4322      	orrs	r2, r4
 8018350:	462b      	mov	r3, r5
 8018352:	e7f1      	b.n	8018338 <__ieee754_fmod+0x1dc>
 8018354:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8018358:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801835c:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8018360:	32e2      	adds	r2, #226	; 0xe2
 8018362:	fa43 f202 	asr.w	r2, r3, r2
 8018366:	e7f3      	b.n	8018350 <__ieee754_fmod+0x1f4>
 8018368:	7fefffff 	.word	0x7fefffff
 801836c:	7ff00000 	.word	0x7ff00000
 8018370:	0801a598 	.word	0x0801a598
 8018374:	fffffbed 	.word	0xfffffbed
 8018378:	fffffc02 	.word	0xfffffc02
 801837c:	fffffbe2 	.word	0xfffffbe2

08018380 <finite>:
 8018380:	b082      	sub	sp, #8
 8018382:	ed8d 0b00 	vstr	d0, [sp]
 8018386:	9801      	ldr	r0, [sp, #4]
 8018388:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801838c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8018390:	0fc0      	lsrs	r0, r0, #31
 8018392:	b002      	add	sp, #8
 8018394:	4770      	bx	lr
	...

08018398 <_init>:
 8018398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801839a:	bf00      	nop
 801839c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801839e:	bc08      	pop	{r3}
 80183a0:	469e      	mov	lr, r3
 80183a2:	4770      	bx	lr

080183a4 <_fini>:
 80183a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183a6:	bf00      	nop
 80183a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183aa:	bc08      	pop	{r3}
 80183ac:	469e      	mov	lr, r3
 80183ae:	4770      	bx	lr
